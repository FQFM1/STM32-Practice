
L298N.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007884  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08007b1c  08007b1c  00008b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007b2c  08007b2c  00008b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08007b30  08007b30  00008b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08007b34  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000d0  24000010  08007b44  00009010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000e0  08007b44  000090e0  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000128af  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000217b  00000000  00000000  0001b8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000010b0  00000000  00000000  0001da68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000ce5  00000000  00000000  0001eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037c3c  00000000  00000000  0001f7fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000139e2  00000000  00000000  00057439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016f215  00000000  00000000  0006ae1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001da030  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000047e0  00000000  00000000  001da074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001de854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007b04 	.word	0x08007b04

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08007b04 	.word	0x08007b04

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b084      	sub	sp, #16
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 fad9 	bl	8000894 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fcb3 	bl	8000c4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f88f 	bl	8000408 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80002ea:	f000 f93d 	bl	8000568 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ee:	f000 fa75 	bl	80007dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80002f2:	f000 f9b9 	bl	8000668 <MX_TIM1_Init>
  MX_ADC3_Init();
 80002f6:	f000 f955 	bl	80005a4 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  int dir = 0;
 80002fa:	2300      	movs	r3, #0
 80002fc:	60fb      	str	r3, [r7, #12]
  int value = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	60bb      	str	r3, [r7, #8]
  int speed = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	607b      	str	r3, [r7, #4]

  HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY, ADC_SINGLE_ENDED);
 8000306:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800030a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800030e:	483a      	ldr	r0, [pc, #232]	@ (80003f8 <main+0x120>)
 8000310:	f002 f988 	bl	8002624 <HAL_ADCEx_Calibration_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc3);	// Motor speed control
 8000314:	4838      	ldr	r0, [pc, #224]	@ (80003f8 <main+0x120>)
 8000316:	f001 f945 	bl	80015a4 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 800031a:	f04f 31ff 	mov.w	r1, #4294967295
 800031e:	4836      	ldr	r0, [pc, #216]	@ (80003f8 <main+0x120>)
 8000320:	f001 fa3e 	bl	80017a0 <HAL_ADC_PollForConversion>
	  value = HAL_ADC_GetValue(&hadc3);
 8000324:	4834      	ldr	r0, [pc, #208]	@ (80003f8 <main+0x120>)
 8000326:	f001 fb2f 	bl	8001988 <HAL_ADC_GetValue>
 800032a:	4603      	mov	r3, r0
 800032c:	60bb      	str	r3, [r7, #8]
	  speed = value / 2;	// 乱写的，ADC采集数值不准，目前还没搞懂为啥
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	2b00      	cmp	r3, #0
 8000332:	da00      	bge.n	8000336 <main+0x5e>
 8000334:	3301      	adds	r3, #1
 8000336:	105b      	asrs	r3, r3, #1
 8000338:	607b      	str	r3, [r7, #4]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
 800033a:	4b30      	ldr	r3, [pc, #192]	@ (80003fc <main+0x124>)
 800033c:	681b      	ldr	r3, [r3, #0]
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
 8000342:	4b2e      	ldr	r3, [pc, #184]	@ (80003fc <main+0x124>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_ADC_Stop(&hadc3);
 800034a:	482b      	ldr	r0, [pc, #172]	@ (80003f8 <main+0x120>)
 800034c:	f001 f9f4 	bl	8001738 <HAL_ADC_Stop>

	  if(HAL_GPIO_ReadPin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin) == GPIO_PIN_SET)		// Motor direction switch
 8000350:	2101      	movs	r1, #1
 8000352:	482b      	ldr	r0, [pc, #172]	@ (8000400 <main+0x128>)
 8000354:	f002 fcd6 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000358:	4603      	mov	r3, r0
 800035a:	2b01      	cmp	r3, #1
 800035c:	d10f      	bne.n	800037e <main+0xa6>
	  {
		  while(HAL_GPIO_ReadPin(MOTOR_DIR_GPIO_Port, MOTOR_DIR_Pin) == GPIO_PIN_SET);
 800035e:	bf00      	nop
 8000360:	2101      	movs	r1, #1
 8000362:	4827      	ldr	r0, [pc, #156]	@ (8000400 <main+0x128>)
 8000364:	f002 fcce 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000368:	4603      	mov	r3, r0
 800036a:	2b01      	cmp	r3, #1
 800036c:	d0f8      	beq.n	8000360 <main+0x88>
		  dir++;
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	3301      	adds	r3, #1
 8000372:	60fb      	str	r3, [r7, #12]
		  if (dir == 3)
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	2b03      	cmp	r3, #3
 8000378:	d101      	bne.n	800037e <main+0xa6>
		  {
			  dir = 1;
 800037a:	2301      	movs	r3, #1
 800037c:	60fb      	str	r3, [r7, #12]
		  }
	  }

	  if(HAL_GPIO_ReadPin(MOTOR_STOP_GPIO_Port, MOTOR_STOP_Pin) == GPIO_PIN_SET)	// Motor stop
 800037e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000382:	4820      	ldr	r0, [pc, #128]	@ (8000404 <main+0x12c>)
 8000384:	f002 fcbe 	bl	8002d04 <HAL_GPIO_ReadPin>
 8000388:	4603      	mov	r3, r0
 800038a:	2b01      	cmp	r3, #1
 800038c:	d10a      	bne.n	80003a4 <main+0xcc>
	  {
		  while(HAL_GPIO_ReadPin(MOTOR_STOP_GPIO_Port, MOTOR_STOP_Pin) == GPIO_PIN_SET);
 800038e:	bf00      	nop
 8000390:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000394:	481b      	ldr	r0, [pc, #108]	@ (8000404 <main+0x12c>)
 8000396:	f002 fcb5 	bl	8002d04 <HAL_GPIO_ReadPin>
 800039a:	4603      	mov	r3, r0
 800039c:	2b01      	cmp	r3, #1
 800039e:	d0f7      	beq.n	8000390 <main+0xb8>
		  dir = 0;
 80003a0:	2300      	movs	r3, #0
 80003a2:	60fb      	str	r3, [r7, #12]
	  }

	  if (dir == 0)			// Stop
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d10b      	bne.n	80003c2 <main+0xea>
	  {
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003aa:	2100      	movs	r1, #0
 80003ac:	4813      	ldr	r0, [pc, #76]	@ (80003fc <main+0x124>)
 80003ae:	f006 fb8f 	bl	8006ad0 <HAL_TIM_PWM_Stop>
		  HAL_Delay(100);
 80003b2:	2064      	movs	r0, #100	@ 0x64
 80003b4:	f000 fcdc 	bl	8000d70 <HAL_Delay>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003b8:	2104      	movs	r1, #4
 80003ba:	4810      	ldr	r0, [pc, #64]	@ (80003fc <main+0x124>)
 80003bc:	f006 fb88 	bl	8006ad0 <HAL_TIM_PWM_Stop>
 80003c0:	e7a8      	b.n	8000314 <main+0x3c>
	  }
	  else if (dir == 1)	// Forward
 80003c2:	68fb      	ldr	r3, [r7, #12]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	d10b      	bne.n	80003e0 <main+0x108>
	  {
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003c8:	2100      	movs	r1, #0
 80003ca:	480c      	ldr	r0, [pc, #48]	@ (80003fc <main+0x124>)
 80003cc:	f006 fa72 	bl	80068b4 <HAL_TIM_PWM_Start>
		  HAL_Delay(100);
 80003d0:	2064      	movs	r0, #100	@ 0x64
 80003d2:	f000 fccd 	bl	8000d70 <HAL_Delay>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80003d6:	2104      	movs	r1, #4
 80003d8:	4808      	ldr	r0, [pc, #32]	@ (80003fc <main+0x124>)
 80003da:	f006 fb79 	bl	8006ad0 <HAL_TIM_PWM_Stop>
 80003de:	e799      	b.n	8000314 <main+0x3c>
	  }
	  else if (dir == 2)	// Backward
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d196      	bne.n	8000314 <main+0x3c>
	  {
		  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80003e6:	2104      	movs	r1, #4
 80003e8:	4804      	ldr	r0, [pc, #16]	@ (80003fc <main+0x124>)
 80003ea:	f006 fa63 	bl	80068b4 <HAL_TIM_PWM_Start>
		  HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80003ee:	2100      	movs	r1, #0
 80003f0:	4802      	ldr	r0, [pc, #8]	@ (80003fc <main+0x124>)
 80003f2:	f006 fb6d 	bl	8006ad0 <HAL_TIM_PWM_Stop>
	  HAL_ADC_Start(&hadc3);	// Motor speed control
 80003f6:	e78d      	b.n	8000314 <main+0x3c>
 80003f8:	2400002c 	.word	0x2400002c
 80003fc:	24000090 	.word	0x24000090
 8000400:	58020000 	.word	0x58020000
 8000404:	58020800 	.word	0x58020800

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b09e      	sub	sp, #120	@ 0x78
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000412:	224c      	movs	r2, #76	@ 0x4c
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f007 fb48 	bl	8007aac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	f107 030c 	add.w	r3, r7, #12
 8000420:	2220      	movs	r2, #32
 8000422:	2100      	movs	r1, #0
 8000424:	4618      	mov	r0, r3
 8000426:	f007 fb41 	bl	8007aac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800042a:	2002      	movs	r0, #2
 800042c:	f002 fc82 	bl	8002d34 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000430:	2300      	movs	r3, #0
 8000432:	60bb      	str	r3, [r7, #8]
 8000434:	4b49      	ldr	r3, [pc, #292]	@ (800055c <SystemClock_Config+0x154>)
 8000436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000438:	4a48      	ldr	r2, [pc, #288]	@ (800055c <SystemClock_Config+0x154>)
 800043a:	f023 0301 	bic.w	r3, r3, #1
 800043e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000440:	4b46      	ldr	r3, [pc, #280]	@ (800055c <SystemClock_Config+0x154>)
 8000442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000444:	f003 0301 	and.w	r3, r3, #1
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	4b45      	ldr	r3, [pc, #276]	@ (8000560 <SystemClock_Config+0x158>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a44      	ldr	r2, [pc, #272]	@ (8000560 <SystemClock_Config+0x158>)
 8000450:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b42      	ldr	r3, [pc, #264]	@ (8000560 <SystemClock_Config+0x158>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800045e:	60bb      	str	r3, [r7, #8]
 8000460:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000462:	bf00      	nop
 8000464:	4b3e      	ldr	r3, [pc, #248]	@ (8000560 <SystemClock_Config+0x158>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800046c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000470:	d1f8      	bne.n	8000464 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000472:	4b3c      	ldr	r3, [pc, #240]	@ (8000564 <SystemClock_Config+0x15c>)
 8000474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000478:	4a3a      	ldr	r2, [pc, #232]	@ (8000564 <SystemClock_Config+0x15c>)
 800047a:	f043 0302 	orr.w	r3, r3, #2
 800047e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000482:	4b38      	ldr	r3, [pc, #224]	@ (8000564 <SystemClock_Config+0x15c>)
 8000484:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000488:	f003 0302 	and.w	r3, r3, #2
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000490:	2300      	movs	r3, #0
 8000492:	603b      	str	r3, [r7, #0]
 8000494:	4b32      	ldr	r3, [pc, #200]	@ (8000560 <SystemClock_Config+0x158>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	4a31      	ldr	r2, [pc, #196]	@ (8000560 <SystemClock_Config+0x158>)
 800049a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800049e:	6193      	str	r3, [r2, #24]
 80004a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000560 <SystemClock_Config+0x158>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80004a8:	603b      	str	r3, [r7, #0]
 80004aa:	4b2c      	ldr	r3, [pc, #176]	@ (800055c <SystemClock_Config+0x154>)
 80004ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ae:	4a2b      	ldr	r2, [pc, #172]	@ (800055c <SystemClock_Config+0x154>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80004b6:	4b29      	ldr	r3, [pc, #164]	@ (800055c <SystemClock_Config+0x154>)
 80004b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80004c2:	bf00      	nop
 80004c4:	4b26      	ldr	r3, [pc, #152]	@ (8000560 <SystemClock_Config+0x158>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80004cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80004d0:	d1f8      	bne.n	80004c4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004d2:	2302      	movs	r3, #2
 80004d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80004d6:	2301      	movs	r3, #1
 80004d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004da:	2340      	movs	r3, #64	@ 0x40
 80004dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004de:	2302      	movs	r3, #2
 80004e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80004e2:	2300      	movs	r3, #0
 80004e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80004e6:	2304      	movs	r3, #4
 80004e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80004ea:	233c      	movs	r3, #60	@ 0x3c
 80004ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80004ee:	2302      	movs	r3, #2
 80004f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80004fa:	230c      	movs	r3, #12
 80004fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80004fe:	2300      	movs	r3, #0
 8000500:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000506:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800050a:	4618      	mov	r0, r3
 800050c:	f002 fc4c 	bl	8002da8 <HAL_RCC_OscConfig>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d001      	beq.n	800051a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000516:	f000 f9e9 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800051a:	233f      	movs	r3, #63	@ 0x3f
 800051c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800051e:	2303      	movs	r3, #3
 8000520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000526:	2308      	movs	r3, #8
 8000528:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800052a:	2340      	movs	r3, #64	@ 0x40
 800052c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800052e:	2340      	movs	r3, #64	@ 0x40
 8000530:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000532:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000536:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000538:	2340      	movs	r3, #64	@ 0x40
 800053a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2104      	movs	r1, #4
 8000542:	4618      	mov	r0, r3
 8000544:	f003 f88a 	bl	800365c <HAL_RCC_ClockConfig>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d001      	beq.n	8000552 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800054e:	f000 f9cd 	bl	80008ec <Error_Handler>
  }
}
 8000552:	bf00      	nop
 8000554:	3778      	adds	r7, #120	@ 0x78
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
 800055a:	bf00      	nop
 800055c:	58000400 	.word	0x58000400
 8000560:	58024800 	.word	0x58024800
 8000564:	58024400 	.word	0x58024400

08000568 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b0b0      	sub	sp, #192	@ 0xc0
 800056c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800056e:	463b      	mov	r3, r7
 8000570:	22c0      	movs	r2, #192	@ 0xc0
 8000572:	2100      	movs	r1, #0
 8000574:	4618      	mov	r0, r3
 8000576:	f007 fa99 	bl	8007aac <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CKPER;
 800057a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.CkperClockSelection = RCC_CLKPSOURCE_HSI;
 8000586:	2300      	movs	r3, #0
 8000588:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800058a:	463b      	mov	r3, r7
 800058c:	4618      	mov	r0, r3
 800058e:	f003 fbdb 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <PeriphCommonClock_Config+0x34>
  {
    Error_Handler();
 8000598:	f000 f9a8 	bl	80008ec <Error_Handler>
  }
}
 800059c:	bf00      	nop
 800059e:	37c0      	adds	r7, #192	@ 0xc0
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b088      	sub	sp, #32
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2200      	movs	r2, #0
 80005ae:	601a      	str	r2, [r3, #0]
 80005b0:	605a      	str	r2, [r3, #4]
 80005b2:	609a      	str	r2, [r3, #8]
 80005b4:	60da      	str	r2, [r3, #12]
 80005b6:	611a      	str	r2, [r3, #16]
 80005b8:	615a      	str	r2, [r3, #20]
 80005ba:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80005bc:	4b27      	ldr	r3, [pc, #156]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005be:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <MX_ADC3_Init+0xbc>)
 80005c0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B_OPT;
 80005c2:	4b26      	ldr	r3, [pc, #152]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005c4:	2218      	movs	r2, #24
 80005c6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005c8:	4b24      	ldr	r3, [pc, #144]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005ce:	4b23      	ldr	r3, [pc, #140]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005d0:	2204      	movs	r2, #4
 80005d2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80005d4:	4b21      	ldr	r3, [pc, #132]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80005da:	4b20      	ldr	r3, [pc, #128]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005dc:	2200      	movs	r2, #0
 80005de:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80005e0:	4b1e      	ldr	r3, [pc, #120]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80005e6:	4b1d      	ldr	r3, [pc, #116]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b1b      	ldr	r3, [pc, #108]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005f2:	4b1a      	ldr	r3, [pc, #104]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005f8:	4b18      	ldr	r3, [pc, #96]	@ (800065c <MX_ADC3_Init+0xb8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005fe:	4b17      	ldr	r3, [pc, #92]	@ (800065c <MX_ADC3_Init+0xb8>)
 8000600:	2200      	movs	r2, #0
 8000602:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000604:	4b15      	ldr	r3, [pc, #84]	@ (800065c <MX_ADC3_Init+0xb8>)
 8000606:	2200      	movs	r2, #0
 8000608:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800060a:	4b14      	ldr	r3, [pc, #80]	@ (800065c <MX_ADC3_Init+0xb8>)
 800060c:	2200      	movs	r2, #0
 800060e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000612:	4812      	ldr	r0, [pc, #72]	@ (800065c <MX_ADC3_Init+0xb8>)
 8000614:	f000 fe24 	bl	8001260 <HAL_ADC_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800061e:	f000 f965 	bl	80008ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_ADC3_Init+0xc0>)
 8000624:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000626:	2306      	movs	r3, #6
 8000628:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800062a:	2300      	movs	r3, #0
 800062c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800062e:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000632:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000634:	2304      	movs	r3, #4
 8000636:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800063c:	2300      	movs	r3, #0
 800063e:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	@ (800065c <MX_ADC3_Init+0xb8>)
 8000646:	f001 f9ad 	bl	80019a4 <HAL_ADC_ConfigChannel>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000650:	f000 f94c 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000654:	bf00      	nop
 8000656:	3720      	adds	r7, #32
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2400002c 	.word	0x2400002c
 8000660:	58026000 	.word	0x58026000
 8000664:	04300002 	.word	0x04300002

08000668 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b09a      	sub	sp, #104	@ 0x68
 800066c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800066e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800067c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000688:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800069c:	1d3b      	adds	r3, r7, #4
 800069e:	222c      	movs	r2, #44	@ 0x2c
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f007 fa02 	bl	8007aac <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006a8:	4b4a      	ldr	r3, [pc, #296]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006aa:	4a4b      	ldr	r2, [pc, #300]	@ (80007d8 <MX_TIM1_Init+0x170>)
 80006ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2400-1;
 80006ae:	4b49      	ldr	r3, [pc, #292]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006b0:	f640 125f 	movw	r2, #2399	@ 0x95f
 80006b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006b6:	4b47      	ldr	r3, [pc, #284]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000-1;
 80006bc:	4b45      	ldr	r3, [pc, #276]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006be:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80006c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006c4:	4b43      	ldr	r3, [pc, #268]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006ca:	4b42      	ldr	r3, [pc, #264]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d0:	4b40      	ldr	r3, [pc, #256]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80006d6:	483f      	ldr	r0, [pc, #252]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006d8:	f006 f834 	bl	8006744 <HAL_TIM_Base_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80006e2:	f000 f903 	bl	80008ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ea:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80006ec:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006f0:	4619      	mov	r1, r3
 80006f2:	4838      	ldr	r0, [pc, #224]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80006f4:	f006 fb96 	bl	8006e24 <HAL_TIM_ConfigClockSource>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80006fe:	f000 f8f5 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000702:	4834      	ldr	r0, [pc, #208]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 8000704:	f006 f875 	bl	80067f2 <HAL_TIM_PWM_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800070e:	f000 f8ed 	bl	80008ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000712:	2300      	movs	r3, #0
 8000714:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000716:	2300      	movs	r3, #0
 8000718:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800071a:	2300      	movs	r3, #0
 800071c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800071e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000722:	4619      	mov	r1, r3
 8000724:	482b      	ldr	r0, [pc, #172]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 8000726:	f007 f8b5 	bl	8007894 <HAL_TIMEx_MasterConfigSynchronization>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_TIM1_Init+0xcc>
  {
    Error_Handler();
 8000730:	f000 f8dc 	bl	80008ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000734:	2360      	movs	r3, #96	@ 0x60
 8000736:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800073c:	2300      	movs	r3, #0
 800073e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000740:	2300      	movs	r3, #0
 8000742:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000748:	2300      	movs	r3, #0
 800074a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800074c:	2300      	movs	r3, #0
 800074e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000750:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000754:	2200      	movs	r2, #0
 8000756:	4619      	mov	r1, r3
 8000758:	481e      	ldr	r0, [pc, #120]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 800075a:	f006 fa4f 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000764:	f000 f8c2 	bl	80008ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000768:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800076c:	2204      	movs	r2, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 8000772:	f006 fa43 	bl	8006bfc <HAL_TIM_PWM_ConfigChannel>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800077c:	f000 f8b6 	bl	80008ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000784:	2300      	movs	r3, #0
 8000786:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000788:	2300      	movs	r3, #0
 800078a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000790:	2300      	movs	r3, #0
 8000792:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000794:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000798:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007a2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007a6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4619      	mov	r1, r3
 80007b4:	4807      	ldr	r0, [pc, #28]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80007b6:	f007 f8fb 	bl	80079b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80007c0:	f000 f894 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007c4:	4803      	ldr	r0, [pc, #12]	@ (80007d4 <MX_TIM1_Init+0x16c>)
 80007c6:	f000 f923 	bl	8000a10 <HAL_TIM_MspPostInit>

}
 80007ca:	bf00      	nop
 80007cc:	3768      	adds	r7, #104	@ 0x68
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	24000090 	.word	0x24000090
 80007d8:	40010000 	.word	0x40010000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <MX_GPIO_Init+0xac>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	4a23      	ldr	r2, [pc, #140]	@ (8000888 <MX_GPIO_Init+0xac>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000802:	4b21      	ldr	r3, [pc, #132]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000812:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000816:	4a1c      	ldr	r2, [pc, #112]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000820:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000826:	f003 0304 	and.w	r3, r3, #4
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800082e:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000834:	4a14      	ldr	r2, [pc, #80]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800083a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083e:	4b12      	ldr	r3, [pc, #72]	@ (8000888 <MX_GPIO_Init+0xac>)
 8000840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000844:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : MOTOR_STOP_Pin */
  GPIO_InitStruct.Pin = MOTOR_STOP_Pin;
 800084c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_STOP_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 030c 	add.w	r3, r7, #12
 800085e:	4619      	mov	r1, r3
 8000860:	480a      	ldr	r0, [pc, #40]	@ (800088c <MX_GPIO_Init+0xb0>)
 8000862:	f002 f89f 	bl	80029a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MOTOR_DIR_Pin */
  GPIO_InitStruct.Pin = MOTOR_DIR_Pin;
 8000866:	2301      	movs	r3, #1
 8000868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MOTOR_DIR_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	4619      	mov	r1, r3
 8000878:	4805      	ldr	r0, [pc, #20]	@ (8000890 <MX_GPIO_Init+0xb4>)
 800087a:	f002 f893 	bl	80029a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087e:	bf00      	nop
 8000880:	3720      	adds	r7, #32
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400
 800088c:	58020800 	.word	0x58020800
 8000890:	58020000 	.word	0x58020000

08000894 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80008a6:	f002 f805 	bl	80028b4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80008aa:	2301      	movs	r3, #1
 80008ac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80008b6:	231f      	movs	r3, #31
 80008b8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80008ba:	2387      	movs	r3, #135	@ 0x87
 80008bc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80008be:	2300      	movs	r3, #0
 80008c0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80008c2:	2300      	movs	r3, #0
 80008c4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80008ca:	2301      	movs	r3, #1
 80008cc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80008d2:	2300      	movs	r3, #0
 80008d4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80008d6:	463b      	mov	r3, r7
 80008d8:	4618      	mov	r0, r3
 80008da:	f002 f823 	bl	8002924 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80008de:	2004      	movs	r0, #4
 80008e0:	f002 f800 	bl	80028e4 <HAL_MPU_Enable>

}
 80008e4:	bf00      	nop
 80008e6:	3710      	adds	r7, #16
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <Error_Handler+0x8>

080008f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000928 <HAL_MspInit+0x30>)
 8000900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000904:	4a08      	ldr	r2, [pc, #32]	@ (8000928 <HAL_MspInit+0x30>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800090e:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <HAL_MspInit+0x30>)
 8000910:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	58024400 	.word	0x58024400

0800092c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b0b4      	sub	sp, #208	@ 0xd0
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000934:	f107 0310 	add.w	r3, r7, #16
 8000938:	22c0      	movs	r2, #192	@ 0xc0
 800093a:	2100      	movs	r1, #0
 800093c:	4618      	mov	r0, r3
 800093e:	f007 f8b5 	bl	8007aac <memset>
  if(hadc->Instance==ADC3)
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <HAL_ADC_MspInit+0x98>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d137      	bne.n	80009bc <HAL_ADC_MspInit+0x90>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800094c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_CLKP;
 8000958:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800095c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000960:	f107 0310 	add.w	r3, r7, #16
 8000964:	4618      	mov	r0, r3
 8000966:	f003 f9ef 	bl	8003d48 <HAL_RCCEx_PeriphCLKConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 8000970:	f7ff ffbc 	bl	80008ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	4a13      	ldr	r2, [pc, #76]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 800097c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000980:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000984:	4b10      	ldr	r3, [pc, #64]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 8000986:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800098e:	60fb      	str	r3, [r7, #12]
 8000990:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000992:	4b0d      	ldr	r3, [pc, #52]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	4a0b      	ldr	r2, [pc, #44]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 800099a:	f043 0304 	orr.w	r3, r3, #4
 800099e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a2:	4b09      	ldr	r3, [pc, #36]	@ (80009c8 <HAL_ADC_MspInit+0x9c>)
 80009a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a8:	f003 0304 	and.w	r3, r3, #4
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80009b0:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 80009b4:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 80009b8:	f000 fa0a 	bl	8000dd0 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80009bc:	bf00      	nop
 80009be:	37d0      	adds	r7, #208	@ 0xd0
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	58026000 	.word	0x58026000
 80009c8:	58024400 	.word	0x58024400

080009cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	4a0b      	ldr	r2, [pc, #44]	@ (8000a08 <HAL_TIM_Base_MspInit+0x3c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d10e      	bne.n	80009fc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009de:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009e4:	4a09      	ldr	r2, [pc, #36]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009e6:	f043 0301 	orr.w	r3, r3, #1
 80009ea:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80009ee:	4b07      	ldr	r3, [pc, #28]	@ (8000a0c <HAL_TIM_Base_MspInit+0x40>)
 80009f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009fc:	bf00      	nop
 80009fe:	3714      	adds	r7, #20
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	40010000 	.word	0x40010000
 8000a0c:	58024400 	.word	0x58024400

08000a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a13      	ldr	r2, [pc, #76]	@ (8000a7c <HAL_TIM_MspPostInit+0x6c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d11f      	bne.n	8000a72 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b13      	ldr	r3, [pc, #76]	@ (8000a80 <HAL_TIM_MspPostInit+0x70>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	4a11      	ldr	r2, [pc, #68]	@ (8000a80 <HAL_TIM_MspPostInit+0x70>)
 8000a3a:	f043 0301 	orr.w	r3, r3, #1
 8000a3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <HAL_TIM_MspPostInit+0x70>)
 8000a44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a48:	f003 0301 	and.w	r3, r3, #1
 8000a4c:	60bb      	str	r3, [r7, #8]
 8000a4e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA9     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000a50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a56:	2302      	movs	r3, #2
 8000a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4805      	ldr	r0, [pc, #20]	@ (8000a84 <HAL_TIM_MspPostInit+0x74>)
 8000a6e:	f001 ff99 	bl	80029a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a72:	bf00      	nop
 8000a74:	3720      	adds	r7, #32
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40010000 	.word	0x40010000
 8000a80:	58024400 	.word	0x58024400
 8000a84:	58020000 	.word	0x58020000

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a8c:	bf00      	nop
 8000a8e:	e7fd      	b.n	8000a8c <NMI_Handler+0x4>

08000a90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <HardFault_Handler+0x4>

08000a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <MemManage_Handler+0x4>

08000aa0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <BusFault_Handler+0x4>

08000aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <UsageFault_Handler+0x4>

08000ab0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ade:	f000 f927 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000aec:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <SystemInit+0xe4>)
 8000aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000af2:	4a36      	ldr	r2, [pc, #216]	@ (8000bcc <SystemInit+0xe4>)
 8000af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000afc:	4b34      	ldr	r3, [pc, #208]	@ (8000bd0 <SystemInit+0xe8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f003 030f 	and.w	r3, r3, #15
 8000b04:	2b06      	cmp	r3, #6
 8000b06:	d807      	bhi.n	8000b18 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b08:	4b31      	ldr	r3, [pc, #196]	@ (8000bd0 <SystemInit+0xe8>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f023 030f 	bic.w	r3, r3, #15
 8000b10:	4a2f      	ldr	r2, [pc, #188]	@ (8000bd0 <SystemInit+0xe8>)
 8000b12:	f043 0307 	orr.w	r3, r3, #7
 8000b16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b18:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <SystemInit+0xec>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd4 <SystemInit+0xec>)
 8000b1e:	f043 0301 	orr.w	r3, r3, #1
 8000b22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b24:	4b2b      	ldr	r3, [pc, #172]	@ (8000bd4 <SystemInit+0xec>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd4 <SystemInit+0xec>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4929      	ldr	r1, [pc, #164]	@ (8000bd4 <SystemInit+0xec>)
 8000b30:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0xf0>)
 8000b32:	4013      	ands	r3, r2
 8000b34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b36:	4b26      	ldr	r3, [pc, #152]	@ (8000bd0 <SystemInit+0xe8>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d007      	beq.n	8000b52 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b42:	4b23      	ldr	r3, [pc, #140]	@ (8000bd0 <SystemInit+0xe8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f023 030f 	bic.w	r3, r3, #15
 8000b4a:	4a21      	ldr	r2, [pc, #132]	@ (8000bd0 <SystemInit+0xe8>)
 8000b4c:	f043 0307 	orr.w	r3, r3, #7
 8000b50:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b52:	4b20      	ldr	r3, [pc, #128]	@ (8000bd4 <SystemInit+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b58:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd4 <SystemInit+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <SystemInit+0xec>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b64:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <SystemInit+0xec>)
 8000b66:	4a1d      	ldr	r2, [pc, #116]	@ (8000bdc <SystemInit+0xf4>)
 8000b68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <SystemInit+0xec>)
 8000b6c:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <SystemInit+0xf8>)
 8000b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b70:	4b18      	ldr	r3, [pc, #96]	@ (8000bd4 <SystemInit+0xec>)
 8000b72:	4a1c      	ldr	r2, [pc, #112]	@ (8000be4 <SystemInit+0xfc>)
 8000b74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b76:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <SystemInit+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <SystemInit+0xec>)
 8000b7e:	4a19      	ldr	r2, [pc, #100]	@ (8000be4 <SystemInit+0xfc>)
 8000b80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b82:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <SystemInit+0xec>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <SystemInit+0xec>)
 8000b8a:	4a16      	ldr	r2, [pc, #88]	@ (8000be4 <SystemInit+0xfc>)
 8000b8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <SystemInit+0xec>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd4 <SystemInit+0xec>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd4 <SystemInit+0xec>)
 8000b9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <SystemInit+0xec>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ba6:	4b10      	ldr	r3, [pc, #64]	@ (8000be8 <SystemInit+0x100>)
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <SystemInit+0x104>)
 8000bac:	4013      	ands	r3, r2
 8000bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bb2:	d202      	bcs.n	8000bba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf0 <SystemInit+0x108>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <SystemInit+0x10c>)
 8000bbc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bc0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00
 8000bd0:	52002000 	.word	0x52002000
 8000bd4:	58024400 	.word	0x58024400
 8000bd8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000bdc:	02020200 	.word	0x02020200
 8000be0:	01ff0000 	.word	0x01ff0000
 8000be4:	01010280 	.word	0x01010280
 8000be8:	5c001000 	.word	0x5c001000
 8000bec:	ffff0000 	.word	0xffff0000
 8000bf0:	51008108 	.word	0x51008108
 8000bf4:	52004000 	.word	0x52004000

08000bf8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bf8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c30 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bfc:	f7ff ff74 	bl	8000ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c00:	480c      	ldr	r0, [pc, #48]	@ (8000c34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c02:	490d      	ldr	r1, [pc, #52]	@ (8000c38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c04:	4a0d      	ldr	r2, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c08:	e002      	b.n	8000c10 <LoopCopyDataInit>

08000c0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0e:	3304      	adds	r3, #4

08000c10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c14:	d3f9      	bcc.n	8000c0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c18:	4c0a      	ldr	r4, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c1c:	e001      	b.n	8000c22 <LoopFillZerobss>

08000c1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c20:	3204      	adds	r2, #4

08000c22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c24:	d3fb      	bcc.n	8000c1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c26:	f006 ff49 	bl	8007abc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2a:	f7ff fb55 	bl	80002d8 <main>
  bx  lr
 8000c2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c38:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c3c:	08007b34 	.word	0x08007b34
  ldr r2, =_sbss
 8000c40:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c44:	240000e0 	.word	0x240000e0

08000c48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c48:	e7fe      	b.n	8000c48 <ADC3_IRQHandler>
	...

08000c4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f001 fdfc 	bl	8002850 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c58:	f002 feb6 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4b15      	ldr	r3, [pc, #84]	@ (8000cb4 <HAL_Init+0x68>)
 8000c60:	699b      	ldr	r3, [r3, #24]
 8000c62:	0a1b      	lsrs	r3, r3, #8
 8000c64:	f003 030f 	and.w	r3, r3, #15
 8000c68:	4913      	ldr	r1, [pc, #76]	@ (8000cb8 <HAL_Init+0x6c>)
 8000c6a:	5ccb      	ldrb	r3, [r1, r3]
 8000c6c:	f003 031f 	and.w	r3, r3, #31
 8000c70:	fa22 f303 	lsr.w	r3, r2, r3
 8000c74:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <HAL_Init+0x68>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	4a0e      	ldr	r2, [pc, #56]	@ (8000cb8 <HAL_Init+0x6c>)
 8000c80:	5cd3      	ldrb	r3, [r2, r3]
 8000c82:	f003 031f 	and.w	r3, r3, #31
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	fa22 f303 	lsr.w	r3, r2, r3
 8000c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8000cbc <HAL_Init+0x70>)
 8000c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c90:	4a0b      	ldr	r2, [pc, #44]	@ (8000cc0 <HAL_Init+0x74>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c96:	200f      	movs	r0, #15
 8000c98:	f000 f814 	bl	8000cc4 <HAL_InitTick>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	e002      	b.n	8000cac <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca6:	f7ff fe27 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000caa:	2300      	movs	r3, #0
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3708      	adds	r7, #8
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	58024400 	.word	0x58024400
 8000cb8:	08007b1c 	.word	0x08007b1c
 8000cbc:	24000004 	.word	0x24000004
 8000cc0:	24000000 	.word	0x24000000

08000cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000ccc:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <HAL_InitTick+0x60>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d101      	bne.n	8000cd8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	e021      	b.n	8000d1c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <HAL_InitTick+0x64>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <HAL_InitTick+0x60>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 fdd3 	bl	800289a <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295
 8000d0c:	f001 fdab 	bl	8002866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x68>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2400000c 	.word	0x2400000c
 8000d28:	24000000 	.word	0x24000000
 8000d2c:	24000008 	.word	0x24000008

08000d30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	2400000c 	.word	0x2400000c
 8000d54:	240000dc 	.word	0x240000dc

08000d58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	240000dc 	.word	0x240000dc

08000d70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	2400000c 	.word	0x2400000c

08000db8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000dbc:	4b03      	ldr	r3, [pc, #12]	@ (8000dcc <HAL_GetREVID+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	0c1b      	lsrs	r3, r3, #16
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	5c001000 	.word	0x5c001000

08000dd0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000dda:	4b07      	ldr	r3, [pc, #28]	@ (8000df8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	43db      	mvns	r3, r3
 8000de2:	401a      	ands	r2, r3
 8000de4:	4904      	ldr	r1, [pc, #16]	@ (8000df8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	4313      	orrs	r3, r2
 8000dea:	604b      	str	r3, [r1, #4]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	58000400 	.word	0x58000400

08000dfc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]
}
 8000e16:	bf00      	nop
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
 8000e2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	431a      	orrs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
}
 8000e3c:	bf00      	nop
 8000e3e:	370c      	adds	r7, #12
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr

08000e48 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr

08000e64 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
 8000e70:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3360      	adds	r3, #96	@ 0x60
 8000e76:	461a      	mov	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	4413      	add	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	430b      	orrs	r3, r1
 8000e92:	431a      	orrs	r2, r3
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8000e98:	bf00      	nop
 8000e9a:	371c      	adds	r7, #28
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b085      	sub	sp, #20
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	691b      	ldr	r3, [r3, #16]
 8000eb4:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	611a      	str	r2, [r3, #16]
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr

08000ed6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	b087      	sub	sp, #28
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	3360      	adds	r3, #96	@ 0x60
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	4413      	add	r3, r2
 8000eee:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	431a      	orrs	r2, r3
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	601a      	str	r2, [r3, #0]
  }
}
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d101      	bne.n	8000f24 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000f20:	2301      	movs	r3, #1
 8000f22:	e000      	b.n	8000f26 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	370c      	adds	r7, #12
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000f32:	b480      	push	{r7}
 8000f34:	b087      	sub	sp, #28
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	60f8      	str	r0, [r7, #12]
 8000f3a:	60b9      	str	r1, [r7, #8]
 8000f3c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	3330      	adds	r3, #48	@ 0x30
 8000f42:	461a      	mov	r2, r3
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	0a1b      	lsrs	r3, r3, #8
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	f003 030c 	and.w	r3, r3, #12
 8000f4e:	4413      	add	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	f003 031f 	and.w	r3, r3, #31
 8000f5c:	211f      	movs	r1, #31
 8000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f62:	43db      	mvns	r3, r3
 8000f64:	401a      	ands	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	0e9b      	lsrs	r3, r3, #26
 8000f6a:	f003 011f 	and.w	r1, r3, #31
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa01 f303 	lsl.w	r3, r1, r3
 8000f78:	431a      	orrs	r2, r3
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr

08000f8a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	b087      	sub	sp, #28
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	60f8      	str	r0, [r7, #12]
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3314      	adds	r3, #20
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	0e5b      	lsrs	r3, r3, #25
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	4413      	add	r3, r2
 8000fa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	0d1b      	lsrs	r3, r3, #20
 8000fb2:	f003 031f 	and.w	r3, r3, #31
 8000fb6:	2107      	movs	r1, #7
 8000fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	0d1b      	lsrs	r3, r3, #20
 8000fc4:	f003 031f 	and.w	r3, r3, #31
 8000fc8:	6879      	ldr	r1, [r7, #4]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000fd4:	bf00      	nop
 8000fd6:	371c      	adds	r7, #28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0318 	and.w	r3, r3, #24
 8001002:	4908      	ldr	r1, [pc, #32]	@ (8001024 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001004:	40d9      	lsrs	r1, r3
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	400b      	ands	r3, r1
 800100a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800100e:	431a      	orrs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001016:	bf00      	nop
 8001018:	3714      	adds	r7, #20
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	000fffff 	.word	0x000fffff

08001028 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	f003 031f 	and.w	r3, r3, #31
}
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689a      	ldr	r2, [r3, #8]
 800106c:	4b04      	ldr	r3, [pc, #16]	@ (8001080 <LL_ADC_DisableDeepPowerDown+0x20>)
 800106e:	4013      	ands	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	6093      	str	r3, [r2, #8]
}
 8001074:	bf00      	nop
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	5fffffc0 	.word	0x5fffffc0

08001084 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001094:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001098:	d101      	bne.n	800109e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800109a:	2301      	movs	r3, #1
 800109c:	e000      	b.n	80010a0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	4b05      	ldr	r3, [pc, #20]	@ (80010d0 <LL_ADC_EnableInternalRegulator+0x24>)
 80010ba:	4013      	ands	r3, r2
 80010bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	6fffffc0 	.word	0x6fffffc0

080010d4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80010e8:	d101      	bne.n	80010ee <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80010ea:	2301      	movs	r3, #1
 80010ec:	e000      	b.n	80010f0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr

080010fc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	689a      	ldr	r2, [r3, #8]
 8001108:	4b05      	ldr	r3, [pc, #20]	@ (8001120 <LL_ADC_Enable+0x24>)
 800110a:	4013      	ands	r3, r2
 800110c:	f043 0201 	orr.w	r2, r3, #1
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	7fffffc0 	.word	0x7fffffc0

08001124 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689a      	ldr	r2, [r3, #8]
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <LL_ADC_Disable+0x24>)
 8001132:	4013      	ands	r3, r2
 8001134:	f043 0202 	orr.w	r2, r3, #2
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	7fffffc0 	.word	0x7fffffc0

0800114c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b01      	cmp	r3, #1
 800115e:	d101      	bne.n	8001164 <LL_ADC_IsEnabled+0x18>
 8001160:	2301      	movs	r3, #1
 8001162:	e000      	b.n	8001166 <LL_ADC_IsEnabled+0x1a>
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b02      	cmp	r3, #2
 8001184:	d101      	bne.n	800118a <LL_ADC_IsDisableOngoing+0x18>
 8001186:	2301      	movs	r3, #1
 8001188:	e000      	b.n	800118c <LL_ADC_IsDisableOngoing+0x1a>
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	689a      	ldr	r2, [r3, #8]
 80011a4:	4b05      	ldr	r3, [pc, #20]	@ (80011bc <LL_ADC_REG_StartConversion+0x24>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	f043 0204 	orr.w	r2, r3, #4
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	7fffffc0 	.word	0x7fffffc0

080011c0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b083      	sub	sp, #12
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	689a      	ldr	r2, [r3, #8]
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <LL_ADC_REG_StopConversion+0x24>)
 80011ce:	4013      	ands	r3, r2
 80011d0:	f043 0210 	orr.w	r2, r3, #16
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	7fffffc0 	.word	0x7fffffc0

080011e8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 0304 	and.w	r3, r3, #4
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d101      	bne.n	8001200 <LL_ADC_REG_IsConversionOngoing+0x18>
 80011fc:	2301      	movs	r3, #1
 80011fe:	e000      	b.n	8001202 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001200:	2300      	movs	r3, #0
}
 8001202:	4618      	mov	r0, r3
 8001204:	370c      	adds	r7, #12
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	4b05      	ldr	r3, [pc, #20]	@ (8001234 <LL_ADC_INJ_StopConversion+0x24>)
 800121e:	4013      	ands	r3, r2
 8001220:	f043 0220 	orr.w	r2, r3, #32
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	7fffffc0 	.word	0x7fffffc0

08001238 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b08      	cmp	r3, #8
 800124a:	d101      	bne.n	8001250 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800124c:	2301      	movs	r3, #1
 800124e:	e000      	b.n	8001252 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b089      	sub	sp, #36	@ 0x24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001268:	2300      	movs	r3, #0
 800126a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800126c:	2300      	movs	r3, #0
 800126e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e18f      	b.n	800159a <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001284:	2b00      	cmp	r3, #0
 8001286:	d109      	bne.n	800129c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f7ff fb4f 	bl	800092c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff feef 	bl	8001084 <LL_ADC_IsDeepPowerDownEnabled>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fed5 	bl	8001060 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff ff0a 	bl	80010d4 <LL_ADC_IsInternalRegulatorEnabled>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d114      	bne.n	80012f0 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff feee 	bl	80010ac <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80012d0:	4b87      	ldr	r3, [pc, #540]	@ (80014f0 <HAL_ADC_Init+0x290>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	099b      	lsrs	r3, r3, #6
 80012d6:	4a87      	ldr	r2, [pc, #540]	@ (80014f4 <HAL_ADC_Init+0x294>)
 80012d8:	fba2 2303 	umull	r2, r3, r2, r3
 80012dc:	099b      	lsrs	r3, r3, #6
 80012de:	3301      	adds	r3, #1
 80012e0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012e2:	e002      	b.n	80012ea <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	3b01      	subs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1f9      	bne.n	80012e4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff feed 	bl	80010d4 <LL_ADC_IsInternalRegulatorEnabled>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d10d      	bne.n	800131c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001304:	f043 0210 	orr.w	r2, r3, #16
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001310:	f043 0201 	orr.w	r2, r3, #1
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff61 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001326:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800132c:	f003 0310 	and.w	r3, r3, #16
 8001330:	2b00      	cmp	r3, #0
 8001332:	f040 8129 	bne.w	8001588 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 8125 	bne.w	8001588 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001342:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001346:	f043 0202 	orr.w	r2, r3, #2
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fefa 	bl	800114c <LL_ADC_IsEnabled>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d136      	bne.n	80013cc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a65      	ldr	r2, [pc, #404]	@ (80014f8 <HAL_ADC_Init+0x298>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d004      	beq.n	8001372 <HAL_ADC_Init+0x112>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a63      	ldr	r2, [pc, #396]	@ (80014fc <HAL_ADC_Init+0x29c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d10e      	bne.n	8001390 <HAL_ADC_Init+0x130>
 8001372:	4861      	ldr	r0, [pc, #388]	@ (80014f8 <HAL_ADC_Init+0x298>)
 8001374:	f7ff feea 	bl	800114c <LL_ADC_IsEnabled>
 8001378:	4604      	mov	r4, r0
 800137a:	4860      	ldr	r0, [pc, #384]	@ (80014fc <HAL_ADC_Init+0x29c>)
 800137c:	f7ff fee6 	bl	800114c <LL_ADC_IsEnabled>
 8001380:	4603      	mov	r3, r0
 8001382:	4323      	orrs	r3, r4
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf0c      	ite	eq
 8001388:	2301      	moveq	r3, #1
 800138a:	2300      	movne	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	e008      	b.n	80013a2 <HAL_ADC_Init+0x142>
 8001390:	485b      	ldr	r0, [pc, #364]	@ (8001500 <HAL_ADC_Init+0x2a0>)
 8001392:	f7ff fedb 	bl	800114c <LL_ADC_IsEnabled>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	bf0c      	ite	eq
 800139c:	2301      	moveq	r3, #1
 800139e:	2300      	movne	r3, #0
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d012      	beq.n	80013cc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a53      	ldr	r2, [pc, #332]	@ (80014f8 <HAL_ADC_Init+0x298>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d004      	beq.n	80013ba <HAL_ADC_Init+0x15a>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a51      	ldr	r2, [pc, #324]	@ (80014fc <HAL_ADC_Init+0x29c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d101      	bne.n	80013be <HAL_ADC_Init+0x15e>
 80013ba:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_ADC_Init+0x2a4>)
 80013bc:	e000      	b.n	80013c0 <HAL_ADC_Init+0x160>
 80013be:	4a52      	ldr	r2, [pc, #328]	@ (8001508 <HAL_ADC_Init+0x2a8>)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4610      	mov	r0, r2
 80013c8:	f7ff fd18 	bl	8000dfc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80013cc:	f7ff fcf4 	bl	8000db8 <HAL_GetREVID>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d914      	bls.n	8001404 <HAL_ADC_Init+0x1a4>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b10      	cmp	r3, #16
 80013e0:	d110      	bne.n	8001404 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7d5b      	ldrb	r3, [r3, #21]
 80013e6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013ec:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80013f2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7f1b      	ldrb	r3, [r3, #28]
 80013f8:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80013fa:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80013fc:	f043 030c 	orr.w	r3, r3, #12
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	e00d      	b.n	8001420 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	7d5b      	ldrb	r3, [r3, #21]
 8001408:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800140e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001414:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7f1b      	ldrb	r3, [r3, #28]
 800141a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800141c:	4313      	orrs	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	7f1b      	ldrb	r3, [r3, #28]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d106      	bne.n	8001436 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	3b01      	subs	r3, #1
 800142e:	045b      	lsls	r3, r3, #17
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4313      	orrs	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143a:	2b00      	cmp	r3, #0
 800143c:	d009      	beq.n	8001452 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800144a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	68da      	ldr	r2, [r3, #12]
 8001458:	4b2c      	ldr	r3, [pc, #176]	@ (800150c <HAL_ADC_Init+0x2ac>)
 800145a:	4013      	ands	r3, r2
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	69b9      	ldr	r1, [r7, #24]
 8001462:	430b      	orrs	r3, r1
 8001464:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff febc 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001470:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff fede 	bl	8001238 <LL_ADC_INJ_IsConversionOngoing>
 800147c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d15f      	bne.n	8001544 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d15c      	bne.n	8001544 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	7d1b      	ldrb	r3, [r3, #20]
 800148e:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001494:	4313      	orrs	r3, r2
 8001496:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	68da      	ldr	r2, [r3, #12]
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_ADC_Init+0x2b0>)
 80014a0:	4013      	ands	r3, r2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	69b9      	ldr	r1, [r7, #24]
 80014a8:	430b      	orrs	r3, r1
 80014aa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d130      	bne.n	8001518 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	691a      	ldr	r2, [r3, #16]
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <HAL_ADC_Init+0x2b4>)
 80014c4:	4013      	ands	r3, r2
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80014ca:	3a01      	subs	r2, #1
 80014cc:	0411      	lsls	r1, r2, #16
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80014d2:	4311      	orrs	r1, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80014d8:	4311      	orrs	r1, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80014de:	430a      	orrs	r2, r1
 80014e0:	431a      	orrs	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f042 0201 	orr.w	r2, r2, #1
 80014ea:	611a      	str	r2, [r3, #16]
 80014ec:	e01c      	b.n	8001528 <HAL_ADC_Init+0x2c8>
 80014ee:	bf00      	nop
 80014f0:	24000000 	.word	0x24000000
 80014f4:	053e2d63 	.word	0x053e2d63
 80014f8:	40022000 	.word	0x40022000
 80014fc:	40022100 	.word	0x40022100
 8001500:	58026000 	.word	0x58026000
 8001504:	40022300 	.word	0x40022300
 8001508:	58026300 	.word	0x58026300
 800150c:	fff0c003 	.word	0xfff0c003
 8001510:	ffffbffc 	.word	0xffffbffc
 8001514:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	691a      	ldr	r2, [r3, #16]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f022 0201 	bic.w	r2, r2, #1
 8001526:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	430a      	orrs	r2, r1
 800153c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 ff32 	bl	80023a8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	68db      	ldr	r3, [r3, #12]
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10c      	bne.n	8001566 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f023 010f 	bic.w	r1, r3, #15
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	1e5a      	subs	r2, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	631a      	str	r2, [r3, #48]	@ 0x30
 8001564:	e007      	b.n	8001576 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 020f 	bic.w	r2, r2, #15
 8001574:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157a:	f023 0303 	bic.w	r3, r3, #3
 800157e:	f043 0201 	orr.w	r2, r3, #1
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	655a      	str	r2, [r3, #84]	@ 0x54
 8001586:	e007      	b.n	8001598 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800158c:	f043 0210 	orr.w	r2, r3, #16
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001598:	7ffb      	ldrb	r3, [r7, #31]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd90      	pop	{r4, r7, pc}
 80015a2:	bf00      	nop

080015a4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a5c      	ldr	r2, [pc, #368]	@ (8001724 <HAL_ADC_Start+0x180>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d004      	beq.n	80015c0 <HAL_ADC_Start+0x1c>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a5b      	ldr	r2, [pc, #364]	@ (8001728 <HAL_ADC_Start+0x184>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_Start+0x20>
 80015c0:	4b5a      	ldr	r3, [pc, #360]	@ (800172c <HAL_ADC_Start+0x188>)
 80015c2:	e000      	b.n	80015c6 <HAL_ADC_Start+0x22>
 80015c4:	4b5a      	ldr	r3, [pc, #360]	@ (8001730 <HAL_ADC_Start+0x18c>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7ff fd2e 	bl	8001028 <LL_ADC_GetMultimode>
 80015cc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fe08 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 809a 	bne.w	8001714 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Start+0x4a>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e095      	b.n	800171a <HAL_ADC_Start+0x176>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fdec 	bl	80021d4 <ADC_Enable>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b00      	cmp	r3, #0
 8001604:	f040 8081 	bne.w	800170a <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800160c:	4b49      	ldr	r3, [pc, #292]	@ (8001734 <HAL_ADC_Start+0x190>)
 800160e:	4013      	ands	r3, r2
 8001610:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a42      	ldr	r2, [pc, #264]	@ (8001728 <HAL_ADC_Start+0x184>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d002      	beq.n	8001628 <HAL_ADC_Start+0x84>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	e000      	b.n	800162a <HAL_ADC_Start+0x86>
 8001628:	4b3e      	ldr	r3, [pc, #248]	@ (8001724 <HAL_ADC_Start+0x180>)
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	4293      	cmp	r3, r2
 8001630:	d002      	beq.n	8001638 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d105      	bne.n	8001644 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800163c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800164c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001650:	d106      	bne.n	8001660 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	f023 0206 	bic.w	r2, r3, #6
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	659a      	str	r2, [r3, #88]	@ 0x58
 800165e:	e002      	b.n	8001666 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	221c      	movs	r2, #28
 800166c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2b      	ldr	r2, [pc, #172]	@ (8001728 <HAL_ADC_Start+0x184>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d002      	beq.n	8001686 <HAL_ADC_Start+0xe2>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	e000      	b.n	8001688 <HAL_ADC_Start+0xe4>
 8001686:	4b27      	ldr	r3, [pc, #156]	@ (8001724 <HAL_ADC_Start+0x180>)
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4293      	cmp	r3, r2
 800168e:	d008      	beq.n	80016a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	2b05      	cmp	r3, #5
 800169a:	d002      	beq.n	80016a2 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	2b09      	cmp	r3, #9
 80016a0:	d114      	bne.n	80016cc <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d007      	beq.n	80016c0 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016b8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fd67 	bl	8001198 <LL_ADC_REG_StartConversion>
 80016ca:	e025      	b.n	8001718 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016d0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a12      	ldr	r2, [pc, #72]	@ (8001728 <HAL_ADC_Start+0x184>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d002      	beq.n	80016e8 <HAL_ADC_Start+0x144>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	e000      	b.n	80016ea <HAL_ADC_Start+0x146>
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_ADC_Start+0x180>)
 80016ea:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d00f      	beq.n	8001718 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016fc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001700:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	655a      	str	r2, [r3, #84]	@ 0x54
 8001708:	e006      	b.n	8001718 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2200      	movs	r2, #0
 800170e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8001712:	e001      	b.n	8001718 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001714:	2302      	movs	r3, #2
 8001716:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001718:	7dfb      	ldrb	r3, [r7, #23]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40022000 	.word	0x40022000
 8001728:	40022100 	.word	0x40022100
 800172c:	40022300 	.word	0x40022300
 8001730:	58026300 	.word	0x58026300
 8001734:	fffff0fe 	.word	0xfffff0fe

08001738 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_Stop+0x16>
 800174a:	2302      	movs	r3, #2
 800174c:	e021      	b.n	8001792 <HAL_ADC_Stop+0x5a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001756:	2103      	movs	r1, #3
 8001758:	6878      	ldr	r0, [r7, #4]
 800175a:	f000 fc7f 	bl	800205c <ADC_ConversionStop>
 800175e:	4603      	mov	r3, r0
 8001760:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001762:	7bfb      	ldrb	r3, [r7, #15]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d10f      	bne.n	8001788 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fdbd 	bl	80022e8 <ADC_Disable>
 800176e:	4603      	mov	r3, r0
 8001770:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001772:	7bfb      	ldrb	r3, [r7, #15]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800177c:	4b07      	ldr	r3, [pc, #28]	@ (800179c <HAL_ADC_Stop+0x64>)
 800177e:	4013      	ands	r3, r2
 8001780:	f043 0201 	orr.w	r2, r3, #1
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8001790:	7bfb      	ldrb	r3, [r7, #15]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	ffffeefe 	.word	0xffffeefe

080017a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <HAL_ADC_PollForConversion+0x1d8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d004      	beq.n	80017be <HAL_ADC_PollForConversion+0x1e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a70      	ldr	r2, [pc, #448]	@ (800197c <HAL_ADC_PollForConversion+0x1dc>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d101      	bne.n	80017c2 <HAL_ADC_PollForConversion+0x22>
 80017be:	4b70      	ldr	r3, [pc, #448]	@ (8001980 <HAL_ADC_PollForConversion+0x1e0>)
 80017c0:	e000      	b.n	80017c4 <HAL_ADC_PollForConversion+0x24>
 80017c2:	4b70      	ldr	r3, [pc, #448]	@ (8001984 <HAL_ADC_PollForConversion+0x1e4>)
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff fc2f 	bl	8001028 <LL_ADC_GetMultimode>
 80017ca:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d102      	bne.n	80017da <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80017d4:	2308      	movs	r3, #8
 80017d6:	61fb      	str	r3, [r7, #28]
 80017d8:	e037      	b.n	800184a <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	2b05      	cmp	r3, #5
 80017e4:	d002      	beq.n	80017ec <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d111      	bne.n	8001810 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	68db      	ldr	r3, [r3, #12]
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017fe:	f043 0220 	orr.w	r2, r3, #32
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e0b1      	b.n	800196e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800180a:	2304      	movs	r3, #4
 800180c:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 800180e:	e01c      	b.n	800184a <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a58      	ldr	r2, [pc, #352]	@ (8001978 <HAL_ADC_PollForConversion+0x1d8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_ADC_PollForConversion+0x84>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a57      	ldr	r2, [pc, #348]	@ (800197c <HAL_ADC_PollForConversion+0x1dc>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_ADC_PollForConversion+0x88>
 8001824:	4b56      	ldr	r3, [pc, #344]	@ (8001980 <HAL_ADC_PollForConversion+0x1e0>)
 8001826:	e000      	b.n	800182a <HAL_ADC_PollForConversion+0x8a>
 8001828:	4b56      	ldr	r3, [pc, #344]	@ (8001984 <HAL_ADC_PollForConversion+0x1e4>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fc0a 	bl	8001044 <LL_ADC_GetMultiDMATransfer>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d007      	beq.n	8001846 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183a:	f043 0220 	orr.w	r2, r3, #32
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e093      	b.n	800196e <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001846:	2304      	movs	r3, #4
 8001848:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800184a:	f7ff fa85 	bl	8000d58 <HAL_GetTick>
 800184e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001850:	e021      	b.n	8001896 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001858:	d01d      	beq.n	8001896 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800185a:	f7ff fa7d 	bl	8000d58 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d302      	bcc.n	8001870 <HAL_ADC_PollForConversion+0xd0>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d112      	bne.n	8001896 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4013      	ands	r3, r2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10b      	bne.n	8001896 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001882:	f043 0204 	orr.w	r2, r3, #4
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e06b      	b.n	800196e <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	4013      	ands	r3, r2
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d0d6      	beq.n	8001852 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fb29 	bl	8000f0c <LL_ADC_REG_IsTriggerSourceSWStart>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d01c      	beq.n	80018fa <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	7d5b      	ldrb	r3, [r3, #21]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d118      	bne.n	80018fa <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f003 0308 	and.w	r3, r3, #8
 80018d2:	2b08      	cmp	r3, #8
 80018d4:	d111      	bne.n	80018fa <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018da:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018f2:	f043 0201 	orr.w	r2, r3, #1
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a1f      	ldr	r2, [pc, #124]	@ (800197c <HAL_ADC_PollForConversion+0x1dc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d002      	beq.n	800190a <HAL_ADC_PollForConversion+0x16a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	e000      	b.n	800190c <HAL_ADC_PollForConversion+0x16c>
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_ADC_PollForConversion+0x1d8>)
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	6812      	ldr	r2, [r2, #0]
 8001910:	4293      	cmp	r3, r2
 8001912:	d008      	beq.n	8001926 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	2b05      	cmp	r3, #5
 800191e:	d002      	beq.n	8001926 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	2b09      	cmp	r3, #9
 8001924:	d104      	bne.n	8001930 <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	e00c      	b.n	800194a <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a11      	ldr	r2, [pc, #68]	@ (800197c <HAL_ADC_PollForConversion+0x1dc>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d002      	beq.n	8001940 <HAL_ADC_PollForConversion+0x1a0>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	e000      	b.n	8001942 <HAL_ADC_PollForConversion+0x1a2>
 8001940:	4b0d      	ldr	r3, [pc, #52]	@ (8001978 <HAL_ADC_PollForConversion+0x1d8>)
 8001942:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d104      	bne.n	800195a <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2208      	movs	r2, #8
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e008      	b.n	800196c <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d103      	bne.n	800196c <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	220c      	movs	r2, #12
 800196a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	3720      	adds	r7, #32
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40022000 	.word	0x40022000
 800197c:	40022100 	.word	0x40022100
 8001980:	40022300 	.word	0x40022300
 8001984:	58026300 	.word	0x58026300

08001988 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001996:	4618      	mov	r0, r3
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b0a1      	sub	sp, #132	@ 0x84
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	4a65      	ldr	r2, [pc, #404]	@ (8001b54 <HAL_ADC_ConfigChannel+0x1b0>)
 80019be:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_ADC_ConfigChannel+0x2a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e32e      	b.n	800202c <HAL_ADC_ConfigChannel+0x688>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fc04 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8313 	bne.w	800200e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	db2c      	blt.n	8001a4a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d108      	bne.n	8001a0e <HAL_ADC_ConfigChannel+0x6a>
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	0e9b      	lsrs	r3, r3, #26
 8001a02:	f003 031f 	and.w	r3, r3, #31
 8001a06:	2201      	movs	r2, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	e016      	b.n	8001a3c <HAL_ADC_ConfigChannel+0x98>
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a16:	fa93 f3a3 	rbit	r3, r3
 8001a1a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001a1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001a20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001a26:	2320      	movs	r3, #32
 8001a28:	e003      	b.n	8001a32 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001a2a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001a2c:	fab3 f383 	clz	r3, r3
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	2201      	movs	r2, #1
 8001a38:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	6812      	ldr	r2, [r2, #0]
 8001a40:	69d1      	ldr	r1, [r2, #28]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	430b      	orrs	r3, r1
 8001a48:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6818      	ldr	r0, [r3, #0]
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	6859      	ldr	r1, [r3, #4]
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f7ff fa6b 	bl	8000f32 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff fbc1 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8001a66:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fbe3 	bl	8001238 <LL_ADC_INJ_IsConversionOngoing>
 8001a72:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	f040 80b8 	bne.w	8001bec <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a7c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	f040 80b4 	bne.w	8001bec <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	6819      	ldr	r1, [r3, #0]
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	461a      	mov	r2, r3
 8001a92:	f7ff fa7a 	bl	8000f8a <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001a96:	4b30      	ldr	r3, [pc, #192]	@ (8001b58 <HAL_ADC_ConfigChannel+0x1b4>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001a9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001aa2:	d10b      	bne.n	8001abc <HAL_ADC_ConfigChannel+0x118>
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	695a      	ldr	r2, [r3, #20]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	68db      	ldr	r3, [r3, #12]
 8001aae:	089b      	lsrs	r3, r3, #2
 8001ab0:	f003 0307 	and.w	r3, r3, #7
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	e01d      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x154>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10b      	bne.n	8001ae2 <HAL_ADC_ConfigChannel+0x13e>
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	695a      	ldr	r2, [r3, #20]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	089b      	lsrs	r3, r3, #2
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	e00a      	b.n	8001af8 <HAL_ADC_ConfigChannel+0x154>
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	695a      	ldr	r2, [r3, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	089b      	lsrs	r3, r3, #2
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	d02c      	beq.n	8001b5c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	6919      	ldr	r1, [r3, #16]
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001b10:	f7ff f9a8 	bl	8000e64 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	6919      	ldr	r1, [r3, #16]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	7e5b      	ldrb	r3, [r3, #25]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d102      	bne.n	8001b2a <HAL_ADC_ConfigChannel+0x186>
 8001b24:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001b28:	e000      	b.n	8001b2c <HAL_ADC_ConfigChannel+0x188>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	f7ff f9d2 	bl	8000ed6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	6919      	ldr	r1, [r3, #16]
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	7e1b      	ldrb	r3, [r3, #24]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d102      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x1a4>
 8001b42:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001b46:	e000      	b.n	8001b4a <HAL_ADC_ConfigChannel+0x1a6>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	f7ff f9aa 	bl	8000ea4 <LL_ADC_SetDataRightShift>
 8001b50:	e04c      	b.n	8001bec <HAL_ADC_ConfigChannel+0x248>
 8001b52:	bf00      	nop
 8001b54:	47ff0000 	.word	0x47ff0000
 8001b58:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	069b      	lsls	r3, r3, #26
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d107      	bne.n	8001b80 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001b7e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001b86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	069b      	lsls	r3, r3, #26
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d107      	bne.n	8001ba4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001ba2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001baa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	069b      	lsls	r3, r3, #26
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bc6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bce:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	069b      	lsls	r3, r3, #26
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d107      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001bea:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff faab 	bl	800114c <LL_ADC_IsEnabled>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f040 8211 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	6819      	ldr	r1, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	f7ff f9e8 	bl	8000fe0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4aa1      	ldr	r2, [pc, #644]	@ (8001e9c <HAL_ADC_ConfigChannel+0x4f8>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	f040 812e 	bne.w	8001e78 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <HAL_ADC_ConfigChannel+0x2a0>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0e9b      	lsrs	r3, r3, #26
 8001c32:	3301      	adds	r3, #1
 8001c34:	f003 031f 	and.w	r3, r3, #31
 8001c38:	2b09      	cmp	r3, #9
 8001c3a:	bf94      	ite	ls
 8001c3c:	2301      	movls	r3, #1
 8001c3e:	2300      	movhi	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	e019      	b.n	8001c78 <HAL_ADC_ConfigChannel+0x2d4>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001c4c:	fa93 f3a3 	rbit	r3, r3
 8001c50:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001c52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c54:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001c56:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001c5c:	2320      	movs	r3, #32
 8001c5e:	e003      	b.n	8001c68 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001c60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c62:	fab3 f383 	clz	r3, r3
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	3301      	adds	r3, #1
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2b09      	cmp	r3, #9
 8001c70:	bf94      	ite	ls
 8001c72:	2301      	movls	r3, #1
 8001c74:	2300      	movhi	r3, #0
 8001c76:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d079      	beq.n	8001d70 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d107      	bne.n	8001c98 <HAL_ADC_ConfigChannel+0x2f4>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0e9b      	lsrs	r3, r3, #26
 8001c8e:	3301      	adds	r3, #1
 8001c90:	069b      	lsls	r3, r3, #26
 8001c92:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001c96:	e015      	b.n	8001cc4 <HAL_ADC_ConfigChannel+0x320>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ca0:	fa93 f3a3 	rbit	r3, r3
 8001ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	e003      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001cb4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	069b      	lsls	r3, r3, #26
 8001cc0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d109      	bne.n	8001ce4 <HAL_ADC_ConfigChannel+0x340>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	0e9b      	lsrs	r3, r3, #26
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	f003 031f 	and.w	r3, r3, #31
 8001cdc:	2101      	movs	r1, #1
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	e017      	b.n	8001d14 <HAL_ADC_ConfigChannel+0x370>
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001cf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cf4:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001d00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f003 031f 	and.w	r3, r3, #31
 8001d0e:	2101      	movs	r1, #1
 8001d10:	fa01 f303 	lsl.w	r3, r1, r3
 8001d14:	ea42 0103 	orr.w	r1, r2, r3
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10a      	bne.n	8001d3a <HAL_ADC_ConfigChannel+0x396>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0e9b      	lsrs	r3, r3, #26
 8001d2a:	3301      	adds	r3, #1
 8001d2c:	f003 021f 	and.w	r2, r3, #31
 8001d30:	4613      	mov	r3, r2
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4413      	add	r3, r2
 8001d36:	051b      	lsls	r3, r3, #20
 8001d38:	e018      	b.n	8001d6c <HAL_ADC_ConfigChannel+0x3c8>
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d42:	fa93 f3a3 	rbit	r3, r3
 8001d46:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001d52:	2320      	movs	r3, #32
 8001d54:	e003      	b.n	8001d5e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d58:	fab3 f383 	clz	r3, r3
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	3301      	adds	r3, #1
 8001d60:	f003 021f 	and.w	r2, r3, #31
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	e07e      	b.n	8001e6e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d107      	bne.n	8001d8c <HAL_ADC_ConfigChannel+0x3e8>
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	0e9b      	lsrs	r3, r3, #26
 8001d82:	3301      	adds	r3, #1
 8001d84:	069b      	lsls	r3, r3, #26
 8001d86:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d8a:	e015      	b.n	8001db8 <HAL_ADC_ConfigChannel+0x414>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001da4:	2320      	movs	r3, #32
 8001da6:	e003      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001daa:	fab3 f383 	clz	r3, r3
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	3301      	adds	r3, #1
 8001db2:	069b      	lsls	r3, r3, #26
 8001db4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d109      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x434>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	0e9b      	lsrs	r3, r3, #26
 8001dca:	3301      	adds	r3, #1
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd6:	e017      	b.n	8001e08 <HAL_ADC_ConfigChannel+0x464>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa93 f3a3 	rbit	r3, r3
 8001de4:	61bb      	str	r3, [r7, #24]
  return result;
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001dea:	6a3b      	ldr	r3, [r7, #32]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001df0:	2320      	movs	r3, #32
 8001df2:	e003      	b.n	8001dfc <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001df4:	6a3b      	ldr	r3, [r7, #32]
 8001df6:	fab3 f383 	clz	r3, r3
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	3301      	adds	r3, #1
 8001dfe:	f003 031f 	and.w	r3, r3, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	ea42 0103 	orr.w	r1, r2, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10d      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x490>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4613      	mov	r3, r2
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b1e      	subs	r3, #30
 8001e2c:	051b      	lsls	r3, r3, #20
 8001e2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e32:	e01b      	b.n	8001e6c <HAL_ADC_ConfigChannel+0x4c8>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	fa93 f3a3 	rbit	r3, r3
 8001e40:	60fb      	str	r3, [r7, #12]
  return result;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8001e4c:	2320      	movs	r3, #32
 8001e4e:	e003      	b.n	8001e58 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	fab3 f383 	clz	r3, r3
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	4613      	mov	r3, r2
 8001e60:	005b      	lsls	r3, r3, #1
 8001e62:	4413      	add	r3, r2
 8001e64:	3b1e      	subs	r3, #30
 8001e66:	051b      	lsls	r3, r3, #20
 8001e68:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e6c:	430b      	orrs	r3, r1
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	6892      	ldr	r2, [r2, #8]
 8001e72:	4619      	mov	r1, r3
 8001e74:	f7ff f889 	bl	8000f8a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f280 80cf 	bge.w	8002020 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <HAL_ADC_ConfigChannel+0x4fc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d004      	beq.n	8001e96 <HAL_ADC_ConfigChannel+0x4f2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <HAL_ADC_ConfigChannel+0x500>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10a      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x508>
 8001e96:	4b04      	ldr	r3, [pc, #16]	@ (8001ea8 <HAL_ADC_ConfigChannel+0x504>)
 8001e98:	e009      	b.n	8001eae <HAL_ADC_ConfigChannel+0x50a>
 8001e9a:	bf00      	nop
 8001e9c:	47ff0000 	.word	0x47ff0000
 8001ea0:	40022000 	.word	0x40022000
 8001ea4:	40022100 	.word	0x40022100
 8001ea8:	40022300 	.word	0x40022300
 8001eac:	4b61      	ldr	r3, [pc, #388]	@ (8002034 <HAL_ADC_ConfigChannel+0x690>)
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7fe ffca 	bl	8000e48 <LL_ADC_GetCommonPathInternalCh>
 8001eb4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5f      	ldr	r2, [pc, #380]	@ (8002038 <HAL_ADC_ConfigChannel+0x694>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d004      	beq.n	8001eca <HAL_ADC_ConfigChannel+0x526>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5d      	ldr	r2, [pc, #372]	@ (800203c <HAL_ADC_ConfigChannel+0x698>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d10e      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x544>
 8001eca:	485b      	ldr	r0, [pc, #364]	@ (8002038 <HAL_ADC_ConfigChannel+0x694>)
 8001ecc:	f7ff f93e 	bl	800114c <LL_ADC_IsEnabled>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	485a      	ldr	r0, [pc, #360]	@ (800203c <HAL_ADC_ConfigChannel+0x698>)
 8001ed4:	f7ff f93a 	bl	800114c <LL_ADC_IsEnabled>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	4323      	orrs	r3, r4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	bf0c      	ite	eq
 8001ee0:	2301      	moveq	r3, #1
 8001ee2:	2300      	movne	r3, #0
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e008      	b.n	8001efa <HAL_ADC_ConfigChannel+0x556>
 8001ee8:	4855      	ldr	r0, [pc, #340]	@ (8002040 <HAL_ADC_ConfigChannel+0x69c>)
 8001eea:	f7ff f92f 	bl	800114c <LL_ADC_IsEnabled>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf0c      	ite	eq
 8001ef4:	2301      	moveq	r3, #1
 8001ef6:	2300      	movne	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d07d      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a50      	ldr	r2, [pc, #320]	@ (8002044 <HAL_ADC_ConfigChannel+0x6a0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d130      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x5c6>
 8001f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d12b      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a4a      	ldr	r2, [pc, #296]	@ (8002040 <HAL_ADC_ConfigChannel+0x69c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	f040 8081 	bne.w	8002020 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a45      	ldr	r2, [pc, #276]	@ (8002038 <HAL_ADC_ConfigChannel+0x694>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_ADC_ConfigChannel+0x58e>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a43      	ldr	r2, [pc, #268]	@ (800203c <HAL_ADC_ConfigChannel+0x698>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_ADC_ConfigChannel+0x592>
 8001f32:	4a45      	ldr	r2, [pc, #276]	@ (8002048 <HAL_ADC_ConfigChannel+0x6a4>)
 8001f34:	e000      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x594>
 8001f36:	4a3f      	ldr	r2, [pc, #252]	@ (8002034 <HAL_ADC_ConfigChannel+0x690>)
 8001f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f3a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f3e:	4619      	mov	r1, r3
 8001f40:	4610      	mov	r0, r2
 8001f42:	f7fe ff6e 	bl	8000e22 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_ADC_ConfigChannel+0x6a8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	099b      	lsrs	r3, r3, #6
 8001f4c:	4a40      	ldr	r2, [pc, #256]	@ (8002050 <HAL_ADC_ConfigChannel+0x6ac>)
 8001f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	3301      	adds	r3, #1
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f5a:	e002      	b.n	8001f62 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1f9      	bne.n	8001f5c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8001f68:	e05a      	b.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a39      	ldr	r2, [pc, #228]	@ (8002054 <HAL_ADC_ConfigChannel+0x6b0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d11e      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x60e>
 8001f74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d119      	bne.n	8001fb2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a2f      	ldr	r2, [pc, #188]	@ (8002040 <HAL_ADC_ConfigChannel+0x69c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d14b      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002038 <HAL_ADC_ConfigChannel+0x694>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x5f8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a29      	ldr	r2, [pc, #164]	@ (800203c <HAL_ADC_ConfigChannel+0x698>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x5fc>
 8001f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8002048 <HAL_ADC_ConfigChannel+0x6a4>)
 8001f9e:	e000      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x5fe>
 8001fa0:	4a24      	ldr	r2, [pc, #144]	@ (8002034 <HAL_ADC_ConfigChannel+0x690>)
 8001fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fa4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4610      	mov	r0, r2
 8001fac:	f7fe ff39 	bl	8000e22 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8001fb0:	e036      	b.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a28      	ldr	r2, [pc, #160]	@ (8002058 <HAL_ADC_ConfigChannel+0x6b4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d131      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
 8001fbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d12c      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1d      	ldr	r2, [pc, #116]	@ (8002040 <HAL_ADC_ConfigChannel+0x69c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d127      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a18      	ldr	r2, [pc, #96]	@ (8002038 <HAL_ADC_ConfigChannel+0x694>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d004      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x640>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a17      	ldr	r2, [pc, #92]	@ (800203c <HAL_ADC_ConfigChannel+0x698>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d101      	bne.n	8001fe8 <HAL_ADC_ConfigChannel+0x644>
 8001fe4:	4a18      	ldr	r2, [pc, #96]	@ (8002048 <HAL_ADC_ConfigChannel+0x6a4>)
 8001fe6:	e000      	b.n	8001fea <HAL_ADC_ConfigChannel+0x646>
 8001fe8:	4a12      	ldr	r2, [pc, #72]	@ (8002034 <HAL_ADC_ConfigChannel+0x690>)
 8001fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001fec:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4610      	mov	r0, r2
 8001ff4:	f7fe ff15 	bl	8000e22 <LL_ADC_SetCommonPathInternalCh>
 8001ff8:	e012      	b.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ffe:	f043 0220 	orr.w	r2, r3, #32
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800200c:	e008      	b.n	8002020 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	f043 0220 	orr.w	r2, r3, #32
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002028:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800202c:	4618      	mov	r0, r3
 800202e:	3784      	adds	r7, #132	@ 0x84
 8002030:	46bd      	mov	sp, r7
 8002032:	bd90      	pop	{r4, r7, pc}
 8002034:	58026300 	.word	0x58026300
 8002038:	40022000 	.word	0x40022000
 800203c:	40022100 	.word	0x40022100
 8002040:	58026000 	.word	0x58026000
 8002044:	cb840000 	.word	0xcb840000
 8002048:	40022300 	.word	0x40022300
 800204c:	24000000 	.word	0x24000000
 8002050:	053e2d63 	.word	0x053e2d63
 8002054:	c7520000 	.word	0xc7520000
 8002058:	cfb80000 	.word	0xcfb80000

0800205c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b088      	sub	sp, #32
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f8b8 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8002078:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff f8da 	bl	8001238 <LL_ADC_INJ_IsConversionOngoing>
 8002084:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d103      	bne.n	8002094 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 8098 	beq.w	80021c4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d02a      	beq.n	80020f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	7d5b      	ldrb	r3, [r3, #21]
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d126      	bne.n	80020f8 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	7d1b      	ldrb	r3, [r3, #20]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d122      	bne.n	80020f8 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80020b2:	2301      	movs	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020b6:	e014      	b.n	80020e2 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	4a45      	ldr	r2, [pc, #276]	@ (80021d0 <ADC_ConversionStop+0x174>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d90d      	bls.n	80020dc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80020c4:	f043 0210 	orr.w	r2, r3, #16
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d0:	f043 0201 	orr.w	r2, r3, #1
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e074      	b.n	80021c6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	3301      	adds	r3, #1
 80020e0:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ec:	2b40      	cmp	r3, #64	@ 0x40
 80020ee:	d1e3      	bne.n	80020b8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2240      	movs	r2, #64	@ 0x40
 80020f6:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d014      	beq.n	8002128 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff f870 	bl	80011e8 <LL_ADC_REG_IsConversionOngoing>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff f82d 	bl	8001172 <LL_ADC_IsDisableOngoing>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d104      	bne.n	8002128 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff f84c 	bl	80011c0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d014      	beq.n	8002158 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f880 	bl	8001238 <LL_ADC_INJ_IsConversionOngoing>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00c      	beq.n	8002158 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff f815 	bl	8001172 <LL_ADC_IsDisableOngoing>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d104      	bne.n	8002158 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f7ff f85c 	bl	8001210 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d005      	beq.n	800216a <ADC_ConversionStop+0x10e>
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	2b03      	cmp	r3, #3
 8002162:	d105      	bne.n	8002170 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002164:	230c      	movs	r3, #12
 8002166:	617b      	str	r3, [r7, #20]
        break;
 8002168:	e005      	b.n	8002176 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800216a:	2308      	movs	r3, #8
 800216c:	617b      	str	r3, [r7, #20]
        break;
 800216e:	e002      	b.n	8002176 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002170:	2304      	movs	r3, #4
 8002172:	617b      	str	r3, [r7, #20]
        break;
 8002174:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002176:	f7fe fdef 	bl	8000d58 <HAL_GetTick>
 800217a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800217c:	e01b      	b.n	80021b6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800217e:	f7fe fdeb 	bl	8000d58 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b05      	cmp	r3, #5
 800218a:	d914      	bls.n	80021b6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	689a      	ldr	r2, [r3, #8]
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	f043 0210 	orr.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021aa:	f043 0201 	orr.w	r2, r3, #1
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e007      	b.n	80021c6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1dc      	bne.n	800217e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3720      	adds	r7, #32
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	000cdbff 	.word	0x000cdbff

080021d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7fe ffb3 	bl	800114c <LL_ADC_IsEnabled>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d16e      	bne.n	80022ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	4b38      	ldr	r3, [pc, #224]	@ (80022d4 <ADC_Enable+0x100>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00d      	beq.n	8002216 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f043 0210 	orr.w	r2, r3, #16
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800220a:	f043 0201 	orr.w	r2, r3, #1
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e05a      	b.n	80022cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe ff6e 	bl	80010fc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002220:	f7fe fd9a 	bl	8000d58 <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <ADC_Enable+0x104>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <ADC_Enable+0x66>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a29      	ldr	r2, [pc, #164]	@ (80022dc <ADC_Enable+0x108>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d101      	bne.n	800223e <ADC_Enable+0x6a>
 800223a:	4b29      	ldr	r3, [pc, #164]	@ (80022e0 <ADC_Enable+0x10c>)
 800223c:	e000      	b.n	8002240 <ADC_Enable+0x6c>
 800223e:	4b29      	ldr	r3, [pc, #164]	@ (80022e4 <ADC_Enable+0x110>)
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fef1 	bl	8001028 <LL_ADC_GetMultimode>
 8002246:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a23      	ldr	r2, [pc, #140]	@ (80022dc <ADC_Enable+0x108>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d002      	beq.n	8002258 <ADC_Enable+0x84>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	e000      	b.n	800225a <ADC_Enable+0x86>
 8002258:	4b1f      	ldr	r3, [pc, #124]	@ (80022d8 <ADC_Enable+0x104>)
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6812      	ldr	r2, [r2, #0]
 800225e:	4293      	cmp	r3, r2
 8002260:	d02c      	beq.n	80022bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d130      	bne.n	80022ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002268:	e028      	b.n	80022bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe ff6c 	bl	800114c <LL_ADC_IsEnabled>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d104      	bne.n	8002284 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe ff3c 	bl	80010fc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002284:	f7fe fd68 	bl	8000d58 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d914      	bls.n	80022bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b01      	cmp	r3, #1
 800229e:	d00d      	beq.n	80022bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022a4:	f043 0210 	orr.w	r2, r3, #16
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022b0:	f043 0201 	orr.w	r2, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80022b8:	2301      	movs	r3, #1
 80022ba:	e007      	b.n	80022cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d1cf      	bne.n	800226a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80022ca:	2300      	movs	r3, #0
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	8000003f 	.word	0x8000003f
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40022100 	.word	0x40022100
 80022e0:	40022300 	.word	0x40022300
 80022e4:	58026300 	.word	0x58026300

080022e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7fe ff3c 	bl	8001172 <LL_ADC_IsDisableOngoing>
 80022fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe ff23 	bl	800114c <LL_ADC_IsEnabled>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d047      	beq.n	800239c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d144      	bne.n	800239c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 030d 	and.w	r3, r3, #13
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10c      	bne.n	800233a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7fe fefd 	bl	8001124 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2203      	movs	r2, #3
 8002330:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002332:	f7fe fd11 	bl	8000d58 <HAL_GetTick>
 8002336:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002338:	e029      	b.n	800238e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800233e:	f043 0210 	orr.w	r2, r3, #16
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800234a:	f043 0201 	orr.w	r2, r3, #1
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e023      	b.n	800239e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002356:	f7fe fcff 	bl	8000d58 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d914      	bls.n	800238e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002376:	f043 0210 	orr.w	r2, r3, #16
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002382:	f043 0201 	orr.w	r2, r3, #1
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e007      	b.n	800239e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1dc      	bne.n	8002356 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a7a      	ldr	r2, [pc, #488]	@ (80025a0 <ADC_ConfigureBoostMode+0x1f8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <ADC_ConfigureBoostMode+0x1c>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a79      	ldr	r2, [pc, #484]	@ (80025a4 <ADC_ConfigureBoostMode+0x1fc>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d109      	bne.n	80023d8 <ADC_ConfigureBoostMode+0x30>
 80023c4:	4b78      	ldr	r3, [pc, #480]	@ (80025a8 <ADC_ConfigureBoostMode+0x200>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	bf14      	ite	ne
 80023d0:	2301      	movne	r3, #1
 80023d2:	2300      	moveq	r3, #0
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	e008      	b.n	80023ea <ADC_ConfigureBoostMode+0x42>
 80023d8:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <ADC_ConfigureBoostMode+0x204>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	bf14      	ite	ne
 80023e4:	2301      	movne	r3, #1
 80023e6:	2300      	moveq	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01c      	beq.n	8002428 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80023ee:	f001 fc65 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 80023f2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80023fc:	d010      	beq.n	8002420 <ADC_ConfigureBoostMode+0x78>
 80023fe:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002402:	d873      	bhi.n	80024ec <ADC_ConfigureBoostMode+0x144>
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002408:	d002      	beq.n	8002410 <ADC_ConfigureBoostMode+0x68>
 800240a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800240e:	d16d      	bne.n	80024ec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0c1b      	lsrs	r3, r3, #16
 8002416:	68fa      	ldr	r2, [r7, #12]
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	60fb      	str	r3, [r7, #12]
        break;
 800241e:	e068      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	089b      	lsrs	r3, r3, #2
 8002424:	60fb      	str	r3, [r7, #12]
        break;
 8002426:	e064      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002428:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800242c:	f04f 0100 	mov.w	r1, #0
 8002430:	f002 fe94 	bl	800515c <HAL_RCCEx_GetPeriphCLKFreq>
 8002434:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800243e:	d051      	beq.n	80024e4 <ADC_ConfigureBoostMode+0x13c>
 8002440:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002444:	d854      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 8002446:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800244a:	d047      	beq.n	80024dc <ADC_ConfigureBoostMode+0x134>
 800244c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002450:	d84e      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 8002452:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002456:	d03d      	beq.n	80024d4 <ADC_ConfigureBoostMode+0x12c>
 8002458:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800245c:	d848      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 800245e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002462:	d033      	beq.n	80024cc <ADC_ConfigureBoostMode+0x124>
 8002464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002468:	d842      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 800246a:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800246e:	d029      	beq.n	80024c4 <ADC_ConfigureBoostMode+0x11c>
 8002470:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002474:	d83c      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 8002476:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800247a:	d01a      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x10a>
 800247c:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002480:	d836      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 8002482:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002486:	d014      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x10a>
 8002488:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800248c:	d830      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 800248e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002492:	d00e      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x10a>
 8002494:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002498:	d82a      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 800249a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800249e:	d008      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x10a>
 80024a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80024a4:	d824      	bhi.n	80024f0 <ADC_ConfigureBoostMode+0x148>
 80024a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80024aa:	d002      	beq.n	80024b2 <ADC_ConfigureBoostMode+0x10a>
 80024ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80024b0:	d11e      	bne.n	80024f0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	0c9b      	lsrs	r3, r3, #18
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c0:	60fb      	str	r3, [r7, #12]
        break;
 80024c2:	e016      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	091b      	lsrs	r3, r3, #4
 80024c8:	60fb      	str	r3, [r7, #12]
        break;
 80024ca:	e012      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	095b      	lsrs	r3, r3, #5
 80024d0:	60fb      	str	r3, [r7, #12]
        break;
 80024d2:	e00e      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	099b      	lsrs	r3, r3, #6
 80024d8:	60fb      	str	r3, [r7, #12]
        break;
 80024da:	e00a      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	09db      	lsrs	r3, r3, #7
 80024e0:	60fb      	str	r3, [r7, #12]
        break;
 80024e2:	e006      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	60fb      	str	r3, [r7, #12]
        break;
 80024ea:	e002      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
        break;
 80024ec:	bf00      	nop
 80024ee:	e000      	b.n	80024f2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80024f0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80024f2:	f7fe fc61 	bl	8000db8 <HAL_GetREVID>
 80024f6:	4603      	mov	r3, r0
 80024f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d815      	bhi.n	800252c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4a2b      	ldr	r2, [pc, #172]	@ (80025b0 <ADC_ConfigureBoostMode+0x208>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d908      	bls.n	800251a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	689a      	ldr	r2, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002516:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002518:	e03e      	b.n	8002598 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002528:	609a      	str	r2, [r3, #8]
}
 800252a:	e035      	b.n	8002598 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	085b      	lsrs	r3, r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	4a1f      	ldr	r2, [pc, #124]	@ (80025b4 <ADC_ConfigureBoostMode+0x20c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d808      	bhi.n	800254c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002548:	609a      	str	r2, [r3, #8]
}
 800254a:	e025      	b.n	8002598 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a1a      	ldr	r2, [pc, #104]	@ (80025b8 <ADC_ConfigureBoostMode+0x210>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d80a      	bhi.n	800256a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002566:	609a      	str	r2, [r3, #8]
}
 8002568:	e016      	b.n	8002598 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a13      	ldr	r2, [pc, #76]	@ (80025bc <ADC_ConfigureBoostMode+0x214>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d80a      	bhi.n	8002588 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002584:	609a      	str	r2, [r3, #8]
}
 8002586:	e007      	b.n	8002598 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689a      	ldr	r2, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002596:	609a      	str	r2, [r3, #8]
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40022100 	.word	0x40022100
 80025a8:	40022300 	.word	0x40022300
 80025ac:	58026300 	.word	0x58026300
 80025b0:	01312d00 	.word	0x01312d00
 80025b4:	005f5e10 	.word	0x005f5e10
 80025b8:	00bebc20 	.word	0x00bebc20
 80025bc:	017d7840 	.word	0x017d7840

080025c0 <LL_ADC_StartCalibration>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <LL_ADC_StartCalibration+0x38>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80025e0:	430a      	orrs	r2, r1
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	609a      	str	r2, [r3, #8]
}
 80025ec:	bf00      	nop
 80025ee:	3714      	adds	r7, #20
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	3ffeffc0 	.word	0x3ffeffc0

080025fc <LL_ADC_IsCalibrationOnGoing>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800260c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002610:	d101      	bne.n	8002616 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002612:	2301      	movs	r3, #1
 8002614:	e000      	b.n	8002618 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002630:	2300      	movs	r3, #0
 8002632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_ADCEx_Calibration_Start+0x1e>
 800263e:	2302      	movs	r3, #2
 8002640:	e04c      	b.n	80026dc <HAL_ADCEx_Calibration_Start+0xb8>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f7ff fe4c 	bl	80022e8 <ADC_Disable>
 8002650:	4603      	mov	r3, r0
 8002652:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002654:	7dfb      	ldrb	r3, [r7, #23]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d135      	bne.n	80026c6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800265e:	4b21      	ldr	r3, [pc, #132]	@ (80026e4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002660:	4013      	ands	r3, r2
 8002662:	f043 0202 	orr.w	r2, r3, #2
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ffa4 	bl	80025c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002678:	e014      	b.n	80026a4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	3301      	adds	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4a19      	ldr	r2, [pc, #100]	@ (80026e8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d30d      	bcc.n	80026a4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800268c:	f023 0312 	bic.w	r3, r3, #18
 8002690:	f043 0210 	orr.w	r2, r3, #16
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e01b      	b.n	80026dc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ffa7 	bl	80025fc <LL_ADC_IsCalibrationOnGoing>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1e2      	bne.n	800267a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026b8:	f023 0303 	bic.w	r3, r3, #3
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	655a      	str	r2, [r3, #84]	@ 0x54
 80026c4:	e005      	b.n	80026d2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80026da:	7dfb      	ldrb	r3, [r7, #23]
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3718      	adds	r7, #24
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	ffffeefd 	.word	0xffffeefd
 80026e8:	25c3f800 	.word	0x25c3f800

080026ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f003 0307 	and.w	r3, r3, #7
 80026fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <__NVIC_SetPriorityGrouping+0x40>)
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002708:	4013      	ands	r3, r2
 800270a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002714:	4b06      	ldr	r3, [pc, #24]	@ (8002730 <__NVIC_SetPriorityGrouping+0x44>)
 8002716:	4313      	orrs	r3, r2
 8002718:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800271a:	4a04      	ldr	r2, [pc, #16]	@ (800272c <__NVIC_SetPriorityGrouping+0x40>)
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	60d3      	str	r3, [r2, #12]
}
 8002720:	bf00      	nop
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr
 800272c:	e000ed00 	.word	0xe000ed00
 8002730:	05fa0000 	.word	0x05fa0000

08002734 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002738:	4b04      	ldr	r3, [pc, #16]	@ (800274c <__NVIC_GetPriorityGrouping+0x18>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	0a1b      	lsrs	r3, r3, #8
 800273e:	f003 0307 	and.w	r3, r3, #7
}
 8002742:	4618      	mov	r0, r3
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	6039      	str	r1, [r7, #0]
 800275a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800275c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002760:	2b00      	cmp	r3, #0
 8002762:	db0a      	blt.n	800277a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	490c      	ldr	r1, [pc, #48]	@ (800279c <__NVIC_SetPriority+0x4c>)
 800276a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800276e:	0112      	lsls	r2, r2, #4
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	440b      	add	r3, r1
 8002774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002778:	e00a      	b.n	8002790 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	4908      	ldr	r1, [pc, #32]	@ (80027a0 <__NVIC_SetPriority+0x50>)
 8002780:	88fb      	ldrh	r3, [r7, #6]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	3b04      	subs	r3, #4
 8002788:	0112      	lsls	r2, r2, #4
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	440b      	add	r3, r1
 800278e:	761a      	strb	r2, [r3, #24]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	e000e100 	.word	0xe000e100
 80027a0:	e000ed00 	.word	0xe000ed00

080027a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	60f8      	str	r0, [r7, #12]
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f1c3 0307 	rsb	r3, r3, #7
 80027be:	2b04      	cmp	r3, #4
 80027c0:	bf28      	it	cs
 80027c2:	2304      	movcs	r3, #4
 80027c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	3304      	adds	r3, #4
 80027ca:	2b06      	cmp	r3, #6
 80027cc:	d902      	bls.n	80027d4 <NVIC_EncodePriority+0x30>
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	3b03      	subs	r3, #3
 80027d2:	e000      	b.n	80027d6 <NVIC_EncodePriority+0x32>
 80027d4:	2300      	movs	r3, #0
 80027d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027d8:	f04f 32ff 	mov.w	r2, #4294967295
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43da      	mvns	r2, r3
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	401a      	ands	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027ec:	f04f 31ff 	mov.w	r1, #4294967295
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43d9      	mvns	r1, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027fc:	4313      	orrs	r3, r2
         );
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3724      	adds	r7, #36	@ 0x24
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
	...

0800280c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800281c:	d301      	bcc.n	8002822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800281e:	2301      	movs	r3, #1
 8002820:	e00f      	b.n	8002842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002822:	4a0a      	ldr	r2, [pc, #40]	@ (800284c <SysTick_Config+0x40>)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	3b01      	subs	r3, #1
 8002828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800282a:	210f      	movs	r1, #15
 800282c:	f04f 30ff 	mov.w	r0, #4294967295
 8002830:	f7ff ff8e 	bl	8002750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002834:	4b05      	ldr	r3, [pc, #20]	@ (800284c <SysTick_Config+0x40>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800283a:	4b04      	ldr	r3, [pc, #16]	@ (800284c <SysTick_Config+0x40>)
 800283c:	2207      	movs	r2, #7
 800283e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	3708      	adds	r7, #8
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	e000e010 	.word	0xe000e010

08002850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f7ff ff47 	bl	80026ec <__NVIC_SetPriorityGrouping>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b086      	sub	sp, #24
 800286a:	af00      	add	r7, sp, #0
 800286c:	4603      	mov	r3, r0
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002874:	f7ff ff5e 	bl	8002734 <__NVIC_GetPriorityGrouping>
 8002878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff90 	bl	80027a4 <NVIC_EncodePriority>
 8002884:	4602      	mov	r2, r0
 8002886:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff5f 	bl	8002750 <__NVIC_SetPriority>
}
 8002892:	bf00      	nop
 8002894:	3718      	adds	r7, #24
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}

0800289a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800289a:	b580      	push	{r7, lr}
 800289c:	b082      	sub	sp, #8
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f7ff ffb2 	bl	800280c <SysTick_Config>
 80028a8:	4603      	mov	r3, r0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3708      	adds	r7, #8
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
	...

080028b4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 80028b8:	f3bf 8f5f 	dmb	sy
}
 80028bc:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80028be:	4b07      	ldr	r3, [pc, #28]	@ (80028dc <HAL_MPU_Disable+0x28>)
 80028c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c2:	4a06      	ldr	r2, [pc, #24]	@ (80028dc <HAL_MPU_Disable+0x28>)
 80028c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_MPU_Disable+0x2c>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	605a      	str	r2, [r3, #4]
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	e000ed00 	.word	0xe000ed00
 80028e0:	e000ed90 	.word	0xe000ed90

080028e4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80028ec:	4a0b      	ldr	r2, [pc, #44]	@ (800291c <HAL_MPU_Enable+0x38>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f043 0301 	orr.w	r3, r3, #1
 80028f4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80028f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002920 <HAL_MPU_Enable+0x3c>)
 80028f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fa:	4a09      	ldr	r2, [pc, #36]	@ (8002920 <HAL_MPU_Enable+0x3c>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002900:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8002902:	f3bf 8f4f 	dsb	sy
}
 8002906:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002908:	f3bf 8f6f 	isb	sy
}
 800290c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	e000ed90 	.word	0xe000ed90
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	785a      	ldrb	r2, [r3, #1]
 8002930:	4b1b      	ldr	r3, [pc, #108]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002932:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8002934:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	4a19      	ldr	r2, [pc, #100]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 800293a:	f023 0301 	bic.w	r3, r3, #1
 800293e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002940:	4a17      	ldr	r2, [pc, #92]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	7b1b      	ldrb	r3, [r3, #12]
 800294c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	7adb      	ldrb	r3, [r3, #11]
 8002952:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002954:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	7a9b      	ldrb	r3, [r3, #10]
 800295a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800295c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	7b5b      	ldrb	r3, [r3, #13]
 8002962:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002964:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	7b9b      	ldrb	r3, [r3, #14]
 800296a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800296c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7bdb      	ldrb	r3, [r3, #15]
 8002972:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002974:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	7a5b      	ldrb	r3, [r3, #9]
 800297a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800297c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7a1b      	ldrb	r3, [r3, #8]
 8002982:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002984:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	7812      	ldrb	r2, [r2, #0]
 800298a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800298c:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800298e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002990:	6113      	str	r3, [r2, #16]
}
 8002992:	bf00      	nop
 8002994:	370c      	adds	r7, #12
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed90 	.word	0xe000ed90

080029a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b089      	sub	sp, #36	@ 0x24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80029b2:	4b89      	ldr	r3, [pc, #548]	@ (8002bd8 <HAL_GPIO_Init+0x234>)
 80029b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80029b6:	e194      	b.n	8002ce2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	4013      	ands	r3, r2
 80029c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 8186 	beq.w	8002cdc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d005      	beq.n	80029e8 <HAL_GPIO_Init+0x44>
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0303 	and.w	r3, r3, #3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d130      	bne.n	8002a4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	005b      	lsls	r3, r3, #1
 80029f2:	2203      	movs	r2, #3
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4013      	ands	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a1e:	2201      	movs	r2, #1
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0201 	and.w	r2, r3, #1
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	2b03      	cmp	r3, #3
 8002a54:	d017      	beq.n	8002a86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	2203      	movs	r2, #3
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	689a      	ldr	r2, [r3, #8]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f003 0303 	and.w	r3, r3, #3
 8002a8e:	2b02      	cmp	r3, #2
 8002a90:	d123      	bne.n	8002ada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	08da      	lsrs	r2, r3, #3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3208      	adds	r2, #8
 8002a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	691a      	ldr	r2, [r3, #16]
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	f003 0307 	and.w	r3, r3, #7
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	08da      	lsrs	r2, r3, #3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3208      	adds	r2, #8
 8002ad4:	69b9      	ldr	r1, [r7, #24]
 8002ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f003 0203 	and.w	r2, r3, #3
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69ba      	ldr	r2, [r7, #24]
 8002b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80e0 	beq.w	8002cdc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bdc <HAL_GPIO_Init+0x238>)
 8002b1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b22:	4a2e      	ldr	r2, [pc, #184]	@ (8002bdc <HAL_GPIO_Init+0x238>)
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002b2c:	4b2b      	ldr	r3, [pc, #172]	@ (8002bdc <HAL_GPIO_Init+0x238>)
 8002b2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3a:	4a29      	ldr	r2, [pc, #164]	@ (8002be0 <HAL_GPIO_Init+0x23c>)
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	089b      	lsrs	r3, r3, #2
 8002b40:	3302      	adds	r3, #2
 8002b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	220f      	movs	r2, #15
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43db      	mvns	r3, r3
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a20      	ldr	r2, [pc, #128]	@ (8002be4 <HAL_GPIO_Init+0x240>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d052      	beq.n	8002c0c <HAL_GPIO_Init+0x268>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a1f      	ldr	r2, [pc, #124]	@ (8002be8 <HAL_GPIO_Init+0x244>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d031      	beq.n	8002bd2 <HAL_GPIO_Init+0x22e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a1e      	ldr	r2, [pc, #120]	@ (8002bec <HAL_GPIO_Init+0x248>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d02b      	beq.n	8002bce <HAL_GPIO_Init+0x22a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a1d      	ldr	r2, [pc, #116]	@ (8002bf0 <HAL_GPIO_Init+0x24c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d025      	beq.n	8002bca <HAL_GPIO_Init+0x226>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a1c      	ldr	r2, [pc, #112]	@ (8002bf4 <HAL_GPIO_Init+0x250>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01f      	beq.n	8002bc6 <HAL_GPIO_Init+0x222>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a1b      	ldr	r2, [pc, #108]	@ (8002bf8 <HAL_GPIO_Init+0x254>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d019      	beq.n	8002bc2 <HAL_GPIO_Init+0x21e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_GPIO_Init+0x258>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <HAL_GPIO_Init+0x21a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a19      	ldr	r2, [pc, #100]	@ (8002c00 <HAL_GPIO_Init+0x25c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00d      	beq.n	8002bba <HAL_GPIO_Init+0x216>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a18      	ldr	r2, [pc, #96]	@ (8002c04 <HAL_GPIO_Init+0x260>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d007      	beq.n	8002bb6 <HAL_GPIO_Init+0x212>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a17      	ldr	r2, [pc, #92]	@ (8002c08 <HAL_GPIO_Init+0x264>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d101      	bne.n	8002bb2 <HAL_GPIO_Init+0x20e>
 8002bae:	2309      	movs	r3, #9
 8002bb0:	e02d      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bb2:	230a      	movs	r3, #10
 8002bb4:	e02b      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bb6:	2308      	movs	r3, #8
 8002bb8:	e029      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e027      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bbe:	2306      	movs	r3, #6
 8002bc0:	e025      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bc2:	2305      	movs	r3, #5
 8002bc4:	e023      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bc6:	2304      	movs	r3, #4
 8002bc8:	e021      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e01f      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e01d      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01b      	b.n	8002c0e <HAL_GPIO_Init+0x26a>
 8002bd6:	bf00      	nop
 8002bd8:	58000080 	.word	0x58000080
 8002bdc:	58024400 	.word	0x58024400
 8002be0:	58000400 	.word	0x58000400
 8002be4:	58020000 	.word	0x58020000
 8002be8:	58020400 	.word	0x58020400
 8002bec:	58020800 	.word	0x58020800
 8002bf0:	58020c00 	.word	0x58020c00
 8002bf4:	58021000 	.word	0x58021000
 8002bf8:	58021400 	.word	0x58021400
 8002bfc:	58021800 	.word	0x58021800
 8002c00:	58021c00 	.word	0x58021c00
 8002c04:	58022000 	.word	0x58022000
 8002c08:	58022400 	.word	0x58022400
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	69fa      	ldr	r2, [r7, #28]
 8002c10:	f002 0203 	and.w	r2, r2, #3
 8002c14:	0092      	lsls	r2, r2, #2
 8002c16:	4093      	lsls	r3, r2
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c1e:	4938      	ldr	r1, [pc, #224]	@ (8002d00 <HAL_GPIO_Init+0x35c>)
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	089b      	lsrs	r3, r3, #2
 8002c24:	3302      	adds	r3, #2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002c52:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002c80:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f47f ae63 	bne.w	80029b8 <HAL_GPIO_Init+0x14>
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	bf00      	nop
 8002cf6:	3724      	adds	r7, #36	@ 0x24
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	58000400 	.word	0x58000400

08002d04 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
 8002d20:	e001      	b.n	8002d26 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d3c:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00a      	beq.n	8002d5e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d48:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d001      	beq.n	8002d5a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e01f      	b.n	8002d9a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e01d      	b.n	8002d9a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d5e:	4b11      	ldr	r3, [pc, #68]	@ (8002da4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f023 0207 	bic.w	r2, r3, #7
 8002d66:	490f      	ldr	r1, [pc, #60]	@ (8002da4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d6e:	f7fd fff3 	bl	8000d58 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d74:	e009      	b.n	8002d8a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d76:	f7fd ffef 	bl	8000d58 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d84:	d901      	bls.n	8002d8a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e007      	b.n	8002d9a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_PWREx_ConfigSupply+0x70>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d96:	d1ee      	bne.n	8002d76 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	58024800 	.word	0x58024800

08002da8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	@ 0x30
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d102      	bne.n	8002dbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	f000 bc48 	b.w	800364c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8088 	beq.w	8002eda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dca:	4b99      	ldr	r3, [pc, #612]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002dd4:	4b96      	ldr	r3, [pc, #600]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ddc:	2b10      	cmp	r3, #16
 8002dde:	d007      	beq.n	8002df0 <HAL_RCC_OscConfig+0x48>
 8002de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de2:	2b18      	cmp	r3, #24
 8002de4:	d111      	bne.n	8002e0a <HAL_RCC_OscConfig+0x62>
 8002de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d10c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df0:	4b8f      	ldr	r3, [pc, #572]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d06d      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x130>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d169      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f000 bc21 	b.w	800364c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e12:	d106      	bne.n	8002e22 <HAL_RCC_OscConfig+0x7a>
 8002e14:	4b86      	ldr	r3, [pc, #536]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a85      	ldr	r2, [pc, #532]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e1e:	6013      	str	r3, [r2, #0]
 8002e20:	e02e      	b.n	8002e80 <HAL_RCC_OscConfig+0xd8>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCC_OscConfig+0x9c>
 8002e2a:	4b81      	ldr	r3, [pc, #516]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a80      	ldr	r2, [pc, #512]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	4b7e      	ldr	r3, [pc, #504]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xd8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0xc0>
 8002e4e:	4b78      	ldr	r3, [pc, #480]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a77      	ldr	r2, [pc, #476]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b75      	ldr	r3, [pc, #468]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a74      	ldr	r2, [pc, #464]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xd8>
 8002e68:	4b71      	ldr	r3, [pc, #452]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a70      	ldr	r2, [pc, #448]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b6e      	ldr	r3, [pc, #440]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a6d      	ldr	r2, [pc, #436]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fd ff66 	bl	8000d58 <HAL_GetTick>
 8002e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fd ff62 	bl	8000d58 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e3d4      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea2:	4b63      	ldr	r3, [pc, #396]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xe8>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fd ff52 	bl	8000d58 <HAL_GetTick>
 8002eb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fd ff4e 	bl	8000d58 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e3c0      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002eca:	4b59      	ldr	r3, [pc, #356]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x110>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f000 80ca 	beq.w	800307c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee8:	4b51      	ldr	r3, [pc, #324]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ef0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d007      	beq.n	8002f0e <HAL_RCC_OscConfig+0x166>
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	2b18      	cmp	r3, #24
 8002f02:	d156      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x20a>
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d151      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f0e:	4b48      	ldr	r3, [pc, #288]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0304 	and.w	r3, r3, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_RCC_OscConfig+0x17e>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e392      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f26:	4b42      	ldr	r3, [pc, #264]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f023 0219 	bic.w	r2, r3, #25
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	493f      	ldr	r1, [pc, #252]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fd ff0e 	bl	8000d58 <HAL_GetTick>
 8002f3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f40:	f7fd ff0a 	bl	8000d58 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e37c      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f52:	4b37      	ldr	r3, [pc, #220]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0304 	and.w	r3, r3, #4
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f5e:	f7fd ff2b 	bl	8000db8 <HAL_GetREVID>
 8002f62:	4603      	mov	r3, r0
 8002f64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d817      	bhi.n	8002f9c <HAL_RCC_OscConfig+0x1f4>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	691b      	ldr	r3, [r3, #16]
 8002f70:	2b40      	cmp	r3, #64	@ 0x40
 8002f72:	d108      	bne.n	8002f86 <HAL_RCC_OscConfig+0x1de>
 8002f74:	4b2e      	ldr	r3, [pc, #184]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f7c:	4a2c      	ldr	r2, [pc, #176]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f84:	e07a      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f86:	4b2a      	ldr	r3, [pc, #168]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	031b      	lsls	r3, r3, #12
 8002f94:	4926      	ldr	r1, [pc, #152]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f9a:	e06f      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9c:	4b24      	ldr	r3, [pc, #144]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691b      	ldr	r3, [r3, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	4921      	ldr	r1, [pc, #132]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fb0:	e064      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d047      	beq.n	800304a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fba:	4b1d      	ldr	r3, [pc, #116]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f023 0219 	bic.w	r2, r3, #25
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	491a      	ldr	r1, [pc, #104]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fd fec4 	bl	8000d58 <HAL_GetTick>
 8002fd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7fd fec0 	bl	8000d58 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e332      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe6:	4b12      	ldr	r3, [pc, #72]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0304 	and.w	r3, r3, #4
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	f7fd fee1 	bl	8000db8 <HAL_GetREVID>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d819      	bhi.n	8003034 <HAL_RCC_OscConfig+0x28c>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b40      	cmp	r3, #64	@ 0x40
 8003006:	d108      	bne.n	800301a <HAL_RCC_OscConfig+0x272>
 8003008:	4b09      	ldr	r3, [pc, #36]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 8003012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003016:	6053      	str	r3, [r2, #4]
 8003018:	e030      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
 800301a:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	031b      	lsls	r3, r3, #12
 8003028:	4901      	ldr	r1, [pc, #4]	@ (8003030 <HAL_RCC_OscConfig+0x288>)
 800302a:	4313      	orrs	r3, r2
 800302c:	604b      	str	r3, [r1, #4]
 800302e:	e025      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
 8003030:	58024400 	.word	0x58024400
 8003034:	4b9a      	ldr	r3, [pc, #616]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	691b      	ldr	r3, [r3, #16]
 8003040:	061b      	lsls	r3, r3, #24
 8003042:	4997      	ldr	r1, [pc, #604]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003044:	4313      	orrs	r3, r2
 8003046:	604b      	str	r3, [r1, #4]
 8003048:	e018      	b.n	800307c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304a:	4b95      	ldr	r3, [pc, #596]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a94      	ldr	r2, [pc, #592]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003050:	f023 0301 	bic.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003056:	f7fd fe7f 	bl	8000d58 <HAL_GetTick>
 800305a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305e:	f7fd fe7b 	bl	8000d58 <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e2ed      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003070:	4b8b      	ldr	r3, [pc, #556]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f0      	bne.n	800305e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0310 	and.w	r3, r3, #16
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 80a9 	beq.w	80031dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800308a:	4b85      	ldr	r3, [pc, #532]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003092:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003094:	4b82      	ldr	r3, [pc, #520]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003098:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2b08      	cmp	r3, #8
 800309e:	d007      	beq.n	80030b0 <HAL_RCC_OscConfig+0x308>
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	2b18      	cmp	r3, #24
 80030a4:	d13a      	bne.n	800311c <HAL_RCC_OscConfig+0x374>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d135      	bne.n	800311c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030b0:	4b7b      	ldr	r3, [pc, #492]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d005      	beq.n	80030c8 <HAL_RCC_OscConfig+0x320>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	69db      	ldr	r3, [r3, #28]
 80030c0:	2b80      	cmp	r3, #128	@ 0x80
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e2c1      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030c8:	f7fd fe76 	bl	8000db8 <HAL_GetREVID>
 80030cc:	4603      	mov	r3, r0
 80030ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d817      	bhi.n	8003106 <HAL_RCC_OscConfig+0x35e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d108      	bne.n	80030f0 <HAL_RCC_OscConfig+0x348>
 80030de:	4b70      	ldr	r3, [pc, #448]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80030e6:	4a6e      	ldr	r2, [pc, #440]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80030e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80030ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ee:	e075      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030f0:	4b6b      	ldr	r3, [pc, #428]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	069b      	lsls	r3, r3, #26
 80030fe:	4968      	ldr	r1, [pc, #416]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003100:	4313      	orrs	r3, r2
 8003102:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003104:	e06a      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003106:	4b66      	ldr	r3, [pc, #408]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	061b      	lsls	r3, r3, #24
 8003114:	4962      	ldr	r1, [pc, #392]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800311a:	e05f      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d042      	beq.n	80031aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003124:	4b5e      	ldr	r3, [pc, #376]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5d      	ldr	r2, [pc, #372]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800312a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800312e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003130:	f7fd fe12 	bl	8000d58 <HAL_GetTick>
 8003134:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003138:	f7fd fe0e 	bl	8000d58 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e280      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800314a:	4b55      	ldr	r3, [pc, #340]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003156:	f7fd fe2f 	bl	8000db8 <HAL_GetREVID>
 800315a:	4603      	mov	r3, r0
 800315c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003160:	4293      	cmp	r3, r2
 8003162:	d817      	bhi.n	8003194 <HAL_RCC_OscConfig+0x3ec>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	2b20      	cmp	r3, #32
 800316a:	d108      	bne.n	800317e <HAL_RCC_OscConfig+0x3d6>
 800316c:	4b4c      	ldr	r3, [pc, #304]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003174:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003176:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800317a:	6053      	str	r3, [r2, #4]
 800317c:	e02e      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
 800317e:	4b48      	ldr	r3, [pc, #288]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a1b      	ldr	r3, [r3, #32]
 800318a:	069b      	lsls	r3, r3, #26
 800318c:	4944      	ldr	r1, [pc, #272]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	604b      	str	r3, [r1, #4]
 8003192:	e023      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
 8003194:	4b42      	ldr	r3, [pc, #264]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	493f      	ldr	r1, [pc, #252]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
 80031a8:	e018      	b.n	80031dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031aa:	4b3d      	ldr	r3, [pc, #244]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a3c      	ldr	r2, [pc, #240]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80031b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031b6:	f7fd fdcf 	bl	8000d58 <HAL_GetTick>
 80031ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031be:	f7fd fdcb 	bl	8000d58 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e23d      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80031d0:	4b33      	ldr	r3, [pc, #204]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1f0      	bne.n	80031be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d036      	beq.n	8003256 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d019      	beq.n	8003224 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031f0:	4b2b      	ldr	r3, [pc, #172]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f4:	4a2a      	ldr	r2, [pc, #168]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fc:	f7fd fdac 	bl	8000d58 <HAL_GetTick>
 8003200:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003202:	e008      	b.n	8003216 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003204:	f7fd fda8 	bl	8000d58 <HAL_GetTick>
 8003208:	4602      	mov	r2, r0
 800320a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800320c:	1ad3      	subs	r3, r2, r3
 800320e:	2b02      	cmp	r3, #2
 8003210:	d901      	bls.n	8003216 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003212:	2303      	movs	r3, #3
 8003214:	e21a      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003216:	4b22      	ldr	r3, [pc, #136]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d0f0      	beq.n	8003204 <HAL_RCC_OscConfig+0x45c>
 8003222:	e018      	b.n	8003256 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003224:	4b1e      	ldr	r3, [pc, #120]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003228:	4a1d      	ldr	r2, [pc, #116]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003230:	f7fd fd92 	bl	8000d58 <HAL_GetTick>
 8003234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003238:	f7fd fd8e 	bl	8000d58 <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b02      	cmp	r3, #2
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e200      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800324a:	4b15      	ldr	r3, [pc, #84]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800324c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b00      	cmp	r3, #0
 8003260:	d039      	beq.n	80032d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d01c      	beq.n	80032a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800326a:	4b0d      	ldr	r3, [pc, #52]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a0c      	ldr	r2, [pc, #48]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003270:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003274:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003276:	f7fd fd6f 	bl	8000d58 <HAL_GetTick>
 800327a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800327c:	e008      	b.n	8003290 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800327e:	f7fd fd6b 	bl	8000d58 <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d901      	bls.n	8003290 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e1dd      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003290:	4b03      	ldr	r3, [pc, #12]	@ (80032a0 <HAL_RCC_OscConfig+0x4f8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003298:	2b00      	cmp	r3, #0
 800329a:	d0f0      	beq.n	800327e <HAL_RCC_OscConfig+0x4d6>
 800329c:	e01b      	b.n	80032d6 <HAL_RCC_OscConfig+0x52e>
 800329e:	bf00      	nop
 80032a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032a4:	4b9b      	ldr	r3, [pc, #620]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a9a      	ldr	r2, [pc, #616]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80032aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80032ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032b0:	f7fd fd52 	bl	8000d58 <HAL_GetTick>
 80032b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032b8:	f7fd fd4e 	bl	8000d58 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1c0      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80032ca:	4b92      	ldr	r3, [pc, #584]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	f000 8081 	beq.w	80033e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80032e4:	4b8c      	ldr	r3, [pc, #560]	@ (8003518 <HAL_RCC_OscConfig+0x770>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a8b      	ldr	r2, [pc, #556]	@ (8003518 <HAL_RCC_OscConfig+0x770>)
 80032ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032f0:	f7fd fd32 	bl	8000d58 <HAL_GetTick>
 80032f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032f6:	e008      	b.n	800330a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032f8:	f7fd fd2e 	bl	8000d58 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	@ 0x64
 8003304:	d901      	bls.n	800330a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e1a0      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800330a:	4b83      	ldr	r3, [pc, #524]	@ (8003518 <HAL_RCC_OscConfig+0x770>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f0      	beq.n	80032f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d106      	bne.n	800332c <HAL_RCC_OscConfig+0x584>
 800331e:	4b7d      	ldr	r3, [pc, #500]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003322:	4a7c      	ldr	r2, [pc, #496]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003324:	f043 0301 	orr.w	r3, r3, #1
 8003328:	6713      	str	r3, [r2, #112]	@ 0x70
 800332a:	e02d      	b.n	8003388 <HAL_RCC_OscConfig+0x5e0>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10c      	bne.n	800334e <HAL_RCC_OscConfig+0x5a6>
 8003334:	4b77      	ldr	r3, [pc, #476]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003336:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003338:	4a76      	ldr	r2, [pc, #472]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800333a:	f023 0301 	bic.w	r3, r3, #1
 800333e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003340:	4b74      	ldr	r3, [pc, #464]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003342:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003344:	4a73      	ldr	r2, [pc, #460]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003346:	f023 0304 	bic.w	r3, r3, #4
 800334a:	6713      	str	r3, [r2, #112]	@ 0x70
 800334c:	e01c      	b.n	8003388 <HAL_RCC_OscConfig+0x5e0>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	2b05      	cmp	r3, #5
 8003354:	d10c      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c8>
 8003356:	4b6f      	ldr	r3, [pc, #444]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	4a6e      	ldr	r2, [pc, #440]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800335c:	f043 0304 	orr.w	r3, r3, #4
 8003360:	6713      	str	r3, [r2, #112]	@ 0x70
 8003362:	4b6c      	ldr	r3, [pc, #432]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003366:	4a6b      	ldr	r2, [pc, #428]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003368:	f043 0301 	orr.w	r3, r3, #1
 800336c:	6713      	str	r3, [r2, #112]	@ 0x70
 800336e:	e00b      	b.n	8003388 <HAL_RCC_OscConfig+0x5e0>
 8003370:	4b68      	ldr	r3, [pc, #416]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003372:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003374:	4a67      	ldr	r2, [pc, #412]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	6713      	str	r3, [r2, #112]	@ 0x70
 800337c:	4b65      	ldr	r3, [pc, #404]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800337e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003380:	4a64      	ldr	r2, [pc, #400]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003382:	f023 0304 	bic.w	r3, r3, #4
 8003386:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003390:	f7fd fce2 	bl	8000d58 <HAL_GetTick>
 8003394:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003396:	e00a      	b.n	80033ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003398:	f7fd fcde 	bl	8000d58 <HAL_GetTick>
 800339c:	4602      	mov	r2, r0
 800339e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e14e      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ae:	4b59      	ldr	r3, [pc, #356]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0ee      	beq.n	8003398 <HAL_RCC_OscConfig+0x5f0>
 80033ba:	e014      	b.n	80033e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fd fccc 	bl	8000d58 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033c2:	e00a      	b.n	80033da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c4:	f7fd fcc8 	bl	8000d58 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e138      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80033da:	4b4e      	ldr	r3, [pc, #312]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1ee      	bne.n	80033c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 812d 	beq.w	800364a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80033f0:	4b48      	ldr	r3, [pc, #288]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033f8:	2b18      	cmp	r3, #24
 80033fa:	f000 80bd 	beq.w	8003578 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	2b02      	cmp	r3, #2
 8003404:	f040 809e 	bne.w	8003544 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003408:	4b42      	ldr	r3, [pc, #264]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a41      	ldr	r2, [pc, #260]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800340e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fd fca0 	bl	8000d58 <HAL_GetTick>
 8003418:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800341c:	f7fd fc9c 	bl	8000d58 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e10e      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800342e:	4b39      	ldr	r3, [pc, #228]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800343a:	4b36      	ldr	r3, [pc, #216]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800343c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800343e:	4b37      	ldr	r3, [pc, #220]	@ (800351c <HAL_RCC_OscConfig+0x774>)
 8003440:	4013      	ands	r3, r2
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800344a:	0112      	lsls	r2, r2, #4
 800344c:	430a      	orrs	r2, r1
 800344e:	4931      	ldr	r1, [pc, #196]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003450:	4313      	orrs	r3, r2
 8003452:	628b      	str	r3, [r1, #40]	@ 0x28
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003458:	3b01      	subs	r3, #1
 800345a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003462:	3b01      	subs	r3, #1
 8003464:	025b      	lsls	r3, r3, #9
 8003466:	b29b      	uxth	r3, r3
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800346e:	3b01      	subs	r3, #1
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003476:	431a      	orrs	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	3b01      	subs	r3, #1
 800347e:	061b      	lsls	r3, r3, #24
 8003480:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003484:	4923      	ldr	r1, [pc, #140]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003486:	4313      	orrs	r3, r2
 8003488:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800348a:	4b22      	ldr	r3, [pc, #136]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	4a21      	ldr	r2, [pc, #132]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003490:	f023 0301 	bic.w	r3, r3, #1
 8003494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003496:	4b1f      	ldr	r3, [pc, #124]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800349a:	4b21      	ldr	r3, [pc, #132]	@ (8003520 <HAL_RCC_OscConfig+0x778>)
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80034a2:	00d2      	lsls	r2, r2, #3
 80034a4:	491b      	ldr	r1, [pc, #108]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034a6:	4313      	orrs	r3, r2
 80034a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ae:	f023 020c 	bic.w	r2, r3, #12
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b6:	4917      	ldr	r1, [pc, #92]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80034bc:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c0:	f023 0202 	bic.w	r2, r3, #2
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034c8:	4912      	ldr	r1, [pc, #72]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034ca:	4313      	orrs	r3, r2
 80034cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80034ce:	4b11      	ldr	r3, [pc, #68]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d2:	4a10      	ldr	r2, [pc, #64]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034da:	4b0e      	ldr	r3, [pc, #56]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034de:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80034f2:	4b08      	ldr	r3, [pc, #32]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034f6:	4a07      	ldr	r2, [pc, #28]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 80034f8:	f043 0301 	orr.w	r3, r3, #1
 80034fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034fe:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a04      	ldr	r2, [pc, #16]	@ (8003514 <HAL_RCC_OscConfig+0x76c>)
 8003504:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350a:	f7fd fc25 	bl	8000d58 <HAL_GetTick>
 800350e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003510:	e011      	b.n	8003536 <HAL_RCC_OscConfig+0x78e>
 8003512:	bf00      	nop
 8003514:	58024400 	.word	0x58024400
 8003518:	58024800 	.word	0x58024800
 800351c:	fffffc0c 	.word	0xfffffc0c
 8003520:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003524:	f7fd fc18 	bl	8000d58 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e08a      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003536:	4b47      	ldr	r3, [pc, #284]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x77c>
 8003542:	e082      	b.n	800364a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003544:	4b43      	ldr	r3, [pc, #268]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a42      	ldr	r2, [pc, #264]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800354a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fd fc02 	bl	8000d58 <HAL_GetTick>
 8003554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003558:	f7fd fbfe 	bl	8000d58 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e070      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800356a:	4b3a      	ldr	r3, [pc, #232]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003572:	2b00      	cmp	r3, #0
 8003574:	d1f0      	bne.n	8003558 <HAL_RCC_OscConfig+0x7b0>
 8003576:	e068      	b.n	800364a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003578:	4b36      	ldr	r3, [pc, #216]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800357a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800357e:	4b35      	ldr	r3, [pc, #212]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003582:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003588:	2b01      	cmp	r3, #1
 800358a:	d031      	beq.n	80035f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003596:	429a      	cmp	r2, r3
 8003598:	d12a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d122      	bne.n	80035f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d11a      	bne.n	80035f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	0a5b      	lsrs	r3, r3, #9
 80035be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d111      	bne.n	80035f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	0c1b      	lsrs	r3, r3, #16
 80035d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80035da:	429a      	cmp	r2, r3
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d001      	beq.n	80035f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	e02b      	b.n	800364c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80035f4:	4b17      	ldr	r3, [pc, #92]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 80035f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035f8:	08db      	lsrs	r3, r3, #3
 80035fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	429a      	cmp	r2, r3
 8003608:	d01f      	beq.n	800364a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800360a:	4b12      	ldr	r3, [pc, #72]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800360c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360e:	4a11      	ldr	r2, [pc, #68]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003616:	f7fd fb9f 	bl	8000d58 <HAL_GetTick>
 800361a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800361c:	bf00      	nop
 800361e:	f7fd fb9b 	bl	8000d58 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003626:	4293      	cmp	r3, r2
 8003628:	d0f9      	beq.n	800361e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800362a:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800362c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800362e:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <HAL_RCC_OscConfig+0x8b0>)
 8003630:	4013      	ands	r3, r2
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003636:	00d2      	lsls	r2, r2, #3
 8003638:	4906      	ldr	r1, [pc, #24]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 800363a:	4313      	orrs	r3, r2
 800363c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800363e:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003642:	4a04      	ldr	r2, [pc, #16]	@ (8003654 <HAL_RCC_OscConfig+0x8ac>)
 8003644:	f043 0301 	orr.w	r3, r3, #1
 8003648:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3730      	adds	r7, #48	@ 0x30
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	58024400 	.word	0x58024400
 8003658:	ffff0007 	.word	0xffff0007

0800365c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e19c      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003670:	4b8a      	ldr	r3, [pc, #552]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 030f 	and.w	r3, r3, #15
 8003678:	683a      	ldr	r2, [r7, #0]
 800367a:	429a      	cmp	r2, r3
 800367c:	d910      	bls.n	80036a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800367e:	4b87      	ldr	r3, [pc, #540]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 020f 	bic.w	r2, r3, #15
 8003686:	4985      	ldr	r1, [pc, #532]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800368e:	4b83      	ldr	r3, [pc, #524]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 030f 	and.w	r3, r3, #15
 8003696:	683a      	ldr	r2, [r7, #0]
 8003698:	429a      	cmp	r2, r3
 800369a:	d001      	beq.n	80036a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	e184      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0304 	and.w	r3, r3, #4
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d010      	beq.n	80036ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	4b7b      	ldr	r3, [pc, #492]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d908      	bls.n	80036ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036bc:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	4975      	ldr	r1, [pc, #468]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d010      	beq.n	80036fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	4b70      	ldr	r3, [pc, #448]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036e0:	69db      	ldr	r3, [r3, #28]
 80036e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036e6:	429a      	cmp	r2, r3
 80036e8:	d908      	bls.n	80036fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036ea:	4b6d      	ldr	r3, [pc, #436]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	496a      	ldr	r1, [pc, #424]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b00      	cmp	r3, #0
 8003706:	d010      	beq.n	800372a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699a      	ldr	r2, [r3, #24]
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003714:	429a      	cmp	r2, r3
 8003716:	d908      	bls.n	800372a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003718:	4b61      	ldr	r3, [pc, #388]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	699b      	ldr	r3, [r3, #24]
 8003724:	495e      	ldr	r1, [pc, #376]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003726:	4313      	orrs	r3, r2
 8003728:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	d010      	beq.n	8003758 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	4b59      	ldr	r3, [pc, #356]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003742:	429a      	cmp	r2, r3
 8003744:	d908      	bls.n	8003758 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003746:	4b56      	ldr	r3, [pc, #344]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	4953      	ldr	r1, [pc, #332]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003754:	4313      	orrs	r3, r2
 8003756:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d010      	beq.n	8003786 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	4b4d      	ldr	r3, [pc, #308]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	f003 030f 	and.w	r3, r3, #15
 8003770:	429a      	cmp	r2, r3
 8003772:	d908      	bls.n	8003786 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003774:	4b4a      	ldr	r3, [pc, #296]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f023 020f 	bic.w	r2, r3, #15
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	4947      	ldr	r1, [pc, #284]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003782:	4313      	orrs	r3, r2
 8003784:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d055      	beq.n	800383e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003792:	4b43      	ldr	r3, [pc, #268]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	4940      	ldr	r1, [pc, #256]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b02      	cmp	r3, #2
 80037aa:	d107      	bne.n	80037bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037ac:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d121      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0f6      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d107      	bne.n	80037d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037c4:	4b36      	ldr	r3, [pc, #216]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d115      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0ea      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d107      	bne.n	80037ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037dc:	4b30      	ldr	r3, [pc, #192]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d109      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e0de      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037ec:	4b2c      	ldr	r3, [pc, #176]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e0d6      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037fc:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	f023 0207 	bic.w	r2, r3, #7
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4925      	ldr	r1, [pc, #148]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800380a:	4313      	orrs	r3, r2
 800380c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800380e:	f7fd faa3 	bl	8000d58 <HAL_GetTick>
 8003812:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003814:	e00a      	b.n	800382c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003816:	f7fd fa9f 	bl	8000d58 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003824:	4293      	cmp	r3, r2
 8003826:	d901      	bls.n	800382c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0be      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382c:	4b1c      	ldr	r3, [pc, #112]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	429a      	cmp	r2, r3
 800383c:	d1eb      	bne.n	8003816 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d010      	beq.n	800386c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68da      	ldr	r2, [r3, #12]
 800384e:	4b14      	ldr	r3, [pc, #80]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	f003 030f 	and.w	r3, r3, #15
 8003856:	429a      	cmp	r2, r3
 8003858:	d208      	bcs.n	800386c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385a:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f023 020f 	bic.w	r2, r3, #15
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	490e      	ldr	r1, [pc, #56]	@ (80038a0 <HAL_RCC_ClockConfig+0x244>)
 8003868:	4313      	orrs	r3, r2
 800386a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800386c:	4b0b      	ldr	r3, [pc, #44]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 030f 	and.w	r3, r3, #15
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d214      	bcs.n	80038a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387a:	4b08      	ldr	r3, [pc, #32]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f023 020f 	bic.w	r2, r3, #15
 8003882:	4906      	ldr	r1, [pc, #24]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	4313      	orrs	r3, r2
 8003888:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800388a:	4b04      	ldr	r3, [pc, #16]	@ (800389c <HAL_RCC_ClockConfig+0x240>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 030f 	and.w	r3, r3, #15
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d005      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e086      	b.n	80039aa <HAL_RCC_ClockConfig+0x34e>
 800389c:	52002000 	.word	0x52002000
 80038a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691a      	ldr	r2, [r3, #16]
 80038b4:	4b3f      	ldr	r3, [pc, #252]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038bc:	429a      	cmp	r2, r3
 80038be:	d208      	bcs.n	80038d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038c0:	4b3c      	ldr	r3, [pc, #240]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	4939      	ldr	r1, [pc, #228]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d010      	beq.n	8003900 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	4b34      	ldr	r3, [pc, #208]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038e4:	69db      	ldr	r3, [r3, #28]
 80038e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d208      	bcs.n	8003900 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038ee:	4b31      	ldr	r3, [pc, #196]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	492e      	ldr	r1, [pc, #184]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 80038fc:	4313      	orrs	r3, r2
 80038fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	699a      	ldr	r2, [r3, #24]
 8003910:	4b28      	ldr	r3, [pc, #160]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 8003912:	69db      	ldr	r3, [r3, #28]
 8003914:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003918:	429a      	cmp	r2, r3
 800391a:	d208      	bcs.n	800392e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800391c:	4b25      	ldr	r3, [pc, #148]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4922      	ldr	r1, [pc, #136]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 800392a:	4313      	orrs	r3, r2
 800392c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d010      	beq.n	800395c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	4b1d      	ldr	r3, [pc, #116]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003946:	429a      	cmp	r2, r3
 8003948:	d208      	bcs.n	800395c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800394a:	4b1a      	ldr	r3, [pc, #104]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	69db      	ldr	r3, [r3, #28]
 8003956:	4917      	ldr	r1, [pc, #92]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 8003958:	4313      	orrs	r3, r2
 800395a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800395c:	f000 f834 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003960:	4602      	mov	r2, r0
 8003962:	4b14      	ldr	r3, [pc, #80]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	0a1b      	lsrs	r3, r3, #8
 8003968:	f003 030f 	and.w	r3, r3, #15
 800396c:	4912      	ldr	r1, [pc, #72]	@ (80039b8 <HAL_RCC_ClockConfig+0x35c>)
 800396e:	5ccb      	ldrb	r3, [r1, r3]
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	fa22 f303 	lsr.w	r3, r2, r3
 8003978:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800397a:	4b0e      	ldr	r3, [pc, #56]	@ (80039b4 <HAL_RCC_ClockConfig+0x358>)
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	f003 030f 	and.w	r3, r3, #15
 8003982:	4a0d      	ldr	r2, [pc, #52]	@ (80039b8 <HAL_RCC_ClockConfig+0x35c>)
 8003984:	5cd3      	ldrb	r3, [r2, r3]
 8003986:	f003 031f 	and.w	r3, r3, #31
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
 8003990:	4a0a      	ldr	r2, [pc, #40]	@ (80039bc <HAL_RCC_ClockConfig+0x360>)
 8003992:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003994:	4a0a      	ldr	r2, [pc, #40]	@ (80039c0 <HAL_RCC_ClockConfig+0x364>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800399a:	4b0a      	ldr	r3, [pc, #40]	@ (80039c4 <HAL_RCC_ClockConfig+0x368>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd f990 	bl	8000cc4 <HAL_InitTick>
 80039a4:	4603      	mov	r3, r0
 80039a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3718      	adds	r7, #24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	58024400 	.word	0x58024400
 80039b8:	08007b1c 	.word	0x08007b1c
 80039bc:	24000004 	.word	0x24000004
 80039c0:	24000000 	.word	0x24000000
 80039c4:	24000008 	.word	0x24000008

080039c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b089      	sub	sp, #36	@ 0x24
 80039cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ce:	4bb3      	ldr	r3, [pc, #716]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80039d6:	2b18      	cmp	r3, #24
 80039d8:	f200 8155 	bhi.w	8003c86 <HAL_RCC_GetSysClockFreq+0x2be>
 80039dc:	a201      	add	r2, pc, #4	@ (adr r2, 80039e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e2:	bf00      	nop
 80039e4:	08003a49 	.word	0x08003a49
 80039e8:	08003c87 	.word	0x08003c87
 80039ec:	08003c87 	.word	0x08003c87
 80039f0:	08003c87 	.word	0x08003c87
 80039f4:	08003c87 	.word	0x08003c87
 80039f8:	08003c87 	.word	0x08003c87
 80039fc:	08003c87 	.word	0x08003c87
 8003a00:	08003c87 	.word	0x08003c87
 8003a04:	08003a6f 	.word	0x08003a6f
 8003a08:	08003c87 	.word	0x08003c87
 8003a0c:	08003c87 	.word	0x08003c87
 8003a10:	08003c87 	.word	0x08003c87
 8003a14:	08003c87 	.word	0x08003c87
 8003a18:	08003c87 	.word	0x08003c87
 8003a1c:	08003c87 	.word	0x08003c87
 8003a20:	08003c87 	.word	0x08003c87
 8003a24:	08003a75 	.word	0x08003a75
 8003a28:	08003c87 	.word	0x08003c87
 8003a2c:	08003c87 	.word	0x08003c87
 8003a30:	08003c87 	.word	0x08003c87
 8003a34:	08003c87 	.word	0x08003c87
 8003a38:	08003c87 	.word	0x08003c87
 8003a3c:	08003c87 	.word	0x08003c87
 8003a40:	08003c87 	.word	0x08003c87
 8003a44:	08003a7b 	.word	0x08003a7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a48:	4b94      	ldr	r3, [pc, #592]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0320 	and.w	r3, r3, #32
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a54:	4b91      	ldr	r3, [pc, #580]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	08db      	lsrs	r3, r3, #3
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	4a90      	ldr	r2, [pc, #576]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
 8003a64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a66:	e111      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a68:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a6a:	61bb      	str	r3, [r7, #24]
      break;
 8003a6c:	e10e      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a6e:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a70:	61bb      	str	r3, [r7, #24]
      break;
 8003a72:	e10b      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a74:	4b8c      	ldr	r3, [pc, #560]	@ (8003ca8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a76:	61bb      	str	r3, [r7, #24]
      break;
 8003a78:	e108      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a7a:	4b88      	ldr	r3, [pc, #544]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	f003 0303 	and.w	r3, r3, #3
 8003a82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a84:	4b85      	ldr	r3, [pc, #532]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a88:	091b      	lsrs	r3, r3, #4
 8003a8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a90:	4b82      	ldr	r3, [pc, #520]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a9a:	4b80      	ldr	r3, [pc, #512]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	08db      	lsrs	r3, r3, #3
 8003aa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	fb02 f303 	mul.w	r3, r2, r3
 8003aaa:	ee07 3a90 	vmov	s15, r3
 8003aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80e1 	beq.w	8003c80 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	f000 8083 	beq.w	8003bcc <HAL_RCC_GetSysClockFreq+0x204>
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	f200 80a1 	bhi.w	8003c10 <HAL_RCC_GetSysClockFreq+0x248>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x114>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d056      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ada:	e099      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003adc:	4b6f      	ldr	r3, [pc, #444]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0320 	and.w	r3, r3, #32
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d02d      	beq.n	8003b44 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	08db      	lsrs	r3, r3, #3
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
 8003af8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b12:	4b62      	ldr	r3, [pc, #392]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1a:	ee07 3a90 	vmov	s15, r3
 8003b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b22:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b26:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b42:	e087      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	ee07 3a90 	vmov	s15, r3
 8003b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003cb0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003b52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b56:	4b51      	ldr	r3, [pc, #324]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b66:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b6a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b86:	e065      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b9a:	4b40      	ldr	r3, [pc, #256]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba2:	ee07 3a90 	vmov	s15, r3
 8003ba6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003baa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bca:	e043      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003cb8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bde:	4b2f      	ldr	r3, [pc, #188]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be6:	ee07 3a90 	vmov	s15, r3
 8003bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bf2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c0e:	e021      	b.n	8003c54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003cb4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c22:	4b1e      	ldr	r3, [pc, #120]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c2a:	ee07 3a90 	vmov	s15, r3
 8003c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c32:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003cac <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003c54:	4b11      	ldr	r3, [pc, #68]	@ (8003c9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c58:	0a5b      	lsrs	r3, r3, #9
 8003c5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c5e:	3301      	adds	r3, #1
 8003c60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	ee07 3a90 	vmov	s15, r3
 8003c68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c78:	ee17 3a90 	vmov	r3, s15
 8003c7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c7e:	e005      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	61bb      	str	r3, [r7, #24]
      break;
 8003c84:	e002      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c86:	4b07      	ldr	r3, [pc, #28]	@ (8003ca4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c88:	61bb      	str	r3, [r7, #24]
      break;
 8003c8a:	bf00      	nop
  }

  return sysclockfreq;
 8003c8c:	69bb      	ldr	r3, [r7, #24]
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3724      	adds	r7, #36	@ 0x24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	58024400 	.word	0x58024400
 8003ca0:	03d09000 	.word	0x03d09000
 8003ca4:	003d0900 	.word	0x003d0900
 8003ca8:	017d7840 	.word	0x017d7840
 8003cac:	46000000 	.word	0x46000000
 8003cb0:	4c742400 	.word	0x4c742400
 8003cb4:	4a742400 	.word	0x4a742400
 8003cb8:	4bbebc20 	.word	0x4bbebc20

08003cbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b082      	sub	sp, #8
 8003cc0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cc2:	f7ff fe81 	bl	80039c8 <HAL_RCC_GetSysClockFreq>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	4b10      	ldr	r3, [pc, #64]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	0a1b      	lsrs	r3, r3, #8
 8003cce:	f003 030f 	and.w	r3, r3, #15
 8003cd2:	490f      	ldr	r1, [pc, #60]	@ (8003d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd4:	5ccb      	ldrb	r3, [r1, r3]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
 8003cda:	fa22 f303 	lsr.w	r3, r2, r3
 8003cde:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ce0:	4b0a      	ldr	r3, [pc, #40]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x50>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	4a09      	ldr	r2, [pc, #36]	@ (8003d10 <HAL_RCC_GetHCLKFreq+0x54>)
 8003cea:	5cd3      	ldrb	r3, [r2, r3]
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf6:	4a07      	ldr	r2, [pc, #28]	@ (8003d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cf8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cfa:	4a07      	ldr	r2, [pc, #28]	@ (8003d18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d00:	4b04      	ldr	r3, [pc, #16]	@ (8003d14 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d02:	681b      	ldr	r3, [r3, #0]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	58024400 	.word	0x58024400
 8003d10:	08007b1c 	.word	0x08007b1c
 8003d14:	24000004 	.word	0x24000004
 8003d18:	24000000 	.word	0x24000000

08003d1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d20:	f7ff ffcc 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8003d24:	4602      	mov	r2, r0
 8003d26:	4b06      	ldr	r3, [pc, #24]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	4904      	ldr	r1, [pc, #16]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d32:	5ccb      	ldrb	r3, [r1, r3]
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	58024400 	.word	0x58024400
 8003d44:	08007b1c 	.word	0x08007b1c

08003d48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d4c:	b0ca      	sub	sp, #296	@ 0x128
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d54:	2300      	movs	r3, #0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003d6c:	2500      	movs	r5, #0
 8003d6e:	ea54 0305 	orrs.w	r3, r4, r5
 8003d72:	d049      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003d80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003d84:	d828      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d8a:	d01a      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003d90:	d822      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d003      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d9a:	d007      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003d9c:	e01c      	b.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9e:	4bb8      	ldr	r3, [pc, #736]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da2:	4ab7      	ldr	r2, [pc, #732]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003da4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003daa:	e01a      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	3308      	adds	r3, #8
 8003db2:	2102      	movs	r1, #2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f002 fb61 	bl	800647c <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	3328      	adds	r3, #40	@ 0x28
 8003dc8:	2102      	movs	r1, #2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f002 fc08 	bl	80065e0 <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003dea:	4ba5      	ldr	r3, [pc, #660]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003dee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003df8:	4aa1      	ldr	r2, [pc, #644]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003e14:	f04f 0900 	mov.w	r9, #0
 8003e18:	ea58 0309 	orrs.w	r3, r8, r9
 8003e1c:	d047      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e24:	2b04      	cmp	r3, #4
 8003e26:	d82a      	bhi.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003e28:	a201      	add	r2, pc, #4	@ (adr r2, 8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2e:	bf00      	nop
 8003e30:	08003e45 	.word	0x08003e45
 8003e34:	08003e53 	.word	0x08003e53
 8003e38:	08003e69 	.word	0x08003e69
 8003e3c:	08003e87 	.word	0x08003e87
 8003e40:	08003e87 	.word	0x08003e87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e44:	4b8e      	ldr	r3, [pc, #568]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e48:	4a8d      	ldr	r2, [pc, #564]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e50:	e01a      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	3308      	adds	r3, #8
 8003e58:	2100      	movs	r1, #0
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f002 fb0e 	bl	800647c <RCCEx_PLL2_Config>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e66:	e00f      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	3328      	adds	r3, #40	@ 0x28
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 fbb5 	bl	80065e0 <RCCEx_PLL3_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003e7c:	e004      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e84:	e000      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003e86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d10a      	bne.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e90:	4b7b      	ldr	r3, [pc, #492]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e94:	f023 0107 	bic.w	r1, r3, #7
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e9e:	4a78      	ldr	r2, [pc, #480]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003ea4:	e003      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003eba:	f04f 0b00 	mov.w	fp, #0
 8003ebe:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ec2:	d04c      	beq.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ece:	d030      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ed0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ed4:	d829      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ed6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ed8:	d02d      	beq.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003eda:	2bc0      	cmp	r3, #192	@ 0xc0
 8003edc:	d825      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ede:	2b80      	cmp	r3, #128	@ 0x80
 8003ee0:	d018      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ee2:	2b80      	cmp	r3, #128	@ 0x80
 8003ee4:	d821      	bhi.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d002      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003eea:	2b40      	cmp	r3, #64	@ 0x40
 8003eec:	d007      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003eee:	e01c      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ef0:	4b63      	ldr	r3, [pc, #396]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef4:	4a62      	ldr	r2, [pc, #392]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ef6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003efa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003efc:	e01c      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	3308      	adds	r3, #8
 8003f04:	2100      	movs	r1, #0
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 fab8 	bl	800647c <RCCEx_PLL2_Config>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f12:	e011      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	3328      	adds	r3, #40	@ 0x28
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f002 fb5f 	bl	80065e0 <RCCEx_PLL3_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f28:	e006      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f30:	e002      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f32:	bf00      	nop
 8003f34:	e000      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003f36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f40:	4b4f      	ldr	r3, [pc, #316]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f44:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f4e:	4a4c      	ldr	r2, [pc, #304]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f54:	e003      	b.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f66:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003f6a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003f6e:	2300      	movs	r3, #0
 8003f70:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003f74:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	d053      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f82:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f86:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f8a:	d035      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003f8c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003f90:	d82e      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f92:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f96:	d031      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003f98:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003f9c:	d828      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003f9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa2:	d01a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003fa4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fa8:	d822      	bhi.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003fae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fb2:	d007      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003fb4:	e01c      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb6:	4b32      	ldr	r3, [pc, #200]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fba:	4a31      	ldr	r2, [pc, #196]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e01c      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	3308      	adds	r3, #8
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f002 fa55 	bl	800647c <RCCEx_PLL2_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e011      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	3328      	adds	r3, #40	@ 0x28
 8003fe0:	2100      	movs	r1, #0
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f002 fafc 	bl	80065e0 <RCCEx_PLL3_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fee:	e006      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ff6:	e002      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ff8:	bf00      	nop
 8003ffa:	e000      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003ffc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ffe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004006:	4b1e      	ldr	r3, [pc, #120]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004016:	4a1a      	ldr	r2, [pc, #104]	@ (8004080 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004018:	430b      	orrs	r3, r1
 800401a:	6593      	str	r3, [r2, #88]	@ 0x58
 800401c:	e003      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004032:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8004036:	2300      	movs	r3, #0
 8004038:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800403c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8004040:	460b      	mov	r3, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	d056      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800404e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004052:	d038      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004054:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004058:	d831      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800405a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800405e:	d034      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004060:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004064:	d82b      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004066:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800406a:	d01d      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800406c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004070:	d825      	bhi.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d006      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004076:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800407a:	d00a      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800407c:	e01f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800407e:	bf00      	nop
 8004080:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004084:	4ba2      	ldr	r3, [pc, #648]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004086:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004088:	4aa1      	ldr	r2, [pc, #644]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800408e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004090:	e01c      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3308      	adds	r3, #8
 8004098:	2100      	movs	r1, #0
 800409a:	4618      	mov	r0, r3
 800409c:	f002 f9ee 	bl	800647c <RCCEx_PLL2_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80040a6:	e011      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f002 fa95 	bl	80065e0 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040bc:	e006      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c4:	e002      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80040ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80040d4:	4b8e      	ldr	r3, [pc, #568]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80040e4:	4a8a      	ldr	r2, [pc, #552]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040e6:	430b      	orrs	r3, r1
 80040e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ea:	e003      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004100:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004104:	2300      	movs	r3, #0
 8004106:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800410a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800410e:	460b      	mov	r3, r1
 8004110:	4313      	orrs	r3, r2
 8004112:	d03a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800411a:	2b30      	cmp	r3, #48	@ 0x30
 800411c:	d01f      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800411e:	2b30      	cmp	r3, #48	@ 0x30
 8004120:	d819      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d00c      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004126:	2b20      	cmp	r3, #32
 8004128:	d815      	bhi.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d019      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800412e:	2b10      	cmp	r3, #16
 8004130:	d111      	bne.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004132:	4b77      	ldr	r3, [pc, #476]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004136:	4a76      	ldr	r2, [pc, #472]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004138:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800413c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800413e:	e011      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004144:	3308      	adds	r3, #8
 8004146:	2102      	movs	r1, #2
 8004148:	4618      	mov	r0, r3
 800414a:	f002 f997 	bl	800647c <RCCEx_PLL2_Config>
 800414e:	4603      	mov	r3, r0
 8004150:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004154:	e006      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415c:	e002      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800415e:	bf00      	nop
 8004160:	e000      	b.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004162:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	2b00      	cmp	r3, #0
 800416a:	d10a      	bne.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800416c:	4b68      	ldr	r3, [pc, #416]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800416e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004170:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800417a:	4a65      	ldr	r2, [pc, #404]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800417c:	430b      	orrs	r3, r1
 800417e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004180:	e003      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004196:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800419a:	2300      	movs	r3, #0
 800419c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80041a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80041a4:	460b      	mov	r3, r1
 80041a6:	4313      	orrs	r3, r2
 80041a8:	d051      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80041aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041b4:	d035      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80041b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041ba:	d82e      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c0:	d031      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80041c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80041c6:	d828      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d01a      	beq.n	8004204 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80041ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041d2:	d822      	bhi.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80041d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041dc:	d007      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80041de:	e01c      	b.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041e4:	4a4a      	ldr	r2, [pc, #296]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80041ec:	e01c      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	3308      	adds	r3, #8
 80041f4:	2100      	movs	r1, #0
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 f940 	bl	800647c <RCCEx_PLL2_Config>
 80041fc:	4603      	mov	r3, r0
 80041fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004202:	e011      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004208:	3328      	adds	r3, #40	@ 0x28
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f002 f9e7 	bl	80065e0 <RCCEx_PLL3_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004218:	e006      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004220:	e002      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10a      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004230:	4b37      	ldr	r3, [pc, #220]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004234:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800423e:	4a34      	ldr	r2, [pc, #208]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004240:	430b      	orrs	r3, r1
 8004242:	6513      	str	r3, [r2, #80]	@ 0x50
 8004244:	e003      	b.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800424a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800425a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800425e:	2300      	movs	r3, #0
 8004260:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004264:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004268:	460b      	mov	r3, r1
 800426a:	4313      	orrs	r3, r2
 800426c:	d056      	beq.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004274:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004278:	d033      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800427a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800427e:	d82c      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004280:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004284:	d02f      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004286:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800428a:	d826      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800428c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004290:	d02b      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004292:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004296:	d820      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004298:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800429c:	d012      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800429e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80042a2:	d81a      	bhi.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d022      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80042a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042ac:	d115      	bne.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b2:	3308      	adds	r3, #8
 80042b4:	2101      	movs	r1, #1
 80042b6:	4618      	mov	r0, r3
 80042b8:	f002 f8e0 	bl	800647c <RCCEx_PLL2_Config>
 80042bc:	4603      	mov	r3, r0
 80042be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042c2:	e015      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	3328      	adds	r3, #40	@ 0x28
 80042ca:	2101      	movs	r1, #1
 80042cc:	4618      	mov	r0, r3
 80042ce:	f002 f987 	bl	80065e0 <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80042d8:	e00a      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e0:	e006      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042e2:	bf00      	nop
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10d      	bne.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80042f8:	4b05      	ldr	r3, [pc, #20]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004306:	4a02      	ldr	r2, [pc, #8]	@ (8004310 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004308:	430b      	orrs	r3, r1
 800430a:	6513      	str	r3, [r2, #80]	@ 0x50
 800430c:	e006      	b.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800430e:	bf00      	nop
 8004310:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800431c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800432c:	2300      	movs	r3, #0
 800432e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004332:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004336:	460b      	mov	r3, r1
 8004338:	4313      	orrs	r3, r2
 800433a:	d055      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004348:	d033      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800434a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800434e:	d82c      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004350:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004354:	d02f      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004356:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800435a:	d826      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800435c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004360:	d02b      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8004362:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004366:	d820      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800436c:	d012      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004372:	d81a      	bhi.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d022      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004378:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800437c:	d115      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	3308      	adds	r3, #8
 8004384:	2101      	movs	r1, #1
 8004386:	4618      	mov	r0, r3
 8004388:	f002 f878 	bl	800647c <RCCEx_PLL2_Config>
 800438c:	4603      	mov	r3, r0
 800438e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004392:	e015      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	3328      	adds	r3, #40	@ 0x28
 800439a:	2101      	movs	r1, #1
 800439c:	4618      	mov	r0, r3
 800439e:	f002 f91f 	bl	80065e0 <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80043a8:	e00a      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b0:	e006      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043b2:	bf00      	nop
 80043b4:	e004      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043b6:	bf00      	nop
 80043b8:	e002      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043ba:	bf00      	nop
 80043bc:	e000      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80043be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10b      	bne.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80043c8:	4ba3      	ldr	r3, [pc, #652]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80043d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80043de:	e003      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80043e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80043f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f8:	2300      	movs	r3, #0
 80043fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80043fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004402:	460b      	mov	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	d037      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800440e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004412:	d00e      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004418:	d816      	bhi.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800441e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004422:	d111      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004424:	4b8c      	ldr	r3, [pc, #560]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004428:	4a8b      	ldr	r2, [pc, #556]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800442a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800442e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004430:	e00f      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	3308      	adds	r3, #8
 8004438:	2101      	movs	r1, #1
 800443a:	4618      	mov	r0, r3
 800443c:	f002 f81e 	bl	800647c <RCCEx_PLL2_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004446:	e004      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10a      	bne.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800445a:	4b7f      	ldr	r3, [pc, #508]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800445e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004468:	4a7b      	ldr	r2, [pc, #492]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800446a:	430b      	orrs	r3, r1
 800446c:	6513      	str	r3, [r2, #80]	@ 0x50
 800446e:	e003      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004470:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004474:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004480:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004484:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004488:	2300      	movs	r3, #0
 800448a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800448e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d039      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d81c      	bhi.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80044a2:	a201      	add	r2, pc, #4	@ (adr r2, 80044a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80044a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a8:	080044e5 	.word	0x080044e5
 80044ac:	080044b9 	.word	0x080044b9
 80044b0:	080044c7 	.word	0x080044c7
 80044b4:	080044e5 	.word	0x080044e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b8:	4b67      	ldr	r3, [pc, #412]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044bc:	4a66      	ldr	r2, [pc, #408]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044c4:	e00f      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	3308      	adds	r3, #8
 80044cc:	2102      	movs	r1, #2
 80044ce:	4618      	mov	r0, r3
 80044d0:	f001 ffd4 	bl	800647c <RCCEx_PLL2_Config>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80044da:	e004      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044e2:	e000      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80044e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10a      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044ee:	4b5a      	ldr	r3, [pc, #360]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f2:	f023 0103 	bic.w	r1, r3, #3
 80044f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044fc:	4a56      	ldr	r2, [pc, #344]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004508:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800450c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004518:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004522:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	f000 809f 	beq.w	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800452e:	4b4b      	ldr	r3, [pc, #300]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a4a      	ldr	r2, [pc, #296]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004538:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800453a:	f7fc fc0d 	bl	8000d58 <HAL_GetTick>
 800453e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004542:	e00b      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004544:	f7fc fc08 	bl	8000d58 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	2b64      	cmp	r3, #100	@ 0x64
 8004552:	d903      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004554:	2303      	movs	r3, #3
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800455a:	e005      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800455c:	4b3f      	ldr	r3, [pc, #252]	@ (800465c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004564:	2b00      	cmp	r3, #0
 8004566:	d0ed      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456c:	2b00      	cmp	r3, #0
 800456e:	d179      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004570:	4b39      	ldr	r3, [pc, #228]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004572:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004578:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800457c:	4053      	eors	r3, r2
 800457e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004582:	2b00      	cmp	r3, #0
 8004584:	d015      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004586:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800458a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800458e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004592:	4b31      	ldr	r3, [pc, #196]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004596:	4a30      	ldr	r2, [pc, #192]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800459c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800459e:	4b2e      	ldr	r3, [pc, #184]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a2:	4a2d      	ldr	r2, [pc, #180]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80045aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80045b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80045ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045be:	d118      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c0:	f7fc fbca 	bl	8000d58 <HAL_GetTick>
 80045c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045c8:	e00d      	b.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fc fbc5 	bl	8000d58 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80045d4:	1ad2      	subs	r2, r2, r3
 80045d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80045da:	429a      	cmp	r2, r3
 80045dc:	d903      	bls.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80045e4:	e005      	b.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045e6:	4b1c      	ldr	r3, [pc, #112]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d0eb      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d129      	bne.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004602:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004606:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800460a:	d10e      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800460c:	4b12      	ldr	r3, [pc, #72]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004618:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800461c:	091a      	lsrs	r2, r3, #4
 800461e:	4b10      	ldr	r3, [pc, #64]	@ (8004660 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004620:	4013      	ands	r3, r2
 8004622:	4a0d      	ldr	r2, [pc, #52]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004624:	430b      	orrs	r3, r1
 8004626:	6113      	str	r3, [r2, #16]
 8004628:	e005      	b.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004630:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004634:	6113      	str	r3, [r2, #16]
 8004636:	4b08      	ldr	r3, [pc, #32]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004638:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004646:	4a04      	ldr	r2, [pc, #16]	@ (8004658 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004648:	430b      	orrs	r3, r1
 800464a:	6713      	str	r3, [r2, #112]	@ 0x70
 800464c:	e00e      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004656:	e009      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004658:	58024400 	.word	0x58024400
 800465c:	58024800 	.word	0x58024800
 8004660:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004668:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f002 0301 	and.w	r3, r2, #1
 8004678:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800467c:	2300      	movs	r3, #0
 800467e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004682:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004686:	460b      	mov	r3, r1
 8004688:	4313      	orrs	r3, r2
 800468a:	f000 8089 	beq.w	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800468e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004692:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004694:	2b28      	cmp	r3, #40	@ 0x28
 8004696:	d86b      	bhi.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004698:	a201      	add	r2, pc, #4	@ (adr r2, 80046a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800469a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800469e:	bf00      	nop
 80046a0:	08004779 	.word	0x08004779
 80046a4:	08004771 	.word	0x08004771
 80046a8:	08004771 	.word	0x08004771
 80046ac:	08004771 	.word	0x08004771
 80046b0:	08004771 	.word	0x08004771
 80046b4:	08004771 	.word	0x08004771
 80046b8:	08004771 	.word	0x08004771
 80046bc:	08004771 	.word	0x08004771
 80046c0:	08004745 	.word	0x08004745
 80046c4:	08004771 	.word	0x08004771
 80046c8:	08004771 	.word	0x08004771
 80046cc:	08004771 	.word	0x08004771
 80046d0:	08004771 	.word	0x08004771
 80046d4:	08004771 	.word	0x08004771
 80046d8:	08004771 	.word	0x08004771
 80046dc:	08004771 	.word	0x08004771
 80046e0:	0800475b 	.word	0x0800475b
 80046e4:	08004771 	.word	0x08004771
 80046e8:	08004771 	.word	0x08004771
 80046ec:	08004771 	.word	0x08004771
 80046f0:	08004771 	.word	0x08004771
 80046f4:	08004771 	.word	0x08004771
 80046f8:	08004771 	.word	0x08004771
 80046fc:	08004771 	.word	0x08004771
 8004700:	08004779 	.word	0x08004779
 8004704:	08004771 	.word	0x08004771
 8004708:	08004771 	.word	0x08004771
 800470c:	08004771 	.word	0x08004771
 8004710:	08004771 	.word	0x08004771
 8004714:	08004771 	.word	0x08004771
 8004718:	08004771 	.word	0x08004771
 800471c:	08004771 	.word	0x08004771
 8004720:	08004779 	.word	0x08004779
 8004724:	08004771 	.word	0x08004771
 8004728:	08004771 	.word	0x08004771
 800472c:	08004771 	.word	0x08004771
 8004730:	08004771 	.word	0x08004771
 8004734:	08004771 	.word	0x08004771
 8004738:	08004771 	.word	0x08004771
 800473c:	08004771 	.word	0x08004771
 8004740:	08004779 	.word	0x08004779
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	3308      	adds	r3, #8
 800474a:	2101      	movs	r1, #1
 800474c:	4618      	mov	r0, r3
 800474e:	f001 fe95 	bl	800647c <RCCEx_PLL2_Config>
 8004752:	4603      	mov	r3, r0
 8004754:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004758:	e00f      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475e:	3328      	adds	r3, #40	@ 0x28
 8004760:	2101      	movs	r1, #1
 8004762:	4618      	mov	r0, r3
 8004764:	f001 ff3c 	bl	80065e0 <RCCEx_PLL3_Config>
 8004768:	4603      	mov	r3, r0
 800476a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800476e:	e004      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004776:	e000      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800477a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10a      	bne.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004782:	4bbf      	ldr	r3, [pc, #764]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004786:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004790:	4abb      	ldr	r2, [pc, #748]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004792:	430b      	orrs	r3, r1
 8004794:	6553      	str	r3, [r2, #84]	@ 0x54
 8004796:	e003      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80047a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a8:	f002 0302 	and.w	r3, r2, #2
 80047ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047b0:	2300      	movs	r3, #0
 80047b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80047b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80047ba:	460b      	mov	r3, r1
 80047bc:	4313      	orrs	r3, r2
 80047be:	d041      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d824      	bhi.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80047ca:	a201      	add	r2, pc, #4	@ (adr r2, 80047d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	0800481d 	.word	0x0800481d
 80047d4:	080047e9 	.word	0x080047e9
 80047d8:	080047ff 	.word	0x080047ff
 80047dc:	0800481d 	.word	0x0800481d
 80047e0:	0800481d 	.word	0x0800481d
 80047e4:	0800481d 	.word	0x0800481d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ec:	3308      	adds	r3, #8
 80047ee:	2101      	movs	r1, #1
 80047f0:	4618      	mov	r0, r3
 80047f2:	f001 fe43 	bl	800647c <RCCEx_PLL2_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80047fc:	e00f      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004802:	3328      	adds	r3, #40	@ 0x28
 8004804:	2101      	movs	r1, #1
 8004806:	4618      	mov	r0, r3
 8004808:	f001 feea 	bl	80065e0 <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004812:	e004      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800481a:	e000      	b.n	800481e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800481c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800481e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10a      	bne.n	800483c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004826:	4b96      	ldr	r3, [pc, #600]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004828:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800482a:	f023 0107 	bic.w	r1, r3, #7
 800482e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004832:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004834:	4a92      	ldr	r2, [pc, #584]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004836:	430b      	orrs	r3, r1
 8004838:	6553      	str	r3, [r2, #84]	@ 0x54
 800483a:	e003      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800483c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004840:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484c:	f002 0304 	and.w	r3, r2, #4
 8004850:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004854:	2300      	movs	r3, #0
 8004856:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800485a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800485e:	460b      	mov	r3, r1
 8004860:	4313      	orrs	r3, r2
 8004862:	d044      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004864:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004868:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800486c:	2b05      	cmp	r3, #5
 800486e:	d825      	bhi.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004870:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	080048c5 	.word	0x080048c5
 800487c:	08004891 	.word	0x08004891
 8004880:	080048a7 	.word	0x080048a7
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048c5 	.word	0x080048c5
 800488c:	080048c5 	.word	0x080048c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004894:	3308      	adds	r3, #8
 8004896:	2101      	movs	r1, #1
 8004898:	4618      	mov	r0, r3
 800489a:	f001 fdef 	bl	800647c <RCCEx_PLL2_Config>
 800489e:	4603      	mov	r3, r0
 80048a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048a4:	e00f      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048aa:	3328      	adds	r3, #40	@ 0x28
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f001 fe96 	bl	80065e0 <RCCEx_PLL3_Config>
 80048b4:	4603      	mov	r3, r0
 80048b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80048ba:	e004      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048c2:	e000      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80048c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048ce:	4b6c      	ldr	r3, [pc, #432]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048d2:	f023 0107 	bic.w	r1, r3, #7
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80048de:	4a68      	ldr	r2, [pc, #416]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80048e4:	e003      	b.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f6:	f002 0320 	and.w	r3, r2, #32
 80048fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048fe:	2300      	movs	r3, #0
 8004900:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004904:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004908:	460b      	mov	r3, r1
 800490a:	4313      	orrs	r3, r2
 800490c:	d055      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004916:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800491a:	d033      	beq.n	8004984 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800491c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004920:	d82c      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004922:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004926:	d02f      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004928:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800492c:	d826      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800492e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004932:	d02b      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004934:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004938:	d820      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800493a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800493e:	d012      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004940:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004944:	d81a      	bhi.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004946:	2b00      	cmp	r3, #0
 8004948:	d022      	beq.n	8004990 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800494a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800494e:	d115      	bne.n	800497c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004954:	3308      	adds	r3, #8
 8004956:	2100      	movs	r1, #0
 8004958:	4618      	mov	r0, r3
 800495a:	f001 fd8f 	bl	800647c <RCCEx_PLL2_Config>
 800495e:	4603      	mov	r3, r0
 8004960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004964:	e015      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	3328      	adds	r3, #40	@ 0x28
 800496c:	2102      	movs	r1, #2
 800496e:	4618      	mov	r0, r3
 8004970:	f001 fe36 	bl	80065e0 <RCCEx_PLL3_Config>
 8004974:	4603      	mov	r3, r0
 8004976:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800497a:	e00a      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004982:	e006      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004984:	bf00      	nop
 8004986:	e004      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004988:	bf00      	nop
 800498a:	e002      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800498c:	bf00      	nop
 800498e:	e000      	b.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004990:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10b      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800499a:	4b39      	ldr	r3, [pc, #228]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	4a35      	ldr	r2, [pc, #212]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80049b0:	e003      	b.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80049ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80049c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049ca:	2300      	movs	r3, #0
 80049cc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80049d0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80049d4:	460b      	mov	r3, r1
 80049d6:	4313      	orrs	r3, r2
 80049d8:	d058      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80049da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049de:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80049e2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049e6:	d033      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80049e8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80049ec:	d82c      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f2:	d02f      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f8:	d826      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80049fa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80049fe:	d02b      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a04:	d820      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a0a:	d012      	beq.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a10:	d81a      	bhi.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d022      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a1a:	d115      	bne.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a20:	3308      	adds	r3, #8
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 fd29 	bl	800647c <RCCEx_PLL2_Config>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a30:	e015      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a36:	3328      	adds	r3, #40	@ 0x28
 8004a38:	2102      	movs	r1, #2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 fdd0 	bl	80065e0 <RCCEx_PLL3_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004a46:	e00a      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a4e:	e006      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a50:	bf00      	nop
 8004a52:	e004      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a54:	bf00      	nop
 8004a56:	e002      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a58:	bf00      	nop
 8004a5a:	e000      	b.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10e      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a66:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a76:	4a02      	ldr	r2, [pc, #8]	@ (8004a80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a78:	430b      	orrs	r3, r1
 8004a7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a7c:	e006      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004a7e:	bf00      	nop
 8004a80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004a98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004aa2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	d055      	beq.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ab0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004ab4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ab8:	d033      	beq.n	8004b22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004aba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004abe:	d82c      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ac0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ac4:	d02f      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004ac6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aca:	d826      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004acc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ad0:	d02b      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004ad2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ad6:	d820      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ad8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004adc:	d012      	beq.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004ade:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ae2:	d81a      	bhi.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d022      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004aec:	d115      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	3308      	adds	r3, #8
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fcc0 	bl	800647c <RCCEx_PLL2_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b02:	e015      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b08:	3328      	adds	r3, #40	@ 0x28
 8004b0a:	2102      	movs	r1, #2
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f001 fd67 	bl	80065e0 <RCCEx_PLL3_Config>
 8004b12:	4603      	mov	r3, r0
 8004b14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b18:	e00a      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b20:	e006      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b22:	bf00      	nop
 8004b24:	e004      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b26:	bf00      	nop
 8004b28:	e002      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2a:	bf00      	nop
 8004b2c:	e000      	b.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004b2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d10b      	bne.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004b38:	4ba1      	ldr	r3, [pc, #644]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b48:	4a9d      	ldr	r2, [pc, #628]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b4a:	430b      	orrs	r3, r1
 8004b4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b4e:	e003      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f002 0308 	and.w	r3, r2, #8
 8004b64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b68:	2300      	movs	r3, #0
 8004b6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004b6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004b72:	460b      	mov	r3, r1
 8004b74:	4313      	orrs	r3, r2
 8004b76:	d01e      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b84:	d10c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8a:	3328      	adds	r3, #40	@ 0x28
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f001 fd26 	bl	80065e0 <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004ba0:	4b87      	ldr	r3, [pc, #540]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bb0:	4a83      	ldr	r2, [pc, #524]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb2:	430b      	orrs	r3, r1
 8004bb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bbe:	f002 0310 	and.w	r3, r2, #16
 8004bc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004bcc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004bd0:	460b      	mov	r3, r1
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	d01e      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004bde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be2:	d10c      	bne.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be8:	3328      	adds	r3, #40	@ 0x28
 8004bea:	2102      	movs	r1, #2
 8004bec:	4618      	mov	r0, r3
 8004bee:	f001 fcf7 	bl	80065e0 <RCCEx_PLL3_Config>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfe:	4b70      	ldr	r3, [pc, #448]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c0e:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c10:	430b      	orrs	r3, r1
 8004c12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d03e      	beq.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c40:	d022      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004c42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c46:	d81b      	bhi.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004c4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c50:	d00b      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004c52:	e015      	b.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2100      	movs	r1, #0
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f001 fc0d 	bl	800647c <RCCEx_PLL2_Config>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c68:	e00f      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c6e:	3328      	adds	r3, #40	@ 0x28
 8004c70:	2102      	movs	r1, #2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f001 fcb4 	bl	80065e0 <RCCEx_PLL3_Config>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004c7e:	e004      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c80:	2301      	movs	r3, #1
 8004c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c86:	e000      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004c88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c92:	4b4b      	ldr	r3, [pc, #300]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004ca2:	4a47      	ldr	r2, [pc, #284]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ca8:	e003      	b.n	8004cb2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004caa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004cbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004cc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	d03b      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004cda:	d01f      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004cdc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004ce0:	d818      	bhi.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004ce2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce6:	d003      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004ce8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004cec:	d007      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004cee:	e011      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cf0:	4b33      	ldr	r3, [pc, #204]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf4:	4a32      	ldr	r2, [pc, #200]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004cfc:	e00f      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d02:	3328      	adds	r3, #40	@ 0x28
 8004d04:	2101      	movs	r1, #1
 8004d06:	4618      	mov	r0, r3
 8004d08:	f001 fc6a 	bl	80065e0 <RCCEx_PLL3_Config>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d12:	e004      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d1a:	e000      	b.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d26:	4b26      	ldr	r3, [pc, #152]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d36:	4a22      	ldr	r2, [pc, #136]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d38:	430b      	orrs	r3, r1
 8004d3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d3c:	e003      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004d52:	673b      	str	r3, [r7, #112]	@ 0x70
 8004d54:	2300      	movs	r3, #0
 8004d56:	677b      	str	r3, [r7, #116]	@ 0x74
 8004d58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	d034      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d003      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004d6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d70:	d007      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004d72:	e011      	b.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d74:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d80:	e00e      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d86:	3308      	adds	r3, #8
 8004d88:	2102      	movs	r1, #2
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f001 fb76 	bl	800647c <RCCEx_PLL2_Config>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004d96:	e003      	b.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004da0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10d      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004db6:	4a02      	ldr	r2, [pc, #8]	@ (8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004dbc:	e006      	b.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004dd8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004dda:	2300      	movs	r3, #0
 8004ddc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004dde:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004de2:	460b      	mov	r3, r1
 8004de4:	4313      	orrs	r3, r2
 8004de6:	d00c      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dec:	3328      	adds	r3, #40	@ 0x28
 8004dee:	2102      	movs	r1, #2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fbf5 	bl	80065e0 <RCCEx_PLL3_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d002      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004e0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004e10:	2300      	movs	r3, #0
 8004e12:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d038      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e2a:	d018      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004e2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e30:	d811      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e36:	d014      	beq.n	8004e62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e3c:	d80b      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d011      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004e42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e46:	d106      	bne.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e48:	4bc3      	ldr	r3, [pc, #780]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e4c:	4ac2      	ldr	r2, [pc, #776]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004e54:	e008      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e5c:	e004      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10b      	bne.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e70:	4bb9      	ldr	r3, [pc, #740]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e80:	4ab5      	ldr	r2, [pc, #724]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e82:	430b      	orrs	r3, r1
 8004e84:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e86:	e003      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004e9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004ea2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	d009      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004eac:	4baa      	ldr	r3, [pc, #680]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004eba:	4aa7      	ldr	r2, [pc, #668]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ebc:	430b      	orrs	r3, r1
 8004ebe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ecc:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ece:	2300      	movs	r3, #0
 8004ed0:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ed2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004edc:	4b9e      	ldr	r3, [pc, #632]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ee8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004eec:	4a9a      	ldr	r2, [pc, #616]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eee:	430b      	orrs	r3, r1
 8004ef0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004efe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f00:	2300      	movs	r3, #0
 8004f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f04:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	d009      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f0e:	4b92      	ldr	r3, [pc, #584]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f12:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004f16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f1c:	4a8e      	ldr	r2, [pc, #568]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f1e:	430b      	orrs	r3, r1
 8004f20:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f30:	2300      	movs	r3, #0
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f34:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004f38:	460b      	mov	r3, r1
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	d00e      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004f3e:	4b86      	ldr	r3, [pc, #536]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	4a85      	ldr	r2, [pc, #532]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f44:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004f48:	6113      	str	r3, [r2, #16]
 8004f4a:	4b83      	ldr	r3, [pc, #524]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f4c:	6919      	ldr	r1, [r3, #16]
 8004f4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f52:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f56:	4a80      	ldr	r2, [pc, #512]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f64:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f6e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004f72:	460b      	mov	r3, r1
 8004f74:	4313      	orrs	r3, r2
 8004f76:	d009      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004f78:	4b77      	ldr	r3, [pc, #476]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f7c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f86:	4a74      	ldr	r2, [pc, #464]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f88:	430b      	orrs	r3, r1
 8004f8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004f98:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f9e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	d00a      	beq.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fa8:	4b6b      	ldr	r3, [pc, #428]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004faa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fb8:	4a67      	ldr	r2, [pc, #412]	@ (8005158 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004fca:	f003 0301 	and.w	r3, r3, #1
 8004fce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fd0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	d011      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	3308      	adds	r3, #8
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f001 fa4a 	bl	800647c <RCCEx_PLL2_Config>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	2100      	movs	r1, #0
 8005008:	6239      	str	r1, [r7, #32]
 800500a:	f003 0302 	and.w	r3, r3, #2
 800500e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005010:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005014:	460b      	mov	r3, r1
 8005016:	4313      	orrs	r3, r2
 8005018:	d011      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	3308      	adds	r3, #8
 8005020:	2101      	movs	r1, #1
 8005022:	4618      	mov	r0, r3
 8005024:	f001 fa2a 	bl	800647c <RCCEx_PLL2_Config>
 8005028:	4603      	mov	r3, r0
 800502a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800502e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005032:	2b00      	cmp	r3, #0
 8005034:	d003      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005036:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800503a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	2100      	movs	r1, #0
 8005048:	61b9      	str	r1, [r7, #24]
 800504a:	f003 0304 	and.w	r3, r3, #4
 800504e:	61fb      	str	r3, [r7, #28]
 8005050:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2102      	movs	r1, #2
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fa0a 	bl	800647c <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800507a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	2100      	movs	r1, #0
 8005088:	6139      	str	r1, [r7, #16]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d011      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509e:	3328      	adds	r3, #40	@ 0x28
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fa9c 	bl	80065e0 <RCCEx_PLL3_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	2100      	movs	r1, #0
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	60fb      	str	r3, [r7, #12]
 80050d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80050d4:	460b      	mov	r3, r1
 80050d6:	4313      	orrs	r3, r2
 80050d8:	d011      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050de:	3328      	adds	r3, #40	@ 0x28
 80050e0:	2101      	movs	r1, #1
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fa7c 	bl	80065e0 <RCCEx_PLL3_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80050fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	2100      	movs	r1, #0
 8005108:	6039      	str	r1, [r7, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	607b      	str	r3, [r7, #4]
 8005110:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d011      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511e:	3328      	adds	r3, #40	@ 0x28
 8005120:	2102      	movs	r1, #2
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fa5c 	bl	80065e0 <RCCEx_PLL3_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800513a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800513e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005146:	2300      	movs	r3, #0
 8005148:	e000      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
}
 800514c:	4618      	mov	r0, r3
 800514e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8005152:	46bd      	mov	sp, r7
 8005154:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005158:	58024400 	.word	0x58024400

0800515c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b090      	sub	sp, #64	@ 0x40
 8005160:	af00      	add	r7, sp, #0
 8005162:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800516a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800516e:	430b      	orrs	r3, r1
 8005170:	f040 8094 	bne.w	800529c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005174:	4b9e      	ldr	r3, [pc, #632]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800517e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005180:	2b04      	cmp	r3, #4
 8005182:	f200 8087 	bhi.w	8005294 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005186:	a201      	add	r2, pc, #4	@ (adr r2, 800518c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800518c:	080051a1 	.word	0x080051a1
 8005190:	080051c9 	.word	0x080051c9
 8005194:	080051f1 	.word	0x080051f1
 8005198:	0800528d 	.word	0x0800528d
 800519c:	08005219 	.word	0x08005219
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80051a0:	4b93      	ldr	r3, [pc, #588]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80051ac:	d108      	bne.n	80051c0 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80051ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051b2:	4618      	mov	r0, r3
 80051b4:	f001 f810 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80051b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051bc:	f000 bd45 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051c4:	f000 bd41 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80051c8:	4b89      	ldr	r3, [pc, #548]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051d4:	d108      	bne.n	80051e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80051d6:	f107 0318 	add.w	r3, r7, #24
 80051da:	4618      	mov	r0, r3
 80051dc:	f000 fd54 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80051e4:	f000 bd31 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051e8:	2300      	movs	r3, #0
 80051ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051ec:	f000 bd2d 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80051f0:	4b7f      	ldr	r3, [pc, #508]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fc:	d108      	bne.n	8005210 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80051fe:	f107 030c 	add.w	r3, r7, #12
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fe94 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800520c:	f000 bd1d 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005214:	f000 bd19 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005218:	4b75      	ldr	r3, [pc, #468]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800521a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005220:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005222:	4b73      	ldr	r3, [pc, #460]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b04      	cmp	r3, #4
 800522c:	d10c      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800522e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005234:	4b6e      	ldr	r3, [pc, #440]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	08db      	lsrs	r3, r3, #3
 800523a:	f003 0303 	and.w	r3, r3, #3
 800523e:	4a6d      	ldr	r2, [pc, #436]	@ (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005240:	fa22 f303 	lsr.w	r3, r2, r3
 8005244:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005246:	e01f      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005248:	4b69      	ldr	r3, [pc, #420]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005254:	d106      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005256:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005258:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800525c:	d102      	bne.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800525e:	4b66      	ldr	r3, [pc, #408]	@ (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005262:	e011      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005264:	4b62      	ldr	r3, [pc, #392]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800526c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005270:	d106      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8005272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005274:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005278:	d102      	bne.n	8005280 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800527a:	4b60      	ldr	r3, [pc, #384]	@ (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800527c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800527e:	e003      	b.n	8005288 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005280:	2300      	movs	r3, #0
 8005282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005284:	f000 bce1 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005288:	f000 bcdf 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005290:	f000 bcdb 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005298:	f000 bcd7 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800529c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052a0:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80052a4:	430b      	orrs	r3, r1
 80052a6:	f040 80ad 	bne.w	8005404 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80052aa:	4b51      	ldr	r3, [pc, #324]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052ae:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80052b2:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ba:	d056      	beq.n	800536a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052c2:	f200 8090 	bhi.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	2bc0      	cmp	r3, #192	@ 0xc0
 80052ca:	f000 8088 	beq.w	80053de <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d2:	f200 8088 	bhi.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d8:	2b80      	cmp	r3, #128	@ 0x80
 80052da:	d032      	beq.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80052dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052de:	2b80      	cmp	r3, #128	@ 0x80
 80052e0:	f200 8081 	bhi.w	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80052e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80052ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ec:	2b40      	cmp	r3, #64	@ 0x40
 80052ee:	d014      	beq.n	800531a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80052f0:	e079      	b.n	80053e6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80052f2:	4b3f      	ldr	r3, [pc, #252]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80052fe:	d108      	bne.n	8005312 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005304:	4618      	mov	r0, r3
 8005306:	f000 ff67 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800530a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800530c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800530e:	f000 bc9c 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005312:	2300      	movs	r3, #0
 8005314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005316:	f000 bc98 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800531a:	4b35      	ldr	r3, [pc, #212]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005322:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005326:	d108      	bne.n	800533a <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005328:	f107 0318 	add.w	r3, r7, #24
 800532c:	4618      	mov	r0, r3
 800532e:	f000 fcab 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005336:	f000 bc88 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800533e:	f000 bc84 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005342:	4b2b      	ldr	r3, [pc, #172]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800534a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800534e:	d108      	bne.n	8005362 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005350:	f107 030c 	add.w	r3, r7, #12
 8005354:	4618      	mov	r0, r3
 8005356:	f000 fdeb 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800535e:	f000 bc74 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005362:	2300      	movs	r3, #0
 8005364:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005366:	f000 bc70 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800536a:	4b21      	ldr	r3, [pc, #132]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800536c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800536e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005374:	4b1e      	ldr	r3, [pc, #120]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0304 	and.w	r3, r3, #4
 800537c:	2b04      	cmp	r3, #4
 800537e:	d10c      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005386:	4b1a      	ldr	r3, [pc, #104]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	08db      	lsrs	r3, r3, #3
 800538c:	f003 0303 	and.w	r3, r3, #3
 8005390:	4a18      	ldr	r2, [pc, #96]	@ (80053f4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005392:	fa22 f303 	lsr.w	r3, r2, r3
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005398:	e01f      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800539a:	4b15      	ldr	r3, [pc, #84]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053a6:	d106      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80053a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053ae:	d102      	bne.n	80053b6 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80053b0:	4b11      	ldr	r3, [pc, #68]	@ (80053f8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053b4:	e011      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80053b6:	4b0e      	ldr	r3, [pc, #56]	@ (80053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80053c2:	d106      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80053c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ca:	d102      	bne.n	80053d2 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80053cc:	4b0b      	ldr	r3, [pc, #44]	@ (80053fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053d0:	e003      	b.n	80053da <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80053d6:	f000 bc38 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053da:	f000 bc36 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80053de:	4b08      	ldr	r3, [pc, #32]	@ (8005400 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80053e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053e2:	f000 bc32 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ea:	f000 bc2e 	b.w	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80053ee:	bf00      	nop
 80053f0:	58024400 	.word	0x58024400
 80053f4:	03d09000 	.word	0x03d09000
 80053f8:	003d0900 	.word	0x003d0900
 80053fc:	017d7840 	.word	0x017d7840
 8005400:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005408:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800540c:	430b      	orrs	r3, r1
 800540e:	f040 809c 	bne.w	800554a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005412:	4b9e      	ldr	r3, [pc, #632]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005416:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800541a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800541c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800541e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005422:	d054      	beq.n	80054ce <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8005424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005426:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800542a:	f200 808b 	bhi.w	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800542e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005430:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005434:	f000 8083 	beq.w	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8005438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800543e:	f200 8081 	bhi.w	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005448:	d02f      	beq.n	80054aa <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800544a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800544c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005450:	d878      	bhi.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8005452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005454:	2b00      	cmp	r3, #0
 8005456:	d004      	beq.n	8005462 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800545e:	d012      	beq.n	8005486 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8005460:	e070      	b.n	8005544 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005462:	4b8a      	ldr	r3, [pc, #552]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800546e:	d107      	bne.n	8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005470:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005474:	4618      	mov	r0, r3
 8005476:	f000 feaf 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800547a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800547e:	e3e4      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005480:	2300      	movs	r3, #0
 8005482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005484:	e3e1      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005486:	4b81      	ldr	r3, [pc, #516]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005492:	d107      	bne.n	80054a4 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005494:	f107 0318 	add.w	r3, r7, #24
 8005498:	4618      	mov	r0, r3
 800549a:	f000 fbf5 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054a2:	e3d2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054a4:	2300      	movs	r3, #0
 80054a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a8:	e3cf      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80054aa:	4b78      	ldr	r3, [pc, #480]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054b6:	d107      	bne.n	80054c8 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054b8:	f107 030c 	add.w	r3, r7, #12
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fd37 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054c6:	e3c0      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80054c8:	2300      	movs	r3, #0
 80054ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054cc:	e3bd      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80054ce:	4b6f      	ldr	r3, [pc, #444]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054d2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80054d6:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80054d8:	4b6c      	ldr	r3, [pc, #432]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b04      	cmp	r3, #4
 80054e2:	d10c      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80054e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d109      	bne.n	80054fe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80054ea:	4b68      	ldr	r3, [pc, #416]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	08db      	lsrs	r3, r3, #3
 80054f0:	f003 0303 	and.w	r3, r3, #3
 80054f4:	4a66      	ldr	r2, [pc, #408]	@ (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80054f6:	fa22 f303 	lsr.w	r3, r2, r3
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054fc:	e01e      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80054fe:	4b63      	ldr	r3, [pc, #396]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005506:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800550a:	d106      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800550c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800550e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005512:	d102      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005514:	4b5f      	ldr	r3, [pc, #380]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005518:	e010      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800551a:	4b5c      	ldr	r3, [pc, #368]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005526:	d106      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8005528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800552a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800552e:	d102      	bne.n	8005536 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005530:	4b59      	ldr	r3, [pc, #356]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005534:	e002      	b.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005536:	2300      	movs	r3, #0
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800553a:	e386      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800553c:	e385      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800553e:	4b57      	ldr	r3, [pc, #348]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005542:	e382      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005548:	e37f      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800554a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800554e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8005552:	430b      	orrs	r3, r1
 8005554:	f040 80a7 	bne.w	80056a6 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005558:	4b4c      	ldr	r3, [pc, #304]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800555a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800555c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8005560:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005564:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005568:	d055      	beq.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800556a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800556c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005570:	f200 8096 	bhi.w	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005576:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800557a:	f000 8084 	beq.w	8005686 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800557e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005580:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005584:	f200 808c 	bhi.w	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800558e:	d030      	beq.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005592:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005596:	f200 8083 	bhi.w	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800559a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800559c:	2b00      	cmp	r3, #0
 800559e:	d004      	beq.n	80055aa <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 80055a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80055a6:	d012      	beq.n	80055ce <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80055a8:	e07a      	b.n	80056a0 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80055aa:	4b38      	ldr	r3, [pc, #224]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80055b6:	d107      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80055b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055bc:	4618      	mov	r0, r3
 80055be:	f000 fe0b 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80055c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055c6:	e340      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055cc:	e33d      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80055ce:	4b2f      	ldr	r3, [pc, #188]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80055d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80055da:	d107      	bne.n	80055ec <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055dc:	f107 0318 	add.w	r3, r7, #24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f000 fb51 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80055ea:	e32e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055f0:	e32b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80055f2:	4b26      	ldr	r3, [pc, #152]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055fe:	d107      	bne.n	8005610 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005600:	f107 030c 	add.w	r3, r7, #12
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fc93 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800560e:	e31c      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005610:	2300      	movs	r3, #0
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	e319      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005616:	4b1d      	ldr	r3, [pc, #116]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800561a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800561e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005620:	4b1a      	ldr	r3, [pc, #104]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f003 0304 	and.w	r3, r3, #4
 8005628:	2b04      	cmp	r3, #4
 800562a:	d10c      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800562c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005632:	4b16      	ldr	r3, [pc, #88]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800563e:	fa22 f303 	lsr.w	r3, r2, r3
 8005642:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005644:	e01e      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005646:	4b11      	ldr	r3, [pc, #68]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005652:	d106      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005654:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005656:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800565a:	d102      	bne.n	8005662 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800565c:	4b0d      	ldr	r3, [pc, #52]	@ (8005694 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800565e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005660:	e010      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005662:	4b0a      	ldr	r3, [pc, #40]	@ (800568c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800566a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800566e:	d106      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005672:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005676:	d102      	bne.n	800567e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005678:	4b07      	ldr	r3, [pc, #28]	@ (8005698 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800567a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800567c:	e002      	b.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800567e:	2300      	movs	r3, #0
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005682:	e2e2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005684:	e2e1      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005686:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800568a:	e2de      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800568c:	58024400 	.word	0x58024400
 8005690:	03d09000 	.word	0x03d09000
 8005694:	003d0900 	.word	0x003d0900
 8005698:	017d7840 	.word	0x017d7840
 800569c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056a4:	e2d1      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 80056a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056aa:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 80056ae:	430b      	orrs	r3, r1
 80056b0:	f040 809c 	bne.w	80057ec <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 80056b4:	4b93      	ldr	r3, [pc, #588]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80056b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056b8:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80056bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056c4:	d054      	beq.n	8005770 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80056c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056cc:	f200 808b 	bhi.w	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80056da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056e0:	f200 8081 	bhi.w	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ea:	d02f      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056f2:	d878      	bhi.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80056f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80056fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005700:	d012      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005702:	e070      	b.n	80057e6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005704:	4b7f      	ldr	r3, [pc, #508]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005710:	d107      	bne.n	8005722 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005712:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005716:	4618      	mov	r0, r3
 8005718:	f000 fd5e 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800571c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005720:	e293      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005726:	e290      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005728:	4b76      	ldr	r3, [pc, #472]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005730:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005734:	d107      	bne.n	8005746 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005736:	f107 0318 	add.w	r3, r7, #24
 800573a:	4618      	mov	r0, r3
 800573c:	f000 faa4 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005744:	e281      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005746:	2300      	movs	r3, #0
 8005748:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800574a:	e27e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800574c:	4b6d      	ldr	r3, [pc, #436]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005754:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005758:	d107      	bne.n	800576a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800575a:	f107 030c 	add.w	r3, r7, #12
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fbe6 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005768:	e26f      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800576a:	2300      	movs	r3, #0
 800576c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576e:	e26c      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005770:	4b64      	ldr	r3, [pc, #400]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005772:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005774:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005778:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800577a:	4b62      	ldr	r3, [pc, #392]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0304 	and.w	r3, r3, #4
 8005782:	2b04      	cmp	r3, #4
 8005784:	d10c      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005788:	2b00      	cmp	r3, #0
 800578a:	d109      	bne.n	80057a0 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800578c:	4b5d      	ldr	r3, [pc, #372]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	08db      	lsrs	r3, r3, #3
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	4a5c      	ldr	r2, [pc, #368]	@ (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005798:	fa22 f303 	lsr.w	r3, r2, r3
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800579e:	e01e      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80057a0:	4b58      	ldr	r3, [pc, #352]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ac:	d106      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 80057ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80057b4:	d102      	bne.n	80057bc <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80057b6:	4b55      	ldr	r3, [pc, #340]	@ (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ba:	e010      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80057bc:	4b51      	ldr	r3, [pc, #324]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80057c8:	d106      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80057ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057d0:	d102      	bne.n	80057d8 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80057d2:	4b4f      	ldr	r3, [pc, #316]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80057d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d6:	e002      	b.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80057d8:	2300      	movs	r3, #0
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80057dc:	e235      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80057de:	e234      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80057e0:	4b4c      	ldr	r3, [pc, #304]	@ (8005914 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80057e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e4:	e231      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ea:	e22e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80057ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057f0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80057f4:	430b      	orrs	r3, r1
 80057f6:	f040 808f 	bne.w	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80057fa:	4b42      	ldr	r3, [pc, #264]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057fe:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800580a:	d06b      	beq.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800580c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005812:	d874      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005816:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800581a:	d056      	beq.n	80058ca <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800581c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005822:	d86c      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005826:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800582a:	d03b      	beq.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800582c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005832:	d864      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800583a:	d021      	beq.n	8005880 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005842:	d85c      	bhi.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005844:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005846:	2b00      	cmp	r3, #0
 8005848:	d004      	beq.n	8005854 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005850:	d004      	beq.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005852:	e054      	b.n	80058fe <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005854:	f7fe fa62 	bl	8003d1c <HAL_RCC_GetPCLK1Freq>
 8005858:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800585a:	e1f6      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800585c:	4b29      	ldr	r3, [pc, #164]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005864:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005868:	d107      	bne.n	800587a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800586a:	f107 0318 	add.w	r3, r7, #24
 800586e:	4618      	mov	r0, r3
 8005870:	f000 fa0a 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005878:	e1e7      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800587e:	e1e4      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005880:	4b20      	ldr	r3, [pc, #128]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588c:	d107      	bne.n	800589e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800588e:	f107 030c 	add.w	r3, r7, #12
 8005892:	4618      	mov	r0, r3
 8005894:	f000 fb4c 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800589c:	e1d5      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800589e:	2300      	movs	r3, #0
 80058a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a2:	e1d2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80058a4:	4b17      	ldr	r3, [pc, #92]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0304 	and.w	r3, r3, #4
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d109      	bne.n	80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80058b0:	4b14      	ldr	r3, [pc, #80]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	08db      	lsrs	r3, r3, #3
 80058b6:	f003 0303 	and.w	r3, r3, #3
 80058ba:	4a13      	ldr	r2, [pc, #76]	@ (8005908 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80058bc:	fa22 f303 	lsr.w	r3, r2, r3
 80058c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058c2:	e1c2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c8:	e1bf      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80058ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058d6:	d102      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80058d8:	4b0c      	ldr	r3, [pc, #48]	@ (800590c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80058da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058dc:	e1b5      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058de:	2300      	movs	r3, #0
 80058e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058e2:	e1b2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80058e4:	4b07      	ldr	r3, [pc, #28]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f0:	d102      	bne.n	80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80058f2:	4b07      	ldr	r3, [pc, #28]	@ (8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f6:	e1a8      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058f8:	2300      	movs	r3, #0
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058fc:	e1a5      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058fe:	2300      	movs	r3, #0
 8005900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005902:	e1a2      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005904:	58024400 	.word	0x58024400
 8005908:	03d09000 	.word	0x03d09000
 800590c:	003d0900 	.word	0x003d0900
 8005910:	017d7840 	.word	0x017d7840
 8005914:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005918:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591c:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 8005920:	430b      	orrs	r3, r1
 8005922:	d173      	bne.n	8005a0c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005924:	4b9c      	ldr	r3, [pc, #624]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005928:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800592c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800592e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005930:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005934:	d02f      	beq.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005938:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800593c:	d863      	bhi.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594a:	d012      	beq.n	8005972 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800594c:	e05b      	b.n	8005a06 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800594e:	4b92      	ldr	r3, [pc, #584]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005956:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800595a:	d107      	bne.n	800596c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800595c:	f107 0318 	add.w	r3, r7, #24
 8005960:	4618      	mov	r0, r3
 8005962:	f000 f991 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800596a:	e16e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005970:	e16b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005972:	4b89      	ldr	r3, [pc, #548]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800597a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800597e:	d107      	bne.n	8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005980:	f107 030c 	add.w	r3, r7, #12
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fad3 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800598e:	e15c      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005990:	2300      	movs	r3, #0
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005994:	e159      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005996:	4b80      	ldr	r3, [pc, #512]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005998:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800599a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800599e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80059a0:	4b7d      	ldr	r3, [pc, #500]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0304 	and.w	r3, r3, #4
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d10c      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80059ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d109      	bne.n	80059c6 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80059b2:	4b79      	ldr	r3, [pc, #484]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	08db      	lsrs	r3, r3, #3
 80059b8:	f003 0303 	and.w	r3, r3, #3
 80059bc:	4a77      	ldr	r2, [pc, #476]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80059be:	fa22 f303 	lsr.w	r3, r2, r3
 80059c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059c4:	e01e      	b.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80059c6:	4b74      	ldr	r3, [pc, #464]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059d2:	d106      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80059d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80059da:	d102      	bne.n	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059dc:	4b70      	ldr	r3, [pc, #448]	@ (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80059de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059e0:	e010      	b.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ee:	d106      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80059f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80059f6:	d102      	bne.n	80059fe <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059f8:	4b6a      	ldr	r3, [pc, #424]	@ (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80059fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059fc:	e002      	b.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059fe:	2300      	movs	r3, #0
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005a02:	e122      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a04:	e121      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a0a:	e11e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a10:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005a14:	430b      	orrs	r3, r1
 8005a16:	d133      	bne.n	8005a80 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a18:	4b5f      	ldr	r3, [pc, #380]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a20:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d004      	beq.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a2e:	d012      	beq.n	8005a56 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005a30:	e023      	b.n	8005a7a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a32:	4b59      	ldr	r3, [pc, #356]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a3a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005a3e:	d107      	bne.n	8005a50 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a44:	4618      	mov	r0, r3
 8005a46:	f000 fbc7 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4e:	e0fc      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a54:	e0f9      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a56:	4b50      	ldr	r3, [pc, #320]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a5e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a62:	d107      	bne.n	8005a74 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a64:	f107 0318 	add.w	r3, r7, #24
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f90d 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a72:	e0ea      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a74:	2300      	movs	r3, #0
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a78:	e0e7      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a7e:	e0e4      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005a80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a84:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005a88:	430b      	orrs	r3, r1
 8005a8a:	f040 808d 	bne.w	8005ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005a8e:	4b42      	ldr	r3, [pc, #264]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005a96:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a9e:	d06b      	beq.n	8005b78 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005aa6:	d874      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005aae:	d056      	beq.n	8005b5e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ab6:	d86c      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005abe:	d03b      	beq.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005ac6:	d864      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ace:	d021      	beq.n	8005b14 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d85c      	bhi.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ae4:	d004      	beq.n	8005af0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005ae6:	e054      	b.n	8005b92 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ae8:	f000 f8b8 	bl	8005c5c <HAL_RCCEx_GetD3PCLK1Freq>
 8005aec:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005aee:	e0ac      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005af0:	4b29      	ldr	r3, [pc, #164]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005af8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005afc:	d107      	bne.n	8005b0e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005afe:	f107 0318 	add.w	r3, r7, #24
 8005b02:	4618      	mov	r0, r3
 8005b04:	f000 f8c0 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0c:	e09d      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b12:	e09a      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b14:	4b20      	ldr	r3, [pc, #128]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b1c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b20:	d107      	bne.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005b22:	f107 030c 	add.w	r3, r7, #12
 8005b26:	4618      	mov	r0, r3
 8005b28:	f000 fa02 	bl	8005f30 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b30:	e08b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b32:	2300      	movs	r3, #0
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b36:	e088      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b38:	4b17      	ldr	r3, [pc, #92]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 0304 	and.w	r3, r3, #4
 8005b40:	2b04      	cmp	r3, #4
 8005b42:	d109      	bne.n	8005b58 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005b44:	4b14      	ldr	r3, [pc, #80]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	08db      	lsrs	r3, r3, #3
 8005b4a:	f003 0303 	and.w	r3, r3, #3
 8005b4e:	4a13      	ldr	r2, [pc, #76]	@ (8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005b50:	fa22 f303 	lsr.w	r3, r2, r3
 8005b54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b56:	e078      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b5c:	e075      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b6a:	d102      	bne.n	8005b72 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ba0 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005b6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b70:	e06b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b72:	2300      	movs	r3, #0
 8005b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b76:	e068      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005b78:	4b07      	ldr	r3, [pc, #28]	@ (8005b98 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b84:	d102      	bne.n	8005b8c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005b86:	4b07      	ldr	r3, [pc, #28]	@ (8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b8a:	e05e      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b90:	e05b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b96:	e058      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b98:	58024400 	.word	0x58024400
 8005b9c:	03d09000 	.word	0x03d09000
 8005ba0:	003d0900 	.word	0x003d0900
 8005ba4:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005ba8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bac:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	d148      	bne.n	8005c46 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005bb4:	4b27      	ldr	r3, [pc, #156]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bb8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005bbc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bc4:	d02a      	beq.n	8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bcc:	d838      	bhi.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005bce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d004      	beq.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005bd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bda:	d00d      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005bdc:	e030      	b.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bde:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005be6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bea:	d102      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005bec:	4b1a      	ldr	r3, [pc, #104]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf0:	e02b      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf6:	e028      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005bf8:	4b16      	ldr	r3, [pc, #88]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005c04:	d107      	bne.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f000 fae4 	bl	80061d8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c14:	e019      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c16:	2300      	movs	r3, #0
 8005c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c1a:	e016      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c24:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005c28:	d107      	bne.n	8005c3a <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005c2a:	f107 0318 	add.w	r3, r7, #24
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 f82a 	bl	8005c88 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c38:	e007      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3e:	e004      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c44:	e001      	b.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005c46:	2300      	movs	r3, #0
 8005c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005c4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3740      	adds	r7, #64	@ 0x40
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	58024400 	.word	0x58024400
 8005c58:	017d7840 	.word	0x017d7840

08005c5c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005c60:	f7fe f82c 	bl	8003cbc <HAL_RCC_GetHCLKFreq>
 8005c64:	4602      	mov	r2, r0
 8005c66:	4b06      	ldr	r3, [pc, #24]	@ (8005c80 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	091b      	lsrs	r3, r3, #4
 8005c6c:	f003 0307 	and.w	r3, r3, #7
 8005c70:	4904      	ldr	r1, [pc, #16]	@ (8005c84 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005c72:	5ccb      	ldrb	r3, [r1, r3]
 8005c74:	f003 031f 	and.w	r3, r3, #31
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	58024400 	.word	0x58024400
 8005c84:	08007b1c 	.word	0x08007b1c

08005c88 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b089      	sub	sp, #36	@ 0x24
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c90:	4ba1      	ldr	r3, [pc, #644]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0303 	and.w	r3, r3, #3
 8005c98:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005c9a:	4b9f      	ldr	r3, [pc, #636]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9e:	0b1b      	lsrs	r3, r3, #12
 8005ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ca4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005ca6:	4b9c      	ldr	r3, [pc, #624]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005caa:	091b      	lsrs	r3, r3, #4
 8005cac:	f003 0301 	and.w	r3, r3, #1
 8005cb0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005cb2:	4b99      	ldr	r3, [pc, #612]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb6:	08db      	lsrs	r3, r3, #3
 8005cb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cbc:	693a      	ldr	r2, [r7, #16]
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	ee07 3a90 	vmov	s15, r3
 8005cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8111 	beq.w	8005ef8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	f000 8083 	beq.w	8005de4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	f200 80a1 	bhi.w	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d056      	beq.n	8005da0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005cf2:	e099      	b.n	8005e28 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cf4:	4b88      	ldr	r3, [pc, #544]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d02d      	beq.n	8005d5c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d00:	4b85      	ldr	r3, [pc, #532]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	08db      	lsrs	r3, r3, #3
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	4a84      	ldr	r2, [pc, #528]	@ (8005f1c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d10:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	ee07 3a90 	vmov	s15, r3
 8005d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d2a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d32:	ee07 3a90 	vmov	s15, r3
 8005d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005d5a:	e087      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	ee07 3a90 	vmov	s15, r3
 8005d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005f24 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d6e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d76:	ee07 3a90 	vmov	s15, r3
 8005d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005d9e:	e065      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	ee07 3a90 	vmov	s15, r3
 8005da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005daa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005db2:	4b59      	ldr	r3, [pc, #356]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dba:	ee07 3a90 	vmov	s15, r3
 8005dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005de2:	e043      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	ee07 3a90 	vmov	s15, r3
 8005dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005dee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005f2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005df6:	4b48      	ldr	r3, [pc, #288]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	ee07 3a90 	vmov	s15, r3
 8005e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e26:	e021      	b.n	8005e6c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	ee07 3a90 	vmov	s15, r3
 8005e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e3a:	4b37      	ldr	r3, [pc, #220]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e42:	ee07 3a90 	vmov	s15, r3
 8005e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005f20 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e6a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005e6c:	4b2a      	ldr	r3, [pc, #168]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e70:	0a5b      	lsrs	r3, r3, #9
 8005e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005e82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e86:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e92:	ee17 2a90 	vmov	r2, s15
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9e:	0c1b      	lsrs	r3, r3, #16
 8005ea0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ea4:	ee07 3a90 	vmov	s15, r3
 8005ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005eb0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eb4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ebc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ec0:	ee17 2a90 	vmov	r2, s15
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005ec8:	4b13      	ldr	r3, [pc, #76]	@ (8005f18 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ecc:	0e1b      	lsrs	r3, r3, #24
 8005ece:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ed2:	ee07 3a90 	vmov	s15, r3
 8005ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005ede:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ee2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ee6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eee:	ee17 2a90 	vmov	r2, s15
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005ef6:	e008      	b.n	8005f0a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	609a      	str	r2, [r3, #8]
}
 8005f0a:	bf00      	nop
 8005f0c:	3724      	adds	r7, #36	@ 0x24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	58024400 	.word	0x58024400
 8005f1c:	03d09000 	.word	0x03d09000
 8005f20:	46000000 	.word	0x46000000
 8005f24:	4c742400 	.word	0x4c742400
 8005f28:	4a742400 	.word	0x4a742400
 8005f2c:	4bbebc20 	.word	0x4bbebc20

08005f30 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b089      	sub	sp, #36	@ 0x24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005f38:	4ba1      	ldr	r3, [pc, #644]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f3c:	f003 0303 	and.w	r3, r3, #3
 8005f40:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005f42:	4b9f      	ldr	r3, [pc, #636]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	0d1b      	lsrs	r3, r3, #20
 8005f48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005f4c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005f4e:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	0a1b      	lsrs	r3, r3, #8
 8005f54:	f003 0301 	and.w	r3, r3, #1
 8005f58:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005f5a:	4b99      	ldr	r3, [pc, #612]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f5e:	08db      	lsrs	r3, r3, #3
 8005f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	fb02 f303 	mul.w	r3, r2, r3
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	f000 8111 	beq.w	80061a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	f000 8083 	beq.w	800608c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	2b02      	cmp	r3, #2
 8005f8a:	f200 80a1 	bhi.w	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d003      	beq.n	8005f9c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005f94:	69bb      	ldr	r3, [r7, #24]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d056      	beq.n	8006048 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005f9a:	e099      	b.n	80060d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9c:	4b88      	ldr	r3, [pc, #544]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d02d      	beq.n	8006004 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fa8:	4b85      	ldr	r3, [pc, #532]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	08db      	lsrs	r3, r3, #3
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	4a84      	ldr	r2, [pc, #528]	@ (80061c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	ee07 3a90 	vmov	s15, r3
 8005fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	ee07 3a90 	vmov	s15, r3
 8005fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fd2:	4b7b      	ldr	r3, [pc, #492]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005fe2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005fe6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ffe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006002:	e087      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	ee07 3a90 	vmov	s15, r3
 800600a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800600e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80061cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006016:	4b6a      	ldr	r3, [pc, #424]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800601a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601e:	ee07 3a90 	vmov	s15, r3
 8006022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006026:	ed97 6a03 	vldr	s12, [r7, #12]
 800602a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800602e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800603a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800603e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006042:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006046:	e065      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	ee07 3a90 	vmov	s15, r3
 800604e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006052:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006056:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800605a:	4b59      	ldr	r3, [pc, #356]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800605e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006062:	ee07 3a90 	vmov	s15, r3
 8006066:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800606a:	ed97 6a03 	vldr	s12, [r7, #12]
 800606e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006072:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006076:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800607a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800607e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800608a:	e043      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	ee07 3a90 	vmov	s15, r3
 8006092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006096:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80061d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800609a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800609e:	4b48      	ldr	r3, [pc, #288]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060a6:	ee07 3a90 	vmov	s15, r3
 80060aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80060b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060ce:	e021      	b.n	8006114 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060e2:	4b37      	ldr	r3, [pc, #220]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060ea:	ee07 3a90 	vmov	s15, r3
 80060ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80061c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006102:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800610a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800610e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006112:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006114:	4b2a      	ldr	r3, [pc, #168]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	0a5b      	lsrs	r3, r3, #9
 800611a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006126:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800612a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800612e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800613a:	ee17 2a90 	vmov	r2, s15
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006142:	4b1f      	ldr	r3, [pc, #124]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006146:	0c1b      	lsrs	r3, r3, #16
 8006148:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006154:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006158:	ee37 7a87 	vadd.f32	s14, s15, s14
 800615c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006164:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006168:	ee17 2a90 	vmov	r2, s15
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006170:	4b13      	ldr	r3, [pc, #76]	@ (80061c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006174:	0e1b      	lsrs	r3, r3, #24
 8006176:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006182:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006186:	ee37 7a87 	vadd.f32	s14, s15, s14
 800618a:	edd7 6a07 	vldr	s13, [r7, #28]
 800618e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006196:	ee17 2a90 	vmov	r2, s15
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800619e:	e008      	b.n	80061b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	609a      	str	r2, [r3, #8]
}
 80061b2:	bf00      	nop
 80061b4:	3724      	adds	r7, #36	@ 0x24
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	58024400 	.word	0x58024400
 80061c4:	03d09000 	.word	0x03d09000
 80061c8:	46000000 	.word	0x46000000
 80061cc:	4c742400 	.word	0x4c742400
 80061d0:	4a742400 	.word	0x4a742400
 80061d4:	4bbebc20 	.word	0x4bbebc20

080061d8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061d8:	b480      	push	{r7}
 80061da:	b089      	sub	sp, #36	@ 0x24
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80061e0:	4ba0      	ldr	r3, [pc, #640]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80061ea:	4b9e      	ldr	r3, [pc, #632]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ee:	091b      	lsrs	r3, r3, #4
 80061f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80061f4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80061f6:	4b9b      	ldr	r3, [pc, #620]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80061f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006200:	4b98      	ldr	r3, [pc, #608]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006202:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006204:	08db      	lsrs	r3, r3, #3
 8006206:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	fb02 f303 	mul.w	r3, r2, r3
 8006210:	ee07 3a90 	vmov	s15, r3
 8006214:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006218:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2b00      	cmp	r3, #0
 8006220:	f000 8111 	beq.w	8006446 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b02      	cmp	r3, #2
 8006228:	f000 8083 	beq.w	8006332 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	2b02      	cmp	r3, #2
 8006230:	f200 80a1 	bhi.w	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d003      	beq.n	8006242 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b01      	cmp	r3, #1
 800623e:	d056      	beq.n	80062ee <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8006240:	e099      	b.n	8006376 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006242:	4b88      	ldr	r3, [pc, #544]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0320 	and.w	r3, r3, #32
 800624a:	2b00      	cmp	r3, #0
 800624c:	d02d      	beq.n	80062aa <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800624e:	4b85      	ldr	r3, [pc, #532]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	08db      	lsrs	r3, r3, #3
 8006254:	f003 0303 	and.w	r3, r3, #3
 8006258:	4a83      	ldr	r2, [pc, #524]	@ (8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800625a:	fa22 f303 	lsr.w	r3, r2, r3
 800625e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	ee07 3a90 	vmov	s15, r3
 8006270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006274:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006278:	4b7a      	ldr	r3, [pc, #488]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800627a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800627c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006280:	ee07 3a90 	vmov	s15, r3
 8006284:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006288:	ed97 6a03 	vldr	s12, [r7, #12]
 800628c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006290:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006294:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006298:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800629c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062a4:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80062a8:	e087      	b.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	ee07 3a90 	vmov	s15, r3
 80062b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062b4:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80062b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062bc:	4b69      	ldr	r3, [pc, #420]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062c4:	ee07 3a90 	vmov	s15, r3
 80062c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80062d0:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80062d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80062e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062ec:	e065      	b.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	ee07 3a90 	vmov	s15, r3
 80062f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80062fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006300:	4b58      	ldr	r3, [pc, #352]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006308:	ee07 3a90 	vmov	s15, r3
 800630c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006310:	ed97 6a03 	vldr	s12, [r7, #12]
 8006314:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006318:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800631c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006320:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006324:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800632c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006330:	e043      	b.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	ee07 3a90 	vmov	s15, r3
 8006338:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800633c:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006478 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8006340:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006344:	4b47      	ldr	r3, [pc, #284]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	ed97 6a03 	vldr	s12, [r7, #12]
 8006358:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800635c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006360:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006364:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006368:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800636c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006370:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006374:	e021      	b.n	80063ba <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006376:	697b      	ldr	r3, [r7, #20]
 8006378:	ee07 3a90 	vmov	s15, r3
 800637c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006380:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006470 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006384:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006388:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800638a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800638c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006390:	ee07 3a90 	vmov	s15, r3
 8006394:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006398:	ed97 6a03 	vldr	s12, [r7, #12]
 800639c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800646c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063a0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063a4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063ac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063b4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b8:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80063ba:	4b2a      	ldr	r3, [pc, #168]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063be:	0a5b      	lsrs	r3, r3, #9
 80063c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80063d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063e0:	ee17 2a90 	vmov	r2, s15
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80063e8:	4b1e      	ldr	r3, [pc, #120]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006402:	edd7 6a07 	vldr	s13, [r7, #28]
 8006406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800640a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800640e:	ee17 2a90 	vmov	r2, s15
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006416:	4b13      	ldr	r3, [pc, #76]	@ (8006464 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800641a:	0e1b      	lsrs	r3, r3, #24
 800641c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006420:	ee07 3a90 	vmov	s15, r3
 8006424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006428:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800642c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006430:	edd7 6a07 	vldr	s13, [r7, #28]
 8006434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006438:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800643c:	ee17 2a90 	vmov	r2, s15
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006444:	e008      	b.n	8006458 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	609a      	str	r2, [r3, #8]
}
 8006458:	bf00      	nop
 800645a:	3724      	adds	r7, #36	@ 0x24
 800645c:	46bd      	mov	sp, r7
 800645e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006462:	4770      	bx	lr
 8006464:	58024400 	.word	0x58024400
 8006468:	03d09000 	.word	0x03d09000
 800646c:	46000000 	.word	0x46000000
 8006470:	4c742400 	.word	0x4c742400
 8006474:	4a742400 	.word	0x4a742400
 8006478:	4bbebc20 	.word	0x4bbebc20

0800647c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800648a:	4b53      	ldr	r3, [pc, #332]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800648c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648e:	f003 0303 	and.w	r3, r3, #3
 8006492:	2b03      	cmp	r3, #3
 8006494:	d101      	bne.n	800649a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006496:	2301      	movs	r3, #1
 8006498:	e099      	b.n	80065ce <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800649a:	4b4f      	ldr	r3, [pc, #316]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a4e      	ldr	r2, [pc, #312]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80064a0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064a6:	f7fa fc57 	bl	8000d58 <HAL_GetTick>
 80064aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064ac:	e008      	b.n	80064c0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80064ae:	f7fa fc53 	bl	8000d58 <HAL_GetTick>
 80064b2:	4602      	mov	r2, r0
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	1ad3      	subs	r3, r2, r3
 80064b8:	2b02      	cmp	r3, #2
 80064ba:	d901      	bls.n	80064c0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80064bc:	2303      	movs	r3, #3
 80064be:	e086      	b.n	80065ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064c0:	4b45      	ldr	r3, [pc, #276]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1f0      	bne.n	80064ae <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80064cc:	4b42      	ldr	r3, [pc, #264]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80064ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064d0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	031b      	lsls	r3, r3, #12
 80064da:	493f      	ldr	r1, [pc, #252]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80064dc:	4313      	orrs	r3, r2
 80064de:	628b      	str	r3, [r1, #40]	@ 0x28
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	3b01      	subs	r3, #1
 80064e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	3b01      	subs	r3, #1
 80064f0:	025b      	lsls	r3, r3, #9
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	68db      	ldr	r3, [r3, #12]
 80064fa:	3b01      	subs	r3, #1
 80064fc:	041b      	lsls	r3, r3, #16
 80064fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006502:	431a      	orrs	r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	3b01      	subs	r3, #1
 800650a:	061b      	lsls	r3, r3, #24
 800650c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006510:	4931      	ldr	r1, [pc, #196]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006512:	4313      	orrs	r3, r2
 8006514:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006516:	4b30      	ldr	r3, [pc, #192]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	492d      	ldr	r1, [pc, #180]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006524:	4313      	orrs	r3, r2
 8006526:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006528:	4b2b      	ldr	r3, [pc, #172]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800652a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800652c:	f023 0220 	bic.w	r2, r3, #32
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4928      	ldr	r1, [pc, #160]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006536:	4313      	orrs	r3, r2
 8006538:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800653a:	4b27      	ldr	r3, [pc, #156]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800653c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653e:	4a26      	ldr	r2, [pc, #152]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006540:	f023 0310 	bic.w	r3, r3, #16
 8006544:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006546:	4b24      	ldr	r3, [pc, #144]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006548:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800654a:	4b24      	ldr	r3, [pc, #144]	@ (80065dc <RCCEx_PLL2_Config+0x160>)
 800654c:	4013      	ands	r3, r2
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	69d2      	ldr	r2, [r2, #28]
 8006552:	00d2      	lsls	r2, r2, #3
 8006554:	4920      	ldr	r1, [pc, #128]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006556:	4313      	orrs	r3, r2
 8006558:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800655a:	4b1f      	ldr	r3, [pc, #124]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	4a1e      	ldr	r2, [pc, #120]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006560:	f043 0310 	orr.w	r3, r3, #16
 8006564:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800656c:	4b1a      	ldr	r3, [pc, #104]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800656e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006570:	4a19      	ldr	r2, [pc, #100]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006572:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006576:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006578:	e00f      	b.n	800659a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d106      	bne.n	800658e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006580:	4b15      	ldr	r3, [pc, #84]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006584:	4a14      	ldr	r2, [pc, #80]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006586:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800658a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800658c:	e005      	b.n	800659a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800658e:	4b12      	ldr	r3, [pc, #72]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4a11      	ldr	r2, [pc, #68]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 8006594:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006598:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800659a:	4b0f      	ldr	r3, [pc, #60]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a0e      	ldr	r2, [pc, #56]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80065a0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065a6:	f7fa fbd7 	bl	8000d58 <HAL_GetTick>
 80065aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065ac:	e008      	b.n	80065c0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065ae:	f7fa fbd3 	bl	8000d58 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b02      	cmp	r3, #2
 80065ba:	d901      	bls.n	80065c0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80065bc:	2303      	movs	r3, #3
 80065be:	e006      	b.n	80065ce <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065c0:	4b05      	ldr	r3, [pc, #20]	@ (80065d8 <RCCEx_PLL2_Config+0x15c>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d0f0      	beq.n	80065ae <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80065cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
 80065d6:	bf00      	nop
 80065d8:	58024400 	.word	0x58024400
 80065dc:	ffff0007 	.word	0xffff0007

080065e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b084      	sub	sp, #16
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80065ea:	2300      	movs	r3, #0
 80065ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80065ee:	4b53      	ldr	r3, [pc, #332]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80065f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f2:	f003 0303 	and.w	r3, r3, #3
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d101      	bne.n	80065fe <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e099      	b.n	8006732 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80065fe:	4b4f      	ldr	r3, [pc, #316]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a4e      	ldr	r2, [pc, #312]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006608:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660a:	f7fa fba5 	bl	8000d58 <HAL_GetTick>
 800660e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006610:	e008      	b.n	8006624 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006612:	f7fa fba1 	bl	8000d58 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	2b02      	cmp	r3, #2
 800661e:	d901      	bls.n	8006624 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e086      	b.n	8006732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006624:	4b45      	ldr	r3, [pc, #276]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1f0      	bne.n	8006612 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006630:	4b42      	ldr	r3, [pc, #264]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006634:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	051b      	lsls	r3, r3, #20
 800663e:	493f      	ldr	r1, [pc, #252]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006640:	4313      	orrs	r3, r2
 8006642:	628b      	str	r3, [r1, #40]	@ 0x28
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	3b01      	subs	r3, #1
 800664a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	3b01      	subs	r3, #1
 8006654:	025b      	lsls	r3, r3, #9
 8006656:	b29b      	uxth	r3, r3
 8006658:	431a      	orrs	r2, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	68db      	ldr	r3, [r3, #12]
 800665e:	3b01      	subs	r3, #1
 8006660:	041b      	lsls	r3, r3, #16
 8006662:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006666:	431a      	orrs	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	3b01      	subs	r3, #1
 800666e:	061b      	lsls	r3, r3, #24
 8006670:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006674:	4931      	ldr	r1, [pc, #196]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006676:	4313      	orrs	r3, r2
 8006678:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800667a:	4b30      	ldr	r3, [pc, #192]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 800667c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800667e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	492d      	ldr	r1, [pc, #180]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006688:	4313      	orrs	r3, r2
 800668a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800668c:	4b2b      	ldr	r3, [pc, #172]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 800668e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006690:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	4928      	ldr	r1, [pc, #160]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 800669a:	4313      	orrs	r3, r2
 800669c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800669e:	4b27      	ldr	r3, [pc, #156]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	4a26      	ldr	r2, [pc, #152]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066aa:	4b24      	ldr	r3, [pc, #144]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066ae:	4b24      	ldr	r3, [pc, #144]	@ (8006740 <RCCEx_PLL3_Config+0x160>)
 80066b0:	4013      	ands	r3, r2
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	69d2      	ldr	r2, [r2, #28]
 80066b6:	00d2      	lsls	r2, r2, #3
 80066b8:	4920      	ldr	r1, [pc, #128]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80066be:	4b1f      	ldr	r3, [pc, #124]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c2:	4a1e      	ldr	r2, [pc, #120]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80066d0:	4b1a      	ldr	r3, [pc, #104]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d4:	4a19      	ldr	r2, [pc, #100]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80066da:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066dc:	e00f      	b.n	80066fe <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d106      	bne.n	80066f2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80066e4:	4b15      	ldr	r3, [pc, #84]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	4a14      	ldr	r2, [pc, #80]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066ea:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80066ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80066f0:	e005      	b.n	80066fe <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80066f2:	4b12      	ldr	r3, [pc, #72]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	4a11      	ldr	r2, [pc, #68]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 80066f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80066fc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80066fe:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a0e      	ldr	r2, [pc, #56]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800670a:	f7fa fb25 	bl	8000d58 <HAL_GetTick>
 800670e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006710:	e008      	b.n	8006724 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006712:	f7fa fb21 	bl	8000d58 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <RCCEx_PLL3_Config+0x15c>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006730:	7bfb      	ldrb	r3, [r7, #15]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	58024400 	.word	0x58024400
 8006740:	ffff0007 	.word	0xffff0007

08006744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e049      	b.n	80067ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fa f92e 	bl	80009cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f000 fc46 	bl	8007014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2201      	movs	r2, #1
 800679c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2201      	movs	r2, #1
 80067a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2201      	movs	r2, #1
 80067ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2201      	movs	r2, #1
 80067bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2201      	movs	r2, #1
 80067cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2201      	movs	r2, #1
 80067dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3708      	adds	r7, #8
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d101      	bne.n	8006804 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e049      	b.n	8006898 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800680a:	b2db      	uxtb	r3, r3
 800680c:	2b00      	cmp	r3, #0
 800680e:	d106      	bne.n	800681e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006818:	6878      	ldr	r0, [r7, #4]
 800681a:	f000 f841 	bl	80068a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	3304      	adds	r3, #4
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f000 fbef 	bl	8007014 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2201      	movs	r2, #1
 8006872:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2201      	movs	r2, #1
 8006882:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006896:	2300      	movs	r3, #0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d109      	bne.n	80068d8 <HAL_TIM_PWM_Start+0x24>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	bf14      	ite	ne
 80068d0:	2301      	movne	r3, #1
 80068d2:	2300      	moveq	r3, #0
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	e03c      	b.n	8006952 <HAL_TIM_PWM_Start+0x9e>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	2b04      	cmp	r3, #4
 80068dc:	d109      	bne.n	80068f2 <HAL_TIM_PWM_Start+0x3e>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80068e4:	b2db      	uxtb	r3, r3
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	bf14      	ite	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	2300      	moveq	r3, #0
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	e02f      	b.n	8006952 <HAL_TIM_PWM_Start+0x9e>
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b08      	cmp	r3, #8
 80068f6:	d109      	bne.n	800690c <HAL_TIM_PWM_Start+0x58>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	2b01      	cmp	r3, #1
 8006902:	bf14      	ite	ne
 8006904:	2301      	movne	r3, #1
 8006906:	2300      	moveq	r3, #0
 8006908:	b2db      	uxtb	r3, r3
 800690a:	e022      	b.n	8006952 <HAL_TIM_PWM_Start+0x9e>
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	2b0c      	cmp	r3, #12
 8006910:	d109      	bne.n	8006926 <HAL_TIM_PWM_Start+0x72>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006918:	b2db      	uxtb	r3, r3
 800691a:	2b01      	cmp	r3, #1
 800691c:	bf14      	ite	ne
 800691e:	2301      	movne	r3, #1
 8006920:	2300      	moveq	r3, #0
 8006922:	b2db      	uxtb	r3, r3
 8006924:	e015      	b.n	8006952 <HAL_TIM_PWM_Start+0x9e>
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b10      	cmp	r3, #16
 800692a:	d109      	bne.n	8006940 <HAL_TIM_PWM_Start+0x8c>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b01      	cmp	r3, #1
 8006936:	bf14      	ite	ne
 8006938:	2301      	movne	r3, #1
 800693a:	2300      	moveq	r3, #0
 800693c:	b2db      	uxtb	r3, r3
 800693e:	e008      	b.n	8006952 <HAL_TIM_PWM_Start+0x9e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b01      	cmp	r3, #1
 800694a:	bf14      	ite	ne
 800694c:	2301      	movne	r3, #1
 800694e:	2300      	moveq	r3, #0
 8006950:	b2db      	uxtb	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e0a1      	b.n	8006a9e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d104      	bne.n	800696a <HAL_TIM_PWM_Start+0xb6>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2202      	movs	r2, #2
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006968:	e023      	b.n	80069b2 <HAL_TIM_PWM_Start+0xfe>
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	2b04      	cmp	r3, #4
 800696e:	d104      	bne.n	800697a <HAL_TIM_PWM_Start+0xc6>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2202      	movs	r2, #2
 8006974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006978:	e01b      	b.n	80069b2 <HAL_TIM_PWM_Start+0xfe>
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	2b08      	cmp	r3, #8
 800697e:	d104      	bne.n	800698a <HAL_TIM_PWM_Start+0xd6>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006988:	e013      	b.n	80069b2 <HAL_TIM_PWM_Start+0xfe>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b0c      	cmp	r3, #12
 800698e:	d104      	bne.n	800699a <HAL_TIM_PWM_Start+0xe6>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2202      	movs	r2, #2
 8006994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006998:	e00b      	b.n	80069b2 <HAL_TIM_PWM_Start+0xfe>
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	2b10      	cmp	r3, #16
 800699e:	d104      	bne.n	80069aa <HAL_TIM_PWM_Start+0xf6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80069a8:	e003      	b.n	80069b2 <HAL_TIM_PWM_Start+0xfe>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2202      	movs	r2, #2
 80069ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2201      	movs	r2, #1
 80069b8:	6839      	ldr	r1, [r7, #0]
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 ff44 	bl	8007848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a38      	ldr	r2, [pc, #224]	@ (8006aa8 <HAL_TIM_PWM_Start+0x1f4>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d013      	beq.n	80069f2 <HAL_TIM_PWM_Start+0x13e>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a37      	ldr	r2, [pc, #220]	@ (8006aac <HAL_TIM_PWM_Start+0x1f8>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d00e      	beq.n	80069f2 <HAL_TIM_PWM_Start+0x13e>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a35      	ldr	r2, [pc, #212]	@ (8006ab0 <HAL_TIM_PWM_Start+0x1fc>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d009      	beq.n	80069f2 <HAL_TIM_PWM_Start+0x13e>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a34      	ldr	r2, [pc, #208]	@ (8006ab4 <HAL_TIM_PWM_Start+0x200>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d004      	beq.n	80069f2 <HAL_TIM_PWM_Start+0x13e>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	4a32      	ldr	r2, [pc, #200]	@ (8006ab8 <HAL_TIM_PWM_Start+0x204>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d101      	bne.n	80069f6 <HAL_TIM_PWM_Start+0x142>
 80069f2:	2301      	movs	r3, #1
 80069f4:	e000      	b.n	80069f8 <HAL_TIM_PWM_Start+0x144>
 80069f6:	2300      	movs	r3, #0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a25      	ldr	r2, [pc, #148]	@ (8006aa8 <HAL_TIM_PWM_Start+0x1f4>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d022      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a1e:	d01d      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a25      	ldr	r2, [pc, #148]	@ (8006abc <HAL_TIM_PWM_Start+0x208>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d018      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a24      	ldr	r2, [pc, #144]	@ (8006ac0 <HAL_TIM_PWM_Start+0x20c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d013      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a22      	ldr	r2, [pc, #136]	@ (8006ac4 <HAL_TIM_PWM_Start+0x210>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d00e      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a1a      	ldr	r2, [pc, #104]	@ (8006aac <HAL_TIM_PWM_Start+0x1f8>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d009      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <HAL_TIM_PWM_Start+0x214>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d004      	beq.n	8006a5c <HAL_TIM_PWM_Start+0x1a8>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a16      	ldr	r2, [pc, #88]	@ (8006ab0 <HAL_TIM_PWM_Start+0x1fc>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d115      	bne.n	8006a88 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	689a      	ldr	r2, [r3, #8]
 8006a62:	4b1a      	ldr	r3, [pc, #104]	@ (8006acc <HAL_TIM_PWM_Start+0x218>)
 8006a64:	4013      	ands	r3, r2
 8006a66:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d015      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x1e6>
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a74:	d011      	beq.n	8006a9a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f042 0201 	orr.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a86:	e008      	b.n	8006a9a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f042 0201 	orr.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]
 8006a98:	e000      	b.n	8006a9c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006a9a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40010000 	.word	0x40010000
 8006aac:	40010400 	.word	0x40010400
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40014400 	.word	0x40014400
 8006ab8:	40014800 	.word	0x40014800
 8006abc:	40000400 	.word	0x40000400
 8006ac0:	40000800 	.word	0x40000800
 8006ac4:	40000c00 	.word	0x40000c00
 8006ac8:	40001800 	.word	0x40001800
 8006acc:	00010007 	.word	0x00010007

08006ad0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
 8006ad8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	6839      	ldr	r1, [r7, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 feb0 	bl	8007848 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a3e      	ldr	r2, [pc, #248]	@ (8006be8 <HAL_TIM_PWM_Stop+0x118>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_TIM_PWM_Stop+0x4a>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a3d      	ldr	r2, [pc, #244]	@ (8006bec <HAL_TIM_PWM_Stop+0x11c>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d00e      	beq.n	8006b1a <HAL_TIM_PWM_Stop+0x4a>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a3b      	ldr	r2, [pc, #236]	@ (8006bf0 <HAL_TIM_PWM_Stop+0x120>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d009      	beq.n	8006b1a <HAL_TIM_PWM_Stop+0x4a>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a3a      	ldr	r2, [pc, #232]	@ (8006bf4 <HAL_TIM_PWM_Stop+0x124>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	d004      	beq.n	8006b1a <HAL_TIM_PWM_Stop+0x4a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a38      	ldr	r2, [pc, #224]	@ (8006bf8 <HAL_TIM_PWM_Stop+0x128>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d101      	bne.n	8006b1e <HAL_TIM_PWM_Stop+0x4e>
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	e000      	b.n	8006b20 <HAL_TIM_PWM_Stop+0x50>
 8006b1e:	2300      	movs	r3, #0
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d017      	beq.n	8006b54 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6a1a      	ldr	r2, [r3, #32]
 8006b2a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b2e:	4013      	ands	r3, r2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10f      	bne.n	8006b54 <HAL_TIM_PWM_Stop+0x84>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	6a1a      	ldr	r2, [r3, #32]
 8006b3a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b3e:	4013      	ands	r3, r2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d107      	bne.n	8006b54 <HAL_TIM_PWM_Stop+0x84>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006b52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6a1a      	ldr	r2, [r3, #32]
 8006b5a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8006b5e:	4013      	ands	r3, r2
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10f      	bne.n	8006b84 <HAL_TIM_PWM_Stop+0xb4>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	6a1a      	ldr	r2, [r3, #32]
 8006b6a:	f240 4344 	movw	r3, #1092	@ 0x444
 8006b6e:	4013      	ands	r3, r2
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d107      	bne.n	8006b84 <HAL_TIM_PWM_Stop+0xb4>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0201 	bic.w	r2, r2, #1
 8006b82:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d104      	bne.n	8006b94 <HAL_TIM_PWM_Stop+0xc4>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b92:	e023      	b.n	8006bdc <HAL_TIM_PWM_Stop+0x10c>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d104      	bne.n	8006ba4 <HAL_TIM_PWM_Stop+0xd4>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ba2:	e01b      	b.n	8006bdc <HAL_TIM_PWM_Stop+0x10c>
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b08      	cmp	r3, #8
 8006ba8:	d104      	bne.n	8006bb4 <HAL_TIM_PWM_Stop+0xe4>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2201      	movs	r2, #1
 8006bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bb2:	e013      	b.n	8006bdc <HAL_TIM_PWM_Stop+0x10c>
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	2b0c      	cmp	r3, #12
 8006bb8:	d104      	bne.n	8006bc4 <HAL_TIM_PWM_Stop+0xf4>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bc2:	e00b      	b.n	8006bdc <HAL_TIM_PWM_Stop+0x10c>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d104      	bne.n	8006bd4 <HAL_TIM_PWM_Stop+0x104>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bd2:	e003      	b.n	8006bdc <HAL_TIM_PWM_Stop+0x10c>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2201      	movs	r2, #1
 8006bd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	40010000 	.word	0x40010000
 8006bec:	40010400 	.word	0x40010400
 8006bf0:	40014000 	.word	0x40014000
 8006bf4:	40014400 	.word	0x40014400
 8006bf8:	40014800 	.word	0x40014800

08006bfc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b086      	sub	sp, #24
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	60f8      	str	r0, [r7, #12]
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d101      	bne.n	8006c1a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c16:	2302      	movs	r3, #2
 8006c18:	e0ff      	b.n	8006e1a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2201      	movs	r2, #1
 8006c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b14      	cmp	r3, #20
 8006c26:	f200 80f0 	bhi.w	8006e0a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c85 	.word	0x08006c85
 8006c34:	08006e0b 	.word	0x08006e0b
 8006c38:	08006e0b 	.word	0x08006e0b
 8006c3c:	08006e0b 	.word	0x08006e0b
 8006c40:	08006cc5 	.word	0x08006cc5
 8006c44:	08006e0b 	.word	0x08006e0b
 8006c48:	08006e0b 	.word	0x08006e0b
 8006c4c:	08006e0b 	.word	0x08006e0b
 8006c50:	08006d07 	.word	0x08006d07
 8006c54:	08006e0b 	.word	0x08006e0b
 8006c58:	08006e0b 	.word	0x08006e0b
 8006c5c:	08006e0b 	.word	0x08006e0b
 8006c60:	08006d47 	.word	0x08006d47
 8006c64:	08006e0b 	.word	0x08006e0b
 8006c68:	08006e0b 	.word	0x08006e0b
 8006c6c:	08006e0b 	.word	0x08006e0b
 8006c70:	08006d89 	.word	0x08006d89
 8006c74:	08006e0b 	.word	0x08006e0b
 8006c78:	08006e0b 	.word	0x08006e0b
 8006c7c:	08006e0b 	.word	0x08006e0b
 8006c80:	08006dc9 	.word	0x08006dc9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68b9      	ldr	r1, [r7, #8]
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f000 fa68 	bl	8007160 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0208 	orr.w	r2, r2, #8
 8006c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699a      	ldr	r2, [r3, #24]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0204 	bic.w	r2, r2, #4
 8006cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6999      	ldr	r1, [r3, #24]
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	691a      	ldr	r2, [r3, #16]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	430a      	orrs	r2, r1
 8006cc0:	619a      	str	r2, [r3, #24]
      break;
 8006cc2:	e0a5      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68b9      	ldr	r1, [r7, #8]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 fad8 	bl	8007280 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	691b      	ldr	r3, [r3, #16]
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	619a      	str	r2, [r3, #24]
      break;
 8006d04:	e084      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68b9      	ldr	r1, [r7, #8]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f000 fb41 	bl	8007394 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f042 0208 	orr.w	r2, r2, #8
 8006d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69da      	ldr	r2, [r3, #28]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f022 0204 	bic.w	r2, r2, #4
 8006d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69d9      	ldr	r1, [r3, #28]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	430a      	orrs	r2, r1
 8006d42:	61da      	str	r2, [r3, #28]
      break;
 8006d44:	e064      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fba9 	bl	80074a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69da      	ldr	r2, [r3, #28]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	69d9      	ldr	r1, [r3, #28]
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	691b      	ldr	r3, [r3, #16]
 8006d7c:	021a      	lsls	r2, r3, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	61da      	str	r2, [r3, #28]
      break;
 8006d86:	e043      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fbf2 	bl	8007578 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0208 	orr.w	r2, r2, #8
 8006da2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f022 0204 	bic.w	r2, r2, #4
 8006db2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691a      	ldr	r2, [r3, #16]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	430a      	orrs	r2, r1
 8006dc4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006dc6:	e023      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	68b9      	ldr	r1, [r7, #8]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 fc36 	bl	8007640 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006de2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006df2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	691b      	ldr	r3, [r3, #16]
 8006dfe:	021a      	lsls	r2, r3, #8
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006e08:	e002      	b.n	8006e10 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e0e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2200      	movs	r2, #0
 8006e14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3718      	adds	r7, #24
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop

08006e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIM_ConfigClockSource+0x1c>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0dc      	b.n	8006ffa <HAL_TIM_ConfigClockSource+0x1d6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e58:	68ba      	ldr	r2, [r7, #8]
 8006e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007004 <HAL_TIM_ConfigClockSource+0x1e0>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68ba      	ldr	r2, [r7, #8]
 8006e6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a64      	ldr	r2, [pc, #400]	@ (8007008 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	f000 80a9 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006e7c:	4a62      	ldr	r2, [pc, #392]	@ (8007008 <HAL_TIM_ConfigClockSource+0x1e4>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	f200 80ae 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e84:	4a61      	ldr	r2, [pc, #388]	@ (800700c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	f000 80a1 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006e8c:	4a5f      	ldr	r2, [pc, #380]	@ (800700c <HAL_TIM_ConfigClockSource+0x1e8>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	f200 80a6 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006e94:	4a5e      	ldr	r2, [pc, #376]	@ (8007010 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f000 8099 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006e9c:	4a5c      	ldr	r2, [pc, #368]	@ (8007010 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	f200 809e 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ea4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006ea8:	f000 8091 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006eac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006eb0:	f200 8096 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006eb4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eb8:	f000 8089 	beq.w	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ec0:	f200 808e 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ec8:	d03e      	beq.n	8006f48 <HAL_TIM_ConfigClockSource+0x124>
 8006eca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ece:	f200 8087 	bhi.w	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ed6:	f000 8086 	beq.w	8006fe6 <HAL_TIM_ConfigClockSource+0x1c2>
 8006eda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ede:	d87f      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ee0:	2b70      	cmp	r3, #112	@ 0x70
 8006ee2:	d01a      	beq.n	8006f1a <HAL_TIM_ConfigClockSource+0xf6>
 8006ee4:	2b70      	cmp	r3, #112	@ 0x70
 8006ee6:	d87b      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ee8:	2b60      	cmp	r3, #96	@ 0x60
 8006eea:	d050      	beq.n	8006f8e <HAL_TIM_ConfigClockSource+0x16a>
 8006eec:	2b60      	cmp	r3, #96	@ 0x60
 8006eee:	d877      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ef0:	2b50      	cmp	r3, #80	@ 0x50
 8006ef2:	d03c      	beq.n	8006f6e <HAL_TIM_ConfigClockSource+0x14a>
 8006ef4:	2b50      	cmp	r3, #80	@ 0x50
 8006ef6:	d873      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006ef8:	2b40      	cmp	r3, #64	@ 0x40
 8006efa:	d058      	beq.n	8006fae <HAL_TIM_ConfigClockSource+0x18a>
 8006efc:	2b40      	cmp	r3, #64	@ 0x40
 8006efe:	d86f      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f00:	2b30      	cmp	r3, #48	@ 0x30
 8006f02:	d064      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006f04:	2b30      	cmp	r3, #48	@ 0x30
 8006f06:	d86b      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d060      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d867      	bhi.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d05c      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006f14:	2b10      	cmp	r3, #16
 8006f16:	d05a      	beq.n	8006fce <HAL_TIM_ConfigClockSource+0x1aa>
 8006f18:	e062      	b.n	8006fe0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f2a:	f000 fc6d 	bl	8007808 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	609a      	str	r2, [r3, #8]
      break;
 8006f46:	e04f      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f58:	f000 fc56 	bl	8007808 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	689a      	ldr	r2, [r3, #8]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f6a:	609a      	str	r2, [r3, #8]
      break;
 8006f6c:	e03c      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f000 fbc6 	bl	800770c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2150      	movs	r1, #80	@ 0x50
 8006f86:	4618      	mov	r0, r3
 8006f88:	f000 fc20 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 8006f8c:	e02c      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f9a:	461a      	mov	r2, r3
 8006f9c:	f000 fbe5 	bl	800776a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	2160      	movs	r1, #96	@ 0x60
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fc10 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 8006fac:	e01c      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f000 fba6 	bl	800770c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	2140      	movs	r1, #64	@ 0x40
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 fc00 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 8006fcc:	e00c      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681a      	ldr	r2, [r3, #0]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	4610      	mov	r0, r2
 8006fda:	f000 fbf7 	bl	80077cc <TIM_ITRx_SetConfig>
      break;
 8006fde:	e003      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe4:	e000      	b.n	8006fe8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8006fe6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	ffceff88 	.word	0xffceff88
 8007008:	00100040 	.word	0x00100040
 800700c:	00100030 	.word	0x00100030
 8007010:	00100020 	.word	0x00100020

08007014 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	4a46      	ldr	r2, [pc, #280]	@ (8007140 <TIM_Base_SetConfig+0x12c>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d013      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007032:	d00f      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	4a43      	ldr	r2, [pc, #268]	@ (8007144 <TIM_Base_SetConfig+0x130>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d00b      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a42      	ldr	r2, [pc, #264]	@ (8007148 <TIM_Base_SetConfig+0x134>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d007      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	4a41      	ldr	r2, [pc, #260]	@ (800714c <TIM_Base_SetConfig+0x138>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d003      	beq.n	8007054 <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a40      	ldr	r2, [pc, #256]	@ (8007150 <TIM_Base_SetConfig+0x13c>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d108      	bne.n	8007066 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800705a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	68fa      	ldr	r2, [r7, #12]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a35      	ldr	r2, [pc, #212]	@ (8007140 <TIM_Base_SetConfig+0x12c>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d01f      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007074:	d01b      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a32      	ldr	r2, [pc, #200]	@ (8007144 <TIM_Base_SetConfig+0x130>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d017      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a31      	ldr	r2, [pc, #196]	@ (8007148 <TIM_Base_SetConfig+0x134>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d013      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a30      	ldr	r2, [pc, #192]	@ (800714c <TIM_Base_SetConfig+0x138>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d00f      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2f      	ldr	r2, [pc, #188]	@ (8007150 <TIM_Base_SetConfig+0x13c>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d00b      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2e      	ldr	r2, [pc, #184]	@ (8007154 <TIM_Base_SetConfig+0x140>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d007      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2d      	ldr	r2, [pc, #180]	@ (8007158 <TIM_Base_SetConfig+0x144>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_Base_SetConfig+0x9a>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2c      	ldr	r2, [pc, #176]	@ (800715c <TIM_Base_SetConfig+0x148>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d108      	bne.n	80070c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80070b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	68fa      	ldr	r2, [r7, #12]
 80070bc:	4313      	orrs	r3, r2
 80070be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a16      	ldr	r2, [pc, #88]	@ (8007140 <TIM_Base_SetConfig+0x12c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d00f      	beq.n	800710c <TIM_Base_SetConfig+0xf8>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a18      	ldr	r2, [pc, #96]	@ (8007150 <TIM_Base_SetConfig+0x13c>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00b      	beq.n	800710c <TIM_Base_SetConfig+0xf8>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a17      	ldr	r2, [pc, #92]	@ (8007154 <TIM_Base_SetConfig+0x140>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d007      	beq.n	800710c <TIM_Base_SetConfig+0xf8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a16      	ldr	r2, [pc, #88]	@ (8007158 <TIM_Base_SetConfig+0x144>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d003      	beq.n	800710c <TIM_Base_SetConfig+0xf8>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a15      	ldr	r2, [pc, #84]	@ (800715c <TIM_Base_SetConfig+0x148>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d103      	bne.n	8007114 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b01      	cmp	r3, #1
 8007124:	d105      	bne.n	8007132 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	691b      	ldr	r3, [r3, #16]
 800712a:	f023 0201 	bic.w	r2, r3, #1
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	611a      	str	r2, [r3, #16]
  }
}
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800

08007160 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007160:	b480      	push	{r7}
 8007162:	b087      	sub	sp, #28
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	f023 0201 	bic.w	r2, r3, #1
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	699b      	ldr	r3, [r3, #24]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	4b37      	ldr	r3, [pc, #220]	@ (8007268 <TIM_OC1_SetConfig+0x108>)
 800718c:	4013      	ands	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f023 0303 	bic.w	r3, r3, #3
 8007196:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4313      	orrs	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071a2:	697b      	ldr	r3, [r7, #20]
 80071a4:	f023 0302 	bic.w	r3, r3, #2
 80071a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	689b      	ldr	r3, [r3, #8]
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	4a2d      	ldr	r2, [pc, #180]	@ (800726c <TIM_OC1_SetConfig+0x10c>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d00f      	beq.n	80071dc <TIM_OC1_SetConfig+0x7c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a2c      	ldr	r2, [pc, #176]	@ (8007270 <TIM_OC1_SetConfig+0x110>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d00b      	beq.n	80071dc <TIM_OC1_SetConfig+0x7c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007274 <TIM_OC1_SetConfig+0x114>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d007      	beq.n	80071dc <TIM_OC1_SetConfig+0x7c>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a2a      	ldr	r2, [pc, #168]	@ (8007278 <TIM_OC1_SetConfig+0x118>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d003      	beq.n	80071dc <TIM_OC1_SetConfig+0x7c>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4a29      	ldr	r2, [pc, #164]	@ (800727c <TIM_OC1_SetConfig+0x11c>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d10c      	bne.n	80071f6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	f023 0308 	bic.w	r3, r3, #8
 80071e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	697a      	ldr	r2, [r7, #20]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f023 0304 	bic.w	r3, r3, #4
 80071f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a1c      	ldr	r2, [pc, #112]	@ (800726c <TIM_OC1_SetConfig+0x10c>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d00f      	beq.n	800721e <TIM_OC1_SetConfig+0xbe>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1b      	ldr	r2, [pc, #108]	@ (8007270 <TIM_OC1_SetConfig+0x110>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d00b      	beq.n	800721e <TIM_OC1_SetConfig+0xbe>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1a      	ldr	r2, [pc, #104]	@ (8007274 <TIM_OC1_SetConfig+0x114>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d007      	beq.n	800721e <TIM_OC1_SetConfig+0xbe>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a19      	ldr	r2, [pc, #100]	@ (8007278 <TIM_OC1_SetConfig+0x118>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d003      	beq.n	800721e <TIM_OC1_SetConfig+0xbe>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a18      	ldr	r2, [pc, #96]	@ (800727c <TIM_OC1_SetConfig+0x11c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d111      	bne.n	8007242 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800722c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	695b      	ldr	r3, [r3, #20]
 8007232:	693a      	ldr	r2, [r7, #16]
 8007234:	4313      	orrs	r3, r2
 8007236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	fffeff8f 	.word	0xfffeff8f
 800726c:	40010000 	.word	0x40010000
 8007270:	40010400 	.word	0x40010400
 8007274:	40014000 	.word	0x40014000
 8007278:	40014400 	.word	0x40014400
 800727c:	40014800 	.word	0x40014800

08007280 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007280:	b480      	push	{r7}
 8007282:	b087      	sub	sp, #28
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6a1b      	ldr	r3, [r3, #32]
 800728e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a1b      	ldr	r3, [r3, #32]
 8007294:	f023 0210 	bic.w	r2, r3, #16
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	699b      	ldr	r3, [r3, #24]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	4b34      	ldr	r3, [pc, #208]	@ (800737c <TIM_OC2_SetConfig+0xfc>)
 80072ac:	4013      	ands	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	021b      	lsls	r3, r3, #8
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f023 0320 	bic.w	r3, r3, #32
 80072ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	011b      	lsls	r3, r3, #4
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	4313      	orrs	r3, r2
 80072d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a29      	ldr	r2, [pc, #164]	@ (8007380 <TIM_OC2_SetConfig+0x100>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d003      	beq.n	80072e8 <TIM_OC2_SetConfig+0x68>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	4a28      	ldr	r2, [pc, #160]	@ (8007384 <TIM_OC2_SetConfig+0x104>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	d10d      	bne.n	8007304 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80072ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	011b      	lsls	r3, r3, #4
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007302:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a1e      	ldr	r2, [pc, #120]	@ (8007380 <TIM_OC2_SetConfig+0x100>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d00f      	beq.n	800732c <TIM_OC2_SetConfig+0xac>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a1d      	ldr	r2, [pc, #116]	@ (8007384 <TIM_OC2_SetConfig+0x104>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00b      	beq.n	800732c <TIM_OC2_SetConfig+0xac>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1c      	ldr	r2, [pc, #112]	@ (8007388 <TIM_OC2_SetConfig+0x108>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d007      	beq.n	800732c <TIM_OC2_SetConfig+0xac>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	4a1b      	ldr	r2, [pc, #108]	@ (800738c <TIM_OC2_SetConfig+0x10c>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d003      	beq.n	800732c <TIM_OC2_SetConfig+0xac>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a1a      	ldr	r2, [pc, #104]	@ (8007390 <TIM_OC2_SetConfig+0x110>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d113      	bne.n	8007354 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007332:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	695b      	ldr	r3, [r3, #20]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	699b      	ldr	r3, [r3, #24]
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	4313      	orrs	r3, r2
 8007352:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	697a      	ldr	r2, [r7, #20]
 800736c:	621a      	str	r2, [r3, #32]
}
 800736e:	bf00      	nop
 8007370:	371c      	adds	r7, #28
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr
 800737a:	bf00      	nop
 800737c:	feff8fff 	.word	0xfeff8fff
 8007380:	40010000 	.word	0x40010000
 8007384:	40010400 	.word	0x40010400
 8007388:	40014000 	.word	0x40014000
 800738c:	40014400 	.word	0x40014400
 8007390:	40014800 	.word	0x40014800

08007394 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a1b      	ldr	r3, [r3, #32]
 80073a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6a1b      	ldr	r3, [r3, #32]
 80073a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	685b      	ldr	r3, [r3, #4]
 80073b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	69db      	ldr	r3, [r3, #28]
 80073ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4b33      	ldr	r3, [pc, #204]	@ (800748c <TIM_OC3_SetConfig+0xf8>)
 80073c0:	4013      	ands	r3, r2
 80073c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f023 0303 	bic.w	r3, r3, #3
 80073ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	4313      	orrs	r3, r2
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80073dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	021b      	lsls	r3, r3, #8
 80073e4:	697a      	ldr	r2, [r7, #20]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a28      	ldr	r2, [pc, #160]	@ (8007490 <TIM_OC3_SetConfig+0xfc>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC3_SetConfig+0x66>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a27      	ldr	r2, [pc, #156]	@ (8007494 <TIM_OC3_SetConfig+0x100>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d10d      	bne.n	8007416 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007400:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	021b      	lsls	r3, r3, #8
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007414:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a1d      	ldr	r2, [pc, #116]	@ (8007490 <TIM_OC3_SetConfig+0xfc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_OC3_SetConfig+0xaa>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a1c      	ldr	r2, [pc, #112]	@ (8007494 <TIM_OC3_SetConfig+0x100>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_OC3_SetConfig+0xaa>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a1b      	ldr	r2, [pc, #108]	@ (8007498 <TIM_OC3_SetConfig+0x104>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_OC3_SetConfig+0xaa>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a1a      	ldr	r2, [pc, #104]	@ (800749c <TIM_OC3_SetConfig+0x108>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC3_SetConfig+0xaa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a19      	ldr	r2, [pc, #100]	@ (80074a0 <TIM_OC3_SetConfig+0x10c>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d113      	bne.n	8007466 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007444:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800744c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	011b      	lsls	r3, r3, #4
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	4313      	orrs	r3, r2
 8007458:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	011b      	lsls	r3, r3, #4
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68fa      	ldr	r2, [r7, #12]
 8007470:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	685a      	ldr	r2, [r3, #4]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	621a      	str	r2, [r3, #32]
}
 8007480:	bf00      	nop
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr
 800748c:	fffeff8f 	.word	0xfffeff8f
 8007490:	40010000 	.word	0x40010000
 8007494:	40010400 	.word	0x40010400
 8007498:	40014000 	.word	0x40014000
 800749c:	40014400 	.word	0x40014400
 80074a0:	40014800 	.word	0x40014800

080074a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b087      	sub	sp, #28
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6a1b      	ldr	r3, [r3, #32]
 80074b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	69db      	ldr	r3, [r3, #28]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	4b24      	ldr	r3, [pc, #144]	@ (8007560 <TIM_OC4_SetConfig+0xbc>)
 80074d0:	4013      	ands	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80074da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	021b      	lsls	r3, r3, #8
 80074e2:	68fa      	ldr	r2, [r7, #12]
 80074e4:	4313      	orrs	r3, r2
 80074e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80074ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	031b      	lsls	r3, r3, #12
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4313      	orrs	r3, r2
 80074fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a19      	ldr	r2, [pc, #100]	@ (8007564 <TIM_OC4_SetConfig+0xc0>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d00f      	beq.n	8007524 <TIM_OC4_SetConfig+0x80>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a18      	ldr	r2, [pc, #96]	@ (8007568 <TIM_OC4_SetConfig+0xc4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d00b      	beq.n	8007524 <TIM_OC4_SetConfig+0x80>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a17      	ldr	r2, [pc, #92]	@ (800756c <TIM_OC4_SetConfig+0xc8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d007      	beq.n	8007524 <TIM_OC4_SetConfig+0x80>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a16      	ldr	r2, [pc, #88]	@ (8007570 <TIM_OC4_SetConfig+0xcc>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d003      	beq.n	8007524 <TIM_OC4_SetConfig+0x80>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a15      	ldr	r2, [pc, #84]	@ (8007574 <TIM_OC4_SetConfig+0xd0>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d109      	bne.n	8007538 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800752a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	019b      	lsls	r3, r3, #6
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	4313      	orrs	r3, r2
 8007536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	697a      	ldr	r2, [r7, #20]
 800753c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68fa      	ldr	r2, [r7, #12]
 8007542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	693a      	ldr	r2, [r7, #16]
 8007550:	621a      	str	r2, [r3, #32]
}
 8007552:	bf00      	nop
 8007554:	371c      	adds	r7, #28
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	feff8fff 	.word	0xfeff8fff
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400
 800756c:	40014000 	.word	0x40014000
 8007570:	40014400 	.word	0x40014400
 8007574:	40014800 	.word	0x40014800

08007578 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007578:	b480      	push	{r7}
 800757a:	b087      	sub	sp, #28
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
 8007580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800759e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80075a0:	68fa      	ldr	r2, [r7, #12]
 80075a2:	4b21      	ldr	r3, [pc, #132]	@ (8007628 <TIM_OC5_SetConfig+0xb0>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80075b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	041b      	lsls	r3, r3, #16
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a18      	ldr	r2, [pc, #96]	@ (800762c <TIM_OC5_SetConfig+0xb4>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d00f      	beq.n	80075ee <TIM_OC5_SetConfig+0x76>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a17      	ldr	r2, [pc, #92]	@ (8007630 <TIM_OC5_SetConfig+0xb8>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d00b      	beq.n	80075ee <TIM_OC5_SetConfig+0x76>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a16      	ldr	r2, [pc, #88]	@ (8007634 <TIM_OC5_SetConfig+0xbc>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d007      	beq.n	80075ee <TIM_OC5_SetConfig+0x76>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a15      	ldr	r2, [pc, #84]	@ (8007638 <TIM_OC5_SetConfig+0xc0>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d003      	beq.n	80075ee <TIM_OC5_SetConfig+0x76>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a14      	ldr	r2, [pc, #80]	@ (800763c <TIM_OC5_SetConfig+0xc4>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d109      	bne.n	8007602 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80075f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	021b      	lsls	r3, r3, #8
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	4313      	orrs	r3, r2
 8007600:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	68fa      	ldr	r2, [r7, #12]
 800760c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	685a      	ldr	r2, [r3, #4]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	621a      	str	r2, [r3, #32]
}
 800761c:	bf00      	nop
 800761e:	371c      	adds	r7, #28
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	fffeff8f 	.word	0xfffeff8f
 800762c:	40010000 	.word	0x40010000
 8007630:	40010400 	.word	0x40010400
 8007634:	40014000 	.word	0x40014000
 8007638:	40014400 	.word	0x40014400
 800763c:	40014800 	.word	0x40014800

08007640 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007640:	b480      	push	{r7}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4b22      	ldr	r3, [pc, #136]	@ (80076f4 <TIM_OC6_SetConfig+0xb4>)
 800766c:	4013      	ands	r3, r2
 800766e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	021b      	lsls	r3, r3, #8
 8007676:	68fa      	ldr	r2, [r7, #12]
 8007678:	4313      	orrs	r3, r2
 800767a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007682:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	051b      	lsls	r3, r3, #20
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	4313      	orrs	r3, r2
 800768e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a19      	ldr	r2, [pc, #100]	@ (80076f8 <TIM_OC6_SetConfig+0xb8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d00f      	beq.n	80076b8 <TIM_OC6_SetConfig+0x78>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	4a18      	ldr	r2, [pc, #96]	@ (80076fc <TIM_OC6_SetConfig+0xbc>)
 800769c:	4293      	cmp	r3, r2
 800769e:	d00b      	beq.n	80076b8 <TIM_OC6_SetConfig+0x78>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a17      	ldr	r2, [pc, #92]	@ (8007700 <TIM_OC6_SetConfig+0xc0>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d007      	beq.n	80076b8 <TIM_OC6_SetConfig+0x78>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	4a16      	ldr	r2, [pc, #88]	@ (8007704 <TIM_OC6_SetConfig+0xc4>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d003      	beq.n	80076b8 <TIM_OC6_SetConfig+0x78>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	4a15      	ldr	r2, [pc, #84]	@ (8007708 <TIM_OC6_SetConfig+0xc8>)
 80076b4:	4293      	cmp	r3, r2
 80076b6:	d109      	bne.n	80076cc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	029b      	lsls	r3, r3, #10
 80076c6:	697a      	ldr	r2, [r7, #20]
 80076c8:	4313      	orrs	r3, r2
 80076ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	68fa      	ldr	r2, [r7, #12]
 80076d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685a      	ldr	r2, [r3, #4]
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	693a      	ldr	r2, [r7, #16]
 80076e4:	621a      	str	r2, [r3, #32]
}
 80076e6:	bf00      	nop
 80076e8:	371c      	adds	r7, #28
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	feff8fff 	.word	0xfeff8fff
 80076f8:	40010000 	.word	0x40010000
 80076fc:	40010400 	.word	0x40010400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800

0800770c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6a1b      	ldr	r3, [r3, #32]
 8007722:	f023 0201 	bic.w	r2, r3, #1
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	699b      	ldr	r3, [r3, #24]
 800772e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 030a 	bic.w	r3, r3, #10
 8007748:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800774a:	697a      	ldr	r2, [r7, #20]
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	4313      	orrs	r3, r2
 8007750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	693a      	ldr	r2, [r7, #16]
 8007756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	697a      	ldr	r2, [r7, #20]
 800775c:	621a      	str	r2, [r3, #32]
}
 800775e:	bf00      	nop
 8007760:	371c      	adds	r7, #28
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr

0800776a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800776a:	b480      	push	{r7}
 800776c:	b087      	sub	sp, #28
 800776e:	af00      	add	r7, sp, #0
 8007770:	60f8      	str	r0, [r7, #12]
 8007772:	60b9      	str	r1, [r7, #8]
 8007774:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	6a1b      	ldr	r3, [r3, #32]
 8007780:	f023 0210 	bic.w	r2, r3, #16
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	699b      	ldr	r3, [r3, #24]
 800778c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007794:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	031b      	lsls	r3, r3, #12
 800779a:	693a      	ldr	r2, [r7, #16]
 800779c:	4313      	orrs	r3, r2
 800779e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80077a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	011b      	lsls	r3, r3, #4
 80077ac:	697a      	ldr	r2, [r7, #20]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	693a      	ldr	r2, [r7, #16]
 80077b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	621a      	str	r2, [r3, #32]
}
 80077be:	bf00      	nop
 80077c0:	371c      	adds	r7, #28
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
	...

080077cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	4b09      	ldr	r3, [pc, #36]	@ (8007804 <TIM_ITRx_SetConfig+0x38>)
 80077e0:	4013      	ands	r3, r2
 80077e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077e4:	683a      	ldr	r2, [r7, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4313      	orrs	r3, r2
 80077ea:	f043 0307 	orr.w	r3, r3, #7
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	609a      	str	r2, [r3, #8]
}
 80077f6:	bf00      	nop
 80077f8:	3714      	adds	r7, #20
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	ffcfff8f 	.word	0xffcfff8f

08007808 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007808:	b480      	push	{r7}
 800780a:	b087      	sub	sp, #28
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
 8007814:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	689b      	ldr	r3, [r3, #8]
 800781a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781c:	697b      	ldr	r3, [r7, #20]
 800781e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007822:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	021a      	lsls	r2, r3, #8
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	431a      	orrs	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4313      	orrs	r3, r2
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	697a      	ldr	r2, [r7, #20]
 800783a:	609a      	str	r2, [r3, #8]
}
 800783c:	bf00      	nop
 800783e:	371c      	adds	r7, #28
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr

08007848 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007848:	b480      	push	{r7}
 800784a:	b087      	sub	sp, #28
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	f003 031f 	and.w	r3, r3, #31
 800785a:	2201      	movs	r2, #1
 800785c:	fa02 f303 	lsl.w	r3, r2, r3
 8007860:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	6a1a      	ldr	r2, [r3, #32]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	43db      	mvns	r3, r3
 800786a:	401a      	ands	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6a1a      	ldr	r2, [r3, #32]
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	f003 031f 	and.w	r3, r3, #31
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	621a      	str	r2, [r3, #32]
}
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d101      	bne.n	80078ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078a8:	2302      	movs	r3, #2
 80078aa:	e06d      	b.n	8007988 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2201      	movs	r2, #1
 80078b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2202      	movs	r2, #2
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a30      	ldr	r2, [pc, #192]	@ (8007994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d004      	beq.n	80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a2f      	ldr	r2, [pc, #188]	@ (8007998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d108      	bne.n	80078f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80078e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68fa      	ldr	r2, [r7, #12]
 8007900:	4313      	orrs	r3, r2
 8007902:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a20      	ldr	r2, [pc, #128]	@ (8007994 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d022      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800791e:	d01d      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1d      	ldr	r2, [pc, #116]	@ (800799c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d018      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a1c      	ldr	r2, [pc, #112]	@ (80079a0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d013      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a1a      	ldr	r2, [pc, #104]	@ (80079a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d00e      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a15      	ldr	r2, [pc, #84]	@ (8007998 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d009      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a16      	ldr	r2, [pc, #88]	@ (80079a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d004      	beq.n	800795c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a15      	ldr	r2, [pc, #84]	@ (80079ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d10c      	bne.n	8007976 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007962:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	4313      	orrs	r3, r2
 800796c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2201      	movs	r2, #1
 800797a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3714      	adds	r7, #20
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	40010000 	.word	0x40010000
 8007998:	40010400 	.word	0x40010400
 800799c:	40000400 	.word	0x40000400
 80079a0:	40000800 	.word	0x40000800
 80079a4:	40000c00 	.word	0x40000c00
 80079a8:	40001800 	.word	0x40001800
 80079ac:	40014000 	.word	0x40014000

080079b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b085      	sub	sp, #20
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d101      	bne.n	80079cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80079c8:	2302      	movs	r3, #2
 80079ca:	e065      	b.n	8007a98 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	4313      	orrs	r3, r2
 80079e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	4313      	orrs	r3, r2
 80079ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	695b      	ldr	r3, [r3, #20]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a32:	4313      	orrs	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	699b      	ldr	r3, [r3, #24]
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	4313      	orrs	r3, r2
 8007a44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a16      	ldr	r2, [pc, #88]	@ (8007aa4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d004      	beq.n	8007a5a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a14      	ldr	r2, [pc, #80]	@ (8007aa8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d115      	bne.n	8007a86 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a64:	051b      	lsls	r3, r3, #20
 8007a66:	4313      	orrs	r3, r2
 8007a68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	4313      	orrs	r3, r2
 8007a84:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007a96:	2300      	movs	r3, #0
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3714      	adds	r7, #20
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	40010000 	.word	0x40010000
 8007aa8:	40010400 	.word	0x40010400

08007aac <memset>:
 8007aac:	4402      	add	r2, r0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d100      	bne.n	8007ab6 <memset+0xa>
 8007ab4:	4770      	bx	lr
 8007ab6:	f803 1b01 	strb.w	r1, [r3], #1
 8007aba:	e7f9      	b.n	8007ab0 <memset+0x4>

08007abc <__libc_init_array>:
 8007abc:	b570      	push	{r4, r5, r6, lr}
 8007abe:	4d0d      	ldr	r5, [pc, #52]	@ (8007af4 <__libc_init_array+0x38>)
 8007ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8007af8 <__libc_init_array+0x3c>)
 8007ac2:	1b64      	subs	r4, r4, r5
 8007ac4:	10a4      	asrs	r4, r4, #2
 8007ac6:	2600      	movs	r6, #0
 8007ac8:	42a6      	cmp	r6, r4
 8007aca:	d109      	bne.n	8007ae0 <__libc_init_array+0x24>
 8007acc:	4d0b      	ldr	r5, [pc, #44]	@ (8007afc <__libc_init_array+0x40>)
 8007ace:	4c0c      	ldr	r4, [pc, #48]	@ (8007b00 <__libc_init_array+0x44>)
 8007ad0:	f000 f818 	bl	8007b04 <_init>
 8007ad4:	1b64      	subs	r4, r4, r5
 8007ad6:	10a4      	asrs	r4, r4, #2
 8007ad8:	2600      	movs	r6, #0
 8007ada:	42a6      	cmp	r6, r4
 8007adc:	d105      	bne.n	8007aea <__libc_init_array+0x2e>
 8007ade:	bd70      	pop	{r4, r5, r6, pc}
 8007ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ae4:	4798      	blx	r3
 8007ae6:	3601      	adds	r6, #1
 8007ae8:	e7ee      	b.n	8007ac8 <__libc_init_array+0xc>
 8007aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8007aee:	4798      	blx	r3
 8007af0:	3601      	adds	r6, #1
 8007af2:	e7f2      	b.n	8007ada <__libc_init_array+0x1e>
 8007af4:	08007b2c 	.word	0x08007b2c
 8007af8:	08007b2c 	.word	0x08007b2c
 8007afc:	08007b2c 	.word	0x08007b2c
 8007b00:	08007b30 	.word	0x08007b30

08007b04 <_init>:
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b06:	bf00      	nop
 8007b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b0a:	bc08      	pop	{r3}
 8007b0c:	469e      	mov	lr, r3
 8007b0e:	4770      	bx	lr

08007b10 <_fini>:
 8007b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b12:	bf00      	nop
 8007b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b16:	bc08      	pop	{r3}
 8007b18:	469e      	mov	lr, r3
 8007b1a:	4770      	bx	lr
