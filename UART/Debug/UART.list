
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052d0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005568  08005568  00006568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080055a0  080055a0  000065a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080055a8  080055a8  000065a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080055ac  080055ac  000065ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080055b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  24000010  080055c0  00007010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240000c4  080055c0  000070c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000f0c6  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001c68  00000000  00000000  00016104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000a10  00000000  00000000  00017d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000007c0  00000000  00000000  00018780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003545a  00000000  00000000  00018f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000e136  00000000  00000000  0004e39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155602  00000000  00000000  0005c4d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b1ad2  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002924  00000000  00000000  001b1b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001b443c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005550 	.word	0x08005550

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005550 	.word	0x08005550

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80005ce:	f000 f9b9 	bl	8000944 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fb4f 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f841 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f93b 	bl	8000854 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005de:	f000 f8ed 	bl	80007bc <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive(&huart1, receiveData, 2, HAL_MAX_DELAY);
 80005e2:	1d39      	adds	r1, r7, #4
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2202      	movs	r2, #2
 80005ea:	4819      	ldr	r0, [pc, #100]	@ (8000650 <main+0x88>)
 80005ec:	f003 fe30 	bl	8004250 <HAL_UART_Receive>
	  HAL_UART_Transmit(&huart1, receiveData, 2, 100);
 80005f0:	1d39      	adds	r1, r7, #4
 80005f2:	2364      	movs	r3, #100	@ 0x64
 80005f4:	2202      	movs	r2, #2
 80005f6:	4816      	ldr	r0, [pc, #88]	@ (8000650 <main+0x88>)
 80005f8:	f003 fd9c 	bl	8004134 <HAL_UART_Transmit>

	  if(receiveData[1] == '0')
 80005fc:	797b      	ldrb	r3, [r7, #5]
 80005fe:	2b30      	cmp	r3, #48	@ 0x30
 8000600:	d102      	bne.n	8000608 <main+0x40>
	  {
		  state = GPIO_PIN_SET;
 8000602:	2301      	movs	r3, #1
 8000604:	71fb      	strb	r3, [r7, #7]
 8000606:	e004      	b.n	8000612 <main+0x4a>
	  }
	  else if(receiveData[1] == '1')
 8000608:	797b      	ldrb	r3, [r7, #5]
 800060a:	2b31      	cmp	r3, #49	@ 0x31
 800060c:	d101      	bne.n	8000612 <main+0x4a>
	  {
		  state = GPIO_PIN_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]
	  }

	  if(receiveData[0] == 'R')
 8000612:	793b      	ldrb	r3, [r7, #4]
 8000614:	2b52      	cmp	r3, #82	@ 0x52
 8000616:	d106      	bne.n	8000626 <main+0x5e>
	  {
		  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, state);
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	461a      	mov	r2, r3
 800061c:	2101      	movs	r1, #1
 800061e:	480d      	ldr	r0, [pc, #52]	@ (8000654 <main+0x8c>)
 8000620:	f000 fed2 	bl	80013c8 <HAL_GPIO_WritePin>
 8000624:	e7dd      	b.n	80005e2 <main+0x1a>
	  }
	  else if(receiveData[0] == 'G')
 8000626:	793b      	ldrb	r3, [r7, #4]
 8000628:	2b47      	cmp	r3, #71	@ 0x47
 800062a:	d106      	bne.n	800063a <main+0x72>
	  {
		  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, state);
 800062c:	79fb      	ldrb	r3, [r7, #7]
 800062e:	461a      	mov	r2, r3
 8000630:	2102      	movs	r1, #2
 8000632:	4808      	ldr	r0, [pc, #32]	@ (8000654 <main+0x8c>)
 8000634:	f000 fec8 	bl	80013c8 <HAL_GPIO_WritePin>
 8000638:	e7d3      	b.n	80005e2 <main+0x1a>
	  }
	  else if(receiveData[0] == 'B')
 800063a:	793b      	ldrb	r3, [r7, #4]
 800063c:	2b42      	cmp	r3, #66	@ 0x42
 800063e:	d1d0      	bne.n	80005e2 <main+0x1a>
	  {
		  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, state);
 8000640:	79fb      	ldrb	r3, [r7, #7]
 8000642:	461a      	mov	r2, r3
 8000644:	2108      	movs	r1, #8
 8000646:	4804      	ldr	r0, [pc, #16]	@ (8000658 <main+0x90>)
 8000648:	f000 febe 	bl	80013c8 <HAL_GPIO_WritePin>
	  HAL_UART_Receive(&huart1, receiveData, 2, HAL_MAX_DELAY);
 800064c:	e7c9      	b.n	80005e2 <main+0x1a>
 800064e:	bf00      	nop
 8000650:	2400002c 	.word	0x2400002c
 8000654:	58020400 	.word	0x58020400
 8000658:	58020000 	.word	0x58020000

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09e      	sub	sp, #120	@ 0x78
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000666:	224c      	movs	r2, #76	@ 0x4c
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f004 ff44 	bl	80054f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	2220      	movs	r2, #32
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f004 ff3d 	bl	80054f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800067e:	2002      	movs	r0, #2
 8000680:	f000 febc 	bl	80013fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b49      	ldr	r3, [pc, #292]	@ (80007b0 <SystemClock_Config+0x154>)
 800068a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068c:	4a48      	ldr	r2, [pc, #288]	@ (80007b0 <SystemClock_Config+0x154>)
 800068e:	f023 0301 	bic.w	r3, r3, #1
 8000692:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000694:	4b46      	ldr	r3, [pc, #280]	@ (80007b0 <SystemClock_Config+0x154>)
 8000696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	4b45      	ldr	r3, [pc, #276]	@ (80007b4 <SystemClock_Config+0x158>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	4a44      	ldr	r2, [pc, #272]	@ (80007b4 <SystemClock_Config+0x158>)
 80006a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006a8:	6193      	str	r3, [r2, #24]
 80006aa:	4b42      	ldr	r3, [pc, #264]	@ (80007b4 <SystemClock_Config+0x158>)
 80006ac:	699b      	ldr	r3, [r3, #24]
 80006ae:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b6:	bf00      	nop
 80006b8:	4b3e      	ldr	r3, [pc, #248]	@ (80007b4 <SystemClock_Config+0x158>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c4:	d1f8      	bne.n	80006b8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006c6:	4b3c      	ldr	r3, [pc, #240]	@ (80007b8 <SystemClock_Config+0x15c>)
 80006c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006cc:	4a3a      	ldr	r2, [pc, #232]	@ (80007b8 <SystemClock_Config+0x15c>)
 80006ce:	f043 0302 	orr.w	r3, r3, #2
 80006d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80006d6:	4b38      	ldr	r3, [pc, #224]	@ (80007b8 <SystemClock_Config+0x15c>)
 80006d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80006dc:	f003 0302 	and.w	r3, r3, #2
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80006e4:	2300      	movs	r3, #0
 80006e6:	603b      	str	r3, [r7, #0]
 80006e8:	4b32      	ldr	r3, [pc, #200]	@ (80007b4 <SystemClock_Config+0x158>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	4a31      	ldr	r2, [pc, #196]	@ (80007b4 <SystemClock_Config+0x158>)
 80006ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006f2:	6193      	str	r3, [r2, #24]
 80006f4:	4b2f      	ldr	r3, [pc, #188]	@ (80007b4 <SystemClock_Config+0x158>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	4b2c      	ldr	r3, [pc, #176]	@ (80007b0 <SystemClock_Config+0x154>)
 8000700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000702:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemClock_Config+0x154>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800070a:	4b29      	ldr	r3, [pc, #164]	@ (80007b0 <SystemClock_Config+0x154>)
 800070c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	603b      	str	r3, [r7, #0]
 8000714:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000716:	bf00      	nop
 8000718:	4b26      	ldr	r3, [pc, #152]	@ (80007b4 <SystemClock_Config+0x158>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000720:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000724:	d1f8      	bne.n	8000718 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800072a:	2301      	movs	r3, #1
 800072c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072e:	2340      	movs	r3, #64	@ 0x40
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000736:	2300      	movs	r3, #0
 8000738:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800073a:	2304      	movs	r3, #4
 800073c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 800073e:	233c      	movs	r3, #60	@ 0x3c
 8000740:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800074a:	2302      	movs	r3, #2
 800074c:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800074e:	230c      	movs	r3, #12
 8000750:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000752:	2300      	movs	r3, #0
 8000754:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fe86 	bl	8001470 <HAL_RCC_OscConfig>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800076a:	f000 f917 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076e:	233f      	movs	r3, #63	@ 0x3f
 8000770:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000772:	2303      	movs	r3, #3
 8000774:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800077a:	2308      	movs	r3, #8
 800077c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800077e:	2340      	movs	r3, #64	@ 0x40
 8000780:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000782:	2340      	movs	r3, #64	@ 0x40
 8000784:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000786:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800078c:	2340      	movs	r3, #64	@ 0x40
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fac4 	bl	8001d24 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 80007a2:	f000 f8fb 	bl	800099c <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3778      	adds	r7, #120	@ 0x78
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800
 80007b8:	58024400 	.word	0x58024400

080007bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <MX_USART1_UART_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART1_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART1_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <MX_USART1_UART_Init+0x90>)
 8000806:	f003 fc45 	bl	8004094 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f8c4 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_USART1_UART_Init+0x90>)
 8000818:	f004 fda3 	bl	8005362 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f8bb 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <MX_USART1_UART_Init+0x90>)
 800082a:	f004 fdd8 	bl	80053de <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f8b2 	bl	800099c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_USART1_UART_Init+0x90>)
 800083a:	f004 fd59 	bl	80052f0 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f8aa 	bl	800099c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	2400002c 	.word	0x2400002c
 8000850:	40011000 	.word	0x40011000

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b33      	ldr	r3, [pc, #204]	@ (8000938 <MX_GPIO_Init+0xe4>)
 800086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000870:	4a31      	ldr	r2, [pc, #196]	@ (8000938 <MX_GPIO_Init+0xe4>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087a:	4b2f      	ldr	r3, [pc, #188]	@ (8000938 <MX_GPIO_Init+0xe4>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000888:	4b2b      	ldr	r3, [pc, #172]	@ (8000938 <MX_GPIO_Init+0xe4>)
 800088a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088e:	4a2a      	ldr	r2, [pc, #168]	@ (8000938 <MX_GPIO_Init+0xe4>)
 8000890:	f043 0301 	orr.w	r3, r3, #1
 8000894:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000898:	4b27      	ldr	r3, [pc, #156]	@ (8000938 <MX_GPIO_Init+0xe4>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ac:	4a22      	ldr	r2, [pc, #136]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008b6:	4b20      	ldr	r3, [pc, #128]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c0:	60bb      	str	r3, [r7, #8]
 80008c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ca:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008d4:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <MX_GPIO_Init+0xe4>)
 80008d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 80008e2:	2201      	movs	r2, #1
 80008e4:	2103      	movs	r1, #3
 80008e6:	4815      	ldr	r0, [pc, #84]	@ (800093c <MX_GPIO_Init+0xe8>)
 80008e8:	f000 fd6e 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2108      	movs	r1, #8
 80008f0:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_GPIO_Init+0xec>)
 80008f2:	f000 fd69 	bl	80013c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 80008f6:	2303      	movs	r3, #3
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	480b      	ldr	r0, [pc, #44]	@ (800093c <MX_GPIO_Init+0xe8>)
 800090e:	f000 fbab 	bl	8001068 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000912:	2308      	movs	r3, #8
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_GPIO_Init+0xec>)
 800092a:	f000 fb9d 	bl	8001068 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800092e:	bf00      	nop
 8000930:	3728      	adds	r7, #40	@ 0x28
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	58024400 	.word	0x58024400
 800093c:	58020400 	.word	0x58020400
 8000940:	58020000 	.word	0x58020000

08000944 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b084      	sub	sp, #16
 8000948:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800094a:	463b      	mov	r3, r7
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000956:	f000 fb0f 	bl	8000f78 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800095a:	2301      	movs	r3, #1
 800095c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800095e:	2300      	movs	r3, #0
 8000960:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000966:	231f      	movs	r3, #31
 8000968:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800096a:	2387      	movs	r3, #135	@ 0x87
 800096c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800096e:	2300      	movs	r3, #0
 8000970:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000972:	2300      	movs	r3, #0
 8000974:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000976:	2301      	movs	r3, #1
 8000978:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800097a:	2301      	movs	r3, #1
 800097c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800097e:	2300      	movs	r3, #0
 8000980:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000982:	2300      	movs	r3, #0
 8000984:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000986:	463b      	mov	r3, r7
 8000988:	4618      	mov	r0, r3
 800098a:	f000 fb2d 	bl	8000fe8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800098e:	2004      	movs	r0, #4
 8000990:	f000 fb0a 	bl	8000fa8 <HAL_MPU_Enable>

}
 8000994:	bf00      	nop
 8000996:	3710      	adds	r7, #16
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <HAL_MspInit+0x30>)
 80009b6:	f043 0302 	orr.w	r3, r3, #2
 80009ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <HAL_MspInit+0x30>)
 80009c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009c4:	f003 0302 	and.w	r3, r3, #2
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58024400 	.word	0x58024400

080009dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b0ba      	sub	sp, #232	@ 0xe8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009f4:	f107 0310 	add.w	r3, r7, #16
 80009f8:	22c0      	movs	r2, #192	@ 0xc0
 80009fa:	2100      	movs	r1, #0
 80009fc:	4618      	mov	r0, r3
 80009fe:	f004 fd7b 	bl	80054f8 <memset>
  if(huart->Instance==USART1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a27      	ldr	r2, [pc, #156]	@ (8000aa4 <HAL_UART_MspInit+0xc8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d146      	bne.n	8000a9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000a0c:	f04f 0201 	mov.w	r2, #1
 8000a10:	f04f 0300 	mov.w	r3, #0
 8000a14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1e:	f107 0310 	add.w	r3, r7, #16
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fd0a 	bl	800243c <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000a2e:	f7ff ffb5 	bl	800099c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a32:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a38:	4a1b      	ldr	r2, [pc, #108]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a3a:	f043 0310 	orr.w	r3, r3, #16
 8000a3e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000a42:	4b19      	ldr	r3, [pc, #100]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000a48:	f003 0310 	and.w	r3, r3, #16
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	4a14      	ldr	r2, [pc, #80]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a60:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0xcc>)
 8000a62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a66:	f003 0301 	and.w	r3, r3, #1
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000a6e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0xd0>)
 8000a96:	f000 fae7 	bl	8001068 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	37e8      	adds	r7, #232	@ 0xe8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	58024400 	.word	0x58024400
 8000aac:	58020000 	.word	0x58020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f927 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b14:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <SystemInit+0xe4>)
 8000b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1a:	4a36      	ldr	r2, [pc, #216]	@ (8000bf4 <SystemInit+0xe4>)
 8000b1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b24:	4b34      	ldr	r3, [pc, #208]	@ (8000bf8 <SystemInit+0xe8>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f003 030f 	and.w	r3, r3, #15
 8000b2c:	2b06      	cmp	r3, #6
 8000b2e:	d807      	bhi.n	8000b40 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b30:	4b31      	ldr	r3, [pc, #196]	@ (8000bf8 <SystemInit+0xe8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f023 030f 	bic.w	r3, r3, #15
 8000b38:	4a2f      	ldr	r2, [pc, #188]	@ (8000bf8 <SystemInit+0xe8>)
 8000b3a:	f043 0307 	orr.w	r3, r3, #7
 8000b3e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b40:	4b2e      	ldr	r3, [pc, #184]	@ (8000bfc <SystemInit+0xec>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a2d      	ldr	r2, [pc, #180]	@ (8000bfc <SystemInit+0xec>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <SystemInit+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b52:	4b2a      	ldr	r3, [pc, #168]	@ (8000bfc <SystemInit+0xec>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	4929      	ldr	r1, [pc, #164]	@ (8000bfc <SystemInit+0xec>)
 8000b58:	4b29      	ldr	r3, [pc, #164]	@ (8000c00 <SystemInit+0xf0>)
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b5e:	4b26      	ldr	r3, [pc, #152]	@ (8000bf8 <SystemInit+0xe8>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f003 0308 	and.w	r3, r3, #8
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d007      	beq.n	8000b7a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b6a:	4b23      	ldr	r3, [pc, #140]	@ (8000bf8 <SystemInit+0xe8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f023 030f 	bic.w	r3, r3, #15
 8000b72:	4a21      	ldr	r2, [pc, #132]	@ (8000bf8 <SystemInit+0xe8>)
 8000b74:	f043 0307 	orr.w	r3, r3, #7
 8000b78:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <SystemInit+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b80:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <SystemInit+0xec>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b86:	4b1d      	ldr	r3, [pc, #116]	@ (8000bfc <SystemInit+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <SystemInit+0xec>)
 8000b8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <SystemInit+0xf4>)
 8000b90:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <SystemInit+0xec>)
 8000b94:	4a1c      	ldr	r2, [pc, #112]	@ (8000c08 <SystemInit+0xf8>)
 8000b96:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b98:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <SystemInit+0xec>)
 8000b9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000c0c <SystemInit+0xfc>)
 8000b9c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	@ (8000bfc <SystemInit+0xec>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ba4:	4b15      	ldr	r3, [pc, #84]	@ (8000bfc <SystemInit+0xec>)
 8000ba6:	4a19      	ldr	r2, [pc, #100]	@ (8000c0c <SystemInit+0xfc>)
 8000ba8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000baa:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <SystemInit+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <SystemInit+0xec>)
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <SystemInit+0xfc>)
 8000bb4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <SystemInit+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <SystemInit+0xec>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a0e      	ldr	r2, [pc, #56]	@ (8000bfc <SystemInit+0xec>)
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bfc <SystemInit+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <SystemInit+0x100>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <SystemInit+0x104>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000bda:	d202      	bcs.n	8000be2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000bdc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c18 <SystemInit+0x108>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000be2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <SystemInit+0x10c>)
 8000be4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000be8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bea:	bf00      	nop
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr
 8000bf4:	e000ed00 	.word	0xe000ed00
 8000bf8:	52002000 	.word	0x52002000
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c04:	02020200 	.word	0x02020200
 8000c08:	01ff0000 	.word	0x01ff0000
 8000c0c:	01010280 	.word	0x01010280
 8000c10:	5c001000 	.word	0x5c001000
 8000c14:	ffff0000 	.word	0xffff0000
 8000c18:	51008108 	.word	0x51008108
 8000c1c:	52004000 	.word	0x52004000

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c24:	f7ff ff74 	bl	8000b10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	@ (8000c5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	@ (8000c60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	@ (8000c6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f004 fc5b 	bl	8005508 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fcb9 	bl	80005c8 <main>
  bx  lr
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c5c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c60:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000c64:	080055b0 	.word	0x080055b0
  ldr r2, =_sbss
 8000c68:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000c6c:	240000c4 	.word	0x240000c4

08000c70 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC3_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7a:	2003      	movs	r0, #3
 8000c7c:	f000 f94a 	bl	8000f14 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c80:	f001 fa06 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8000c84:	4602      	mov	r2, r0
 8000c86:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_Init+0x68>)
 8000c88:	699b      	ldr	r3, [r3, #24]
 8000c8a:	0a1b      	lsrs	r3, r3, #8
 8000c8c:	f003 030f 	and.w	r3, r3, #15
 8000c90:	4913      	ldr	r1, [pc, #76]	@ (8000ce0 <HAL_Init+0x6c>)
 8000c92:	5ccb      	ldrb	r3, [r1, r3]
 8000c94:	f003 031f 	and.w	r3, r3, #31
 8000c98:	fa22 f303 	lsr.w	r3, r2, r3
 8000c9c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_Init+0x68>)
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <HAL_Init+0x6c>)
 8000ca8:	5cd3      	ldrb	r3, [r2, r3]
 8000caa:	f003 031f 	and.w	r3, r3, #31
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce4 <HAL_Init+0x70>)
 8000cb6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_Init+0x74>)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cbe:	200f      	movs	r0, #15
 8000cc0:	f000 f814 	bl	8000cec <HAL_InitTick>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e002      	b.n	8000cd4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cce:	f7ff fe6b 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cd2:	2300      	movs	r3, #0
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	08005568 	.word	0x08005568
 8000ce4:	24000004 	.word	0x24000004
 8000ce8:	24000000 	.word	0x24000000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <HAL_InitTick+0x60>)
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e021      	b.n	8000d44 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d00:	4b13      	ldr	r3, [pc, #76]	@ (8000d50 <HAL_InitTick+0x64>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b11      	ldr	r3, [pc, #68]	@ (8000d4c <HAL_InitTick+0x60>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f921 	bl	8000f5e <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 f8f9 	bl	8000f2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	@ (8000d54 <HAL_InitTick+0x68>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2400000c 	.word	0x2400000c
 8000d50:	24000000 	.word	0x24000000
 8000d54:	24000008 	.word	0x24000008

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	@ (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	2400000c 	.word	0x2400000c
 8000d7c:	240000c0 	.word	0x240000c0

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	240000c0 	.word	0x240000c0

08000d98 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <HAL_GetREVID+0x14>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	0c1b      	lsrs	r3, r3, #16
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	5c001000 	.word	0x5c001000

08000db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dc6:	68ba      	ldr	r2, [r7, #8]
 8000dc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <__NVIC_SetPriorityGrouping+0x44>)
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dde:	4a04      	ldr	r2, [pc, #16]	@ (8000df0 <__NVIC_SetPriorityGrouping+0x40>)
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	60d3      	str	r3, [r2, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	e000ed00 	.word	0xe000ed00
 8000df4:	05fa0000 	.word	0x05fa0000

08000df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dfc:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_GetPriorityGrouping+0x18>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	0a1b      	lsrs	r3, r3, #8
 8000e02:	f003 0307 	and.w	r3, r3, #7
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e20:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	db0a      	blt.n	8000e3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	490c      	ldr	r1, [pc, #48]	@ (8000e60 <__NVIC_SetPriority+0x4c>)
 8000e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	b2d2      	uxtb	r2, r2
 8000e36:	440b      	add	r3, r1
 8000e38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e3c:	e00a      	b.n	8000e54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	4908      	ldr	r1, [pc, #32]	@ (8000e64 <__NVIC_SetPriority+0x50>)
 8000e44:	88fb      	ldrh	r3, [r7, #6]
 8000e46:	f003 030f 	and.w	r3, r3, #15
 8000e4a:	3b04      	subs	r3, #4
 8000e4c:	0112      	lsls	r2, r2, #4
 8000e4e:	b2d2      	uxtb	r2, r2
 8000e50:	440b      	add	r3, r1
 8000e52:	761a      	strb	r2, [r3, #24]
}
 8000e54:	bf00      	nop
 8000e56:	370c      	adds	r7, #12
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr
 8000e60:	e000e100 	.word	0xe000e100
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	f1c3 0307 	rsb	r3, r3, #7
 8000e82:	2b04      	cmp	r3, #4
 8000e84:	bf28      	it	cs
 8000e86:	2304      	movcs	r3, #4
 8000e88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3304      	adds	r3, #4
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d902      	bls.n	8000e98 <NVIC_EncodePriority+0x30>
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	3b03      	subs	r3, #3
 8000e96:	e000      	b.n	8000e9a <NVIC_EncodePriority+0x32>
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43da      	mvns	r2, r3
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	401a      	ands	r2, r3
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eba:	43d9      	mvns	r1, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec0:	4313      	orrs	r3, r2
         );
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3724      	adds	r7, #36	@ 0x24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
	...

08000ed0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ee0:	d301      	bcc.n	8000ee6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e00f      	b.n	8000f06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8000f10 <SysTick_Config+0x40>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	3b01      	subs	r3, #1
 8000eec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000eee:	210f      	movs	r1, #15
 8000ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef4:	f7ff ff8e 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ef8:	4b05      	ldr	r3, [pc, #20]	@ (8000f10 <SysTick_Config+0x40>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000efe:	4b04      	ldr	r3, [pc, #16]	@ (8000f10 <SysTick_Config+0x40>)
 8000f00:	2207      	movs	r2, #7
 8000f02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f04:	2300      	movs	r3, #0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	e000e010 	.word	0xe000e010

08000f14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ff47 	bl	8000db0 <__NVIC_SetPriorityGrouping>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b086      	sub	sp, #24
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	60b9      	str	r1, [r7, #8]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f38:	f7ff ff5e 	bl	8000df8 <__NVIC_GetPriorityGrouping>
 8000f3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6978      	ldr	r0, [r7, #20]
 8000f44:	f7ff ff90 	bl	8000e68 <NVIC_EncodePriority>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f4e:	4611      	mov	r1, r2
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff5f 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f56:	bf00      	nop
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b082      	sub	sp, #8
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ffb2 	bl	8000ed0 <SysTick_Config>
 8000f6c:	4603      	mov	r3, r0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f7c:	f3bf 8f5f 	dmb	sy
}
 8000f80:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f82:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <HAL_MPU_Disable+0x28>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f86:	4a06      	ldr	r2, [pc, #24]	@ (8000fa0 <HAL_MPU_Disable+0x28>)
 8000f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f8c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f8e:	4b05      	ldr	r3, [pc, #20]	@ (8000fa4 <HAL_MPU_Disable+0x2c>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	e000ed00 	.word	0xe000ed00
 8000fa4:	e000ed90 	.word	0xe000ed90

08000fa8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <HAL_MPU_Enable+0x38>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000fba:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe4 <HAL_MPU_Enable+0x3c>)
 8000fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fbe:	4a09      	ldr	r2, [pc, #36]	@ (8000fe4 <HAL_MPU_Enable+0x3c>)
 8000fc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fc4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000fc6:	f3bf 8f4f 	dsb	sy
}
 8000fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fcc:	f3bf 8f6f 	isb	sy
}
 8000fd0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed90 	.word	0xe000ed90
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	785a      	ldrb	r2, [r3, #1]
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <HAL_MPU_ConfigRegion+0x7c>)
 8000ff6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000ff8:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <HAL_MPU_ConfigRegion+0x7c>)
 8000ffa:	691b      	ldr	r3, [r3, #16]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	@ (8001064 <HAL_MPU_ConfigRegion+0x7c>)
 8000ffe:	f023 0301 	bic.w	r3, r3, #1
 8001002:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001004:	4a17      	ldr	r2, [pc, #92]	@ (8001064 <HAL_MPU_ConfigRegion+0x7c>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	7b1b      	ldrb	r3, [r3, #12]
 8001010:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7adb      	ldrb	r3, [r3, #11]
 8001016:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7a9b      	ldrb	r3, [r3, #10]
 800101e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001020:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7b5b      	ldrb	r3, [r3, #13]
 8001026:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001028:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	7b9b      	ldrb	r3, [r3, #14]
 800102e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001030:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7bdb      	ldrb	r3, [r3, #15]
 8001036:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001038:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	7a5b      	ldrb	r3, [r3, #9]
 800103e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001040:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7a1b      	ldrb	r3, [r3, #8]
 8001046:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001048:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	7812      	ldrb	r2, [r2, #0]
 800104e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001052:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001054:	6113      	str	r3, [r2, #16]
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed90 	.word	0xe000ed90

08001068 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001068:	b480      	push	{r7}
 800106a:	b089      	sub	sp, #36	@ 0x24
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001072:	2300      	movs	r3, #0
 8001074:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001076:	4b89      	ldr	r3, [pc, #548]	@ (800129c <HAL_GPIO_Init+0x234>)
 8001078:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800107a:	e194      	b.n	80013a6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	2101      	movs	r1, #1
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	fa01 f303 	lsl.w	r3, r1, r3
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	2b00      	cmp	r3, #0
 8001090:	f000 8186 	beq.w	80013a0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f003 0303 	and.w	r3, r3, #3
 800109c:	2b01      	cmp	r3, #1
 800109e:	d005      	beq.n	80010ac <HAL_GPIO_Init+0x44>
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0303 	and.w	r3, r3, #3
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d130      	bne.n	800110e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	2203      	movs	r2, #3
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010e2:	2201      	movs	r2, #1
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	091b      	lsrs	r3, r3, #4
 80010f8:	f003 0201 	and.w	r2, r3, #1
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	2b03      	cmp	r3, #3
 8001118:	d017      	beq.n	800114a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	2203      	movs	r2, #3
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43db      	mvns	r3, r3
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	4013      	ands	r3, r2
 8001130:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	fa02 f303 	lsl.w	r3, r2, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	69ba      	ldr	r2, [r7, #24]
 8001148:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	2b02      	cmp	r3, #2
 8001154:	d123      	bne.n	800119e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	220f      	movs	r2, #15
 800116e:	fa02 f303 	lsl.w	r3, r2, r3
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	691a      	ldr	r2, [r3, #16]
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	f003 0307 	and.w	r3, r3, #7
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	08da      	lsrs	r2, r3, #3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	3208      	adds	r2, #8
 8001198:	69b9      	ldr	r1, [r7, #24]
 800119a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	2203      	movs	r2, #3
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43db      	mvns	r3, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4013      	ands	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	685b      	ldr	r3, [r3, #4]
 80011ba:	f003 0203 	and.w	r2, r3, #3
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80e0 	beq.w	80013a0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e0:	4b2f      	ldr	r3, [pc, #188]	@ (80012a0 <HAL_GPIO_Init+0x238>)
 80011e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011e6:	4a2e      	ldr	r2, [pc, #184]	@ (80012a0 <HAL_GPIO_Init+0x238>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011f0:	4b2b      	ldr	r3, [pc, #172]	@ (80012a0 <HAL_GPIO_Init+0x238>)
 80011f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	60fb      	str	r3, [r7, #12]
 80011fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011fe:	4a29      	ldr	r2, [pc, #164]	@ (80012a4 <HAL_GPIO_Init+0x23c>)
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	089b      	lsrs	r3, r3, #2
 8001204:	3302      	adds	r3, #2
 8001206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	f003 0303 	and.w	r3, r3, #3
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	220f      	movs	r2, #15
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a20      	ldr	r2, [pc, #128]	@ (80012a8 <HAL_GPIO_Init+0x240>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d052      	beq.n	80012d0 <HAL_GPIO_Init+0x268>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a1f      	ldr	r2, [pc, #124]	@ (80012ac <HAL_GPIO_Init+0x244>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d031      	beq.n	8001296 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <HAL_GPIO_Init+0x248>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x22a>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a1d      	ldr	r2, [pc, #116]	@ (80012b4 <HAL_GPIO_Init+0x24c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x226>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1c      	ldr	r2, [pc, #112]	@ (80012b8 <HAL_GPIO_Init+0x250>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x222>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a1b      	ldr	r2, [pc, #108]	@ (80012bc <HAL_GPIO_Init+0x254>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21e>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <HAL_GPIO_Init+0x258>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x21a>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a19      	ldr	r2, [pc, #100]	@ (80012c4 <HAL_GPIO_Init+0x25c>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x216>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a18      	ldr	r2, [pc, #96]	@ (80012c8 <HAL_GPIO_Init+0x260>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x212>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a17      	ldr	r2, [pc, #92]	@ (80012cc <HAL_GPIO_Init+0x264>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20e>
 8001272:	2309      	movs	r3, #9
 8001274:	e02d      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001276:	230a      	movs	r3, #10
 8001278:	e02b      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800127a:	2308      	movs	r3, #8
 800127c:	e029      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800127e:	2307      	movs	r3, #7
 8001280:	e027      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001282:	2306      	movs	r3, #6
 8001284:	e025      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001286:	2305      	movs	r3, #5
 8001288:	e023      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800128a:	2304      	movs	r3, #4
 800128c:	e021      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800128e:	2303      	movs	r3, #3
 8001290:	e01f      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001292:	2302      	movs	r3, #2
 8001294:	e01d      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 8001296:	2301      	movs	r3, #1
 8001298:	e01b      	b.n	80012d2 <HAL_GPIO_Init+0x26a>
 800129a:	bf00      	nop
 800129c:	58000080 	.word	0x58000080
 80012a0:	58024400 	.word	0x58024400
 80012a4:	58000400 	.word	0x58000400
 80012a8:	58020000 	.word	0x58020000
 80012ac:	58020400 	.word	0x58020400
 80012b0:	58020800 	.word	0x58020800
 80012b4:	58020c00 	.word	0x58020c00
 80012b8:	58021000 	.word	0x58021000
 80012bc:	58021400 	.word	0x58021400
 80012c0:	58021800 	.word	0x58021800
 80012c4:	58021c00 	.word	0x58021c00
 80012c8:	58022000 	.word	0x58022000
 80012cc:	58022400 	.word	0x58022400
 80012d0:	2300      	movs	r3, #0
 80012d2:	69fa      	ldr	r2, [r7, #28]
 80012d4:	f002 0203 	and.w	r2, r2, #3
 80012d8:	0092      	lsls	r2, r2, #2
 80012da:	4093      	lsls	r3, r2
 80012dc:	69ba      	ldr	r2, [r7, #24]
 80012de:	4313      	orrs	r3, r2
 80012e0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012e2:	4938      	ldr	r1, [pc, #224]	@ (80013c4 <HAL_GPIO_Init+0x35c>)
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	3302      	adds	r3, #2
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001316:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800131e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	43db      	mvns	r3, r3
 800132a:	69ba      	ldr	r2, [r7, #24]
 800132c:	4013      	ands	r3, r2
 800132e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001344:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	43db      	mvns	r3, r3
 8001356:	69ba      	ldr	r2, [r7, #24]
 8001358:	4013      	ands	r3, r2
 800135a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4313      	orrs	r3, r2
 8001398:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	3301      	adds	r3, #1
 80013a4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f47f ae63 	bne.w	800107c <HAL_GPIO_Init+0x14>
  }
}
 80013b6:	bf00      	nop
 80013b8:	bf00      	nop
 80013ba:	3724      	adds	r7, #36	@ 0x24
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	58000400 	.word	0x58000400

080013c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	807b      	strh	r3, [r7, #2]
 80013d4:	4613      	mov	r3, r2
 80013d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013d8:	787b      	ldrb	r3, [r7, #1]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013de:	887a      	ldrh	r2, [r7, #2]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013e4:	e003      	b.n	80013ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013e6:	887b      	ldrh	r3, [r7, #2]
 80013e8:	041a      	lsls	r2, r3, #16
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001404:	4b19      	ldr	r3, [pc, #100]	@ (800146c <HAL_PWREx_ConfigSupply+0x70>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b04      	cmp	r3, #4
 800140e:	d00a      	beq.n	8001426 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001410:	4b16      	ldr	r3, [pc, #88]	@ (800146c <HAL_PWREx_ConfigSupply+0x70>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 0307 	and.w	r3, r3, #7
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	d001      	beq.n	8001422 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e01f      	b.n	8001462 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	e01d      	b.n	8001462 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <HAL_PWREx_ConfigSupply+0x70>)
 8001428:	68db      	ldr	r3, [r3, #12]
 800142a:	f023 0207 	bic.w	r2, r3, #7
 800142e:	490f      	ldr	r1, [pc, #60]	@ (800146c <HAL_PWREx_ConfigSupply+0x70>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4313      	orrs	r3, r2
 8001434:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001436:	f7ff fca3 	bl	8000d80 <HAL_GetTick>
 800143a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800143c:	e009      	b.n	8001452 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800143e:	f7ff fc9f 	bl	8000d80 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800144c:	d901      	bls.n	8001452 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e007      	b.n	8001462 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_PWREx_ConfigSupply+0x70>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800145a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800145e:	d1ee      	bne.n	800143e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	58024800 	.word	0x58024800

08001470 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	@ 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d102      	bne.n	8001484 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	f000 bc48 	b.w	8001d14 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0301 	and.w	r3, r3, #1
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 8088 	beq.w	80015a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001492:	4b99      	ldr	r3, [pc, #612]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001494:	691b      	ldr	r3, [r3, #16]
 8001496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800149c:	4b96      	ldr	r3, [pc, #600]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800149e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014a4:	2b10      	cmp	r3, #16
 80014a6:	d007      	beq.n	80014b8 <HAL_RCC_OscConfig+0x48>
 80014a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014aa:	2b18      	cmp	r3, #24
 80014ac:	d111      	bne.n	80014d2 <HAL_RCC_OscConfig+0x62>
 80014ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014b0:	f003 0303 	and.w	r3, r3, #3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b8f      	ldr	r3, [pc, #572]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d06d      	beq.n	80015a0 <HAL_RCC_OscConfig+0x130>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d169      	bne.n	80015a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	f000 bc21 	b.w	8001d14 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x7a>
 80014dc:	4b86      	ldr	r3, [pc, #536]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a85      	ldr	r2, [pc, #532]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80014e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e02e      	b.n	8001548 <HAL_RCC_OscConfig+0xd8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x9c>
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a80      	ldr	r2, [pc, #512]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80014f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b7e      	ldr	r3, [pc, #504]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a7d      	ldr	r2, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001504:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e01d      	b.n	8001548 <HAL_RCC_OscConfig+0xd8>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001514:	d10c      	bne.n	8001530 <HAL_RCC_OscConfig+0xc0>
 8001516:	4b78      	ldr	r3, [pc, #480]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a77      	ldr	r2, [pc, #476]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	4b75      	ldr	r3, [pc, #468]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a74      	ldr	r2, [pc, #464]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	e00b      	b.n	8001548 <HAL_RCC_OscConfig+0xd8>
 8001530:	4b71      	ldr	r3, [pc, #452]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a70      	ldr	r2, [pc, #448]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b6e      	ldr	r3, [pc, #440]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a6d      	ldr	r2, [pc, #436]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001546:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d013      	beq.n	8001578 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001550:	f7ff fc16 	bl	8000d80 <HAL_GetTick>
 8001554:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001558:	f7ff fc12 	bl	8000d80 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b64      	cmp	r3, #100	@ 0x64
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e3d4      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800156a:	4b63      	ldr	r3, [pc, #396]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0xe8>
 8001576:	e014      	b.n	80015a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001578:	f7ff fc02 	bl	8000d80 <HAL_GetTick>
 800157c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800157e:	e008      	b.n	8001592 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001580:	f7ff fbfe 	bl	8000d80 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b64      	cmp	r3, #100	@ 0x64
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e3c0      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001592:	4b59      	ldr	r3, [pc, #356]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d1f0      	bne.n	8001580 <HAL_RCC_OscConfig+0x110>
 800159e:	e000      	b.n	80015a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80ca 	beq.w	8001744 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015b0:	4b51      	ldr	r3, [pc, #324]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015ba:	4b4f      	ldr	r3, [pc, #316]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80015bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x166>
 80015c6:	6a3b      	ldr	r3, [r7, #32]
 80015c8:	2b18      	cmp	r3, #24
 80015ca:	d156      	bne.n	800167a <HAL_RCC_OscConfig+0x20a>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d151      	bne.n	800167a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d6:	4b48      	ldr	r3, [pc, #288]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x17e>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e392      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015ee:	4b42      	ldr	r3, [pc, #264]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f023 0219 	bic.w	r2, r3, #25
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	493f      	ldr	r1, [pc, #252]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80015fc:	4313      	orrs	r3, r2
 80015fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001600:	f7ff fbbe 	bl	8000d80 <HAL_GetTick>
 8001604:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001606:	e008      	b.n	800161a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001608:	f7ff fbba 	bl	8000d80 <HAL_GetTick>
 800160c:	4602      	mov	r2, r0
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	1ad3      	subs	r3, r2, r3
 8001612:	2b02      	cmp	r3, #2
 8001614:	d901      	bls.n	800161a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001616:	2303      	movs	r3, #3
 8001618:	e37c      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800161a:	4b37      	ldr	r3, [pc, #220]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0304 	and.w	r3, r3, #4
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0f0      	beq.n	8001608 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001626:	f7ff fbb7 	bl	8000d98 <HAL_GetREVID>
 800162a:	4603      	mov	r3, r0
 800162c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001630:	4293      	cmp	r3, r2
 8001632:	d817      	bhi.n	8001664 <HAL_RCC_OscConfig+0x1f4>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	691b      	ldr	r3, [r3, #16]
 8001638:	2b40      	cmp	r3, #64	@ 0x40
 800163a:	d108      	bne.n	800164e <HAL_RCC_OscConfig+0x1de>
 800163c:	4b2e      	ldr	r3, [pc, #184]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001644:	4a2c      	ldr	r2, [pc, #176]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800164a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800164c:	e07a      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b2a      	ldr	r3, [pc, #168]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	031b      	lsls	r3, r3, #12
 800165c:	4926      	ldr	r1, [pc, #152]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 800165e:	4313      	orrs	r3, r2
 8001660:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001662:	e06f      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001664:	4b24      	ldr	r3, [pc, #144]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
 8001670:	061b      	lsls	r3, r3, #24
 8001672:	4921      	ldr	r1, [pc, #132]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001674:	4313      	orrs	r3, r2
 8001676:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001678:	e064      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d047      	beq.n	8001712 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001682:	4b1d      	ldr	r3, [pc, #116]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f023 0219 	bic.w	r2, r3, #25
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	68db      	ldr	r3, [r3, #12]
 800168e:	491a      	ldr	r1, [pc, #104]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 8001690:	4313      	orrs	r3, r2
 8001692:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001694:	f7ff fb74 	bl	8000d80 <HAL_GetTick>
 8001698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800169c:	f7ff fb70 	bl	8000d80 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e332      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ae:	4b12      	ldr	r3, [pc, #72]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0304 	and.w	r3, r3, #4
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ba:	f7ff fb6d 	bl	8000d98 <HAL_GetREVID>
 80016be:	4603      	mov	r3, r0
 80016c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d819      	bhi.n	80016fc <HAL_RCC_OscConfig+0x28c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	2b40      	cmp	r3, #64	@ 0x40
 80016ce:	d108      	bne.n	80016e2 <HAL_RCC_OscConfig+0x272>
 80016d0:	4b09      	ldr	r3, [pc, #36]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016d8:	4a07      	ldr	r2, [pc, #28]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80016da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016de:	6053      	str	r3, [r2, #4]
 80016e0:	e030      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	031b      	lsls	r3, r3, #12
 80016f0:	4901      	ldr	r1, [pc, #4]	@ (80016f8 <HAL_RCC_OscConfig+0x288>)
 80016f2:	4313      	orrs	r3, r2
 80016f4:	604b      	str	r3, [r1, #4]
 80016f6:	e025      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
 80016f8:	58024400 	.word	0x58024400
 80016fc:	4b9a      	ldr	r3, [pc, #616]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	061b      	lsls	r3, r3, #24
 800170a:	4997      	ldr	r1, [pc, #604]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800170c:	4313      	orrs	r3, r2
 800170e:	604b      	str	r3, [r1, #4]
 8001710:	e018      	b.n	8001744 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001712:	4b95      	ldr	r3, [pc, #596]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a94      	ldr	r2, [pc, #592]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800171e:	f7ff fb2f 	bl	8000d80 <HAL_GetTick>
 8001722:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001724:	e008      	b.n	8001738 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001726:	f7ff fb2b 	bl	8000d80 <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d901      	bls.n	8001738 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e2ed      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001738:	4b8b      	ldr	r3, [pc, #556]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d1f0      	bne.n	8001726 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0310 	and.w	r3, r3, #16
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a9 	beq.w	80018a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001752:	4b85      	ldr	r3, [pc, #532]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800175a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800175c:	4b82      	ldr	r3, [pc, #520]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800175e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001760:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	2b08      	cmp	r3, #8
 8001766:	d007      	beq.n	8001778 <HAL_RCC_OscConfig+0x308>
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2b18      	cmp	r3, #24
 800176c:	d13a      	bne.n	80017e4 <HAL_RCC_OscConfig+0x374>
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d135      	bne.n	80017e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001778:	4b7b      	ldr	r3, [pc, #492]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_OscConfig+0x320>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	2b80      	cmp	r3, #128	@ 0x80
 800178a:	d001      	beq.n	8001790 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e2c1      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001790:	f7ff fb02 	bl	8000d98 <HAL_GetREVID>
 8001794:	4603      	mov	r3, r0
 8001796:	f241 0203 	movw	r2, #4099	@ 0x1003
 800179a:	4293      	cmp	r3, r2
 800179c:	d817      	bhi.n	80017ce <HAL_RCC_OscConfig+0x35e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	2b20      	cmp	r3, #32
 80017a4:	d108      	bne.n	80017b8 <HAL_RCC_OscConfig+0x348>
 80017a6:	4b70      	ldr	r3, [pc, #448]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017ae:	4a6e      	ldr	r2, [pc, #440]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b6:	e075      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a1b      	ldr	r3, [r3, #32]
 80017c4:	069b      	lsls	r3, r3, #26
 80017c6:	4968      	ldr	r1, [pc, #416]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017cc:	e06a      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017ce:	4b66      	ldr	r3, [pc, #408]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017d0:	68db      	ldr	r3, [r3, #12]
 80017d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	4962      	ldr	r1, [pc, #392]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017e2:	e05f      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d042      	beq.n	8001872 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80017ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5d      	ldr	r2, [pc, #372]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f8:	f7ff fac2 	bl	8000d80 <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001800:	f7ff fabe 	bl	8000d80 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e280      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001812:	4b55      	ldr	r3, [pc, #340]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800181e:	f7ff fabb 	bl	8000d98 <HAL_GetREVID>
 8001822:	4603      	mov	r3, r0
 8001824:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001828:	4293      	cmp	r3, r2
 800182a:	d817      	bhi.n	800185c <HAL_RCC_OscConfig+0x3ec>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a1b      	ldr	r3, [r3, #32]
 8001830:	2b20      	cmp	r3, #32
 8001832:	d108      	bne.n	8001846 <HAL_RCC_OscConfig+0x3d6>
 8001834:	4b4c      	ldr	r3, [pc, #304]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800183c:	4a4a      	ldr	r2, [pc, #296]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800183e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001842:	6053      	str	r3, [r2, #4]
 8001844:	e02e      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
 8001846:	4b48      	ldr	r3, [pc, #288]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	069b      	lsls	r3, r3, #26
 8001854:	4944      	ldr	r1, [pc, #272]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
 800185a:	e023      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
 800185c:	4b42      	ldr	r3, [pc, #264]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	061b      	lsls	r3, r3, #24
 800186a:	493f      	ldr	r1, [pc, #252]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800186c:	4313      	orrs	r3, r2
 800186e:	60cb      	str	r3, [r1, #12]
 8001870:	e018      	b.n	80018a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001872:	4b3d      	ldr	r3, [pc, #244]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a3c      	ldr	r2, [pc, #240]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001878:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800187c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800187e:	f7ff fa7f 	bl	8000d80 <HAL_GetTick>
 8001882:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001886:	f7ff fa7b 	bl	8000d80 <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b02      	cmp	r3, #2
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e23d      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f0      	bne.n	8001886 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d036      	beq.n	800191e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	695b      	ldr	r3, [r3, #20]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d019      	beq.n	80018ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff fa5c 	bl	8000d80 <HAL_GetTick>
 80018c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018cc:	f7ff fa58 	bl	8000d80 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e21a      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80018de:	4b22      	ldr	r3, [pc, #136]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x45c>
 80018ea:	e018      	b.n	800191e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80018ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f8:	f7ff fa42 	bl	8000d80 <HAL_GetTick>
 80018fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001900:	f7ff fa3e 	bl	8000d80 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e200      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001912:	4b15      	ldr	r3, [pc, #84]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0320 	and.w	r3, r3, #32
 8001926:	2b00      	cmp	r3, #0
 8001928:	d039      	beq.n	800199e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01c      	beq.n	800196c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0c      	ldr	r2, [pc, #48]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001938:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800193c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800193e:	f7ff fa1f 	bl	8000d80 <HAL_GetTick>
 8001942:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001946:	f7ff fa1b 	bl	8000d80 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e1dd      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001958:	4b03      	ldr	r3, [pc, #12]	@ (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f0      	beq.n	8001946 <HAL_RCC_OscConfig+0x4d6>
 8001964:	e01b      	b.n	800199e <HAL_RCC_OscConfig+0x52e>
 8001966:	bf00      	nop
 8001968:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800196c:	4b9b      	ldr	r3, [pc, #620]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a9a      	ldr	r2, [pc, #616]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001976:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001978:	f7ff fa02 	bl	8000d80 <HAL_GetTick>
 800197c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001980:	f7ff f9fe 	bl	8000d80 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b02      	cmp	r3, #2
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1c0      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001992:	4b92      	ldr	r3, [pc, #584]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0304 	and.w	r3, r3, #4
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 8081 	beq.w	8001aae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019ac:	4b8c      	ldr	r3, [pc, #560]	@ (8001be0 <HAL_RCC_OscConfig+0x770>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8b      	ldr	r2, [pc, #556]	@ (8001be0 <HAL_RCC_OscConfig+0x770>)
 80019b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019b8:	f7ff f9e2 	bl	8000d80 <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019c0:	f7ff f9de 	bl	8000d80 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e1a0      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019d2:	4b83      	ldr	r3, [pc, #524]	@ (8001be0 <HAL_RCC_OscConfig+0x770>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d106      	bne.n	80019f4 <HAL_RCC_OscConfig+0x584>
 80019e6:	4b7d      	ldr	r3, [pc, #500]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 80019e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ea:	4a7c      	ldr	r2, [pc, #496]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80019f2:	e02d      	b.n	8001a50 <HAL_RCC_OscConfig+0x5e0>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10c      	bne.n	8001a16 <HAL_RCC_OscConfig+0x5a6>
 80019fc:	4b77      	ldr	r3, [pc, #476]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 80019fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a00:	4a76      	ldr	r2, [pc, #472]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a02:	f023 0301 	bic.w	r3, r3, #1
 8001a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a08:	4b74      	ldr	r3, [pc, #464]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a0c:	4a73      	ldr	r2, [pc, #460]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a0e:	f023 0304 	bic.w	r3, r3, #4
 8001a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x5e0>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d10c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x5c8>
 8001a1e:	4b6f      	ldr	r3, [pc, #444]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a22:	4a6e      	ldr	r2, [pc, #440]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2a:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a36:	e00b      	b.n	8001a50 <HAL_RCC_OscConfig+0x5e0>
 8001a38:	4b68      	ldr	r3, [pc, #416]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a67      	ldr	r2, [pc, #412]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	4b65      	ldr	r3, [pc, #404]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a64      	ldr	r2, [pc, #400]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d015      	beq.n	8001a84 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a58:	f7ff f992 	bl	8000d80 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a5e:	e00a      	b.n	8001a76 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a60:	f7ff f98e 	bl	8000d80 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e14e      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a76:	4b59      	ldr	r3, [pc, #356]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0ee      	beq.n	8001a60 <HAL_RCC_OscConfig+0x5f0>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a84:	f7ff f97c 	bl	8000d80 <HAL_GetTick>
 8001a88:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001a8a:	e00a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f978 	bl	8000d80 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d901      	bls.n	8001aa2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e138      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d1ee      	bne.n	8001a8c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	f000 812d 	beq.w	8001d12 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ab8:	4b48      	ldr	r3, [pc, #288]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ac0:	2b18      	cmp	r3, #24
 8001ac2:	f000 80bd 	beq.w	8001c40 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	f040 809e 	bne.w	8001c0c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b42      	ldr	r3, [pc, #264]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a41      	ldr	r2, [pc, #260]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001ad6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f950 	bl	8000d80 <HAL_GetTick>
 8001ae0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f94c 	bl	8000d80 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e10e      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001af6:	4b39      	ldr	r3, [pc, #228]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f0      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b02:	4b36      	ldr	r3, [pc, #216]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b04:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b06:	4b37      	ldr	r3, [pc, #220]	@ (8001be4 <HAL_RCC_OscConfig+0x774>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b12:	0112      	lsls	r2, r2, #4
 8001b14:	430a      	orrs	r2, r1
 8001b16:	4931      	ldr	r1, [pc, #196]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b20:	3b01      	subs	r3, #1
 8001b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	025b      	lsls	r3, r3, #9
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	431a      	orrs	r2, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b36:	3b01      	subs	r3, #1
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b44:	3b01      	subs	r3, #1
 8001b46:	061b      	lsls	r3, r3, #24
 8001b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b4c:	4923      	ldr	r1, [pc, #140]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b52:	4b22      	ldr	r3, [pc, #136]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b56:	4a21      	ldr	r2, [pc, #132]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b58:	f023 0301 	bic.w	r3, r3, #1
 8001b5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b62:	4b21      	ldr	r3, [pc, #132]	@ (8001be8 <HAL_RCC_OscConfig+0x778>)
 8001b64:	4013      	ands	r3, r2
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b6a:	00d2      	lsls	r2, r2, #3
 8001b6c:	491b      	ldr	r1, [pc, #108]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001b72:	4b1a      	ldr	r3, [pc, #104]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b76:	f023 020c 	bic.w	r2, r3, #12
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4917      	ldr	r1, [pc, #92]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001b84:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	f023 0202 	bic.w	r2, r3, #2
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b90:	4912      	ldr	r1, [pc, #72]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001ba4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bae:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bba:	4b08      	ldr	r3, [pc, #32]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbe:	4a07      	ldr	r2, [pc, #28]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bc6:	4b05      	ldr	r3, [pc, #20]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a04      	ldr	r2, [pc, #16]	@ (8001bdc <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff f8d5 	bl	8000d80 <HAL_GetTick>
 8001bd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bd8:	e011      	b.n	8001bfe <HAL_RCC_OscConfig+0x78e>
 8001bda:	bf00      	nop
 8001bdc:	58024400 	.word	0x58024400
 8001be0:	58024800 	.word	0x58024800
 8001be4:	fffffc0c 	.word	0xfffffc0c
 8001be8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f8c8 	bl	8000d80 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e08a      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bfe:	4b47      	ldr	r3, [pc, #284]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0x77c>
 8001c0a:	e082      	b.n	8001d12 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0c:	4b43      	ldr	r3, [pc, #268]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a42      	ldr	r2, [pc, #264]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff f8b2 	bl	8000d80 <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c20:	f7ff f8ae 	bl	8000d80 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e070      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c32:	4b3a      	ldr	r3, [pc, #232]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x7b0>
 8001c3e:	e068      	b.n	8001d12 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c40:	4b36      	ldr	r3, [pc, #216]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c44:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c46:	4b35      	ldr	r3, [pc, #212]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d031      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	f003 0203 	and.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d12a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d122      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d11a      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	0a5b      	lsrs	r3, r3, #9
 8001c86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c8e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d111      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	0c1b      	lsrs	r3, r3, #16
 8001c98:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	d108      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	0e1b      	lsrs	r3, r3, #24
 8001caa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cb2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e02b      	b.n	8001d14 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cbc:	4b17      	ldr	r3, [pc, #92]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001cc6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d01f      	beq.n	8001d12 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001cd2:	4b12      	ldr	r3, [pc, #72]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd6:	4a11      	ldr	r2, [pc, #68]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001cd8:	f023 0301 	bic.w	r3, r3, #1
 8001cdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cde:	f7ff f84f 	bl	8000d80 <HAL_GetTick>
 8001ce2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001ce4:	bf00      	nop
 8001ce6:	f7ff f84b 	bl	8000d80 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d0f9      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001cf4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cf6:	4b0a      	ldr	r3, [pc, #40]	@ (8001d20 <HAL_RCC_OscConfig+0x8b0>)
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001cfe:	00d2      	lsls	r2, r2, #3
 8001d00:	4906      	ldr	r1, [pc, #24]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001d02:	4313      	orrs	r3, r2
 8001d04:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d06:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d0a:	4a04      	ldr	r2, [pc, #16]	@ (8001d1c <HAL_RCC_OscConfig+0x8ac>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3730      	adds	r7, #48	@ 0x30
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	58024400 	.word	0x58024400
 8001d20:	ffff0007 	.word	0xffff0007

08001d24 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b086      	sub	sp, #24
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
 8001d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e19c      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d38:	4b8a      	ldr	r3, [pc, #552]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	683a      	ldr	r2, [r7, #0]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d910      	bls.n	8001d68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d46:	4b87      	ldr	r3, [pc, #540]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 020f 	bic.w	r2, r3, #15
 8001d4e:	4985      	ldr	r1, [pc, #532]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d56:	4b83      	ldr	r3, [pc, #524]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	683a      	ldr	r2, [r7, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d001      	beq.n	8001d68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e184      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0304 	and.w	r3, r3, #4
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d010      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	4b7b      	ldr	r3, [pc, #492]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d908      	bls.n	8001d96 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001d84:	4b78      	ldr	r3, [pc, #480]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	691b      	ldr	r3, [r3, #16]
 8001d90:	4975      	ldr	r1, [pc, #468]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0308 	and.w	r3, r3, #8
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d010      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	695a      	ldr	r2, [r3, #20]
 8001da6:	4b70      	ldr	r3, [pc, #448]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d908      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001db2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	496a      	ldr	r1, [pc, #424]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d010      	beq.n	8001df2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	699a      	ldr	r2, [r3, #24]
 8001dd4:	4b64      	ldr	r3, [pc, #400]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d908      	bls.n	8001df2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001de0:	4b61      	ldr	r3, [pc, #388]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001de2:	69db      	ldr	r3, [r3, #28]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	495e      	ldr	r1, [pc, #376]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d010      	beq.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d908      	bls.n	8001e20 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e0e:	4b56      	ldr	r3, [pc, #344]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e10:	6a1b      	ldr	r3, [r3, #32]
 8001e12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4953      	ldr	r1, [pc, #332]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0302 	and.w	r3, r3, #2
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d010      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	4b4d      	ldr	r3, [pc, #308]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	f003 030f 	and.w	r3, r3, #15
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d908      	bls.n	8001e4e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e3c:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	f023 020f 	bic.w	r2, r3, #15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	4947      	ldr	r1, [pc, #284]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d055      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e5a:	4b43      	ldr	r3, [pc, #268]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e5c:	699b      	ldr	r3, [r3, #24]
 8001e5e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4940      	ldr	r1, [pc, #256]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d107      	bne.n	8001e84 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e74:	4b3c      	ldr	r3, [pc, #240]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d121      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e0f6      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	2b03      	cmp	r3, #3
 8001e8a:	d107      	bne.n	8001e9c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001e8c:	4b36      	ldr	r3, [pc, #216]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d115      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e0ea      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d107      	bne.n	8001eb4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ea4:	4b30      	ldr	r3, [pc, #192]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e0de      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eb4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0304 	and.w	r3, r3, #4
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e0d6      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ec4:	4b28      	ldr	r3, [pc, #160]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	4925      	ldr	r1, [pc, #148]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ed6:	f7fe ff53 	bl	8000d80 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	e00a      	b.n	8001ef4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ede:	f7fe ff4f 	bl	8000d80 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e0be      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef4:	4b1c      	ldr	r3, [pc, #112]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d1eb      	bne.n	8001ede <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d010      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d208      	bcs.n	8001f34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f22:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f24:	699b      	ldr	r3, [r3, #24]
 8001f26:	f023 020f 	bic.w	r2, r3, #15
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	490e      	ldr	r1, [pc, #56]	@ (8001f68 <HAL_RCC_ClockConfig+0x244>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	683a      	ldr	r2, [r7, #0]
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d214      	bcs.n	8001f6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f42:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f023 020f 	bic.w	r2, r3, #15
 8001f4a:	4906      	ldr	r1, [pc, #24]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f52:	4b04      	ldr	r3, [pc, #16]	@ (8001f64 <HAL_RCC_ClockConfig+0x240>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	683a      	ldr	r2, [r7, #0]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e086      	b.n	8002072 <HAL_RCC_ClockConfig+0x34e>
 8001f64:	52002000 	.word	0x52002000
 8001f68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0304 	and.w	r3, r3, #4
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d010      	beq.n	8001f9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	4b3f      	ldr	r3, [pc, #252]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d208      	bcs.n	8001f9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f88:	4b3c      	ldr	r3, [pc, #240]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	4939      	ldr	r1, [pc, #228]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0308 	and.w	r3, r3, #8
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d010      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	695a      	ldr	r2, [r3, #20]
 8001faa:	4b34      	ldr	r3, [pc, #208]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d208      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	492e      	ldr	r1, [pc, #184]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0310 	and.w	r3, r3, #16
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d010      	beq.n	8001ff6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	699a      	ldr	r2, [r3, #24]
 8001fd8:	4b28      	ldr	r3, [pc, #160]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fda:	69db      	ldr	r3, [r3, #28]
 8001fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d208      	bcs.n	8001ff6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fe4:	4b25      	ldr	r3, [pc, #148]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001fe6:	69db      	ldr	r3, [r3, #28]
 8001fe8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	4922      	ldr	r1, [pc, #136]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d010      	beq.n	8002024 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69da      	ldr	r2, [r3, #28]
 8002006:	4b1d      	ldr	r3, [pc, #116]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800200e:	429a      	cmp	r2, r3
 8002010:	d208      	bcs.n	8002024 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002012:	4b1a      	ldr	r3, [pc, #104]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4917      	ldr	r1, [pc, #92]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8002020:	4313      	orrs	r3, r2
 8002022:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002024:	f000 f834 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 8002028:	4602      	mov	r2, r0
 800202a:	4b14      	ldr	r3, [pc, #80]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	0a1b      	lsrs	r3, r3, #8
 8002030:	f003 030f 	and.w	r3, r3, #15
 8002034:	4912      	ldr	r1, [pc, #72]	@ (8002080 <HAL_RCC_ClockConfig+0x35c>)
 8002036:	5ccb      	ldrb	r3, [r1, r3]
 8002038:	f003 031f 	and.w	r3, r3, #31
 800203c:	fa22 f303 	lsr.w	r3, r2, r3
 8002040:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002042:	4b0e      	ldr	r3, [pc, #56]	@ (800207c <HAL_RCC_ClockConfig+0x358>)
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	4a0d      	ldr	r2, [pc, #52]	@ (8002080 <HAL_RCC_ClockConfig+0x35c>)
 800204c:	5cd3      	ldrb	r3, [r2, r3]
 800204e:	f003 031f 	and.w	r3, r3, #31
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	fa22 f303 	lsr.w	r3, r2, r3
 8002058:	4a0a      	ldr	r2, [pc, #40]	@ (8002084 <HAL_RCC_ClockConfig+0x360>)
 800205a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800205c:	4a0a      	ldr	r2, [pc, #40]	@ (8002088 <HAL_RCC_ClockConfig+0x364>)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_RCC_ClockConfig+0x368>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f7fe fe40 	bl	8000cec <HAL_InitTick>
 800206c:	4603      	mov	r3, r0
 800206e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002070:	7bfb      	ldrb	r3, [r7, #15]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	58024400 	.word	0x58024400
 8002080:	08005568 	.word	0x08005568
 8002084:	24000004 	.word	0x24000004
 8002088:	24000000 	.word	0x24000000
 800208c:	24000008 	.word	0x24000008

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002096:	4bb3      	ldr	r3, [pc, #716]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002098:	691b      	ldr	r3, [r3, #16]
 800209a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800209e:	2b18      	cmp	r3, #24
 80020a0:	f200 8155 	bhi.w	800234e <HAL_RCC_GetSysClockFreq+0x2be>
 80020a4:	a201      	add	r2, pc, #4	@ (adr r2, 80020ac <HAL_RCC_GetSysClockFreq+0x1c>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	08002111 	.word	0x08002111
 80020b0:	0800234f 	.word	0x0800234f
 80020b4:	0800234f 	.word	0x0800234f
 80020b8:	0800234f 	.word	0x0800234f
 80020bc:	0800234f 	.word	0x0800234f
 80020c0:	0800234f 	.word	0x0800234f
 80020c4:	0800234f 	.word	0x0800234f
 80020c8:	0800234f 	.word	0x0800234f
 80020cc:	08002137 	.word	0x08002137
 80020d0:	0800234f 	.word	0x0800234f
 80020d4:	0800234f 	.word	0x0800234f
 80020d8:	0800234f 	.word	0x0800234f
 80020dc:	0800234f 	.word	0x0800234f
 80020e0:	0800234f 	.word	0x0800234f
 80020e4:	0800234f 	.word	0x0800234f
 80020e8:	0800234f 	.word	0x0800234f
 80020ec:	0800213d 	.word	0x0800213d
 80020f0:	0800234f 	.word	0x0800234f
 80020f4:	0800234f 	.word	0x0800234f
 80020f8:	0800234f 	.word	0x0800234f
 80020fc:	0800234f 	.word	0x0800234f
 8002100:	0800234f 	.word	0x0800234f
 8002104:	0800234f 	.word	0x0800234f
 8002108:	0800234f 	.word	0x0800234f
 800210c:	08002143 	.word	0x08002143
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002110:	4b94      	ldr	r3, [pc, #592]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 0320 	and.w	r3, r3, #32
 8002118:	2b00      	cmp	r3, #0
 800211a:	d009      	beq.n	8002130 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800211c:	4b91      	ldr	r3, [pc, #580]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	08db      	lsrs	r3, r3, #3
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	4a90      	ldr	r2, [pc, #576]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002128:	fa22 f303 	lsr.w	r3, r2, r3
 800212c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800212e:	e111      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002130:	4b8d      	ldr	r3, [pc, #564]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002132:	61bb      	str	r3, [r7, #24]
      break;
 8002134:	e10e      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002136:	4b8d      	ldr	r3, [pc, #564]	@ (800236c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002138:	61bb      	str	r3, [r7, #24]
      break;
 800213a:	e10b      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800213c:	4b8c      	ldr	r3, [pc, #560]	@ (8002370 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800213e:	61bb      	str	r3, [r7, #24]
      break;
 8002140:	e108      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002142:	4b88      	ldr	r3, [pc, #544]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002146:	f003 0303 	and.w	r3, r3, #3
 800214a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800214c:	4b85      	ldr	r3, [pc, #532]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002150:	091b      	lsrs	r3, r3, #4
 8002152:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002156:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002158:	4b82      	ldr	r3, [pc, #520]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002162:	4b80      	ldr	r3, [pc, #512]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002164:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002166:	08db      	lsrs	r3, r3, #3
 8002168:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	fb02 f303 	mul.w	r3, r2, r3
 8002172:	ee07 3a90 	vmov	s15, r3
 8002176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800217a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	2b00      	cmp	r3, #0
 8002182:	f000 80e1 	beq.w	8002348 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	2b02      	cmp	r3, #2
 800218a:	f000 8083 	beq.w	8002294 <HAL_RCC_GetSysClockFreq+0x204>
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	2b02      	cmp	r3, #2
 8002192:	f200 80a1 	bhi.w	80022d8 <HAL_RCC_GetSysClockFreq+0x248>
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d003      	beq.n	80021a4 <HAL_RCC_GetSysClockFreq+0x114>
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d056      	beq.n	8002250 <HAL_RCC_GetSysClockFreq+0x1c0>
 80021a2:	e099      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021a4:	4b6f      	ldr	r3, [pc, #444]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02d      	beq.n	800220c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021b0:	4b6c      	ldr	r3, [pc, #432]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002368 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	ee07 3a90 	vmov	s15, r3
 80021c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	ee07 3a90 	vmov	s15, r3
 80021d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021da:	4b62      	ldr	r3, [pc, #392]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ee:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80021fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002206:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800220a:	e087      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002216:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002378 <HAL_RCC_GetSysClockFreq+0x2e8>
 800221a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800221e:	4b51      	ldr	r3, [pc, #324]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002232:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800223e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800224e:	e065      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	ee07 3a90 	vmov	s15, r3
 8002256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800225a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800237c <HAL_RCC_GetSysClockFreq+0x2ec>
 800225e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002262:	4b40      	ldr	r3, [pc, #256]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800226a:	ee07 3a90 	vmov	s15, r3
 800226e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002272:	ed97 6a02 	vldr	s12, [r7, #8]
 8002276:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2e4>
 800227a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800227e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002282:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800228a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800228e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002292:	e043      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	ee07 3a90 	vmov	s15, r3
 800229a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800229e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002380 <HAL_RCC_GetSysClockFreq+0x2f0>
 80022a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80022ba:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022d2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022d6:	e021      	b.n	800231c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022e2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800237c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80022fe:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002374 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800230a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800230e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002312:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002316:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800231a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800231c:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800231e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002320:	0a5b      	lsrs	r3, r3, #9
 8002322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002326:	3301      	adds	r3, #1
 8002328:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	ee07 3a90 	vmov	s15, r3
 8002330:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002334:	edd7 6a07 	vldr	s13, [r7, #28]
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002346:	e005      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	61bb      	str	r3, [r7, #24]
      break;
 800234c:	e002      	b.n	8002354 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800234e:	4b07      	ldr	r3, [pc, #28]	@ (800236c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002350:	61bb      	str	r3, [r7, #24]
      break;
 8002352:	bf00      	nop
  }

  return sysclockfreq;
 8002354:	69bb      	ldr	r3, [r7, #24]
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	@ 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400
 8002368:	03d09000 	.word	0x03d09000
 800236c:	003d0900 	.word	0x003d0900
 8002370:	017d7840 	.word	0x017d7840
 8002374:	46000000 	.word	0x46000000
 8002378:	4c742400 	.word	0x4c742400
 800237c:	4a742400 	.word	0x4a742400
 8002380:	4bbebc20 	.word	0x4bbebc20

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800238a:	f7ff fe81 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800238e:	4602      	mov	r2, r0
 8002390:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	0a1b      	lsrs	r3, r3, #8
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	490f      	ldr	r1, [pc, #60]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800239c:	5ccb      	ldrb	r3, [r1, r3]
 800239e:	f003 031f 	and.w	r3, r3, #31
 80023a2:	fa22 f303 	lsr.w	r3, r2, r3
 80023a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023a8:	4b0a      	ldr	r3, [pc, #40]	@ (80023d4 <HAL_RCC_GetHCLKFreq+0x50>)
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	f003 030f 	and.w	r3, r3, #15
 80023b0:	4a09      	ldr	r2, [pc, #36]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x54>)
 80023b2:	5cd3      	ldrb	r3, [r2, r3]
 80023b4:	f003 031f 	and.w	r3, r3, #31
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	fa22 f303 	lsr.w	r3, r2, r3
 80023be:	4a07      	ldr	r2, [pc, #28]	@ (80023dc <HAL_RCC_GetHCLKFreq+0x58>)
 80023c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023c2:	4a07      	ldr	r2, [pc, #28]	@ (80023e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80023c8:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <HAL_RCC_GetHCLKFreq+0x58>)
 80023ca:	681b      	ldr	r3, [r3, #0]
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	58024400 	.word	0x58024400
 80023d8:	08005568 	.word	0x08005568
 80023dc:	24000004 	.word	0x24000004
 80023e0:	24000000 	.word	0x24000000

080023e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80023e8:	f7ff ffcc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023ec:	4602      	mov	r2, r0
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	091b      	lsrs	r3, r3, #4
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	4904      	ldr	r1, [pc, #16]	@ (800240c <HAL_RCC_GetPCLK1Freq+0x28>)
 80023fa:	5ccb      	ldrb	r3, [r1, r3]
 80023fc:	f003 031f 	and.w	r3, r3, #31
 8002400:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002404:	4618      	mov	r0, r3
 8002406:	bd80      	pop	{r7, pc}
 8002408:	58024400 	.word	0x58024400
 800240c:	08005568 	.word	0x08005568

08002410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002414:	f7ff ffb6 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 8002418:	4602      	mov	r2, r0
 800241a:	4b06      	ldr	r3, [pc, #24]	@ (8002434 <HAL_RCC_GetPCLK2Freq+0x24>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	0a1b      	lsrs	r3, r3, #8
 8002420:	f003 0307 	and.w	r3, r3, #7
 8002424:	4904      	ldr	r1, [pc, #16]	@ (8002438 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002426:	5ccb      	ldrb	r3, [r1, r3]
 8002428:	f003 031f 	and.w	r3, r3, #31
 800242c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}
 8002434:	58024400 	.word	0x58024400
 8002438:	08005568 	.word	0x08005568

0800243c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b0ca      	sub	sp, #296	@ 0x128
 8002442:	af00      	add	r7, sp, #0
 8002444:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002448:	2300      	movs	r3, #0
 800244a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800244e:	2300      	movs	r3, #0
 8002450:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002460:	2500      	movs	r5, #0
 8002462:	ea54 0305 	orrs.w	r3, r4, r5
 8002466:	d049      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800246c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800246e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002472:	d02f      	beq.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002478:	d828      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800247a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800247e:	d01a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002484:	d822      	bhi.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800248a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800248e:	d007      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002490:	e01c      	b.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002492:	4bb8      	ldr	r3, [pc, #736]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002496:	4ab7      	ldr	r2, [pc, #732]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800249c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800249e:	e01a      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80024a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024a4:	3308      	adds	r3, #8
 80024a6:	2102      	movs	r1, #2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f001 fc8f 	bl	8003dcc <RCCEx_PLL2_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024b4:	e00f      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80024b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ba:	3328      	adds	r3, #40	@ 0x28
 80024bc:	2102      	movs	r1, #2
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fd36 	bl	8003f30 <RCCEx_PLL3_Config>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80024ca:	e004      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80024d2:	e000      	b.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80024d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10a      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80024de:	4ba5      	ldr	r3, [pc, #660]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80024e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80024ec:	4aa1      	ldr	r2, [pc, #644]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80024ee:	430b      	orrs	r3, r1
 80024f0:	6513      	str	r3, [r2, #80]	@ 0x50
 80024f2:	e003      	b.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80024f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80024fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002504:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002508:	f04f 0900 	mov.w	r9, #0
 800250c:	ea58 0309 	orrs.w	r3, r8, r9
 8002510:	d047      	beq.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002518:	2b04      	cmp	r3, #4
 800251a:	d82a      	bhi.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800251c:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002539 	.word	0x08002539
 8002528:	08002547 	.word	0x08002547
 800252c:	0800255d 	.word	0x0800255d
 8002530:	0800257b 	.word	0x0800257b
 8002534:	0800257b 	.word	0x0800257b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002538:	4b8e      	ldr	r3, [pc, #568]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800253a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253c:	4a8d      	ldr	r2, [pc, #564]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002542:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002544:	e01a      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800254a:	3308      	adds	r3, #8
 800254c:	2100      	movs	r1, #0
 800254e:	4618      	mov	r0, r3
 8002550:	f001 fc3c 	bl	8003dcc <RCCEx_PLL2_Config>
 8002554:	4603      	mov	r3, r0
 8002556:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800255a:	e00f      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800255c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002560:	3328      	adds	r3, #40	@ 0x28
 8002562:	2100      	movs	r1, #0
 8002564:	4618      	mov	r0, r3
 8002566:	f001 fce3 	bl	8003f30 <RCCEx_PLL3_Config>
 800256a:	4603      	mov	r3, r0
 800256c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002570:	e004      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002578:	e000      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800257a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800257c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002580:	2b00      	cmp	r3, #0
 8002582:	d10a      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002584:	4b7b      	ldr	r3, [pc, #492]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002586:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002588:	f023 0107 	bic.w	r1, r3, #7
 800258c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002590:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002592:	4a78      	ldr	r2, [pc, #480]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002594:	430b      	orrs	r3, r1
 8002596:	6513      	str	r3, [r2, #80]	@ 0x50
 8002598:	e003      	b.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800259a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800259e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80025a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025aa:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80025ae:	f04f 0b00 	mov.w	fp, #0
 80025b2:	ea5a 030b 	orrs.w	r3, sl, fp
 80025b6:	d04c      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80025b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c2:	d030      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80025c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025c8:	d829      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80025cc:	d02d      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80025ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80025d0:	d825      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025d2:	2b80      	cmp	r3, #128	@ 0x80
 80025d4:	d018      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80025d6:	2b80      	cmp	r3, #128	@ 0x80
 80025d8:	d821      	bhi.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d002      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80025de:	2b40      	cmp	r3, #64	@ 0x40
 80025e0:	d007      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80025e2:	e01c      	b.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025e4:	4b63      	ldr	r3, [pc, #396]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025e8:	4a62      	ldr	r2, [pc, #392]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80025f0:	e01c      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025f6:	3308      	adds	r3, #8
 80025f8:	2100      	movs	r1, #0
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fbe6 	bl	8003dcc <RCCEx_PLL2_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002606:	e011      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800260c:	3328      	adds	r3, #40	@ 0x28
 800260e:	2100      	movs	r1, #0
 8002610:	4618      	mov	r0, r3
 8002612:	f001 fc8d 	bl	8003f30 <RCCEx_PLL3_Config>
 8002616:	4603      	mov	r3, r0
 8002618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800261c:	e006      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002624:	e002      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002626:	bf00      	nop
 8002628:	e000      	b.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800262a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800262c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002630:	2b00      	cmp	r3, #0
 8002632:	d10a      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002634:	4b4f      	ldr	r3, [pc, #316]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002638:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800263c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002642:	4a4c      	ldr	r2, [pc, #304]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002644:	430b      	orrs	r3, r1
 8002646:	6513      	str	r3, [r2, #80]	@ 0x50
 8002648:	e003      	b.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800264a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800264e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800265a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800265e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002662:	2300      	movs	r3, #0
 8002664:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002668:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800266c:	460b      	mov	r3, r1
 800266e:	4313      	orrs	r3, r2
 8002670:	d053      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002676:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800267a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800267e:	d035      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002680:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002684:	d82e      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002686:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800268a:	d031      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800268c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002690:	d828      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002692:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002696:	d01a      	beq.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002698:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800269c:	d822      	bhi.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80026a2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026a6:	d007      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80026a8:	e01c      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026aa:	4b32      	ldr	r3, [pc, #200]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	4a31      	ldr	r2, [pc, #196]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026b6:	e01c      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026bc:	3308      	adds	r3, #8
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f001 fb83 	bl	8003dcc <RCCEx_PLL2_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80026cc:	e011      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026d2:	3328      	adds	r3, #40	@ 0x28
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f001 fc2a 	bl	8003f30 <RCCEx_PLL3_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e2:	e006      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026ea:	e002      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026ec:	bf00      	nop
 80026ee:	e000      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80026f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d10b      	bne.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80026fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026fe:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800270a:	4a1a      	ldr	r2, [pc, #104]	@ (8002774 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800270c:	430b      	orrs	r3, r1
 800270e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002710:	e003      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800271a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800271e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002722:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002726:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800272a:	2300      	movs	r3, #0
 800272c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002730:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002734:	460b      	mov	r3, r1
 8002736:	4313      	orrs	r3, r2
 8002738:	d056      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800273a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800273e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002742:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002746:	d038      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800274c:	d831      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800274e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002752:	d034      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002754:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002758:	d82b      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800275a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800275e:	d01d      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002760:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002764:	d825      	bhi.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800276a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800276e:	d00a      	beq.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002770:	e01f      	b.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002772:	bf00      	nop
 8002774:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002778:	4ba2      	ldr	r3, [pc, #648]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800277a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800277c:	4aa1      	ldr	r2, [pc, #644]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002782:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002784:	e01c      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800278a:	3308      	adds	r3, #8
 800278c:	2100      	movs	r1, #0
 800278e:	4618      	mov	r0, r3
 8002790:	f001 fb1c 	bl	8003dcc <RCCEx_PLL2_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800279c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a0:	3328      	adds	r3, #40	@ 0x28
 80027a2:	2100      	movs	r1, #0
 80027a4:	4618      	mov	r0, r3
 80027a6:	f001 fbc3 	bl	8003f30 <RCCEx_PLL3_Config>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80027b0:	e006      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80027b8:	e002      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027ba:	bf00      	nop
 80027bc:	e000      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80027be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80027c8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027cc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80027d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027d4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80027d8:	4a8a      	ldr	r2, [pc, #552]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027da:	430b      	orrs	r3, r1
 80027dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80027de:	e003      	b.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80027e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80027f4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80027fe:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002802:	460b      	mov	r3, r1
 8002804:	4313      	orrs	r3, r2
 8002806:	d03a      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800280c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800280e:	2b30      	cmp	r3, #48	@ 0x30
 8002810:	d01f      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002812:	2b30      	cmp	r3, #48	@ 0x30
 8002814:	d819      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002816:	2b20      	cmp	r3, #32
 8002818:	d00c      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800281a:	2b20      	cmp	r3, #32
 800281c:	d815      	bhi.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800281e:	2b00      	cmp	r3, #0
 8002820:	d019      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002822:	2b10      	cmp	r3, #16
 8002824:	d111      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002826:	4b77      	ldr	r3, [pc, #476]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800282a:	4a76      	ldr	r2, [pc, #472]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800282c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002830:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002832:	e011      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002838:	3308      	adds	r3, #8
 800283a:	2102      	movs	r1, #2
 800283c:	4618      	mov	r0, r3
 800283e:	f001 fac5 	bl	8003dcc <RCCEx_PLL2_Config>
 8002842:	4603      	mov	r3, r0
 8002844:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002848:	e006      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002850:	e002      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002852:	bf00      	nop
 8002854:	e000      	b.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002856:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800285c:	2b00      	cmp	r3, #0
 800285e:	d10a      	bne.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002860:	4b68      	ldr	r3, [pc, #416]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002864:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800286c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800286e:	4a65      	ldr	r2, [pc, #404]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002870:	430b      	orrs	r3, r1
 8002872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002874:	e003      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002876:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800287a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800287e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002886:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800288a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002894:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002898:	460b      	mov	r3, r1
 800289a:	4313      	orrs	r3, r2
 800289c:	d051      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028a4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028a8:	d035      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80028aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ae:	d82e      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028b0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028b4:	d031      	beq.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80028b6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80028ba:	d828      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c0:	d01a      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80028c2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028c6:	d822      	bhi.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80028cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028d0:	d007      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80028d2:	e01c      	b.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028e0:	e01c      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028e6:	3308      	adds	r3, #8
 80028e8:	2100      	movs	r1, #0
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fa6e 	bl	8003dcc <RCCEx_PLL2_Config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80028f6:	e011      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028fc:	3328      	adds	r3, #40	@ 0x28
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 fb15 	bl	8003f30 <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800290c:	e006      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002914:	e002      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002916:	bf00      	nop
 8002918:	e000      	b.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800291a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800291c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002924:	4b37      	ldr	r3, [pc, #220]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002928:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800292c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002930:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002932:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002934:	430b      	orrs	r3, r1
 8002936:	6513      	str	r3, [r2, #80]	@ 0x50
 8002938:	e003      	b.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800293a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800293e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800294a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800294e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002952:	2300      	movs	r3, #0
 8002954:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002958:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800295c:	460b      	mov	r3, r1
 800295e:	4313      	orrs	r3, r2
 8002960:	d056      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002966:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002968:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800296c:	d033      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800296e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002972:	d82c      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002974:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002978:	d02f      	beq.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800297a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800297e:	d826      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002980:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002984:	d02b      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002986:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800298a:	d820      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 800298c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002990:	d012      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002992:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002996:	d81a      	bhi.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002998:	2b00      	cmp	r3, #0
 800299a:	d022      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800299c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a0:	d115      	bne.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80029a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029a6:	3308      	adds	r3, #8
 80029a8:	2101      	movs	r1, #1
 80029aa:	4618      	mov	r0, r3
 80029ac:	f001 fa0e 	bl	8003dcc <RCCEx_PLL2_Config>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029b6:	e015      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80029b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029bc:	3328      	adds	r3, #40	@ 0x28
 80029be:	2101      	movs	r1, #1
 80029c0:	4618      	mov	r0, r3
 80029c2:	f001 fab5 	bl	8003f30 <RCCEx_PLL3_Config>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80029cc:	e00a      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029d6:	bf00      	nop
 80029d8:	e004      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80029e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10d      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80029ec:	4b05      	ldr	r3, [pc, #20]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029f0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80029f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029f8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029fa:	4a02      	ldr	r2, [pc, #8]	@ (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8002a00:	e006      	b.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002a1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002a20:	2300      	movs	r3, #0
 8002a22:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002a26:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	d055      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a3c:	d033      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a42:	d82c      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a48:	d02f      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	d826      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a54:	d02b      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002a56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002a5a:	d820      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a60:	d012      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002a62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a66:	d81a      	bhi.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d022      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002a6c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002a70:	d115      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a76:	3308      	adds	r3, #8
 8002a78:	2101      	movs	r1, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f001 f9a6 	bl	8003dcc <RCCEx_PLL2_Config>
 8002a80:	4603      	mov	r3, r0
 8002a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a86:	e015      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a8c:	3328      	adds	r3, #40	@ 0x28
 8002a8e:	2101      	movs	r1, #1
 8002a90:	4618      	mov	r0, r3
 8002a92:	f001 fa4d 	bl	8003f30 <RCCEx_PLL3_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002a9c:	e00a      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002aa4:	e006      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aa6:	bf00      	nop
 8002aa8:	e004      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aaa:	bf00      	nop
 8002aac:	e002      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002aae:	bf00      	nop
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002ab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002abc:	4ba3      	ldr	r3, [pc, #652]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ac8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002acc:	4a9f      	ldr	r2, [pc, #636]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ace:	430b      	orrs	r3, r1
 8002ad0:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ad2:	e003      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ad8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002ae8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002af2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002af6:	460b      	mov	r3, r1
 8002af8:	4313      	orrs	r3, r2
 8002afa:	d037      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b06:	d00e      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002b08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b0c:	d816      	bhi.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d018      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002b12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b16:	d111      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b18:	4b8c      	ldr	r3, [pc, #560]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	4a8b      	ldr	r2, [pc, #556]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b24:	e00f      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2a:	3308      	adds	r3, #8
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f001 f94c 	bl	8003dcc <RCCEx_PLL2_Config>
 8002b34:	4603      	mov	r3, r0
 8002b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002b3a:	e004      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b42:	e000      	b.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b4e:	4b7f      	ldr	r3, [pc, #508]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b52:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b5c:	4a7b      	ldr	r2, [pc, #492]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5e:	430b      	orrs	r3, r1
 8002b60:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b62:	e003      	b.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b74:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002b82:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	d039      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d81c      	bhi.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002b96:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bd9 	.word	0x08002bd9
 8002ba0:	08002bad 	.word	0x08002bad
 8002ba4:	08002bbb 	.word	0x08002bbb
 8002ba8:	08002bd9 	.word	0x08002bd9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bac:	4b67      	ldr	r3, [pc, #412]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	4a66      	ldr	r2, [pc, #408]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bb8:	e00f      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002bba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bbe:	3308      	adds	r3, #8
 8002bc0:	2102      	movs	r1, #2
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f902 	bl	8003dcc <RCCEx_PLL2_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002bce:	e004      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002bd6:	e000      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002bd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002be2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002be4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002be6:	f023 0103 	bic.w	r1, r3, #3
 8002bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bf0:	4a56      	ldr	r2, [pc, #344]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf2:	430b      	orrs	r3, r1
 8002bf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002bf6:	e003      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c08:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002c0c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c10:	2300      	movs	r3, #0
 8002c12:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002c16:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002c1a:	460b      	mov	r3, r1
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f000 809f 	beq.w	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c22:	4b4b      	ldr	r3, [pc, #300]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a4a      	ldr	r2, [pc, #296]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe f8a7 	bl	8000d80 <HAL_GetTick>
 8002c32:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c36:	e00b      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c38:	f7fe f8a2 	bl	8000d80 <HAL_GetTick>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b64      	cmp	r3, #100	@ 0x64
 8002c46:	d903      	bls.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c4e:	e005      	b.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c50:	4b3f      	ldr	r3, [pc, #252]	@ (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0ed      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d179      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002c64:	4b39      	ldr	r3, [pc, #228]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c66:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c6c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c70:	4053      	eors	r3, r2
 8002c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d015      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c7a:	4b34      	ldr	r3, [pc, #208]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c82:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c86:	4b31      	ldr	r3, [pc, #196]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c8a:	4a30      	ldr	r2, [pc, #192]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c90:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c92:	4b2e      	ldr	r3, [pc, #184]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c9c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002c9e:	4a2b      	ldr	r2, [pc, #172]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ca4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cb2:	d118      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe f864 	bl	8000d80 <HAL_GetTick>
 8002cb8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cbc:	e00d      	b.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbe:	f7fe f85f 	bl	8000d80 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002cc8:	1ad2      	subs	r2, r2, r3
 8002cca:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d903      	bls.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002cd8:	e005      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002cda:	4b1c      	ldr	r3, [pc, #112]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0eb      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d129      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002cf6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cfe:	d10e      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002d00:	4b12      	ldr	r3, [pc, #72]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d10:	091a      	lsrs	r2, r3, #4
 8002d12:	4b10      	ldr	r3, [pc, #64]	@ (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	4a0d      	ldr	r2, [pc, #52]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d18:	430b      	orrs	r3, r1
 8002d1a:	6113      	str	r3, [r2, #16]
 8002d1c:	e005      	b.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	4a0a      	ldr	r2, [pc, #40]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d24:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002d28:	6113      	str	r3, [r2, #16]
 8002d2a:	4b08      	ldr	r3, [pc, #32]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d3a:	4a04      	ldr	r2, [pc, #16]	@ (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d3c:	430b      	orrs	r3, r1
 8002d3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d40:	e00e      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002d4a:	e009      	b.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002d4c:	58024400 	.word	0x58024400
 8002d50:	58024800 	.word	0x58024800
 8002d54:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002d60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d68:	f002 0301 	and.w	r3, r2, #1
 8002d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d70:	2300      	movs	r3, #0
 8002d72:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002d76:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f000 8089 	beq.w	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d88:	2b28      	cmp	r3, #40	@ 0x28
 8002d8a:	d86b      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8002d94 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d92:	bf00      	nop
 8002d94:	08002e6d 	.word	0x08002e6d
 8002d98:	08002e65 	.word	0x08002e65
 8002d9c:	08002e65 	.word	0x08002e65
 8002da0:	08002e65 	.word	0x08002e65
 8002da4:	08002e65 	.word	0x08002e65
 8002da8:	08002e65 	.word	0x08002e65
 8002dac:	08002e65 	.word	0x08002e65
 8002db0:	08002e65 	.word	0x08002e65
 8002db4:	08002e39 	.word	0x08002e39
 8002db8:	08002e65 	.word	0x08002e65
 8002dbc:	08002e65 	.word	0x08002e65
 8002dc0:	08002e65 	.word	0x08002e65
 8002dc4:	08002e65 	.word	0x08002e65
 8002dc8:	08002e65 	.word	0x08002e65
 8002dcc:	08002e65 	.word	0x08002e65
 8002dd0:	08002e65 	.word	0x08002e65
 8002dd4:	08002e4f 	.word	0x08002e4f
 8002dd8:	08002e65 	.word	0x08002e65
 8002ddc:	08002e65 	.word	0x08002e65
 8002de0:	08002e65 	.word	0x08002e65
 8002de4:	08002e65 	.word	0x08002e65
 8002de8:	08002e65 	.word	0x08002e65
 8002dec:	08002e65 	.word	0x08002e65
 8002df0:	08002e65 	.word	0x08002e65
 8002df4:	08002e6d 	.word	0x08002e6d
 8002df8:	08002e65 	.word	0x08002e65
 8002dfc:	08002e65 	.word	0x08002e65
 8002e00:	08002e65 	.word	0x08002e65
 8002e04:	08002e65 	.word	0x08002e65
 8002e08:	08002e65 	.word	0x08002e65
 8002e0c:	08002e65 	.word	0x08002e65
 8002e10:	08002e65 	.word	0x08002e65
 8002e14:	08002e6d 	.word	0x08002e6d
 8002e18:	08002e65 	.word	0x08002e65
 8002e1c:	08002e65 	.word	0x08002e65
 8002e20:	08002e65 	.word	0x08002e65
 8002e24:	08002e65 	.word	0x08002e65
 8002e28:	08002e65 	.word	0x08002e65
 8002e2c:	08002e65 	.word	0x08002e65
 8002e30:	08002e65 	.word	0x08002e65
 8002e34:	08002e6d 	.word	0x08002e6d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	2101      	movs	r1, #1
 8002e40:	4618      	mov	r0, r3
 8002e42:	f000 ffc3 	bl	8003dcc <RCCEx_PLL2_Config>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e4c:	e00f      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e52:	3328      	adds	r3, #40	@ 0x28
 8002e54:	2101      	movs	r1, #1
 8002e56:	4618      	mov	r0, r3
 8002e58:	f001 f86a 	bl	8003f30 <RCCEx_PLL3_Config>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002e62:	e004      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e6a:	e000      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002e76:	4bbf      	ldr	r3, [pc, #764]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e7a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e82:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e84:	4abb      	ldr	r2, [pc, #748]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002e86:	430b      	orrs	r3, r1
 8002e88:	6553      	str	r3, [r2, #84]	@ 0x54
 8002e8a:	e003      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e9c:	f002 0302 	and.w	r3, r2, #2
 8002ea0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002eaa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002eae:	460b      	mov	r3, r1
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	d041      	beq.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d824      	bhi.n	8002f08 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002f11 	.word	0x08002f11
 8002ec8:	08002edd 	.word	0x08002edd
 8002ecc:	08002ef3 	.word	0x08002ef3
 8002ed0:	08002f11 	.word	0x08002f11
 8002ed4:	08002f11 	.word	0x08002f11
 8002ed8:	08002f11 	.word	0x08002f11
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ee0:	3308      	adds	r3, #8
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 ff71 	bl	8003dcc <RCCEx_PLL2_Config>
 8002eea:	4603      	mov	r3, r0
 8002eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002ef0:	e00f      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef6:	3328      	adds	r3, #40	@ 0x28
 8002ef8:	2101      	movs	r1, #1
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 f818 	bl	8003f30 <RCCEx_PLL3_Config>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f06:	e004      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f0e:	e000      	b.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10a      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002f1a:	4b96      	ldr	r3, [pc, #600]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1e:	f023 0107 	bic.w	r1, r3, #7
 8002f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f28:	4a92      	ldr	r2, [pc, #584]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f2a:	430b      	orrs	r3, r1
 8002f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f2e:	e003      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	f002 0304 	and.w	r3, r2, #4
 8002f44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f4e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4313      	orrs	r3, r2
 8002f56:	d044      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f60:	2b05      	cmp	r3, #5
 8002f62:	d825      	bhi.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8002f64:	a201      	add	r2, pc, #4	@ (adr r2, 8002f6c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fb9 	.word	0x08002fb9
 8002f70:	08002f85 	.word	0x08002f85
 8002f74:	08002f9b 	.word	0x08002f9b
 8002f78:	08002fb9 	.word	0x08002fb9
 8002f7c:	08002fb9 	.word	0x08002fb9
 8002f80:	08002fb9 	.word	0x08002fb9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f88:	3308      	adds	r3, #8
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f000 ff1d 	bl	8003dcc <RCCEx_PLL2_Config>
 8002f92:	4603      	mov	r3, r0
 8002f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002f98:	e00f      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9e:	3328      	adds	r3, #40	@ 0x28
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ffc4 	bl	8003f30 <RCCEx_PLL3_Config>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8002fae:	e004      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fb6:	e000      	b.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8002fb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10b      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fc6:	f023 0107 	bic.w	r1, r3, #7
 8002fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fd2:	4a68      	ldr	r2, [pc, #416]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fd4:	430b      	orrs	r3, r1
 8002fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fd8:	e003      	b.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f002 0320 	and.w	r3, r2, #32
 8002fee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002ff8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4313      	orrs	r3, r2
 8003000:	d055      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800300e:	d033      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003014:	d82c      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800301a:	d02f      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800301c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003020:	d826      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003022:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003026:	d02b      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003028:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800302c:	d820      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800302e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003032:	d012      	beq.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003038:	d81a      	bhi.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800303a:	2b00      	cmp	r3, #0
 800303c:	d022      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800303e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003042:	d115      	bne.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003048:	3308      	adds	r3, #8
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f000 febd 	bl	8003dcc <RCCEx_PLL2_Config>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003058:	e015      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800305a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305e:	3328      	adds	r3, #40	@ 0x28
 8003060:	2102      	movs	r1, #2
 8003062:	4618      	mov	r0, r3
 8003064:	f000 ff64 	bl	8003f30 <RCCEx_PLL3_Config>
 8003068:	4603      	mov	r3, r0
 800306a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800306e:	e00a      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003076:	e006      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003078:	bf00      	nop
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800307c:	bf00      	nop
 800307e:	e002      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003080:	bf00      	nop
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800308e:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800309a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800309e:	4a35      	ldr	r2, [pc, #212]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80030ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80030c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4313      	orrs	r3, r2
 80030cc:	d058      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80030ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030d6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80030da:	d033      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80030dc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80030e0:	d82c      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80030e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030e6:	d02f      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80030e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ec:	d826      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80030ee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030f2:	d02b      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80030f4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80030f8:	d820      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80030fa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80030fe:	d012      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003100:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003104:	d81a      	bhi.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d022      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800310e:	d115      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003114:	3308      	adds	r3, #8
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fe57 	bl	8003dcc <RCCEx_PLL2_Config>
 800311e:	4603      	mov	r3, r0
 8003120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	3328      	adds	r3, #40	@ 0x28
 800312c:	2102      	movs	r1, #2
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fefe 	bl	8003f30 <RCCEx_PLL3_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800313a:	e00a      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003142:	e006      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003144:	bf00      	nop
 8003146:	e004      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003148:	bf00      	nop
 800314a:	e002      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800314c:	bf00      	nop
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003150:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10e      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800315a:	4b06      	ldr	r3, [pc, #24]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800316a:	4a02      	ldr	r2, [pc, #8]	@ (8003174 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800316c:	430b      	orrs	r3, r1
 800316e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003170:	e006      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003172:	bf00      	nop
 8003174:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800317c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003188:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800318c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003196:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800319a:	460b      	mov	r3, r1
 800319c:	4313      	orrs	r3, r2
 800319e:	d055      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80031a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80031a8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031ac:	d033      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80031ae:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80031b2:	d82c      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031b8:	d02f      	beq.n	800321a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80031ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031be:	d826      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031c0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031c4:	d02b      	beq.n	800321e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80031c6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80031ca:	d820      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031d0:	d012      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80031d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031d6:	d81a      	bhi.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d022      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80031dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031e0:	d115      	bne.n	800320e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e6:	3308      	adds	r3, #8
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fdee 	bl	8003dcc <RCCEx_PLL2_Config>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80031f6:	e015      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fc:	3328      	adds	r3, #40	@ 0x28
 80031fe:	2102      	movs	r1, #2
 8003200:	4618      	mov	r0, r3
 8003202:	f000 fe95 	bl	8003f30 <RCCEx_PLL3_Config>
 8003206:	4603      	mov	r3, r0
 8003208:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800320c:	e00a      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003214:	e006      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003216:	bf00      	nop
 8003218:	e004      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800321a:	bf00      	nop
 800321c:	e002      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800321e:	bf00      	nop
 8003220:	e000      	b.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003224:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800322c:	4ba1      	ldr	r3, [pc, #644]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003230:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800323c:	4a9d      	ldr	r2, [pc, #628]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800323e:	430b      	orrs	r3, r1
 8003240:	6593      	str	r3, [r2, #88]	@ 0x58
 8003242:	e003      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003248:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	f002 0308 	and.w	r3, r2, #8
 8003258:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800325c:	2300      	movs	r3, #0
 800325e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003262:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003266:	460b      	mov	r3, r1
 8003268:	4313      	orrs	r3, r2
 800326a:	d01e      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003274:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003278:	d10c      	bne.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	3328      	adds	r3, #40	@ 0x28
 8003280:	2102      	movs	r1, #2
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fe54 	bl	8003f30 <RCCEx_PLL3_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d002      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003294:	4b87      	ldr	r3, [pc, #540]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003298:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032a4:	4a83      	ldr	r2, [pc, #524]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80032aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b2:	f002 0310 	and.w	r3, r2, #16
 80032b6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032ba:	2300      	movs	r3, #0
 80032bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80032c0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80032c4:	460b      	mov	r3, r1
 80032c6:	4313      	orrs	r3, r2
 80032c8:	d01e      	beq.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80032d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032d6:	d10c      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80032d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032dc:	3328      	adds	r3, #40	@ 0x28
 80032de:	2102      	movs	r1, #2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fe25 	bl	8003f30 <RCCEx_PLL3_Config>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d002      	beq.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80032f2:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032f6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80032fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003302:	4a6c      	ldr	r2, [pc, #432]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003304:	430b      	orrs	r3, r1
 8003306:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003314:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003318:	2300      	movs	r3, #0
 800331a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800331e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003322:	460b      	mov	r3, r1
 8003324:	4313      	orrs	r3, r2
 8003326:	d03e      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003330:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003334:	d022      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003336:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800333a:	d81b      	bhi.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d003      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d00b      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003346:	e015      	b.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334c:	3308      	adds	r3, #8
 800334e:	2100      	movs	r1, #0
 8003350:	4618      	mov	r0, r3
 8003352:	f000 fd3b 	bl	8003dcc <RCCEx_PLL2_Config>
 8003356:	4603      	mov	r3, r0
 8003358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800335c:	e00f      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800335e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003362:	3328      	adds	r3, #40	@ 0x28
 8003364:	2102      	movs	r1, #2
 8003366:	4618      	mov	r0, r3
 8003368:	f000 fde2 	bl	8003f30 <RCCEx_PLL3_Config>
 800336c:	4603      	mov	r3, r0
 800336e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003372:	e004      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800337a:	e000      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800337c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800337e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003386:	4b4b      	ldr	r3, [pc, #300]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800338e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003392:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003396:	4a47      	ldr	r2, [pc, #284]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003398:	430b      	orrs	r3, r1
 800339a:	6593      	str	r3, [r2, #88]	@ 0x58
 800339c:	e003      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80033b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033b4:	2300      	movs	r3, #0
 80033b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80033b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80033bc:	460b      	mov	r3, r1
 80033be:	4313      	orrs	r3, r2
 80033c0:	d03b      	beq.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ce:	d01f      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80033d0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033d4:	d818      	bhi.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80033d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033da:	d003      	beq.n	80033e4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80033dc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033e0:	d007      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80033e2:	e011      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033e4:	4b33      	ldr	r3, [pc, #204]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e8:	4a32      	ldr	r2, [pc, #200]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80033f0:	e00f      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80033f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f6:	3328      	adds	r3, #40	@ 0x28
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fd98 	bl	8003f30 <RCCEx_PLL3_Config>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003406:	e004      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800340e:	e000      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10b      	bne.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800341a:	4b26      	ldr	r3, [pc, #152]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800341c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800341e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800342a:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800342c:	430b      	orrs	r3, r1
 800342e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003430:	e003      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003446:	673b      	str	r3, [r7, #112]	@ 0x70
 8003448:	2300      	movs	r3, #0
 800344a:	677b      	str	r3, [r7, #116]	@ 0x74
 800344c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003450:	460b      	mov	r3, r1
 8003452:	4313      	orrs	r3, r2
 8003454:	d034      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003464:	d007      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003468:	4b12      	ldr	r3, [pc, #72]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800346a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800346c:	4a11      	ldr	r2, [pc, #68]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800346e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003472:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003474:	e00e      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800347a:	3308      	adds	r3, #8
 800347c:	2102      	movs	r1, #2
 800347e:	4618      	mov	r0, r3
 8003480:	f000 fca4 	bl	8003dcc <RCCEx_PLL2_Config>
 8003484:	4603      	mov	r3, r0
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003492:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003494:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003498:	2b00      	cmp	r3, #0
 800349a:	d10d      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800349c:	4b05      	ldr	r3, [pc, #20]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034aa:	4a02      	ldr	r2, [pc, #8]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034ac:	430b      	orrs	r3, r1
 80034ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80034b2:	bf00      	nop
 80034b4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80034cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034ce:	2300      	movs	r3, #0
 80034d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80034d2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80034d6:	460b      	mov	r3, r1
 80034d8:	4313      	orrs	r3, r2
 80034da:	d00c      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e0:	3328      	adds	r3, #40	@ 0x28
 80034e2:	2102      	movs	r1, #2
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fd23 	bl	8003f30 <RCCEx_PLL3_Config>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fe:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003502:	663b      	str	r3, [r7, #96]	@ 0x60
 8003504:	2300      	movs	r3, #0
 8003506:	667b      	str	r3, [r7, #100]	@ 0x64
 8003508:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800350c:	460b      	mov	r3, r1
 800350e:	4313      	orrs	r3, r2
 8003510:	d038      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800351a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800351e:	d018      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003520:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003524:	d811      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800352a:	d014      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800352c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003530:	d80b      	bhi.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800353a:	d106      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800353c:	4bc3      	ldr	r3, [pc, #780]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	4ac2      	ldr	r2, [pc, #776]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003542:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003546:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003548:	e008      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003550:	e004      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003552:	bf00      	nop
 8003554:	e002      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800355a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800355c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003560:	2b00      	cmp	r3, #0
 8003562:	d10b      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003564:	4bb9      	ldr	r3, [pc, #740]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003566:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003568:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003574:	4ab5      	ldr	r2, [pc, #724]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003576:	430b      	orrs	r3, r1
 8003578:	6553      	str	r3, [r2, #84]	@ 0x54
 800357a:	e003      	b.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800357c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003580:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003590:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003592:	2300      	movs	r3, #0
 8003594:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003596:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800359a:	460b      	mov	r3, r1
 800359c:	4313      	orrs	r3, r2
 800359e:	d009      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035a0:	4baa      	ldr	r3, [pc, #680]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80035a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ae:	4aa7      	ldr	r2, [pc, #668]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035b0:	430b      	orrs	r3, r1
 80035b2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035bc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80035c0:	653b      	str	r3, [r7, #80]	@ 0x50
 80035c2:	2300      	movs	r3, #0
 80035c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80035c6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d00a      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80035d0:	4b9e      	ldr	r3, [pc, #632]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80035e0:	4a9a      	ldr	r2, [pc, #616]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035e2:	430b      	orrs	r3, r1
 80035e4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ee:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80035f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035f4:	2300      	movs	r3, #0
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80035fc:	460b      	mov	r3, r1
 80035fe:	4313      	orrs	r3, r2
 8003600:	d009      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003602:	4b92      	ldr	r3, [pc, #584]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003606:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003610:	4a8e      	ldr	r2, [pc, #568]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003612:	430b      	orrs	r3, r1
 8003614:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003622:	643b      	str	r3, [r7, #64]	@ 0x40
 8003624:	2300      	movs	r3, #0
 8003626:	647b      	str	r3, [r7, #68]	@ 0x44
 8003628:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d00e      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003632:	4b86      	ldr	r3, [pc, #536]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	4a85      	ldr	r2, [pc, #532]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003638:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800363c:	6113      	str	r3, [r2, #16]
 800363e:	4b83      	ldr	r3, [pc, #524]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003640:	6919      	ldr	r1, [r3, #16]
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003646:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800364a:	4a80      	ldr	r2, [pc, #512]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800364c:	430b      	orrs	r3, r1
 800364e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003650:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003658:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800365c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800365e:	2300      	movs	r3, #0
 8003660:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003662:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003666:	460b      	mov	r3, r1
 8003668:	4313      	orrs	r3, r2
 800366a:	d009      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800366c:	4b77      	ldr	r3, [pc, #476]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800366e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003670:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	4a74      	ldr	r2, [pc, #464]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800367c:	430b      	orrs	r3, r1
 800367e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003688:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800368c:	633b      	str	r3, [r7, #48]	@ 0x30
 800368e:	2300      	movs	r3, #0
 8003690:	637b      	str	r3, [r7, #52]	@ 0x34
 8003692:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003696:	460b      	mov	r3, r1
 8003698:	4313      	orrs	r3, r2
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800369c:	4b6b      	ldr	r3, [pc, #428]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800369e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036ac:	4a67      	ldr	r2, [pc, #412]	@ (800384c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ae:	430b      	orrs	r3, r1
 80036b0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ba:	2100      	movs	r1, #0
 80036bc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80036c8:	460b      	mov	r3, r1
 80036ca:	4313      	orrs	r3, r2
 80036cc:	d011      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d2:	3308      	adds	r3, #8
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 fb78 	bl	8003dcc <RCCEx_PLL2_Config>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80036e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	2100      	movs	r1, #0
 80036fc:	6239      	str	r1, [r7, #32]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
 8003704:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d011      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	3308      	adds	r3, #8
 8003714:	2101      	movs	r1, #1
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fb58 	bl	8003dcc <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	2100      	movs	r1, #0
 800373c:	61b9      	str	r1, [r7, #24]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003748:	460b      	mov	r3, r1
 800374a:	4313      	orrs	r3, r2
 800374c:	d011      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003752:	3308      	adds	r3, #8
 8003754:	2102      	movs	r1, #2
 8003756:	4618      	mov	r0, r3
 8003758:	f000 fb38 	bl	8003dcc <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377a:	2100      	movs	r1, #0
 800377c:	6139      	str	r1, [r7, #16]
 800377e:	f003 0308 	and.w	r3, r3, #8
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d011      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	3328      	adds	r3, #40	@ 0x28
 8003794:	2100      	movs	r1, #0
 8003796:	4618      	mov	r0, r3
 8003798:	f000 fbca 	bl	8003f30 <RCCEx_PLL3_Config>
 800379c:	4603      	mov	r3, r0
 800379e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80037a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80037b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ba:	2100      	movs	r1, #0
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	f003 0310 	and.w	r3, r3, #16
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80037c8:	460b      	mov	r3, r1
 80037ca:	4313      	orrs	r3, r2
 80037cc:	d011      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	3328      	adds	r3, #40	@ 0x28
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fbaa 	bl	8003f30 <RCCEx_PLL3_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80037e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fa:	2100      	movs	r1, #0
 80037fc:	6039      	str	r1, [r7, #0]
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003808:	460b      	mov	r3, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	d011      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800380e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003812:	3328      	adds	r3, #40	@ 0x28
 8003814:	2102      	movs	r1, #2
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fb8a 	bl	8003f30 <RCCEx_PLL3_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003826:	2b00      	cmp	r3, #0
 8003828:	d003      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800382e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003832:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003836:	2b00      	cmp	r3, #0
 8003838:	d101      	bne.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
}
 8003840:	4618      	mov	r0, r3
 8003842:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003846:	46bd      	mov	sp, r7
 8003848:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800384c:	58024400 	.word	0x58024400

08003850 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003854:	f7fe fd96 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 8003858:	4602      	mov	r2, r0
 800385a:	4b06      	ldr	r3, [pc, #24]	@ (8003874 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	4904      	ldr	r1, [pc, #16]	@ (8003878 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003866:	5ccb      	ldrb	r3, [r1, r3]
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003870:	4618      	mov	r0, r3
 8003872:	bd80      	pop	{r7, pc}
 8003874:	58024400 	.word	0x58024400
 8003878:	08005568 	.word	0x08005568

0800387c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800387c:	b480      	push	{r7}
 800387e:	b089      	sub	sp, #36	@ 0x24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003884:	4ba1      	ldr	r3, [pc, #644]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800388e:	4b9f      	ldr	r3, [pc, #636]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	0b1b      	lsrs	r3, r3, #12
 8003894:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003898:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800389a:	4b9c      	ldr	r3, [pc, #624]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800389c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800389e:	091b      	lsrs	r3, r3, #4
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80038a6:	4b99      	ldr	r3, [pc, #612]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038aa:	08db      	lsrs	r3, r3, #3
 80038ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	ee07 3a90 	vmov	s15, r3
 80038ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 8111 	beq.w	8003aec <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	f000 8083 	beq.w	80039d8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	f200 80a1 	bhi.w	8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d003      	beq.n	80038e8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d056      	beq.n	8003994 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80038e6:	e099      	b.n	8003a1c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038e8:	4b88      	ldr	r3, [pc, #544]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0320 	and.w	r3, r3, #32
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d02d      	beq.n	8003950 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80038f4:	4b85      	ldr	r3, [pc, #532]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	08db      	lsrs	r3, r3, #3
 80038fa:	f003 0303 	and.w	r3, r3, #3
 80038fe:	4a84      	ldr	r2, [pc, #528]	@ (8003b10 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003900:	fa22 f303 	lsr.w	r3, r2, r3
 8003904:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	ee07 3a90 	vmov	s15, r3
 800390c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	ee07 3a90 	vmov	s15, r3
 8003916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800391a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800391e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003926:	ee07 3a90 	vmov	s15, r3
 800392a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800392e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003932:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800393a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800393e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800394a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800394e:	e087      	b.n	8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	ee07 3a90 	vmov	s15, r3
 8003956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003b18 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800395e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003962:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003964:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800396a:	ee07 3a90 	vmov	s15, r3
 800396e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003972:	ed97 6a03 	vldr	s12, [r7, #12]
 8003976:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800397a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800397e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003982:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800398a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800398e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003992:	e065      	b.n	8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	ee07 3a90 	vmov	s15, r3
 800399a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80039a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039a6:	4b59      	ldr	r3, [pc, #356]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ae:	ee07 3a90 	vmov	s15, r3
 80039b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039ba:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80039d6:	e043      	b.n	8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	ee07 3a90 	vmov	s15, r3
 80039de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039e2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003b20 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80039e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039ea:	4b48      	ldr	r3, [pc, #288]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80039fe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a1a:	e021      	b.n	8003a60 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	ee07 3a90 	vmov	s15, r3
 8003a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a26:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b1c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a2e:	4b37      	ldr	r3, [pc, #220]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a42:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003b14 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a5e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003a60:	4b2a      	ldr	r3, [pc, #168]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a64:	0a5b      	lsrs	r3, r3, #9
 8003a66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a6a:	ee07 3a90 	vmov	s15, r3
 8003a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003a86:	ee17 2a90 	vmov	r2, s15
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a92:	0c1b      	lsrs	r3, r3, #16
 8003a94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a98:	ee07 3a90 	vmov	s15, r3
 8003a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003aa0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8003aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ab4:	ee17 2a90 	vmov	r2, s15
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003abc:	4b13      	ldr	r3, [pc, #76]	@ (8003b0c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ac0:	0e1b      	lsrs	r3, r3, #24
 8003ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ac6:	ee07 3a90 	vmov	s15, r3
 8003aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ace:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ae2:	ee17 2a90 	vmov	r2, s15
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003aea:	e008      	b.n	8003afe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	609a      	str	r2, [r3, #8]
}
 8003afe:	bf00      	nop
 8003b00:	3724      	adds	r7, #36	@ 0x24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	03d09000 	.word	0x03d09000
 8003b14:	46000000 	.word	0x46000000
 8003b18:	4c742400 	.word	0x4c742400
 8003b1c:	4a742400 	.word	0x4a742400
 8003b20:	4bbebc20 	.word	0x4bbebc20

08003b24 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b2c:	4ba1      	ldr	r3, [pc, #644]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b30:	f003 0303 	and.w	r3, r3, #3
 8003b34:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003b36:	4b9f      	ldr	r3, [pc, #636]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3a:	0d1b      	lsrs	r3, r3, #20
 8003b3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b40:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003b42:	4b9c      	ldr	r3, [pc, #624]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b46:	0a1b      	lsrs	r3, r3, #8
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003b4e:	4b99      	ldr	r3, [pc, #612]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b52:	08db      	lsrs	r3, r3, #3
 8003b54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	fb02 f303 	mul.w	r3, r2, r3
 8003b5e:	ee07 3a90 	vmov	s15, r3
 8003b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f000 8111 	beq.w	8003d94 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	f000 8083 	beq.w	8003c80 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	f200 80a1 	bhi.w	8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d003      	beq.n	8003b90 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d056      	beq.n	8003c3c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003b8e:	e099      	b.n	8003cc4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b90:	4b88      	ldr	r3, [pc, #544]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d02d      	beq.n	8003bf8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b9c:	4b85      	ldr	r3, [pc, #532]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	4a84      	ldr	r2, [pc, #528]	@ (8003db8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bac:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	ee07 3a90 	vmov	s15, r3
 8003bb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc6:	4b7b      	ldr	r3, [pc, #492]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	ee07 3a90 	vmov	s15, r3
 8003bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bda:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003bf6:	e087      	b.n	8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003c06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c0a:	4b6a      	ldr	r3, [pc, #424]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c12:	ee07 3a90 	vmov	s15, r3
 8003c16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c3a:	e065      	b.n	8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003c4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4e:	4b59      	ldr	r3, [pc, #356]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c56:	ee07 3a90 	vmov	s15, r3
 8003c5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c62:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c7e:	e043      	b.n	8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	ee07 3a90 	vmov	s15, r3
 8003c86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003c8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c92:	4b48      	ldr	r3, [pc, #288]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ca2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003caa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cc2:	e021      	b.n	8003d08 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	ee07 3a90 	vmov	s15, r3
 8003cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cce:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd6:	4b37      	ldr	r3, [pc, #220]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cea:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003dbc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d06:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003d08:	4b2a      	ldr	r3, [pc, #168]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d0c:	0a5b      	lsrs	r3, r3, #9
 8003d0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d12:	ee07 3a90 	vmov	s15, r3
 8003d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d22:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d2e:	ee17 2a90 	vmov	r2, s15
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003d36:	4b1f      	ldr	r3, [pc, #124]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d40:	ee07 3a90 	vmov	s15, r3
 8003d44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d50:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d5c:	ee17 2a90 	vmov	r2, s15
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003d64:	4b13      	ldr	r3, [pc, #76]	@ (8003db4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	0e1b      	lsrs	r3, r3, #24
 8003d6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d6e:	ee07 3a90 	vmov	s15, r3
 8003d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d76:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003d7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d7e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d8a:	ee17 2a90 	vmov	r2, s15
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003d92:	e008      	b.n	8003da6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	609a      	str	r2, [r3, #8]
}
 8003da6:	bf00      	nop
 8003da8:	3724      	adds	r7, #36	@ 0x24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	58024400 	.word	0x58024400
 8003db8:	03d09000 	.word	0x03d09000
 8003dbc:	46000000 	.word	0x46000000
 8003dc0:	4c742400 	.word	0x4c742400
 8003dc4:	4a742400 	.word	0x4a742400
 8003dc8:	4bbebc20 	.word	0x4bbebc20

08003dcc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003dda:	4b53      	ldr	r3, [pc, #332]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dde:	f003 0303 	and.w	r3, r3, #3
 8003de2:	2b03      	cmp	r3, #3
 8003de4:	d101      	bne.n	8003dea <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e099      	b.n	8003f1e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003dea:	4b4f      	ldr	r3, [pc, #316]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a4e      	ldr	r2, [pc, #312]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003df0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003df4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003df6:	f7fc ffc3 	bl	8000d80 <HAL_GetTick>
 8003dfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003dfc:	e008      	b.n	8003e10 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003dfe:	f7fc ffbf 	bl	8000d80 <HAL_GetTick>
 8003e02:	4602      	mov	r2, r0
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	1ad3      	subs	r3, r2, r3
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d901      	bls.n	8003e10 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e086      	b.n	8003f1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e10:	4b45      	ldr	r3, [pc, #276]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1f0      	bne.n	8003dfe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003e1c:	4b42      	ldr	r3, [pc, #264]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	031b      	lsls	r3, r3, #12
 8003e2a:	493f      	ldr	r1, [pc, #252]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	628b      	str	r3, [r1, #40]	@ 0x28
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	025b      	lsls	r3, r3, #9
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	041b      	lsls	r3, r3, #16
 8003e4e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003e52:	431a      	orrs	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	3b01      	subs	r3, #1
 8003e5a:	061b      	lsls	r3, r3, #24
 8003e5c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003e60:	4931      	ldr	r1, [pc, #196]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003e66:	4b30      	ldr	r3, [pc, #192]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e6a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	492d      	ldr	r1, [pc, #180]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003e78:	4b2b      	ldr	r3, [pc, #172]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7c:	f023 0220 	bic.w	r2, r3, #32
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	4928      	ldr	r1, [pc, #160]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003e8a:	4b27      	ldr	r3, [pc, #156]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e8e:	4a26      	ldr	r2, [pc, #152]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e90:	f023 0310 	bic.w	r3, r3, #16
 8003e94:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003e96:	4b24      	ldr	r3, [pc, #144]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003e98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <RCCEx_PLL2_Config+0x160>)
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	69d2      	ldr	r2, [r2, #28]
 8003ea2:	00d2      	lsls	r2, r2, #3
 8003ea4:	4920      	ldr	r1, [pc, #128]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003eac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eae:	4a1e      	ldr	r2, [pc, #120]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec0:	4a19      	ldr	r2, [pc, #100]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ec2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003ec8:	e00f      	b.n	8003eea <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d106      	bne.n	8003ede <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003ed0:	4b15      	ldr	r3, [pc, #84]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ed6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003eda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003edc:	e005      	b.n	8003eea <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003ede:	4b12      	ldr	r3, [pc, #72]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee2:	4a11      	ldr	r2, [pc, #68]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ee4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003eea:	4b0f      	ldr	r3, [pc, #60]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a0e      	ldr	r2, [pc, #56]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003ef0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003ef4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ef6:	f7fc ff43 	bl	8000d80 <HAL_GetTick>
 8003efa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003efc:	e008      	b.n	8003f10 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003efe:	f7fc ff3f 	bl	8000d80 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d901      	bls.n	8003f10 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e006      	b.n	8003f1e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f10:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <RCCEx_PLL2_Config+0x15c>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d0f0      	beq.n	8003efe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3710      	adds	r7, #16
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	58024400 	.word	0x58024400
 8003f2c:	ffff0007 	.word	0xffff0007

08003f30 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f3e:	4b53      	ldr	r3, [pc, #332]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d101      	bne.n	8003f4e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e099      	b.n	8004082 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003f4e:	4b4f      	ldr	r3, [pc, #316]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a4e      	ldr	r2, [pc, #312]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fc ff11 	bl	8000d80 <HAL_GetTick>
 8003f5e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8003f62:	f7fc ff0d 	bl	8000d80 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e086      	b.n	8004082 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003f74:	4b45      	ldr	r3, [pc, #276]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003f80:	4b42      	ldr	r3, [pc, #264]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f84:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	051b      	lsls	r3, r3, #20
 8003f8e:	493f      	ldr	r1, [pc, #252]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003f90:	4313      	orrs	r3, r2
 8003f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	025b      	lsls	r3, r3, #9
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	041b      	lsls	r3, r3, #16
 8003fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	061b      	lsls	r3, r3, #24
 8003fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003fc4:	4931      	ldr	r1, [pc, #196]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003fca:	4b30      	ldr	r3, [pc, #192]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	492d      	ldr	r1, [pc, #180]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	4928      	ldr	r1, [pc, #160]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003fee:	4b27      	ldr	r3, [pc, #156]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff2:	4a26      	ldr	r2, [pc, #152]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ff8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8003ffc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ffe:	4b24      	ldr	r3, [pc, #144]	@ (8004090 <RCCEx_PLL3_Config+0x160>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	69d2      	ldr	r2, [r2, #28]
 8004006:	00d2      	lsls	r2, r2, #3
 8004008:	4920      	ldr	r1, [pc, #128]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 800400a:	4313      	orrs	r3, r2
 800400c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800400e:	4b1f      	ldr	r3, [pc, #124]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004012:	4a1e      	ldr	r2, [pc, #120]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004018:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d106      	bne.n	800402e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004020:	4b1a      	ldr	r3, [pc, #104]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004024:	4a19      	ldr	r2, [pc, #100]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004026:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800402a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800402c:	e00f      	b.n	800404e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d106      	bne.n	8004042 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004034:	4b15      	ldr	r3, [pc, #84]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004038:	4a14      	ldr	r2, [pc, #80]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 800403a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800403e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004040:	e005      	b.n	800404e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004042:	4b12      	ldr	r3, [pc, #72]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004044:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004046:	4a11      	ldr	r2, [pc, #68]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004048:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800404c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800404e:	4b0f      	ldr	r3, [pc, #60]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a0e      	ldr	r2, [pc, #56]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004058:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800405a:	f7fc fe91 	bl	8000d80 <HAL_GetTick>
 800405e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004060:	e008      	b.n	8004074 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004062:	f7fc fe8d 	bl	8000d80 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d901      	bls.n	8004074 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e006      	b.n	8004082 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004074:	4b05      	ldr	r3, [pc, #20]	@ (800408c <RCCEx_PLL3_Config+0x15c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0f0      	beq.n	8004062 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004080:	7bfb      	ldrb	r3, [r7, #15]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	58024400 	.word	0x58024400
 8004090:	ffff0007 	.word	0xffff0007

08004094 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e042      	b.n	800412c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d106      	bne.n	80040be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f7fc fc8f 	bl	80009dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2224      	movs	r2, #36	@ 0x24
 80040c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f022 0201 	bic.w	r2, r2, #1
 80040d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fee6 	bl	8004eb0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 f97b 	bl	80043e0 <UART_SetConfig>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d101      	bne.n	80040f4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e01b      	b.n	800412c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004102:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689a      	ldr	r2, [r3, #8]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0201 	orr.w	r2, r2, #1
 8004122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 ff65 	bl	8004ff4 <UART_CheckIdleState>
 800412a:	4603      	mov	r3, r0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	4613      	mov	r3, r2
 8004142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414a:	2b20      	cmp	r3, #32
 800414c:	d17b      	bne.n	8004246 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_UART_Transmit+0x26>
 8004154:	88fb      	ldrh	r3, [r7, #6]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e074      	b.n	8004248 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2200      	movs	r2, #0
 8004162:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2221      	movs	r2, #33	@ 0x21
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800416e:	f7fc fe07 	bl	8000d80 <HAL_GetTick>
 8004172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	88fa      	ldrh	r2, [r7, #6]
 8004178:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	88fa      	ldrh	r2, [r7, #6]
 8004180:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418c:	d108      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d104      	bne.n	80041a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004196:	2300      	movs	r3, #0
 8004198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	61bb      	str	r3, [r7, #24]
 800419e:	e003      	b.n	80041a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80041a8:	e030      	b.n	800420c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	2180      	movs	r1, #128	@ 0x80
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f000 ffc7 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e03d      	b.n	8004248 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d10b      	bne.n	80041ea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041d2:	69bb      	ldr	r3, [r7, #24]
 80041d4:	881b      	ldrh	r3, [r3, #0]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3302      	adds	r3, #2
 80041e6:	61bb      	str	r3, [r7, #24]
 80041e8:	e007      	b.n	80041fa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	781a      	ldrb	r2, [r3, #0]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3301      	adds	r3, #1
 80041f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004200:	b29b      	uxth	r3, r3
 8004202:	3b01      	subs	r3, #1
 8004204:	b29a      	uxth	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1c8      	bne.n	80041aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	9300      	str	r3, [sp, #0]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2200      	movs	r2, #0
 8004220:	2140      	movs	r1, #64	@ 0x40
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 ff90 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e006      	b.n	8004248 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004242:	2300      	movs	r3, #0
 8004244:	e000      	b.n	8004248 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004246:	2302      	movs	r3, #2
  }
}
 8004248:	4618      	mov	r0, r3
 800424a:	3720      	adds	r7, #32
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004266:	2b20      	cmp	r3, #32
 8004268:	f040 80b5 	bne.w	80043d6 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d002      	beq.n	8004278 <HAL_UART_Receive+0x28>
 8004272:	88fb      	ldrh	r3, [r7, #6]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d101      	bne.n	800427c <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0ad      	b.n	80043d8 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2222      	movs	r2, #34	@ 0x22
 8004288:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004292:	f7fc fd75 	bl	8000d80 <HAL_GetTick>
 8004296:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	88fa      	ldrh	r2, [r7, #6]
 80042a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d10e      	bne.n	80042d0 <HAL_UART_Receive+0x80>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <HAL_UART_Receive+0x76>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80042c0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042c4:	e02d      	b.n	8004322 <HAL_UART_Receive+0xd2>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	22ff      	movs	r2, #255	@ 0xff
 80042ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042ce:	e028      	b.n	8004322 <HAL_UART_Receive+0xd2>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10d      	bne.n	80042f4 <HAL_UART_Receive+0xa4>
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_UART_Receive+0x9a>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	22ff      	movs	r2, #255	@ 0xff
 80042e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042e8:	e01b      	b.n	8004322 <HAL_UART_Receive+0xd2>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	227f      	movs	r2, #127	@ 0x7f
 80042ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80042f2:	e016      	b.n	8004322 <HAL_UART_Receive+0xd2>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042fc:	d10d      	bne.n	800431a <HAL_UART_Receive+0xca>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d104      	bne.n	8004310 <HAL_UART_Receive+0xc0>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	227f      	movs	r2, #127	@ 0x7f
 800430a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800430e:	e008      	b.n	8004322 <HAL_UART_Receive+0xd2>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	223f      	movs	r2, #63	@ 0x3f
 8004314:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004318:	e003      	b.n	8004322 <HAL_UART_Receive+0xd2>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2200      	movs	r2, #0
 800431e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8004328:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004332:	d108      	bne.n	8004346 <HAL_UART_Receive+0xf6>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d104      	bne.n	8004346 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800433c:	2300      	movs	r3, #0
 800433e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	61bb      	str	r3, [r7, #24]
 8004344:	e003      	b.n	800434e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800434a:	2300      	movs	r3, #0
 800434c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800434e:	e036      	b.n	80043be <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2200      	movs	r2, #0
 8004358:	2120      	movs	r1, #32
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fef4 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2220      	movs	r2, #32
 800436a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e032      	b.n	80043d8 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10c      	bne.n	8004392 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800437e:	b29a      	uxth	r2, r3
 8004380:	8a7b      	ldrh	r3, [r7, #18]
 8004382:	4013      	ands	r3, r2
 8004384:	b29a      	uxth	r2, r3
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3302      	adds	r3, #2
 800438e:	61bb      	str	r3, [r7, #24]
 8004390:	e00c      	b.n	80043ac <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	b2da      	uxtb	r2, r3
 800439a:	8a7b      	ldrh	r3, [r7, #18]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	4013      	ands	r3, r2
 80043a0:	b2da      	uxtb	r2, r3
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	3301      	adds	r3, #1
 80043aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	3b01      	subs	r3, #1
 80043b6:	b29a      	uxth	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1c2      	bne.n	8004350 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e000      	b.n	80043d8 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80043d6:	2302      	movs	r3, #2
  }
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3720      	adds	r7, #32
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b092      	sub	sp, #72	@ 0x48
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	431a      	orrs	r2, r3
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	431a      	orrs	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	4313      	orrs	r3, r2
 8004406:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	4bbe      	ldr	r3, [pc, #760]	@ (8004708 <UART_SetConfig+0x328>)
 8004410:	4013      	ands	r3, r2
 8004412:	697a      	ldr	r2, [r7, #20]
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004418:	430b      	orrs	r3, r1
 800441a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	699b      	ldr	r3, [r3, #24]
 8004436:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4ab3      	ldr	r2, [pc, #716]	@ (800470c <UART_SetConfig+0x32c>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004448:	4313      	orrs	r3, r2
 800444a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689a      	ldr	r2, [r3, #8]
 8004452:	4baf      	ldr	r3, [pc, #700]	@ (8004710 <UART_SetConfig+0x330>)
 8004454:	4013      	ands	r3, r2
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	6812      	ldr	r2, [r2, #0]
 800445a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800445c:	430b      	orrs	r3, r1
 800445e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004466:	f023 010f 	bic.w	r1, r3, #15
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4aa6      	ldr	r2, [pc, #664]	@ (8004714 <UART_SetConfig+0x334>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d177      	bne.n	8004570 <UART_SetConfig+0x190>
 8004480:	4ba5      	ldr	r3, [pc, #660]	@ (8004718 <UART_SetConfig+0x338>)
 8004482:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004488:	2b28      	cmp	r3, #40	@ 0x28
 800448a:	d86d      	bhi.n	8004568 <UART_SetConfig+0x188>
 800448c:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <UART_SetConfig+0xb4>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	08004539 	.word	0x08004539
 8004498:	08004569 	.word	0x08004569
 800449c:	08004569 	.word	0x08004569
 80044a0:	08004569 	.word	0x08004569
 80044a4:	08004569 	.word	0x08004569
 80044a8:	08004569 	.word	0x08004569
 80044ac:	08004569 	.word	0x08004569
 80044b0:	08004569 	.word	0x08004569
 80044b4:	08004541 	.word	0x08004541
 80044b8:	08004569 	.word	0x08004569
 80044bc:	08004569 	.word	0x08004569
 80044c0:	08004569 	.word	0x08004569
 80044c4:	08004569 	.word	0x08004569
 80044c8:	08004569 	.word	0x08004569
 80044cc:	08004569 	.word	0x08004569
 80044d0:	08004569 	.word	0x08004569
 80044d4:	08004549 	.word	0x08004549
 80044d8:	08004569 	.word	0x08004569
 80044dc:	08004569 	.word	0x08004569
 80044e0:	08004569 	.word	0x08004569
 80044e4:	08004569 	.word	0x08004569
 80044e8:	08004569 	.word	0x08004569
 80044ec:	08004569 	.word	0x08004569
 80044f0:	08004569 	.word	0x08004569
 80044f4:	08004551 	.word	0x08004551
 80044f8:	08004569 	.word	0x08004569
 80044fc:	08004569 	.word	0x08004569
 8004500:	08004569 	.word	0x08004569
 8004504:	08004569 	.word	0x08004569
 8004508:	08004569 	.word	0x08004569
 800450c:	08004569 	.word	0x08004569
 8004510:	08004569 	.word	0x08004569
 8004514:	08004559 	.word	0x08004559
 8004518:	08004569 	.word	0x08004569
 800451c:	08004569 	.word	0x08004569
 8004520:	08004569 	.word	0x08004569
 8004524:	08004569 	.word	0x08004569
 8004528:	08004569 	.word	0x08004569
 800452c:	08004569 	.word	0x08004569
 8004530:	08004569 	.word	0x08004569
 8004534:	08004561 	.word	0x08004561
 8004538:	2301      	movs	r3, #1
 800453a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800453e:	e222      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004540:	2304      	movs	r3, #4
 8004542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004546:	e21e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004548:	2308      	movs	r3, #8
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454e:	e21a      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004550:	2310      	movs	r3, #16
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004556:	e216      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004558:	2320      	movs	r3, #32
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	e212      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004560:	2340      	movs	r3, #64	@ 0x40
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004566:	e20e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004568:	2380      	movs	r3, #128	@ 0x80
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456e:	e20a      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a69      	ldr	r2, [pc, #420]	@ (800471c <UART_SetConfig+0x33c>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d130      	bne.n	80045dc <UART_SetConfig+0x1fc>
 800457a:	4b67      	ldr	r3, [pc, #412]	@ (8004718 <UART_SetConfig+0x338>)
 800457c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	2b05      	cmp	r3, #5
 8004584:	d826      	bhi.n	80045d4 <UART_SetConfig+0x1f4>
 8004586:	a201      	add	r2, pc, #4	@ (adr r2, 800458c <UART_SetConfig+0x1ac>)
 8004588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800458c:	080045a5 	.word	0x080045a5
 8004590:	080045ad 	.word	0x080045ad
 8004594:	080045b5 	.word	0x080045b5
 8004598:	080045bd 	.word	0x080045bd
 800459c:	080045c5 	.word	0x080045c5
 80045a0:	080045cd 	.word	0x080045cd
 80045a4:	2300      	movs	r3, #0
 80045a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045aa:	e1ec      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045ac:	2304      	movs	r3, #4
 80045ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045b2:	e1e8      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045b4:	2308      	movs	r3, #8
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e1e4      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045bc:	2310      	movs	r3, #16
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e1e0      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045c4:	2320      	movs	r3, #32
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e1dc      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045cc:	2340      	movs	r3, #64	@ 0x40
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e1d8      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045d4:	2380      	movs	r3, #128	@ 0x80
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e1d4      	b.n	8004986 <UART_SetConfig+0x5a6>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a4f      	ldr	r2, [pc, #316]	@ (8004720 <UART_SetConfig+0x340>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d130      	bne.n	8004648 <UART_SetConfig+0x268>
 80045e6:	4b4c      	ldr	r3, [pc, #304]	@ (8004718 <UART_SetConfig+0x338>)
 80045e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d826      	bhi.n	8004640 <UART_SetConfig+0x260>
 80045f2:	a201      	add	r2, pc, #4	@ (adr r2, 80045f8 <UART_SetConfig+0x218>)
 80045f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f8:	08004611 	.word	0x08004611
 80045fc:	08004619 	.word	0x08004619
 8004600:	08004621 	.word	0x08004621
 8004604:	08004629 	.word	0x08004629
 8004608:	08004631 	.word	0x08004631
 800460c:	08004639 	.word	0x08004639
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e1b6      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004618:	2304      	movs	r3, #4
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461e:	e1b2      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004620:	2308      	movs	r3, #8
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e1ae      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004628:	2310      	movs	r3, #16
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e1aa      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004630:	2320      	movs	r3, #32
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e1a6      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004638:	2340      	movs	r3, #64	@ 0x40
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e1a2      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004640:	2380      	movs	r3, #128	@ 0x80
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e19e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a35      	ldr	r2, [pc, #212]	@ (8004724 <UART_SetConfig+0x344>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d130      	bne.n	80046b4 <UART_SetConfig+0x2d4>
 8004652:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <UART_SetConfig+0x338>)
 8004654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	2b05      	cmp	r3, #5
 800465c:	d826      	bhi.n	80046ac <UART_SetConfig+0x2cc>
 800465e:	a201      	add	r2, pc, #4	@ (adr r2, 8004664 <UART_SetConfig+0x284>)
 8004660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004664:	0800467d 	.word	0x0800467d
 8004668:	08004685 	.word	0x08004685
 800466c:	0800468d 	.word	0x0800468d
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e180      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e17c      	b.n	8004986 <UART_SetConfig+0x5a6>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e178      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e174      	b.n	8004986 <UART_SetConfig+0x5a6>
 800469c:	2320      	movs	r3, #32
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e170      	b.n	8004986 <UART_SetConfig+0x5a6>
 80046a4:	2340      	movs	r3, #64	@ 0x40
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e16c      	b.n	8004986 <UART_SetConfig+0x5a6>
 80046ac:	2380      	movs	r3, #128	@ 0x80
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e168      	b.n	8004986 <UART_SetConfig+0x5a6>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <UART_SetConfig+0x348>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d142      	bne.n	8004744 <UART_SetConfig+0x364>
 80046be:	4b16      	ldr	r3, [pc, #88]	@ (8004718 <UART_SetConfig+0x338>)
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	d838      	bhi.n	800473c <UART_SetConfig+0x35c>
 80046ca:	a201      	add	r2, pc, #4	@ (adr r2, 80046d0 <UART_SetConfig+0x2f0>)
 80046cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d0:	080046e9 	.word	0x080046e9
 80046d4:	080046f1 	.word	0x080046f1
 80046d8:	080046f9 	.word	0x080046f9
 80046dc:	08004701 	.word	0x08004701
 80046e0:	0800472d 	.word	0x0800472d
 80046e4:	08004735 	.word	0x08004735
 80046e8:	2300      	movs	r3, #0
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e14a      	b.n	8004986 <UART_SetConfig+0x5a6>
 80046f0:	2304      	movs	r3, #4
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e146      	b.n	8004986 <UART_SetConfig+0x5a6>
 80046f8:	2308      	movs	r3, #8
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e142      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004700:	2310      	movs	r3, #16
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e13e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004708:	cfff69f3 	.word	0xcfff69f3
 800470c:	58000c00 	.word	0x58000c00
 8004710:	11fff4ff 	.word	0x11fff4ff
 8004714:	40011000 	.word	0x40011000
 8004718:	58024400 	.word	0x58024400
 800471c:	40004400 	.word	0x40004400
 8004720:	40004800 	.word	0x40004800
 8004724:	40004c00 	.word	0x40004c00
 8004728:	40005000 	.word	0x40005000
 800472c:	2320      	movs	r3, #32
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004732:	e128      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004734:	2340      	movs	r3, #64	@ 0x40
 8004736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473a:	e124      	b.n	8004986 <UART_SetConfig+0x5a6>
 800473c:	2380      	movs	r3, #128	@ 0x80
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e120      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4acb      	ldr	r2, [pc, #812]	@ (8004a78 <UART_SetConfig+0x698>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d176      	bne.n	800483c <UART_SetConfig+0x45c>
 800474e:	4bcb      	ldr	r3, [pc, #812]	@ (8004a7c <UART_SetConfig+0x69c>)
 8004750:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004756:	2b28      	cmp	r3, #40	@ 0x28
 8004758:	d86c      	bhi.n	8004834 <UART_SetConfig+0x454>
 800475a:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0x380>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004805 	.word	0x08004805
 8004764:	08004835 	.word	0x08004835
 8004768:	08004835 	.word	0x08004835
 800476c:	08004835 	.word	0x08004835
 8004770:	08004835 	.word	0x08004835
 8004774:	08004835 	.word	0x08004835
 8004778:	08004835 	.word	0x08004835
 800477c:	08004835 	.word	0x08004835
 8004780:	0800480d 	.word	0x0800480d
 8004784:	08004835 	.word	0x08004835
 8004788:	08004835 	.word	0x08004835
 800478c:	08004835 	.word	0x08004835
 8004790:	08004835 	.word	0x08004835
 8004794:	08004835 	.word	0x08004835
 8004798:	08004835 	.word	0x08004835
 800479c:	08004835 	.word	0x08004835
 80047a0:	08004815 	.word	0x08004815
 80047a4:	08004835 	.word	0x08004835
 80047a8:	08004835 	.word	0x08004835
 80047ac:	08004835 	.word	0x08004835
 80047b0:	08004835 	.word	0x08004835
 80047b4:	08004835 	.word	0x08004835
 80047b8:	08004835 	.word	0x08004835
 80047bc:	08004835 	.word	0x08004835
 80047c0:	0800481d 	.word	0x0800481d
 80047c4:	08004835 	.word	0x08004835
 80047c8:	08004835 	.word	0x08004835
 80047cc:	08004835 	.word	0x08004835
 80047d0:	08004835 	.word	0x08004835
 80047d4:	08004835 	.word	0x08004835
 80047d8:	08004835 	.word	0x08004835
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004825 	.word	0x08004825
 80047e4:	08004835 	.word	0x08004835
 80047e8:	08004835 	.word	0x08004835
 80047ec:	08004835 	.word	0x08004835
 80047f0:	08004835 	.word	0x08004835
 80047f4:	08004835 	.word	0x08004835
 80047f8:	08004835 	.word	0x08004835
 80047fc:	08004835 	.word	0x08004835
 8004800:	0800482d 	.word	0x0800482d
 8004804:	2301      	movs	r3, #1
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480a:	e0bc      	b.n	8004986 <UART_SetConfig+0x5a6>
 800480c:	2304      	movs	r3, #4
 800480e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004812:	e0b8      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004814:	2308      	movs	r3, #8
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e0b4      	b.n	8004986 <UART_SetConfig+0x5a6>
 800481c:	2310      	movs	r3, #16
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e0b0      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004824:	2320      	movs	r3, #32
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e0ac      	b.n	8004986 <UART_SetConfig+0x5a6>
 800482c:	2340      	movs	r3, #64	@ 0x40
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004832:	e0a8      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004834:	2380      	movs	r3, #128	@ 0x80
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483a:	e0a4      	b.n	8004986 <UART_SetConfig+0x5a6>
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a8f      	ldr	r2, [pc, #572]	@ (8004a80 <UART_SetConfig+0x6a0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d130      	bne.n	80048a8 <UART_SetConfig+0x4c8>
 8004846:	4b8d      	ldr	r3, [pc, #564]	@ (8004a7c <UART_SetConfig+0x69c>)
 8004848:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484a:	f003 0307 	and.w	r3, r3, #7
 800484e:	2b05      	cmp	r3, #5
 8004850:	d826      	bhi.n	80048a0 <UART_SetConfig+0x4c0>
 8004852:	a201      	add	r2, pc, #4	@ (adr r2, 8004858 <UART_SetConfig+0x478>)
 8004854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004858:	08004871 	.word	0x08004871
 800485c:	08004879 	.word	0x08004879
 8004860:	08004881 	.word	0x08004881
 8004864:	08004889 	.word	0x08004889
 8004868:	08004891 	.word	0x08004891
 800486c:	08004899 	.word	0x08004899
 8004870:	2300      	movs	r3, #0
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e086      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004878:	2304      	movs	r3, #4
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e082      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004880:	2308      	movs	r3, #8
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e07e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004888:	2310      	movs	r3, #16
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e07a      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004890:	2320      	movs	r3, #32
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004896:	e076      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004898:	2340      	movs	r3, #64	@ 0x40
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e072      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e06e      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a75      	ldr	r2, [pc, #468]	@ (8004a84 <UART_SetConfig+0x6a4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d130      	bne.n	8004914 <UART_SetConfig+0x534>
 80048b2:	4b72      	ldr	r3, [pc, #456]	@ (8004a7c <UART_SetConfig+0x69c>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d826      	bhi.n	800490c <UART_SetConfig+0x52c>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0x4e4>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048ed 	.word	0x080048ed
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e050      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e04c      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e048      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fa:	e044      	b.n	8004986 <UART_SetConfig+0x5a6>
 80048fc:	2320      	movs	r3, #32
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004902:	e040      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004904:	2340      	movs	r3, #64	@ 0x40
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e03c      	b.n	8004986 <UART_SetConfig+0x5a6>
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e038      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a5b      	ldr	r2, [pc, #364]	@ (8004a88 <UART_SetConfig+0x6a8>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d130      	bne.n	8004980 <UART_SetConfig+0x5a0>
 800491e:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <UART_SetConfig+0x69c>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b05      	cmp	r3, #5
 8004928:	d826      	bhi.n	8004978 <UART_SetConfig+0x598>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x550>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004949 	.word	0x08004949
 8004934:	08004951 	.word	0x08004951
 8004938:	08004959 	.word	0x08004959
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	2302      	movs	r3, #2
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e01a      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e016      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e012      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e00e      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004968:	2320      	movs	r3, #32
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e00a      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004970:	2340      	movs	r3, #64	@ 0x40
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e006      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e002      	b.n	8004986 <UART_SetConfig+0x5a6>
 8004980:	2380      	movs	r3, #128	@ 0x80
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a3f      	ldr	r2, [pc, #252]	@ (8004a88 <UART_SetConfig+0x6a8>)
 800498c:	4293      	cmp	r3, r2
 800498e:	f040 80f8 	bne.w	8004b82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004992:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004996:	2b20      	cmp	r3, #32
 8004998:	dc46      	bgt.n	8004a28 <UART_SetConfig+0x648>
 800499a:	2b02      	cmp	r3, #2
 800499c:	f2c0 8082 	blt.w	8004aa4 <UART_SetConfig+0x6c4>
 80049a0:	3b02      	subs	r3, #2
 80049a2:	2b1e      	cmp	r3, #30
 80049a4:	d87e      	bhi.n	8004aa4 <UART_SetConfig+0x6c4>
 80049a6:	a201      	add	r2, pc, #4	@ (adr r2, 80049ac <UART_SetConfig+0x5cc>)
 80049a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ac:	08004a2f 	.word	0x08004a2f
 80049b0:	08004aa5 	.word	0x08004aa5
 80049b4:	08004a37 	.word	0x08004a37
 80049b8:	08004aa5 	.word	0x08004aa5
 80049bc:	08004aa5 	.word	0x08004aa5
 80049c0:	08004aa5 	.word	0x08004aa5
 80049c4:	08004a47 	.word	0x08004a47
 80049c8:	08004aa5 	.word	0x08004aa5
 80049cc:	08004aa5 	.word	0x08004aa5
 80049d0:	08004aa5 	.word	0x08004aa5
 80049d4:	08004aa5 	.word	0x08004aa5
 80049d8:	08004aa5 	.word	0x08004aa5
 80049dc:	08004aa5 	.word	0x08004aa5
 80049e0:	08004aa5 	.word	0x08004aa5
 80049e4:	08004a57 	.word	0x08004a57
 80049e8:	08004aa5 	.word	0x08004aa5
 80049ec:	08004aa5 	.word	0x08004aa5
 80049f0:	08004aa5 	.word	0x08004aa5
 80049f4:	08004aa5 	.word	0x08004aa5
 80049f8:	08004aa5 	.word	0x08004aa5
 80049fc:	08004aa5 	.word	0x08004aa5
 8004a00:	08004aa5 	.word	0x08004aa5
 8004a04:	08004aa5 	.word	0x08004aa5
 8004a08:	08004aa5 	.word	0x08004aa5
 8004a0c:	08004aa5 	.word	0x08004aa5
 8004a10:	08004aa5 	.word	0x08004aa5
 8004a14:	08004aa5 	.word	0x08004aa5
 8004a18:	08004aa5 	.word	0x08004aa5
 8004a1c:	08004aa5 	.word	0x08004aa5
 8004a20:	08004aa5 	.word	0x08004aa5
 8004a24:	08004a97 	.word	0x08004a97
 8004a28:	2b40      	cmp	r3, #64	@ 0x40
 8004a2a:	d037      	beq.n	8004a9c <UART_SetConfig+0x6bc>
 8004a2c:	e03a      	b.n	8004aa4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004a2e:	f7fe ff0f 	bl	8003850 <HAL_RCCEx_GetD3PCLK1Freq>
 8004a32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a34:	e03c      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f7fe ff1e 	bl	800387c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a44:	e034      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a46:	f107 0318 	add.w	r3, r7, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff f86a 	bl	8003b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a54:	e02c      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a56:	4b09      	ldr	r3, [pc, #36]	@ (8004a7c <UART_SetConfig+0x69c>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0320 	and.w	r3, r3, #32
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <UART_SetConfig+0x69c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	08db      	lsrs	r3, r3, #3
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	4a07      	ldr	r2, [pc, #28]	@ (8004a8c <UART_SetConfig+0x6ac>)
 8004a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a74:	e01c      	b.n	8004ab0 <UART_SetConfig+0x6d0>
 8004a76:	bf00      	nop
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	58024400 	.word	0x58024400
 8004a80:	40007800 	.word	0x40007800
 8004a84:	40007c00 	.word	0x40007c00
 8004a88:	58000c00 	.word	0x58000c00
 8004a8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b9d      	ldr	r3, [pc, #628]	@ (8004d08 <UART_SetConfig+0x928>)
 8004a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a94:	e00c      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a96:	4b9d      	ldr	r3, [pc, #628]	@ (8004d0c <UART_SetConfig+0x92c>)
 8004a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a9a:	e009      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004aa2:	e005      	b.n	8004ab0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004aae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	f000 81de 	beq.w	8004e74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004abc:	4a94      	ldr	r2, [pc, #592]	@ (8004d10 <UART_SetConfig+0x930>)
 8004abe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aca:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	4413      	add	r3, r2
 8004ad6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d305      	bcc.n	8004ae8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ae2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d903      	bls.n	8004af0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004aee:	e1c1      	b.n	8004e74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004af0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af2:	2200      	movs	r2, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	60fa      	str	r2, [r7, #12]
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004afc:	4a84      	ldr	r2, [pc, #528]	@ (8004d10 <UART_SetConfig+0x930>)
 8004afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	2200      	movs	r2, #0
 8004b06:	603b      	str	r3, [r7, #0]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b12:	f7fb fbe1 	bl	80002d8 <__aeabi_uldivmod>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4610      	mov	r0, r2
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	020b      	lsls	r3, r1, #8
 8004b28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b2c:	0202      	lsls	r2, r0, #8
 8004b2e:	6979      	ldr	r1, [r7, #20]
 8004b30:	6849      	ldr	r1, [r1, #4]
 8004b32:	0849      	lsrs	r1, r1, #1
 8004b34:	2000      	movs	r0, #0
 8004b36:	460c      	mov	r4, r1
 8004b38:	4605      	mov	r5, r0
 8004b3a:	eb12 0804 	adds.w	r8, r2, r4
 8004b3e:	eb43 0905 	adc.w	r9, r3, r5
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	469a      	mov	sl, r3
 8004b4a:	4693      	mov	fp, r2
 8004b4c:	4652      	mov	r2, sl
 8004b4e:	465b      	mov	r3, fp
 8004b50:	4640      	mov	r0, r8
 8004b52:	4649      	mov	r1, r9
 8004b54:	f7fb fbc0 	bl	80002d8 <__aeabi_uldivmod>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004b66:	d308      	bcc.n	8004b7a <UART_SetConfig+0x79a>
 8004b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b6e:	d204      	bcs.n	8004b7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	e17c      	b.n	8004e74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b80:	e178      	b.n	8004e74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b82:	697b      	ldr	r3, [r7, #20]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b8a:	f040 80c5 	bne.w	8004d18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004b8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	dc48      	bgt.n	8004c28 <UART_SetConfig+0x848>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	db7b      	blt.n	8004c92 <UART_SetConfig+0x8b2>
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d879      	bhi.n	8004c92 <UART_SetConfig+0x8b2>
 8004b9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004ba4 <UART_SetConfig+0x7c4>)
 8004ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba4:	08004c2f 	.word	0x08004c2f
 8004ba8:	08004c37 	.word	0x08004c37
 8004bac:	08004c93 	.word	0x08004c93
 8004bb0:	08004c93 	.word	0x08004c93
 8004bb4:	08004c3f 	.word	0x08004c3f
 8004bb8:	08004c93 	.word	0x08004c93
 8004bbc:	08004c93 	.word	0x08004c93
 8004bc0:	08004c93 	.word	0x08004c93
 8004bc4:	08004c4f 	.word	0x08004c4f
 8004bc8:	08004c93 	.word	0x08004c93
 8004bcc:	08004c93 	.word	0x08004c93
 8004bd0:	08004c93 	.word	0x08004c93
 8004bd4:	08004c93 	.word	0x08004c93
 8004bd8:	08004c93 	.word	0x08004c93
 8004bdc:	08004c93 	.word	0x08004c93
 8004be0:	08004c93 	.word	0x08004c93
 8004be4:	08004c5f 	.word	0x08004c5f
 8004be8:	08004c93 	.word	0x08004c93
 8004bec:	08004c93 	.word	0x08004c93
 8004bf0:	08004c93 	.word	0x08004c93
 8004bf4:	08004c93 	.word	0x08004c93
 8004bf8:	08004c93 	.word	0x08004c93
 8004bfc:	08004c93 	.word	0x08004c93
 8004c00:	08004c93 	.word	0x08004c93
 8004c04:	08004c93 	.word	0x08004c93
 8004c08:	08004c93 	.word	0x08004c93
 8004c0c:	08004c93 	.word	0x08004c93
 8004c10:	08004c93 	.word	0x08004c93
 8004c14:	08004c93 	.word	0x08004c93
 8004c18:	08004c93 	.word	0x08004c93
 8004c1c:	08004c93 	.word	0x08004c93
 8004c20:	08004c93 	.word	0x08004c93
 8004c24:	08004c85 	.word	0x08004c85
 8004c28:	2b40      	cmp	r3, #64	@ 0x40
 8004c2a:	d02e      	beq.n	8004c8a <UART_SetConfig+0x8aa>
 8004c2c:	e031      	b.n	8004c92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c2e:	f7fd fbd9 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8004c32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c34:	e033      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c36:	f7fd fbeb 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8004c3a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c3c:	e02f      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fe1a 	bl	800387c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c4c:	e027      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004c4e:	f107 0318 	add.w	r3, r7, #24
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fe ff66 	bl	8003b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004c58:	69fb      	ldr	r3, [r7, #28]
 8004c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c5c:	e01f      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	@ (8004d14 <UART_SetConfig+0x934>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0320 	and.w	r3, r3, #32
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d009      	beq.n	8004c7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d14 <UART_SetConfig+0x934>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	08db      	lsrs	r3, r3, #3
 8004c70:	f003 0303 	and.w	r3, r3, #3
 8004c74:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <UART_SetConfig+0x928>)
 8004c76:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004c7c:	e00f      	b.n	8004c9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004c7e:	4b22      	ldr	r3, [pc, #136]	@ (8004d08 <UART_SetConfig+0x928>)
 8004c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c82:	e00c      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c84:	4b21      	ldr	r3, [pc, #132]	@ (8004d0c <UART_SetConfig+0x92c>)
 8004c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c88:	e009      	b.n	8004c9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c90:	e005      	b.n	8004c9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 80e7 	beq.w	8004e74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004caa:	4a19      	ldr	r2, [pc, #100]	@ (8004d10 <UART_SetConfig+0x930>)
 8004cac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004cb8:	005a      	lsls	r2, r3, #1
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	085b      	lsrs	r3, r3, #1
 8004cc0:	441a      	add	r2, r3
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cce:	2b0f      	cmp	r3, #15
 8004cd0:	d916      	bls.n	8004d00 <UART_SetConfig+0x920>
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cd8:	d212      	bcs.n	8004d00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	f023 030f 	bic.w	r3, r3, #15
 8004ce2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ce6:	085b      	lsrs	r3, r3, #1
 8004ce8:	b29b      	uxth	r3, r3
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004cfc:	60da      	str	r2, [r3, #12]
 8004cfe:	e0b9      	b.n	8004e74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d06:	e0b5      	b.n	8004e74 <UART_SetConfig+0xa94>
 8004d08:	03d09000 	.word	0x03d09000
 8004d0c:	003d0900 	.word	0x003d0900
 8004d10:	08005578 	.word	0x08005578
 8004d14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d18:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004d1c:	2b20      	cmp	r3, #32
 8004d1e:	dc49      	bgt.n	8004db4 <UART_SetConfig+0x9d4>
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	db7c      	blt.n	8004e1e <UART_SetConfig+0xa3e>
 8004d24:	2b20      	cmp	r3, #32
 8004d26:	d87a      	bhi.n	8004e1e <UART_SetConfig+0xa3e>
 8004d28:	a201      	add	r2, pc, #4	@ (adr r2, 8004d30 <UART_SetConfig+0x950>)
 8004d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2e:	bf00      	nop
 8004d30:	08004dbb 	.word	0x08004dbb
 8004d34:	08004dc3 	.word	0x08004dc3
 8004d38:	08004e1f 	.word	0x08004e1f
 8004d3c:	08004e1f 	.word	0x08004e1f
 8004d40:	08004dcb 	.word	0x08004dcb
 8004d44:	08004e1f 	.word	0x08004e1f
 8004d48:	08004e1f 	.word	0x08004e1f
 8004d4c:	08004e1f 	.word	0x08004e1f
 8004d50:	08004ddb 	.word	0x08004ddb
 8004d54:	08004e1f 	.word	0x08004e1f
 8004d58:	08004e1f 	.word	0x08004e1f
 8004d5c:	08004e1f 	.word	0x08004e1f
 8004d60:	08004e1f 	.word	0x08004e1f
 8004d64:	08004e1f 	.word	0x08004e1f
 8004d68:	08004e1f 	.word	0x08004e1f
 8004d6c:	08004e1f 	.word	0x08004e1f
 8004d70:	08004deb 	.word	0x08004deb
 8004d74:	08004e1f 	.word	0x08004e1f
 8004d78:	08004e1f 	.word	0x08004e1f
 8004d7c:	08004e1f 	.word	0x08004e1f
 8004d80:	08004e1f 	.word	0x08004e1f
 8004d84:	08004e1f 	.word	0x08004e1f
 8004d88:	08004e1f 	.word	0x08004e1f
 8004d8c:	08004e1f 	.word	0x08004e1f
 8004d90:	08004e1f 	.word	0x08004e1f
 8004d94:	08004e1f 	.word	0x08004e1f
 8004d98:	08004e1f 	.word	0x08004e1f
 8004d9c:	08004e1f 	.word	0x08004e1f
 8004da0:	08004e1f 	.word	0x08004e1f
 8004da4:	08004e1f 	.word	0x08004e1f
 8004da8:	08004e1f 	.word	0x08004e1f
 8004dac:	08004e1f 	.word	0x08004e1f
 8004db0:	08004e11 	.word	0x08004e11
 8004db4:	2b40      	cmp	r3, #64	@ 0x40
 8004db6:	d02e      	beq.n	8004e16 <UART_SetConfig+0xa36>
 8004db8:	e031      	b.n	8004e1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dba:	f7fd fb13 	bl	80023e4 <HAL_RCC_GetPCLK1Freq>
 8004dbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dc0:	e033      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dc2:	f7fd fb25 	bl	8002410 <HAL_RCC_GetPCLK2Freq>
 8004dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004dc8:	e02f      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fe fd54 	bl	800387c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd8:	e027      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004dda:	f107 0318 	add.w	r3, r7, #24
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fe fea0 	bl	8003b24 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004de8:	e01f      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dea:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea0 <UART_SetConfig+0xac0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d009      	beq.n	8004e0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004df6:	4b2a      	ldr	r3, [pc, #168]	@ (8004ea0 <UART_SetConfig+0xac0>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	08db      	lsrs	r3, r3, #3
 8004dfc:	f003 0303 	and.w	r3, r3, #3
 8004e00:	4a28      	ldr	r2, [pc, #160]	@ (8004ea4 <UART_SetConfig+0xac4>)
 8004e02:	fa22 f303 	lsr.w	r3, r2, r3
 8004e06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e08:	e00f      	b.n	8004e2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004e0a:	4b26      	ldr	r3, [pc, #152]	@ (8004ea4 <UART_SetConfig+0xac4>)
 8004e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e0e:	e00c      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e10:	4b25      	ldr	r3, [pc, #148]	@ (8004ea8 <UART_SetConfig+0xac8>)
 8004e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e14:	e009      	b.n	8004e2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e1c:	e005      	b.n	8004e2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004e28:	bf00      	nop
    }

    if (pclk != 0U)
 8004e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d021      	beq.n	8004e74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	4a1d      	ldr	r2, [pc, #116]	@ (8004eac <UART_SetConfig+0xacc>)
 8004e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	085b      	lsrs	r3, r3, #1
 8004e48:	441a      	add	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e56:	2b0f      	cmp	r3, #15
 8004e58:	d909      	bls.n	8004e6e <UART_SetConfig+0xa8e>
 8004e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e60:	d205      	bcs.n	8004e6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e64:	b29a      	uxth	r2, r3
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60da      	str	r2, [r3, #12]
 8004e6c:	e002      	b.n	8004e74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	2200      	movs	r2, #0
 8004e88:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004e90:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3748      	adds	r7, #72	@ 0x48
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e9e:	bf00      	nop
 8004ea0:	58024400 	.word	0x58024400
 8004ea4:	03d09000 	.word	0x03d09000
 8004ea8:	003d0900 	.word	0x003d0900
 8004eac:	08005578 	.word	0x08005578

08004eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b083      	sub	sp, #12
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ede:	f003 0301 	and.w	r3, r3, #1
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00a      	beq.n	8004efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	430a      	orrs	r2, r1
 8004efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	f003 0304 	and.w	r3, r3, #4
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d00a      	beq.n	8004f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f44:	f003 0310 	and.w	r3, r3, #16
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f66:	f003 0320 	and.w	r3, r3, #32
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01a      	beq.n	8004fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fae:	d10a      	bne.n	8004fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00a      	beq.n	8004fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	430a      	orrs	r2, r1
 8004fe6:	605a      	str	r2, [r3, #4]
  }
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b098      	sub	sp, #96	@ 0x60
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005004:	f7fb febc 	bl	8000d80 <HAL_GetTick>
 8005008:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0308 	and.w	r3, r3, #8
 8005014:	2b08      	cmp	r3, #8
 8005016:	d12f      	bne.n	8005078 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005018:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800501c:	9300      	str	r3, [sp, #0]
 800501e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005020:	2200      	movs	r2, #0
 8005022:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f88e 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d022      	beq.n	8005078 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800503a:	e853 3f00 	ldrex	r3, [r3]
 800503e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005042:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005046:	653b      	str	r3, [r7, #80]	@ 0x50
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	647b      	str	r3, [r7, #68]	@ 0x44
 8005052:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005054:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005056:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800505e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	d1e6      	bne.n	8005032 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005074:	2303      	movs	r3, #3
 8005076:	e063      	b.n	8005140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d149      	bne.n	800511a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005086:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800508a:	9300      	str	r3, [sp, #0]
 800508c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800508e:	2200      	movs	r2, #0
 8005090:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 f857 	bl	8005148 <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d03c      	beq.n	800511a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	e853 3f00 	ldrex	r3, [r3]
 80050ac:	623b      	str	r3, [r7, #32]
   return(result);
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	461a      	mov	r2, r3
 80050bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050be:	633b      	str	r3, [r7, #48]	@ 0x30
 80050c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050c6:	e841 2300 	strex	r3, r2, [r1]
 80050ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1e6      	bne.n	80050a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	3308      	adds	r3, #8
 80050d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	e853 3f00 	ldrex	r3, [r3]
 80050e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0301 	bic.w	r3, r3, #1
 80050e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050f2:	61fa      	str	r2, [r7, #28]
 80050f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	69b9      	ldr	r1, [r7, #24]
 80050f8:	69fa      	ldr	r2, [r7, #28]
 80050fa:	e841 2300 	strex	r3, r2, [r1]
 80050fe:	617b      	str	r3, [r7, #20]
   return(result);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1e5      	bne.n	80050d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2220      	movs	r2, #32
 800510a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e012      	b.n	8005140 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2220      	movs	r2, #32
 800511e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2220      	movs	r2, #32
 8005126:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2200      	movs	r2, #0
 800513a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800513e:	2300      	movs	r3, #0
}
 8005140:	4618      	mov	r0, r3
 8005142:	3758      	adds	r7, #88	@ 0x58
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	603b      	str	r3, [r7, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005158:	e04f      	b.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005160:	d04b      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005162:	f7fb fe0d 	bl	8000d80 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	429a      	cmp	r2, r3
 8005170:	d302      	bcc.n	8005178 <UART_WaitOnFlagUntilTimeout+0x30>
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d101      	bne.n	800517c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005178:	2303      	movs	r3, #3
 800517a:	e04e      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d037      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b80      	cmp	r3, #128	@ 0x80
 800518e:	d034      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	2b40      	cmp	r3, #64	@ 0x40
 8005194:	d031      	beq.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	69db      	ldr	r3, [r3, #28]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d110      	bne.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2208      	movs	r2, #8
 80051aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 f839 	bl	8005224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2208      	movs	r2, #8
 80051b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e029      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051d4:	d111      	bne.n	80051fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 f81f 	bl	8005224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e00f      	b.n	800521a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	69da      	ldr	r2, [r3, #28]
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	4013      	ands	r3, r2
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	429a      	cmp	r2, r3
 8005208:	bf0c      	ite	eq
 800520a:	2301      	moveq	r3, #1
 800520c:	2300      	movne	r3, #0
 800520e:	b2db      	uxtb	r3, r3
 8005210:	461a      	mov	r2, r3
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	429a      	cmp	r2, r3
 8005216:	d0a0      	beq.n	800515a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b095      	sub	sp, #84	@ 0x54
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005240:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	461a      	mov	r2, r3
 8005248:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800524a:	643b      	str	r3, [r7, #64]	@ 0x40
 800524c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005250:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e6      	bne.n	800522c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	61fb      	str	r3, [r7, #28]
   return(result);
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	4b1e      	ldr	r3, [pc, #120]	@ (80052ec <UART_EndRxTransfer+0xc8>)
 8005272:	4013      	ands	r3, r2
 8005274:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800527e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005282:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005284:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005286:	e841 2300 	strex	r3, r2, [r1]
 800528a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800528c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1e5      	bne.n	800525e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d118      	bne.n	80052cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f023 0310 	bic.w	r3, r3, #16
 80052ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052b8:	61bb      	str	r3, [r7, #24]
 80052ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6979      	ldr	r1, [r7, #20]
 80052be:	69ba      	ldr	r2, [r7, #24]
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	613b      	str	r3, [r7, #16]
   return(result);
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e6      	bne.n	800529a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2220      	movs	r2, #32
 80052d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2200      	movs	r2, #0
 80052de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80052e0:	bf00      	nop
 80052e2:	3754      	adds	r7, #84	@ 0x54
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	effffffe 	.word	0xeffffffe

080052f0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_UARTEx_DisableFifoMode+0x16>
 8005302:	2302      	movs	r3, #2
 8005304:	e027      	b.n	8005356 <HAL_UARTEx_DisableFifoMode+0x66>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2201      	movs	r2, #1
 800530a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2224      	movs	r2, #36	@ 0x24
 8005312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0201 	bic.w	r2, r2, #1
 800532c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005334:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2200      	movs	r2, #0
 800533a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	68fa      	ldr	r2, [r7, #12]
 8005342:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2220      	movs	r2, #32
 8005348:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
 800536a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005372:	2b01      	cmp	r3, #1
 8005374:	d101      	bne.n	800537a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005376:	2302      	movs	r3, #2
 8005378:	e02d      	b.n	80053d6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2201      	movs	r2, #1
 800537e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2224      	movs	r2, #36	@ 0x24
 8005386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f022 0201 	bic.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f850 	bl	800545c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2200      	movs	r2, #0
 80053d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
 80053e6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e02d      	b.n	8005452 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	@ 0x24
 8005402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0201 	bic.w	r2, r2, #1
 800541c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f812 	bl	800545c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
	...

0800545c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2201      	movs	r2, #1
 8005470:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800547c:	e031      	b.n	80054e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800547e:	2310      	movs	r3, #16
 8005480:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005482:	2310      	movs	r3, #16
 8005484:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	0e5b      	lsrs	r3, r3, #25
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	0f5b      	lsrs	r3, r3, #29
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	f003 0307 	and.w	r3, r3, #7
 80054a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054a6:	7bbb      	ldrb	r3, [r7, #14]
 80054a8:	7b3a      	ldrb	r2, [r7, #12]
 80054aa:	4911      	ldr	r1, [pc, #68]	@ (80054f0 <UARTEx_SetNbDataToProcess+0x94>)
 80054ac:	5c8a      	ldrb	r2, [r1, r2]
 80054ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80054b2:	7b3a      	ldrb	r2, [r7, #12]
 80054b4:	490f      	ldr	r1, [pc, #60]	@ (80054f4 <UARTEx_SetNbDataToProcess+0x98>)
 80054b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80054b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80054bc:	b29a      	uxth	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	7b7a      	ldrb	r2, [r7, #13]
 80054c8:	4909      	ldr	r1, [pc, #36]	@ (80054f0 <UARTEx_SetNbDataToProcess+0x94>)
 80054ca:	5c8a      	ldrb	r2, [r1, r2]
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80054d0:	7b7a      	ldrb	r2, [r7, #13]
 80054d2:	4908      	ldr	r1, [pc, #32]	@ (80054f4 <UARTEx_SetNbDataToProcess+0x98>)
 80054d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80054d6:	fb93 f3f2 	sdiv	r3, r3, r2
 80054da:	b29a      	uxth	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80054e2:	bf00      	nop
 80054e4:	3714      	adds	r7, #20
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	08005590 	.word	0x08005590
 80054f4:	08005598 	.word	0x08005598

080054f8 <memset>:
 80054f8:	4402      	add	r2, r0
 80054fa:	4603      	mov	r3, r0
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d100      	bne.n	8005502 <memset+0xa>
 8005500:	4770      	bx	lr
 8005502:	f803 1b01 	strb.w	r1, [r3], #1
 8005506:	e7f9      	b.n	80054fc <memset+0x4>

08005508 <__libc_init_array>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	4d0d      	ldr	r5, [pc, #52]	@ (8005540 <__libc_init_array+0x38>)
 800550c:	4c0d      	ldr	r4, [pc, #52]	@ (8005544 <__libc_init_array+0x3c>)
 800550e:	1b64      	subs	r4, r4, r5
 8005510:	10a4      	asrs	r4, r4, #2
 8005512:	2600      	movs	r6, #0
 8005514:	42a6      	cmp	r6, r4
 8005516:	d109      	bne.n	800552c <__libc_init_array+0x24>
 8005518:	4d0b      	ldr	r5, [pc, #44]	@ (8005548 <__libc_init_array+0x40>)
 800551a:	4c0c      	ldr	r4, [pc, #48]	@ (800554c <__libc_init_array+0x44>)
 800551c:	f000 f818 	bl	8005550 <_init>
 8005520:	1b64      	subs	r4, r4, r5
 8005522:	10a4      	asrs	r4, r4, #2
 8005524:	2600      	movs	r6, #0
 8005526:	42a6      	cmp	r6, r4
 8005528:	d105      	bne.n	8005536 <__libc_init_array+0x2e>
 800552a:	bd70      	pop	{r4, r5, r6, pc}
 800552c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005530:	4798      	blx	r3
 8005532:	3601      	adds	r6, #1
 8005534:	e7ee      	b.n	8005514 <__libc_init_array+0xc>
 8005536:	f855 3b04 	ldr.w	r3, [r5], #4
 800553a:	4798      	blx	r3
 800553c:	3601      	adds	r6, #1
 800553e:	e7f2      	b.n	8005526 <__libc_init_array+0x1e>
 8005540:	080055a8 	.word	0x080055a8
 8005544:	080055a8 	.word	0x080055a8
 8005548:	080055a8 	.word	0x080055a8
 800554c:	080055ac 	.word	0x080055ac

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
