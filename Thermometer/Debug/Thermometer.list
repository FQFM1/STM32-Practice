
Thermometer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095d4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a98  08009878  08009878  0000a878  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800a310  0800a310  0000b310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800a318  0800a318  0000b318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800a31c  0800a31c  0000b31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800a320  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a0  240001d8  0800a4f8  0000c1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000878  0800a4f8  0000c878  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000c1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000ef8f  00000000  00000000  0000c206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002546  00000000  00000000  0001b195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c60  00000000  00000000  0001d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000958  00000000  00000000  0001e340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036b59  00000000  00000000  0001ec98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00011beb  00000000  00000000  000557f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001523a7  00000000  00000000  000673dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001b9783  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004468  00000000  00000000  001b97c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  001bdc30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800985c 	.word	0x0800985c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800985c 	.word	0x0800985c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <REGISTER_Reset>:

uint8_t readBuffer[6] = { 0 };

// Reset DHT20 register
void REGISTER_Reset(uint8_t addr)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af02      	add	r7, sp, #8
 800077e:	4603      	mov	r3, r0
 8000780:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer1[3] = { addr, 0x00, 0x00 };
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	753b      	strb	r3, [r7, #20]
 8000786:	2300      	movs	r3, #0
 8000788:	757b      	strb	r3, [r7, #21]
 800078a:	2300      	movs	r3, #0
 800078c:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&HI2C, DHT20_ADDRESS, sendBuffer1, 3, HAL_MAX_DELAY);
 800078e:	f107 0214 	add.w	r2, r7, #20
 8000792:	f04f 33ff 	mov.w	r3, #4294967295
 8000796:	9300      	str	r3, [sp, #0]
 8000798:	2303      	movs	r3, #3
 800079a:	2170      	movs	r1, #112	@ 0x70
 800079c:	4819      	ldr	r0, [pc, #100]	@ (8000804 <REGISTER_Reset+0x8c>)
 800079e:	f001 fd2d 	bl	80021fc <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 80007a2:	2005      	movs	r0, #5
 80007a4:	f001 f952 	bl	8001a4c <HAL_Delay>

	uint8_t readBuffer[3] = { 0, 0, 0 };
 80007a8:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <REGISTER_Reset+0x90>)
 80007aa:	f107 0310 	add.w	r3, r7, #16
 80007ae:	6812      	ldr	r2, [r2, #0]
 80007b0:	4611      	mov	r1, r2
 80007b2:	8019      	strh	r1, [r3, #0]
 80007b4:	3302      	adds	r3, #2
 80007b6:	0c12      	lsrs	r2, r2, #16
 80007b8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&HI2C, DHT20_ADDRESS, readBuffer, 3, HAL_MAX_DELAY);
 80007ba:	f107 0210 	add.w	r2, r7, #16
 80007be:	f04f 33ff 	mov.w	r3, #4294967295
 80007c2:	9300      	str	r3, [sp, #0]
 80007c4:	2303      	movs	r3, #3
 80007c6:	2170      	movs	r1, #112	@ 0x70
 80007c8:	480e      	ldr	r0, [pc, #56]	@ (8000804 <REGISTER_Reset+0x8c>)
 80007ca:	f001 fe2f 	bl	800242c <HAL_I2C_Master_Receive>

	HAL_Delay(10);
 80007ce:	200a      	movs	r0, #10
 80007d0:	f001 f93c 	bl	8001a4c <HAL_Delay>

	uint8_t sendBuffer2[3] = { 0xB0 | addr, readBuffer[1], readBuffer[2] };
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	733b      	strb	r3, [r7, #12]
 80007de:	7c7b      	ldrb	r3, [r7, #17]
 80007e0:	737b      	strb	r3, [r7, #13]
 80007e2:	7cbb      	ldrb	r3, [r7, #18]
 80007e4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&HI2C, DHT20_ADDRESS, sendBuffer2, 3, HAL_MAX_DELAY);
 80007e6:	f107 020c 	add.w	r2, r7, #12
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	9300      	str	r3, [sp, #0]
 80007f0:	2303      	movs	r3, #3
 80007f2:	2170      	movs	r1, #112	@ 0x70
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <REGISTER_Reset+0x8c>)
 80007f6:	f001 fd01 	bl	80021fc <HAL_I2C_Master_Transmit>
}
 80007fa:	bf00      	nop
 80007fc:	3718      	adds	r7, #24
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	24000248 	.word	0x24000248
 8000808:	08009878 	.word	0x08009878

0800080c <STATUS_Read>:

// Read DHT20 status
uint8_t STATUS_Read()
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af02      	add	r7, sp, #8
	uint8_t readBuffer = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(&HI2C, DHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 8000816:	1dfa      	adds	r2, r7, #7
 8000818:	f04f 33ff 	mov.w	r3, #4294967295
 800081c:	9300      	str	r3, [sp, #0]
 800081e:	2301      	movs	r3, #1
 8000820:	2170      	movs	r1, #112	@ 0x70
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <STATUS_Read+0x28>)
 8000824:	f001 fe02 	bl	800242c <HAL_I2C_Master_Receive>
	return readBuffer;
 8000828:	79fb      	ldrb	r3, [r7, #7]
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	24000248 	.word	0x24000248

08000838 <DHT20_Init>:
	*Temperature = data * 200.0f / (1 << 20) - 50;
}

// Initialize DHT20
void DHT20_Init()
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f001 f905 	bl	8001a4c <HAL_Delay>

	if((STATUS_Read() & 0x18) != 0x18)
 8000842:	f7ff ffe3 	bl	800080c <STATUS_Read>
 8000846:	4603      	mov	r3, r0
 8000848:	f003 0318 	and.w	r3, r3, #24
 800084c:	2b18      	cmp	r3, #24
 800084e:	d00b      	beq.n	8000868 <DHT20_Init+0x30>
	{
		REGISTER_Reset(0x1B);
 8000850:	201b      	movs	r0, #27
 8000852:	f7ff ff91 	bl	8000778 <REGISTER_Reset>
		REGISTER_Reset(0x1C);
 8000856:	201c      	movs	r0, #28
 8000858:	f7ff ff8e 	bl	8000778 <REGISTER_Reset>
		REGISTER_Reset(0x1E);
 800085c:	201e      	movs	r0, #30
 800085e:	f7ff ff8b 	bl	8000778 <REGISTER_Reset>
		HAL_Delay(10);
 8000862:	200a      	movs	r0, #10
 8000864:	f001 f8f2 	bl	8001a4c <HAL_Delay>
	}
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <DHT20_Read>:

// Read current temperature and humidity(common mode)
void DHT20_Read(float* Temperature, float* Humidity)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b088      	sub	sp, #32
 8000870:	af02      	add	r7, sp, #8
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
	uint8_t sendBuffer[3] = { 0xAC, 0x33, 0x00 };
 8000876:	4a37      	ldr	r2, [pc, #220]	@ (8000954 <DHT20_Read+0xe8>)
 8000878:	f107 0310 	add.w	r3, r7, #16
 800087c:	6812      	ldr	r2, [r2, #0]
 800087e:	4611      	mov	r1, r2
 8000880:	8019      	strh	r1, [r3, #0]
 8000882:	3302      	adds	r3, #2
 8000884:	0c12      	lsrs	r2, r2, #16
 8000886:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&HI2C, DHT20_ADDRESS, sendBuffer, 3, HAL_MAX_DELAY);
 8000888:	f107 0210 	add.w	r2, r7, #16
 800088c:	f04f 33ff 	mov.w	r3, #4294967295
 8000890:	9300      	str	r3, [sp, #0]
 8000892:	2303      	movs	r3, #3
 8000894:	2170      	movs	r1, #112	@ 0x70
 8000896:	4830      	ldr	r0, [pc, #192]	@ (8000958 <DHT20_Read+0xec>)
 8000898:	f001 fcb0 	bl	80021fc <HAL_I2C_Master_Transmit>

	HAL_Delay(80);
 800089c:	2050      	movs	r0, #80	@ 0x50
 800089e:	f001 f8d5 	bl	8001a4c <HAL_Delay>

	while((STATUS_Read() & 0x80) == 0x80)
 80008a2:	bf00      	nop
 80008a4:	f7ff ffb2 	bl	800080c <STATUS_Read>
 80008a8:	4603      	mov	r3, r0
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	2b80      	cmp	r3, #128	@ 0x80
 80008b0:	d0f8      	beq.n	80008a4 <DHT20_Read+0x38>
	{

	}

	uint8_t readBuffer[6] = { 0, 0, 0, 0, 0, 0 };
 80008b2:	4a2a      	ldr	r2, [pc, #168]	@ (800095c <DHT20_Read+0xf0>)
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	6018      	str	r0, [r3, #0]
 80008be:	3304      	adds	r3, #4
 80008c0:	8019      	strh	r1, [r3, #0]
	HAL_I2C_Master_Receive(&HI2C, DHT20_ADDRESS, readBuffer, 6, HAL_MAX_DELAY);
 80008c2:	f107 0208 	add.w	r2, r7, #8
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2306      	movs	r3, #6
 80008ce:	2170      	movs	r1, #112	@ 0x70
 80008d0:	4821      	ldr	r0, [pc, #132]	@ (8000958 <DHT20_Read+0xec>)
 80008d2:	f001 fdab 	bl	800242c <HAL_I2C_Master_Receive>

	uint32_t data = 0;
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
	data = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
 80008da:	7afb      	ldrb	r3, [r7, #11]
 80008dc:	091b      	lsrs	r3, r3, #4
 80008de:	b2db      	uxtb	r3, r3
 80008e0:	461a      	mov	r2, r3
 80008e2:	7abb      	ldrb	r3, [r7, #10]
 80008e4:	011b      	lsls	r3, r3, #4
 80008e6:	441a      	add	r2, r3
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	031b      	lsls	r3, r3, #12
 80008ec:	4413      	add	r3, r2
 80008ee:	617b      	str	r3, [r7, #20]
	*Humidity = data * 100.0f / (1 << 20);
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	ee07 3a90 	vmov	s15, r3
 80008f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008fa:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000960 <DHT20_Read+0xf4>
 80008fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000902:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000964 <DHT20_Read+0xf8>
 8000906:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	edc3 7a00 	vstr	s15, [r3]

	data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[4] << 8) + (uint32_t)readBuffer[5];
 8000910:	7afb      	ldrb	r3, [r7, #11]
 8000912:	041b      	lsls	r3, r3, #16
 8000914:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000918:	7b3b      	ldrb	r3, [r7, #12]
 800091a:	021b      	lsls	r3, r3, #8
 800091c:	4413      	add	r3, r2
 800091e:	7b7a      	ldrb	r2, [r7, #13]
 8000920:	4413      	add	r3, r2
 8000922:	617b      	str	r3, [r7, #20]
	*Temperature = data * 200.0f / (1 << 20) - 50;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	ee07 3a90 	vmov	s15, r3
 800092a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800092e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000968 <DHT20_Read+0xfc>
 8000932:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000936:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8000964 <DHT20_Read+0xf8>
 800093a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800093e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800096c <DHT20_Read+0x100>
 8000942:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edc3 7a00 	vstr	s15, [r3]
}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	0800987c 	.word	0x0800987c
 8000958:	24000248 	.word	0x24000248
 800095c:	08009880 	.word	0x08009880
 8000960:	42c80000 	.word	0x42c80000
 8000964:	49800000 	.word	0x49800000
 8000968:	43480000 	.word	0x43480000
 800096c:	42480000 	.word	0x42480000

08000970 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000970:	b480      	push	{r7}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000976:	4b19      	ldr	r3, [pc, #100]	@ (80009dc <MX_GPIO_Init+0x6c>)
 8000978:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097c:	4a17      	ldr	r2, [pc, #92]	@ (80009dc <MX_GPIO_Init+0x6c>)
 800097e:	f043 0304 	orr.w	r3, r3, #4
 8000982:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000986:	4b15      	ldr	r3, [pc, #84]	@ (80009dc <MX_GPIO_Init+0x6c>)
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800098c:	f003 0304 	and.w	r3, r3, #4
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000994:	4b11      	ldr	r3, [pc, #68]	@ (80009dc <MX_GPIO_Init+0x6c>)
 8000996:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099a:	4a10      	ldr	r2, [pc, #64]	@ (80009dc <MX_GPIO_Init+0x6c>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a4:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <MX_GPIO_Init+0x6c>)
 80009a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <MX_GPIO_Init+0x6c>)
 80009b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b8:	4a08      	ldr	r2, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x6c>)
 80009ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c2:	4b06      	ldr	r3, [pc, #24]	@ (80009dc <MX_GPIO_Init+0x6c>)
 80009c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009cc:	607b      	str	r3, [r7, #4]
 80009ce:	687b      	ldr	r3, [r7, #4]

}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	58024400 	.word	0x58024400

080009e0 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009e6:	4a1d      	ldr	r2, [pc, #116]	@ (8000a5c <MX_I2C1_Init+0x7c>)
 80009e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 80009ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009ec:	4a1c      	ldr	r2, [pc, #112]	@ (8000a60 <MX_I2C1_Init+0x80>)
 80009ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009f0:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009f6:	4b18      	ldr	r3, [pc, #96]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009f8:	2201      	movs	r2, #1
 80009fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009fc:	4b16      	ldr	r3, [pc, #88]	@ (8000a58 <MX_I2C1_Init+0x78>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a02:	4b15      	ldr	r3, [pc, #84]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a08:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a0e:	4b12      	ldr	r3, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a14:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a1a:	480f      	ldr	r0, [pc, #60]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a1c:	f001 fb52 	bl	80020c4 <HAL_I2C_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a26:	f000 fa63 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	480a      	ldr	r0, [pc, #40]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a2e:	f002 f899 	bl	8002b64 <HAL_I2CEx_ConfigAnalogFilter>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a38:	f000 fa5a 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4806      	ldr	r0, [pc, #24]	@ (8000a58 <MX_I2C1_Init+0x78>)
 8000a40:	f002 f8db 	bl	8002bfa <HAL_I2CEx_ConfigDigitalFilter>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a4a:	f000 fa51 	bl	8000ef0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f002 f920 	bl	8002c94 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a54:	bf00      	nop
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	240001f4 	.word	0x240001f4
 8000a5c:	40005400 	.word	0x40005400
 8000a60:	0050174f 	.word	0x0050174f

08000a64 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <MX_I2C2_Init+0x78>)
 8000a6c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x307075B1;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ae0 <MX_I2C2_Init+0x7c>)
 8000a72:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a92:	4b11      	ldr	r3, [pc, #68]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a9e:	480e      	ldr	r0, [pc, #56]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000aa0:	f001 fb10 	bl	80020c4 <HAL_I2C_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aaa:	f000 fa21 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aae:	2100      	movs	r1, #0
 8000ab0:	4809      	ldr	r0, [pc, #36]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ab2:	f002 f857 	bl	8002b64 <HAL_I2CEx_ConfigAnalogFilter>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000abc:	f000 fa18 	bl	8000ef0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4805      	ldr	r0, [pc, #20]	@ (8000ad8 <MX_I2C2_Init+0x74>)
 8000ac4:	f002 f899 	bl	8002bfa <HAL_I2CEx_ConfigDigitalFilter>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ace:	f000 fa0f 	bl	8000ef0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	24000248 	.word	0x24000248
 8000adc:	40005800 	.word	0x40005800
 8000ae0:	307075b1 	.word	0x307075b1

08000ae4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b0bc      	sub	sp, #240	@ 0xf0
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aec:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	22c0      	movs	r2, #192	@ 0xc0
 8000b02:	2100      	movs	r1, #0
 8000b04:	4618      	mov	r0, r3
 8000b06:	f005 fb94 	bl	8006232 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a4d      	ldr	r2, [pc, #308]	@ (8000c44 <HAL_I2C_MspInit+0x160>)
 8000b10:	4293      	cmp	r3, r2
 8000b12:	d147      	bne.n	8000ba4 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b14:	f04f 0208 	mov.w	r2, #8
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b26:	f107 0318 	add.w	r3, r7, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f003 f89a 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000b36:	f000 f9db 	bl	8000ef0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b43      	ldr	r3, [pc, #268]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b40:	4a41      	ldr	r2, [pc, #260]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b42:	f043 0302 	orr.w	r3, r3, #2
 8000b46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	617b      	str	r3, [r7, #20]
 8000b56:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000b58:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000b5c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	2312      	movs	r3, #18
 8000b62:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b72:	2304      	movs	r3, #4
 8000b74:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b78:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4833      	ldr	r0, [pc, #204]	@ (8000c4c <HAL_I2C_MspInit+0x168>)
 8000b80:	f001 f8f0 	bl	8001d64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b84:	4b30      	ldr	r3, [pc, #192]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b8a:	4a2f      	ldr	r2, [pc, #188]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b8c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b90:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b94:	4b2c      	ldr	r3, [pc, #176]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000b96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000ba2:	e04a      	b.n	8000c3a <HAL_I2C_MspInit+0x156>
  else if(i2cHandle->Instance==I2C2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a29      	ldr	r2, [pc, #164]	@ (8000c50 <HAL_I2C_MspInit+0x16c>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d145      	bne.n	8000c3a <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000bae:	f04f 0208 	mov.w	r2, #8
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc0:	f107 0318 	add.w	r3, r7, #24
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 f84d 	bl	8003c64 <HAL_RCCEx_PeriphCLKConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8000bd0:	f000 f98e 	bl	8000ef0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a1b      	ldr	r2, [pc, #108]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b18      	ldr	r3, [pc, #96]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000bf2:	2330      	movs	r3, #48	@ 0x30
 8000bf4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf8:	2312      	movs	r3, #18
 8000bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c0a:	2304      	movs	r3, #4
 8000c0c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c10:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c14:	4619      	mov	r1, r3
 8000c16:	480f      	ldr	r0, [pc, #60]	@ (8000c54 <HAL_I2C_MspInit+0x170>)
 8000c18:	f001 f8a4 	bl	8001d64 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000c1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c22:	4a09      	ldr	r2, [pc, #36]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000c24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_I2C_MspInit+0x164>)
 8000c2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
}
 8000c3a:	bf00      	nop
 8000c3c:	37f0      	adds	r7, #240	@ 0xf0
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40005400 	.word	0x40005400
 8000c48:	58024400 	.word	0x58024400
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	40005800 	.word	0x40005800
 8000c54:	58021c00 	.word	0x58021c00

08000c58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b09e      	sub	sp, #120	@ 0x78
 8000c5c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c5e:	f000 f91b 	bl	8000e98 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c62:	f000 fe61 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c66:	f000 f867 	bl	8000d38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c6a:	f7ff fe81 	bl	8000970 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000c6e:	f7ff feb7 	bl	80009e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000c72:	f7ff fef7 	bl	8000a64 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 8000c76:	2014      	movs	r0, #20
 8000c78:	f000 fee8 	bl	8001a4c <HAL_Delay>
  OLED_Init();
 8000c7c:	f000 f966 	bl	8000f4c <OLED_Init>

  HAL_Delay(100);
 8000c80:	2064      	movs	r0, #100	@ 0x64
 8000c82:	f000 fee3 	bl	8001a4c <HAL_Delay>
  DHT20_Init();
 8000c86:	f7ff fdd7 	bl	8000838 <DHT20_Init>

  char messageTemp[50] = { 0 };
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000c8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c92:	222e      	movs	r2, #46	@ 0x2e
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 facb 	bl	8006232 <memset>
  char messageHumi[50] = { 0 };
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	222e      	movs	r2, #46	@ 0x2e
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f005 fac2 	bl	8006232 <memset>
  float temp = 0, humi = 0;
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	f04f 0300 	mov.w	r3, #0
 8000cb8:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  DHT20_Read(&temp, &humi);
 8000cba:	463a      	mov	r2, r7
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fdd3 	bl	800086c <DHT20_Read>

	  sprintf(messageTemp, "Temp: %.1f ℃", temp);
 8000cc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000cce:	f107 003c 	add.w	r0, r7, #60	@ 0x3c
 8000cd2:	ec53 2b17 	vmov	r2, r3, d7
 8000cd6:	4915      	ldr	r1, [pc, #84]	@ (8000d2c <main+0xd4>)
 8000cd8:	f005 fa38 	bl	800614c <siprintf>
	  sprintf(messageHumi, "Humi: %.1f %%", humi);
 8000cdc:	edd7 7a00 	vldr	s15, [r7]
 8000ce0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ce4:	f107 0008 	add.w	r0, r7, #8
 8000ce8:	ec53 2b17 	vmov	r2, r3, d7
 8000cec:	4910      	ldr	r1, [pc, #64]	@ (8000d30 <main+0xd8>)
 8000cee:	f005 fa2d 	bl	800614c <siprintf>

	  OLED_NewFrame();
 8000cf2:	f000 f98b 	bl	800100c <OLED_NewFrame>
	  OLED_PrintString(0, 0, messageTemp, &font16x16, OLED_COLOR_NORMAL);
 8000cf6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	9300      	str	r3, [sp, #0]
 8000cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8000d34 <main+0xdc>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	2000      	movs	r0, #0
 8000d04:	f000 fba8 	bl	8001458 <OLED_PrintString>
	  OLED_PrintString(0, 17, messageHumi, &font16x16, OLED_COLOR_NORMAL);
 8000d08:	f107 0208 	add.w	r2, r7, #8
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <main+0xdc>)
 8000d12:	2111      	movs	r1, #17
 8000d14:	2000      	movs	r0, #0
 8000d16:	f000 fb9f 	bl	8001458 <OLED_PrintString>
	  OLED_ShowFrame();
 8000d1a:	f000 f983 	bl	8001024 <OLED_ShowFrame>

	  HAL_Delay(1000);
 8000d1e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d22:	f000 fe93 	bl	8001a4c <HAL_Delay>
	  DHT20_Read(&temp, &humi);
 8000d26:	bf00      	nop
 8000d28:	e7c7      	b.n	8000cba <main+0x62>
 8000d2a:	bf00      	nop
 8000d2c:	08009888 	.word	0x08009888
 8000d30:	08009898 	.word	0x08009898
 8000d34:	08009ec4 	.word	0x08009ec4

08000d38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09e      	sub	sp, #120	@ 0x78
 8000d3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d3e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d42:	224c      	movs	r2, #76	@ 0x4c
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f005 fa73 	bl	8006232 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d4c:	f107 030c 	add.w	r3, r7, #12
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	4618      	mov	r0, r3
 8000d56:	f005 fa6c 	bl	8006232 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000d5a:	2002      	movs	r0, #2
 8000d5c:	f001 ffbe 	bl	8002cdc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	4b49      	ldr	r3, [pc, #292]	@ (8000e8c <SystemClock_Config+0x154>)
 8000d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d68:	4a48      	ldr	r2, [pc, #288]	@ (8000e8c <SystemClock_Config+0x154>)
 8000d6a:	f023 0301 	bic.w	r3, r3, #1
 8000d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d70:	4b46      	ldr	r3, [pc, #280]	@ (8000e8c <SystemClock_Config+0x154>)
 8000d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
 8000d7a:	4b45      	ldr	r3, [pc, #276]	@ (8000e90 <SystemClock_Config+0x158>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	4a44      	ldr	r2, [pc, #272]	@ (8000e90 <SystemClock_Config+0x158>)
 8000d80:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000d84:	6193      	str	r3, [r2, #24]
 8000d86:	4b42      	ldr	r3, [pc, #264]	@ (8000e90 <SystemClock_Config+0x158>)
 8000d88:	699b      	ldr	r3, [r3, #24]
 8000d8a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d92:	bf00      	nop
 8000d94:	4b3e      	ldr	r3, [pc, #248]	@ (8000e90 <SystemClock_Config+0x158>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000da0:	d1f8      	bne.n	8000d94 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b3c      	ldr	r3, [pc, #240]	@ (8000e94 <SystemClock_Config+0x15c>)
 8000da4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000da8:	4a3a      	ldr	r2, [pc, #232]	@ (8000e94 <SystemClock_Config+0x15c>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000db2:	4b38      	ldr	r3, [pc, #224]	@ (8000e94 <SystemClock_Config+0x15c>)
 8000db4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	4b32      	ldr	r3, [pc, #200]	@ (8000e90 <SystemClock_Config+0x158>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a31      	ldr	r2, [pc, #196]	@ (8000e90 <SystemClock_Config+0x158>)
 8000dca:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b2f      	ldr	r3, [pc, #188]	@ (8000e90 <SystemClock_Config+0x158>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <SystemClock_Config+0x154>)
 8000ddc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dde:	4a2b      	ldr	r2, [pc, #172]	@ (8000e8c <SystemClock_Config+0x154>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000de6:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <SystemClock_Config+0x154>)
 8000de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000df2:	bf00      	nop
 8000df4:	4b26      	ldr	r3, [pc, #152]	@ (8000e90 <SystemClock_Config+0x158>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000dfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000e00:	d1f8      	bne.n	8000df4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e02:	2302      	movs	r3, #2
 8000e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000e06:	2301      	movs	r3, #1
 8000e08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0a:	2340      	movs	r3, #64	@ 0x40
 8000e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e12:	2300      	movs	r3, #0
 8000e14:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e16:	2304      	movs	r3, #4
 8000e18:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e1a:	233c      	movs	r3, #60	@ 0x3c
 8000e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e2a:	230c      	movs	r3, #12
 8000e2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f001 ff88 	bl	8002d50 <HAL_RCC_OscConfig>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000e46:	f000 f853 	bl	8000ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4a:	233f      	movs	r3, #63	@ 0x3f
 8000e4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000e56:	2308      	movs	r3, #8
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000e5a:	2340      	movs	r3, #64	@ 0x40
 8000e5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000e5e:	2340      	movs	r3, #64	@ 0x40
 8000e60:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000e62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000e68:	2340      	movs	r3, #64	@ 0x40
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f002 fbc6 	bl	8003604 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000e7e:	f000 f837 	bl	8000ef0 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3778      	adds	r7, #120	@ 0x78
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	58000400 	.word	0x58000400
 8000e90:	58024800 	.word	0x58024800
 8000e94:	58024400 	.word	0x58024400

08000e98 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e9e:	463b      	mov	r3, r7
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	605a      	str	r2, [r3, #4]
 8000ea6:	609a      	str	r2, [r3, #8]
 8000ea8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000eaa:	f000 fee3 	bl	8001c74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000eba:	231f      	movs	r3, #31
 8000ebc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ebe:	2387      	movs	r3, #135	@ 0x87
 8000ec0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eda:	463b      	mov	r3, r7
 8000edc:	4618      	mov	r0, r3
 8000ede:	f000 ff01 	bl	8001ce4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ee2:	2004      	movs	r0, #4
 8000ee4:	f000 fede 	bl	8001ca4 <HAL_MPU_Enable>

}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef4:	b672      	cpsid	i
}
 8000ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ef8:	bf00      	nop
 8000efa:	e7fd      	b.n	8000ef8 <Error_Handler+0x8>

08000efc <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&HI2C, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	9200      	str	r2, [sp, #0]
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	2178      	movs	r1, #120	@ 0x78
 8000f16:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <OLED_Send+0x28>)
 8000f18:	f001 f970 	bl	80021fc <HAL_I2C_Master_Transmit>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	240001f4 	.word	0x240001f4

08000f28 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000f32:	4a05      	ldr	r2, [pc, #20]	@ (8000f48 <OLED_SendCmd+0x20>)
 8000f34:	79fb      	ldrb	r3, [r7, #7]
 8000f36:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000f38:	2102      	movs	r1, #2
 8000f3a:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <OLED_SendCmd+0x20>)
 8000f3c:	f7ff ffde 	bl	8000efc <OLED_Send>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	2400069c 	.word	0x2400069c

08000f4c <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 8000f50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f54:	f000 fd7a 	bl	8001a4c <HAL_Delay>

  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000f58:	20ae      	movs	r0, #174	@ 0xae
 8000f5a:	f7ff ffe5 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000f5e:	2020      	movs	r0, #32
 8000f60:	f7ff ffe2 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000f64:	2010      	movs	r0, #16
 8000f66:	f7ff ffdf 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8000f6a:	20b0      	movs	r0, #176	@ 0xb0
 8000f6c:	f7ff ffdc 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000f70:	20c8      	movs	r0, #200	@ 0xc8
 8000f72:	f7ff ffd9 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f7ff ffd6 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000f7c:	2010      	movs	r0, #16
 8000f7e:	f7ff ffd3 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8000f82:	2040      	movs	r0, #64	@ 0x40
 8000f84:	f7ff ffd0 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8000f88:	2081      	movs	r0, #129	@ 0x81
 8000f8a:	f7ff ffcd 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8000f8e:	20df      	movs	r0, #223	@ 0xdf
 8000f90:	f7ff ffca 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8000f94:	20a1      	movs	r0, #161	@ 0xa1
 8000f96:	f7ff ffc7 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8000f9a:	20a6      	movs	r0, #166	@ 0xa6
 8000f9c:	f7ff ffc4 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8000fa0:	20a8      	movs	r0, #168	@ 0xa8
 8000fa2:	f7ff ffc1 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8000fa6:	203f      	movs	r0, #63	@ 0x3f
 8000fa8:	f7ff ffbe 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000fac:	20a4      	movs	r0, #164	@ 0xa4
 8000fae:	f7ff ffbb 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000fb2:	20d3      	movs	r0, #211	@ 0xd3
 8000fb4:	f7ff ffb8 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f7ff ffb5 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000fbe:	20d5      	movs	r0, #213	@ 0xd5
 8000fc0:	f7ff ffb2 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000fc4:	20f0      	movs	r0, #240	@ 0xf0
 8000fc6:	f7ff ffaf 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8000fca:	20d9      	movs	r0, #217	@ 0xd9
 8000fcc:	f7ff ffac 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000fd0:	2022      	movs	r0, #34	@ 0x22
 8000fd2:	f7ff ffa9 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8000fd6:	20da      	movs	r0, #218	@ 0xda
 8000fd8:	f7ff ffa6 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000fdc:	2012      	movs	r0, #18
 8000fde:	f7ff ffa3 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000fe2:	20db      	movs	r0, #219	@ 0xdb
 8000fe4:	f7ff ffa0 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000fe8:	2020      	movs	r0, #32
 8000fea:	f7ff ff9d 	bl	8000f28 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000fee:	208d      	movs	r0, #141	@ 0x8d
 8000ff0:	f7ff ff9a 	bl	8000f28 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000ff4:	2014      	movs	r0, #20
 8000ff6:	f7ff ff97 	bl	8000f28 <OLED_SendCmd>

  OLED_NewFrame();
 8000ffa:	f000 f807 	bl	800100c <OLED_NewFrame>
  OLED_ShowFrame();
 8000ffe:	f000 f811 	bl	8001024 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8001002:	20af      	movs	r0, #175	@ 0xaf
 8001004:	f7ff ff90 	bl	8000f28 <OLED_SendCmd>
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8001010:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001014:	2100      	movs	r1, #0
 8001016:	4802      	ldr	r0, [pc, #8]	@ (8001020 <OLED_NewFrame+0x14>)
 8001018:	f005 f90b 	bl	8006232 <memset>
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	2400029c 	.word	0x2400029c

08001024 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <OLED_ShowFrame+0x5c>)
 800102c:	2240      	movs	r2, #64	@ 0x40
 800102e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	71fb      	strb	r3, [r7, #7]
 8001034:	e01b      	b.n	800106e <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	3b50      	subs	r3, #80	@ 0x50
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	f7ff ff73 	bl	8000f28 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff70 	bl	8000f28 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8001048:	2010      	movs	r0, #16
 800104a:	f7ff ff6d 	bl	8000f28 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 800104e:	480d      	ldr	r0, [pc, #52]	@ (8001084 <OLED_ShowFrame+0x60>)
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	01db      	lsls	r3, r3, #7
 8001054:	4a0c      	ldr	r2, [pc, #48]	@ (8001088 <OLED_ShowFrame+0x64>)
 8001056:	4413      	add	r3, r2
 8001058:	2280      	movs	r2, #128	@ 0x80
 800105a:	4619      	mov	r1, r3
 800105c:	f005 f969 	bl	8006332 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8001060:	2181      	movs	r1, #129	@ 0x81
 8001062:	4807      	ldr	r0, [pc, #28]	@ (8001080 <OLED_ShowFrame+0x5c>)
 8001064:	f7ff ff4a 	bl	8000efc <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	3301      	adds	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b07      	cmp	r3, #7
 8001072:	d9e0      	bls.n	8001036 <OLED_ShowFrame+0x12>
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	240006a0 	.word	0x240006a0
 8001084:	240006a1 	.word	0x240006a1
 8001088:	2400029c 	.word	0x2400029c

0800108c <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 800108c:	b490      	push	{r4, r7}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	4604      	mov	r4, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	461a      	mov	r2, r3
 800109a:	4623      	mov	r3, r4
 800109c:	71fb      	strb	r3, [r7, #7]
 800109e:	4603      	mov	r3, r0
 80010a0:	71bb      	strb	r3, [r7, #6]
 80010a2:	460b      	mov	r3, r1
 80010a4:	717b      	strb	r3, [r7, #5]
 80010a6:	4613      	mov	r3, r2
 80010a8:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	2b07      	cmp	r3, #7
 80010ae:	d860      	bhi.n	8001172 <OLED_SetByte_Fine+0xe6>
 80010b0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db5c      	blt.n	8001172 <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 80010b8:	7d3b      	ldrb	r3, [r7, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d002      	beq.n	80010c4 <OLED_SetByte_Fine+0x38>
    data = ~data;
 80010be:	797b      	ldrb	r3, [r7, #5]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 80010c4:	7c3b      	ldrb	r3, [r7, #16]
 80010c6:	3301      	adds	r3, #1
 80010c8:	22ff      	movs	r2, #255	@ 0xff
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	b25a      	sxtb	r2, r3
 80010d0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	b25a      	sxtb	r2, r3
 80010d8:	793b      	ldrb	r3, [r7, #4]
 80010da:	f1c3 0308 	rsb	r3, r3, #8
 80010de:	21ff      	movs	r1, #255	@ 0xff
 80010e0:	fa41 f303 	asr.w	r3, r1, r3
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b23      	ldr	r3, [pc, #140]	@ (800117c <OLED_SetByte_Fine+0xf0>)
 80010ee:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	4922      	ldr	r1, [pc, #136]	@ (8001180 <OLED_SetByte_Fine+0xf4>)
 80010f6:	01d2      	lsls	r2, r2, #7
 80010f8:	440a      	add	r2, r1
 80010fa:	4413      	add	r3, r2
 80010fc:	7818      	ldrb	r0, [r3, #0]
 80010fe:	4b1f      	ldr	r3, [pc, #124]	@ (800117c <OLED_SetByte_Fine+0xf0>)
 8001100:	7819      	ldrb	r1, [r3, #0]
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	79bb      	ldrb	r3, [r7, #6]
 8001106:	4001      	ands	r1, r0
 8001108:	b2c8      	uxtb	r0, r1
 800110a:	491d      	ldr	r1, [pc, #116]	@ (8001180 <OLED_SetByte_Fine+0xf4>)
 800110c:	01d2      	lsls	r2, r2, #7
 800110e:	440a      	add	r2, r1
 8001110:	4413      	add	r3, r2
 8001112:	4602      	mov	r2, r0
 8001114:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8001116:	7c3b      	ldrb	r3, [r7, #16]
 8001118:	3301      	adds	r3, #1
 800111a:	22ff      	movs	r2, #255	@ 0xff
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	b25b      	sxtb	r3, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	b25a      	sxtb	r2, r3
 8001126:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800112a:	4013      	ands	r3, r2
 800112c:	b25a      	sxtb	r2, r3
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	f1c3 0308 	rsb	r3, r3, #8
 8001134:	21ff      	movs	r1, #255	@ 0xff
 8001136:	fa41 f303 	asr.w	r3, r1, r3
 800113a:	b25b      	sxtb	r3, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	b25b      	sxtb	r3, r3
 8001140:	4013      	ands	r3, r2
 8001142:	b25b      	sxtb	r3, r3
 8001144:	b2da      	uxtb	r2, r3
 8001146:	4b0d      	ldr	r3, [pc, #52]	@ (800117c <OLED_SetByte_Fine+0xf0>)
 8001148:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 800114a:	79fa      	ldrb	r2, [r7, #7]
 800114c:	79bb      	ldrb	r3, [r7, #6]
 800114e:	490c      	ldr	r1, [pc, #48]	@ (8001180 <OLED_SetByte_Fine+0xf4>)
 8001150:	01d2      	lsls	r2, r2, #7
 8001152:	440a      	add	r2, r1
 8001154:	4413      	add	r3, r2
 8001156:	7818      	ldrb	r0, [r3, #0]
 8001158:	4b08      	ldr	r3, [pc, #32]	@ (800117c <OLED_SetByte_Fine+0xf0>)
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	79fa      	ldrb	r2, [r7, #7]
 800115e:	79bb      	ldrb	r3, [r7, #6]
 8001160:	4301      	orrs	r1, r0
 8001162:	b2c8      	uxtb	r0, r1
 8001164:	4906      	ldr	r1, [pc, #24]	@ (8001180 <OLED_SetByte_Fine+0xf4>)
 8001166:	01d2      	lsls	r2, r2, #7
 8001168:	440a      	add	r2, r1
 800116a:	4413      	add	r3, r2
 800116c:	4602      	mov	r2, r0
 800116e:	701a      	strb	r2, [r3, #0]
 8001170:	e000      	b.n	8001174 <OLED_SetByte_Fine+0xe8>
    return;
 8001172:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bc90      	pop	{r4, r7}
 800117a:	4770      	bx	lr
 800117c:	24000721 	.word	0x24000721
 8001180:	2400029c 	.word	0x2400029c

08001184 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af02      	add	r7, sp, #8
 800118a:	4604      	mov	r4, r0
 800118c:	4608      	mov	r0, r1
 800118e:	4611      	mov	r1, r2
 8001190:	461a      	mov	r2, r3
 8001192:	4623      	mov	r3, r4
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	4603      	mov	r3, r0
 8001198:	71bb      	strb	r3, [r7, #6]
 800119a:	460b      	mov	r3, r1
 800119c:	717b      	strb	r3, [r7, #5]
 800119e:	4613      	mov	r3, r2
 80011a0:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	08db      	lsrs	r3, r3, #3
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	f003 0307 	and.w	r3, r3, #7
 80011ae:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 80011b0:	7bba      	ldrb	r2, [r7, #14]
 80011b2:	793b      	ldrb	r3, [r7, #4]
 80011b4:	4413      	add	r3, r2
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	dd29      	ble.n	800120e <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 80011ba:	797a      	ldrb	r2, [r7, #5]
 80011bc:	7bbb      	ldrb	r3, [r7, #14]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	b2da      	uxtb	r2, r3
 80011c4:	7bbc      	ldrb	r4, [r7, #14]
 80011c6:	79f9      	ldrb	r1, [r7, #7]
 80011c8:	7bf8      	ldrb	r0, [r7, #15]
 80011ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011ce:	9301      	str	r3, [sp, #4]
 80011d0:	2307      	movs	r3, #7
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	4623      	mov	r3, r4
 80011d6:	f7ff ff59 	bl	800108c <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	3301      	adds	r3, #1
 80011de:	b2d8      	uxtb	r0, r3
 80011e0:	797a      	ldrb	r2, [r7, #5]
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	f1c3 0308 	rsb	r3, r3, #8
 80011e8:	fa42 f303 	asr.w	r3, r2, r3
 80011ec:	b2dc      	uxtb	r4, r3
 80011ee:	793a      	ldrb	r2, [r7, #4]
 80011f0:	7bbb      	ldrb	r3, [r7, #14]
 80011f2:	4413      	add	r3, r2
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	3b09      	subs	r3, #9
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	79f9      	ldrb	r1, [r7, #7]
 80011fc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001200:	9201      	str	r2, [sp, #4]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2300      	movs	r3, #0
 8001206:	4622      	mov	r2, r4
 8001208:	f7ff ff40 	bl	800108c <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 800120c:	e015      	b.n	800123a <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 800120e:	797a      	ldrb	r2, [r7, #5]
 8001210:	7bbb      	ldrb	r3, [r7, #14]
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	b2dc      	uxtb	r4, r3
 8001218:	7bba      	ldrb	r2, [r7, #14]
 800121a:	793b      	ldrb	r3, [r7, #4]
 800121c:	4413      	add	r3, r2
 800121e:	b2db      	uxtb	r3, r3
 8001220:	3b01      	subs	r3, #1
 8001222:	b2db      	uxtb	r3, r3
 8001224:	7bbd      	ldrb	r5, [r7, #14]
 8001226:	79f9      	ldrb	r1, [r7, #7]
 8001228:	7bf8      	ldrb	r0, [r7, #15]
 800122a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800122e:	9201      	str	r2, [sp, #4]
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	462b      	mov	r3, r5
 8001234:	4622      	mov	r2, r4
 8001236:	f7ff ff29 	bl	800108c <OLED_SetByte_Fine>
}
 800123a:	bf00      	nop
 800123c:	3710      	adds	r7, #16
 800123e:	46bd      	mov	sp, r7
 8001240:	bdb0      	pop	{r4, r5, r7, pc}

08001242 <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8001242:	b590      	push	{r4, r7, lr}
 8001244:	b087      	sub	sp, #28
 8001246:	af02      	add	r7, sp, #8
 8001248:	4604      	mov	r4, r0
 800124a:	4608      	mov	r0, r1
 800124c:	4611      	mov	r1, r2
 800124e:	461a      	mov	r2, r3
 8001250:	4623      	mov	r3, r4
 8001252:	71fb      	strb	r3, [r7, #7]
 8001254:	4603      	mov	r3, r0
 8001256:	71bb      	strb	r3, [r7, #6]
 8001258:	460b      	mov	r3, r1
 800125a:	717b      	strb	r3, [r7, #5]
 800125c:	4613      	mov	r3, r2
 800125e:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	08db      	lsrs	r3, r3, #3
 8001264:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001266:	79bb      	ldrb	r3, [r7, #6]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800126e:	797a      	ldrb	r2, [r7, #5]
 8001270:	7bbb      	ldrb	r3, [r7, #14]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	b2da      	uxtb	r2, r3
 8001278:	7bbc      	ldrb	r4, [r7, #14]
 800127a:	79f9      	ldrb	r1, [r7, #7]
 800127c:	7bf8      	ldrb	r0, [r7, #15]
 800127e:	793b      	ldrb	r3, [r7, #4]
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2307      	movs	r3, #7
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	4623      	mov	r3, r4
 8001288:	f7ff ff00 	bl	800108c <OLED_SetByte_Fine>
  if (bit)
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d014      	beq.n	80012bc <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 8001292:	7bfb      	ldrb	r3, [r7, #15]
 8001294:	3301      	adds	r3, #1
 8001296:	b2d8      	uxtb	r0, r3
 8001298:	797a      	ldrb	r2, [r7, #5]
 800129a:	7bbb      	ldrb	r3, [r7, #14]
 800129c:	f1c3 0308 	rsb	r3, r3, #8
 80012a0:	fa42 f303 	asr.w	r3, r2, r3
 80012a4:	b2dc      	uxtb	r4, r3
 80012a6:	7bbb      	ldrb	r3, [r7, #14]
 80012a8:	3b01      	subs	r3, #1
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	79f9      	ldrb	r1, [r7, #7]
 80012ae:	793a      	ldrb	r2, [r7, #4]
 80012b0:	9201      	str	r2, [sp, #4]
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	4622      	mov	r2, r4
 80012b8:	f7ff fee8 	bl	800108c <OLED_SetByte_Fine>
  }
}
 80012bc:	bf00      	nop
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd90      	pop	{r4, r7, pc}

080012c4 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	603a      	str	r2, [r7, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	460b      	mov	r3, r1
 80012d4:	71bb      	strb	r3, [r7, #6]
 80012d6:	4613      	mov	r3, r2
 80012d8:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 80012da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012de:	08db      	lsrs	r3, r3, #3
 80012e0:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 80012e2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
 80012f0:	e025      	b.n	800133e <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	73bb      	strb	r3, [r7, #14]
 80012f6:	e01b      	b.n	8001330 <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 80012f8:	79fa      	ldrb	r2, [r7, #7]
 80012fa:	7bfb      	ldrb	r3, [r7, #15]
 80012fc:	4413      	add	r3, r2
 80012fe:	b2d8      	uxtb	r0, r3
 8001300:	7bbb      	ldrb	r3, [r7, #14]
 8001302:	00db      	lsls	r3, r3, #3
 8001304:	b2da      	uxtb	r2, r3
 8001306:	79bb      	ldrb	r3, [r7, #6]
 8001308:	4413      	add	r3, r2
 800130a:	b2dc      	uxtb	r4, r3
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	7979      	ldrb	r1, [r7, #5]
 8001312:	fb01 f303 	mul.w	r3, r1, r3
 8001316:	4413      	add	r3, r2
 8001318:	461a      	mov	r2, r3
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	4413      	add	r3, r2
 800131e:	781a      	ldrb	r2, [r3, #0]
 8001320:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff ff8c 	bl	8001242 <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 800132a:	7bbb      	ldrb	r3, [r7, #14]
 800132c:	3301      	adds	r3, #1
 800132e:	73bb      	strb	r3, [r7, #14]
 8001330:	7bba      	ldrb	r2, [r7, #14]
 8001332:	7b3b      	ldrb	r3, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d3df      	bcc.n	80012f8 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	3301      	adds	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	797b      	ldrb	r3, [r7, #5]
 8001342:	429a      	cmp	r2, r3
 8001344:	d3d5      	bcc.n	80012f2 <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 8001346:	7afb      	ldrb	r3, [r7, #11]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d028      	beq.n	800139e <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 800134c:	797b      	ldrb	r3, [r7, #5]
 800134e:	b29a      	uxth	r2, r3
 8001350:	7b3b      	ldrb	r3, [r7, #12]
 8001352:	b29b      	uxth	r3, r3
 8001354:	fb12 f303 	smulbb	r3, r2, r3
 8001358:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 800135a:	2300      	movs	r3, #0
 800135c:	737b      	strb	r3, [r7, #13]
 800135e:	e01a      	b.n	8001396 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 8001360:	79fa      	ldrb	r2, [r7, #7]
 8001362:	7b7b      	ldrb	r3, [r7, #13]
 8001364:	4413      	add	r3, r2
 8001366:	b2d8      	uxtb	r0, r3
 8001368:	7b3b      	ldrb	r3, [r7, #12]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	b2da      	uxtb	r2, r3
 800136e:	79bb      	ldrb	r3, [r7, #6]
 8001370:	4413      	add	r3, r2
 8001372:	b2d9      	uxtb	r1, r3
 8001374:	893a      	ldrh	r2, [r7, #8]
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	4413      	add	r3, r2
 800137a:	461a      	mov	r2, r3
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	781a      	ldrb	r2, [r3, #0]
 8001382:	7afc      	ldrb	r4, [r7, #11]
 8001384:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4623      	mov	r3, r4
 800138c:	f7ff fefa 	bl	8001184 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 8001390:	7b7b      	ldrb	r3, [r7, #13]
 8001392:	3301      	adds	r3, #1
 8001394:	737b      	strb	r3, [r7, #13]
 8001396:	7b7a      	ldrb	r2, [r7, #13]
 8001398:	797b      	ldrb	r3, [r7, #5]
 800139a:	429a      	cmp	r2, r3
 800139c:	d3e0      	bcc.n	8001360 <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}

080013a6 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 80013a6:	b5b0      	push	{r4, r5, r7, lr}
 80013a8:	b084      	sub	sp, #16
 80013aa:	af02      	add	r7, sp, #8
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4603      	mov	r3, r0
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685a      	ldr	r2, [r3, #4]
 80013be:	797b      	ldrb	r3, [r7, #5]
 80013c0:	f1a3 0120 	sub.w	r1, r3, #32
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	3307      	adds	r3, #7
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	da00      	bge.n	80013d0 <OLED_PrintASCIIChar+0x2a>
 80013ce:	3307      	adds	r3, #7
 80013d0:	10db      	asrs	r3, r3, #3
 80013d2:	4618      	mov	r0, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	785b      	ldrb	r3, [r3, #1]
 80013d8:	fb00 f303 	mul.w	r3, r0, r3
 80013dc:	fb01 f303 	mul.w	r3, r1, r3
 80013e0:	18d4      	adds	r4, r2, r3
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	785d      	ldrb	r5, [r3, #1]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	79b9      	ldrb	r1, [r7, #6]
 80013ec:	79f8      	ldrb	r0, [r7, #7]
 80013ee:	7e3a      	ldrb	r2, [r7, #24]
 80013f0:	9201      	str	r2, [sp, #4]
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	462b      	mov	r3, r5
 80013f6:	4622      	mov	r2, r4
 80013f8:	f7ff ff64 	bl	80012c4 <OLED_SetBlock>
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}

08001404 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	db01      	blt.n	800141a <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 8001416:	2301      	movs	r3, #1
 8001418:	e018      	b.n	800144c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001422:	2bc0      	cmp	r3, #192	@ 0xc0
 8001424:	d101      	bne.n	800142a <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 8001426:	2302      	movs	r3, #2
 8001428:	e010      	b.n	800144c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001432:	2be0      	cmp	r3, #224	@ 0xe0
 8001434:	d101      	bne.n	800143a <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 8001436:	2303      	movs	r3, #3
 8001438:	e008      	b.n	800144c <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8001442:	2bf0      	cmp	r3, #240	@ 0xf0
 8001444:	d101      	bne.n	800144a <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 8001446:	2304      	movs	r3, #4
 8001448:	e000      	b.n	800144c <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 800144a:	2300      	movs	r3, #0
}
 800144c:	4618      	mov	r0, r3
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 8001458:	b5b0      	push	{r4, r5, r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af02      	add	r7, sp, #8
 800145e:	60ba      	str	r2, [r7, #8]
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4603      	mov	r3, r0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	460b      	mov	r3, r1
 8001468:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 800146a:	2300      	movs	r3, #0
 800146c:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	3307      	adds	r3, #7
 8001474:	2b00      	cmp	r3, #0
 8001476:	da00      	bge.n	800147a <OLED_PrintString+0x22>
 8001478:	3307      	adds	r3, #7
 800147a:	10db      	asrs	r3, r3, #3
 800147c:	b2da      	uxtb	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	785b      	ldrb	r3, [r3, #1]
 8001482:	fb12 f303 	smulbb	r3, r2, r3
 8001486:	b2db      	uxtb	r3, r3
 8001488:	3304      	adds	r3, #4
 800148a:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 800148c:	e07d      	b.n	800158a <OLED_PrintString+0x132>
  {
    found = 0;
 800148e:	2300      	movs	r3, #0
 8001490:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 8001492:	8bfb      	ldrh	r3, [r7, #30]
 8001494:	68ba      	ldr	r2, [r7, #8]
 8001496:	4413      	add	r3, r2
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff ffb3 	bl	8001404 <_OLED_GetUTF8Len>
 800149e:	4603      	mov	r3, r0
 80014a0:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 80014a2:	7ebb      	ldrb	r3, [r7, #26]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d078      	beq.n	800159a <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 80014a8:	2300      	movs	r3, #0
 80014aa:	773b      	strb	r3, [r7, #28]
 80014ac:	e032      	b.n	8001514 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	7f3a      	ldrb	r2, [r7, #28]
 80014b4:	7ef9      	ldrb	r1, [r7, #27]
 80014b6:	fb01 f202 	mul.w	r2, r1, r2
 80014ba:	4413      	add	r3, r2
 80014bc:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 80014be:	8bfb      	ldrh	r3, [r7, #30]
 80014c0:	68ba      	ldr	r2, [r7, #8]
 80014c2:	4413      	add	r3, r2
 80014c4:	7eba      	ldrb	r2, [r7, #26]
 80014c6:	6979      	ldr	r1, [r7, #20]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f004 fea2 	bl	8006212 <memcmp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d11c      	bne.n	800150e <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	1d1c      	adds	r4, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785d      	ldrb	r5, [r3, #1]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	7bb9      	ldrb	r1, [r7, #14]
 80014e2:	7bf8      	ldrb	r0, [r7, #15]
 80014e4:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80014e8:	9201      	str	r2, [sp, #4]
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	462b      	mov	r3, r5
 80014ee:	4622      	mov	r2, r4
 80014f0:	f7ff fee8 	bl	80012c4 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	785a      	ldrb	r2, [r3, #1]
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4413      	add	r3, r2
 80014fc:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80014fe:	7ebb      	ldrb	r3, [r7, #26]
 8001500:	b29a      	uxth	r2, r3
 8001502:	8bfb      	ldrh	r3, [r7, #30]
 8001504:	4413      	add	r3, r2
 8001506:	83fb      	strh	r3, [r7, #30]
        found = 1;
 8001508:	2301      	movs	r3, #1
 800150a:	777b      	strb	r3, [r7, #29]
        break;
 800150c:	e007      	b.n	800151e <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 800150e:	7f3b      	ldrb	r3, [r7, #28]
 8001510:	3301      	adds	r3, #1
 8001512:	773b      	strb	r3, [r7, #28]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	7a1b      	ldrb	r3, [r3, #8]
 8001518:	7f3a      	ldrb	r2, [r7, #28]
 800151a:	429a      	cmp	r2, r3
 800151c:	d3c7      	bcc.n	80014ae <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 800151e:	7f7b      	ldrb	r3, [r7, #29]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d132      	bne.n	800158a <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 8001524:	7ebb      	ldrb	r3, [r7, #26]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d119      	bne.n	800155e <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	4413      	add	r3, r2
 8001530:	781a      	ldrb	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	68dc      	ldr	r4, [r3, #12]
 8001536:	7bb9      	ldrb	r1, [r7, #14]
 8001538:	7bf8      	ldrb	r0, [r7, #15]
 800153a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	4623      	mov	r3, r4
 8001542:	f7ff ff30 	bl	80013a6 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	785a      	ldrb	r2, [r3, #1]
 800154c:	7bfb      	ldrb	r3, [r7, #15]
 800154e:	4413      	add	r3, r2
 8001550:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001552:	7ebb      	ldrb	r3, [r7, #26]
 8001554:	b29a      	uxth	r2, r3
 8001556:	8bfb      	ldrh	r3, [r7, #30]
 8001558:	4413      	add	r3, r2
 800155a:	83fb      	strh	r3, [r7, #30]
 800155c:	e015      	b.n	800158a <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	7bb9      	ldrb	r1, [r7, #14]
 8001564:	7bf8      	ldrb	r0, [r7, #15]
 8001566:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	2220      	movs	r2, #32
 8001570:	f7ff ff19 	bl	80013a6 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	785a      	ldrb	r2, [r3, #1]
 800157a:	7bfb      	ldrb	r3, [r7, #15]
 800157c:	4413      	add	r3, r2
 800157e:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 8001580:	7ebb      	ldrb	r3, [r7, #26]
 8001582:	b29a      	uxth	r2, r3
 8001584:	8bfb      	ldrh	r3, [r7, #30]
 8001586:	4413      	add	r3, r2
 8001588:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 800158a:	8bfb      	ldrh	r3, [r7, #30]
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	4413      	add	r3, r2
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	f47f af7b 	bne.w	800148e <OLED_PrintString+0x36>
      }
    }
  }
}
 8001598:	e000      	b.n	800159c <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 800159a:	bf00      	nop
}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bdb0      	pop	{r4, r5, r7, pc}

080015a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015aa:	4b0a      	ldr	r3, [pc, #40]	@ (80015d4 <HAL_MspInit+0x30>)
 80015ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b0:	4a08      	ldr	r2, [pc, #32]	@ (80015d4 <HAL_MspInit+0x30>)
 80015b2:	f043 0302 	orr.w	r3, r3, #2
 80015b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015ba:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <HAL_MspInit+0x30>)
 80015bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	607b      	str	r3, [r7, #4]
 80015c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	58024400 	.word	0x58024400

080015d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <NMI_Handler+0x4>

080015e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e4:	bf00      	nop
 80015e6:	e7fd      	b.n	80015e4 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	bf00      	nop
 80015ee:	e7fd      	b.n	80015ec <MemManage_Handler+0x4>

080015f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f4:	bf00      	nop
 80015f6:	e7fd      	b.n	80015f4 <BusFault_Handler+0x4>

080015f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015fc:	bf00      	nop
 80015fe:	e7fd      	b.n	80015fc <UsageFault_Handler+0x4>

08001600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr

0800162a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800162e:	f000 f9ed 	bl	8001a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}

08001636 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0
  return 1;
 800163a:	2301      	movs	r3, #1
}
 800163c:	4618      	mov	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_kill>:

int _kill(int pid, int sig)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001650:	f004 fe42 	bl	80062d8 <__errno>
 8001654:	4603      	mov	r3, r0
 8001656:	2216      	movs	r2, #22
 8001658:	601a      	str	r2, [r3, #0]
  return -1;
 800165a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800165e:	4618      	mov	r0, r3
 8001660:	3708      	adds	r7, #8
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <_exit>:

void _exit (int status)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800166e:	f04f 31ff 	mov.w	r1, #4294967295
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffe7 	bl	8001646 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <_exit+0x12>

0800167c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e00a      	b.n	80016a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800168e:	f3af 8000 	nop.w
 8001692:	4601      	mov	r1, r0
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60ba      	str	r2, [r7, #8]
 800169a:	b2ca      	uxtb	r2, r1
 800169c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	3301      	adds	r3, #1
 80016a2:	617b      	str	r3, [r7, #20]
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	dbf0      	blt.n	800168e <_read+0x12>
  }

  return len;
 80016ac:	687b      	ldr	r3, [r7, #4]
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3718      	adds	r7, #24
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
 80016c6:	e009      	b.n	80016dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697a      	ldr	r2, [r7, #20]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	dbf1      	blt.n	80016c8 <_write+0x12>
  }
  return len;
 80016e4:	687b      	ldr	r3, [r7, #4]
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <_close>:

int _close(int file)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001716:	605a      	str	r2, [r3, #4]
  return 0;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <_isatty>:

int _isatty(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800172e:	2301      	movs	r3, #1
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001760:	4a14      	ldr	r2, [pc, #80]	@ (80017b4 <_sbrk+0x5c>)
 8001762:	4b15      	ldr	r3, [pc, #84]	@ (80017b8 <_sbrk+0x60>)
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800176c:	4b13      	ldr	r3, [pc, #76]	@ (80017bc <_sbrk+0x64>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d102      	bne.n	800177a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001774:	4b11      	ldr	r3, [pc, #68]	@ (80017bc <_sbrk+0x64>)
 8001776:	4a12      	ldr	r2, [pc, #72]	@ (80017c0 <_sbrk+0x68>)
 8001778:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177a:	4b10      	ldr	r3, [pc, #64]	@ (80017bc <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	693a      	ldr	r2, [r7, #16]
 8001784:	429a      	cmp	r2, r3
 8001786:	d207      	bcs.n	8001798 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001788:	f004 fda6 	bl	80062d8 <__errno>
 800178c:	4603      	mov	r3, r0
 800178e:	220c      	movs	r2, #12
 8001790:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001792:	f04f 33ff 	mov.w	r3, #4294967295
 8001796:	e009      	b.n	80017ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001798:	4b08      	ldr	r3, [pc, #32]	@ (80017bc <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800179e:	4b07      	ldr	r3, [pc, #28]	@ (80017bc <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	4a05      	ldr	r2, [pc, #20]	@ (80017bc <_sbrk+0x64>)
 80017a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017aa:	68fb      	ldr	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	24080000 	.word	0x24080000
 80017b8:	00000400 	.word	0x00000400
 80017bc:	24000724 	.word	0x24000724
 80017c0:	24000878 	.word	0x24000878

080017c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80017c8:	4b37      	ldr	r3, [pc, #220]	@ (80018a8 <SystemInit+0xe4>)
 80017ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017ce:	4a36      	ldr	r2, [pc, #216]	@ (80018a8 <SystemInit+0xe4>)
 80017d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80017d8:	4b34      	ldr	r3, [pc, #208]	@ (80018ac <SystemInit+0xe8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	2b06      	cmp	r3, #6
 80017e2:	d807      	bhi.n	80017f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80017e4:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <SystemInit+0xe8>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f023 030f 	bic.w	r3, r3, #15
 80017ec:	4a2f      	ldr	r2, [pc, #188]	@ (80018ac <SystemInit+0xe8>)
 80017ee:	f043 0307 	orr.w	r3, r3, #7
 80017f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	@ (80018b0 <SystemInit+0xec>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a2d      	ldr	r2, [pc, #180]	@ (80018b0 <SystemInit+0xec>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001800:	4b2b      	ldr	r3, [pc, #172]	@ (80018b0 <SystemInit+0xec>)
 8001802:	2200      	movs	r2, #0
 8001804:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001806:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <SystemInit+0xec>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	4929      	ldr	r1, [pc, #164]	@ (80018b0 <SystemInit+0xec>)
 800180c:	4b29      	ldr	r3, [pc, #164]	@ (80018b4 <SystemInit+0xf0>)
 800180e:	4013      	ands	r3, r2
 8001810:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001812:	4b26      	ldr	r3, [pc, #152]	@ (80018ac <SystemInit+0xe8>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0308 	and.w	r3, r3, #8
 800181a:	2b00      	cmp	r3, #0
 800181c:	d007      	beq.n	800182e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800181e:	4b23      	ldr	r3, [pc, #140]	@ (80018ac <SystemInit+0xe8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 030f 	bic.w	r3, r3, #15
 8001826:	4a21      	ldr	r2, [pc, #132]	@ (80018ac <SystemInit+0xe8>)
 8001828:	f043 0307 	orr.w	r3, r3, #7
 800182c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800182e:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <SystemInit+0xec>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001834:	4b1e      	ldr	r3, [pc, #120]	@ (80018b0 <SystemInit+0xec>)
 8001836:	2200      	movs	r2, #0
 8001838:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800183a:	4b1d      	ldr	r3, [pc, #116]	@ (80018b0 <SystemInit+0xec>)
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001840:	4b1b      	ldr	r3, [pc, #108]	@ (80018b0 <SystemInit+0xec>)
 8001842:	4a1d      	ldr	r2, [pc, #116]	@ (80018b8 <SystemInit+0xf4>)
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001846:	4b1a      	ldr	r3, [pc, #104]	@ (80018b0 <SystemInit+0xec>)
 8001848:	4a1c      	ldr	r2, [pc, #112]	@ (80018bc <SystemInit+0xf8>)
 800184a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800184c:	4b18      	ldr	r3, [pc, #96]	@ (80018b0 <SystemInit+0xec>)
 800184e:	4a1c      	ldr	r2, [pc, #112]	@ (80018c0 <SystemInit+0xfc>)
 8001850:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001852:	4b17      	ldr	r3, [pc, #92]	@ (80018b0 <SystemInit+0xec>)
 8001854:	2200      	movs	r2, #0
 8001856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001858:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <SystemInit+0xec>)
 800185a:	4a19      	ldr	r2, [pc, #100]	@ (80018c0 <SystemInit+0xfc>)
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <SystemInit+0xec>)
 8001860:	2200      	movs	r2, #0
 8001862:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <SystemInit+0xec>)
 8001866:	4a16      	ldr	r2, [pc, #88]	@ (80018c0 <SystemInit+0xfc>)
 8001868:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800186a:	4b11      	ldr	r3, [pc, #68]	@ (80018b0 <SystemInit+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001870:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <SystemInit+0xec>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0e      	ldr	r2, [pc, #56]	@ (80018b0 <SystemInit+0xec>)
 8001876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800187a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <SystemInit+0xec>)
 800187e:	2200      	movs	r2, #0
 8001880:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001882:	4b10      	ldr	r3, [pc, #64]	@ (80018c4 <SystemInit+0x100>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <SystemInit+0x104>)
 8001888:	4013      	ands	r3, r2
 800188a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800188e:	d202      	bcs.n	8001896 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001890:	4b0e      	ldr	r3, [pc, #56]	@ (80018cc <SystemInit+0x108>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001896:	4b0e      	ldr	r3, [pc, #56]	@ (80018d0 <SystemInit+0x10c>)
 8001898:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800189c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	e000ed00 	.word	0xe000ed00
 80018ac:	52002000 	.word	0x52002000
 80018b0:	58024400 	.word	0x58024400
 80018b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80018b8:	02020200 	.word	0x02020200
 80018bc:	01ff0000 	.word	0x01ff0000
 80018c0:	01010280 	.word	0x01010280
 80018c4:	5c001000 	.word	0x5c001000
 80018c8:	ffff0000 	.word	0xffff0000
 80018cc:	51008108 	.word	0x51008108
 80018d0:	52004000 	.word	0x52004000

080018d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80018d8:	f7ff ff74 	bl	80017c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f004 fcef 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001906:	f7ff f9a7 	bl	8000c58 <main>
  bx  lr
 800190a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001914:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001918:	0800a320 	.word	0x0800a320
  ldr r2, =_sbss
 800191c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001920:	24000878 	.word	0x24000878

08001924 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC3_IRQHandler>
	...

08001928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800192e:	2003      	movs	r0, #3
 8001930:	f000 f96e 	bl	8001c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001934:	f002 f81c 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8001938:	4602      	mov	r2, r0
 800193a:	4b15      	ldr	r3, [pc, #84]	@ (8001990 <HAL_Init+0x68>)
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	0a1b      	lsrs	r3, r3, #8
 8001940:	f003 030f 	and.w	r3, r3, #15
 8001944:	4913      	ldr	r1, [pc, #76]	@ (8001994 <HAL_Init+0x6c>)
 8001946:	5ccb      	ldrb	r3, [r1, r3]
 8001948:	f003 031f 	and.w	r3, r3, #31
 800194c:	fa22 f303 	lsr.w	r3, r2, r3
 8001950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001952:	4b0f      	ldr	r3, [pc, #60]	@ (8001990 <HAL_Init+0x68>)
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	4a0e      	ldr	r2, [pc, #56]	@ (8001994 <HAL_Init+0x6c>)
 800195c:	5cd3      	ldrb	r3, [r2, r3]
 800195e:	f003 031f 	and.w	r3, r3, #31
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	fa22 f303 	lsr.w	r3, r2, r3
 8001968:	4a0b      	ldr	r2, [pc, #44]	@ (8001998 <HAL_Init+0x70>)
 800196a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800196c:	4a0b      	ldr	r2, [pc, #44]	@ (800199c <HAL_Init+0x74>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001972:	200f      	movs	r0, #15
 8001974:	f000 f814 	bl	80019a0 <HAL_InitTick>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e002      	b.n	8001988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001982:	f7ff fe0f 	bl	80015a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	58024400 	.word	0x58024400
 8001994:	08009ed4 	.word	0x08009ed4
 8001998:	24000004 	.word	0x24000004
 800199c:	24000000 	.word	0x24000000

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80019a8:	4b15      	ldr	r3, [pc, #84]	@ (8001a00 <HAL_InitTick+0x60>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d101      	bne.n	80019b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e021      	b.n	80019f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80019b4:	4b13      	ldr	r3, [pc, #76]	@ (8001a04 <HAL_InitTick+0x64>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b11      	ldr	r3, [pc, #68]	@ (8001a00 <HAL_InitTick+0x60>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4619      	mov	r1, r3
 80019be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ca:	4618      	mov	r0, r3
 80019cc:	f000 f945 	bl	8001c5a <HAL_SYSTICK_Config>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00e      	b.n	80019f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b0f      	cmp	r3, #15
 80019de:	d80a      	bhi.n	80019f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e0:	2200      	movs	r2, #0
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f000 f91d 	bl	8001c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019ec:	4a06      	ldr	r2, [pc, #24]	@ (8001a08 <HAL_InitTick+0x68>)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e000      	b.n	80019f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	2400000c 	.word	0x2400000c
 8001a04:	24000000 	.word	0x24000000
 8001a08:	24000008 	.word	0x24000008

08001a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a10:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_IncTick+0x20>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b06      	ldr	r3, [pc, #24]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a04      	ldr	r2, [pc, #16]	@ (8001a30 <HAL_IncTick+0x24>)
 8001a1e:	6013      	str	r3, [r2, #0]
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	2400000c 	.word	0x2400000c
 8001a30:	24000728 	.word	0x24000728

08001a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  return uwTick;
 8001a38:	4b03      	ldr	r3, [pc, #12]	@ (8001a48 <HAL_GetTick+0x14>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	24000728 	.word	0x24000728

08001a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a54:	f7ff ffee 	bl	8001a34 <HAL_GetTick>
 8001a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a64:	d005      	beq.n	8001a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a66:	4b0a      	ldr	r3, [pc, #40]	@ (8001a90 <HAL_Delay+0x44>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	4413      	add	r3, r2
 8001a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a72:	bf00      	nop
 8001a74:	f7ff ffde 	bl	8001a34 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d8f7      	bhi.n	8001a74 <HAL_Delay+0x28>
  {
  }
}
 8001a84:	bf00      	nop
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2400000c 	.word	0x2400000c

08001a94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a98:	4b03      	ldr	r3, [pc, #12]	@ (8001aa8 <HAL_GetREVID+0x14>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	0c1b      	lsrs	r3, r3, #16
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	5c001000 	.word	0x5c001000

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x40>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	05fa0000 	.word	0x05fa0000

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	@ (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	db0a      	blt.n	8001b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	b2da      	uxtb	r2, r3
 8001b28:	490c      	ldr	r1, [pc, #48]	@ (8001b5c <__NVIC_SetPriority+0x4c>)
 8001b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b2e:	0112      	lsls	r2, r2, #4
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	440b      	add	r3, r1
 8001b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b38:	e00a      	b.n	8001b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	4908      	ldr	r1, [pc, #32]	@ (8001b60 <__NVIC_SetPriority+0x50>)
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	f003 030f 	and.w	r3, r3, #15
 8001b46:	3b04      	subs	r3, #4
 8001b48:	0112      	lsls	r2, r2, #4
 8001b4a:	b2d2      	uxtb	r2, r2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	761a      	strb	r2, [r3, #24]
}
 8001b50:	bf00      	nop
 8001b52:	370c      	adds	r7, #12
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	e000e100 	.word	0xe000e100
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	@ 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f003 0307 	and.w	r3, r3, #7
 8001b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	f1c3 0307 	rsb	r3, r3, #7
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf28      	it	cs
 8001b82:	2304      	movcs	r3, #4
 8001b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	2b06      	cmp	r3, #6
 8001b8c:	d902      	bls.n	8001b94 <NVIC_EncodePriority+0x30>
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	3b03      	subs	r3, #3
 8001b92:	e000      	b.n	8001b96 <NVIC_EncodePriority+0x32>
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	f04f 32ff 	mov.w	r2, #4294967295
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	43da      	mvns	r2, r3
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	401a      	ands	r2, r3
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bac:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb6:	43d9      	mvns	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	4313      	orrs	r3, r2
         );
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bdc:	d301      	bcc.n	8001be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bde:	2301      	movs	r3, #1
 8001be0:	e00f      	b.n	8001c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c0c <SysTick_Config+0x40>)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3b01      	subs	r3, #1
 8001be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bea:	210f      	movs	r1, #15
 8001bec:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf0:	f7ff ff8e 	bl	8001b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf4:	4b05      	ldr	r3, [pc, #20]	@ (8001c0c <SysTick_Config+0x40>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfa:	4b04      	ldr	r3, [pc, #16]	@ (8001c0c <SysTick_Config+0x40>)
 8001bfc:	2207      	movs	r2, #7
 8001bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f7ff ff47 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b086      	sub	sp, #24
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60b9      	str	r1, [r7, #8]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c34:	f7ff ff5e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	68b9      	ldr	r1, [r7, #8]
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f7ff ff90 	bl	8001b64 <NVIC_EncodePriority>
 8001c44:	4602      	mov	r2, r0
 8001c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ff5f 	bl	8001b10 <__NVIC_SetPriority>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff ffb2 	bl	8001bcc <SysTick_Config>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
	...

08001c74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c78:	f3bf 8f5f 	dmb	sy
}
 8001c7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c7e:	4b07      	ldr	r3, [pc, #28]	@ (8001c9c <HAL_MPU_Disable+0x28>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c82:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_MPU_Disable+0x28>)
 8001c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c8a:	4b05      	ldr	r3, [pc, #20]	@ (8001ca0 <HAL_MPU_Disable+0x2c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	605a      	str	r2, [r3, #4]
}
 8001c90:	bf00      	nop
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	e000ed00 	.word	0xe000ed00
 8001ca0:	e000ed90 	.word	0xe000ed90

08001ca4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cac:	4a0b      	ldr	r2, [pc, #44]	@ (8001cdc <HAL_MPU_Enable+0x38>)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f043 0301 	orr.w	r3, r3, #1
 8001cb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce0 <HAL_MPU_Enable+0x3c>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	4a09      	ldr	r2, [pc, #36]	@ (8001ce0 <HAL_MPU_Enable+0x3c>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cc0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc2:	f3bf 8f4f 	dsb	sy
}
 8001cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cc8:	f3bf 8f6f 	isb	sy
}
 8001ccc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000ed90 	.word	0xe000ed90
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	785a      	ldrb	r2, [r3, #1]
 8001cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d60 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_MPU_ConfigRegion+0x7c>)
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	4a19      	ldr	r2, [pc, #100]	@ (8001d60 <HAL_MPU_ConfigRegion+0x7c>)
 8001cfa:	f023 0301 	bic.w	r3, r3, #1
 8001cfe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d00:	4a17      	ldr	r2, [pc, #92]	@ (8001d60 <HAL_MPU_ConfigRegion+0x7c>)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7b1b      	ldrb	r3, [r3, #12]
 8001d0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	7adb      	ldrb	r3, [r3, #11]
 8001d12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	7a9b      	ldrb	r3, [r3, #10]
 8001d1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	7b5b      	ldrb	r3, [r3, #13]
 8001d22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	7b9b      	ldrb	r3, [r3, #14]
 8001d2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	7bdb      	ldrb	r3, [r3, #15]
 8001d32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7a5b      	ldrb	r3, [r3, #9]
 8001d3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	7a1b      	ldrb	r3, [r3, #8]
 8001d42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	7812      	ldrb	r2, [r2, #0]
 8001d4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d4c:	4a04      	ldr	r2, [pc, #16]	@ (8001d60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d50:	6113      	str	r3, [r2, #16]
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	e000ed90 	.word	0xe000ed90

08001d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b089      	sub	sp, #36	@ 0x24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d72:	4b89      	ldr	r3, [pc, #548]	@ (8001f98 <HAL_GPIO_Init+0x234>)
 8001d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d76:	e194      	b.n	80020a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	f000 8186 	beq.w	800209c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f003 0303 	and.w	r3, r3, #3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d005      	beq.n	8001da8 <HAL_GPIO_Init+0x44>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d130      	bne.n	8001e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	2203      	movs	r2, #3
 8001db4:	fa02 f303 	lsl.w	r3, r2, r3
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	68da      	ldr	r2, [r3, #12]
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dde:	2201      	movs	r2, #1
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 0201 	and.w	r2, r3, #1
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0303 	and.w	r3, r3, #3
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d017      	beq.n	8001e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	2203      	movs	r2, #3
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	689a      	ldr	r2, [r3, #8]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	d123      	bne.n	8001e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	08da      	lsrs	r2, r3, #3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	3208      	adds	r2, #8
 8001e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	f003 0307 	and.w	r3, r3, #7
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	220f      	movs	r2, #15
 8001e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	08da      	lsrs	r2, r3, #3
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3208      	adds	r2, #8
 8001e94:	69b9      	ldr	r1, [r7, #24]
 8001e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0203 	and.w	r2, r3, #3
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 80e0 	beq.w	800209c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001edc:	4b2f      	ldr	r3, [pc, #188]	@ (8001f9c <HAL_GPIO_Init+0x238>)
 8001ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8001f9c <HAL_GPIO_Init+0x238>)
 8001ee4:	f043 0302 	orr.w	r3, r3, #2
 8001ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001eec:	4b2b      	ldr	r3, [pc, #172]	@ (8001f9c <HAL_GPIO_Init+0x238>)
 8001eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001efa:	4a29      	ldr	r2, [pc, #164]	@ (8001fa0 <HAL_GPIO_Init+0x23c>)
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	089b      	lsrs	r3, r3, #2
 8001f00:	3302      	adds	r3, #2
 8001f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	220f      	movs	r2, #15
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a20      	ldr	r2, [pc, #128]	@ (8001fa4 <HAL_GPIO_Init+0x240>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d052      	beq.n	8001fcc <HAL_GPIO_Init+0x268>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa8 <HAL_GPIO_Init+0x244>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d031      	beq.n	8001f92 <HAL_GPIO_Init+0x22e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a1e      	ldr	r2, [pc, #120]	@ (8001fac <HAL_GPIO_Init+0x248>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d02b      	beq.n	8001f8e <HAL_GPIO_Init+0x22a>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb0 <HAL_GPIO_Init+0x24c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d025      	beq.n	8001f8a <HAL_GPIO_Init+0x226>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	@ (8001fb4 <HAL_GPIO_Init+0x250>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x222>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb8 <HAL_GPIO_Init+0x254>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x21e>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a1a      	ldr	r2, [pc, #104]	@ (8001fbc <HAL_GPIO_Init+0x258>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x21a>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_GPIO_Init+0x25c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x216>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a18      	ldr	r2, [pc, #96]	@ (8001fc4 <HAL_GPIO_Init+0x260>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x212>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a17      	ldr	r2, [pc, #92]	@ (8001fc8 <HAL_GPIO_Init+0x264>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x20e>
 8001f6e:	2309      	movs	r3, #9
 8001f70:	e02d      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f72:	230a      	movs	r3, #10
 8001f74:	e02b      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f76:	2308      	movs	r3, #8
 8001f78:	e029      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f7a:	2307      	movs	r3, #7
 8001f7c:	e027      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f7e:	2306      	movs	r3, #6
 8001f80:	e025      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f82:	2305      	movs	r3, #5
 8001f84:	e023      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f86:	2304      	movs	r3, #4
 8001f88:	e021      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e01f      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e01d      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f92:	2301      	movs	r3, #1
 8001f94:	e01b      	b.n	8001fce <HAL_GPIO_Init+0x26a>
 8001f96:	bf00      	nop
 8001f98:	58000080 	.word	0x58000080
 8001f9c:	58024400 	.word	0x58024400
 8001fa0:	58000400 	.word	0x58000400
 8001fa4:	58020000 	.word	0x58020000
 8001fa8:	58020400 	.word	0x58020400
 8001fac:	58020800 	.word	0x58020800
 8001fb0:	58020c00 	.word	0x58020c00
 8001fb4:	58021000 	.word	0x58021000
 8001fb8:	58021400 	.word	0x58021400
 8001fbc:	58021800 	.word	0x58021800
 8001fc0:	58021c00 	.word	0x58021c00
 8001fc4:	58022000 	.word	0x58022000
 8001fc8:	58022400 	.word	0x58022400
 8001fcc:	2300      	movs	r3, #0
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	f002 0203 	and.w	r2, r2, #3
 8001fd4:	0092      	lsls	r2, r2, #2
 8001fd6:	4093      	lsls	r3, r2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fde:	4938      	ldr	r1, [pc, #224]	@ (80020c0 <HAL_GPIO_Init+0x35c>)
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	4013      	ands	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d003      	beq.n	8002040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	43db      	mvns	r3, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	4313      	orrs	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	3301      	adds	r3, #1
 80020a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f ae63 	bne.w	8001d78 <HAL_GPIO_Init+0x14>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	3724      	adds	r7, #36	@ 0x24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	58000400 	.word	0x58000400

080020c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e08b      	b.n	80021ee <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe fcfa 	bl	8000ae4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2224      	movs	r2, #36	@ 0x24
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0201 	bic.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002114:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002124:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d107      	bne.n	800213e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	e006      	b.n	800214c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689a      	ldr	r2, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800214a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b02      	cmp	r3, #2
 8002152:	d108      	bne.n	8002166 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002162:	605a      	str	r2, [r3, #4]
 8002164:	e007      	b.n	8002176 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685a      	ldr	r2, [r3, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002174:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6859      	ldr	r1, [r3, #4]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	4b1d      	ldr	r3, [pc, #116]	@ (80021f8 <HAL_I2C_Init+0x134>)
 8002182:	430b      	orrs	r3, r1
 8002184:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002194:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	691a      	ldr	r2, [r3, #16]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69d9      	ldr	r1, [r3, #28]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6a1a      	ldr	r2, [r3, #32]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681a      	ldr	r2, [r3, #0]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 0201 	orr.w	r2, r2, #1
 80021ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2220      	movs	r2, #32
 80021da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	02008000 	.word	0x02008000

080021fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b088      	sub	sp, #32
 8002200:	af02      	add	r7, sp, #8
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	461a      	mov	r2, r3
 8002208:	460b      	mov	r3, r1
 800220a:	817b      	strh	r3, [r7, #10]
 800220c:	4613      	mov	r3, r2
 800220e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b20      	cmp	r3, #32
 800221a:	f040 80fd 	bne.w	8002418 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002224:	2b01      	cmp	r3, #1
 8002226:	d101      	bne.n	800222c <HAL_I2C_Master_Transmit+0x30>
 8002228:	2302      	movs	r3, #2
 800222a:	e0f6      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2201      	movs	r2, #1
 8002230:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002234:	f7ff fbfe 	bl	8001a34 <HAL_GetTick>
 8002238:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	9300      	str	r3, [sp, #0]
 800223e:	2319      	movs	r3, #25
 8002240:	2201      	movs	r2, #1
 8002242:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002246:	68f8      	ldr	r0, [r7, #12]
 8002248:	f000 fa0a 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e0e1      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2221      	movs	r2, #33	@ 0x21
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2210      	movs	r2, #16
 8002262:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	893a      	ldrh	r2, [r7, #8]
 8002276:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002282:	b29b      	uxth	r3, r3
 8002284:	2bff      	cmp	r3, #255	@ 0xff
 8002286:	d906      	bls.n	8002296 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	22ff      	movs	r2, #255	@ 0xff
 800228c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800228e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	e007      	b.n	80022a6 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022a4:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	3b01      	subs	r3, #1
 80022cc:	b29a      	uxth	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d6:	3b01      	subs	r3, #1
 80022d8:	b29a      	uxth	r2, r3
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	3301      	adds	r3, #1
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002424 <HAL_I2C_Master_Transmit+0x228>)
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f000 fc05 	bl	8002b00 <I2C_TransferConfig>
 80022f6:	e066      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022fc:	b2da      	uxtb	r2, r3
 80022fe:	8979      	ldrh	r1, [r7, #10]
 8002300:	4b48      	ldr	r3, [pc, #288]	@ (8002424 <HAL_I2C_Master_Transmit+0x228>)
 8002302:	9300      	str	r3, [sp, #0]
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	68f8      	ldr	r0, [r7, #12]
 8002308:	f000 fbfa 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800230c:	e05b      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 f9fd 	bl	8002712 <I2C_WaitOnTXISFlagUntilTimeout>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e07b      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	781a      	ldrb	r2, [r3, #0]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800233c:	b29b      	uxth	r3, r3
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	3b01      	subs	r3, #1
 800234c:	b29a      	uxth	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002356:	b29b      	uxth	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d034      	beq.n	80023c6 <HAL_I2C_Master_Transmit+0x1ca>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002360:	2b00      	cmp	r3, #0
 8002362:	d130      	bne.n	80023c6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	9300      	str	r3, [sp, #0]
 8002368:	6a3b      	ldr	r3, [r7, #32]
 800236a:	2200      	movs	r2, #0
 800236c:	2180      	movs	r1, #128	@ 0x80
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 f976 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d001      	beq.n	800237e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e04d      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002382:	b29b      	uxth	r3, r3
 8002384:	2bff      	cmp	r3, #255	@ 0xff
 8002386:	d90e      	bls.n	80023a6 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	22ff      	movs	r2, #255	@ 0xff
 800238c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002392:	b2da      	uxtb	r2, r3
 8002394:	8979      	ldrh	r1, [r7, #10]
 8002396:	2300      	movs	r3, #0
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	f000 fbae 	bl	8002b00 <I2C_TransferConfig>
 80023a4:	e00f      	b.n	80023c6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	8979      	ldrh	r1, [r7, #10]
 80023b8:	2300      	movs	r3, #0
 80023ba:	9300      	str	r3, [sp, #0]
 80023bc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fb9d 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ca:	b29b      	uxth	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d19e      	bne.n	800230e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	6a39      	ldr	r1, [r7, #32]
 80023d4:	68f8      	ldr	r0, [r7, #12]
 80023d6:	f000 f9e3 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e01a      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2220      	movs	r2, #32
 80023ea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6859      	ldr	r1, [r3, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_I2C_Master_Transmit+0x22c>)
 80023f8:	400b      	ands	r3, r1
 80023fa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2220      	movs	r2, #32
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	e000      	b.n	800241a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002418:	2302      	movs	r3, #2
  }
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	80002000 	.word	0x80002000
 8002428:	fe00e800 	.word	0xfe00e800

0800242c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af02      	add	r7, sp, #8
 8002432:	60f8      	str	r0, [r7, #12]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	461a      	mov	r2, r3
 8002438:	460b      	mov	r3, r1
 800243a:	817b      	strh	r3, [r7, #10]
 800243c:	4613      	mov	r3, r2
 800243e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b20      	cmp	r3, #32
 800244a:	f040 80db 	bne.w	8002604 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002454:	2b01      	cmp	r3, #1
 8002456:	d101      	bne.n	800245c <HAL_I2C_Master_Receive+0x30>
 8002458:	2302      	movs	r3, #2
 800245a:	e0d4      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002464:	f7ff fae6 	bl	8001a34 <HAL_GetTick>
 8002468:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	9300      	str	r3, [sp, #0]
 800246e:	2319      	movs	r3, #25
 8002470:	2201      	movs	r2, #1
 8002472:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8f2 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e0bf      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2222      	movs	r2, #34	@ 0x22
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2210      	movs	r2, #16
 8002492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2200      	movs	r2, #0
 800249a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2200      	movs	r2, #0
 80024ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	2bff      	cmp	r3, #255	@ 0xff
 80024b6:	d90e      	bls.n	80024d6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	22ff      	movs	r2, #255	@ 0xff
 80024bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	b2da      	uxtb	r2, r3
 80024c4:	8979      	ldrh	r1, [r7, #10]
 80024c6:	4b52      	ldr	r3, [pc, #328]	@ (8002610 <HAL_I2C_Master_Receive+0x1e4>)
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fb16 	bl	8002b00 <I2C_TransferConfig>
 80024d4:	e06d      	b.n	80025b2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e4:	b2da      	uxtb	r2, r3
 80024e6:	8979      	ldrh	r1, [r7, #10]
 80024e8:	4b49      	ldr	r3, [pc, #292]	@ (8002610 <HAL_I2C_Master_Receive+0x1e4>)
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f000 fb05 	bl	8002b00 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80024f6:	e05c      	b.n	80025b2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	6a39      	ldr	r1, [r7, #32]
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 f993 	bl	8002828 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e07c      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29b      	uxth	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d034      	beq.n	80025b2 <HAL_I2C_Master_Receive+0x186>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d130      	bne.n	80025b2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	6a3b      	ldr	r3, [r7, #32]
 8002556:	2200      	movs	r2, #0
 8002558:	2180      	movs	r1, #128	@ 0x80
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f880 	bl	8002660 <I2C_WaitOnFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e04d      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256e:	b29b      	uxth	r3, r3
 8002570:	2bff      	cmp	r3, #255	@ 0xff
 8002572:	d90e      	bls.n	8002592 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	22ff      	movs	r2, #255	@ 0xff
 8002578:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800257e:	b2da      	uxtb	r2, r3
 8002580:	8979      	ldrh	r1, [r7, #10]
 8002582:	2300      	movs	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 fab8 	bl	8002b00 <I2C_TransferConfig>
 8002590:	e00f      	b.n	80025b2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	8979      	ldrh	r1, [r7, #10]
 80025a4:	2300      	movs	r3, #0
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 faa7 	bl	8002b00 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d19d      	bne.n	80024f8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	6a39      	ldr	r1, [r7, #32]
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	f000 f8ed 	bl	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e01a      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2220      	movs	r2, #32
 80025d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6859      	ldr	r1, [r3, #4]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002614 <HAL_I2C_Master_Receive+0x1e8>)
 80025e4:	400b      	ands	r3, r1
 80025e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002600:	2300      	movs	r3, #0
 8002602:	e000      	b.n	8002606 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002604:	2302      	movs	r3, #2
  }
}
 8002606:	4618      	mov	r0, r3
 8002608:	3718      	adds	r7, #24
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	80002400 	.word	0x80002400
 8002614:	fe00e800 	.word	0xfe00e800

08002618 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b02      	cmp	r3, #2
 800262c:	d103      	bne.n	8002636 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2200      	movs	r2, #0
 8002634:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b01      	cmp	r3, #1
 8002642:	d007      	beq.n	8002654 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	619a      	str	r2, [r3, #24]
  }
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	603b      	str	r3, [r7, #0]
 800266c:	4613      	mov	r3, r2
 800266e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002670:	e03b      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 f962 	bl	8002940 <I2C_IsErrorOccurred>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e041      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d02d      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff f9d1 	bl	8001a34 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d122      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4013      	ands	r3, r2
 80026ae:	68ba      	ldr	r2, [r7, #8]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	bf0c      	ite	eq
 80026b4:	2301      	moveq	r3, #1
 80026b6:	2300      	movne	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	461a      	mov	r2, r3
 80026bc:	79fb      	ldrb	r3, [r7, #7]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d113      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d0b4      	beq.n	8002672 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271e:	e033      	b.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f90b 	bl	8002940 <I2C_IsErrorOccurred>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e031      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d025      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7ff f97a 	bl	8001a34 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d11a      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b02      	cmp	r3, #2
 800275e:	d013      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002764:	f043 0220 	orr.w	r2, r3, #32
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e007      	b.n	8002798 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d1c4      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027ac:	e02f      	b.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	68b9      	ldr	r1, [r7, #8]
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f000 f8c4 	bl	8002940 <I2C_IsErrorOccurred>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d001      	beq.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e02d      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027c2:	f7ff f937 	bl	8001a34 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d302      	bcc.n	80027d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d11a      	bne.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	f003 0320 	and.w	r3, r3, #32
 80027e2:	2b20      	cmp	r3, #32
 80027e4:	d013      	beq.n	800280e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	f043 0220 	orr.w	r2, r3, #32
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2220      	movs	r2, #32
 80027f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e007      	b.n	800281e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0320 	and.w	r3, r3, #32
 8002818:	2b20      	cmp	r3, #32
 800281a:	d1c8      	bne.n	80027ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800281c:	2300      	movs	r3, #0
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002838:	e071      	b.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f87e 	bl	8002940 <I2C_IsErrorOccurred>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d13b      	bne.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d138      	bne.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b04      	cmp	r3, #4
 800286e:	d105      	bne.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002874:	2b00      	cmp	r3, #0
 8002876:	d001      	beq.n	800287c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d121      	bne.n	80028ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2204      	movs	r2, #4
 8002896:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	2220      	movs	r2, #32
 800289e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6859      	ldr	r1, [r3, #4]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	4b24      	ldr	r3, [pc, #144]	@ (800293c <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80028ac:	400b      	ands	r3, r1
 80028ae:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	75fb      	strb	r3, [r7, #23]
 80028cc:	e002      	b.n	80028d4 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80028d4:	f7ff f8ae 	bl	8001a34 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d302      	bcc.n	80028ea <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d119      	bne.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80028ea:	7dfb      	ldrb	r3, [r7, #23]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d116      	bne.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d00f      	beq.n	800291e <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002902:	f043 0220 	orr.w	r2, r3, #32
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2220      	movs	r2, #32
 800290e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0304 	and.w	r3, r3, #4
 8002928:	2b04      	cmp	r3, #4
 800292a:	d002      	beq.n	8002932 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 800292c:	7dfb      	ldrb	r3, [r7, #23]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d083      	beq.n	800283a <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}
 800293c:	fe00e800 	.word	0xfe00e800

08002940 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08a      	sub	sp, #40	@ 0x28
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800294c:	2300      	movs	r3, #0
 800294e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d068      	beq.n	8002a3e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2210      	movs	r2, #16
 8002972:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002974:	e049      	b.n	8002a0a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d045      	beq.n	8002a0a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7ff f859 	bl	8001a34 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_IsErrorOccurred+0x54>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d13a      	bne.n	8002a0a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800299e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80029b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80029b6:	d121      	bne.n	80029fc <I2C_IsErrorOccurred+0xbc>
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80029be:	d01d      	beq.n	80029fc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	2b20      	cmp	r3, #32
 80029c4:	d01a      	beq.n	80029fc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029d4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029d6:	f7ff f82d 	bl	8001a34 <HAL_GetTick>
 80029da:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029dc:	e00e      	b.n	80029fc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029de:	f7ff f829 	bl	8001a34 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	2b19      	cmp	r3, #25
 80029ea:	d907      	bls.n	80029fc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	6a3b      	ldr	r3, [r7, #32]
 80029ee:	f043 0320 	orr.w	r3, r3, #32
 80029f2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029fa:	e006      	b.n	8002a0a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0320 	and.w	r3, r3, #32
 8002a06:	2b20      	cmp	r3, #32
 8002a08:	d1e9      	bne.n	80029de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d003      	beq.n	8002a20 <I2C_IsErrorOccurred+0xe0>
 8002a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d0aa      	beq.n	8002976 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d103      	bne.n	8002a30 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2220      	movs	r2, #32
 8002a2e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a30:	6a3b      	ldr	r3, [r7, #32]
 8002a32:	f043 0304 	orr.w	r3, r3, #4
 8002a36:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00b      	beq.n	8002a68 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a50:	6a3b      	ldr	r3, [r7, #32]
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00b      	beq.n	8002a8a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a94:	6a3b      	ldr	r3, [r7, #32]
 8002a96:	f043 0302 	orr.w	r3, r3, #2
 8002a9a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002aa4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002aac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d01c      	beq.n	8002aee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f7ff fdaf 	bl	8002618 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6859      	ldr	r1, [r3, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8002afc <I2C_IsErrorOccurred+0x1bc>)
 8002ac6:	400b      	ands	r3, r1
 8002ac8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	431a      	orrs	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002aee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3728      	adds	r7, #40	@ 0x28
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	fe00e800 	.word	0xfe00e800

08002b00 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b087      	sub	sp, #28
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607b      	str	r3, [r7, #4]
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	817b      	strh	r3, [r7, #10]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b18:	7a7b      	ldrb	r3, [r7, #9]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b20:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b2e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	685a      	ldr	r2, [r3, #4]
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	0d5b      	lsrs	r3, r3, #21
 8002b3a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002b3e:	4b08      	ldr	r3, [pc, #32]	@ (8002b60 <I2C_TransferConfig+0x60>)
 8002b40:	430b      	orrs	r3, r1
 8002b42:	43db      	mvns	r3, r3
 8002b44:	ea02 0103 	and.w	r1, r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b52:	bf00      	nop
 8002b54:	371c      	adds	r7, #28
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	03ff63ff 	.word	0x03ff63ff

08002b64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d138      	bne.n	8002bec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d101      	bne.n	8002b88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b84:	2302      	movs	r3, #2
 8002b86:	e032      	b.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2224      	movs	r2, #36	@ 0x24
 8002b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bb6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6819      	ldr	r1, [r3, #0]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	683a      	ldr	r2, [r7, #0]
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f042 0201 	orr.w	r2, r2, #1
 8002bd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002be8:	2300      	movs	r3, #0
 8002bea:	e000      	b.n	8002bee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bec:	2302      	movs	r3, #2
  }
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d139      	bne.n	8002c84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d101      	bne.n	8002c1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e033      	b.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2224      	movs	r2, #36	@ 0x24
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f022 0201 	bic.w	r2, r2, #1
 8002c3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	021b      	lsls	r3, r3, #8
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68fa      	ldr	r2, [r7, #12]
 8002c5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c84:	2302      	movs	r3, #2
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3714      	adds	r7, #20
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	@ (8002cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002c9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002ca4:	f043 0302 	orr.w	r3, r3, #2
 8002ca8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002cac:	4b09      	ldr	r3, [pc, #36]	@ (8002cd4 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002cae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002cb2:	f003 0302 	and.w	r3, r3, #2
 8002cb6:	60fb      	str	r3, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8002cba:	4b07      	ldr	r3, [pc, #28]	@ (8002cd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	4906      	ldr	r1, [pc, #24]	@ (8002cd8 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	604b      	str	r3, [r1, #4]
}
 8002cc6:	bf00      	nop
 8002cc8:	3714      	adds	r7, #20
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	58024400 	.word	0x58024400
 8002cd8:	58000400 	.word	0x58000400

08002cdc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002ce4:	4b19      	ldr	r3, [pc, #100]	@ (8002d4c <HAL_PWREx_ConfigSupply+0x70>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d00a      	beq.n	8002d06 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002cf0:	4b16      	ldr	r3, [pc, #88]	@ (8002d4c <HAL_PWREx_ConfigSupply+0x70>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	f003 0307 	and.w	r3, r3, #7
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e01f      	b.n	8002d42 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e01d      	b.n	8002d42 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002d06:	4b11      	ldr	r3, [pc, #68]	@ (8002d4c <HAL_PWREx_ConfigSupply+0x70>)
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	490f      	ldr	r1, [pc, #60]	@ (8002d4c <HAL_PWREx_ConfigSupply+0x70>)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002d16:	f7fe fe8d 	bl	8001a34 <HAL_GetTick>
 8002d1a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d1c:	e009      	b.n	8002d32 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002d1e:	f7fe fe89 	bl	8001a34 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002d2c:	d901      	bls.n	8002d32 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e007      	b.n	8002d42 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002d32:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <HAL_PWREx_ConfigSupply+0x70>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d3e:	d1ee      	bne.n	8002d1e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	58024800 	.word	0x58024800

08002d50 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b08c      	sub	sp, #48	@ 0x30
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d102      	bne.n	8002d64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	f000 bc48 	b.w	80035f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8088 	beq.w	8002e82 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d72:	4b99      	ldr	r3, [pc, #612]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d7c:	4b96      	ldr	r3, [pc, #600]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d007      	beq.n	8002d98 <HAL_RCC_OscConfig+0x48>
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	d111      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62>
 8002d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d90:	f003 0303 	and.w	r3, r3, #3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d10c      	bne.n	8002db2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d98:	4b8f      	ldr	r3, [pc, #572]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d06d      	beq.n	8002e80 <HAL_RCC_OscConfig+0x130>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d169      	bne.n	8002e80 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	f000 bc21 	b.w	80035f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dba:	d106      	bne.n	8002dca <HAL_RCC_OscConfig+0x7a>
 8002dbc:	4b86      	ldr	r3, [pc, #536]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a85      	ldr	r2, [pc, #532]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dc6:	6013      	str	r3, [r2, #0]
 8002dc8:	e02e      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10c      	bne.n	8002dec <HAL_RCC_OscConfig+0x9c>
 8002dd2:	4b81      	ldr	r3, [pc, #516]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a80      	ldr	r2, [pc, #512]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002dd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ddc:	6013      	str	r3, [r2, #0]
 8002dde:	4b7e      	ldr	r3, [pc, #504]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a7d      	ldr	r2, [pc, #500]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002de4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01d      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002df4:	d10c      	bne.n	8002e10 <HAL_RCC_OscConfig+0xc0>
 8002df6:	4b78      	ldr	r3, [pc, #480]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a77      	ldr	r2, [pc, #476]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e00:	6013      	str	r3, [r2, #0]
 8002e02:	4b75      	ldr	r3, [pc, #468]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a74      	ldr	r2, [pc, #464]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCC_OscConfig+0xd8>
 8002e10:	4b71      	ldr	r3, [pc, #452]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a70      	ldr	r2, [pc, #448]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e1a:	6013      	str	r3, [r2, #0]
 8002e1c:	4b6e      	ldr	r3, [pc, #440]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a6d      	ldr	r2, [pc, #436]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d013      	beq.n	8002e58 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e30:	f7fe fe00 	bl	8001a34 <HAL_GetTick>
 8002e34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e38:	f7fe fdfc 	bl	8001a34 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b64      	cmp	r3, #100	@ 0x64
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e3d4      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e4a:	4b63      	ldr	r3, [pc, #396]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d0f0      	beq.n	8002e38 <HAL_RCC_OscConfig+0xe8>
 8002e56:	e014      	b.n	8002e82 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e58:	f7fe fdec 	bl	8001a34 <HAL_GetTick>
 8002e5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e60:	f7fe fde8 	bl	8001a34 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b64      	cmp	r3, #100	@ 0x64
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e3c0      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e72:	4b59      	ldr	r3, [pc, #356]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1f0      	bne.n	8002e60 <HAL_RCC_OscConfig+0x110>
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 80ca 	beq.w	8003024 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e90:	4b51      	ldr	r3, [pc, #324]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e98:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d007      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x166>
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	2b18      	cmp	r3, #24
 8002eaa:	d156      	bne.n	8002f5a <HAL_RCC_OscConfig+0x20a>
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d151      	bne.n	8002f5a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002eb6:	4b48      	ldr	r3, [pc, #288]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d005      	beq.n	8002ece <HAL_RCC_OscConfig+0x17e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e392      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002ece:	4b42      	ldr	r3, [pc, #264]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f023 0219 	bic.w	r2, r3, #25
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	493f      	ldr	r1, [pc, #252]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee0:	f7fe fda8 	bl	8001a34 <HAL_GetTick>
 8002ee4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ee6:	e008      	b.n	8002efa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ee8:	f7fe fda4 	bl	8001a34 <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d901      	bls.n	8002efa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e37c      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002efa:	4b37      	ldr	r3, [pc, #220]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f003 0304 	and.w	r3, r3, #4
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d0f0      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f06:	f7fe fdc5 	bl	8001a94 <HAL_GetREVID>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d817      	bhi.n	8002f44 <HAL_RCC_OscConfig+0x1f4>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	2b40      	cmp	r3, #64	@ 0x40
 8002f1a:	d108      	bne.n	8002f2e <HAL_RCC_OscConfig+0x1de>
 8002f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002f24:	4a2c      	ldr	r2, [pc, #176]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f2a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f2c:	e07a      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b2a      	ldr	r3, [pc, #168]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	031b      	lsls	r3, r3, #12
 8002f3c:	4926      	ldr	r1, [pc, #152]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f42:	e06f      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f44:	4b24      	ldr	r3, [pc, #144]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	061b      	lsls	r3, r3, #24
 8002f52:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f58:	e064      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d047      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f62:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f023 0219 	bic.w	r2, r3, #25
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	491a      	ldr	r1, [pc, #104]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fd5e 	bl	8001a34 <HAL_GetTick>
 8002f78:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f7c:	f7fe fd5a 	bl	8001a34 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e332      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f8e:	4b12      	ldr	r3, [pc, #72]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f9a:	f7fe fd7b 	bl	8001a94 <HAL_GetREVID>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d819      	bhi.n	8002fdc <HAL_RCC_OscConfig+0x28c>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	2b40      	cmp	r3, #64	@ 0x40
 8002fae:	d108      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x272>
 8002fb0:	4b09      	ldr	r3, [pc, #36]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002fb8:	4a07      	ldr	r2, [pc, #28]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002fba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002fbe:	6053      	str	r3, [r2, #4]
 8002fc0:	e030      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	031b      	lsls	r3, r3, #12
 8002fd0:	4901      	ldr	r1, [pc, #4]	@ (8002fd8 <HAL_RCC_OscConfig+0x288>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
 8002fd6:	e025      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	4b9a      	ldr	r3, [pc, #616]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	061b      	lsls	r3, r3, #24
 8002fea:	4997      	ldr	r1, [pc, #604]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	604b      	str	r3, [r1, #4]
 8002ff0:	e018      	b.n	8003024 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff2:	4b95      	ldr	r3, [pc, #596]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a94      	ldr	r2, [pc, #592]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8002ff8:	f023 0301 	bic.w	r3, r3, #1
 8002ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffe:	f7fe fd19 	bl	8001a34 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003004:	e008      	b.n	8003018 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003006:	f7fe fd15 	bl	8001a34 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e2ed      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003018:	4b8b      	ldr	r3, [pc, #556]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1f0      	bne.n	8003006 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	f000 80a9 	beq.w	8003184 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003032:	4b85      	ldr	r3, [pc, #532]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800303a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800303c:	4b82      	ldr	r3, [pc, #520]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800303e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003040:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2b08      	cmp	r3, #8
 8003046:	d007      	beq.n	8003058 <HAL_RCC_OscConfig+0x308>
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2b18      	cmp	r3, #24
 800304c:	d13a      	bne.n	80030c4 <HAL_RCC_OscConfig+0x374>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d135      	bne.n	80030c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003058:	4b7b      	ldr	r3, [pc, #492]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d005      	beq.n	8003070 <HAL_RCC_OscConfig+0x320>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	2b80      	cmp	r3, #128	@ 0x80
 800306a:	d001      	beq.n	8003070 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e2c1      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003070:	f7fe fd10 	bl	8001a94 <HAL_GetREVID>
 8003074:	4603      	mov	r3, r0
 8003076:	f241 0203 	movw	r2, #4099	@ 0x1003
 800307a:	4293      	cmp	r3, r2
 800307c:	d817      	bhi.n	80030ae <HAL_RCC_OscConfig+0x35e>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	2b20      	cmp	r3, #32
 8003084:	d108      	bne.n	8003098 <HAL_RCC_OscConfig+0x348>
 8003086:	4b70      	ldr	r3, [pc, #448]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800308e:	4a6e      	ldr	r2, [pc, #440]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003090:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003094:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003096:	e075      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003098:	4b6b      	ldr	r3, [pc, #428]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	069b      	lsls	r3, r3, #26
 80030a6:	4968      	ldr	r1, [pc, #416]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030ac:	e06a      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030ae:	4b66      	ldr	r3, [pc, #408]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	061b      	lsls	r3, r3, #24
 80030bc:	4962      	ldr	r1, [pc, #392]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80030c2:	e05f      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d042      	beq.n	8003152 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80030cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a5d      	ldr	r2, [pc, #372]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d8:	f7fe fcac 	bl	8001a34 <HAL_GetTick>
 80030dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030de:	e008      	b.n	80030f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80030e0:	f7fe fca8 	bl	8001a34 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d901      	bls.n	80030f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e280      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030f2:	4b55      	ldr	r3, [pc, #340]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0f0      	beq.n	80030e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80030fe:	f7fe fcc9 	bl	8001a94 <HAL_GetREVID>
 8003102:	4603      	mov	r3, r0
 8003104:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003108:	4293      	cmp	r3, r2
 800310a:	d817      	bhi.n	800313c <HAL_RCC_OscConfig+0x3ec>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a1b      	ldr	r3, [r3, #32]
 8003110:	2b20      	cmp	r3, #32
 8003112:	d108      	bne.n	8003126 <HAL_RCC_OscConfig+0x3d6>
 8003114:	4b4c      	ldr	r3, [pc, #304]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800311c:	4a4a      	ldr	r2, [pc, #296]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800311e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003122:	6053      	str	r3, [r2, #4]
 8003124:	e02e      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
 8003126:	4b48      	ldr	r3, [pc, #288]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	069b      	lsls	r3, r3, #26
 8003134:	4944      	ldr	r1, [pc, #272]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	604b      	str	r3, [r1, #4]
 800313a:	e023      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
 800313c:	4b42      	ldr	r3, [pc, #264]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	061b      	lsls	r3, r3, #24
 800314a:	493f      	ldr	r1, [pc, #252]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800314c:	4313      	orrs	r3, r2
 800314e:	60cb      	str	r3, [r1, #12]
 8003150:	e018      	b.n	8003184 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003152:	4b3d      	ldr	r3, [pc, #244]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a3c      	ldr	r2, [pc, #240]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003158:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800315c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800315e:	f7fe fc69 	bl	8001a34 <HAL_GetTick>
 8003162:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003164:	e008      	b.n	8003178 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003166:	f7fe fc65 	bl	8001a34 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	2b02      	cmp	r3, #2
 8003172:	d901      	bls.n	8003178 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e23d      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003178:	4b33      	ldr	r3, [pc, #204]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1f0      	bne.n	8003166 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0308 	and.w	r3, r3, #8
 800318c:	2b00      	cmp	r3, #0
 800318e:	d036      	beq.n	80031fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d019      	beq.n	80031cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003198:	4b2b      	ldr	r3, [pc, #172]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800319a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319c:	4a2a      	ldr	r2, [pc, #168]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a4:	f7fe fc46 	bl	8001a34 <HAL_GetTick>
 80031a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031aa:	e008      	b.n	80031be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ac:	f7fe fc42 	bl	8001a34 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e21a      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80031be:	4b22      	ldr	r3, [pc, #136]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80031c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031c2:	f003 0302 	and.w	r3, r3, #2
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d0f0      	beq.n	80031ac <HAL_RCC_OscConfig+0x45c>
 80031ca:	e018      	b.n	80031fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031cc:	4b1e      	ldr	r3, [pc, #120]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80031d2:	f023 0301 	bic.w	r3, r3, #1
 80031d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031d8:	f7fe fc2c 	bl	8001a34 <HAL_GetTick>
 80031dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031e0:	f7fe fc28 	bl	8001a34 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e200      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80031f2:	4b15      	ldr	r3, [pc, #84]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 80031f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0320 	and.w	r3, r3, #32
 8003206:	2b00      	cmp	r3, #0
 8003208:	d039      	beq.n	800327e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01c      	beq.n	800324c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a0c      	ldr	r2, [pc, #48]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 8003218:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800321c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800321e:	f7fe fc09 	bl	8001a34 <HAL_GetTick>
 8003222:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003226:	f7fe fc05 	bl	8001a34 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e1dd      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003238:	4b03      	ldr	r3, [pc, #12]	@ (8003248 <HAL_RCC_OscConfig+0x4f8>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0f0      	beq.n	8003226 <HAL_RCC_OscConfig+0x4d6>
 8003244:	e01b      	b.n	800327e <HAL_RCC_OscConfig+0x52e>
 8003246:	bf00      	nop
 8003248:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800324c:	4b9b      	ldr	r3, [pc, #620]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a9a      	ldr	r2, [pc, #616]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003252:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003256:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003258:	f7fe fbec 	bl	8001a34 <HAL_GetTick>
 800325c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800325e:	e008      	b.n	8003272 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003260:	f7fe fbe8 	bl	8001a34 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	2b02      	cmp	r3, #2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e1c0      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003272:	4b92      	ldr	r3, [pc, #584]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f0      	bne.n	8003260 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0304 	and.w	r3, r3, #4
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8081 	beq.w	800338e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800328c:	4b8c      	ldr	r3, [pc, #560]	@ (80034c0 <HAL_RCC_OscConfig+0x770>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a8b      	ldr	r2, [pc, #556]	@ (80034c0 <HAL_RCC_OscConfig+0x770>)
 8003292:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003296:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003298:	f7fe fbcc 	bl	8001a34 <HAL_GetTick>
 800329c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a0:	f7fe fbc8 	bl	8001a34 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b64      	cmp	r3, #100	@ 0x64
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e1a0      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032b2:	4b83      	ldr	r3, [pc, #524]	@ (80034c0 <HAL_RCC_OscConfig+0x770>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <HAL_RCC_OscConfig+0x584>
 80032c6:	4b7d      	ldr	r3, [pc, #500]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ca:	4a7c      	ldr	r2, [pc, #496]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032cc:	f043 0301 	orr.w	r3, r3, #1
 80032d0:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d2:	e02d      	b.n	8003330 <HAL_RCC_OscConfig+0x5e0>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10c      	bne.n	80032f6 <HAL_RCC_OscConfig+0x5a6>
 80032dc:	4b77      	ldr	r3, [pc, #476]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e0:	4a76      	ldr	r2, [pc, #472]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032e8:	4b74      	ldr	r3, [pc, #464]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032ec:	4a73      	ldr	r2, [pc, #460]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80032ee:	f023 0304 	bic.w	r3, r3, #4
 80032f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80032f4:	e01c      	b.n	8003330 <HAL_RCC_OscConfig+0x5e0>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d10c      	bne.n	8003318 <HAL_RCC_OscConfig+0x5c8>
 80032fe:	4b6f      	ldr	r3, [pc, #444]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003302:	4a6e      	ldr	r2, [pc, #440]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003304:	f043 0304 	orr.w	r3, r3, #4
 8003308:	6713      	str	r3, [r2, #112]	@ 0x70
 800330a:	4b6c      	ldr	r3, [pc, #432]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800330c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330e:	4a6b      	ldr	r2, [pc, #428]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003310:	f043 0301 	orr.w	r3, r3, #1
 8003314:	6713      	str	r3, [r2, #112]	@ 0x70
 8003316:	e00b      	b.n	8003330 <HAL_RCC_OscConfig+0x5e0>
 8003318:	4b68      	ldr	r3, [pc, #416]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800331a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800331c:	4a67      	ldr	r2, [pc, #412]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800331e:	f023 0301 	bic.w	r3, r3, #1
 8003322:	6713      	str	r3, [r2, #112]	@ 0x70
 8003324:	4b65      	ldr	r3, [pc, #404]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003328:	4a64      	ldr	r2, [pc, #400]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800332a:	f023 0304 	bic.w	r3, r3, #4
 800332e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d015      	beq.n	8003364 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003338:	f7fe fb7c 	bl	8001a34 <HAL_GetTick>
 800333c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fe fb78 	bl	8001a34 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e14e      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003356:	4b59      	ldr	r3, [pc, #356]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800335a:	f003 0302 	and.w	r3, r3, #2
 800335e:	2b00      	cmp	r3, #0
 8003360:	d0ee      	beq.n	8003340 <HAL_RCC_OscConfig+0x5f0>
 8003362:	e014      	b.n	800338e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003364:	f7fe fb66 	bl	8001a34 <HAL_GetTick>
 8003368:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800336a:	e00a      	b.n	8003382 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800336c:	f7fe fb62 	bl	8001a34 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e138      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003382:	4b4e      	ldr	r3, [pc, #312]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003386:	f003 0302 	and.w	r3, r3, #2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1ee      	bne.n	800336c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 812d 	beq.w	80035f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003398:	4b48      	ldr	r3, [pc, #288]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80033a0:	2b18      	cmp	r3, #24
 80033a2:	f000 80bd 	beq.w	8003520 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f040 809e 	bne.w	80034ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033b0:	4b42      	ldr	r3, [pc, #264]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a41      	ldr	r2, [pc, #260]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80033b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fe fb3a 	bl	8001a34 <HAL_GetTick>
 80033c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c4:	f7fe fb36 	bl	8001a34 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e10e      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80033d6:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033e2:	4b36      	ldr	r3, [pc, #216]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80033e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e6:	4b37      	ldr	r3, [pc, #220]	@ (80034c4 <HAL_RCC_OscConfig+0x774>)
 80033e8:	4013      	ands	r3, r2
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033f2:	0112      	lsls	r2, r2, #4
 80033f4:	430a      	orrs	r2, r1
 80033f6:	4931      	ldr	r1, [pc, #196]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80033f8:	4313      	orrs	r3, r2
 80033fa:	628b      	str	r3, [r1, #40]	@ 0x28
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003400:	3b01      	subs	r3, #1
 8003402:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800340a:	3b01      	subs	r3, #1
 800340c:	025b      	lsls	r3, r3, #9
 800340e:	b29b      	uxth	r3, r3
 8003410:	431a      	orrs	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003416:	3b01      	subs	r3, #1
 8003418:	041b      	lsls	r3, r3, #16
 800341a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800341e:	431a      	orrs	r2, r3
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003424:	3b01      	subs	r3, #1
 8003426:	061b      	lsls	r3, r3, #24
 8003428:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800342c:	4923      	ldr	r1, [pc, #140]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800342e:	4313      	orrs	r3, r2
 8003430:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003432:	4b22      	ldr	r3, [pc, #136]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003436:	4a21      	ldr	r2, [pc, #132]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003438:	f023 0301 	bic.w	r3, r3, #1
 800343c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800343e:	4b1f      	ldr	r3, [pc, #124]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003440:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003442:	4b21      	ldr	r3, [pc, #132]	@ (80034c8 <HAL_RCC_OscConfig+0x778>)
 8003444:	4013      	ands	r3, r2
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800344a:	00d2      	lsls	r2, r2, #3
 800344c:	491b      	ldr	r1, [pc, #108]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800344e:	4313      	orrs	r3, r2
 8003450:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003456:	f023 020c 	bic.w	r2, r3, #12
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345e:	4917      	ldr	r1, [pc, #92]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003460:	4313      	orrs	r3, r2
 8003462:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003464:	4b15      	ldr	r3, [pc, #84]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003468:	f023 0202 	bic.w	r2, r3, #2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	4912      	ldr	r1, [pc, #72]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003472:	4313      	orrs	r3, r2
 8003474:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003476:	4b11      	ldr	r3, [pc, #68]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347a:	4a10      	ldr	r2, [pc, #64]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800347c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003480:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003482:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003486:	4a0d      	ldr	r2, [pc, #52]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800348e:	4b0b      	ldr	r3, [pc, #44]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003492:	4a0a      	ldr	r2, [pc, #40]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 8003494:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003498:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800349a:	4b08      	ldr	r3, [pc, #32]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 800349c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800349e:	4a07      	ldr	r2, [pc, #28]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80034a0:	f043 0301 	orr.w	r3, r3, #1
 80034a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a6:	4b05      	ldr	r3, [pc, #20]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a04      	ldr	r2, [pc, #16]	@ (80034bc <HAL_RCC_OscConfig+0x76c>)
 80034ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80034b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b2:	f7fe fabf 	bl	8001a34 <HAL_GetTick>
 80034b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034b8:	e011      	b.n	80034de <HAL_RCC_OscConfig+0x78e>
 80034ba:	bf00      	nop
 80034bc:	58024400 	.word	0x58024400
 80034c0:	58024800 	.word	0x58024800
 80034c4:	fffffc0c 	.word	0xfffffc0c
 80034c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fab2 	bl	8001a34 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e08a      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80034de:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d0f0      	beq.n	80034cc <HAL_RCC_OscConfig+0x77c>
 80034ea:	e082      	b.n	80035f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ec:	4b43      	ldr	r3, [pc, #268]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a42      	ldr	r2, [pc, #264]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80034f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fa9c 	bl	8001a34 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003500:	f7fe fa98 	bl	8001a34 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e070      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003512:	4b3a      	ldr	r3, [pc, #232]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x7b0>
 800351e:	e068      	b.n	80035f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003520:	4b36      	ldr	r3, [pc, #216]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 8003522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003524:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003526:	4b35      	ldr	r3, [pc, #212]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 8003528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800352a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	2b01      	cmp	r3, #1
 8003532:	d031      	beq.n	8003598 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0203 	and.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800353e:	429a      	cmp	r2, r3
 8003540:	d12a      	bne.n	8003598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	091b      	lsrs	r3, r3, #4
 8003546:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800354e:	429a      	cmp	r2, r3
 8003550:	d122      	bne.n	8003598 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800355e:	429a      	cmp	r2, r3
 8003560:	d11a      	bne.n	8003598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800356e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d111      	bne.n	8003598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	0c1b      	lsrs	r3, r3, #16
 8003578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003580:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003582:	429a      	cmp	r2, r3
 8003584:	d108      	bne.n	8003598 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	0e1b      	lsrs	r3, r3, #24
 800358a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003592:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003594:	429a      	cmp	r2, r3
 8003596:	d001      	beq.n	800359c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e02b      	b.n	80035f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800359c:	4b17      	ldr	r3, [pc, #92]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 800359e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80035a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d01f      	beq.n	80035f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80035b2:	4b12      	ldr	r3, [pc, #72]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	4a11      	ldr	r2, [pc, #68]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035b8:	f023 0301 	bic.w	r3, r3, #1
 80035bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80035be:	f7fe fa39 	bl	8001a34 <HAL_GetTick>
 80035c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80035c4:	bf00      	nop
 80035c6:	f7fe fa35 	bl	8001a34 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d0f9      	beq.n	80035c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80035d2:	4b0a      	ldr	r3, [pc, #40]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003600 <HAL_RCC_OscConfig+0x8b0>)
 80035d8:	4013      	ands	r3, r2
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80035de:	00d2      	lsls	r2, r2, #3
 80035e0:	4906      	ldr	r1, [pc, #24]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035e2:	4313      	orrs	r3, r2
 80035e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80035e6:	4b05      	ldr	r3, [pc, #20]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035ea:	4a04      	ldr	r2, [pc, #16]	@ (80035fc <HAL_RCC_OscConfig+0x8ac>)
 80035ec:	f043 0301 	orr.w	r3, r3, #1
 80035f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3730      	adds	r7, #48	@ 0x30
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	58024400 	.word	0x58024400
 8003600:	ffff0007 	.word	0xffff0007

08003604 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d101      	bne.n	8003618 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e19c      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003618:	4b8a      	ldr	r3, [pc, #552]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 030f 	and.w	r3, r3, #15
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	429a      	cmp	r2, r3
 8003624:	d910      	bls.n	8003648 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003626:	4b87      	ldr	r3, [pc, #540]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f023 020f 	bic.w	r2, r3, #15
 800362e:	4985      	ldr	r1, [pc, #532]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	4313      	orrs	r3, r2
 8003634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003636:	4b83      	ldr	r3, [pc, #524]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e184      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d010      	beq.n	8003676 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	4b7b      	ldr	r3, [pc, #492]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003660:	429a      	cmp	r2, r3
 8003662:	d908      	bls.n	8003676 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003664:	4b78      	ldr	r3, [pc, #480]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	4975      	ldr	r1, [pc, #468]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003672:	4313      	orrs	r3, r2
 8003674:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d010      	beq.n	80036a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695a      	ldr	r2, [r3, #20]
 8003686:	4b70      	ldr	r3, [pc, #448]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800368e:	429a      	cmp	r2, r3
 8003690:	d908      	bls.n	80036a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003692:	4b6d      	ldr	r3, [pc, #436]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	496a      	ldr	r1, [pc, #424]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0310 	and.w	r3, r3, #16
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	4b64      	ldr	r3, [pc, #400]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036b6:	69db      	ldr	r3, [r3, #28]
 80036b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80036bc:	429a      	cmp	r2, r3
 80036be:	d908      	bls.n	80036d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80036c0:	4b61      	ldr	r3, [pc, #388]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	495e      	ldr	r1, [pc, #376]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d010      	beq.n	8003700 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	69da      	ldr	r2, [r3, #28]
 80036e2:	4b59      	ldr	r3, [pc, #356]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d908      	bls.n	8003700 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80036ee:	4b56      	ldr	r3, [pc, #344]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036f0:	6a1b      	ldr	r3, [r3, #32]
 80036f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	4953      	ldr	r1, [pc, #332]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d010      	beq.n	800372e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68da      	ldr	r2, [r3, #12]
 8003710:	4b4d      	ldr	r3, [pc, #308]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f003 030f 	and.w	r3, r3, #15
 8003718:	429a      	cmp	r2, r3
 800371a:	d908      	bls.n	800372e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b4a      	ldr	r3, [pc, #296]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f023 020f 	bic.w	r2, r3, #15
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	4947      	ldr	r1, [pc, #284]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800372a:	4313      	orrs	r3, r2
 800372c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d055      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800373a:	4b43      	ldr	r3, [pc, #268]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4940      	ldr	r1, [pc, #256]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003748:	4313      	orrs	r3, r2
 800374a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	2b02      	cmp	r3, #2
 8003752:	d107      	bne.n	8003764 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003754:	4b3c      	ldr	r3, [pc, #240]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d121      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e0f6      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b03      	cmp	r3, #3
 800376a:	d107      	bne.n	800377c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800376c:	4b36      	ldr	r3, [pc, #216]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d115      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e0ea      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d107      	bne.n	8003794 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003784:	4b30      	ldr	r3, [pc, #192]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378c:	2b00      	cmp	r3, #0
 800378e:	d109      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0de      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003794:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d6      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037a6:	691b      	ldr	r3, [r3, #16]
 80037a8:	f023 0207 	bic.w	r2, r3, #7
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4925      	ldr	r1, [pc, #148]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037b6:	f7fe f93d 	bl	8001a34 <HAL_GetTick>
 80037ba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037bc:	e00a      	b.n	80037d4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037be:	f7fe f939 	bl	8001a34 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d901      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80037d0:	2303      	movs	r3, #3
 80037d2:	e0be      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d4:	4b1c      	ldr	r3, [pc, #112]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d1eb      	bne.n	80037be <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d010      	beq.n	8003814 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	68da      	ldr	r2, [r3, #12]
 80037f6:	4b14      	ldr	r3, [pc, #80]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	f003 030f 	and.w	r3, r3, #15
 80037fe:	429a      	cmp	r2, r3
 8003800:	d208      	bcs.n	8003814 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003804:	699b      	ldr	r3, [r3, #24]
 8003806:	f023 020f 	bic.w	r2, r3, #15
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	490e      	ldr	r1, [pc, #56]	@ (8003848 <HAL_RCC_ClockConfig+0x244>)
 8003810:	4313      	orrs	r3, r2
 8003812:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003814:	4b0b      	ldr	r3, [pc, #44]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d214      	bcs.n	800384c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003822:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f023 020f 	bic.w	r2, r3, #15
 800382a:	4906      	ldr	r1, [pc, #24]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	4313      	orrs	r3, r2
 8003830:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003832:	4b04      	ldr	r3, [pc, #16]	@ (8003844 <HAL_RCC_ClockConfig+0x240>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	429a      	cmp	r2, r3
 800383e:	d005      	beq.n	800384c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e086      	b.n	8003952 <HAL_RCC_ClockConfig+0x34e>
 8003844:	52002000 	.word	0x52002000
 8003848:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0304 	and.w	r3, r3, #4
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	4b3f      	ldr	r3, [pc, #252]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003864:	429a      	cmp	r2, r3
 8003866:	d208      	bcs.n	800387a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003868:	4b3c      	ldr	r3, [pc, #240]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	4939      	ldr	r1, [pc, #228]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003876:	4313      	orrs	r3, r2
 8003878:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0308 	and.w	r3, r3, #8
 8003882:	2b00      	cmp	r3, #0
 8003884:	d010      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800388c:	69db      	ldr	r3, [r3, #28]
 800388e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003892:	429a      	cmp	r2, r3
 8003894:	d208      	bcs.n	80038a8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003896:	4b31      	ldr	r3, [pc, #196]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003898:	69db      	ldr	r3, [r3, #28]
 800389a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	492e      	ldr	r1, [pc, #184]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0310 	and.w	r3, r3, #16
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	699a      	ldr	r2, [r3, #24]
 80038b8:	4b28      	ldr	r3, [pc, #160]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038ba:	69db      	ldr	r3, [r3, #28]
 80038bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d208      	bcs.n	80038d6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80038c4:	4b25      	ldr	r3, [pc, #148]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	4922      	ldr	r1, [pc, #136]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0320 	and.w	r3, r3, #32
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d010      	beq.n	8003904 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	69da      	ldr	r2, [r3, #28]
 80038e6:	4b1d      	ldr	r3, [pc, #116]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d208      	bcs.n	8003904 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80038f2:	4b1a      	ldr	r3, [pc, #104]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 80038f4:	6a1b      	ldr	r3, [r3, #32]
 80038f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	4917      	ldr	r1, [pc, #92]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003900:	4313      	orrs	r3, r2
 8003902:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003904:	f000 f834 	bl	8003970 <HAL_RCC_GetSysClockFreq>
 8003908:	4602      	mov	r2, r0
 800390a:	4b14      	ldr	r3, [pc, #80]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	0a1b      	lsrs	r3, r3, #8
 8003910:	f003 030f 	and.w	r3, r3, #15
 8003914:	4912      	ldr	r1, [pc, #72]	@ (8003960 <HAL_RCC_ClockConfig+0x35c>)
 8003916:	5ccb      	ldrb	r3, [r1, r3]
 8003918:	f003 031f 	and.w	r3, r3, #31
 800391c:	fa22 f303 	lsr.w	r3, r2, r3
 8003920:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003922:	4b0e      	ldr	r3, [pc, #56]	@ (800395c <HAL_RCC_ClockConfig+0x358>)
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	4a0d      	ldr	r2, [pc, #52]	@ (8003960 <HAL_RCC_ClockConfig+0x35c>)
 800392c:	5cd3      	ldrb	r3, [r2, r3]
 800392e:	f003 031f 	and.w	r3, r3, #31
 8003932:	693a      	ldr	r2, [r7, #16]
 8003934:	fa22 f303 	lsr.w	r3, r2, r3
 8003938:	4a0a      	ldr	r2, [pc, #40]	@ (8003964 <HAL_RCC_ClockConfig+0x360>)
 800393a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800393c:	4a0a      	ldr	r2, [pc, #40]	@ (8003968 <HAL_RCC_ClockConfig+0x364>)
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003942:	4b0a      	ldr	r3, [pc, #40]	@ (800396c <HAL_RCC_ClockConfig+0x368>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4618      	mov	r0, r3
 8003948:	f7fe f82a 	bl	80019a0 <HAL_InitTick>
 800394c:	4603      	mov	r3, r0
 800394e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003950:	7bfb      	ldrb	r3, [r7, #15]
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	58024400 	.word	0x58024400
 8003960:	08009ed4 	.word	0x08009ed4
 8003964:	24000004 	.word	0x24000004
 8003968:	24000000 	.word	0x24000000
 800396c:	24000008 	.word	0x24000008

08003970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003976:	4bb3      	ldr	r3, [pc, #716]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800397e:	2b18      	cmp	r3, #24
 8003980:	f200 8155 	bhi.w	8003c2e <HAL_RCC_GetSysClockFreq+0x2be>
 8003984:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039f1 	.word	0x080039f1
 8003990:	08003c2f 	.word	0x08003c2f
 8003994:	08003c2f 	.word	0x08003c2f
 8003998:	08003c2f 	.word	0x08003c2f
 800399c:	08003c2f 	.word	0x08003c2f
 80039a0:	08003c2f 	.word	0x08003c2f
 80039a4:	08003c2f 	.word	0x08003c2f
 80039a8:	08003c2f 	.word	0x08003c2f
 80039ac:	08003a17 	.word	0x08003a17
 80039b0:	08003c2f 	.word	0x08003c2f
 80039b4:	08003c2f 	.word	0x08003c2f
 80039b8:	08003c2f 	.word	0x08003c2f
 80039bc:	08003c2f 	.word	0x08003c2f
 80039c0:	08003c2f 	.word	0x08003c2f
 80039c4:	08003c2f 	.word	0x08003c2f
 80039c8:	08003c2f 	.word	0x08003c2f
 80039cc:	08003a1d 	.word	0x08003a1d
 80039d0:	08003c2f 	.word	0x08003c2f
 80039d4:	08003c2f 	.word	0x08003c2f
 80039d8:	08003c2f 	.word	0x08003c2f
 80039dc:	08003c2f 	.word	0x08003c2f
 80039e0:	08003c2f 	.word	0x08003c2f
 80039e4:	08003c2f 	.word	0x08003c2f
 80039e8:	08003c2f 	.word	0x08003c2f
 80039ec:	08003a23 	.word	0x08003a23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80039f0:	4b94      	ldr	r3, [pc, #592]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d009      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80039fc:	4b91      	ldr	r3, [pc, #580]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	08db      	lsrs	r3, r3, #3
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	4a90      	ldr	r2, [pc, #576]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a08:	fa22 f303 	lsr.w	r3, r2, r3
 8003a0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003a0e:	e111      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a10:	4b8d      	ldr	r3, [pc, #564]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a12:	61bb      	str	r3, [r7, #24]
      break;
 8003a14:	e10e      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003a16:	4b8d      	ldr	r3, [pc, #564]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003a18:	61bb      	str	r3, [r7, #24]
      break;
 8003a1a:	e10b      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003a1c:	4b8c      	ldr	r3, [pc, #560]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003a1e:	61bb      	str	r3, [r7, #24]
      break;
 8003a20:	e108      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a22:	4b88      	ldr	r3, [pc, #544]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	f003 0303 	and.w	r3, r3, #3
 8003a2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003a2c:	4b85      	ldr	r3, [pc, #532]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	091b      	lsrs	r3, r3, #4
 8003a32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a38:	4b82      	ldr	r3, [pc, #520]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003a42:	4b80      	ldr	r3, [pc, #512]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a46:	08db      	lsrs	r3, r3, #3
 8003a48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	fb02 f303 	mul.w	r3, r2, r3
 8003a52:	ee07 3a90 	vmov	s15, r3
 8003a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 80e1 	beq.w	8003c28 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	f000 8083 	beq.w	8003b74 <HAL_RCC_GetSysClockFreq+0x204>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_RCC_GetSysClockFreq+0x114>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d056      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003a82:	e099      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a84:	4b6f      	ldr	r3, [pc, #444]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d02d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003a90:	4b6c      	ldr	r3, [pc, #432]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	08db      	lsrs	r3, r3, #3
 8003a96:	f003 0303 	and.w	r3, r3, #3
 8003a9a:	4a6b      	ldr	r2, [pc, #428]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8003aa0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	ee07 3a90 	vmov	s15, r3
 8003aa8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	ee07 3a90 	vmov	s15, r3
 8003ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003aba:	4b62      	ldr	r3, [pc, #392]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ac2:	ee07 3a90 	vmov	s15, r3
 8003ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ace:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ada:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003aea:	e087      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	ee07 3a90 	vmov	s15, r3
 8003af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003af6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003c58 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003afe:	4b51      	ldr	r3, [pc, #324]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b06:	ee07 3a90 	vmov	s15, r3
 8003b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b2e:	e065      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	ee07 3a90 	vmov	s15, r3
 8003b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b42:	4b40      	ldr	r3, [pc, #256]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b4a:	ee07 3a90 	vmov	s15, r3
 8003b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003b72:	e043      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	ee07 3a90 	vmov	s15, r3
 8003b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003c60 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003b82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b86:	4b2f      	ldr	r3, [pc, #188]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8e:	ee07 3a90 	vmov	s15, r3
 8003b92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ba2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ba6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003baa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bb6:	e021      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	ee07 3a90 	vmov	s15, r3
 8003bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003c5c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bca:	4b1e      	ldr	r3, [pc, #120]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003c54 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003be2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003be6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bf6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bfa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c06:	3301      	adds	r3, #1
 8003c08:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	ee07 3a90 	vmov	s15, r3
 8003c10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c14:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c20:	ee17 3a90 	vmov	r3, s15
 8003c24:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003c26:	e005      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61bb      	str	r3, [r7, #24]
      break;
 8003c2c:	e002      	b.n	8003c34 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003c2e:	4b07      	ldr	r3, [pc, #28]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003c30:	61bb      	str	r3, [r7, #24]
      break;
 8003c32:	bf00      	nop
  }

  return sysclockfreq;
 8003c34:	69bb      	ldr	r3, [r7, #24]
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3724      	adds	r7, #36	@ 0x24
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	58024400 	.word	0x58024400
 8003c48:	03d09000 	.word	0x03d09000
 8003c4c:	003d0900 	.word	0x003d0900
 8003c50:	017d7840 	.word	0x017d7840
 8003c54:	46000000 	.word	0x46000000
 8003c58:	4c742400 	.word	0x4c742400
 8003c5c:	4a742400 	.word	0x4a742400
 8003c60:	4bbebc20 	.word	0x4bbebc20

08003c64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c68:	b0ca      	sub	sp, #296	@ 0x128
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c70:	2300      	movs	r3, #0
 8003c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003c88:	2500      	movs	r5, #0
 8003c8a:	ea54 0305 	orrs.w	r3, r4, r5
 8003c8e:	d049      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003c90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c9a:	d02f      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003c9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003ca0:	d828      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ca6:	d01a      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ca8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cac:	d822      	bhi.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb6:	d007      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003cb8:	e01c      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cba:	4bb8      	ldr	r3, [pc, #736]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cbe:	4ab7      	ldr	r2, [pc, #732]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003cc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cc6:	e01a      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ccc:	3308      	adds	r3, #8
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f001 f9d1 	bl	8005078 <RCCEx_PLL2_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cdc:	e00f      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	3328      	adds	r3, #40	@ 0x28
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 fa78 	bl	80051dc <RCCEx_PLL3_Config>
 8003cec:	4603      	mov	r3, r0
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003cf2:	e004      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cfa:	e000      	b.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003cfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d10a      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003d06:	4ba5      	ldr	r3, [pc, #660]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d14:	4aa1      	ldr	r2, [pc, #644]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d16:	430b      	orrs	r3, r1
 8003d18:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d1a:	e003      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003d30:	f04f 0900 	mov.w	r9, #0
 8003d34:	ea58 0309 	orrs.w	r3, r8, r9
 8003d38:	d047      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d82a      	bhi.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003d44:	a201      	add	r2, pc, #4	@ (adr r2, 8003d4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4a:	bf00      	nop
 8003d4c:	08003d61 	.word	0x08003d61
 8003d50:	08003d6f 	.word	0x08003d6f
 8003d54:	08003d85 	.word	0x08003d85
 8003d58:	08003da3 	.word	0x08003da3
 8003d5c:	08003da3 	.word	0x08003da3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d60:	4b8e      	ldr	r3, [pc, #568]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d64:	4a8d      	ldr	r2, [pc, #564]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003d66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d6c:	e01a      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	3308      	adds	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 f97e 	bl	8005078 <RCCEx_PLL2_Config>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d82:	e00f      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	3328      	adds	r3, #40	@ 0x28
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f001 fa25 	bl	80051dc <RCCEx_PLL3_Config>
 8003d92:	4603      	mov	r3, r0
 8003d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003d98:	e004      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003da0:	e000      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d10a      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dac:	4b7b      	ldr	r3, [pc, #492]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003db0:	f023 0107 	bic.w	r1, r3, #7
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dba:	4a78      	ldr	r2, [pc, #480]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003dd6:	f04f 0b00 	mov.w	fp, #0
 8003dda:	ea5a 030b 	orrs.w	r3, sl, fp
 8003dde:	d04c      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003de4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dea:	d030      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003dec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df0:	d829      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003df2:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df4:	d02d      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003df6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003df8:	d825      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003dfa:	2b80      	cmp	r3, #128	@ 0x80
 8003dfc:	d018      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003dfe:	2b80      	cmp	r3, #128	@ 0x80
 8003e00:	d821      	bhi.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003e06:	2b40      	cmp	r3, #64	@ 0x40
 8003e08:	d007      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003e0a:	e01c      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e0c:	4b63      	ldr	r3, [pc, #396]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e10:	4a62      	ldr	r2, [pc, #392]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e18:	e01c      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	3308      	adds	r3, #8
 8003e20:	2100      	movs	r1, #0
 8003e22:	4618      	mov	r0, r3
 8003e24:	f001 f928 	bl	8005078 <RCCEx_PLL2_Config>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e2e:	e011      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	3328      	adds	r3, #40	@ 0x28
 8003e36:	2100      	movs	r1, #0
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f001 f9cf 	bl	80051dc <RCCEx_PLL3_Config>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003e44:	e006      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e4c:	e002      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003e52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e6a:	4a4c      	ldr	r2, [pc, #304]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e6c:	430b      	orrs	r3, r1
 8003e6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e70:	e003      	b.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003e86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003e90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d053      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003ea2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003ea6:	d035      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003ea8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003eac:	d82e      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003eae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003eb2:	d031      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003eb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003eb8:	d828      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ebe:	d01a      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ec0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ec4:	d822      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003eca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ece:	d007      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003ed0:	e01c      	b.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ed2:	4b32      	ldr	r3, [pc, #200]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed6:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ed8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003edc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ede:	e01c      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f001 f8c5 	bl	8005078 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e011      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 f96c 	bl	80051dc <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e006      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e002      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f22:	4b1e      	ldr	r3, [pc, #120]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003f32:	4a1a      	ldr	r2, [pc, #104]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003f4e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003f52:	2300      	movs	r3, #0
 8003f54:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003f58:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003f5c:	460b      	mov	r3, r1
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	d056      	beq.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f66:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003f6a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f6e:	d038      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003f70:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f74:	d831      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f7a:	d034      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003f7c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003f80:	d82b      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f86:	d01d      	beq.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003f88:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f8c:	d825      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003f92:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003f96:	d00a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003f98:	e01f      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003f9a:	bf00      	nop
 8003f9c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fa0:	4ba2      	ldr	r3, [pc, #648]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa4:	4aa1      	ldr	r2, [pc, #644]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003fa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003faa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb2:	3308      	adds	r3, #8
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f85e 	bl	8005078 <RCCEx_PLL2_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003fc2:	e011      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc8:	3328      	adds	r3, #40	@ 0x28
 8003fca:	2100      	movs	r1, #0
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f001 f905 	bl	80051dc <RCCEx_PLL3_Config>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003fd8:	e006      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe0:	e002      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e000      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003fe6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10b      	bne.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003ff0:	4b8e      	ldr	r3, [pc, #568]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003ff2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004000:	4a8a      	ldr	r2, [pc, #552]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004002:	430b      	orrs	r3, r1
 8004004:	6593      	str	r3, [r2, #88]	@ 0x58
 8004006:	e003      	b.n	8004010 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004008:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800400c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004010:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800401c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004020:	2300      	movs	r3, #0
 8004022:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004026:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800402a:	460b      	mov	r3, r1
 800402c:	4313      	orrs	r3, r2
 800402e:	d03a      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	2b30      	cmp	r3, #48	@ 0x30
 8004038:	d01f      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800403a:	2b30      	cmp	r3, #48	@ 0x30
 800403c:	d819      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800403e:	2b20      	cmp	r3, #32
 8004040:	d00c      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8004042:	2b20      	cmp	r3, #32
 8004044:	d815      	bhi.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d019      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800404a:	2b10      	cmp	r3, #16
 800404c:	d111      	bne.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800404e:	4b77      	ldr	r3, [pc, #476]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004052:	4a76      	ldr	r2, [pc, #472]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004058:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800405a:	e011      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004060:	3308      	adds	r3, #8
 8004062:	2102      	movs	r1, #2
 8004064:	4618      	mov	r0, r3
 8004066:	f001 f807 	bl	8005078 <RCCEx_PLL2_Config>
 800406a:	4603      	mov	r3, r0
 800406c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004070:	e006      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004078:	e002      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800407a:	bf00      	nop
 800407c:	e000      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800407e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004080:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004088:	4b68      	ldr	r3, [pc, #416]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800408a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800408c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004096:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004098:	430b      	orrs	r3, r1
 800409a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80040b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80040bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d051      	beq.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040d0:	d035      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80040d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040d6:	d82e      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80040d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040dc:	d031      	beq.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80040de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80040e2:	d828      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80040e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e8:	d01a      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ee:	d822      	bhi.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d003      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80040f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040f8:	d007      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80040fa:	e01c      	b.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040fc:	4b4b      	ldr	r3, [pc, #300]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	4a4a      	ldr	r2, [pc, #296]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004106:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004108:	e01c      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410e:	3308      	adds	r3, #8
 8004110:	2100      	movs	r1, #0
 8004112:	4618      	mov	r0, r3
 8004114:	f000 ffb0 	bl	8005078 <RCCEx_PLL2_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800411e:	e011      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004124:	3328      	adds	r3, #40	@ 0x28
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f001 f857 	bl	80051dc <RCCEx_PLL3_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004134:	e006      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800413c:	e002      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8004142:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004144:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800414c:	4b37      	ldr	r3, [pc, #220]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800414e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004150:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800415a:	4a34      	ldr	r2, [pc, #208]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800415c:	430b      	orrs	r3, r1
 800415e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004160:	e003      	b.n	800416a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004166:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800416a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004176:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800417a:	2300      	movs	r3, #0
 800417c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004180:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d056      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004190:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004194:	d033      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004196:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800419a:	d82c      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800419c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a0:	d02f      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80041a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041a6:	d826      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041ac:	d02b      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80041ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041b2:	d820      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b8:	d012      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80041ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041be:	d81a      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d022      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80041c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c8:	d115      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3308      	adds	r3, #8
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 ff50 	bl	8005078 <RCCEx_PLL2_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041de:	e015      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e4:	3328      	adds	r3, #40	@ 0x28
 80041e6:	2101      	movs	r1, #1
 80041e8:	4618      	mov	r0, r3
 80041ea:	f000 fff7 	bl	80051dc <RCCEx_PLL3_Config>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fc:	e006      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80041fe:	bf00      	nop
 8004200:	e004      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004202:	bf00      	nop
 8004204:	e002      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004206:	bf00      	nop
 8004208:	e000      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800420a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800420c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004214:	4b05      	ldr	r3, [pc, #20]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004216:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004218:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004220:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004222:	4a02      	ldr	r2, [pc, #8]	@ (800422c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004224:	430b      	orrs	r3, r1
 8004226:	6513      	str	r3, [r2, #80]	@ 0x50
 8004228:	e006      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800422a:	bf00      	nop
 800422c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800424e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d055      	beq.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004264:	d033      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004266:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800426a:	d82c      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800426c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004270:	d02f      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004272:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004276:	d826      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800427c:	d02b      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800427e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004282:	d820      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004288:	d012      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800428a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800428e:	d81a      	bhi.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004294:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004298:	d115      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800429a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429e:	3308      	adds	r3, #8
 80042a0:	2101      	movs	r1, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fee8 	bl	8005078 <RCCEx_PLL2_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042ae:	e015      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b4:	3328      	adds	r3, #40	@ 0x28
 80042b6:	2101      	movs	r1, #1
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 ff8f 	bl	80051dc <RCCEx_PLL3_Config>
 80042be:	4603      	mov	r3, r0
 80042c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80042c4:	e00a      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042cc:	e006      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042ce:	bf00      	nop
 80042d0:	e004      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042d2:	bf00      	nop
 80042d4:	e002      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042d6:	bf00      	nop
 80042d8:	e000      	b.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80042da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10b      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80042e4:	4ba3      	ldr	r3, [pc, #652]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80042f4:	4a9f      	ldr	r2, [pc, #636]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80042f6:	430b      	orrs	r3, r1
 80042f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80042fa:	e003      	b.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8004310:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004314:	2300      	movs	r3, #0
 8004316:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800431a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800431e:	460b      	mov	r3, r1
 8004320:	4313      	orrs	r3, r2
 8004322:	d037      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800432a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800432e:	d00e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004334:	d816      	bhi.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d018      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800433a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800433e:	d111      	bne.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004340:	4b8c      	ldr	r3, [pc, #560]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004344:	4a8b      	ldr	r2, [pc, #556]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800434a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800434c:	e00f      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	3308      	adds	r3, #8
 8004354:	2101      	movs	r1, #1
 8004356:	4618      	mov	r0, r3
 8004358:	f000 fe8e 	bl	8005078 <RCCEx_PLL2_Config>
 800435c:	4603      	mov	r3, r0
 800435e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004362:	e004      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800436a:	e000      	b.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800436c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10a      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004376:	4b7f      	ldr	r3, [pc, #508]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800437e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	4a7b      	ldr	r2, [pc, #492]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004386:	430b      	orrs	r3, r1
 8004388:	6513      	str	r3, [r2, #80]	@ 0x50
 800438a:	e003      	b.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80043a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a4:	2300      	movs	r3, #0
 80043a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80043aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4313      	orrs	r3, r2
 80043b2:	d039      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80043b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d81c      	bhi.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80043be:	a201      	add	r2, pc, #4	@ (adr r2, 80043c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80043c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c4:	08004401 	.word	0x08004401
 80043c8:	080043d5 	.word	0x080043d5
 80043cc:	080043e3 	.word	0x080043e3
 80043d0:	08004401 	.word	0x08004401
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d4:	4b67      	ldr	r3, [pc, #412]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d8:	4a66      	ldr	r2, [pc, #408]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80043da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043e0:	e00f      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e6:	3308      	adds	r3, #8
 80043e8:	2102      	movs	r1, #2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fe44 	bl	8005078 <RCCEx_PLL2_Config>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80043f6:	e004      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fe:	e000      	b.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004400:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10a      	bne.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800440a:	4b5a      	ldr	r3, [pc, #360]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800440c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800440e:	f023 0103 	bic.w	r1, r3, #3
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004418:	4a56      	ldr	r2, [pc, #344]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800441a:	430b      	orrs	r3, r1
 800441c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800441e:	e003      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004420:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004424:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004434:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004438:	2300      	movs	r3, #0
 800443a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800443e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	f000 809f 	beq.w	8004588 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800444a:	4b4b      	ldr	r3, [pc, #300]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a4a      	ldr	r2, [pc, #296]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004454:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004456:	f7fd faed 	bl	8001a34 <HAL_GetTick>
 800445a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800445e:	e00b      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004460:	f7fd fae8 	bl	8001a34 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800446a:	1ad3      	subs	r3, r2, r3
 800446c:	2b64      	cmp	r3, #100	@ 0x64
 800446e:	d903      	bls.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004476:	e005      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004478:	4b3f      	ldr	r3, [pc, #252]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0ed      	beq.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004484:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004488:	2b00      	cmp	r3, #0
 800448a:	d179      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800448c:	4b39      	ldr	r3, [pc, #228]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800448e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004498:	4053      	eors	r3, r2
 800449a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d015      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044a2:	4b34      	ldr	r3, [pc, #208]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044ae:	4b31      	ldr	r3, [pc, #196]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b2:	4a30      	ldr	r2, [pc, #192]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ba:	4b2e      	ldr	r3, [pc, #184]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044be:	4a2d      	ldr	r2, [pc, #180]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80044c6:	4a2b      	ldr	r2, [pc, #172]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80044cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80044ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044da:	d118      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fd faaa 	bl	8001a34 <HAL_GetTick>
 80044e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80044e4:	e00d      	b.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044e6:	f7fd faa5 	bl	8001a34 <HAL_GetTick>
 80044ea:	4602      	mov	r2, r0
 80044ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80044f0:	1ad2      	subs	r2, r2, r3
 80044f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d903      	bls.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8004500:	e005      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004502:	4b1c      	ldr	r3, [pc, #112]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004506:	f003 0302 	and.w	r3, r3, #2
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0eb      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	2b00      	cmp	r3, #0
 8004514:	d129      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800451e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004522:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004526:	d10e      	bne.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004528:	4b12      	ldr	r3, [pc, #72]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800452a:	691b      	ldr	r3, [r3, #16]
 800452c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004534:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004538:	091a      	lsrs	r2, r3, #4
 800453a:	4b10      	ldr	r3, [pc, #64]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800453c:	4013      	ands	r3, r2
 800453e:	4a0d      	ldr	r2, [pc, #52]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004540:	430b      	orrs	r3, r1
 8004542:	6113      	str	r3, [r2, #16]
 8004544:	e005      	b.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8004546:	4b0b      	ldr	r3, [pc, #44]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	4a0a      	ldr	r2, [pc, #40]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800454c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004550:	6113      	str	r3, [r2, #16]
 8004552:	4b08      	ldr	r3, [pc, #32]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004554:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800455e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004562:	4a04      	ldr	r2, [pc, #16]	@ (8004574 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004564:	430b      	orrs	r3, r1
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
 8004568:	e00e      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004572:	e009      	b.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004574:	58024400 	.word	0x58024400
 8004578:	58024800 	.word	0x58024800
 800457c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004584:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004588:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f002 0301 	and.w	r3, r2, #1
 8004594:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004598:	2300      	movs	r3, #0
 800459a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800459e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4313      	orrs	r3, r2
 80045a6:	f000 8089 	beq.w	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80045b0:	2b28      	cmp	r3, #40	@ 0x28
 80045b2:	d86b      	bhi.n	800468c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80045b4:	a201      	add	r2, pc, #4	@ (adr r2, 80045bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	08004695 	.word	0x08004695
 80045c0:	0800468d 	.word	0x0800468d
 80045c4:	0800468d 	.word	0x0800468d
 80045c8:	0800468d 	.word	0x0800468d
 80045cc:	0800468d 	.word	0x0800468d
 80045d0:	0800468d 	.word	0x0800468d
 80045d4:	0800468d 	.word	0x0800468d
 80045d8:	0800468d 	.word	0x0800468d
 80045dc:	08004661 	.word	0x08004661
 80045e0:	0800468d 	.word	0x0800468d
 80045e4:	0800468d 	.word	0x0800468d
 80045e8:	0800468d 	.word	0x0800468d
 80045ec:	0800468d 	.word	0x0800468d
 80045f0:	0800468d 	.word	0x0800468d
 80045f4:	0800468d 	.word	0x0800468d
 80045f8:	0800468d 	.word	0x0800468d
 80045fc:	08004677 	.word	0x08004677
 8004600:	0800468d 	.word	0x0800468d
 8004604:	0800468d 	.word	0x0800468d
 8004608:	0800468d 	.word	0x0800468d
 800460c:	0800468d 	.word	0x0800468d
 8004610:	0800468d 	.word	0x0800468d
 8004614:	0800468d 	.word	0x0800468d
 8004618:	0800468d 	.word	0x0800468d
 800461c:	08004695 	.word	0x08004695
 8004620:	0800468d 	.word	0x0800468d
 8004624:	0800468d 	.word	0x0800468d
 8004628:	0800468d 	.word	0x0800468d
 800462c:	0800468d 	.word	0x0800468d
 8004630:	0800468d 	.word	0x0800468d
 8004634:	0800468d 	.word	0x0800468d
 8004638:	0800468d 	.word	0x0800468d
 800463c:	08004695 	.word	0x08004695
 8004640:	0800468d 	.word	0x0800468d
 8004644:	0800468d 	.word	0x0800468d
 8004648:	0800468d 	.word	0x0800468d
 800464c:	0800468d 	.word	0x0800468d
 8004650:	0800468d 	.word	0x0800468d
 8004654:	0800468d 	.word	0x0800468d
 8004658:	0800468d 	.word	0x0800468d
 800465c:	08004695 	.word	0x08004695
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	3308      	adds	r3, #8
 8004666:	2101      	movs	r1, #1
 8004668:	4618      	mov	r0, r3
 800466a:	f000 fd05 	bl	8005078 <RCCEx_PLL2_Config>
 800466e:	4603      	mov	r3, r0
 8004670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004674:	e00f      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467a:	3328      	adds	r3, #40	@ 0x28
 800467c:	2101      	movs	r1, #1
 800467e:	4618      	mov	r0, r3
 8004680:	f000 fdac 	bl	80051dc <RCCEx_PLL3_Config>
 8004684:	4603      	mov	r3, r0
 8004686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800468a:	e004      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004692:	e000      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800469e:	4bbf      	ldr	r3, [pc, #764]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046ac:	4abb      	ldr	r2, [pc, #748]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80046ae:	430b      	orrs	r3, r1
 80046b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80046b2:	e003      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80046bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c4:	f002 0302 	and.w	r3, r2, #2
 80046c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046cc:	2300      	movs	r3, #0
 80046ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80046d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80046d6:	460b      	mov	r3, r1
 80046d8:	4313      	orrs	r3, r2
 80046da:	d041      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80046e2:	2b05      	cmp	r3, #5
 80046e4:	d824      	bhi.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80046e6:	a201      	add	r2, pc, #4	@ (adr r2, 80046ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80046e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ec:	08004739 	.word	0x08004739
 80046f0:	08004705 	.word	0x08004705
 80046f4:	0800471b 	.word	0x0800471b
 80046f8:	08004739 	.word	0x08004739
 80046fc:	08004739 	.word	0x08004739
 8004700:	08004739 	.word	0x08004739
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004708:	3308      	adds	r3, #8
 800470a:	2101      	movs	r1, #1
 800470c:	4618      	mov	r0, r3
 800470e:	f000 fcb3 	bl	8005078 <RCCEx_PLL2_Config>
 8004712:	4603      	mov	r3, r0
 8004714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004718:	e00f      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800471a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471e:	3328      	adds	r3, #40	@ 0x28
 8004720:	2101      	movs	r1, #1
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fd5a 	bl	80051dc <RCCEx_PLL3_Config>
 8004728:	4603      	mov	r3, r0
 800472a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800472e:	e004      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004736:	e000      	b.n	800473a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800473a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004742:	4b96      	ldr	r3, [pc, #600]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004746:	f023 0107 	bic.w	r1, r3, #7
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004750:	4a92      	ldr	r2, [pc, #584]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6553      	str	r3, [r2, #84]	@ 0x54
 8004756:	e003      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004758:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004768:	f002 0304 	and.w	r3, r2, #4
 800476c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004776:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800477a:	460b      	mov	r3, r1
 800477c:	4313      	orrs	r3, r2
 800477e:	d044      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004788:	2b05      	cmp	r3, #5
 800478a:	d825      	bhi.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800478c:	a201      	add	r2, pc, #4	@ (adr r2, 8004794 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047e1 	.word	0x080047e1
 8004798:	080047ad 	.word	0x080047ad
 800479c:	080047c3 	.word	0x080047c3
 80047a0:	080047e1 	.word	0x080047e1
 80047a4:	080047e1 	.word	0x080047e1
 80047a8:	080047e1 	.word	0x080047e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	3308      	adds	r3, #8
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fc5f 	bl	8005078 <RCCEx_PLL2_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047c0:	e00f      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c6:	3328      	adds	r3, #40	@ 0x28
 80047c8:	2101      	movs	r1, #1
 80047ca:	4618      	mov	r0, r3
 80047cc:	f000 fd06 	bl	80051dc <RCCEx_PLL3_Config>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80047d6:	e004      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80047de:	e000      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80047e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d10b      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80047ea:	4b6c      	ldr	r3, [pc, #432]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f023 0107 	bic.w	r1, r3, #7
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047fa:	4a68      	ldr	r2, [pc, #416]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80047fc:	430b      	orrs	r3, r1
 80047fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8004800:	e003      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004812:	f002 0320 	and.w	r3, r2, #32
 8004816:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004820:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004824:	460b      	mov	r3, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	d055      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004836:	d033      	beq.n	80048a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004838:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800483c:	d82c      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800483e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004842:	d02f      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004848:	d826      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800484a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800484e:	d02b      	beq.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004850:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004854:	d820      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004856:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800485a:	d012      	beq.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800485c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004860:	d81a      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004862:	2b00      	cmp	r3, #0
 8004864:	d022      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800486a:	d115      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800486c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004870:	3308      	adds	r3, #8
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f000 fbff 	bl	8005078 <RCCEx_PLL2_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004880:	e015      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004886:	3328      	adds	r3, #40	@ 0x28
 8004888:	2102      	movs	r1, #2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fca6 	bl	80051dc <RCCEx_PLL3_Config>
 8004890:	4603      	mov	r3, r0
 8004892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004896:	e00a      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800489e:	e006      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048a0:	bf00      	nop
 80048a2:	e004      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048a4:	bf00      	nop
 80048a6:	e002      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048a8:	bf00      	nop
 80048aa:	e000      	b.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80048ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10b      	bne.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b6:	4b39      	ldr	r3, [pc, #228]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80048be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048c6:	4a35      	ldr	r2, [pc, #212]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048c8:	430b      	orrs	r3, r1
 80048ca:	6553      	str	r3, [r2, #84]	@ 0x54
 80048cc:	e003      	b.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80048e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80048e6:	2300      	movs	r3, #0
 80048e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80048ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4313      	orrs	r3, r2
 80048f4:	d058      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80048f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80048fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004902:	d033      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004904:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004908:	d82c      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800490a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800490e:	d02f      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004914:	d826      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004916:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800491a:	d02b      	beq.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800491c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004920:	d820      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004922:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004926:	d012      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004928:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800492c:	d81a      	bhi.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800492e:	2b00      	cmp	r3, #0
 8004930:	d022      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004936:	d115      	bne.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800493c:	3308      	adds	r3, #8
 800493e:	2100      	movs	r1, #0
 8004940:	4618      	mov	r0, r3
 8004942:	f000 fb99 	bl	8005078 <RCCEx_PLL2_Config>
 8004946:	4603      	mov	r3, r0
 8004948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800494c:	e015      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800494e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004952:	3328      	adds	r3, #40	@ 0x28
 8004954:	2102      	movs	r1, #2
 8004956:	4618      	mov	r0, r3
 8004958:	f000 fc40 	bl	80051dc <RCCEx_PLL3_Config>
 800495c:	4603      	mov	r3, r0
 800495e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004962:	e00a      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800496a:	e006      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800496c:	bf00      	nop
 800496e:	e004      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004970:	bf00      	nop
 8004972:	e002      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004974:	bf00      	nop
 8004976:	e000      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004978:	bf00      	nop
    }

    if (ret == HAL_OK)
 800497a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800497e:	2b00      	cmp	r3, #0
 8004980:	d10e      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004982:	4b06      	ldr	r3, [pc, #24]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800498a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004992:	4a02      	ldr	r2, [pc, #8]	@ (800499c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004994:	430b      	orrs	r3, r1
 8004996:	6593      	str	r3, [r2, #88]	@ 0x58
 8004998:	e006      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800499a:	bf00      	nop
 800499c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80049a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80049b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049b8:	2300      	movs	r3, #0
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80049c2:	460b      	mov	r3, r1
 80049c4:	4313      	orrs	r3, r2
 80049c6:	d055      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80049c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80049d0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80049d4:	d033      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80049d6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80049da:	d82c      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80049dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e0:	d02f      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80049e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80049e6:	d826      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80049e8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80049ec:	d02b      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80049ee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80049f2:	d820      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80049f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049f8:	d012      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80049fa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80049fe:	d81a      	bhi.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d022      	beq.n	8004a4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004a04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a08:	d115      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0e:	3308      	adds	r3, #8
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 fb30 	bl	8005078 <RCCEx_PLL2_Config>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a1e:	e015      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a24:	3328      	adds	r3, #40	@ 0x28
 8004a26:	2102      	movs	r1, #2
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f000 fbd7 	bl	80051dc <RCCEx_PLL3_Config>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004a34:	e00a      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a3c:	e006      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a3e:	bf00      	nop
 8004a40:	e004      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a42:	bf00      	nop
 8004a44:	e002      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a46:	bf00      	nop
 8004a48:	e000      	b.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004a4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d10b      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004a54:	4ba1      	ldr	r3, [pc, #644]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004a64:	4a9d      	ldr	r2, [pc, #628]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6593      	str	r3, [r2, #88]	@ 0x58
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 0308 	and.w	r3, r2, #8
 8004a80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d01e      	beq.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aa6:	3328      	adds	r3, #40	@ 0x28
 8004aa8:	2102      	movs	r1, #2
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f000 fb96 	bl	80051dc <RCCEx_PLL3_Config>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d002      	beq.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004abc:	4b87      	ldr	r3, [pc, #540]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ac0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004acc:	4a83      	ldr	r2, [pc, #524]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ace:	430b      	orrs	r3, r1
 8004ad0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	f002 0310 	and.w	r3, r2, #16
 8004ade:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004ae8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004aec:	460b      	mov	r3, r1
 8004aee:	4313      	orrs	r3, r2
 8004af0:	d01e      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004afa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004afe:	d10c      	bne.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b04:	3328      	adds	r3, #40	@ 0x28
 8004b06:	2102      	movs	r1, #2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f000 fb67 	bl	80051dc <RCCEx_PLL3_Config>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004b14:	2301      	movs	r3, #1
 8004b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004b1a:	4b70      	ldr	r3, [pc, #448]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004b2a:	4a6c      	ldr	r2, [pc, #432]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004b2c:	430b      	orrs	r3, r1
 8004b2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004b3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b40:	2300      	movs	r3, #0
 8004b42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004b46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	d03e      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b5c:	d022      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004b5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b62:	d81b      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d003      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004b68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b6c:	d00b      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004b6e:	e015      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b74:	3308      	adds	r3, #8
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fa7d 	bl	8005078 <RCCEx_PLL2_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b84:	e00f      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b8a:	3328      	adds	r3, #40	@ 0x28
 8004b8c:	2102      	movs	r1, #2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fb24 	bl	80051dc <RCCEx_PLL3_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004b9a:	e004      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004ba2:	e000      	b.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bae:	4b4b      	ldr	r3, [pc, #300]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bbe:	4a47      	ldr	r2, [pc, #284]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bc4:	e003      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004bda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bdc:	2300      	movs	r3, #0
 8004bde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004be0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004be4:	460b      	mov	r3, r1
 8004be6:	4313      	orrs	r3, r2
 8004be8:	d03b      	beq.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004bea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bf6:	d01f      	beq.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004bf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004bfc:	d818      	bhi.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c02:	d003      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004c04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c08:	d007      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004c0a:	e011      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c0c:	4b33      	ldr	r3, [pc, #204]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	4a32      	ldr	r2, [pc, #200]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c18:	e00f      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c1e:	3328      	adds	r3, #40	@ 0x28
 8004c20:	2101      	movs	r1, #1
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fada 	bl	80051dc <RCCEx_PLL3_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004c2e:	e004      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004c36:	e000      	b.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d10b      	bne.n	8004c5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c42:	4b26      	ldr	r3, [pc, #152]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c52:	4a22      	ldr	r2, [pc, #136]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c54:	430b      	orrs	r3, r1
 8004c56:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c58:	e003      	b.n	8004c62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004c62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004c6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c70:	2300      	movs	r3, #0
 8004c72:	677b      	str	r3, [r7, #116]	@ 0x74
 8004c74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004c78:	460b      	mov	r3, r1
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	d034      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c8c:	d007      	beq.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004c8e:	e011      	b.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c90:	4b12      	ldr	r3, [pc, #72]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c94:	4a11      	ldr	r2, [pc, #68]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004c9c:	e00e      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3308      	adds	r3, #8
 8004ca4:	2102      	movs	r1, #2
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f9e6 	bl	8005078 <RCCEx_PLL2_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004cb2:	e003      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004cba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d10d      	bne.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004cc4:	4b05      	ldr	r3, [pc, #20]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cd2:	4a02      	ldr	r2, [pc, #8]	@ (8004cdc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cd4:	430b      	orrs	r3, r1
 8004cd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004cd8:	e006      	b.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004cda:	bf00      	nop
 8004cdc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004ce4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004cf4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004cfe:	460b      	mov	r3, r1
 8004d00:	4313      	orrs	r3, r2
 8004d02:	d00c      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d08:	3328      	adds	r3, #40	@ 0x28
 8004d0a:	2102      	movs	r1, #2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fa65 	bl	80051dc <RCCEx_PLL3_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d002      	beq.n	8004d1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004d2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004d30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004d34:	460b      	mov	r3, r1
 8004d36:	4313      	orrs	r3, r2
 8004d38:	d038      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004d3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d46:	d018      	beq.n	8004d7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004d48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d4c:	d811      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d52:	d014      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004d54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004d58:	d80b      	bhi.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d011      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004d5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d62:	d106      	bne.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d64:	4bc3      	ldr	r3, [pc, #780]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	4ac2      	ldr	r2, [pc, #776]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004d70:	e008      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d78:	e004      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d7a:	bf00      	nop
 8004d7c:	e002      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d7e:	bf00      	nop
 8004d80:	e000      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004d82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d8c:	4bb9      	ldr	r3, [pc, #740]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004d9c:	4ab5      	ldr	r2, [pc, #724]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004d9e:	430b      	orrs	r3, r1
 8004da0:	6553      	str	r3, [r2, #84]	@ 0x54
 8004da2:	e003      	b.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004da8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004db8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004dba:	2300      	movs	r3, #0
 8004dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004dbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004dc2:	460b      	mov	r3, r1
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	d009      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004dc8:	4baa      	ldr	r3, [pc, #680]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd6:	4aa7      	ldr	r2, [pc, #668]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dd8:	430b      	orrs	r3, r1
 8004dda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8004dea:	2300      	movs	r3, #0
 8004dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8004dee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004df2:	460b      	mov	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004df8:	4b9e      	ldr	r3, [pc, #632]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004e08:	4a9a      	ldr	r2, [pc, #616]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e0a:	430b      	orrs	r3, r1
 8004e0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004e24:	460b      	mov	r3, r1
 8004e26:	4313      	orrs	r3, r2
 8004e28:	d009      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004e2a:	4b92      	ldr	r3, [pc, #584]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e38:	4a8e      	ldr	r2, [pc, #568]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e3a:	430b      	orrs	r3, r1
 8004e3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004e4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004e54:	460b      	mov	r3, r1
 8004e56:	4313      	orrs	r3, r2
 8004e58:	d00e      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e5a:	4b86      	ldr	r3, [pc, #536]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	4a85      	ldr	r2, [pc, #532]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004e64:	6113      	str	r3, [r2, #16]
 8004e66:	4b83      	ldr	r3, [pc, #524]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e68:	6919      	ldr	r1, [r3, #16]
 8004e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004e72:	4a80      	ldr	r2, [pc, #512]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e74:	430b      	orrs	r3, r1
 8004e76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004e78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004e84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e86:	2300      	movs	r3, #0
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004e8e:	460b      	mov	r3, r1
 8004e90:	4313      	orrs	r3, r2
 8004e92:	d009      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004e94:	4b77      	ldr	r3, [pc, #476]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004e96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ea2:	4a74      	ldr	r2, [pc, #464]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ea4:	430b      	orrs	r3, r1
 8004ea6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004eb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ec4:	4b6b      	ldr	r3, [pc, #428]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ec8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ed0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004ed4:	4a67      	ldr	r2, [pc, #412]	@ (8005074 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ed6:	430b      	orrs	r3, r1
 8004ed8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	d011      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004efa:	3308      	adds	r3, #8
 8004efc:	2100      	movs	r1, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f8ba 	bl	8005078 <RCCEx_PLL2_Config>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f22:	2100      	movs	r1, #0
 8004f24:	6239      	str	r1, [r7, #32]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f2c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004f30:	460b      	mov	r3, r1
 8004f32:	4313      	orrs	r3, r2
 8004f34:	d011      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f3a:	3308      	adds	r3, #8
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 f89a 	bl	8005078 <RCCEx_PLL2_Config>
 8004f44:	4603      	mov	r3, r0
 8004f46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f62:	2100      	movs	r1, #0
 8004f64:	61b9      	str	r1, [r7, #24]
 8004f66:	f003 0304 	and.w	r3, r3, #4
 8004f6a:	61fb      	str	r3, [r7, #28]
 8004f6c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004f70:	460b      	mov	r3, r1
 8004f72:	4313      	orrs	r3, r2
 8004f74:	d011      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	2102      	movs	r1, #2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 f87a 	bl	8005078 <RCCEx_PLL2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d003      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	6139      	str	r1, [r7, #16]
 8004fa6:	f003 0308 	and.w	r3, r3, #8
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	d011      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fba:	3328      	adds	r3, #40	@ 0x28
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 f90c 	bl	80051dc <RCCEx_PLL3_Config>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004fca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	d011      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ffa:	3328      	adds	r3, #40	@ 0x28
 8004ffc:	2101      	movs	r1, #1
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f8ec 	bl	80051dc <RCCEx_PLL3_Config>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800500a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800500e:	2b00      	cmp	r3, #0
 8005010:	d003      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800501a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005022:	2100      	movs	r1, #0
 8005024:	6039      	str	r1, [r7, #0]
 8005026:	f003 0320 	and.w	r3, r3, #32
 800502a:	607b      	str	r3, [r7, #4]
 800502c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005030:	460b      	mov	r3, r1
 8005032:	4313      	orrs	r3, r2
 8005034:	d011      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800503a:	3328      	adds	r3, #40	@ 0x28
 800503c:	2102      	movs	r1, #2
 800503e:	4618      	mov	r0, r3
 8005040:	f000 f8cc 	bl	80051dc <RCCEx_PLL3_Config>
 8005044:	4603      	mov	r3, r0
 8005046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800504a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800505a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005062:	2300      	movs	r3, #0
 8005064:	e000      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
}
 8005068:	4618      	mov	r0, r3
 800506a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800506e:	46bd      	mov	sp, r7
 8005070:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005074:	58024400 	.word	0x58024400

08005078 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005082:	2300      	movs	r3, #0
 8005084:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005086:	4b53      	ldr	r3, [pc, #332]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	f003 0303 	and.w	r3, r3, #3
 800508e:	2b03      	cmp	r3, #3
 8005090:	d101      	bne.n	8005096 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e099      	b.n	80051ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005096:	4b4f      	ldr	r3, [pc, #316]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a4e      	ldr	r2, [pc, #312]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800509c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80050a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a2:	f7fc fcc7 	bl	8001a34 <HAL_GetTick>
 80050a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050a8:	e008      	b.n	80050bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80050aa:	f7fc fcc3 	bl	8001a34 <HAL_GetTick>
 80050ae:	4602      	mov	r2, r0
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	1ad3      	subs	r3, r2, r3
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d901      	bls.n	80050bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e086      	b.n	80051ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050bc:	4b45      	ldr	r3, [pc, #276]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f0      	bne.n	80050aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050c8:	4b42      	ldr	r3, [pc, #264]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050cc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	031b      	lsls	r3, r3, #12
 80050d6:	493f      	ldr	r1, [pc, #252]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	628b      	str	r3, [r1, #40]	@ 0x28
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	3b01      	subs	r3, #1
 80050e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	025b      	lsls	r3, r3, #9
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	431a      	orrs	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	3b01      	subs	r3, #1
 80050f8:	041b      	lsls	r3, r3, #16
 80050fa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	3b01      	subs	r3, #1
 8005106:	061b      	lsls	r3, r3, #24
 8005108:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800510c:	4931      	ldr	r1, [pc, #196]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800510e:	4313      	orrs	r3, r2
 8005110:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005112:	4b30      	ldr	r3, [pc, #192]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005116:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	695b      	ldr	r3, [r3, #20]
 800511e:	492d      	ldr	r1, [pc, #180]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005120:	4313      	orrs	r3, r2
 8005122:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005124:	4b2b      	ldr	r3, [pc, #172]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005128:	f023 0220 	bic.w	r2, r3, #32
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	4928      	ldr	r1, [pc, #160]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005132:	4313      	orrs	r3, r2
 8005134:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005136:	4b27      	ldr	r3, [pc, #156]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800513a:	4a26      	ldr	r2, [pc, #152]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800513c:	f023 0310 	bic.w	r3, r3, #16
 8005140:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005142:	4b24      	ldr	r3, [pc, #144]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005146:	4b24      	ldr	r3, [pc, #144]	@ (80051d8 <RCCEx_PLL2_Config+0x160>)
 8005148:	4013      	ands	r3, r2
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	69d2      	ldr	r2, [r2, #28]
 800514e:	00d2      	lsls	r2, r2, #3
 8005150:	4920      	ldr	r1, [pc, #128]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005156:	4b1f      	ldr	r3, [pc, #124]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515a:	4a1e      	ldr	r2, [pc, #120]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800515c:	f043 0310 	orr.w	r3, r3, #16
 8005160:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d106      	bne.n	8005176 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005168:	4b1a      	ldr	r3, [pc, #104]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800516e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005172:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005174:	e00f      	b.n	8005196 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d106      	bne.n	800518a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800517c:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800517e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005180:	4a14      	ldr	r2, [pc, #80]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005182:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005186:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005188:	e005      	b.n	8005196 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800518a:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800518c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518e:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005190:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005194:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005196:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a0e      	ldr	r2, [pc, #56]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 800519c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc fc47 	bl	8001a34 <HAL_GetTick>
 80051a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051a8:	e008      	b.n	80051bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80051aa:	f7fc fc43 	bl	8001a34 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d901      	bls.n	80051bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051b8:	2303      	movs	r3, #3
 80051ba:	e006      	b.n	80051ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <RCCEx_PLL2_Config+0x15c>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d0f0      	beq.n	80051aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
 80051d8:	ffff0007 	.word	0xffff0007

080051dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b084      	sub	sp, #16
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80051ea:	4b53      	ldr	r3, [pc, #332]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80051ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	d101      	bne.n	80051fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e099      	b.n	800532e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80051fa:	4b4f      	ldr	r3, [pc, #316]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a4e      	ldr	r2, [pc, #312]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005200:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005204:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005206:	f7fc fc15 	bl	8001a34 <HAL_GetTick>
 800520a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800520c:	e008      	b.n	8005220 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800520e:	f7fc fc11 	bl	8001a34 <HAL_GetTick>
 8005212:	4602      	mov	r2, r0
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	1ad3      	subs	r3, r2, r3
 8005218:	2b02      	cmp	r3, #2
 800521a:	d901      	bls.n	8005220 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e086      	b.n	800532e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005220:	4b45      	ldr	r3, [pc, #276]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d1f0      	bne.n	800520e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800522c:	4b42      	ldr	r3, [pc, #264]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800522e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005230:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	051b      	lsls	r3, r3, #20
 800523a:	493f      	ldr	r1, [pc, #252]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800523c:	4313      	orrs	r3, r2
 800523e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	3b01      	subs	r3, #1
 8005246:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	3b01      	subs	r3, #1
 8005250:	025b      	lsls	r3, r3, #9
 8005252:	b29b      	uxth	r3, r3
 8005254:	431a      	orrs	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	3b01      	subs	r3, #1
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005262:	431a      	orrs	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	3b01      	subs	r3, #1
 800526a:	061b      	lsls	r3, r3, #24
 800526c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005270:	4931      	ldr	r1, [pc, #196]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005272:	4313      	orrs	r3, r2
 8005274:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005276:	4b30      	ldr	r3, [pc, #192]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	492d      	ldr	r1, [pc, #180]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005284:	4313      	orrs	r3, r2
 8005286:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005288:	4b2b      	ldr	r3, [pc, #172]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800528a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	4928      	ldr	r1, [pc, #160]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005296:	4313      	orrs	r3, r2
 8005298:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800529a:	4b27      	ldr	r3, [pc, #156]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 800529c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529e:	4a26      	ldr	r2, [pc, #152]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052a0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052a6:	4b24      	ldr	r3, [pc, #144]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052aa:	4b24      	ldr	r3, [pc, #144]	@ (800533c <RCCEx_PLL3_Config+0x160>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	69d2      	ldr	r2, [r2, #28]
 80052b2:	00d2      	lsls	r2, r2, #3
 80052b4:	4920      	ldr	r1, [pc, #128]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052be:	4a1e      	ldr	r2, [pc, #120]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80052c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d0:	4a19      	ldr	r2, [pc, #100]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052d2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80052d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052d8:	e00f      	b.n	80052fa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d106      	bne.n	80052ee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80052e0:	4b15      	ldr	r3, [pc, #84]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e4:	4a14      	ldr	r2, [pc, #80]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80052ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80052ec:	e005      	b.n	80052fa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80052ee:	4b12      	ldr	r3, [pc, #72]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f2:	4a11      	ldr	r2, [pc, #68]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80052f8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80052fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a0e      	ldr	r2, [pc, #56]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005300:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005304:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005306:	f7fc fb95 	bl	8001a34 <HAL_GetTick>
 800530a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800530c:	e008      	b.n	8005320 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800530e:	f7fc fb91 	bl	8001a34 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	2b02      	cmp	r3, #2
 800531a:	d901      	bls.n	8005320 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <RCCEx_PLL3_Config+0x15c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005328:	2b00      	cmp	r3, #0
 800532a:	d0f0      	beq.n	800530e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800532c:	7bfb      	ldrb	r3, [r7, #15]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3710      	adds	r7, #16
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	58024400 	.word	0x58024400
 800533c:	ffff0007 	.word	0xffff0007

08005340 <__cvt>:
 8005340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005342:	ed2d 8b02 	vpush	{d8}
 8005346:	eeb0 8b40 	vmov.f64	d8, d0
 800534a:	b085      	sub	sp, #20
 800534c:	4617      	mov	r7, r2
 800534e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8005350:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005352:	ee18 2a90 	vmov	r2, s17
 8005356:	f025 0520 	bic.w	r5, r5, #32
 800535a:	2a00      	cmp	r2, #0
 800535c:	bfb6      	itet	lt
 800535e:	222d      	movlt	r2, #45	@ 0x2d
 8005360:	2200      	movge	r2, #0
 8005362:	eeb1 8b40 	vneglt.f64	d8, d0
 8005366:	2d46      	cmp	r5, #70	@ 0x46
 8005368:	460c      	mov	r4, r1
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	d004      	beq.n	8005378 <__cvt+0x38>
 800536e:	2d45      	cmp	r5, #69	@ 0x45
 8005370:	d100      	bne.n	8005374 <__cvt+0x34>
 8005372:	3401      	adds	r4, #1
 8005374:	2102      	movs	r1, #2
 8005376:	e000      	b.n	800537a <__cvt+0x3a>
 8005378:	2103      	movs	r1, #3
 800537a:	ab03      	add	r3, sp, #12
 800537c:	9301      	str	r3, [sp, #4]
 800537e:	ab02      	add	r3, sp, #8
 8005380:	9300      	str	r3, [sp, #0]
 8005382:	4622      	mov	r2, r4
 8005384:	4633      	mov	r3, r6
 8005386:	eeb0 0b48 	vmov.f64	d0, d8
 800538a:	f001 f871 	bl	8006470 <_dtoa_r>
 800538e:	2d47      	cmp	r5, #71	@ 0x47
 8005390:	d114      	bne.n	80053bc <__cvt+0x7c>
 8005392:	07fb      	lsls	r3, r7, #31
 8005394:	d50a      	bpl.n	80053ac <__cvt+0x6c>
 8005396:	1902      	adds	r2, r0, r4
 8005398:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800539c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a0:	bf08      	it	eq
 80053a2:	9203      	streq	r2, [sp, #12]
 80053a4:	2130      	movs	r1, #48	@ 0x30
 80053a6:	9b03      	ldr	r3, [sp, #12]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d319      	bcc.n	80053e0 <__cvt+0xa0>
 80053ac:	9b03      	ldr	r3, [sp, #12]
 80053ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80053b0:	1a1b      	subs	r3, r3, r0
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	b005      	add	sp, #20
 80053b6:	ecbd 8b02 	vpop	{d8}
 80053ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053bc:	2d46      	cmp	r5, #70	@ 0x46
 80053be:	eb00 0204 	add.w	r2, r0, r4
 80053c2:	d1e9      	bne.n	8005398 <__cvt+0x58>
 80053c4:	7803      	ldrb	r3, [r0, #0]
 80053c6:	2b30      	cmp	r3, #48	@ 0x30
 80053c8:	d107      	bne.n	80053da <__cvt+0x9a>
 80053ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80053ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d2:	bf1c      	itt	ne
 80053d4:	f1c4 0401 	rsbne	r4, r4, #1
 80053d8:	6034      	strne	r4, [r6, #0]
 80053da:	6833      	ldr	r3, [r6, #0]
 80053dc:	441a      	add	r2, r3
 80053de:	e7db      	b.n	8005398 <__cvt+0x58>
 80053e0:	1c5c      	adds	r4, r3, #1
 80053e2:	9403      	str	r4, [sp, #12]
 80053e4:	7019      	strb	r1, [r3, #0]
 80053e6:	e7de      	b.n	80053a6 <__cvt+0x66>

080053e8 <__exponent>:
 80053e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053ea:	2900      	cmp	r1, #0
 80053ec:	bfba      	itte	lt
 80053ee:	4249      	neglt	r1, r1
 80053f0:	232d      	movlt	r3, #45	@ 0x2d
 80053f2:	232b      	movge	r3, #43	@ 0x2b
 80053f4:	2909      	cmp	r1, #9
 80053f6:	7002      	strb	r2, [r0, #0]
 80053f8:	7043      	strb	r3, [r0, #1]
 80053fa:	dd29      	ble.n	8005450 <__exponent+0x68>
 80053fc:	f10d 0307 	add.w	r3, sp, #7
 8005400:	461d      	mov	r5, r3
 8005402:	270a      	movs	r7, #10
 8005404:	461a      	mov	r2, r3
 8005406:	fbb1 f6f7 	udiv	r6, r1, r7
 800540a:	fb07 1416 	mls	r4, r7, r6, r1
 800540e:	3430      	adds	r4, #48	@ 0x30
 8005410:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005414:	460c      	mov	r4, r1
 8005416:	2c63      	cmp	r4, #99	@ 0x63
 8005418:	f103 33ff 	add.w	r3, r3, #4294967295
 800541c:	4631      	mov	r1, r6
 800541e:	dcf1      	bgt.n	8005404 <__exponent+0x1c>
 8005420:	3130      	adds	r1, #48	@ 0x30
 8005422:	1e94      	subs	r4, r2, #2
 8005424:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005428:	1c41      	adds	r1, r0, #1
 800542a:	4623      	mov	r3, r4
 800542c:	42ab      	cmp	r3, r5
 800542e:	d30a      	bcc.n	8005446 <__exponent+0x5e>
 8005430:	f10d 0309 	add.w	r3, sp, #9
 8005434:	1a9b      	subs	r3, r3, r2
 8005436:	42ac      	cmp	r4, r5
 8005438:	bf88      	it	hi
 800543a:	2300      	movhi	r3, #0
 800543c:	3302      	adds	r3, #2
 800543e:	4403      	add	r3, r0
 8005440:	1a18      	subs	r0, r3, r0
 8005442:	b003      	add	sp, #12
 8005444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005446:	f813 6b01 	ldrb.w	r6, [r3], #1
 800544a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800544e:	e7ed      	b.n	800542c <__exponent+0x44>
 8005450:	2330      	movs	r3, #48	@ 0x30
 8005452:	3130      	adds	r1, #48	@ 0x30
 8005454:	7083      	strb	r3, [r0, #2]
 8005456:	70c1      	strb	r1, [r0, #3]
 8005458:	1d03      	adds	r3, r0, #4
 800545a:	e7f1      	b.n	8005440 <__exponent+0x58>
 800545c:	0000      	movs	r0, r0
	...

08005460 <_printf_float>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	b08d      	sub	sp, #52	@ 0x34
 8005466:	460c      	mov	r4, r1
 8005468:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800546c:	4616      	mov	r6, r2
 800546e:	461f      	mov	r7, r3
 8005470:	4605      	mov	r5, r0
 8005472:	f000 fee7 	bl	8006244 <_localeconv_r>
 8005476:	f8d0 b000 	ldr.w	fp, [r0]
 800547a:	4658      	mov	r0, fp
 800547c:	f7fa ff80 	bl	8000380 <strlen>
 8005480:	2300      	movs	r3, #0
 8005482:	930a      	str	r3, [sp, #40]	@ 0x28
 8005484:	f8d8 3000 	ldr.w	r3, [r8]
 8005488:	f894 9018 	ldrb.w	r9, [r4, #24]
 800548c:	6822      	ldr	r2, [r4, #0]
 800548e:	9005      	str	r0, [sp, #20]
 8005490:	3307      	adds	r3, #7
 8005492:	f023 0307 	bic.w	r3, r3, #7
 8005496:	f103 0108 	add.w	r1, r3, #8
 800549a:	f8c8 1000 	str.w	r1, [r8]
 800549e:	ed93 0b00 	vldr	d0, [r3]
 80054a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8005700 <_printf_float+0x2a0>
 80054a6:	eeb0 7bc0 	vabs.f64	d7, d0
 80054aa:	eeb4 7b46 	vcmp.f64	d7, d6
 80054ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80054b6:	dd24      	ble.n	8005502 <_printf_float+0xa2>
 80054b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80054bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054c0:	d502      	bpl.n	80054c8 <_printf_float+0x68>
 80054c2:	232d      	movs	r3, #45	@ 0x2d
 80054c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054c8:	498f      	ldr	r1, [pc, #572]	@ (8005708 <_printf_float+0x2a8>)
 80054ca:	4b90      	ldr	r3, [pc, #576]	@ (800570c <_printf_float+0x2ac>)
 80054cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80054d0:	bf94      	ite	ls
 80054d2:	4688      	movls	r8, r1
 80054d4:	4698      	movhi	r8, r3
 80054d6:	f022 0204 	bic.w	r2, r2, #4
 80054da:	2303      	movs	r3, #3
 80054dc:	6123      	str	r3, [r4, #16]
 80054de:	6022      	str	r2, [r4, #0]
 80054e0:	f04f 0a00 	mov.w	sl, #0
 80054e4:	9700      	str	r7, [sp, #0]
 80054e6:	4633      	mov	r3, r6
 80054e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80054ea:	4621      	mov	r1, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	f000 f9d1 	bl	8005894 <_printf_common>
 80054f2:	3001      	adds	r0, #1
 80054f4:	f040 8089 	bne.w	800560a <_printf_float+0x1aa>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b00d      	add	sp, #52	@ 0x34
 80054fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005502:	eeb4 0b40 	vcmp.f64	d0, d0
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	d709      	bvc.n	8005520 <_printf_float+0xc0>
 800550c:	ee10 3a90 	vmov	r3, s1
 8005510:	2b00      	cmp	r3, #0
 8005512:	bfbc      	itt	lt
 8005514:	232d      	movlt	r3, #45	@ 0x2d
 8005516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800551a:	497d      	ldr	r1, [pc, #500]	@ (8005710 <_printf_float+0x2b0>)
 800551c:	4b7d      	ldr	r3, [pc, #500]	@ (8005714 <_printf_float+0x2b4>)
 800551e:	e7d5      	b.n	80054cc <_printf_float+0x6c>
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	1c59      	adds	r1, r3, #1
 8005524:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8005528:	d139      	bne.n	800559e <_printf_float+0x13e>
 800552a:	2306      	movs	r3, #6
 800552c:	6063      	str	r3, [r4, #4]
 800552e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005532:	2300      	movs	r3, #0
 8005534:	6022      	str	r2, [r4, #0]
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	ab0a      	add	r3, sp, #40	@ 0x28
 800553a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800553e:	ab09      	add	r3, sp, #36	@ 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6861      	ldr	r1, [r4, #4]
 8005544:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005548:	4628      	mov	r0, r5
 800554a:	f7ff fef9 	bl	8005340 <__cvt>
 800554e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005552:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005554:	4680      	mov	r8, r0
 8005556:	d129      	bne.n	80055ac <_printf_float+0x14c>
 8005558:	1cc8      	adds	r0, r1, #3
 800555a:	db02      	blt.n	8005562 <_printf_float+0x102>
 800555c:	6863      	ldr	r3, [r4, #4]
 800555e:	4299      	cmp	r1, r3
 8005560:	dd41      	ble.n	80055e6 <_printf_float+0x186>
 8005562:	f1a9 0902 	sub.w	r9, r9, #2
 8005566:	fa5f f989 	uxtb.w	r9, r9
 800556a:	3901      	subs	r1, #1
 800556c:	464a      	mov	r2, r9
 800556e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005572:	9109      	str	r1, [sp, #36]	@ 0x24
 8005574:	f7ff ff38 	bl	80053e8 <__exponent>
 8005578:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800557a:	1813      	adds	r3, r2, r0
 800557c:	2a01      	cmp	r2, #1
 800557e:	4682      	mov	sl, r0
 8005580:	6123      	str	r3, [r4, #16]
 8005582:	dc02      	bgt.n	800558a <_printf_float+0x12a>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	07d2      	lsls	r2, r2, #31
 8005588:	d501      	bpl.n	800558e <_printf_float+0x12e>
 800558a:	3301      	adds	r3, #1
 800558c:	6123      	str	r3, [r4, #16]
 800558e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0a6      	beq.n	80054e4 <_printf_float+0x84>
 8005596:	232d      	movs	r3, #45	@ 0x2d
 8005598:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800559c:	e7a2      	b.n	80054e4 <_printf_float+0x84>
 800559e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055a2:	d1c4      	bne.n	800552e <_printf_float+0xce>
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1c2      	bne.n	800552e <_printf_float+0xce>
 80055a8:	2301      	movs	r3, #1
 80055aa:	e7bf      	b.n	800552c <_printf_float+0xcc>
 80055ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 80055b0:	d9db      	bls.n	800556a <_printf_float+0x10a>
 80055b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 80055b6:	d118      	bne.n	80055ea <_printf_float+0x18a>
 80055b8:	2900      	cmp	r1, #0
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	dd0b      	ble.n	80055d6 <_printf_float+0x176>
 80055be:	6121      	str	r1, [r4, #16]
 80055c0:	b913      	cbnz	r3, 80055c8 <_printf_float+0x168>
 80055c2:	6822      	ldr	r2, [r4, #0]
 80055c4:	07d0      	lsls	r0, r2, #31
 80055c6:	d502      	bpl.n	80055ce <_printf_float+0x16e>
 80055c8:	3301      	adds	r3, #1
 80055ca:	440b      	add	r3, r1
 80055cc:	6123      	str	r3, [r4, #16]
 80055ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80055d0:	f04f 0a00 	mov.w	sl, #0
 80055d4:	e7db      	b.n	800558e <_printf_float+0x12e>
 80055d6:	b913      	cbnz	r3, 80055de <_printf_float+0x17e>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	07d2      	lsls	r2, r2, #31
 80055dc:	d501      	bpl.n	80055e2 <_printf_float+0x182>
 80055de:	3302      	adds	r3, #2
 80055e0:	e7f4      	b.n	80055cc <_printf_float+0x16c>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e7f2      	b.n	80055cc <_printf_float+0x16c>
 80055e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80055ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80055ec:	4299      	cmp	r1, r3
 80055ee:	db05      	blt.n	80055fc <_printf_float+0x19c>
 80055f0:	6823      	ldr	r3, [r4, #0]
 80055f2:	6121      	str	r1, [r4, #16]
 80055f4:	07d8      	lsls	r0, r3, #31
 80055f6:	d5ea      	bpl.n	80055ce <_printf_float+0x16e>
 80055f8:	1c4b      	adds	r3, r1, #1
 80055fa:	e7e7      	b.n	80055cc <_printf_float+0x16c>
 80055fc:	2900      	cmp	r1, #0
 80055fe:	bfd4      	ite	le
 8005600:	f1c1 0202 	rsble	r2, r1, #2
 8005604:	2201      	movgt	r2, #1
 8005606:	4413      	add	r3, r2
 8005608:	e7e0      	b.n	80055cc <_printf_float+0x16c>
 800560a:	6823      	ldr	r3, [r4, #0]
 800560c:	055a      	lsls	r2, r3, #21
 800560e:	d407      	bmi.n	8005620 <_printf_float+0x1c0>
 8005610:	6923      	ldr	r3, [r4, #16]
 8005612:	4642      	mov	r2, r8
 8005614:	4631      	mov	r1, r6
 8005616:	4628      	mov	r0, r5
 8005618:	47b8      	blx	r7
 800561a:	3001      	adds	r0, #1
 800561c:	d12a      	bne.n	8005674 <_printf_float+0x214>
 800561e:	e76b      	b.n	80054f8 <_printf_float+0x98>
 8005620:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8005624:	f240 80e0 	bls.w	80057e8 <_printf_float+0x388>
 8005628:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800562c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005634:	d133      	bne.n	800569e <_printf_float+0x23e>
 8005636:	4a38      	ldr	r2, [pc, #224]	@ (8005718 <_printf_float+0x2b8>)
 8005638:	2301      	movs	r3, #1
 800563a:	4631      	mov	r1, r6
 800563c:	4628      	mov	r0, r5
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	f43f af59 	beq.w	80054f8 <_printf_float+0x98>
 8005646:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800564a:	4543      	cmp	r3, r8
 800564c:	db02      	blt.n	8005654 <_printf_float+0x1f4>
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	07d8      	lsls	r0, r3, #31
 8005652:	d50f      	bpl.n	8005674 <_printf_float+0x214>
 8005654:	9b05      	ldr	r3, [sp, #20]
 8005656:	465a      	mov	r2, fp
 8005658:	4631      	mov	r1, r6
 800565a:	4628      	mov	r0, r5
 800565c:	47b8      	blx	r7
 800565e:	3001      	adds	r0, #1
 8005660:	f43f af4a 	beq.w	80054f8 <_printf_float+0x98>
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	f108 38ff 	add.w	r8, r8, #4294967295
 800566c:	f104 0a1a 	add.w	sl, r4, #26
 8005670:	45c8      	cmp	r8, r9
 8005672:	dc09      	bgt.n	8005688 <_printf_float+0x228>
 8005674:	6823      	ldr	r3, [r4, #0]
 8005676:	079b      	lsls	r3, r3, #30
 8005678:	f100 8107 	bmi.w	800588a <_printf_float+0x42a>
 800567c:	68e0      	ldr	r0, [r4, #12]
 800567e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005680:	4298      	cmp	r0, r3
 8005682:	bfb8      	it	lt
 8005684:	4618      	movlt	r0, r3
 8005686:	e739      	b.n	80054fc <_printf_float+0x9c>
 8005688:	2301      	movs	r3, #1
 800568a:	4652      	mov	r2, sl
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	47b8      	blx	r7
 8005692:	3001      	adds	r0, #1
 8005694:	f43f af30 	beq.w	80054f8 <_printf_float+0x98>
 8005698:	f109 0901 	add.w	r9, r9, #1
 800569c:	e7e8      	b.n	8005670 <_printf_float+0x210>
 800569e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	dc3b      	bgt.n	800571c <_printf_float+0x2bc>
 80056a4:	4a1c      	ldr	r2, [pc, #112]	@ (8005718 <_printf_float+0x2b8>)
 80056a6:	2301      	movs	r3, #1
 80056a8:	4631      	mov	r1, r6
 80056aa:	4628      	mov	r0, r5
 80056ac:	47b8      	blx	r7
 80056ae:	3001      	adds	r0, #1
 80056b0:	f43f af22 	beq.w	80054f8 <_printf_float+0x98>
 80056b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80056b8:	ea59 0303 	orrs.w	r3, r9, r3
 80056bc:	d102      	bne.n	80056c4 <_printf_float+0x264>
 80056be:	6823      	ldr	r3, [r4, #0]
 80056c0:	07d9      	lsls	r1, r3, #31
 80056c2:	d5d7      	bpl.n	8005674 <_printf_float+0x214>
 80056c4:	9b05      	ldr	r3, [sp, #20]
 80056c6:	465a      	mov	r2, fp
 80056c8:	4631      	mov	r1, r6
 80056ca:	4628      	mov	r0, r5
 80056cc:	47b8      	blx	r7
 80056ce:	3001      	adds	r0, #1
 80056d0:	f43f af12 	beq.w	80054f8 <_printf_float+0x98>
 80056d4:	f04f 0a00 	mov.w	sl, #0
 80056d8:	f104 0b1a 	add.w	fp, r4, #26
 80056dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056de:	425b      	negs	r3, r3
 80056e0:	4553      	cmp	r3, sl
 80056e2:	dc01      	bgt.n	80056e8 <_printf_float+0x288>
 80056e4:	464b      	mov	r3, r9
 80056e6:	e794      	b.n	8005612 <_printf_float+0x1b2>
 80056e8:	2301      	movs	r3, #1
 80056ea:	465a      	mov	r2, fp
 80056ec:	4631      	mov	r1, r6
 80056ee:	4628      	mov	r0, r5
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f af00 	beq.w	80054f8 <_printf_float+0x98>
 80056f8:	f10a 0a01 	add.w	sl, sl, #1
 80056fc:	e7ee      	b.n	80056dc <_printf_float+0x27c>
 80056fe:	bf00      	nop
 8005700:	ffffffff 	.word	0xffffffff
 8005704:	7fefffff 	.word	0x7fefffff
 8005708:	08009ee4 	.word	0x08009ee4
 800570c:	08009ee8 	.word	0x08009ee8
 8005710:	08009eec 	.word	0x08009eec
 8005714:	08009ef0 	.word	0x08009ef0
 8005718:	08009ef4 	.word	0x08009ef4
 800571c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800571e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005722:	4553      	cmp	r3, sl
 8005724:	bfa8      	it	ge
 8005726:	4653      	movge	r3, sl
 8005728:	2b00      	cmp	r3, #0
 800572a:	4699      	mov	r9, r3
 800572c:	dc37      	bgt.n	800579e <_printf_float+0x33e>
 800572e:	2300      	movs	r3, #0
 8005730:	9307      	str	r3, [sp, #28]
 8005732:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005736:	f104 021a 	add.w	r2, r4, #26
 800573a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800573c:	9907      	ldr	r1, [sp, #28]
 800573e:	9306      	str	r3, [sp, #24]
 8005740:	eba3 0309 	sub.w	r3, r3, r9
 8005744:	428b      	cmp	r3, r1
 8005746:	dc31      	bgt.n	80057ac <_printf_float+0x34c>
 8005748:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800574a:	459a      	cmp	sl, r3
 800574c:	dc3b      	bgt.n	80057c6 <_printf_float+0x366>
 800574e:	6823      	ldr	r3, [r4, #0]
 8005750:	07da      	lsls	r2, r3, #31
 8005752:	d438      	bmi.n	80057c6 <_printf_float+0x366>
 8005754:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005756:	ebaa 0903 	sub.w	r9, sl, r3
 800575a:	9b06      	ldr	r3, [sp, #24]
 800575c:	ebaa 0303 	sub.w	r3, sl, r3
 8005760:	4599      	cmp	r9, r3
 8005762:	bfa8      	it	ge
 8005764:	4699      	movge	r9, r3
 8005766:	f1b9 0f00 	cmp.w	r9, #0
 800576a:	dc34      	bgt.n	80057d6 <_printf_float+0x376>
 800576c:	f04f 0800 	mov.w	r8, #0
 8005770:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005774:	f104 0b1a 	add.w	fp, r4, #26
 8005778:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800577a:	ebaa 0303 	sub.w	r3, sl, r3
 800577e:	eba3 0309 	sub.w	r3, r3, r9
 8005782:	4543      	cmp	r3, r8
 8005784:	f77f af76 	ble.w	8005674 <_printf_float+0x214>
 8005788:	2301      	movs	r3, #1
 800578a:	465a      	mov	r2, fp
 800578c:	4631      	mov	r1, r6
 800578e:	4628      	mov	r0, r5
 8005790:	47b8      	blx	r7
 8005792:	3001      	adds	r0, #1
 8005794:	f43f aeb0 	beq.w	80054f8 <_printf_float+0x98>
 8005798:	f108 0801 	add.w	r8, r8, #1
 800579c:	e7ec      	b.n	8005778 <_printf_float+0x318>
 800579e:	4642      	mov	r2, r8
 80057a0:	4631      	mov	r1, r6
 80057a2:	4628      	mov	r0, r5
 80057a4:	47b8      	blx	r7
 80057a6:	3001      	adds	r0, #1
 80057a8:	d1c1      	bne.n	800572e <_printf_float+0x2ce>
 80057aa:	e6a5      	b.n	80054f8 <_printf_float+0x98>
 80057ac:	2301      	movs	r3, #1
 80057ae:	4631      	mov	r1, r6
 80057b0:	4628      	mov	r0, r5
 80057b2:	9206      	str	r2, [sp, #24]
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f ae9e 	beq.w	80054f8 <_printf_float+0x98>
 80057bc:	9b07      	ldr	r3, [sp, #28]
 80057be:	9a06      	ldr	r2, [sp, #24]
 80057c0:	3301      	adds	r3, #1
 80057c2:	9307      	str	r3, [sp, #28]
 80057c4:	e7b9      	b.n	800573a <_printf_float+0x2da>
 80057c6:	9b05      	ldr	r3, [sp, #20]
 80057c8:	465a      	mov	r2, fp
 80057ca:	4631      	mov	r1, r6
 80057cc:	4628      	mov	r0, r5
 80057ce:	47b8      	blx	r7
 80057d0:	3001      	adds	r0, #1
 80057d2:	d1bf      	bne.n	8005754 <_printf_float+0x2f4>
 80057d4:	e690      	b.n	80054f8 <_printf_float+0x98>
 80057d6:	9a06      	ldr	r2, [sp, #24]
 80057d8:	464b      	mov	r3, r9
 80057da:	4442      	add	r2, r8
 80057dc:	4631      	mov	r1, r6
 80057de:	4628      	mov	r0, r5
 80057e0:	47b8      	blx	r7
 80057e2:	3001      	adds	r0, #1
 80057e4:	d1c2      	bne.n	800576c <_printf_float+0x30c>
 80057e6:	e687      	b.n	80054f8 <_printf_float+0x98>
 80057e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80057ec:	f1b9 0f01 	cmp.w	r9, #1
 80057f0:	dc01      	bgt.n	80057f6 <_printf_float+0x396>
 80057f2:	07db      	lsls	r3, r3, #31
 80057f4:	d536      	bpl.n	8005864 <_printf_float+0x404>
 80057f6:	2301      	movs	r3, #1
 80057f8:	4642      	mov	r2, r8
 80057fa:	4631      	mov	r1, r6
 80057fc:	4628      	mov	r0, r5
 80057fe:	47b8      	blx	r7
 8005800:	3001      	adds	r0, #1
 8005802:	f43f ae79 	beq.w	80054f8 <_printf_float+0x98>
 8005806:	9b05      	ldr	r3, [sp, #20]
 8005808:	465a      	mov	r2, fp
 800580a:	4631      	mov	r1, r6
 800580c:	4628      	mov	r0, r5
 800580e:	47b8      	blx	r7
 8005810:	3001      	adds	r0, #1
 8005812:	f43f ae71 	beq.w	80054f8 <_printf_float+0x98>
 8005816:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800581a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800581e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005822:	f109 39ff 	add.w	r9, r9, #4294967295
 8005826:	d018      	beq.n	800585a <_printf_float+0x3fa>
 8005828:	464b      	mov	r3, r9
 800582a:	f108 0201 	add.w	r2, r8, #1
 800582e:	4631      	mov	r1, r6
 8005830:	4628      	mov	r0, r5
 8005832:	47b8      	blx	r7
 8005834:	3001      	adds	r0, #1
 8005836:	d10c      	bne.n	8005852 <_printf_float+0x3f2>
 8005838:	e65e      	b.n	80054f8 <_printf_float+0x98>
 800583a:	2301      	movs	r3, #1
 800583c:	465a      	mov	r2, fp
 800583e:	4631      	mov	r1, r6
 8005840:	4628      	mov	r0, r5
 8005842:	47b8      	blx	r7
 8005844:	3001      	adds	r0, #1
 8005846:	f43f ae57 	beq.w	80054f8 <_printf_float+0x98>
 800584a:	f108 0801 	add.w	r8, r8, #1
 800584e:	45c8      	cmp	r8, r9
 8005850:	dbf3      	blt.n	800583a <_printf_float+0x3da>
 8005852:	4653      	mov	r3, sl
 8005854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005858:	e6dc      	b.n	8005614 <_printf_float+0x1b4>
 800585a:	f04f 0800 	mov.w	r8, #0
 800585e:	f104 0b1a 	add.w	fp, r4, #26
 8005862:	e7f4      	b.n	800584e <_printf_float+0x3ee>
 8005864:	2301      	movs	r3, #1
 8005866:	4642      	mov	r2, r8
 8005868:	e7e1      	b.n	800582e <_printf_float+0x3ce>
 800586a:	2301      	movs	r3, #1
 800586c:	464a      	mov	r2, r9
 800586e:	4631      	mov	r1, r6
 8005870:	4628      	mov	r0, r5
 8005872:	47b8      	blx	r7
 8005874:	3001      	adds	r0, #1
 8005876:	f43f ae3f 	beq.w	80054f8 <_printf_float+0x98>
 800587a:	f108 0801 	add.w	r8, r8, #1
 800587e:	68e3      	ldr	r3, [r4, #12]
 8005880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005882:	1a5b      	subs	r3, r3, r1
 8005884:	4543      	cmp	r3, r8
 8005886:	dcf0      	bgt.n	800586a <_printf_float+0x40a>
 8005888:	e6f8      	b.n	800567c <_printf_float+0x21c>
 800588a:	f04f 0800 	mov.w	r8, #0
 800588e:	f104 0919 	add.w	r9, r4, #25
 8005892:	e7f4      	b.n	800587e <_printf_float+0x41e>

08005894 <_printf_common>:
 8005894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005898:	4616      	mov	r6, r2
 800589a:	4698      	mov	r8, r3
 800589c:	688a      	ldr	r2, [r1, #8]
 800589e:	690b      	ldr	r3, [r1, #16]
 80058a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058a4:	4293      	cmp	r3, r2
 80058a6:	bfb8      	it	lt
 80058a8:	4613      	movlt	r3, r2
 80058aa:	6033      	str	r3, [r6, #0]
 80058ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80058b0:	4607      	mov	r7, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	b10a      	cbz	r2, 80058ba <_printf_common+0x26>
 80058b6:	3301      	adds	r3, #1
 80058b8:	6033      	str	r3, [r6, #0]
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	0699      	lsls	r1, r3, #26
 80058be:	bf42      	ittt	mi
 80058c0:	6833      	ldrmi	r3, [r6, #0]
 80058c2:	3302      	addmi	r3, #2
 80058c4:	6033      	strmi	r3, [r6, #0]
 80058c6:	6825      	ldr	r5, [r4, #0]
 80058c8:	f015 0506 	ands.w	r5, r5, #6
 80058cc:	d106      	bne.n	80058dc <_printf_common+0x48>
 80058ce:	f104 0a19 	add.w	sl, r4, #25
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	6832      	ldr	r2, [r6, #0]
 80058d6:	1a9b      	subs	r3, r3, r2
 80058d8:	42ab      	cmp	r3, r5
 80058da:	dc26      	bgt.n	800592a <_printf_common+0x96>
 80058dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80058e0:	6822      	ldr	r2, [r4, #0]
 80058e2:	3b00      	subs	r3, #0
 80058e4:	bf18      	it	ne
 80058e6:	2301      	movne	r3, #1
 80058e8:	0692      	lsls	r2, r2, #26
 80058ea:	d42b      	bmi.n	8005944 <_printf_common+0xb0>
 80058ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80058f0:	4641      	mov	r1, r8
 80058f2:	4638      	mov	r0, r7
 80058f4:	47c8      	blx	r9
 80058f6:	3001      	adds	r0, #1
 80058f8:	d01e      	beq.n	8005938 <_printf_common+0xa4>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	6922      	ldr	r2, [r4, #16]
 80058fe:	f003 0306 	and.w	r3, r3, #6
 8005902:	2b04      	cmp	r3, #4
 8005904:	bf02      	ittt	eq
 8005906:	68e5      	ldreq	r5, [r4, #12]
 8005908:	6833      	ldreq	r3, [r6, #0]
 800590a:	1aed      	subeq	r5, r5, r3
 800590c:	68a3      	ldr	r3, [r4, #8]
 800590e:	bf0c      	ite	eq
 8005910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005914:	2500      	movne	r5, #0
 8005916:	4293      	cmp	r3, r2
 8005918:	bfc4      	itt	gt
 800591a:	1a9b      	subgt	r3, r3, r2
 800591c:	18ed      	addgt	r5, r5, r3
 800591e:	2600      	movs	r6, #0
 8005920:	341a      	adds	r4, #26
 8005922:	42b5      	cmp	r5, r6
 8005924:	d11a      	bne.n	800595c <_printf_common+0xc8>
 8005926:	2000      	movs	r0, #0
 8005928:	e008      	b.n	800593c <_printf_common+0xa8>
 800592a:	2301      	movs	r3, #1
 800592c:	4652      	mov	r2, sl
 800592e:	4641      	mov	r1, r8
 8005930:	4638      	mov	r0, r7
 8005932:	47c8      	blx	r9
 8005934:	3001      	adds	r0, #1
 8005936:	d103      	bne.n	8005940 <_printf_common+0xac>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295
 800593c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005940:	3501      	adds	r5, #1
 8005942:	e7c6      	b.n	80058d2 <_printf_common+0x3e>
 8005944:	18e1      	adds	r1, r4, r3
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	2030      	movs	r0, #48	@ 0x30
 800594a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800594e:	4422      	add	r2, r4
 8005950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005958:	3302      	adds	r3, #2
 800595a:	e7c7      	b.n	80058ec <_printf_common+0x58>
 800595c:	2301      	movs	r3, #1
 800595e:	4622      	mov	r2, r4
 8005960:	4641      	mov	r1, r8
 8005962:	4638      	mov	r0, r7
 8005964:	47c8      	blx	r9
 8005966:	3001      	adds	r0, #1
 8005968:	d0e6      	beq.n	8005938 <_printf_common+0xa4>
 800596a:	3601      	adds	r6, #1
 800596c:	e7d9      	b.n	8005922 <_printf_common+0x8e>
	...

08005970 <_printf_i>:
 8005970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	7e0f      	ldrb	r7, [r1, #24]
 8005976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005978:	2f78      	cmp	r7, #120	@ 0x78
 800597a:	4691      	mov	r9, r2
 800597c:	4680      	mov	r8, r0
 800597e:	460c      	mov	r4, r1
 8005980:	469a      	mov	sl, r3
 8005982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005986:	d807      	bhi.n	8005998 <_printf_i+0x28>
 8005988:	2f62      	cmp	r7, #98	@ 0x62
 800598a:	d80a      	bhi.n	80059a2 <_printf_i+0x32>
 800598c:	2f00      	cmp	r7, #0
 800598e:	f000 80d2 	beq.w	8005b36 <_printf_i+0x1c6>
 8005992:	2f58      	cmp	r7, #88	@ 0x58
 8005994:	f000 80b9 	beq.w	8005b0a <_printf_i+0x19a>
 8005998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800599c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80059a0:	e03a      	b.n	8005a18 <_printf_i+0xa8>
 80059a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80059a6:	2b15      	cmp	r3, #21
 80059a8:	d8f6      	bhi.n	8005998 <_printf_i+0x28>
 80059aa:	a101      	add	r1, pc, #4	@ (adr r1, 80059b0 <_printf_i+0x40>)
 80059ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80059b0:	08005a09 	.word	0x08005a09
 80059b4:	08005a1d 	.word	0x08005a1d
 80059b8:	08005999 	.word	0x08005999
 80059bc:	08005999 	.word	0x08005999
 80059c0:	08005999 	.word	0x08005999
 80059c4:	08005999 	.word	0x08005999
 80059c8:	08005a1d 	.word	0x08005a1d
 80059cc:	08005999 	.word	0x08005999
 80059d0:	08005999 	.word	0x08005999
 80059d4:	08005999 	.word	0x08005999
 80059d8:	08005999 	.word	0x08005999
 80059dc:	08005b1d 	.word	0x08005b1d
 80059e0:	08005a47 	.word	0x08005a47
 80059e4:	08005ad7 	.word	0x08005ad7
 80059e8:	08005999 	.word	0x08005999
 80059ec:	08005999 	.word	0x08005999
 80059f0:	08005b3f 	.word	0x08005b3f
 80059f4:	08005999 	.word	0x08005999
 80059f8:	08005a47 	.word	0x08005a47
 80059fc:	08005999 	.word	0x08005999
 8005a00:	08005999 	.word	0x08005999
 8005a04:	08005adf 	.word	0x08005adf
 8005a08:	6833      	ldr	r3, [r6, #0]
 8005a0a:	1d1a      	adds	r2, r3, #4
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6032      	str	r2, [r6, #0]
 8005a10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e09d      	b.n	8005b58 <_printf_i+0x1e8>
 8005a1c:	6833      	ldr	r3, [r6, #0]
 8005a1e:	6820      	ldr	r0, [r4, #0]
 8005a20:	1d19      	adds	r1, r3, #4
 8005a22:	6031      	str	r1, [r6, #0]
 8005a24:	0606      	lsls	r6, r0, #24
 8005a26:	d501      	bpl.n	8005a2c <_printf_i+0xbc>
 8005a28:	681d      	ldr	r5, [r3, #0]
 8005a2a:	e003      	b.n	8005a34 <_printf_i+0xc4>
 8005a2c:	0645      	lsls	r5, r0, #25
 8005a2e:	d5fb      	bpl.n	8005a28 <_printf_i+0xb8>
 8005a30:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005a34:	2d00      	cmp	r5, #0
 8005a36:	da03      	bge.n	8005a40 <_printf_i+0xd0>
 8005a38:	232d      	movs	r3, #45	@ 0x2d
 8005a3a:	426d      	negs	r5, r5
 8005a3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a40:	4859      	ldr	r0, [pc, #356]	@ (8005ba8 <_printf_i+0x238>)
 8005a42:	230a      	movs	r3, #10
 8005a44:	e011      	b.n	8005a6a <_printf_i+0xfa>
 8005a46:	6821      	ldr	r1, [r4, #0]
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	0608      	lsls	r0, r1, #24
 8005a4c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005a50:	d402      	bmi.n	8005a58 <_printf_i+0xe8>
 8005a52:	0649      	lsls	r1, r1, #25
 8005a54:	bf48      	it	mi
 8005a56:	b2ad      	uxthmi	r5, r5
 8005a58:	2f6f      	cmp	r7, #111	@ 0x6f
 8005a5a:	4853      	ldr	r0, [pc, #332]	@ (8005ba8 <_printf_i+0x238>)
 8005a5c:	6033      	str	r3, [r6, #0]
 8005a5e:	bf14      	ite	ne
 8005a60:	230a      	movne	r3, #10
 8005a62:	2308      	moveq	r3, #8
 8005a64:	2100      	movs	r1, #0
 8005a66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005a6a:	6866      	ldr	r6, [r4, #4]
 8005a6c:	60a6      	str	r6, [r4, #8]
 8005a6e:	2e00      	cmp	r6, #0
 8005a70:	bfa2      	ittt	ge
 8005a72:	6821      	ldrge	r1, [r4, #0]
 8005a74:	f021 0104 	bicge.w	r1, r1, #4
 8005a78:	6021      	strge	r1, [r4, #0]
 8005a7a:	b90d      	cbnz	r5, 8005a80 <_printf_i+0x110>
 8005a7c:	2e00      	cmp	r6, #0
 8005a7e:	d04b      	beq.n	8005b18 <_printf_i+0x1a8>
 8005a80:	4616      	mov	r6, r2
 8005a82:	fbb5 f1f3 	udiv	r1, r5, r3
 8005a86:	fb03 5711 	mls	r7, r3, r1, r5
 8005a8a:	5dc7      	ldrb	r7, [r0, r7]
 8005a8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005a90:	462f      	mov	r7, r5
 8005a92:	42bb      	cmp	r3, r7
 8005a94:	460d      	mov	r5, r1
 8005a96:	d9f4      	bls.n	8005a82 <_printf_i+0x112>
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d10b      	bne.n	8005ab4 <_printf_i+0x144>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	07df      	lsls	r7, r3, #31
 8005aa0:	d508      	bpl.n	8005ab4 <_printf_i+0x144>
 8005aa2:	6923      	ldr	r3, [r4, #16]
 8005aa4:	6861      	ldr	r1, [r4, #4]
 8005aa6:	4299      	cmp	r1, r3
 8005aa8:	bfde      	ittt	le
 8005aaa:	2330      	movle	r3, #48	@ 0x30
 8005aac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ab4:	1b92      	subs	r2, r2, r6
 8005ab6:	6122      	str	r2, [r4, #16]
 8005ab8:	f8cd a000 	str.w	sl, [sp]
 8005abc:	464b      	mov	r3, r9
 8005abe:	aa03      	add	r2, sp, #12
 8005ac0:	4621      	mov	r1, r4
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	f7ff fee6 	bl	8005894 <_printf_common>
 8005ac8:	3001      	adds	r0, #1
 8005aca:	d14a      	bne.n	8005b62 <_printf_i+0x1f2>
 8005acc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad0:	b004      	add	sp, #16
 8005ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ad6:	6823      	ldr	r3, [r4, #0]
 8005ad8:	f043 0320 	orr.w	r3, r3, #32
 8005adc:	6023      	str	r3, [r4, #0]
 8005ade:	4833      	ldr	r0, [pc, #204]	@ (8005bac <_printf_i+0x23c>)
 8005ae0:	2778      	movs	r7, #120	@ 0x78
 8005ae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	6831      	ldr	r1, [r6, #0]
 8005aea:	061f      	lsls	r7, r3, #24
 8005aec:	f851 5b04 	ldr.w	r5, [r1], #4
 8005af0:	d402      	bmi.n	8005af8 <_printf_i+0x188>
 8005af2:	065f      	lsls	r7, r3, #25
 8005af4:	bf48      	it	mi
 8005af6:	b2ad      	uxthmi	r5, r5
 8005af8:	6031      	str	r1, [r6, #0]
 8005afa:	07d9      	lsls	r1, r3, #31
 8005afc:	bf44      	itt	mi
 8005afe:	f043 0320 	orrmi.w	r3, r3, #32
 8005b02:	6023      	strmi	r3, [r4, #0]
 8005b04:	b11d      	cbz	r5, 8005b0e <_printf_i+0x19e>
 8005b06:	2310      	movs	r3, #16
 8005b08:	e7ac      	b.n	8005a64 <_printf_i+0xf4>
 8005b0a:	4827      	ldr	r0, [pc, #156]	@ (8005ba8 <_printf_i+0x238>)
 8005b0c:	e7e9      	b.n	8005ae2 <_printf_i+0x172>
 8005b0e:	6823      	ldr	r3, [r4, #0]
 8005b10:	f023 0320 	bic.w	r3, r3, #32
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	e7f6      	b.n	8005b06 <_printf_i+0x196>
 8005b18:	4616      	mov	r6, r2
 8005b1a:	e7bd      	b.n	8005a98 <_printf_i+0x128>
 8005b1c:	6833      	ldr	r3, [r6, #0]
 8005b1e:	6825      	ldr	r5, [r4, #0]
 8005b20:	6961      	ldr	r1, [r4, #20]
 8005b22:	1d18      	adds	r0, r3, #4
 8005b24:	6030      	str	r0, [r6, #0]
 8005b26:	062e      	lsls	r6, r5, #24
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	d501      	bpl.n	8005b30 <_printf_i+0x1c0>
 8005b2c:	6019      	str	r1, [r3, #0]
 8005b2e:	e002      	b.n	8005b36 <_printf_i+0x1c6>
 8005b30:	0668      	lsls	r0, r5, #25
 8005b32:	d5fb      	bpl.n	8005b2c <_printf_i+0x1bc>
 8005b34:	8019      	strh	r1, [r3, #0]
 8005b36:	2300      	movs	r3, #0
 8005b38:	6123      	str	r3, [r4, #16]
 8005b3a:	4616      	mov	r6, r2
 8005b3c:	e7bc      	b.n	8005ab8 <_printf_i+0x148>
 8005b3e:	6833      	ldr	r3, [r6, #0]
 8005b40:	1d1a      	adds	r2, r3, #4
 8005b42:	6032      	str	r2, [r6, #0]
 8005b44:	681e      	ldr	r6, [r3, #0]
 8005b46:	6862      	ldr	r2, [r4, #4]
 8005b48:	2100      	movs	r1, #0
 8005b4a:	4630      	mov	r0, r6
 8005b4c:	f7fa fbc8 	bl	80002e0 <memchr>
 8005b50:	b108      	cbz	r0, 8005b56 <_printf_i+0x1e6>
 8005b52:	1b80      	subs	r0, r0, r6
 8005b54:	6060      	str	r0, [r4, #4]
 8005b56:	6863      	ldr	r3, [r4, #4]
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b60:	e7aa      	b.n	8005ab8 <_printf_i+0x148>
 8005b62:	6923      	ldr	r3, [r4, #16]
 8005b64:	4632      	mov	r2, r6
 8005b66:	4649      	mov	r1, r9
 8005b68:	4640      	mov	r0, r8
 8005b6a:	47d0      	blx	sl
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d0ad      	beq.n	8005acc <_printf_i+0x15c>
 8005b70:	6823      	ldr	r3, [r4, #0]
 8005b72:	079b      	lsls	r3, r3, #30
 8005b74:	d413      	bmi.n	8005b9e <_printf_i+0x22e>
 8005b76:	68e0      	ldr	r0, [r4, #12]
 8005b78:	9b03      	ldr	r3, [sp, #12]
 8005b7a:	4298      	cmp	r0, r3
 8005b7c:	bfb8      	it	lt
 8005b7e:	4618      	movlt	r0, r3
 8005b80:	e7a6      	b.n	8005ad0 <_printf_i+0x160>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4632      	mov	r2, r6
 8005b86:	4649      	mov	r1, r9
 8005b88:	4640      	mov	r0, r8
 8005b8a:	47d0      	blx	sl
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d09d      	beq.n	8005acc <_printf_i+0x15c>
 8005b90:	3501      	adds	r5, #1
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	9903      	ldr	r1, [sp, #12]
 8005b96:	1a5b      	subs	r3, r3, r1
 8005b98:	42ab      	cmp	r3, r5
 8005b9a:	dcf2      	bgt.n	8005b82 <_printf_i+0x212>
 8005b9c:	e7eb      	b.n	8005b76 <_printf_i+0x206>
 8005b9e:	2500      	movs	r5, #0
 8005ba0:	f104 0619 	add.w	r6, r4, #25
 8005ba4:	e7f5      	b.n	8005b92 <_printf_i+0x222>
 8005ba6:	bf00      	nop
 8005ba8:	08009ef6 	.word	0x08009ef6
 8005bac:	08009f07 	.word	0x08009f07

08005bb0 <_scanf_float>:
 8005bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb4:	b087      	sub	sp, #28
 8005bb6:	4617      	mov	r7, r2
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	688b      	ldr	r3, [r1, #8]
 8005bbc:	1e5a      	subs	r2, r3, #1
 8005bbe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005bc2:	bf81      	itttt	hi
 8005bc4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005bc8:	eb03 0b05 	addhi.w	fp, r3, r5
 8005bcc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005bd0:	608b      	strhi	r3, [r1, #8]
 8005bd2:	680b      	ldr	r3, [r1, #0]
 8005bd4:	460a      	mov	r2, r1
 8005bd6:	f04f 0500 	mov.w	r5, #0
 8005bda:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005bde:	f842 3b1c 	str.w	r3, [r2], #28
 8005be2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005be6:	4680      	mov	r8, r0
 8005be8:	460c      	mov	r4, r1
 8005bea:	bf98      	it	ls
 8005bec:	f04f 0b00 	movls.w	fp, #0
 8005bf0:	9201      	str	r2, [sp, #4]
 8005bf2:	4616      	mov	r6, r2
 8005bf4:	46aa      	mov	sl, r5
 8005bf6:	46a9      	mov	r9, r5
 8005bf8:	9502      	str	r5, [sp, #8]
 8005bfa:	68a2      	ldr	r2, [r4, #8]
 8005bfc:	b152      	cbz	r2, 8005c14 <_scanf_float+0x64>
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	2b4e      	cmp	r3, #78	@ 0x4e
 8005c04:	d864      	bhi.n	8005cd0 <_scanf_float+0x120>
 8005c06:	2b40      	cmp	r3, #64	@ 0x40
 8005c08:	d83c      	bhi.n	8005c84 <_scanf_float+0xd4>
 8005c0a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005c0e:	b2c8      	uxtb	r0, r1
 8005c10:	280e      	cmp	r0, #14
 8005c12:	d93a      	bls.n	8005c8a <_scanf_float+0xda>
 8005c14:	f1b9 0f00 	cmp.w	r9, #0
 8005c18:	d003      	beq.n	8005c22 <_scanf_float+0x72>
 8005c1a:	6823      	ldr	r3, [r4, #0]
 8005c1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c20:	6023      	str	r3, [r4, #0]
 8005c22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005c26:	f1ba 0f01 	cmp.w	sl, #1
 8005c2a:	f200 8117 	bhi.w	8005e5c <_scanf_float+0x2ac>
 8005c2e:	9b01      	ldr	r3, [sp, #4]
 8005c30:	429e      	cmp	r6, r3
 8005c32:	f200 8108 	bhi.w	8005e46 <_scanf_float+0x296>
 8005c36:	2001      	movs	r0, #1
 8005c38:	b007      	add	sp, #28
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005c42:	2a0d      	cmp	r2, #13
 8005c44:	d8e6      	bhi.n	8005c14 <_scanf_float+0x64>
 8005c46:	a101      	add	r1, pc, #4	@ (adr r1, 8005c4c <_scanf_float+0x9c>)
 8005c48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c4c:	08005d93 	.word	0x08005d93
 8005c50:	08005c15 	.word	0x08005c15
 8005c54:	08005c15 	.word	0x08005c15
 8005c58:	08005c15 	.word	0x08005c15
 8005c5c:	08005df3 	.word	0x08005df3
 8005c60:	08005dcb 	.word	0x08005dcb
 8005c64:	08005c15 	.word	0x08005c15
 8005c68:	08005c15 	.word	0x08005c15
 8005c6c:	08005da1 	.word	0x08005da1
 8005c70:	08005c15 	.word	0x08005c15
 8005c74:	08005c15 	.word	0x08005c15
 8005c78:	08005c15 	.word	0x08005c15
 8005c7c:	08005c15 	.word	0x08005c15
 8005c80:	08005d59 	.word	0x08005d59
 8005c84:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005c88:	e7db      	b.n	8005c42 <_scanf_float+0x92>
 8005c8a:	290e      	cmp	r1, #14
 8005c8c:	d8c2      	bhi.n	8005c14 <_scanf_float+0x64>
 8005c8e:	a001      	add	r0, pc, #4	@ (adr r0, 8005c94 <_scanf_float+0xe4>)
 8005c90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005c94:	08005d49 	.word	0x08005d49
 8005c98:	08005c15 	.word	0x08005c15
 8005c9c:	08005d49 	.word	0x08005d49
 8005ca0:	08005ddf 	.word	0x08005ddf
 8005ca4:	08005c15 	.word	0x08005c15
 8005ca8:	08005cf1 	.word	0x08005cf1
 8005cac:	08005d2f 	.word	0x08005d2f
 8005cb0:	08005d2f 	.word	0x08005d2f
 8005cb4:	08005d2f 	.word	0x08005d2f
 8005cb8:	08005d2f 	.word	0x08005d2f
 8005cbc:	08005d2f 	.word	0x08005d2f
 8005cc0:	08005d2f 	.word	0x08005d2f
 8005cc4:	08005d2f 	.word	0x08005d2f
 8005cc8:	08005d2f 	.word	0x08005d2f
 8005ccc:	08005d2f 	.word	0x08005d2f
 8005cd0:	2b6e      	cmp	r3, #110	@ 0x6e
 8005cd2:	d809      	bhi.n	8005ce8 <_scanf_float+0x138>
 8005cd4:	2b60      	cmp	r3, #96	@ 0x60
 8005cd6:	d8b2      	bhi.n	8005c3e <_scanf_float+0x8e>
 8005cd8:	2b54      	cmp	r3, #84	@ 0x54
 8005cda:	d07b      	beq.n	8005dd4 <_scanf_float+0x224>
 8005cdc:	2b59      	cmp	r3, #89	@ 0x59
 8005cde:	d199      	bne.n	8005c14 <_scanf_float+0x64>
 8005ce0:	2d07      	cmp	r5, #7
 8005ce2:	d197      	bne.n	8005c14 <_scanf_float+0x64>
 8005ce4:	2508      	movs	r5, #8
 8005ce6:	e02c      	b.n	8005d42 <_scanf_float+0x192>
 8005ce8:	2b74      	cmp	r3, #116	@ 0x74
 8005cea:	d073      	beq.n	8005dd4 <_scanf_float+0x224>
 8005cec:	2b79      	cmp	r3, #121	@ 0x79
 8005cee:	e7f6      	b.n	8005cde <_scanf_float+0x12e>
 8005cf0:	6821      	ldr	r1, [r4, #0]
 8005cf2:	05c8      	lsls	r0, r1, #23
 8005cf4:	d51b      	bpl.n	8005d2e <_scanf_float+0x17e>
 8005cf6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005cfa:	6021      	str	r1, [r4, #0]
 8005cfc:	f109 0901 	add.w	r9, r9, #1
 8005d00:	f1bb 0f00 	cmp.w	fp, #0
 8005d04:	d003      	beq.n	8005d0e <_scanf_float+0x15e>
 8005d06:	3201      	adds	r2, #1
 8005d08:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d0c:	60a2      	str	r2, [r4, #8]
 8005d0e:	68a3      	ldr	r3, [r4, #8]
 8005d10:	3b01      	subs	r3, #1
 8005d12:	60a3      	str	r3, [r4, #8]
 8005d14:	6923      	ldr	r3, [r4, #16]
 8005d16:	3301      	adds	r3, #1
 8005d18:	6123      	str	r3, [r4, #16]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	f340 8087 	ble.w	8005e34 <_scanf_float+0x284>
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	e765      	b.n	8005bfa <_scanf_float+0x4a>
 8005d2e:	eb1a 0105 	adds.w	r1, sl, r5
 8005d32:	f47f af6f 	bne.w	8005c14 <_scanf_float+0x64>
 8005d36:	6822      	ldr	r2, [r4, #0]
 8005d38:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005d3c:	6022      	str	r2, [r4, #0]
 8005d3e:	460d      	mov	r5, r1
 8005d40:	468a      	mov	sl, r1
 8005d42:	f806 3b01 	strb.w	r3, [r6], #1
 8005d46:	e7e2      	b.n	8005d0e <_scanf_float+0x15e>
 8005d48:	6822      	ldr	r2, [r4, #0]
 8005d4a:	0610      	lsls	r0, r2, #24
 8005d4c:	f57f af62 	bpl.w	8005c14 <_scanf_float+0x64>
 8005d50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005d54:	6022      	str	r2, [r4, #0]
 8005d56:	e7f4      	b.n	8005d42 <_scanf_float+0x192>
 8005d58:	f1ba 0f00 	cmp.w	sl, #0
 8005d5c:	d10e      	bne.n	8005d7c <_scanf_float+0x1cc>
 8005d5e:	f1b9 0f00 	cmp.w	r9, #0
 8005d62:	d10e      	bne.n	8005d82 <_scanf_float+0x1d2>
 8005d64:	6822      	ldr	r2, [r4, #0]
 8005d66:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005d6a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005d6e:	d108      	bne.n	8005d82 <_scanf_float+0x1d2>
 8005d70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005d74:	6022      	str	r2, [r4, #0]
 8005d76:	f04f 0a01 	mov.w	sl, #1
 8005d7a:	e7e2      	b.n	8005d42 <_scanf_float+0x192>
 8005d7c:	f1ba 0f02 	cmp.w	sl, #2
 8005d80:	d055      	beq.n	8005e2e <_scanf_float+0x27e>
 8005d82:	2d01      	cmp	r5, #1
 8005d84:	d002      	beq.n	8005d8c <_scanf_float+0x1dc>
 8005d86:	2d04      	cmp	r5, #4
 8005d88:	f47f af44 	bne.w	8005c14 <_scanf_float+0x64>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	b2ed      	uxtb	r5, r5
 8005d90:	e7d7      	b.n	8005d42 <_scanf_float+0x192>
 8005d92:	f1ba 0f01 	cmp.w	sl, #1
 8005d96:	f47f af3d 	bne.w	8005c14 <_scanf_float+0x64>
 8005d9a:	f04f 0a02 	mov.w	sl, #2
 8005d9e:	e7d0      	b.n	8005d42 <_scanf_float+0x192>
 8005da0:	b97d      	cbnz	r5, 8005dc2 <_scanf_float+0x212>
 8005da2:	f1b9 0f00 	cmp.w	r9, #0
 8005da6:	f47f af38 	bne.w	8005c1a <_scanf_float+0x6a>
 8005daa:	6822      	ldr	r2, [r4, #0]
 8005dac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005db0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005db4:	f040 8101 	bne.w	8005fba <_scanf_float+0x40a>
 8005db8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005dbc:	6022      	str	r2, [r4, #0]
 8005dbe:	2501      	movs	r5, #1
 8005dc0:	e7bf      	b.n	8005d42 <_scanf_float+0x192>
 8005dc2:	2d03      	cmp	r5, #3
 8005dc4:	d0e2      	beq.n	8005d8c <_scanf_float+0x1dc>
 8005dc6:	2d05      	cmp	r5, #5
 8005dc8:	e7de      	b.n	8005d88 <_scanf_float+0x1d8>
 8005dca:	2d02      	cmp	r5, #2
 8005dcc:	f47f af22 	bne.w	8005c14 <_scanf_float+0x64>
 8005dd0:	2503      	movs	r5, #3
 8005dd2:	e7b6      	b.n	8005d42 <_scanf_float+0x192>
 8005dd4:	2d06      	cmp	r5, #6
 8005dd6:	f47f af1d 	bne.w	8005c14 <_scanf_float+0x64>
 8005dda:	2507      	movs	r5, #7
 8005ddc:	e7b1      	b.n	8005d42 <_scanf_float+0x192>
 8005dde:	6822      	ldr	r2, [r4, #0]
 8005de0:	0591      	lsls	r1, r2, #22
 8005de2:	f57f af17 	bpl.w	8005c14 <_scanf_float+0x64>
 8005de6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005dea:	6022      	str	r2, [r4, #0]
 8005dec:	f8cd 9008 	str.w	r9, [sp, #8]
 8005df0:	e7a7      	b.n	8005d42 <_scanf_float+0x192>
 8005df2:	6822      	ldr	r2, [r4, #0]
 8005df4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005df8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005dfc:	d006      	beq.n	8005e0c <_scanf_float+0x25c>
 8005dfe:	0550      	lsls	r0, r2, #21
 8005e00:	f57f af08 	bpl.w	8005c14 <_scanf_float+0x64>
 8005e04:	f1b9 0f00 	cmp.w	r9, #0
 8005e08:	f000 80d7 	beq.w	8005fba <_scanf_float+0x40a>
 8005e0c:	0591      	lsls	r1, r2, #22
 8005e0e:	bf58      	it	pl
 8005e10:	9902      	ldrpl	r1, [sp, #8]
 8005e12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005e16:	bf58      	it	pl
 8005e18:	eba9 0101 	subpl.w	r1, r9, r1
 8005e1c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005e20:	bf58      	it	pl
 8005e22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005e26:	6022      	str	r2, [r4, #0]
 8005e28:	f04f 0900 	mov.w	r9, #0
 8005e2c:	e789      	b.n	8005d42 <_scanf_float+0x192>
 8005e2e:	f04f 0a03 	mov.w	sl, #3
 8005e32:	e786      	b.n	8005d42 <_scanf_float+0x192>
 8005e34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005e38:	4639      	mov	r1, r7
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4798      	blx	r3
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	f43f aedb 	beq.w	8005bfa <_scanf_float+0x4a>
 8005e44:	e6e6      	b.n	8005c14 <_scanf_float+0x64>
 8005e46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e4e:	463a      	mov	r2, r7
 8005e50:	4640      	mov	r0, r8
 8005e52:	4798      	blx	r3
 8005e54:	6923      	ldr	r3, [r4, #16]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	6123      	str	r3, [r4, #16]
 8005e5a:	e6e8      	b.n	8005c2e <_scanf_float+0x7e>
 8005e5c:	1e6b      	subs	r3, r5, #1
 8005e5e:	2b06      	cmp	r3, #6
 8005e60:	d824      	bhi.n	8005eac <_scanf_float+0x2fc>
 8005e62:	2d02      	cmp	r5, #2
 8005e64:	d836      	bhi.n	8005ed4 <_scanf_float+0x324>
 8005e66:	9b01      	ldr	r3, [sp, #4]
 8005e68:	429e      	cmp	r6, r3
 8005e6a:	f67f aee4 	bls.w	8005c36 <_scanf_float+0x86>
 8005e6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005e76:	463a      	mov	r2, r7
 8005e78:	4640      	mov	r0, r8
 8005e7a:	4798      	blx	r3
 8005e7c:	6923      	ldr	r3, [r4, #16]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	6123      	str	r3, [r4, #16]
 8005e82:	e7f0      	b.n	8005e66 <_scanf_float+0x2b6>
 8005e84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005e88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005e8c:	463a      	mov	r2, r7
 8005e8e:	4640      	mov	r0, r8
 8005e90:	4798      	blx	r3
 8005e92:	6923      	ldr	r3, [r4, #16]
 8005e94:	3b01      	subs	r3, #1
 8005e96:	6123      	str	r3, [r4, #16]
 8005e98:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e9c:	fa5f fa8a 	uxtb.w	sl, sl
 8005ea0:	f1ba 0f02 	cmp.w	sl, #2
 8005ea4:	d1ee      	bne.n	8005e84 <_scanf_float+0x2d4>
 8005ea6:	3d03      	subs	r5, #3
 8005ea8:	b2ed      	uxtb	r5, r5
 8005eaa:	1b76      	subs	r6, r6, r5
 8005eac:	6823      	ldr	r3, [r4, #0]
 8005eae:	05da      	lsls	r2, r3, #23
 8005eb0:	d530      	bpl.n	8005f14 <_scanf_float+0x364>
 8005eb2:	055b      	lsls	r3, r3, #21
 8005eb4:	d511      	bpl.n	8005eda <_scanf_float+0x32a>
 8005eb6:	9b01      	ldr	r3, [sp, #4]
 8005eb8:	429e      	cmp	r6, r3
 8005eba:	f67f aebc 	bls.w	8005c36 <_scanf_float+0x86>
 8005ebe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005ec6:	463a      	mov	r2, r7
 8005ec8:	4640      	mov	r0, r8
 8005eca:	4798      	blx	r3
 8005ecc:	6923      	ldr	r3, [r4, #16]
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	6123      	str	r3, [r4, #16]
 8005ed2:	e7f0      	b.n	8005eb6 <_scanf_float+0x306>
 8005ed4:	46aa      	mov	sl, r5
 8005ed6:	46b3      	mov	fp, r6
 8005ed8:	e7de      	b.n	8005e98 <_scanf_float+0x2e8>
 8005eda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005ede:	6923      	ldr	r3, [r4, #16]
 8005ee0:	2965      	cmp	r1, #101	@ 0x65
 8005ee2:	f103 33ff 	add.w	r3, r3, #4294967295
 8005ee6:	f106 35ff 	add.w	r5, r6, #4294967295
 8005eea:	6123      	str	r3, [r4, #16]
 8005eec:	d00c      	beq.n	8005f08 <_scanf_float+0x358>
 8005eee:	2945      	cmp	r1, #69	@ 0x45
 8005ef0:	d00a      	beq.n	8005f08 <_scanf_float+0x358>
 8005ef2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4640      	mov	r0, r8
 8005efa:	4798      	blx	r3
 8005efc:	6923      	ldr	r3, [r4, #16]
 8005efe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005f02:	3b01      	subs	r3, #1
 8005f04:	1eb5      	subs	r5, r6, #2
 8005f06:	6123      	str	r3, [r4, #16]
 8005f08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005f0c:	463a      	mov	r2, r7
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4798      	blx	r3
 8005f12:	462e      	mov	r6, r5
 8005f14:	6822      	ldr	r2, [r4, #0]
 8005f16:	f012 0210 	ands.w	r2, r2, #16
 8005f1a:	d001      	beq.n	8005f20 <_scanf_float+0x370>
 8005f1c:	2000      	movs	r0, #0
 8005f1e:	e68b      	b.n	8005c38 <_scanf_float+0x88>
 8005f20:	7032      	strb	r2, [r6, #0]
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f2c:	d11a      	bne.n	8005f64 <_scanf_float+0x3b4>
 8005f2e:	9b02      	ldr	r3, [sp, #8]
 8005f30:	454b      	cmp	r3, r9
 8005f32:	eba3 0209 	sub.w	r2, r3, r9
 8005f36:	d121      	bne.n	8005f7c <_scanf_float+0x3cc>
 8005f38:	9901      	ldr	r1, [sp, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4640      	mov	r0, r8
 8005f3e:	f002 fb4d 	bl	80085dc <_strtod_r>
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	6821      	ldr	r1, [r4, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f011 0f02 	tst.w	r1, #2
 8005f4c:	f103 0204 	add.w	r2, r3, #4
 8005f50:	d01f      	beq.n	8005f92 <_scanf_float+0x3e2>
 8005f52:	9903      	ldr	r1, [sp, #12]
 8005f54:	600a      	str	r2, [r1, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	ed83 0b00 	vstr	d0, [r3]
 8005f5c:	68e3      	ldr	r3, [r4, #12]
 8005f5e:	3301      	adds	r3, #1
 8005f60:	60e3      	str	r3, [r4, #12]
 8005f62:	e7db      	b.n	8005f1c <_scanf_float+0x36c>
 8005f64:	9b04      	ldr	r3, [sp, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d0e6      	beq.n	8005f38 <_scanf_float+0x388>
 8005f6a:	9905      	ldr	r1, [sp, #20]
 8005f6c:	230a      	movs	r3, #10
 8005f6e:	3101      	adds	r1, #1
 8005f70:	4640      	mov	r0, r8
 8005f72:	f002 fbb3 	bl	80086dc <_strtol_r>
 8005f76:	9b04      	ldr	r3, [sp, #16]
 8005f78:	9e05      	ldr	r6, [sp, #20]
 8005f7a:	1ac2      	subs	r2, r0, r3
 8005f7c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005f80:	429e      	cmp	r6, r3
 8005f82:	bf28      	it	cs
 8005f84:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005f88:	490d      	ldr	r1, [pc, #52]	@ (8005fc0 <_scanf_float+0x410>)
 8005f8a:	4630      	mov	r0, r6
 8005f8c:	f000 f8de 	bl	800614c <siprintf>
 8005f90:	e7d2      	b.n	8005f38 <_scanf_float+0x388>
 8005f92:	f011 0f04 	tst.w	r1, #4
 8005f96:	9903      	ldr	r1, [sp, #12]
 8005f98:	600a      	str	r2, [r1, #0]
 8005f9a:	d1dc      	bne.n	8005f56 <_scanf_float+0x3a6>
 8005f9c:	eeb4 0b40 	vcmp.f64	d0, d0
 8005fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa4:	681d      	ldr	r5, [r3, #0]
 8005fa6:	d705      	bvc.n	8005fb4 <_scanf_float+0x404>
 8005fa8:	4806      	ldr	r0, [pc, #24]	@ (8005fc4 <_scanf_float+0x414>)
 8005faa:	f000 f9d1 	bl	8006350 <nanf>
 8005fae:	ed85 0a00 	vstr	s0, [r5]
 8005fb2:	e7d3      	b.n	8005f5c <_scanf_float+0x3ac>
 8005fb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005fb8:	e7f9      	b.n	8005fae <_scanf_float+0x3fe>
 8005fba:	f04f 0900 	mov.w	r9, #0
 8005fbe:	e630      	b.n	8005c22 <_scanf_float+0x72>
 8005fc0:	08009f18 	.word	0x08009f18
 8005fc4:	0800a2ad 	.word	0x0800a2ad

08005fc8 <std>:
 8005fc8:	2300      	movs	r3, #0
 8005fca:	b510      	push	{r4, lr}
 8005fcc:	4604      	mov	r4, r0
 8005fce:	e9c0 3300 	strd	r3, r3, [r0]
 8005fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005fd6:	6083      	str	r3, [r0, #8]
 8005fd8:	8181      	strh	r1, [r0, #12]
 8005fda:	6643      	str	r3, [r0, #100]	@ 0x64
 8005fdc:	81c2      	strh	r2, [r0, #14]
 8005fde:	6183      	str	r3, [r0, #24]
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	2208      	movs	r2, #8
 8005fe4:	305c      	adds	r0, #92	@ 0x5c
 8005fe6:	f000 f924 	bl	8006232 <memset>
 8005fea:	4b0d      	ldr	r3, [pc, #52]	@ (8006020 <std+0x58>)
 8005fec:	6263      	str	r3, [r4, #36]	@ 0x24
 8005fee:	4b0d      	ldr	r3, [pc, #52]	@ (8006024 <std+0x5c>)
 8005ff0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <std+0x60>)
 8005ff4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800602c <std+0x64>)
 8005ff8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ffa:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <std+0x68>)
 8005ffc:	6224      	str	r4, [r4, #32]
 8005ffe:	429c      	cmp	r4, r3
 8006000:	d006      	beq.n	8006010 <std+0x48>
 8006002:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006006:	4294      	cmp	r4, r2
 8006008:	d002      	beq.n	8006010 <std+0x48>
 800600a:	33d0      	adds	r3, #208	@ 0xd0
 800600c:	429c      	cmp	r4, r3
 800600e:	d105      	bne.n	800601c <std+0x54>
 8006010:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006018:	f000 b988 	b.w	800632c <__retarget_lock_init_recursive>
 800601c:	bd10      	pop	{r4, pc}
 800601e:	bf00      	nop
 8006020:	0800618d 	.word	0x0800618d
 8006024:	080061af 	.word	0x080061af
 8006028:	080061e7 	.word	0x080061e7
 800602c:	0800620b 	.word	0x0800620b
 8006030:	2400072c 	.word	0x2400072c

08006034 <stdio_exit_handler>:
 8006034:	4a02      	ldr	r2, [pc, #8]	@ (8006040 <stdio_exit_handler+0xc>)
 8006036:	4903      	ldr	r1, [pc, #12]	@ (8006044 <stdio_exit_handler+0x10>)
 8006038:	4803      	ldr	r0, [pc, #12]	@ (8006048 <stdio_exit_handler+0x14>)
 800603a:	f000 b869 	b.w	8006110 <_fwalk_sglue>
 800603e:	bf00      	nop
 8006040:	24000010 	.word	0x24000010
 8006044:	08008a99 	.word	0x08008a99
 8006048:	24000020 	.word	0x24000020

0800604c <cleanup_stdio>:
 800604c:	6841      	ldr	r1, [r0, #4]
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <cleanup_stdio+0x34>)
 8006050:	4299      	cmp	r1, r3
 8006052:	b510      	push	{r4, lr}
 8006054:	4604      	mov	r4, r0
 8006056:	d001      	beq.n	800605c <cleanup_stdio+0x10>
 8006058:	f002 fd1e 	bl	8008a98 <_fflush_r>
 800605c:	68a1      	ldr	r1, [r4, #8]
 800605e:	4b09      	ldr	r3, [pc, #36]	@ (8006084 <cleanup_stdio+0x38>)
 8006060:	4299      	cmp	r1, r3
 8006062:	d002      	beq.n	800606a <cleanup_stdio+0x1e>
 8006064:	4620      	mov	r0, r4
 8006066:	f002 fd17 	bl	8008a98 <_fflush_r>
 800606a:	68e1      	ldr	r1, [r4, #12]
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <cleanup_stdio+0x3c>)
 800606e:	4299      	cmp	r1, r3
 8006070:	d004      	beq.n	800607c <cleanup_stdio+0x30>
 8006072:	4620      	mov	r0, r4
 8006074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006078:	f002 bd0e 	b.w	8008a98 <_fflush_r>
 800607c:	bd10      	pop	{r4, pc}
 800607e:	bf00      	nop
 8006080:	2400072c 	.word	0x2400072c
 8006084:	24000794 	.word	0x24000794
 8006088:	240007fc 	.word	0x240007fc

0800608c <global_stdio_init.part.0>:
 800608c:	b510      	push	{r4, lr}
 800608e:	4b0b      	ldr	r3, [pc, #44]	@ (80060bc <global_stdio_init.part.0+0x30>)
 8006090:	4c0b      	ldr	r4, [pc, #44]	@ (80060c0 <global_stdio_init.part.0+0x34>)
 8006092:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <global_stdio_init.part.0+0x38>)
 8006094:	601a      	str	r2, [r3, #0]
 8006096:	4620      	mov	r0, r4
 8006098:	2200      	movs	r2, #0
 800609a:	2104      	movs	r1, #4
 800609c:	f7ff ff94 	bl	8005fc8 <std>
 80060a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060a4:	2201      	movs	r2, #1
 80060a6:	2109      	movs	r1, #9
 80060a8:	f7ff ff8e 	bl	8005fc8 <std>
 80060ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060b0:	2202      	movs	r2, #2
 80060b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b6:	2112      	movs	r1, #18
 80060b8:	f7ff bf86 	b.w	8005fc8 <std>
 80060bc:	24000864 	.word	0x24000864
 80060c0:	2400072c 	.word	0x2400072c
 80060c4:	08006035 	.word	0x08006035

080060c8 <__sfp_lock_acquire>:
 80060c8:	4801      	ldr	r0, [pc, #4]	@ (80060d0 <__sfp_lock_acquire+0x8>)
 80060ca:	f000 b930 	b.w	800632e <__retarget_lock_acquire_recursive>
 80060ce:	bf00      	nop
 80060d0:	2400086d 	.word	0x2400086d

080060d4 <__sfp_lock_release>:
 80060d4:	4801      	ldr	r0, [pc, #4]	@ (80060dc <__sfp_lock_release+0x8>)
 80060d6:	f000 b92b 	b.w	8006330 <__retarget_lock_release_recursive>
 80060da:	bf00      	nop
 80060dc:	2400086d 	.word	0x2400086d

080060e0 <__sinit>:
 80060e0:	b510      	push	{r4, lr}
 80060e2:	4604      	mov	r4, r0
 80060e4:	f7ff fff0 	bl	80060c8 <__sfp_lock_acquire>
 80060e8:	6a23      	ldr	r3, [r4, #32]
 80060ea:	b11b      	cbz	r3, 80060f4 <__sinit+0x14>
 80060ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060f0:	f7ff bff0 	b.w	80060d4 <__sfp_lock_release>
 80060f4:	4b04      	ldr	r3, [pc, #16]	@ (8006108 <__sinit+0x28>)
 80060f6:	6223      	str	r3, [r4, #32]
 80060f8:	4b04      	ldr	r3, [pc, #16]	@ (800610c <__sinit+0x2c>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1f5      	bne.n	80060ec <__sinit+0xc>
 8006100:	f7ff ffc4 	bl	800608c <global_stdio_init.part.0>
 8006104:	e7f2      	b.n	80060ec <__sinit+0xc>
 8006106:	bf00      	nop
 8006108:	0800604d 	.word	0x0800604d
 800610c:	24000864 	.word	0x24000864

08006110 <_fwalk_sglue>:
 8006110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006114:	4607      	mov	r7, r0
 8006116:	4688      	mov	r8, r1
 8006118:	4614      	mov	r4, r2
 800611a:	2600      	movs	r6, #0
 800611c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006120:	f1b9 0901 	subs.w	r9, r9, #1
 8006124:	d505      	bpl.n	8006132 <_fwalk_sglue+0x22>
 8006126:	6824      	ldr	r4, [r4, #0]
 8006128:	2c00      	cmp	r4, #0
 800612a:	d1f7      	bne.n	800611c <_fwalk_sglue+0xc>
 800612c:	4630      	mov	r0, r6
 800612e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006132:	89ab      	ldrh	r3, [r5, #12]
 8006134:	2b01      	cmp	r3, #1
 8006136:	d907      	bls.n	8006148 <_fwalk_sglue+0x38>
 8006138:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800613c:	3301      	adds	r3, #1
 800613e:	d003      	beq.n	8006148 <_fwalk_sglue+0x38>
 8006140:	4629      	mov	r1, r5
 8006142:	4638      	mov	r0, r7
 8006144:	47c0      	blx	r8
 8006146:	4306      	orrs	r6, r0
 8006148:	3568      	adds	r5, #104	@ 0x68
 800614a:	e7e9      	b.n	8006120 <_fwalk_sglue+0x10>

0800614c <siprintf>:
 800614c:	b40e      	push	{r1, r2, r3}
 800614e:	b500      	push	{lr}
 8006150:	b09c      	sub	sp, #112	@ 0x70
 8006152:	ab1d      	add	r3, sp, #116	@ 0x74
 8006154:	9002      	str	r0, [sp, #8]
 8006156:	9006      	str	r0, [sp, #24]
 8006158:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800615c:	4809      	ldr	r0, [pc, #36]	@ (8006184 <siprintf+0x38>)
 800615e:	9107      	str	r1, [sp, #28]
 8006160:	9104      	str	r1, [sp, #16]
 8006162:	4909      	ldr	r1, [pc, #36]	@ (8006188 <siprintf+0x3c>)
 8006164:	f853 2b04 	ldr.w	r2, [r3], #4
 8006168:	9105      	str	r1, [sp, #20]
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	a902      	add	r1, sp, #8
 8006170:	f002 fb12 	bl	8008798 <_svfiprintf_r>
 8006174:	9b02      	ldr	r3, [sp, #8]
 8006176:	2200      	movs	r2, #0
 8006178:	701a      	strb	r2, [r3, #0]
 800617a:	b01c      	add	sp, #112	@ 0x70
 800617c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006180:	b003      	add	sp, #12
 8006182:	4770      	bx	lr
 8006184:	2400001c 	.word	0x2400001c
 8006188:	ffff0208 	.word	0xffff0208

0800618c <__sread>:
 800618c:	b510      	push	{r4, lr}
 800618e:	460c      	mov	r4, r1
 8006190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006194:	f000 f87c 	bl	8006290 <_read_r>
 8006198:	2800      	cmp	r0, #0
 800619a:	bfab      	itete	ge
 800619c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800619e:	89a3      	ldrhlt	r3, [r4, #12]
 80061a0:	181b      	addge	r3, r3, r0
 80061a2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061a6:	bfac      	ite	ge
 80061a8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061aa:	81a3      	strhlt	r3, [r4, #12]
 80061ac:	bd10      	pop	{r4, pc}

080061ae <__swrite>:
 80061ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b2:	461f      	mov	r7, r3
 80061b4:	898b      	ldrh	r3, [r1, #12]
 80061b6:	05db      	lsls	r3, r3, #23
 80061b8:	4605      	mov	r5, r0
 80061ba:	460c      	mov	r4, r1
 80061bc:	4616      	mov	r6, r2
 80061be:	d505      	bpl.n	80061cc <__swrite+0x1e>
 80061c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c4:	2302      	movs	r3, #2
 80061c6:	2200      	movs	r2, #0
 80061c8:	f000 f850 	bl	800626c <_lseek_r>
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061d6:	81a3      	strh	r3, [r4, #12]
 80061d8:	4632      	mov	r2, r6
 80061da:	463b      	mov	r3, r7
 80061dc:	4628      	mov	r0, r5
 80061de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e2:	f000 b867 	b.w	80062b4 <_write_r>

080061e6 <__sseek>:
 80061e6:	b510      	push	{r4, lr}
 80061e8:	460c      	mov	r4, r1
 80061ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ee:	f000 f83d 	bl	800626c <_lseek_r>
 80061f2:	1c43      	adds	r3, r0, #1
 80061f4:	89a3      	ldrh	r3, [r4, #12]
 80061f6:	bf15      	itete	ne
 80061f8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061fa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061fe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006202:	81a3      	strheq	r3, [r4, #12]
 8006204:	bf18      	it	ne
 8006206:	81a3      	strhne	r3, [r4, #12]
 8006208:	bd10      	pop	{r4, pc}

0800620a <__sclose>:
 800620a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800620e:	f000 b81d 	b.w	800624c <_close_r>

08006212 <memcmp>:
 8006212:	b510      	push	{r4, lr}
 8006214:	3901      	subs	r1, #1
 8006216:	4402      	add	r2, r0
 8006218:	4290      	cmp	r0, r2
 800621a:	d101      	bne.n	8006220 <memcmp+0xe>
 800621c:	2000      	movs	r0, #0
 800621e:	e005      	b.n	800622c <memcmp+0x1a>
 8006220:	7803      	ldrb	r3, [r0, #0]
 8006222:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006226:	42a3      	cmp	r3, r4
 8006228:	d001      	beq.n	800622e <memcmp+0x1c>
 800622a:	1b18      	subs	r0, r3, r4
 800622c:	bd10      	pop	{r4, pc}
 800622e:	3001      	adds	r0, #1
 8006230:	e7f2      	b.n	8006218 <memcmp+0x6>

08006232 <memset>:
 8006232:	4402      	add	r2, r0
 8006234:	4603      	mov	r3, r0
 8006236:	4293      	cmp	r3, r2
 8006238:	d100      	bne.n	800623c <memset+0xa>
 800623a:	4770      	bx	lr
 800623c:	f803 1b01 	strb.w	r1, [r3], #1
 8006240:	e7f9      	b.n	8006236 <memset+0x4>
	...

08006244 <_localeconv_r>:
 8006244:	4800      	ldr	r0, [pc, #0]	@ (8006248 <_localeconv_r+0x4>)
 8006246:	4770      	bx	lr
 8006248:	2400015c 	.word	0x2400015c

0800624c <_close_r>:
 800624c:	b538      	push	{r3, r4, r5, lr}
 800624e:	4d06      	ldr	r5, [pc, #24]	@ (8006268 <_close_r+0x1c>)
 8006250:	2300      	movs	r3, #0
 8006252:	4604      	mov	r4, r0
 8006254:	4608      	mov	r0, r1
 8006256:	602b      	str	r3, [r5, #0]
 8006258:	f7fb fa49 	bl	80016ee <_close>
 800625c:	1c43      	adds	r3, r0, #1
 800625e:	d102      	bne.n	8006266 <_close_r+0x1a>
 8006260:	682b      	ldr	r3, [r5, #0]
 8006262:	b103      	cbz	r3, 8006266 <_close_r+0x1a>
 8006264:	6023      	str	r3, [r4, #0]
 8006266:	bd38      	pop	{r3, r4, r5, pc}
 8006268:	24000868 	.word	0x24000868

0800626c <_lseek_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4d07      	ldr	r5, [pc, #28]	@ (800628c <_lseek_r+0x20>)
 8006270:	4604      	mov	r4, r0
 8006272:	4608      	mov	r0, r1
 8006274:	4611      	mov	r1, r2
 8006276:	2200      	movs	r2, #0
 8006278:	602a      	str	r2, [r5, #0]
 800627a:	461a      	mov	r2, r3
 800627c:	f7fb fa5e 	bl	800173c <_lseek>
 8006280:	1c43      	adds	r3, r0, #1
 8006282:	d102      	bne.n	800628a <_lseek_r+0x1e>
 8006284:	682b      	ldr	r3, [r5, #0]
 8006286:	b103      	cbz	r3, 800628a <_lseek_r+0x1e>
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	24000868 	.word	0x24000868

08006290 <_read_r>:
 8006290:	b538      	push	{r3, r4, r5, lr}
 8006292:	4d07      	ldr	r5, [pc, #28]	@ (80062b0 <_read_r+0x20>)
 8006294:	4604      	mov	r4, r0
 8006296:	4608      	mov	r0, r1
 8006298:	4611      	mov	r1, r2
 800629a:	2200      	movs	r2, #0
 800629c:	602a      	str	r2, [r5, #0]
 800629e:	461a      	mov	r2, r3
 80062a0:	f7fb f9ec 	bl	800167c <_read>
 80062a4:	1c43      	adds	r3, r0, #1
 80062a6:	d102      	bne.n	80062ae <_read_r+0x1e>
 80062a8:	682b      	ldr	r3, [r5, #0]
 80062aa:	b103      	cbz	r3, 80062ae <_read_r+0x1e>
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	bd38      	pop	{r3, r4, r5, pc}
 80062b0:	24000868 	.word	0x24000868

080062b4 <_write_r>:
 80062b4:	b538      	push	{r3, r4, r5, lr}
 80062b6:	4d07      	ldr	r5, [pc, #28]	@ (80062d4 <_write_r+0x20>)
 80062b8:	4604      	mov	r4, r0
 80062ba:	4608      	mov	r0, r1
 80062bc:	4611      	mov	r1, r2
 80062be:	2200      	movs	r2, #0
 80062c0:	602a      	str	r2, [r5, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	f7fb f9f7 	bl	80016b6 <_write>
 80062c8:	1c43      	adds	r3, r0, #1
 80062ca:	d102      	bne.n	80062d2 <_write_r+0x1e>
 80062cc:	682b      	ldr	r3, [r5, #0]
 80062ce:	b103      	cbz	r3, 80062d2 <_write_r+0x1e>
 80062d0:	6023      	str	r3, [r4, #0]
 80062d2:	bd38      	pop	{r3, r4, r5, pc}
 80062d4:	24000868 	.word	0x24000868

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	@ (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	2400001c 	.word	0x2400001c

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	4d0d      	ldr	r5, [pc, #52]	@ (800631c <__libc_init_array+0x38>)
 80062e8:	4c0d      	ldr	r4, [pc, #52]	@ (8006320 <__libc_init_array+0x3c>)
 80062ea:	1b64      	subs	r4, r4, r5
 80062ec:	10a4      	asrs	r4, r4, #2
 80062ee:	2600      	movs	r6, #0
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	4d0b      	ldr	r5, [pc, #44]	@ (8006324 <__libc_init_array+0x40>)
 80062f6:	4c0c      	ldr	r4, [pc, #48]	@ (8006328 <__libc_init_array+0x44>)
 80062f8:	f003 fab0 	bl	800985c <_init>
 80062fc:	1b64      	subs	r4, r4, r5
 80062fe:	10a4      	asrs	r4, r4, #2
 8006300:	2600      	movs	r6, #0
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	0800a318 	.word	0x0800a318
 8006320:	0800a318 	.word	0x0800a318
 8006324:	0800a318 	.word	0x0800a318
 8006328:	0800a31c 	.word	0x0800a31c

0800632c <__retarget_lock_init_recursive>:
 800632c:	4770      	bx	lr

0800632e <__retarget_lock_acquire_recursive>:
 800632e:	4770      	bx	lr

08006330 <__retarget_lock_release_recursive>:
 8006330:	4770      	bx	lr

08006332 <memcpy>:
 8006332:	440a      	add	r2, r1
 8006334:	4291      	cmp	r1, r2
 8006336:	f100 33ff 	add.w	r3, r0, #4294967295
 800633a:	d100      	bne.n	800633e <memcpy+0xc>
 800633c:	4770      	bx	lr
 800633e:	b510      	push	{r4, lr}
 8006340:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006344:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006348:	4291      	cmp	r1, r2
 800634a:	d1f9      	bne.n	8006340 <memcpy+0xe>
 800634c:	bd10      	pop	{r4, pc}
	...

08006350 <nanf>:
 8006350:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006358 <nanf+0x8>
 8006354:	4770      	bx	lr
 8006356:	bf00      	nop
 8006358:	7fc00000 	.word	0x7fc00000

0800635c <quorem>:
 800635c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	6903      	ldr	r3, [r0, #16]
 8006362:	690c      	ldr	r4, [r1, #16]
 8006364:	42a3      	cmp	r3, r4
 8006366:	4607      	mov	r7, r0
 8006368:	db7e      	blt.n	8006468 <quorem+0x10c>
 800636a:	3c01      	subs	r4, #1
 800636c:	f101 0814 	add.w	r8, r1, #20
 8006370:	00a3      	lsls	r3, r4, #2
 8006372:	f100 0514 	add.w	r5, r0, #20
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800637c:	9301      	str	r3, [sp, #4]
 800637e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006382:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006386:	3301      	adds	r3, #1
 8006388:	429a      	cmp	r2, r3
 800638a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800638e:	fbb2 f6f3 	udiv	r6, r2, r3
 8006392:	d32e      	bcc.n	80063f2 <quorem+0x96>
 8006394:	f04f 0a00 	mov.w	sl, #0
 8006398:	46c4      	mov	ip, r8
 800639a:	46ae      	mov	lr, r5
 800639c:	46d3      	mov	fp, sl
 800639e:	f85c 3b04 	ldr.w	r3, [ip], #4
 80063a2:	b298      	uxth	r0, r3
 80063a4:	fb06 a000 	mla	r0, r6, r0, sl
 80063a8:	0c02      	lsrs	r2, r0, #16
 80063aa:	0c1b      	lsrs	r3, r3, #16
 80063ac:	fb06 2303 	mla	r3, r6, r3, r2
 80063b0:	f8de 2000 	ldr.w	r2, [lr]
 80063b4:	b280      	uxth	r0, r0
 80063b6:	b292      	uxth	r2, r2
 80063b8:	1a12      	subs	r2, r2, r0
 80063ba:	445a      	add	r2, fp
 80063bc:	f8de 0000 	ldr.w	r0, [lr]
 80063c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80063ca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80063ce:	b292      	uxth	r2, r2
 80063d0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80063d4:	45e1      	cmp	r9, ip
 80063d6:	f84e 2b04 	str.w	r2, [lr], #4
 80063da:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80063de:	d2de      	bcs.n	800639e <quorem+0x42>
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	58eb      	ldr	r3, [r5, r3]
 80063e4:	b92b      	cbnz	r3, 80063f2 <quorem+0x96>
 80063e6:	9b01      	ldr	r3, [sp, #4]
 80063e8:	3b04      	subs	r3, #4
 80063ea:	429d      	cmp	r5, r3
 80063ec:	461a      	mov	r2, r3
 80063ee:	d32f      	bcc.n	8006450 <quorem+0xf4>
 80063f0:	613c      	str	r4, [r7, #16]
 80063f2:	4638      	mov	r0, r7
 80063f4:	f001 f956 	bl	80076a4 <__mcmp>
 80063f8:	2800      	cmp	r0, #0
 80063fa:	db25      	blt.n	8006448 <quorem+0xec>
 80063fc:	4629      	mov	r1, r5
 80063fe:	2000      	movs	r0, #0
 8006400:	f858 2b04 	ldr.w	r2, [r8], #4
 8006404:	f8d1 c000 	ldr.w	ip, [r1]
 8006408:	fa1f fe82 	uxth.w	lr, r2
 800640c:	fa1f f38c 	uxth.w	r3, ip
 8006410:	eba3 030e 	sub.w	r3, r3, lr
 8006414:	4403      	add	r3, r0
 8006416:	0c12      	lsrs	r2, r2, #16
 8006418:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800641c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006420:	b29b      	uxth	r3, r3
 8006422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006426:	45c1      	cmp	r9, r8
 8006428:	f841 3b04 	str.w	r3, [r1], #4
 800642c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006430:	d2e6      	bcs.n	8006400 <quorem+0xa4>
 8006432:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006436:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800643a:	b922      	cbnz	r2, 8006446 <quorem+0xea>
 800643c:	3b04      	subs	r3, #4
 800643e:	429d      	cmp	r5, r3
 8006440:	461a      	mov	r2, r3
 8006442:	d30b      	bcc.n	800645c <quorem+0x100>
 8006444:	613c      	str	r4, [r7, #16]
 8006446:	3601      	adds	r6, #1
 8006448:	4630      	mov	r0, r6
 800644a:	b003      	add	sp, #12
 800644c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006450:	6812      	ldr	r2, [r2, #0]
 8006452:	3b04      	subs	r3, #4
 8006454:	2a00      	cmp	r2, #0
 8006456:	d1cb      	bne.n	80063f0 <quorem+0x94>
 8006458:	3c01      	subs	r4, #1
 800645a:	e7c6      	b.n	80063ea <quorem+0x8e>
 800645c:	6812      	ldr	r2, [r2, #0]
 800645e:	3b04      	subs	r3, #4
 8006460:	2a00      	cmp	r2, #0
 8006462:	d1ef      	bne.n	8006444 <quorem+0xe8>
 8006464:	3c01      	subs	r4, #1
 8006466:	e7ea      	b.n	800643e <quorem+0xe2>
 8006468:	2000      	movs	r0, #0
 800646a:	e7ee      	b.n	800644a <quorem+0xee>
 800646c:	0000      	movs	r0, r0
	...

08006470 <_dtoa_r>:
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	ed2d 8b02 	vpush	{d8}
 8006478:	69c7      	ldr	r7, [r0, #28]
 800647a:	b091      	sub	sp, #68	@ 0x44
 800647c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006480:	ec55 4b10 	vmov	r4, r5, d0
 8006484:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8006486:	9107      	str	r1, [sp, #28]
 8006488:	4681      	mov	r9, r0
 800648a:	9209      	str	r2, [sp, #36]	@ 0x24
 800648c:	930d      	str	r3, [sp, #52]	@ 0x34
 800648e:	b97f      	cbnz	r7, 80064b0 <_dtoa_r+0x40>
 8006490:	2010      	movs	r0, #16
 8006492:	f000 fd8d 	bl	8006fb0 <malloc>
 8006496:	4602      	mov	r2, r0
 8006498:	f8c9 001c 	str.w	r0, [r9, #28]
 800649c:	b920      	cbnz	r0, 80064a8 <_dtoa_r+0x38>
 800649e:	4ba0      	ldr	r3, [pc, #640]	@ (8006720 <_dtoa_r+0x2b0>)
 80064a0:	21ef      	movs	r1, #239	@ 0xef
 80064a2:	48a0      	ldr	r0, [pc, #640]	@ (8006724 <_dtoa_r+0x2b4>)
 80064a4:	f002 fb64 	bl	8008b70 <__assert_func>
 80064a8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80064ac:	6007      	str	r7, [r0, #0]
 80064ae:	60c7      	str	r7, [r0, #12]
 80064b0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	b159      	cbz	r1, 80064d0 <_dtoa_r+0x60>
 80064b8:	685a      	ldr	r2, [r3, #4]
 80064ba:	604a      	str	r2, [r1, #4]
 80064bc:	2301      	movs	r3, #1
 80064be:	4093      	lsls	r3, r2
 80064c0:	608b      	str	r3, [r1, #8]
 80064c2:	4648      	mov	r0, r9
 80064c4:	f000 fe6a 	bl	800719c <_Bfree>
 80064c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064cc:	2200      	movs	r2, #0
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	1e2b      	subs	r3, r5, #0
 80064d2:	bfbb      	ittet	lt
 80064d4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80064d8:	9303      	strlt	r3, [sp, #12]
 80064da:	2300      	movge	r3, #0
 80064dc:	2201      	movlt	r2, #1
 80064de:	bfac      	ite	ge
 80064e0:	6033      	strge	r3, [r6, #0]
 80064e2:	6032      	strlt	r2, [r6, #0]
 80064e4:	4b90      	ldr	r3, [pc, #576]	@ (8006728 <_dtoa_r+0x2b8>)
 80064e6:	9e03      	ldr	r6, [sp, #12]
 80064e8:	43b3      	bics	r3, r6
 80064ea:	d110      	bne.n	800650e <_dtoa_r+0x9e>
 80064ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064ee:	f242 730f 	movw	r3, #9999	@ 0x270f
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80064f8:	4323      	orrs	r3, r4
 80064fa:	f000 84de 	beq.w	8006eba <_dtoa_r+0xa4a>
 80064fe:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006500:	4f8a      	ldr	r7, [pc, #552]	@ (800672c <_dtoa_r+0x2bc>)
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 84e0 	beq.w	8006ec8 <_dtoa_r+0xa58>
 8006508:	1cfb      	adds	r3, r7, #3
 800650a:	f000 bcdb 	b.w	8006ec4 <_dtoa_r+0xa54>
 800650e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006512:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006516:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800651a:	d10a      	bne.n	8006532 <_dtoa_r+0xc2>
 800651c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800651e:	2301      	movs	r3, #1
 8006520:	6013      	str	r3, [r2, #0]
 8006522:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006524:	b113      	cbz	r3, 800652c <_dtoa_r+0xbc>
 8006526:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006528:	4b81      	ldr	r3, [pc, #516]	@ (8006730 <_dtoa_r+0x2c0>)
 800652a:	6013      	str	r3, [r2, #0]
 800652c:	4f81      	ldr	r7, [pc, #516]	@ (8006734 <_dtoa_r+0x2c4>)
 800652e:	f000 bccb 	b.w	8006ec8 <_dtoa_r+0xa58>
 8006532:	aa0e      	add	r2, sp, #56	@ 0x38
 8006534:	a90f      	add	r1, sp, #60	@ 0x3c
 8006536:	4648      	mov	r0, r9
 8006538:	eeb0 0b48 	vmov.f64	d0, d8
 800653c:	f001 f9d2 	bl	80078e4 <__d2b>
 8006540:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8006544:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006546:	9001      	str	r0, [sp, #4]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d045      	beq.n	80065d8 <_dtoa_r+0x168>
 800654c:	eeb0 7b48 	vmov.f64	d7, d8
 8006550:	ee18 1a90 	vmov	r1, s17
 8006554:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006558:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800655c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006560:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8006564:	2500      	movs	r5, #0
 8006566:	ee07 1a90 	vmov	s15, r1
 800656a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800656e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006708 <_dtoa_r+0x298>
 8006572:	ee37 7b46 	vsub.f64	d7, d7, d6
 8006576:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006710 <_dtoa_r+0x2a0>
 800657a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800657e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006718 <_dtoa_r+0x2a8>
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800658a:	eeb0 7b46 	vmov.f64	d7, d6
 800658e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8006592:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8006596:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800659a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659e:	ee16 8a90 	vmov	r8, s13
 80065a2:	d508      	bpl.n	80065b6 <_dtoa_r+0x146>
 80065a4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80065a8:	eeb4 6b47 	vcmp.f64	d6, d7
 80065ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b0:	bf18      	it	ne
 80065b2:	f108 38ff 	addne.w	r8, r8, #4294967295
 80065b6:	f1b8 0f16 	cmp.w	r8, #22
 80065ba:	d82b      	bhi.n	8006614 <_dtoa_r+0x1a4>
 80065bc:	495e      	ldr	r1, [pc, #376]	@ (8006738 <_dtoa_r+0x2c8>)
 80065be:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80065c2:	ed91 7b00 	vldr	d7, [r1]
 80065c6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	d501      	bpl.n	80065d4 <_dtoa_r+0x164>
 80065d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80065d4:	2100      	movs	r1, #0
 80065d6:	e01e      	b.n	8006616 <_dtoa_r+0x1a6>
 80065d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80065da:	4413      	add	r3, r2
 80065dc:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80065e0:	2920      	cmp	r1, #32
 80065e2:	bfc1      	itttt	gt
 80065e4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80065e8:	408e      	lslgt	r6, r1
 80065ea:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80065ee:	fa24 f101 	lsrgt.w	r1, r4, r1
 80065f2:	bfd6      	itet	le
 80065f4:	f1c1 0120 	rsble	r1, r1, #32
 80065f8:	4331      	orrgt	r1, r6
 80065fa:	fa04 f101 	lslle.w	r1, r4, r1
 80065fe:	ee07 1a90 	vmov	s15, r1
 8006602:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8006606:	3b01      	subs	r3, #1
 8006608:	ee17 1a90 	vmov	r1, s15
 800660c:	2501      	movs	r5, #1
 800660e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8006612:	e7a8      	b.n	8006566 <_dtoa_r+0xf6>
 8006614:	2101      	movs	r1, #1
 8006616:	1ad2      	subs	r2, r2, r3
 8006618:	1e53      	subs	r3, r2, #1
 800661a:	9306      	str	r3, [sp, #24]
 800661c:	bf45      	ittet	mi
 800661e:	f1c2 0301 	rsbmi	r3, r2, #1
 8006622:	9305      	strmi	r3, [sp, #20]
 8006624:	2300      	movpl	r3, #0
 8006626:	2300      	movmi	r3, #0
 8006628:	bf4c      	ite	mi
 800662a:	9306      	strmi	r3, [sp, #24]
 800662c:	9305      	strpl	r3, [sp, #20]
 800662e:	f1b8 0f00 	cmp.w	r8, #0
 8006632:	910c      	str	r1, [sp, #48]	@ 0x30
 8006634:	db18      	blt.n	8006668 <_dtoa_r+0x1f8>
 8006636:	9b06      	ldr	r3, [sp, #24]
 8006638:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800663c:	4443      	add	r3, r8
 800663e:	9306      	str	r3, [sp, #24]
 8006640:	2300      	movs	r3, #0
 8006642:	9a07      	ldr	r2, [sp, #28]
 8006644:	2a09      	cmp	r2, #9
 8006646:	d849      	bhi.n	80066dc <_dtoa_r+0x26c>
 8006648:	2a05      	cmp	r2, #5
 800664a:	bfc4      	itt	gt
 800664c:	3a04      	subgt	r2, #4
 800664e:	9207      	strgt	r2, [sp, #28]
 8006650:	9a07      	ldr	r2, [sp, #28]
 8006652:	f1a2 0202 	sub.w	r2, r2, #2
 8006656:	bfcc      	ite	gt
 8006658:	2400      	movgt	r4, #0
 800665a:	2401      	movle	r4, #1
 800665c:	2a03      	cmp	r2, #3
 800665e:	d848      	bhi.n	80066f2 <_dtoa_r+0x282>
 8006660:	e8df f002 	tbb	[pc, r2]
 8006664:	3a2c2e0b 	.word	0x3a2c2e0b
 8006668:	9b05      	ldr	r3, [sp, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	eba3 0308 	sub.w	r3, r3, r8
 8006670:	9305      	str	r3, [sp, #20]
 8006672:	920a      	str	r2, [sp, #40]	@ 0x28
 8006674:	f1c8 0300 	rsb	r3, r8, #0
 8006678:	e7e3      	b.n	8006642 <_dtoa_r+0x1d2>
 800667a:	2200      	movs	r2, #0
 800667c:	9208      	str	r2, [sp, #32]
 800667e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006680:	2a00      	cmp	r2, #0
 8006682:	dc39      	bgt.n	80066f8 <_dtoa_r+0x288>
 8006684:	f04f 0b01 	mov.w	fp, #1
 8006688:	46da      	mov	sl, fp
 800668a:	465a      	mov	r2, fp
 800668c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8006690:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8006694:	2100      	movs	r1, #0
 8006696:	2004      	movs	r0, #4
 8006698:	f100 0614 	add.w	r6, r0, #20
 800669c:	4296      	cmp	r6, r2
 800669e:	d930      	bls.n	8006702 <_dtoa_r+0x292>
 80066a0:	6079      	str	r1, [r7, #4]
 80066a2:	4648      	mov	r0, r9
 80066a4:	9304      	str	r3, [sp, #16]
 80066a6:	f000 fd39 	bl	800711c <_Balloc>
 80066aa:	9b04      	ldr	r3, [sp, #16]
 80066ac:	4607      	mov	r7, r0
 80066ae:	2800      	cmp	r0, #0
 80066b0:	d146      	bne.n	8006740 <_dtoa_r+0x2d0>
 80066b2:	4b22      	ldr	r3, [pc, #136]	@ (800673c <_dtoa_r+0x2cc>)
 80066b4:	4602      	mov	r2, r0
 80066b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80066ba:	e6f2      	b.n	80064a2 <_dtoa_r+0x32>
 80066bc:	2201      	movs	r2, #1
 80066be:	e7dd      	b.n	800667c <_dtoa_r+0x20c>
 80066c0:	2200      	movs	r2, #0
 80066c2:	9208      	str	r2, [sp, #32]
 80066c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066c6:	eb08 0b02 	add.w	fp, r8, r2
 80066ca:	f10b 0a01 	add.w	sl, fp, #1
 80066ce:	4652      	mov	r2, sl
 80066d0:	2a01      	cmp	r2, #1
 80066d2:	bfb8      	it	lt
 80066d4:	2201      	movlt	r2, #1
 80066d6:	e7db      	b.n	8006690 <_dtoa_r+0x220>
 80066d8:	2201      	movs	r2, #1
 80066da:	e7f2      	b.n	80066c2 <_dtoa_r+0x252>
 80066dc:	2401      	movs	r4, #1
 80066de:	2200      	movs	r2, #0
 80066e0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80066e4:	f04f 3bff 	mov.w	fp, #4294967295
 80066e8:	2100      	movs	r1, #0
 80066ea:	46da      	mov	sl, fp
 80066ec:	2212      	movs	r2, #18
 80066ee:	9109      	str	r1, [sp, #36]	@ 0x24
 80066f0:	e7ce      	b.n	8006690 <_dtoa_r+0x220>
 80066f2:	2201      	movs	r2, #1
 80066f4:	9208      	str	r2, [sp, #32]
 80066f6:	e7f5      	b.n	80066e4 <_dtoa_r+0x274>
 80066f8:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80066fc:	46da      	mov	sl, fp
 80066fe:	465a      	mov	r2, fp
 8006700:	e7c6      	b.n	8006690 <_dtoa_r+0x220>
 8006702:	3101      	adds	r1, #1
 8006704:	0040      	lsls	r0, r0, #1
 8006706:	e7c7      	b.n	8006698 <_dtoa_r+0x228>
 8006708:	636f4361 	.word	0x636f4361
 800670c:	3fd287a7 	.word	0x3fd287a7
 8006710:	8b60c8b3 	.word	0x8b60c8b3
 8006714:	3fc68a28 	.word	0x3fc68a28
 8006718:	509f79fb 	.word	0x509f79fb
 800671c:	3fd34413 	.word	0x3fd34413
 8006720:	08009f2a 	.word	0x08009f2a
 8006724:	08009f41 	.word	0x08009f41
 8006728:	7ff00000 	.word	0x7ff00000
 800672c:	08009f26 	.word	0x08009f26
 8006730:	08009ef5 	.word	0x08009ef5
 8006734:	08009ef4 	.word	0x08009ef4
 8006738:	0800a038 	.word	0x0800a038
 800673c:	08009f99 	.word	0x08009f99
 8006740:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8006744:	f1ba 0f0e 	cmp.w	sl, #14
 8006748:	6010      	str	r0, [r2, #0]
 800674a:	d86f      	bhi.n	800682c <_dtoa_r+0x3bc>
 800674c:	2c00      	cmp	r4, #0
 800674e:	d06d      	beq.n	800682c <_dtoa_r+0x3bc>
 8006750:	f1b8 0f00 	cmp.w	r8, #0
 8006754:	f340 80c2 	ble.w	80068dc <_dtoa_r+0x46c>
 8006758:	4aca      	ldr	r2, [pc, #808]	@ (8006a84 <_dtoa_r+0x614>)
 800675a:	f008 010f 	and.w	r1, r8, #15
 800675e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8006762:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8006766:	ed92 7b00 	vldr	d7, [r2]
 800676a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800676e:	f000 80a9 	beq.w	80068c4 <_dtoa_r+0x454>
 8006772:	4ac5      	ldr	r2, [pc, #788]	@ (8006a88 <_dtoa_r+0x618>)
 8006774:	ed92 6b08 	vldr	d6, [r2, #32]
 8006778:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800677c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8006780:	f001 010f 	and.w	r1, r1, #15
 8006784:	2203      	movs	r2, #3
 8006786:	48c0      	ldr	r0, [pc, #768]	@ (8006a88 <_dtoa_r+0x618>)
 8006788:	2900      	cmp	r1, #0
 800678a:	f040 809d 	bne.w	80068c8 <_dtoa_r+0x458>
 800678e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006792:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8006796:	ed8d 7b02 	vstr	d7, [sp, #8]
 800679a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800679c:	ed9d 7b02 	vldr	d7, [sp, #8]
 80067a0:	2900      	cmp	r1, #0
 80067a2:	f000 80c1 	beq.w	8006928 <_dtoa_r+0x4b8>
 80067a6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80067aa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80067ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067b2:	f140 80b9 	bpl.w	8006928 <_dtoa_r+0x4b8>
 80067b6:	f1ba 0f00 	cmp.w	sl, #0
 80067ba:	f000 80b5 	beq.w	8006928 <_dtoa_r+0x4b8>
 80067be:	f1bb 0f00 	cmp.w	fp, #0
 80067c2:	dd31      	ble.n	8006828 <_dtoa_r+0x3b8>
 80067c4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80067c8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80067cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80067d0:	f108 31ff 	add.w	r1, r8, #4294967295
 80067d4:	9104      	str	r1, [sp, #16]
 80067d6:	3201      	adds	r2, #1
 80067d8:	465c      	mov	r4, fp
 80067da:	ed9d 6b02 	vldr	d6, [sp, #8]
 80067de:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80067e2:	ee07 2a90 	vmov	s15, r2
 80067e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80067ea:	eea7 5b06 	vfma.f64	d5, d7, d6
 80067ee:	ee15 2a90 	vmov	r2, s11
 80067f2:	ec51 0b15 	vmov	r0, r1, d5
 80067f6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80067fa:	2c00      	cmp	r4, #0
 80067fc:	f040 8098 	bne.w	8006930 <_dtoa_r+0x4c0>
 8006800:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006804:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006808:	ec41 0b17 	vmov	d7, r0, r1
 800680c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006814:	f300 8261 	bgt.w	8006cda <_dtoa_r+0x86a>
 8006818:	eeb1 7b47 	vneg.f64	d7, d7
 800681c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006824:	f100 80f5 	bmi.w	8006a12 <_dtoa_r+0x5a2>
 8006828:	ed8d 8b02 	vstr	d8, [sp, #8]
 800682c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800682e:	2a00      	cmp	r2, #0
 8006830:	f2c0 812c 	blt.w	8006a8c <_dtoa_r+0x61c>
 8006834:	f1b8 0f0e 	cmp.w	r8, #14
 8006838:	f300 8128 	bgt.w	8006a8c <_dtoa_r+0x61c>
 800683c:	4b91      	ldr	r3, [pc, #580]	@ (8006a84 <_dtoa_r+0x614>)
 800683e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006842:	ed93 6b00 	vldr	d6, [r3]
 8006846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006848:	2b00      	cmp	r3, #0
 800684a:	da03      	bge.n	8006854 <_dtoa_r+0x3e4>
 800684c:	f1ba 0f00 	cmp.w	sl, #0
 8006850:	f340 80d2 	ble.w	80069f8 <_dtoa_r+0x588>
 8006854:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8006858:	ed9d 7b02 	vldr	d7, [sp, #8]
 800685c:	463e      	mov	r6, r7
 800685e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8006862:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8006866:	ee15 3a10 	vmov	r3, s10
 800686a:	3330      	adds	r3, #48	@ 0x30
 800686c:	f806 3b01 	strb.w	r3, [r6], #1
 8006870:	1bf3      	subs	r3, r6, r7
 8006872:	459a      	cmp	sl, r3
 8006874:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8006878:	eea3 7b46 	vfms.f64	d7, d3, d6
 800687c:	f040 80f8 	bne.w	8006a70 <_dtoa_r+0x600>
 8006880:	ee37 7b07 	vadd.f64	d7, d7, d7
 8006884:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	f300 80dd 	bgt.w	8006a4a <_dtoa_r+0x5da>
 8006890:	eeb4 7b46 	vcmp.f64	d7, d6
 8006894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006898:	d104      	bne.n	80068a4 <_dtoa_r+0x434>
 800689a:	ee15 3a10 	vmov	r3, s10
 800689e:	07db      	lsls	r3, r3, #31
 80068a0:	f100 80d3 	bmi.w	8006a4a <_dtoa_r+0x5da>
 80068a4:	9901      	ldr	r1, [sp, #4]
 80068a6:	4648      	mov	r0, r9
 80068a8:	f000 fc78 	bl	800719c <_Bfree>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80068b0:	7033      	strb	r3, [r6, #0]
 80068b2:	f108 0301 	add.w	r3, r8, #1
 80068b6:	6013      	str	r3, [r2, #0]
 80068b8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 8304 	beq.w	8006ec8 <_dtoa_r+0xa58>
 80068c0:	601e      	str	r6, [r3, #0]
 80068c2:	e301      	b.n	8006ec8 <_dtoa_r+0xa58>
 80068c4:	2202      	movs	r2, #2
 80068c6:	e75e      	b.n	8006786 <_dtoa_r+0x316>
 80068c8:	07cc      	lsls	r4, r1, #31
 80068ca:	d504      	bpl.n	80068d6 <_dtoa_r+0x466>
 80068cc:	ed90 6b00 	vldr	d6, [r0]
 80068d0:	3201      	adds	r2, #1
 80068d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80068d6:	1049      	asrs	r1, r1, #1
 80068d8:	3008      	adds	r0, #8
 80068da:	e755      	b.n	8006788 <_dtoa_r+0x318>
 80068dc:	d022      	beq.n	8006924 <_dtoa_r+0x4b4>
 80068de:	f1c8 0100 	rsb	r1, r8, #0
 80068e2:	4a68      	ldr	r2, [pc, #416]	@ (8006a84 <_dtoa_r+0x614>)
 80068e4:	f001 000f 	and.w	r0, r1, #15
 80068e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80068ec:	ed92 7b00 	vldr	d7, [r2]
 80068f0:	ee28 7b07 	vmul.f64	d7, d8, d7
 80068f4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80068f8:	4863      	ldr	r0, [pc, #396]	@ (8006a88 <_dtoa_r+0x618>)
 80068fa:	1109      	asrs	r1, r1, #4
 80068fc:	2400      	movs	r4, #0
 80068fe:	2202      	movs	r2, #2
 8006900:	b929      	cbnz	r1, 800690e <_dtoa_r+0x49e>
 8006902:	2c00      	cmp	r4, #0
 8006904:	f43f af49 	beq.w	800679a <_dtoa_r+0x32a>
 8006908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800690c:	e745      	b.n	800679a <_dtoa_r+0x32a>
 800690e:	07ce      	lsls	r6, r1, #31
 8006910:	d505      	bpl.n	800691e <_dtoa_r+0x4ae>
 8006912:	ed90 6b00 	vldr	d6, [r0]
 8006916:	3201      	adds	r2, #1
 8006918:	2401      	movs	r4, #1
 800691a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800691e:	1049      	asrs	r1, r1, #1
 8006920:	3008      	adds	r0, #8
 8006922:	e7ed      	b.n	8006900 <_dtoa_r+0x490>
 8006924:	2202      	movs	r2, #2
 8006926:	e738      	b.n	800679a <_dtoa_r+0x32a>
 8006928:	f8cd 8010 	str.w	r8, [sp, #16]
 800692c:	4654      	mov	r4, sl
 800692e:	e754      	b.n	80067da <_dtoa_r+0x36a>
 8006930:	4a54      	ldr	r2, [pc, #336]	@ (8006a84 <_dtoa_r+0x614>)
 8006932:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8006936:	ed12 4b02 	vldr	d4, [r2, #-8]
 800693a:	9a08      	ldr	r2, [sp, #32]
 800693c:	ec41 0b17 	vmov	d7, r0, r1
 8006940:	443c      	add	r4, r7
 8006942:	b34a      	cbz	r2, 8006998 <_dtoa_r+0x528>
 8006944:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006948:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800694c:	463e      	mov	r6, r7
 800694e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8006952:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8006956:	ee35 7b47 	vsub.f64	d7, d5, d7
 800695a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800695e:	ee14 2a90 	vmov	r2, s9
 8006962:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006966:	3230      	adds	r2, #48	@ 0x30
 8006968:	ee36 6b45 	vsub.f64	d6, d6, d5
 800696c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006974:	f806 2b01 	strb.w	r2, [r6], #1
 8006978:	d438      	bmi.n	80069ec <_dtoa_r+0x57c>
 800697a:	ee32 5b46 	vsub.f64	d5, d2, d6
 800697e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8006982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006986:	d462      	bmi.n	8006a4e <_dtoa_r+0x5de>
 8006988:	42a6      	cmp	r6, r4
 800698a:	f43f af4d 	beq.w	8006828 <_dtoa_r+0x3b8>
 800698e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8006992:	ee26 6b03 	vmul.f64	d6, d6, d3
 8006996:	e7e0      	b.n	800695a <_dtoa_r+0x4ea>
 8006998:	4621      	mov	r1, r4
 800699a:	463e      	mov	r6, r7
 800699c:	ee27 7b04 	vmul.f64	d7, d7, d4
 80069a0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80069a4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80069a8:	ee14 2a90 	vmov	r2, s9
 80069ac:	3230      	adds	r2, #48	@ 0x30
 80069ae:	f806 2b01 	strb.w	r2, [r6], #1
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80069b8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80069bc:	d119      	bne.n	80069f2 <_dtoa_r+0x582>
 80069be:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 80069c2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80069c6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80069ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069ce:	dc3e      	bgt.n	8006a4e <_dtoa_r+0x5de>
 80069d0:	ee35 5b47 	vsub.f64	d5, d5, d7
 80069d4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80069d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069dc:	f57f af24 	bpl.w	8006828 <_dtoa_r+0x3b8>
 80069e0:	460e      	mov	r6, r1
 80069e2:	3901      	subs	r1, #1
 80069e4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80069e8:	2b30      	cmp	r3, #48	@ 0x30
 80069ea:	d0f9      	beq.n	80069e0 <_dtoa_r+0x570>
 80069ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80069f0:	e758      	b.n	80068a4 <_dtoa_r+0x434>
 80069f2:	ee26 6b03 	vmul.f64	d6, d6, d3
 80069f6:	e7d5      	b.n	80069a4 <_dtoa_r+0x534>
 80069f8:	d10b      	bne.n	8006a12 <_dtoa_r+0x5a2>
 80069fa:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80069fe:	ee26 6b07 	vmul.f64	d6, d6, d7
 8006a02:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006a06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a0e:	f2c0 8161 	blt.w	8006cd4 <_dtoa_r+0x864>
 8006a12:	2400      	movs	r4, #0
 8006a14:	4625      	mov	r5, r4
 8006a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a18:	43db      	mvns	r3, r3
 8006a1a:	9304      	str	r3, [sp, #16]
 8006a1c:	463e      	mov	r6, r7
 8006a1e:	f04f 0800 	mov.w	r8, #0
 8006a22:	4621      	mov	r1, r4
 8006a24:	4648      	mov	r0, r9
 8006a26:	f000 fbb9 	bl	800719c <_Bfree>
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	d0de      	beq.n	80069ec <_dtoa_r+0x57c>
 8006a2e:	f1b8 0f00 	cmp.w	r8, #0
 8006a32:	d005      	beq.n	8006a40 <_dtoa_r+0x5d0>
 8006a34:	45a8      	cmp	r8, r5
 8006a36:	d003      	beq.n	8006a40 <_dtoa_r+0x5d0>
 8006a38:	4641      	mov	r1, r8
 8006a3a:	4648      	mov	r0, r9
 8006a3c:	f000 fbae 	bl	800719c <_Bfree>
 8006a40:	4629      	mov	r1, r5
 8006a42:	4648      	mov	r0, r9
 8006a44:	f000 fbaa 	bl	800719c <_Bfree>
 8006a48:	e7d0      	b.n	80069ec <_dtoa_r+0x57c>
 8006a4a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006a4e:	4633      	mov	r3, r6
 8006a50:	461e      	mov	r6, r3
 8006a52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a56:	2a39      	cmp	r2, #57	@ 0x39
 8006a58:	d106      	bne.n	8006a68 <_dtoa_r+0x5f8>
 8006a5a:	429f      	cmp	r7, r3
 8006a5c:	d1f8      	bne.n	8006a50 <_dtoa_r+0x5e0>
 8006a5e:	9a04      	ldr	r2, [sp, #16]
 8006a60:	3201      	adds	r2, #1
 8006a62:	9204      	str	r2, [sp, #16]
 8006a64:	2230      	movs	r2, #48	@ 0x30
 8006a66:	703a      	strb	r2, [r7, #0]
 8006a68:	781a      	ldrb	r2, [r3, #0]
 8006a6a:	3201      	adds	r2, #1
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	e7bd      	b.n	80069ec <_dtoa_r+0x57c>
 8006a70:	ee27 7b04 	vmul.f64	d7, d7, d4
 8006a74:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7c:	f47f aeef 	bne.w	800685e <_dtoa_r+0x3ee>
 8006a80:	e710      	b.n	80068a4 <_dtoa_r+0x434>
 8006a82:	bf00      	nop
 8006a84:	0800a038 	.word	0x0800a038
 8006a88:	0800a010 	.word	0x0800a010
 8006a8c:	9908      	ldr	r1, [sp, #32]
 8006a8e:	2900      	cmp	r1, #0
 8006a90:	f000 80e3 	beq.w	8006c5a <_dtoa_r+0x7ea>
 8006a94:	9907      	ldr	r1, [sp, #28]
 8006a96:	2901      	cmp	r1, #1
 8006a98:	f300 80c8 	bgt.w	8006c2c <_dtoa_r+0x7bc>
 8006a9c:	2d00      	cmp	r5, #0
 8006a9e:	f000 80c1 	beq.w	8006c24 <_dtoa_r+0x7b4>
 8006aa2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006aa6:	9e05      	ldr	r6, [sp, #20]
 8006aa8:	461c      	mov	r4, r3
 8006aaa:	9304      	str	r3, [sp, #16]
 8006aac:	9b05      	ldr	r3, [sp, #20]
 8006aae:	4413      	add	r3, r2
 8006ab0:	9305      	str	r3, [sp, #20]
 8006ab2:	9b06      	ldr	r3, [sp, #24]
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4413      	add	r3, r2
 8006ab8:	4648      	mov	r0, r9
 8006aba:	9306      	str	r3, [sp, #24]
 8006abc:	f000 fc6c 	bl	8007398 <__i2b>
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b166      	cbz	r6, 8006ae0 <_dtoa_r+0x670>
 8006ac6:	9a06      	ldr	r2, [sp, #24]
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	dd09      	ble.n	8006ae0 <_dtoa_r+0x670>
 8006acc:	42b2      	cmp	r2, r6
 8006ace:	9905      	ldr	r1, [sp, #20]
 8006ad0:	bfa8      	it	ge
 8006ad2:	4632      	movge	r2, r6
 8006ad4:	1a89      	subs	r1, r1, r2
 8006ad6:	9105      	str	r1, [sp, #20]
 8006ad8:	9906      	ldr	r1, [sp, #24]
 8006ada:	1ab6      	subs	r6, r6, r2
 8006adc:	1a8a      	subs	r2, r1, r2
 8006ade:	9206      	str	r2, [sp, #24]
 8006ae0:	b1fb      	cbz	r3, 8006b22 <_dtoa_r+0x6b2>
 8006ae2:	9a08      	ldr	r2, [sp, #32]
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	f000 80bc 	beq.w	8006c62 <_dtoa_r+0x7f2>
 8006aea:	b19c      	cbz	r4, 8006b14 <_dtoa_r+0x6a4>
 8006aec:	4629      	mov	r1, r5
 8006aee:	4622      	mov	r2, r4
 8006af0:	4648      	mov	r0, r9
 8006af2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006af4:	f000 fd10 	bl	8007518 <__pow5mult>
 8006af8:	9a01      	ldr	r2, [sp, #4]
 8006afa:	4601      	mov	r1, r0
 8006afc:	4605      	mov	r5, r0
 8006afe:	4648      	mov	r0, r9
 8006b00:	f000 fc60 	bl	80073c4 <__multiply>
 8006b04:	9901      	ldr	r1, [sp, #4]
 8006b06:	9004      	str	r0, [sp, #16]
 8006b08:	4648      	mov	r0, r9
 8006b0a:	f000 fb47 	bl	800719c <_Bfree>
 8006b0e:	9a04      	ldr	r2, [sp, #16]
 8006b10:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b12:	9201      	str	r2, [sp, #4]
 8006b14:	1b1a      	subs	r2, r3, r4
 8006b16:	d004      	beq.n	8006b22 <_dtoa_r+0x6b2>
 8006b18:	9901      	ldr	r1, [sp, #4]
 8006b1a:	4648      	mov	r0, r9
 8006b1c:	f000 fcfc 	bl	8007518 <__pow5mult>
 8006b20:	9001      	str	r0, [sp, #4]
 8006b22:	2101      	movs	r1, #1
 8006b24:	4648      	mov	r0, r9
 8006b26:	f000 fc37 	bl	8007398 <__i2b>
 8006b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b2c:	4604      	mov	r4, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	f000 81d0 	beq.w	8006ed4 <_dtoa_r+0xa64>
 8006b34:	461a      	mov	r2, r3
 8006b36:	4601      	mov	r1, r0
 8006b38:	4648      	mov	r0, r9
 8006b3a:	f000 fced 	bl	8007518 <__pow5mult>
 8006b3e:	9b07      	ldr	r3, [sp, #28]
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	4604      	mov	r4, r0
 8006b44:	f300 8095 	bgt.w	8006c72 <_dtoa_r+0x802>
 8006b48:	9b02      	ldr	r3, [sp, #8]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f040 808b 	bne.w	8006c66 <_dtoa_r+0x7f6>
 8006b50:	9b03      	ldr	r3, [sp, #12]
 8006b52:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	f040 8087 	bne.w	8006c6a <_dtoa_r+0x7fa>
 8006b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8006b60:	0d12      	lsrs	r2, r2, #20
 8006b62:	0512      	lsls	r2, r2, #20
 8006b64:	2a00      	cmp	r2, #0
 8006b66:	f000 8082 	beq.w	8006c6e <_dtoa_r+0x7fe>
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	3301      	adds	r3, #1
 8006b6e:	9305      	str	r3, [sp, #20]
 8006b70:	9b06      	ldr	r3, [sp, #24]
 8006b72:	3301      	adds	r3, #1
 8006b74:	9306      	str	r3, [sp, #24]
 8006b76:	2301      	movs	r3, #1
 8006b78:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b7a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	f000 81af 	beq.w	8006ee0 <_dtoa_r+0xa70>
 8006b82:	6922      	ldr	r2, [r4, #16]
 8006b84:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8006b88:	6910      	ldr	r0, [r2, #16]
 8006b8a:	f000 fbb9 	bl	8007300 <__hi0bits>
 8006b8e:	f1c0 0020 	rsb	r0, r0, #32
 8006b92:	9b06      	ldr	r3, [sp, #24]
 8006b94:	4418      	add	r0, r3
 8006b96:	f010 001f 	ands.w	r0, r0, #31
 8006b9a:	d076      	beq.n	8006c8a <_dtoa_r+0x81a>
 8006b9c:	f1c0 0220 	rsb	r2, r0, #32
 8006ba0:	2a04      	cmp	r2, #4
 8006ba2:	dd69      	ble.n	8006c78 <_dtoa_r+0x808>
 8006ba4:	9b05      	ldr	r3, [sp, #20]
 8006ba6:	f1c0 001c 	rsb	r0, r0, #28
 8006baa:	4403      	add	r3, r0
 8006bac:	9305      	str	r3, [sp, #20]
 8006bae:	9b06      	ldr	r3, [sp, #24]
 8006bb0:	4406      	add	r6, r0
 8006bb2:	4403      	add	r3, r0
 8006bb4:	9306      	str	r3, [sp, #24]
 8006bb6:	9b05      	ldr	r3, [sp, #20]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	dd05      	ble.n	8006bc8 <_dtoa_r+0x758>
 8006bbc:	9901      	ldr	r1, [sp, #4]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4648      	mov	r0, r9
 8006bc2:	f000 fd03 	bl	80075cc <__lshift>
 8006bc6:	9001      	str	r0, [sp, #4]
 8006bc8:	9b06      	ldr	r3, [sp, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	dd05      	ble.n	8006bda <_dtoa_r+0x76a>
 8006bce:	4621      	mov	r1, r4
 8006bd0:	461a      	mov	r2, r3
 8006bd2:	4648      	mov	r0, r9
 8006bd4:	f000 fcfa 	bl	80075cc <__lshift>
 8006bd8:	4604      	mov	r4, r0
 8006bda:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d056      	beq.n	8006c8e <_dtoa_r+0x81e>
 8006be0:	9801      	ldr	r0, [sp, #4]
 8006be2:	4621      	mov	r1, r4
 8006be4:	f000 fd5e 	bl	80076a4 <__mcmp>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	da50      	bge.n	8006c8e <_dtoa_r+0x81e>
 8006bec:	f108 33ff 	add.w	r3, r8, #4294967295
 8006bf0:	9304      	str	r3, [sp, #16]
 8006bf2:	9901      	ldr	r1, [sp, #4]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	220a      	movs	r2, #10
 8006bf8:	4648      	mov	r0, r9
 8006bfa:	f000 faf1 	bl	80071e0 <__multadd>
 8006bfe:	9b08      	ldr	r3, [sp, #32]
 8006c00:	9001      	str	r0, [sp, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	f000 816e 	beq.w	8006ee4 <_dtoa_r+0xa74>
 8006c08:	4629      	mov	r1, r5
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	220a      	movs	r2, #10
 8006c0e:	4648      	mov	r0, r9
 8006c10:	f000 fae6 	bl	80071e0 <__multadd>
 8006c14:	f1bb 0f00 	cmp.w	fp, #0
 8006c18:	4605      	mov	r5, r0
 8006c1a:	dc64      	bgt.n	8006ce6 <_dtoa_r+0x876>
 8006c1c:	9b07      	ldr	r3, [sp, #28]
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	dc3e      	bgt.n	8006ca0 <_dtoa_r+0x830>
 8006c22:	e060      	b.n	8006ce6 <_dtoa_r+0x876>
 8006c24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006c26:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c2a:	e73c      	b.n	8006aa6 <_dtoa_r+0x636>
 8006c2c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8006c30:	42a3      	cmp	r3, r4
 8006c32:	bfbf      	itttt	lt
 8006c34:	1ae2      	sublt	r2, r4, r3
 8006c36:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006c38:	189b      	addlt	r3, r3, r2
 8006c3a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8006c3c:	bfae      	itee	ge
 8006c3e:	1b1c      	subge	r4, r3, r4
 8006c40:	4623      	movlt	r3, r4
 8006c42:	2400      	movlt	r4, #0
 8006c44:	f1ba 0f00 	cmp.w	sl, #0
 8006c48:	bfb5      	itete	lt
 8006c4a:	9a05      	ldrlt	r2, [sp, #20]
 8006c4c:	9e05      	ldrge	r6, [sp, #20]
 8006c4e:	eba2 060a 	sublt.w	r6, r2, sl
 8006c52:	4652      	movge	r2, sl
 8006c54:	bfb8      	it	lt
 8006c56:	2200      	movlt	r2, #0
 8006c58:	e727      	b.n	8006aaa <_dtoa_r+0x63a>
 8006c5a:	9e05      	ldr	r6, [sp, #20]
 8006c5c:	9d08      	ldr	r5, [sp, #32]
 8006c5e:	461c      	mov	r4, r3
 8006c60:	e730      	b.n	8006ac4 <_dtoa_r+0x654>
 8006c62:	461a      	mov	r2, r3
 8006c64:	e758      	b.n	8006b18 <_dtoa_r+0x6a8>
 8006c66:	2300      	movs	r3, #0
 8006c68:	e786      	b.n	8006b78 <_dtoa_r+0x708>
 8006c6a:	9b02      	ldr	r3, [sp, #8]
 8006c6c:	e784      	b.n	8006b78 <_dtoa_r+0x708>
 8006c6e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006c70:	e783      	b.n	8006b7a <_dtoa_r+0x70a>
 8006c72:	2300      	movs	r3, #0
 8006c74:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006c76:	e784      	b.n	8006b82 <_dtoa_r+0x712>
 8006c78:	d09d      	beq.n	8006bb6 <_dtoa_r+0x746>
 8006c7a:	9b05      	ldr	r3, [sp, #20]
 8006c7c:	321c      	adds	r2, #28
 8006c7e:	4413      	add	r3, r2
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	9b06      	ldr	r3, [sp, #24]
 8006c84:	4416      	add	r6, r2
 8006c86:	4413      	add	r3, r2
 8006c88:	e794      	b.n	8006bb4 <_dtoa_r+0x744>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	e7f5      	b.n	8006c7a <_dtoa_r+0x80a>
 8006c8e:	f1ba 0f00 	cmp.w	sl, #0
 8006c92:	f8cd 8010 	str.w	r8, [sp, #16]
 8006c96:	46d3      	mov	fp, sl
 8006c98:	dc21      	bgt.n	8006cde <_dtoa_r+0x86e>
 8006c9a:	9b07      	ldr	r3, [sp, #28]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	dd1e      	ble.n	8006cde <_dtoa_r+0x86e>
 8006ca0:	f1bb 0f00 	cmp.w	fp, #0
 8006ca4:	f47f aeb7 	bne.w	8006a16 <_dtoa_r+0x5a6>
 8006ca8:	4621      	mov	r1, r4
 8006caa:	465b      	mov	r3, fp
 8006cac:	2205      	movs	r2, #5
 8006cae:	4648      	mov	r0, r9
 8006cb0:	f000 fa96 	bl	80071e0 <__multadd>
 8006cb4:	4601      	mov	r1, r0
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	9801      	ldr	r0, [sp, #4]
 8006cba:	f000 fcf3 	bl	80076a4 <__mcmp>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	f77f aea9 	ble.w	8006a16 <_dtoa_r+0x5a6>
 8006cc4:	463e      	mov	r6, r7
 8006cc6:	2331      	movs	r3, #49	@ 0x31
 8006cc8:	f806 3b01 	strb.w	r3, [r6], #1
 8006ccc:	9b04      	ldr	r3, [sp, #16]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	e6a4      	b.n	8006a1e <_dtoa_r+0x5ae>
 8006cd4:	f8cd 8010 	str.w	r8, [sp, #16]
 8006cd8:	4654      	mov	r4, sl
 8006cda:	4625      	mov	r5, r4
 8006cdc:	e7f2      	b.n	8006cc4 <_dtoa_r+0x854>
 8006cde:	9b08      	ldr	r3, [sp, #32]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8103 	beq.w	8006eec <_dtoa_r+0xa7c>
 8006ce6:	2e00      	cmp	r6, #0
 8006ce8:	dd05      	ble.n	8006cf6 <_dtoa_r+0x886>
 8006cea:	4629      	mov	r1, r5
 8006cec:	4632      	mov	r2, r6
 8006cee:	4648      	mov	r0, r9
 8006cf0:	f000 fc6c 	bl	80075cc <__lshift>
 8006cf4:	4605      	mov	r5, r0
 8006cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d058      	beq.n	8006dae <_dtoa_r+0x93e>
 8006cfc:	6869      	ldr	r1, [r5, #4]
 8006cfe:	4648      	mov	r0, r9
 8006d00:	f000 fa0c 	bl	800711c <_Balloc>
 8006d04:	4606      	mov	r6, r0
 8006d06:	b928      	cbnz	r0, 8006d14 <_dtoa_r+0x8a4>
 8006d08:	4b82      	ldr	r3, [pc, #520]	@ (8006f14 <_dtoa_r+0xaa4>)
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006d10:	f7ff bbc7 	b.w	80064a2 <_dtoa_r+0x32>
 8006d14:	692a      	ldr	r2, [r5, #16]
 8006d16:	3202      	adds	r2, #2
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	f105 010c 	add.w	r1, r5, #12
 8006d1e:	300c      	adds	r0, #12
 8006d20:	f7ff fb07 	bl	8006332 <memcpy>
 8006d24:	2201      	movs	r2, #1
 8006d26:	4631      	mov	r1, r6
 8006d28:	4648      	mov	r0, r9
 8006d2a:	f000 fc4f 	bl	80075cc <__lshift>
 8006d2e:	1c7b      	adds	r3, r7, #1
 8006d30:	9305      	str	r3, [sp, #20]
 8006d32:	eb07 030b 	add.w	r3, r7, fp
 8006d36:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d38:	9b02      	ldr	r3, [sp, #8]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	46a8      	mov	r8, r5
 8006d40:	9308      	str	r3, [sp, #32]
 8006d42:	4605      	mov	r5, r0
 8006d44:	9b05      	ldr	r3, [sp, #20]
 8006d46:	9801      	ldr	r0, [sp, #4]
 8006d48:	4621      	mov	r1, r4
 8006d4a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006d4e:	f7ff fb05 	bl	800635c <quorem>
 8006d52:	4641      	mov	r1, r8
 8006d54:	9002      	str	r0, [sp, #8]
 8006d56:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006d5a:	9801      	ldr	r0, [sp, #4]
 8006d5c:	f000 fca2 	bl	80076a4 <__mcmp>
 8006d60:	462a      	mov	r2, r5
 8006d62:	9006      	str	r0, [sp, #24]
 8006d64:	4621      	mov	r1, r4
 8006d66:	4648      	mov	r0, r9
 8006d68:	f000 fcb8 	bl	80076dc <__mdiff>
 8006d6c:	68c2      	ldr	r2, [r0, #12]
 8006d6e:	4606      	mov	r6, r0
 8006d70:	b9fa      	cbnz	r2, 8006db2 <_dtoa_r+0x942>
 8006d72:	4601      	mov	r1, r0
 8006d74:	9801      	ldr	r0, [sp, #4]
 8006d76:	f000 fc95 	bl	80076a4 <__mcmp>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	4631      	mov	r1, r6
 8006d7e:	4648      	mov	r0, r9
 8006d80:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d82:	f000 fa0b 	bl	800719c <_Bfree>
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d8a:	9e05      	ldr	r6, [sp, #20]
 8006d8c:	ea43 0102 	orr.w	r1, r3, r2
 8006d90:	9b08      	ldr	r3, [sp, #32]
 8006d92:	4319      	orrs	r1, r3
 8006d94:	d10f      	bne.n	8006db6 <_dtoa_r+0x946>
 8006d96:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006d9a:	d028      	beq.n	8006dee <_dtoa_r+0x97e>
 8006d9c:	9b06      	ldr	r3, [sp, #24]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	dd02      	ble.n	8006da8 <_dtoa_r+0x938>
 8006da2:	9b02      	ldr	r3, [sp, #8]
 8006da4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8006da8:	f88b a000 	strb.w	sl, [fp]
 8006dac:	e639      	b.n	8006a22 <_dtoa_r+0x5b2>
 8006dae:	4628      	mov	r0, r5
 8006db0:	e7bd      	b.n	8006d2e <_dtoa_r+0x8be>
 8006db2:	2201      	movs	r2, #1
 8006db4:	e7e2      	b.n	8006d7c <_dtoa_r+0x90c>
 8006db6:	9b06      	ldr	r3, [sp, #24]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	db04      	blt.n	8006dc6 <_dtoa_r+0x956>
 8006dbc:	9907      	ldr	r1, [sp, #28]
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	9908      	ldr	r1, [sp, #32]
 8006dc2:	430b      	orrs	r3, r1
 8006dc4:	d120      	bne.n	8006e08 <_dtoa_r+0x998>
 8006dc6:	2a00      	cmp	r2, #0
 8006dc8:	ddee      	ble.n	8006da8 <_dtoa_r+0x938>
 8006dca:	9901      	ldr	r1, [sp, #4]
 8006dcc:	2201      	movs	r2, #1
 8006dce:	4648      	mov	r0, r9
 8006dd0:	f000 fbfc 	bl	80075cc <__lshift>
 8006dd4:	4621      	mov	r1, r4
 8006dd6:	9001      	str	r0, [sp, #4]
 8006dd8:	f000 fc64 	bl	80076a4 <__mcmp>
 8006ddc:	2800      	cmp	r0, #0
 8006dde:	dc03      	bgt.n	8006de8 <_dtoa_r+0x978>
 8006de0:	d1e2      	bne.n	8006da8 <_dtoa_r+0x938>
 8006de2:	f01a 0f01 	tst.w	sl, #1
 8006de6:	d0df      	beq.n	8006da8 <_dtoa_r+0x938>
 8006de8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006dec:	d1d9      	bne.n	8006da2 <_dtoa_r+0x932>
 8006dee:	2339      	movs	r3, #57	@ 0x39
 8006df0:	f88b 3000 	strb.w	r3, [fp]
 8006df4:	4633      	mov	r3, r6
 8006df6:	461e      	mov	r6, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006dfe:	2a39      	cmp	r2, #57	@ 0x39
 8006e00:	d053      	beq.n	8006eaa <_dtoa_r+0xa3a>
 8006e02:	3201      	adds	r2, #1
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	e60c      	b.n	8006a22 <_dtoa_r+0x5b2>
 8006e08:	2a00      	cmp	r2, #0
 8006e0a:	dd07      	ble.n	8006e1c <_dtoa_r+0x9ac>
 8006e0c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006e10:	d0ed      	beq.n	8006dee <_dtoa_r+0x97e>
 8006e12:	f10a 0301 	add.w	r3, sl, #1
 8006e16:	f88b 3000 	strb.w	r3, [fp]
 8006e1a:	e602      	b.n	8006a22 <_dtoa_r+0x5b2>
 8006e1c:	9b05      	ldr	r3, [sp, #20]
 8006e1e:	9a05      	ldr	r2, [sp, #20]
 8006e20:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d029      	beq.n	8006e7e <_dtoa_r+0xa0e>
 8006e2a:	9901      	ldr	r1, [sp, #4]
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	220a      	movs	r2, #10
 8006e30:	4648      	mov	r0, r9
 8006e32:	f000 f9d5 	bl	80071e0 <__multadd>
 8006e36:	45a8      	cmp	r8, r5
 8006e38:	9001      	str	r0, [sp, #4]
 8006e3a:	f04f 0300 	mov.w	r3, #0
 8006e3e:	f04f 020a 	mov.w	r2, #10
 8006e42:	4641      	mov	r1, r8
 8006e44:	4648      	mov	r0, r9
 8006e46:	d107      	bne.n	8006e58 <_dtoa_r+0x9e8>
 8006e48:	f000 f9ca 	bl	80071e0 <__multadd>
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	4605      	mov	r5, r0
 8006e50:	9b05      	ldr	r3, [sp, #20]
 8006e52:	3301      	adds	r3, #1
 8006e54:	9305      	str	r3, [sp, #20]
 8006e56:	e775      	b.n	8006d44 <_dtoa_r+0x8d4>
 8006e58:	f000 f9c2 	bl	80071e0 <__multadd>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4680      	mov	r8, r0
 8006e60:	2300      	movs	r3, #0
 8006e62:	220a      	movs	r2, #10
 8006e64:	4648      	mov	r0, r9
 8006e66:	f000 f9bb 	bl	80071e0 <__multadd>
 8006e6a:	4605      	mov	r5, r0
 8006e6c:	e7f0      	b.n	8006e50 <_dtoa_r+0x9e0>
 8006e6e:	f1bb 0f00 	cmp.w	fp, #0
 8006e72:	bfcc      	ite	gt
 8006e74:	465e      	movgt	r6, fp
 8006e76:	2601      	movle	r6, #1
 8006e78:	443e      	add	r6, r7
 8006e7a:	f04f 0800 	mov.w	r8, #0
 8006e7e:	9901      	ldr	r1, [sp, #4]
 8006e80:	2201      	movs	r2, #1
 8006e82:	4648      	mov	r0, r9
 8006e84:	f000 fba2 	bl	80075cc <__lshift>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	9001      	str	r0, [sp, #4]
 8006e8c:	f000 fc0a 	bl	80076a4 <__mcmp>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	dcaf      	bgt.n	8006df4 <_dtoa_r+0x984>
 8006e94:	d102      	bne.n	8006e9c <_dtoa_r+0xa2c>
 8006e96:	f01a 0f01 	tst.w	sl, #1
 8006e9a:	d1ab      	bne.n	8006df4 <_dtoa_r+0x984>
 8006e9c:	4633      	mov	r3, r6
 8006e9e:	461e      	mov	r6, r3
 8006ea0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ea4:	2a30      	cmp	r2, #48	@ 0x30
 8006ea6:	d0fa      	beq.n	8006e9e <_dtoa_r+0xa2e>
 8006ea8:	e5bb      	b.n	8006a22 <_dtoa_r+0x5b2>
 8006eaa:	429f      	cmp	r7, r3
 8006eac:	d1a3      	bne.n	8006df6 <_dtoa_r+0x986>
 8006eae:	9b04      	ldr	r3, [sp, #16]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	9304      	str	r3, [sp, #16]
 8006eb4:	2331      	movs	r3, #49	@ 0x31
 8006eb6:	703b      	strb	r3, [r7, #0]
 8006eb8:	e5b3      	b.n	8006a22 <_dtoa_r+0x5b2>
 8006eba:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006ebc:	4f16      	ldr	r7, [pc, #88]	@ (8006f18 <_dtoa_r+0xaa8>)
 8006ebe:	b11b      	cbz	r3, 8006ec8 <_dtoa_r+0xa58>
 8006ec0:	f107 0308 	add.w	r3, r7, #8
 8006ec4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	4638      	mov	r0, r7
 8006eca:	b011      	add	sp, #68	@ 0x44
 8006ecc:	ecbd 8b02 	vpop	{d8}
 8006ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ed4:	9b07      	ldr	r3, [sp, #28]
 8006ed6:	2b01      	cmp	r3, #1
 8006ed8:	f77f ae36 	ble.w	8006b48 <_dtoa_r+0x6d8>
 8006edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ede:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	e656      	b.n	8006b92 <_dtoa_r+0x722>
 8006ee4:	f1bb 0f00 	cmp.w	fp, #0
 8006ee8:	f77f aed7 	ble.w	8006c9a <_dtoa_r+0x82a>
 8006eec:	463e      	mov	r6, r7
 8006eee:	9801      	ldr	r0, [sp, #4]
 8006ef0:	4621      	mov	r1, r4
 8006ef2:	f7ff fa33 	bl	800635c <quorem>
 8006ef6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006efa:	f806 ab01 	strb.w	sl, [r6], #1
 8006efe:	1bf2      	subs	r2, r6, r7
 8006f00:	4593      	cmp	fp, r2
 8006f02:	ddb4      	ble.n	8006e6e <_dtoa_r+0x9fe>
 8006f04:	9901      	ldr	r1, [sp, #4]
 8006f06:	2300      	movs	r3, #0
 8006f08:	220a      	movs	r2, #10
 8006f0a:	4648      	mov	r0, r9
 8006f0c:	f000 f968 	bl	80071e0 <__multadd>
 8006f10:	9001      	str	r0, [sp, #4]
 8006f12:	e7ec      	b.n	8006eee <_dtoa_r+0xa7e>
 8006f14:	08009f99 	.word	0x08009f99
 8006f18:	08009f1d 	.word	0x08009f1d

08006f1c <_free_r>:
 8006f1c:	b538      	push	{r3, r4, r5, lr}
 8006f1e:	4605      	mov	r5, r0
 8006f20:	2900      	cmp	r1, #0
 8006f22:	d041      	beq.n	8006fa8 <_free_r+0x8c>
 8006f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f28:	1f0c      	subs	r4, r1, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	bfb8      	it	lt
 8006f2e:	18e4      	addlt	r4, r4, r3
 8006f30:	f000 f8e8 	bl	8007104 <__malloc_lock>
 8006f34:	4a1d      	ldr	r2, [pc, #116]	@ (8006fac <_free_r+0x90>)
 8006f36:	6813      	ldr	r3, [r2, #0]
 8006f38:	b933      	cbnz	r3, 8006f48 <_free_r+0x2c>
 8006f3a:	6063      	str	r3, [r4, #4]
 8006f3c:	6014      	str	r4, [r2, #0]
 8006f3e:	4628      	mov	r0, r5
 8006f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f44:	f000 b8e4 	b.w	8007110 <__malloc_unlock>
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	d908      	bls.n	8006f5e <_free_r+0x42>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	1821      	adds	r1, r4, r0
 8006f50:	428b      	cmp	r3, r1
 8006f52:	bf01      	itttt	eq
 8006f54:	6819      	ldreq	r1, [r3, #0]
 8006f56:	685b      	ldreq	r3, [r3, #4]
 8006f58:	1809      	addeq	r1, r1, r0
 8006f5a:	6021      	streq	r1, [r4, #0]
 8006f5c:	e7ed      	b.n	8006f3a <_free_r+0x1e>
 8006f5e:	461a      	mov	r2, r3
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	b10b      	cbz	r3, 8006f68 <_free_r+0x4c>
 8006f64:	42a3      	cmp	r3, r4
 8006f66:	d9fa      	bls.n	8006f5e <_free_r+0x42>
 8006f68:	6811      	ldr	r1, [r2, #0]
 8006f6a:	1850      	adds	r0, r2, r1
 8006f6c:	42a0      	cmp	r0, r4
 8006f6e:	d10b      	bne.n	8006f88 <_free_r+0x6c>
 8006f70:	6820      	ldr	r0, [r4, #0]
 8006f72:	4401      	add	r1, r0
 8006f74:	1850      	adds	r0, r2, r1
 8006f76:	4283      	cmp	r3, r0
 8006f78:	6011      	str	r1, [r2, #0]
 8006f7a:	d1e0      	bne.n	8006f3e <_free_r+0x22>
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	6053      	str	r3, [r2, #4]
 8006f82:	4408      	add	r0, r1
 8006f84:	6010      	str	r0, [r2, #0]
 8006f86:	e7da      	b.n	8006f3e <_free_r+0x22>
 8006f88:	d902      	bls.n	8006f90 <_free_r+0x74>
 8006f8a:	230c      	movs	r3, #12
 8006f8c:	602b      	str	r3, [r5, #0]
 8006f8e:	e7d6      	b.n	8006f3e <_free_r+0x22>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	1821      	adds	r1, r4, r0
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf04      	itt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	6063      	str	r3, [r4, #4]
 8006f9e:	bf04      	itt	eq
 8006fa0:	1809      	addeq	r1, r1, r0
 8006fa2:	6021      	streq	r1, [r4, #0]
 8006fa4:	6054      	str	r4, [r2, #4]
 8006fa6:	e7ca      	b.n	8006f3e <_free_r+0x22>
 8006fa8:	bd38      	pop	{r3, r4, r5, pc}
 8006faa:	bf00      	nop
 8006fac:	24000874 	.word	0x24000874

08006fb0 <malloc>:
 8006fb0:	4b02      	ldr	r3, [pc, #8]	@ (8006fbc <malloc+0xc>)
 8006fb2:	4601      	mov	r1, r0
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	f000 b825 	b.w	8007004 <_malloc_r>
 8006fba:	bf00      	nop
 8006fbc:	2400001c 	.word	0x2400001c

08006fc0 <sbrk_aligned>:
 8006fc0:	b570      	push	{r4, r5, r6, lr}
 8006fc2:	4e0f      	ldr	r6, [pc, #60]	@ (8007000 <sbrk_aligned+0x40>)
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	6831      	ldr	r1, [r6, #0]
 8006fc8:	4605      	mov	r5, r0
 8006fca:	b911      	cbnz	r1, 8006fd2 <sbrk_aligned+0x12>
 8006fcc:	f001 fdb8 	bl	8008b40 <_sbrk_r>
 8006fd0:	6030      	str	r0, [r6, #0]
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	f001 fdb3 	bl	8008b40 <_sbrk_r>
 8006fda:	1c43      	adds	r3, r0, #1
 8006fdc:	d103      	bne.n	8006fe6 <sbrk_aligned+0x26>
 8006fde:	f04f 34ff 	mov.w	r4, #4294967295
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	bd70      	pop	{r4, r5, r6, pc}
 8006fe6:	1cc4      	adds	r4, r0, #3
 8006fe8:	f024 0403 	bic.w	r4, r4, #3
 8006fec:	42a0      	cmp	r0, r4
 8006fee:	d0f8      	beq.n	8006fe2 <sbrk_aligned+0x22>
 8006ff0:	1a21      	subs	r1, r4, r0
 8006ff2:	4628      	mov	r0, r5
 8006ff4:	f001 fda4 	bl	8008b40 <_sbrk_r>
 8006ff8:	3001      	adds	r0, #1
 8006ffa:	d1f2      	bne.n	8006fe2 <sbrk_aligned+0x22>
 8006ffc:	e7ef      	b.n	8006fde <sbrk_aligned+0x1e>
 8006ffe:	bf00      	nop
 8007000:	24000870 	.word	0x24000870

08007004 <_malloc_r>:
 8007004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007008:	1ccd      	adds	r5, r1, #3
 800700a:	f025 0503 	bic.w	r5, r5, #3
 800700e:	3508      	adds	r5, #8
 8007010:	2d0c      	cmp	r5, #12
 8007012:	bf38      	it	cc
 8007014:	250c      	movcc	r5, #12
 8007016:	2d00      	cmp	r5, #0
 8007018:	4606      	mov	r6, r0
 800701a:	db01      	blt.n	8007020 <_malloc_r+0x1c>
 800701c:	42a9      	cmp	r1, r5
 800701e:	d904      	bls.n	800702a <_malloc_r+0x26>
 8007020:	230c      	movs	r3, #12
 8007022:	6033      	str	r3, [r6, #0]
 8007024:	2000      	movs	r0, #0
 8007026:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800702a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007100 <_malloc_r+0xfc>
 800702e:	f000 f869 	bl	8007104 <__malloc_lock>
 8007032:	f8d8 3000 	ldr.w	r3, [r8]
 8007036:	461c      	mov	r4, r3
 8007038:	bb44      	cbnz	r4, 800708c <_malloc_r+0x88>
 800703a:	4629      	mov	r1, r5
 800703c:	4630      	mov	r0, r6
 800703e:	f7ff ffbf 	bl	8006fc0 <sbrk_aligned>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	4604      	mov	r4, r0
 8007046:	d158      	bne.n	80070fa <_malloc_r+0xf6>
 8007048:	f8d8 4000 	ldr.w	r4, [r8]
 800704c:	4627      	mov	r7, r4
 800704e:	2f00      	cmp	r7, #0
 8007050:	d143      	bne.n	80070da <_malloc_r+0xd6>
 8007052:	2c00      	cmp	r4, #0
 8007054:	d04b      	beq.n	80070ee <_malloc_r+0xea>
 8007056:	6823      	ldr	r3, [r4, #0]
 8007058:	4639      	mov	r1, r7
 800705a:	4630      	mov	r0, r6
 800705c:	eb04 0903 	add.w	r9, r4, r3
 8007060:	f001 fd6e 	bl	8008b40 <_sbrk_r>
 8007064:	4581      	cmp	r9, r0
 8007066:	d142      	bne.n	80070ee <_malloc_r+0xea>
 8007068:	6821      	ldr	r1, [r4, #0]
 800706a:	1a6d      	subs	r5, r5, r1
 800706c:	4629      	mov	r1, r5
 800706e:	4630      	mov	r0, r6
 8007070:	f7ff ffa6 	bl	8006fc0 <sbrk_aligned>
 8007074:	3001      	adds	r0, #1
 8007076:	d03a      	beq.n	80070ee <_malloc_r+0xea>
 8007078:	6823      	ldr	r3, [r4, #0]
 800707a:	442b      	add	r3, r5
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	f8d8 3000 	ldr.w	r3, [r8]
 8007082:	685a      	ldr	r2, [r3, #4]
 8007084:	bb62      	cbnz	r2, 80070e0 <_malloc_r+0xdc>
 8007086:	f8c8 7000 	str.w	r7, [r8]
 800708a:	e00f      	b.n	80070ac <_malloc_r+0xa8>
 800708c:	6822      	ldr	r2, [r4, #0]
 800708e:	1b52      	subs	r2, r2, r5
 8007090:	d420      	bmi.n	80070d4 <_malloc_r+0xd0>
 8007092:	2a0b      	cmp	r2, #11
 8007094:	d917      	bls.n	80070c6 <_malloc_r+0xc2>
 8007096:	1961      	adds	r1, r4, r5
 8007098:	42a3      	cmp	r3, r4
 800709a:	6025      	str	r5, [r4, #0]
 800709c:	bf18      	it	ne
 800709e:	6059      	strne	r1, [r3, #4]
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	bf08      	it	eq
 80070a4:	f8c8 1000 	streq.w	r1, [r8]
 80070a8:	5162      	str	r2, [r4, r5]
 80070aa:	604b      	str	r3, [r1, #4]
 80070ac:	4630      	mov	r0, r6
 80070ae:	f000 f82f 	bl	8007110 <__malloc_unlock>
 80070b2:	f104 000b 	add.w	r0, r4, #11
 80070b6:	1d23      	adds	r3, r4, #4
 80070b8:	f020 0007 	bic.w	r0, r0, #7
 80070bc:	1ac2      	subs	r2, r0, r3
 80070be:	bf1c      	itt	ne
 80070c0:	1a1b      	subne	r3, r3, r0
 80070c2:	50a3      	strne	r3, [r4, r2]
 80070c4:	e7af      	b.n	8007026 <_malloc_r+0x22>
 80070c6:	6862      	ldr	r2, [r4, #4]
 80070c8:	42a3      	cmp	r3, r4
 80070ca:	bf0c      	ite	eq
 80070cc:	f8c8 2000 	streq.w	r2, [r8]
 80070d0:	605a      	strne	r2, [r3, #4]
 80070d2:	e7eb      	b.n	80070ac <_malloc_r+0xa8>
 80070d4:	4623      	mov	r3, r4
 80070d6:	6864      	ldr	r4, [r4, #4]
 80070d8:	e7ae      	b.n	8007038 <_malloc_r+0x34>
 80070da:	463c      	mov	r4, r7
 80070dc:	687f      	ldr	r7, [r7, #4]
 80070de:	e7b6      	b.n	800704e <_malloc_r+0x4a>
 80070e0:	461a      	mov	r2, r3
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d1fb      	bne.n	80070e0 <_malloc_r+0xdc>
 80070e8:	2300      	movs	r3, #0
 80070ea:	6053      	str	r3, [r2, #4]
 80070ec:	e7de      	b.n	80070ac <_malloc_r+0xa8>
 80070ee:	230c      	movs	r3, #12
 80070f0:	6033      	str	r3, [r6, #0]
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 f80c 	bl	8007110 <__malloc_unlock>
 80070f8:	e794      	b.n	8007024 <_malloc_r+0x20>
 80070fa:	6005      	str	r5, [r0, #0]
 80070fc:	e7d6      	b.n	80070ac <_malloc_r+0xa8>
 80070fe:	bf00      	nop
 8007100:	24000874 	.word	0x24000874

08007104 <__malloc_lock>:
 8007104:	4801      	ldr	r0, [pc, #4]	@ (800710c <__malloc_lock+0x8>)
 8007106:	f7ff b912 	b.w	800632e <__retarget_lock_acquire_recursive>
 800710a:	bf00      	nop
 800710c:	2400086c 	.word	0x2400086c

08007110 <__malloc_unlock>:
 8007110:	4801      	ldr	r0, [pc, #4]	@ (8007118 <__malloc_unlock+0x8>)
 8007112:	f7ff b90d 	b.w	8006330 <__retarget_lock_release_recursive>
 8007116:	bf00      	nop
 8007118:	2400086c 	.word	0x2400086c

0800711c <_Balloc>:
 800711c:	b570      	push	{r4, r5, r6, lr}
 800711e:	69c6      	ldr	r6, [r0, #28]
 8007120:	4604      	mov	r4, r0
 8007122:	460d      	mov	r5, r1
 8007124:	b976      	cbnz	r6, 8007144 <_Balloc+0x28>
 8007126:	2010      	movs	r0, #16
 8007128:	f7ff ff42 	bl	8006fb0 <malloc>
 800712c:	4602      	mov	r2, r0
 800712e:	61e0      	str	r0, [r4, #28]
 8007130:	b920      	cbnz	r0, 800713c <_Balloc+0x20>
 8007132:	4b18      	ldr	r3, [pc, #96]	@ (8007194 <_Balloc+0x78>)
 8007134:	4818      	ldr	r0, [pc, #96]	@ (8007198 <_Balloc+0x7c>)
 8007136:	216b      	movs	r1, #107	@ 0x6b
 8007138:	f001 fd1a 	bl	8008b70 <__assert_func>
 800713c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007140:	6006      	str	r6, [r0, #0]
 8007142:	60c6      	str	r6, [r0, #12]
 8007144:	69e6      	ldr	r6, [r4, #28]
 8007146:	68f3      	ldr	r3, [r6, #12]
 8007148:	b183      	cbz	r3, 800716c <_Balloc+0x50>
 800714a:	69e3      	ldr	r3, [r4, #28]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007152:	b9b8      	cbnz	r0, 8007184 <_Balloc+0x68>
 8007154:	2101      	movs	r1, #1
 8007156:	fa01 f605 	lsl.w	r6, r1, r5
 800715a:	1d72      	adds	r2, r6, #5
 800715c:	0092      	lsls	r2, r2, #2
 800715e:	4620      	mov	r0, r4
 8007160:	f001 fd24 	bl	8008bac <_calloc_r>
 8007164:	b160      	cbz	r0, 8007180 <_Balloc+0x64>
 8007166:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800716a:	e00e      	b.n	800718a <_Balloc+0x6e>
 800716c:	2221      	movs	r2, #33	@ 0x21
 800716e:	2104      	movs	r1, #4
 8007170:	4620      	mov	r0, r4
 8007172:	f001 fd1b 	bl	8008bac <_calloc_r>
 8007176:	69e3      	ldr	r3, [r4, #28]
 8007178:	60f0      	str	r0, [r6, #12]
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <_Balloc+0x2e>
 8007180:	2000      	movs	r0, #0
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	6802      	ldr	r2, [r0, #0]
 8007186:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800718a:	2300      	movs	r3, #0
 800718c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007190:	e7f7      	b.n	8007182 <_Balloc+0x66>
 8007192:	bf00      	nop
 8007194:	08009f2a 	.word	0x08009f2a
 8007198:	08009faa 	.word	0x08009faa

0800719c <_Bfree>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	69c6      	ldr	r6, [r0, #28]
 80071a0:	4605      	mov	r5, r0
 80071a2:	460c      	mov	r4, r1
 80071a4:	b976      	cbnz	r6, 80071c4 <_Bfree+0x28>
 80071a6:	2010      	movs	r0, #16
 80071a8:	f7ff ff02 	bl	8006fb0 <malloc>
 80071ac:	4602      	mov	r2, r0
 80071ae:	61e8      	str	r0, [r5, #28]
 80071b0:	b920      	cbnz	r0, 80071bc <_Bfree+0x20>
 80071b2:	4b09      	ldr	r3, [pc, #36]	@ (80071d8 <_Bfree+0x3c>)
 80071b4:	4809      	ldr	r0, [pc, #36]	@ (80071dc <_Bfree+0x40>)
 80071b6:	218f      	movs	r1, #143	@ 0x8f
 80071b8:	f001 fcda 	bl	8008b70 <__assert_func>
 80071bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c0:	6006      	str	r6, [r0, #0]
 80071c2:	60c6      	str	r6, [r0, #12]
 80071c4:	b13c      	cbz	r4, 80071d6 <_Bfree+0x3a>
 80071c6:	69eb      	ldr	r3, [r5, #28]
 80071c8:	6862      	ldr	r2, [r4, #4]
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d0:	6021      	str	r1, [r4, #0]
 80071d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	08009f2a 	.word	0x08009f2a
 80071dc:	08009faa 	.word	0x08009faa

080071e0 <__multadd>:
 80071e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e4:	690d      	ldr	r5, [r1, #16]
 80071e6:	4607      	mov	r7, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	461e      	mov	r6, r3
 80071ec:	f101 0c14 	add.w	ip, r1, #20
 80071f0:	2000      	movs	r0, #0
 80071f2:	f8dc 3000 	ldr.w	r3, [ip]
 80071f6:	b299      	uxth	r1, r3
 80071f8:	fb02 6101 	mla	r1, r2, r1, r6
 80071fc:	0c1e      	lsrs	r6, r3, #16
 80071fe:	0c0b      	lsrs	r3, r1, #16
 8007200:	fb02 3306 	mla	r3, r2, r6, r3
 8007204:	b289      	uxth	r1, r1
 8007206:	3001      	adds	r0, #1
 8007208:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800720c:	4285      	cmp	r5, r0
 800720e:	f84c 1b04 	str.w	r1, [ip], #4
 8007212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007216:	dcec      	bgt.n	80071f2 <__multadd+0x12>
 8007218:	b30e      	cbz	r6, 800725e <__multadd+0x7e>
 800721a:	68a3      	ldr	r3, [r4, #8]
 800721c:	42ab      	cmp	r3, r5
 800721e:	dc19      	bgt.n	8007254 <__multadd+0x74>
 8007220:	6861      	ldr	r1, [r4, #4]
 8007222:	4638      	mov	r0, r7
 8007224:	3101      	adds	r1, #1
 8007226:	f7ff ff79 	bl	800711c <_Balloc>
 800722a:	4680      	mov	r8, r0
 800722c:	b928      	cbnz	r0, 800723a <__multadd+0x5a>
 800722e:	4602      	mov	r2, r0
 8007230:	4b0c      	ldr	r3, [pc, #48]	@ (8007264 <__multadd+0x84>)
 8007232:	480d      	ldr	r0, [pc, #52]	@ (8007268 <__multadd+0x88>)
 8007234:	21ba      	movs	r1, #186	@ 0xba
 8007236:	f001 fc9b 	bl	8008b70 <__assert_func>
 800723a:	6922      	ldr	r2, [r4, #16]
 800723c:	3202      	adds	r2, #2
 800723e:	f104 010c 	add.w	r1, r4, #12
 8007242:	0092      	lsls	r2, r2, #2
 8007244:	300c      	adds	r0, #12
 8007246:	f7ff f874 	bl	8006332 <memcpy>
 800724a:	4621      	mov	r1, r4
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff ffa5 	bl	800719c <_Bfree>
 8007252:	4644      	mov	r4, r8
 8007254:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007258:	3501      	adds	r5, #1
 800725a:	615e      	str	r6, [r3, #20]
 800725c:	6125      	str	r5, [r4, #16]
 800725e:	4620      	mov	r0, r4
 8007260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007264:	08009f99 	.word	0x08009f99
 8007268:	08009faa 	.word	0x08009faa

0800726c <__s2b>:
 800726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007270:	460c      	mov	r4, r1
 8007272:	4615      	mov	r5, r2
 8007274:	461f      	mov	r7, r3
 8007276:	2209      	movs	r2, #9
 8007278:	3308      	adds	r3, #8
 800727a:	4606      	mov	r6, r0
 800727c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007280:	2100      	movs	r1, #0
 8007282:	2201      	movs	r2, #1
 8007284:	429a      	cmp	r2, r3
 8007286:	db09      	blt.n	800729c <__s2b+0x30>
 8007288:	4630      	mov	r0, r6
 800728a:	f7ff ff47 	bl	800711c <_Balloc>
 800728e:	b940      	cbnz	r0, 80072a2 <__s2b+0x36>
 8007290:	4602      	mov	r2, r0
 8007292:	4b19      	ldr	r3, [pc, #100]	@ (80072f8 <__s2b+0x8c>)
 8007294:	4819      	ldr	r0, [pc, #100]	@ (80072fc <__s2b+0x90>)
 8007296:	21d3      	movs	r1, #211	@ 0xd3
 8007298:	f001 fc6a 	bl	8008b70 <__assert_func>
 800729c:	0052      	lsls	r2, r2, #1
 800729e:	3101      	adds	r1, #1
 80072a0:	e7f0      	b.n	8007284 <__s2b+0x18>
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	6143      	str	r3, [r0, #20]
 80072a6:	2d09      	cmp	r5, #9
 80072a8:	f04f 0301 	mov.w	r3, #1
 80072ac:	6103      	str	r3, [r0, #16]
 80072ae:	dd16      	ble.n	80072de <__s2b+0x72>
 80072b0:	f104 0909 	add.w	r9, r4, #9
 80072b4:	46c8      	mov	r8, r9
 80072b6:	442c      	add	r4, r5
 80072b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80072bc:	4601      	mov	r1, r0
 80072be:	3b30      	subs	r3, #48	@ 0x30
 80072c0:	220a      	movs	r2, #10
 80072c2:	4630      	mov	r0, r6
 80072c4:	f7ff ff8c 	bl	80071e0 <__multadd>
 80072c8:	45a0      	cmp	r8, r4
 80072ca:	d1f5      	bne.n	80072b8 <__s2b+0x4c>
 80072cc:	f1a5 0408 	sub.w	r4, r5, #8
 80072d0:	444c      	add	r4, r9
 80072d2:	1b2d      	subs	r5, r5, r4
 80072d4:	1963      	adds	r3, r4, r5
 80072d6:	42bb      	cmp	r3, r7
 80072d8:	db04      	blt.n	80072e4 <__s2b+0x78>
 80072da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072de:	340a      	adds	r4, #10
 80072e0:	2509      	movs	r5, #9
 80072e2:	e7f6      	b.n	80072d2 <__s2b+0x66>
 80072e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80072e8:	4601      	mov	r1, r0
 80072ea:	3b30      	subs	r3, #48	@ 0x30
 80072ec:	220a      	movs	r2, #10
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ff76 	bl	80071e0 <__multadd>
 80072f4:	e7ee      	b.n	80072d4 <__s2b+0x68>
 80072f6:	bf00      	nop
 80072f8:	08009f99 	.word	0x08009f99
 80072fc:	08009faa 	.word	0x08009faa

08007300 <__hi0bits>:
 8007300:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007304:	4603      	mov	r3, r0
 8007306:	bf36      	itet	cc
 8007308:	0403      	lslcc	r3, r0, #16
 800730a:	2000      	movcs	r0, #0
 800730c:	2010      	movcc	r0, #16
 800730e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007312:	bf3c      	itt	cc
 8007314:	021b      	lslcc	r3, r3, #8
 8007316:	3008      	addcc	r0, #8
 8007318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800731c:	bf3c      	itt	cc
 800731e:	011b      	lslcc	r3, r3, #4
 8007320:	3004      	addcc	r0, #4
 8007322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007326:	bf3c      	itt	cc
 8007328:	009b      	lslcc	r3, r3, #2
 800732a:	3002      	addcc	r0, #2
 800732c:	2b00      	cmp	r3, #0
 800732e:	db05      	blt.n	800733c <__hi0bits+0x3c>
 8007330:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007334:	f100 0001 	add.w	r0, r0, #1
 8007338:	bf08      	it	eq
 800733a:	2020      	moveq	r0, #32
 800733c:	4770      	bx	lr

0800733e <__lo0bits>:
 800733e:	6803      	ldr	r3, [r0, #0]
 8007340:	4602      	mov	r2, r0
 8007342:	f013 0007 	ands.w	r0, r3, #7
 8007346:	d00b      	beq.n	8007360 <__lo0bits+0x22>
 8007348:	07d9      	lsls	r1, r3, #31
 800734a:	d421      	bmi.n	8007390 <__lo0bits+0x52>
 800734c:	0798      	lsls	r0, r3, #30
 800734e:	bf49      	itett	mi
 8007350:	085b      	lsrmi	r3, r3, #1
 8007352:	089b      	lsrpl	r3, r3, #2
 8007354:	2001      	movmi	r0, #1
 8007356:	6013      	strmi	r3, [r2, #0]
 8007358:	bf5c      	itt	pl
 800735a:	6013      	strpl	r3, [r2, #0]
 800735c:	2002      	movpl	r0, #2
 800735e:	4770      	bx	lr
 8007360:	b299      	uxth	r1, r3
 8007362:	b909      	cbnz	r1, 8007368 <__lo0bits+0x2a>
 8007364:	0c1b      	lsrs	r3, r3, #16
 8007366:	2010      	movs	r0, #16
 8007368:	b2d9      	uxtb	r1, r3
 800736a:	b909      	cbnz	r1, 8007370 <__lo0bits+0x32>
 800736c:	3008      	adds	r0, #8
 800736e:	0a1b      	lsrs	r3, r3, #8
 8007370:	0719      	lsls	r1, r3, #28
 8007372:	bf04      	itt	eq
 8007374:	091b      	lsreq	r3, r3, #4
 8007376:	3004      	addeq	r0, #4
 8007378:	0799      	lsls	r1, r3, #30
 800737a:	bf04      	itt	eq
 800737c:	089b      	lsreq	r3, r3, #2
 800737e:	3002      	addeq	r0, #2
 8007380:	07d9      	lsls	r1, r3, #31
 8007382:	d403      	bmi.n	800738c <__lo0bits+0x4e>
 8007384:	085b      	lsrs	r3, r3, #1
 8007386:	f100 0001 	add.w	r0, r0, #1
 800738a:	d003      	beq.n	8007394 <__lo0bits+0x56>
 800738c:	6013      	str	r3, [r2, #0]
 800738e:	4770      	bx	lr
 8007390:	2000      	movs	r0, #0
 8007392:	4770      	bx	lr
 8007394:	2020      	movs	r0, #32
 8007396:	4770      	bx	lr

08007398 <__i2b>:
 8007398:	b510      	push	{r4, lr}
 800739a:	460c      	mov	r4, r1
 800739c:	2101      	movs	r1, #1
 800739e:	f7ff febd 	bl	800711c <_Balloc>
 80073a2:	4602      	mov	r2, r0
 80073a4:	b928      	cbnz	r0, 80073b2 <__i2b+0x1a>
 80073a6:	4b05      	ldr	r3, [pc, #20]	@ (80073bc <__i2b+0x24>)
 80073a8:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <__i2b+0x28>)
 80073aa:	f240 1145 	movw	r1, #325	@ 0x145
 80073ae:	f001 fbdf 	bl	8008b70 <__assert_func>
 80073b2:	2301      	movs	r3, #1
 80073b4:	6144      	str	r4, [r0, #20]
 80073b6:	6103      	str	r3, [r0, #16]
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	08009f99 	.word	0x08009f99
 80073c0:	08009faa 	.word	0x08009faa

080073c4 <__multiply>:
 80073c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4614      	mov	r4, r2
 80073ca:	690a      	ldr	r2, [r1, #16]
 80073cc:	6923      	ldr	r3, [r4, #16]
 80073ce:	429a      	cmp	r2, r3
 80073d0:	bfa8      	it	ge
 80073d2:	4623      	movge	r3, r4
 80073d4:	460f      	mov	r7, r1
 80073d6:	bfa4      	itt	ge
 80073d8:	460c      	movge	r4, r1
 80073da:	461f      	movge	r7, r3
 80073dc:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80073e0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80073e4:	68a3      	ldr	r3, [r4, #8]
 80073e6:	6861      	ldr	r1, [r4, #4]
 80073e8:	eb0a 0609 	add.w	r6, sl, r9
 80073ec:	42b3      	cmp	r3, r6
 80073ee:	b085      	sub	sp, #20
 80073f0:	bfb8      	it	lt
 80073f2:	3101      	addlt	r1, #1
 80073f4:	f7ff fe92 	bl	800711c <_Balloc>
 80073f8:	b930      	cbnz	r0, 8007408 <__multiply+0x44>
 80073fa:	4602      	mov	r2, r0
 80073fc:	4b44      	ldr	r3, [pc, #272]	@ (8007510 <__multiply+0x14c>)
 80073fe:	4845      	ldr	r0, [pc, #276]	@ (8007514 <__multiply+0x150>)
 8007400:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007404:	f001 fbb4 	bl	8008b70 <__assert_func>
 8007408:	f100 0514 	add.w	r5, r0, #20
 800740c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007410:	462b      	mov	r3, r5
 8007412:	2200      	movs	r2, #0
 8007414:	4543      	cmp	r3, r8
 8007416:	d321      	bcc.n	800745c <__multiply+0x98>
 8007418:	f107 0114 	add.w	r1, r7, #20
 800741c:	f104 0214 	add.w	r2, r4, #20
 8007420:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007424:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007428:	9302      	str	r3, [sp, #8]
 800742a:	1b13      	subs	r3, r2, r4
 800742c:	3b15      	subs	r3, #21
 800742e:	f023 0303 	bic.w	r3, r3, #3
 8007432:	3304      	adds	r3, #4
 8007434:	f104 0715 	add.w	r7, r4, #21
 8007438:	42ba      	cmp	r2, r7
 800743a:	bf38      	it	cc
 800743c:	2304      	movcc	r3, #4
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	9b02      	ldr	r3, [sp, #8]
 8007442:	9103      	str	r1, [sp, #12]
 8007444:	428b      	cmp	r3, r1
 8007446:	d80c      	bhi.n	8007462 <__multiply+0x9e>
 8007448:	2e00      	cmp	r6, #0
 800744a:	dd03      	ble.n	8007454 <__multiply+0x90>
 800744c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007450:	2b00      	cmp	r3, #0
 8007452:	d05b      	beq.n	800750c <__multiply+0x148>
 8007454:	6106      	str	r6, [r0, #16]
 8007456:	b005      	add	sp, #20
 8007458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800745c:	f843 2b04 	str.w	r2, [r3], #4
 8007460:	e7d8      	b.n	8007414 <__multiply+0x50>
 8007462:	f8b1 a000 	ldrh.w	sl, [r1]
 8007466:	f1ba 0f00 	cmp.w	sl, #0
 800746a:	d024      	beq.n	80074b6 <__multiply+0xf2>
 800746c:	f104 0e14 	add.w	lr, r4, #20
 8007470:	46a9      	mov	r9, r5
 8007472:	f04f 0c00 	mov.w	ip, #0
 8007476:	f85e 7b04 	ldr.w	r7, [lr], #4
 800747a:	f8d9 3000 	ldr.w	r3, [r9]
 800747e:	fa1f fb87 	uxth.w	fp, r7
 8007482:	b29b      	uxth	r3, r3
 8007484:	fb0a 330b 	mla	r3, sl, fp, r3
 8007488:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800748c:	f8d9 7000 	ldr.w	r7, [r9]
 8007490:	4463      	add	r3, ip
 8007492:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007496:	fb0a c70b 	mla	r7, sl, fp, ip
 800749a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800749e:	b29b      	uxth	r3, r3
 80074a0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074a4:	4572      	cmp	r2, lr
 80074a6:	f849 3b04 	str.w	r3, [r9], #4
 80074aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80074ae:	d8e2      	bhi.n	8007476 <__multiply+0xb2>
 80074b0:	9b01      	ldr	r3, [sp, #4]
 80074b2:	f845 c003 	str.w	ip, [r5, r3]
 80074b6:	9b03      	ldr	r3, [sp, #12]
 80074b8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80074bc:	3104      	adds	r1, #4
 80074be:	f1b9 0f00 	cmp.w	r9, #0
 80074c2:	d021      	beq.n	8007508 <__multiply+0x144>
 80074c4:	682b      	ldr	r3, [r5, #0]
 80074c6:	f104 0c14 	add.w	ip, r4, #20
 80074ca:	46ae      	mov	lr, r5
 80074cc:	f04f 0a00 	mov.w	sl, #0
 80074d0:	f8bc b000 	ldrh.w	fp, [ip]
 80074d4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80074d8:	fb09 770b 	mla	r7, r9, fp, r7
 80074dc:	4457      	add	r7, sl
 80074de:	b29b      	uxth	r3, r3
 80074e0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80074e4:	f84e 3b04 	str.w	r3, [lr], #4
 80074e8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074ec:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074f0:	f8be 3000 	ldrh.w	r3, [lr]
 80074f4:	fb09 330a 	mla	r3, r9, sl, r3
 80074f8:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80074fc:	4562      	cmp	r2, ip
 80074fe:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007502:	d8e5      	bhi.n	80074d0 <__multiply+0x10c>
 8007504:	9f01      	ldr	r7, [sp, #4]
 8007506:	51eb      	str	r3, [r5, r7]
 8007508:	3504      	adds	r5, #4
 800750a:	e799      	b.n	8007440 <__multiply+0x7c>
 800750c:	3e01      	subs	r6, #1
 800750e:	e79b      	b.n	8007448 <__multiply+0x84>
 8007510:	08009f99 	.word	0x08009f99
 8007514:	08009faa 	.word	0x08009faa

08007518 <__pow5mult>:
 8007518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800751c:	4615      	mov	r5, r2
 800751e:	f012 0203 	ands.w	r2, r2, #3
 8007522:	4607      	mov	r7, r0
 8007524:	460e      	mov	r6, r1
 8007526:	d007      	beq.n	8007538 <__pow5mult+0x20>
 8007528:	4c25      	ldr	r4, [pc, #148]	@ (80075c0 <__pow5mult+0xa8>)
 800752a:	3a01      	subs	r2, #1
 800752c:	2300      	movs	r3, #0
 800752e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007532:	f7ff fe55 	bl	80071e0 <__multadd>
 8007536:	4606      	mov	r6, r0
 8007538:	10ad      	asrs	r5, r5, #2
 800753a:	d03d      	beq.n	80075b8 <__pow5mult+0xa0>
 800753c:	69fc      	ldr	r4, [r7, #28]
 800753e:	b97c      	cbnz	r4, 8007560 <__pow5mult+0x48>
 8007540:	2010      	movs	r0, #16
 8007542:	f7ff fd35 	bl	8006fb0 <malloc>
 8007546:	4602      	mov	r2, r0
 8007548:	61f8      	str	r0, [r7, #28]
 800754a:	b928      	cbnz	r0, 8007558 <__pow5mult+0x40>
 800754c:	4b1d      	ldr	r3, [pc, #116]	@ (80075c4 <__pow5mult+0xac>)
 800754e:	481e      	ldr	r0, [pc, #120]	@ (80075c8 <__pow5mult+0xb0>)
 8007550:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007554:	f001 fb0c 	bl	8008b70 <__assert_func>
 8007558:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800755c:	6004      	str	r4, [r0, #0]
 800755e:	60c4      	str	r4, [r0, #12]
 8007560:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007564:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007568:	b94c      	cbnz	r4, 800757e <__pow5mult+0x66>
 800756a:	f240 2171 	movw	r1, #625	@ 0x271
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff ff12 	bl	8007398 <__i2b>
 8007574:	2300      	movs	r3, #0
 8007576:	f8c8 0008 	str.w	r0, [r8, #8]
 800757a:	4604      	mov	r4, r0
 800757c:	6003      	str	r3, [r0, #0]
 800757e:	f04f 0900 	mov.w	r9, #0
 8007582:	07eb      	lsls	r3, r5, #31
 8007584:	d50a      	bpl.n	800759c <__pow5mult+0x84>
 8007586:	4631      	mov	r1, r6
 8007588:	4622      	mov	r2, r4
 800758a:	4638      	mov	r0, r7
 800758c:	f7ff ff1a 	bl	80073c4 <__multiply>
 8007590:	4631      	mov	r1, r6
 8007592:	4680      	mov	r8, r0
 8007594:	4638      	mov	r0, r7
 8007596:	f7ff fe01 	bl	800719c <_Bfree>
 800759a:	4646      	mov	r6, r8
 800759c:	106d      	asrs	r5, r5, #1
 800759e:	d00b      	beq.n	80075b8 <__pow5mult+0xa0>
 80075a0:	6820      	ldr	r0, [r4, #0]
 80075a2:	b938      	cbnz	r0, 80075b4 <__pow5mult+0x9c>
 80075a4:	4622      	mov	r2, r4
 80075a6:	4621      	mov	r1, r4
 80075a8:	4638      	mov	r0, r7
 80075aa:	f7ff ff0b 	bl	80073c4 <__multiply>
 80075ae:	6020      	str	r0, [r4, #0]
 80075b0:	f8c0 9000 	str.w	r9, [r0]
 80075b4:	4604      	mov	r4, r0
 80075b6:	e7e4      	b.n	8007582 <__pow5mult+0x6a>
 80075b8:	4630      	mov	r0, r6
 80075ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075be:	bf00      	nop
 80075c0:	0800a004 	.word	0x0800a004
 80075c4:	08009f2a 	.word	0x08009f2a
 80075c8:	08009faa 	.word	0x08009faa

080075cc <__lshift>:
 80075cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	6849      	ldr	r1, [r1, #4]
 80075d4:	6923      	ldr	r3, [r4, #16]
 80075d6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075da:	68a3      	ldr	r3, [r4, #8]
 80075dc:	4607      	mov	r7, r0
 80075de:	4691      	mov	r9, r2
 80075e0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075e4:	f108 0601 	add.w	r6, r8, #1
 80075e8:	42b3      	cmp	r3, r6
 80075ea:	db0b      	blt.n	8007604 <__lshift+0x38>
 80075ec:	4638      	mov	r0, r7
 80075ee:	f7ff fd95 	bl	800711c <_Balloc>
 80075f2:	4605      	mov	r5, r0
 80075f4:	b948      	cbnz	r0, 800760a <__lshift+0x3e>
 80075f6:	4602      	mov	r2, r0
 80075f8:	4b28      	ldr	r3, [pc, #160]	@ (800769c <__lshift+0xd0>)
 80075fa:	4829      	ldr	r0, [pc, #164]	@ (80076a0 <__lshift+0xd4>)
 80075fc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007600:	f001 fab6 	bl	8008b70 <__assert_func>
 8007604:	3101      	adds	r1, #1
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	e7ee      	b.n	80075e8 <__lshift+0x1c>
 800760a:	2300      	movs	r3, #0
 800760c:	f100 0114 	add.w	r1, r0, #20
 8007610:	f100 0210 	add.w	r2, r0, #16
 8007614:	4618      	mov	r0, r3
 8007616:	4553      	cmp	r3, sl
 8007618:	db33      	blt.n	8007682 <__lshift+0xb6>
 800761a:	6920      	ldr	r0, [r4, #16]
 800761c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007620:	f104 0314 	add.w	r3, r4, #20
 8007624:	f019 091f 	ands.w	r9, r9, #31
 8007628:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800762c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007630:	d02b      	beq.n	800768a <__lshift+0xbe>
 8007632:	f1c9 0e20 	rsb	lr, r9, #32
 8007636:	468a      	mov	sl, r1
 8007638:	2200      	movs	r2, #0
 800763a:	6818      	ldr	r0, [r3, #0]
 800763c:	fa00 f009 	lsl.w	r0, r0, r9
 8007640:	4310      	orrs	r0, r2
 8007642:	f84a 0b04 	str.w	r0, [sl], #4
 8007646:	f853 2b04 	ldr.w	r2, [r3], #4
 800764a:	459c      	cmp	ip, r3
 800764c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007650:	d8f3      	bhi.n	800763a <__lshift+0x6e>
 8007652:	ebac 0304 	sub.w	r3, ip, r4
 8007656:	3b15      	subs	r3, #21
 8007658:	f023 0303 	bic.w	r3, r3, #3
 800765c:	3304      	adds	r3, #4
 800765e:	f104 0015 	add.w	r0, r4, #21
 8007662:	4584      	cmp	ip, r0
 8007664:	bf38      	it	cc
 8007666:	2304      	movcc	r3, #4
 8007668:	50ca      	str	r2, [r1, r3]
 800766a:	b10a      	cbz	r2, 8007670 <__lshift+0xa4>
 800766c:	f108 0602 	add.w	r6, r8, #2
 8007670:	3e01      	subs	r6, #1
 8007672:	4638      	mov	r0, r7
 8007674:	612e      	str	r6, [r5, #16]
 8007676:	4621      	mov	r1, r4
 8007678:	f7ff fd90 	bl	800719c <_Bfree>
 800767c:	4628      	mov	r0, r5
 800767e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007682:	f842 0f04 	str.w	r0, [r2, #4]!
 8007686:	3301      	adds	r3, #1
 8007688:	e7c5      	b.n	8007616 <__lshift+0x4a>
 800768a:	3904      	subs	r1, #4
 800768c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007690:	f841 2f04 	str.w	r2, [r1, #4]!
 8007694:	459c      	cmp	ip, r3
 8007696:	d8f9      	bhi.n	800768c <__lshift+0xc0>
 8007698:	e7ea      	b.n	8007670 <__lshift+0xa4>
 800769a:	bf00      	nop
 800769c:	08009f99 	.word	0x08009f99
 80076a0:	08009faa 	.word	0x08009faa

080076a4 <__mcmp>:
 80076a4:	690a      	ldr	r2, [r1, #16]
 80076a6:	4603      	mov	r3, r0
 80076a8:	6900      	ldr	r0, [r0, #16]
 80076aa:	1a80      	subs	r0, r0, r2
 80076ac:	b530      	push	{r4, r5, lr}
 80076ae:	d10e      	bne.n	80076ce <__mcmp+0x2a>
 80076b0:	3314      	adds	r3, #20
 80076b2:	3114      	adds	r1, #20
 80076b4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80076b8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80076bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80076c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80076c4:	4295      	cmp	r5, r2
 80076c6:	d003      	beq.n	80076d0 <__mcmp+0x2c>
 80076c8:	d205      	bcs.n	80076d6 <__mcmp+0x32>
 80076ca:	f04f 30ff 	mov.w	r0, #4294967295
 80076ce:	bd30      	pop	{r4, r5, pc}
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	d3f3      	bcc.n	80076bc <__mcmp+0x18>
 80076d4:	e7fb      	b.n	80076ce <__mcmp+0x2a>
 80076d6:	2001      	movs	r0, #1
 80076d8:	e7f9      	b.n	80076ce <__mcmp+0x2a>
	...

080076dc <__mdiff>:
 80076dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076e0:	4689      	mov	r9, r1
 80076e2:	4606      	mov	r6, r0
 80076e4:	4611      	mov	r1, r2
 80076e6:	4648      	mov	r0, r9
 80076e8:	4614      	mov	r4, r2
 80076ea:	f7ff ffdb 	bl	80076a4 <__mcmp>
 80076ee:	1e05      	subs	r5, r0, #0
 80076f0:	d112      	bne.n	8007718 <__mdiff+0x3c>
 80076f2:	4629      	mov	r1, r5
 80076f4:	4630      	mov	r0, r6
 80076f6:	f7ff fd11 	bl	800711c <_Balloc>
 80076fa:	4602      	mov	r2, r0
 80076fc:	b928      	cbnz	r0, 800770a <__mdiff+0x2e>
 80076fe:	4b3f      	ldr	r3, [pc, #252]	@ (80077fc <__mdiff+0x120>)
 8007700:	f240 2137 	movw	r1, #567	@ 0x237
 8007704:	483e      	ldr	r0, [pc, #248]	@ (8007800 <__mdiff+0x124>)
 8007706:	f001 fa33 	bl	8008b70 <__assert_func>
 800770a:	2301      	movs	r3, #1
 800770c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007710:	4610      	mov	r0, r2
 8007712:	b003      	add	sp, #12
 8007714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007718:	bfbc      	itt	lt
 800771a:	464b      	movlt	r3, r9
 800771c:	46a1      	movlt	r9, r4
 800771e:	4630      	mov	r0, r6
 8007720:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007724:	bfba      	itte	lt
 8007726:	461c      	movlt	r4, r3
 8007728:	2501      	movlt	r5, #1
 800772a:	2500      	movge	r5, #0
 800772c:	f7ff fcf6 	bl	800711c <_Balloc>
 8007730:	4602      	mov	r2, r0
 8007732:	b918      	cbnz	r0, 800773c <__mdiff+0x60>
 8007734:	4b31      	ldr	r3, [pc, #196]	@ (80077fc <__mdiff+0x120>)
 8007736:	f240 2145 	movw	r1, #581	@ 0x245
 800773a:	e7e3      	b.n	8007704 <__mdiff+0x28>
 800773c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007740:	6926      	ldr	r6, [r4, #16]
 8007742:	60c5      	str	r5, [r0, #12]
 8007744:	f109 0310 	add.w	r3, r9, #16
 8007748:	f109 0514 	add.w	r5, r9, #20
 800774c:	f104 0e14 	add.w	lr, r4, #20
 8007750:	f100 0b14 	add.w	fp, r0, #20
 8007754:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007758:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	46d9      	mov	r9, fp
 8007760:	f04f 0c00 	mov.w	ip, #0
 8007764:	9b01      	ldr	r3, [sp, #4]
 8007766:	f85e 0b04 	ldr.w	r0, [lr], #4
 800776a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800776e:	9301      	str	r3, [sp, #4]
 8007770:	fa1f f38a 	uxth.w	r3, sl
 8007774:	4619      	mov	r1, r3
 8007776:	b283      	uxth	r3, r0
 8007778:	1acb      	subs	r3, r1, r3
 800777a:	0c00      	lsrs	r0, r0, #16
 800777c:	4463      	add	r3, ip
 800777e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007782:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007786:	b29b      	uxth	r3, r3
 8007788:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800778c:	4576      	cmp	r6, lr
 800778e:	f849 3b04 	str.w	r3, [r9], #4
 8007792:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007796:	d8e5      	bhi.n	8007764 <__mdiff+0x88>
 8007798:	1b33      	subs	r3, r6, r4
 800779a:	3b15      	subs	r3, #21
 800779c:	f023 0303 	bic.w	r3, r3, #3
 80077a0:	3415      	adds	r4, #21
 80077a2:	3304      	adds	r3, #4
 80077a4:	42a6      	cmp	r6, r4
 80077a6:	bf38      	it	cc
 80077a8:	2304      	movcc	r3, #4
 80077aa:	441d      	add	r5, r3
 80077ac:	445b      	add	r3, fp
 80077ae:	461e      	mov	r6, r3
 80077b0:	462c      	mov	r4, r5
 80077b2:	4544      	cmp	r4, r8
 80077b4:	d30e      	bcc.n	80077d4 <__mdiff+0xf8>
 80077b6:	f108 0103 	add.w	r1, r8, #3
 80077ba:	1b49      	subs	r1, r1, r5
 80077bc:	f021 0103 	bic.w	r1, r1, #3
 80077c0:	3d03      	subs	r5, #3
 80077c2:	45a8      	cmp	r8, r5
 80077c4:	bf38      	it	cc
 80077c6:	2100      	movcc	r1, #0
 80077c8:	440b      	add	r3, r1
 80077ca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077ce:	b191      	cbz	r1, 80077f6 <__mdiff+0x11a>
 80077d0:	6117      	str	r7, [r2, #16]
 80077d2:	e79d      	b.n	8007710 <__mdiff+0x34>
 80077d4:	f854 1b04 	ldr.w	r1, [r4], #4
 80077d8:	46e6      	mov	lr, ip
 80077da:	0c08      	lsrs	r0, r1, #16
 80077dc:	fa1c fc81 	uxtah	ip, ip, r1
 80077e0:	4471      	add	r1, lr
 80077e2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80077e6:	b289      	uxth	r1, r1
 80077e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80077ec:	f846 1b04 	str.w	r1, [r6], #4
 80077f0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80077f4:	e7dd      	b.n	80077b2 <__mdiff+0xd6>
 80077f6:	3f01      	subs	r7, #1
 80077f8:	e7e7      	b.n	80077ca <__mdiff+0xee>
 80077fa:	bf00      	nop
 80077fc:	08009f99 	.word	0x08009f99
 8007800:	08009faa 	.word	0x08009faa

08007804 <__ulp>:
 8007804:	b082      	sub	sp, #8
 8007806:	ed8d 0b00 	vstr	d0, [sp]
 800780a:	9a01      	ldr	r2, [sp, #4]
 800780c:	4b0f      	ldr	r3, [pc, #60]	@ (800784c <__ulp+0x48>)
 800780e:	4013      	ands	r3, r2
 8007810:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007814:	2b00      	cmp	r3, #0
 8007816:	dc08      	bgt.n	800782a <__ulp+0x26>
 8007818:	425b      	negs	r3, r3
 800781a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800781e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007822:	da04      	bge.n	800782e <__ulp+0x2a>
 8007824:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007828:	4113      	asrs	r3, r2
 800782a:	2200      	movs	r2, #0
 800782c:	e008      	b.n	8007840 <__ulp+0x3c>
 800782e:	f1a2 0314 	sub.w	r3, r2, #20
 8007832:	2b1e      	cmp	r3, #30
 8007834:	bfda      	itte	le
 8007836:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800783a:	40da      	lsrle	r2, r3
 800783c:	2201      	movgt	r2, #1
 800783e:	2300      	movs	r3, #0
 8007840:	4619      	mov	r1, r3
 8007842:	4610      	mov	r0, r2
 8007844:	ec41 0b10 	vmov	d0, r0, r1
 8007848:	b002      	add	sp, #8
 800784a:	4770      	bx	lr
 800784c:	7ff00000 	.word	0x7ff00000

08007850 <__b2d>:
 8007850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007854:	6906      	ldr	r6, [r0, #16]
 8007856:	f100 0814 	add.w	r8, r0, #20
 800785a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800785e:	1f37      	subs	r7, r6, #4
 8007860:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007864:	4610      	mov	r0, r2
 8007866:	f7ff fd4b 	bl	8007300 <__hi0bits>
 800786a:	f1c0 0320 	rsb	r3, r0, #32
 800786e:	280a      	cmp	r0, #10
 8007870:	600b      	str	r3, [r1, #0]
 8007872:	491b      	ldr	r1, [pc, #108]	@ (80078e0 <__b2d+0x90>)
 8007874:	dc15      	bgt.n	80078a2 <__b2d+0x52>
 8007876:	f1c0 0c0b 	rsb	ip, r0, #11
 800787a:	fa22 f30c 	lsr.w	r3, r2, ip
 800787e:	45b8      	cmp	r8, r7
 8007880:	ea43 0501 	orr.w	r5, r3, r1
 8007884:	bf34      	ite	cc
 8007886:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800788a:	2300      	movcs	r3, #0
 800788c:	3015      	adds	r0, #21
 800788e:	fa02 f000 	lsl.w	r0, r2, r0
 8007892:	fa23 f30c 	lsr.w	r3, r3, ip
 8007896:	4303      	orrs	r3, r0
 8007898:	461c      	mov	r4, r3
 800789a:	ec45 4b10 	vmov	d0, r4, r5
 800789e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a2:	45b8      	cmp	r8, r7
 80078a4:	bf3a      	itte	cc
 80078a6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80078aa:	f1a6 0708 	subcc.w	r7, r6, #8
 80078ae:	2300      	movcs	r3, #0
 80078b0:	380b      	subs	r0, #11
 80078b2:	d012      	beq.n	80078da <__b2d+0x8a>
 80078b4:	f1c0 0120 	rsb	r1, r0, #32
 80078b8:	fa23 f401 	lsr.w	r4, r3, r1
 80078bc:	4082      	lsls	r2, r0
 80078be:	4322      	orrs	r2, r4
 80078c0:	4547      	cmp	r7, r8
 80078c2:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80078c6:	bf8c      	ite	hi
 80078c8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80078cc:	2200      	movls	r2, #0
 80078ce:	4083      	lsls	r3, r0
 80078d0:	40ca      	lsrs	r2, r1
 80078d2:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80078d6:	4313      	orrs	r3, r2
 80078d8:	e7de      	b.n	8007898 <__b2d+0x48>
 80078da:	ea42 0501 	orr.w	r5, r2, r1
 80078de:	e7db      	b.n	8007898 <__b2d+0x48>
 80078e0:	3ff00000 	.word	0x3ff00000

080078e4 <__d2b>:
 80078e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80078e8:	460f      	mov	r7, r1
 80078ea:	2101      	movs	r1, #1
 80078ec:	ec59 8b10 	vmov	r8, r9, d0
 80078f0:	4616      	mov	r6, r2
 80078f2:	f7ff fc13 	bl	800711c <_Balloc>
 80078f6:	4604      	mov	r4, r0
 80078f8:	b930      	cbnz	r0, 8007908 <__d2b+0x24>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b23      	ldr	r3, [pc, #140]	@ (800798c <__d2b+0xa8>)
 80078fe:	4824      	ldr	r0, [pc, #144]	@ (8007990 <__d2b+0xac>)
 8007900:	f240 310f 	movw	r1, #783	@ 0x30f
 8007904:	f001 f934 	bl	8008b70 <__assert_func>
 8007908:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800790c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007910:	b10d      	cbz	r5, 8007916 <__d2b+0x32>
 8007912:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	f1b8 0300 	subs.w	r3, r8, #0
 800791c:	d023      	beq.n	8007966 <__d2b+0x82>
 800791e:	4668      	mov	r0, sp
 8007920:	9300      	str	r3, [sp, #0]
 8007922:	f7ff fd0c 	bl	800733e <__lo0bits>
 8007926:	e9dd 1200 	ldrd	r1, r2, [sp]
 800792a:	b1d0      	cbz	r0, 8007962 <__d2b+0x7e>
 800792c:	f1c0 0320 	rsb	r3, r0, #32
 8007930:	fa02 f303 	lsl.w	r3, r2, r3
 8007934:	430b      	orrs	r3, r1
 8007936:	40c2      	lsrs	r2, r0
 8007938:	6163      	str	r3, [r4, #20]
 800793a:	9201      	str	r2, [sp, #4]
 800793c:	9b01      	ldr	r3, [sp, #4]
 800793e:	61a3      	str	r3, [r4, #24]
 8007940:	2b00      	cmp	r3, #0
 8007942:	bf0c      	ite	eq
 8007944:	2201      	moveq	r2, #1
 8007946:	2202      	movne	r2, #2
 8007948:	6122      	str	r2, [r4, #16]
 800794a:	b1a5      	cbz	r5, 8007976 <__d2b+0x92>
 800794c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007950:	4405      	add	r5, r0
 8007952:	603d      	str	r5, [r7, #0]
 8007954:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007958:	6030      	str	r0, [r6, #0]
 800795a:	4620      	mov	r0, r4
 800795c:	b003      	add	sp, #12
 800795e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007962:	6161      	str	r1, [r4, #20]
 8007964:	e7ea      	b.n	800793c <__d2b+0x58>
 8007966:	a801      	add	r0, sp, #4
 8007968:	f7ff fce9 	bl	800733e <__lo0bits>
 800796c:	9b01      	ldr	r3, [sp, #4]
 800796e:	6163      	str	r3, [r4, #20]
 8007970:	3020      	adds	r0, #32
 8007972:	2201      	movs	r2, #1
 8007974:	e7e8      	b.n	8007948 <__d2b+0x64>
 8007976:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800797a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800797e:	6038      	str	r0, [r7, #0]
 8007980:	6918      	ldr	r0, [r3, #16]
 8007982:	f7ff fcbd 	bl	8007300 <__hi0bits>
 8007986:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800798a:	e7e5      	b.n	8007958 <__d2b+0x74>
 800798c:	08009f99 	.word	0x08009f99
 8007990:	08009faa 	.word	0x08009faa

08007994 <__ratio>:
 8007994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	4688      	mov	r8, r1
 800799a:	4669      	mov	r1, sp
 800799c:	4681      	mov	r9, r0
 800799e:	f7ff ff57 	bl	8007850 <__b2d>
 80079a2:	a901      	add	r1, sp, #4
 80079a4:	4640      	mov	r0, r8
 80079a6:	ec55 4b10 	vmov	r4, r5, d0
 80079aa:	f7ff ff51 	bl	8007850 <__b2d>
 80079ae:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80079b2:	f8d9 2010 	ldr.w	r2, [r9, #16]
 80079b6:	1ad2      	subs	r2, r2, r3
 80079b8:	e9dd 3100 	ldrd	r3, r1, [sp]
 80079bc:	1a5b      	subs	r3, r3, r1
 80079be:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80079c2:	ec57 6b10 	vmov	r6, r7, d0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	bfd6      	itet	le
 80079ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80079ce:	462a      	movgt	r2, r5
 80079d0:	463a      	movle	r2, r7
 80079d2:	46ab      	mov	fp, r5
 80079d4:	46a2      	mov	sl, r4
 80079d6:	bfce      	itee	gt
 80079d8:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 80079dc:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 80079e0:	ee00 3a90 	vmovle	s1, r3
 80079e4:	ec4b ab17 	vmov	d7, sl, fp
 80079e8:	ee87 0b00 	vdiv.f64	d0, d7, d0
 80079ec:	b003      	add	sp, #12
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080079f2 <__copybits>:
 80079f2:	3901      	subs	r1, #1
 80079f4:	b570      	push	{r4, r5, r6, lr}
 80079f6:	1149      	asrs	r1, r1, #5
 80079f8:	6914      	ldr	r4, [r2, #16]
 80079fa:	3101      	adds	r1, #1
 80079fc:	f102 0314 	add.w	r3, r2, #20
 8007a00:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007a04:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007a08:	1f05      	subs	r5, r0, #4
 8007a0a:	42a3      	cmp	r3, r4
 8007a0c:	d30c      	bcc.n	8007a28 <__copybits+0x36>
 8007a0e:	1aa3      	subs	r3, r4, r2
 8007a10:	3b11      	subs	r3, #17
 8007a12:	f023 0303 	bic.w	r3, r3, #3
 8007a16:	3211      	adds	r2, #17
 8007a18:	42a2      	cmp	r2, r4
 8007a1a:	bf88      	it	hi
 8007a1c:	2300      	movhi	r3, #0
 8007a1e:	4418      	add	r0, r3
 8007a20:	2300      	movs	r3, #0
 8007a22:	4288      	cmp	r0, r1
 8007a24:	d305      	bcc.n	8007a32 <__copybits+0x40>
 8007a26:	bd70      	pop	{r4, r5, r6, pc}
 8007a28:	f853 6b04 	ldr.w	r6, [r3], #4
 8007a2c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007a30:	e7eb      	b.n	8007a0a <__copybits+0x18>
 8007a32:	f840 3b04 	str.w	r3, [r0], #4
 8007a36:	e7f4      	b.n	8007a22 <__copybits+0x30>

08007a38 <__any_on>:
 8007a38:	f100 0214 	add.w	r2, r0, #20
 8007a3c:	6900      	ldr	r0, [r0, #16]
 8007a3e:	114b      	asrs	r3, r1, #5
 8007a40:	4298      	cmp	r0, r3
 8007a42:	b510      	push	{r4, lr}
 8007a44:	db11      	blt.n	8007a6a <__any_on+0x32>
 8007a46:	dd0a      	ble.n	8007a5e <__any_on+0x26>
 8007a48:	f011 011f 	ands.w	r1, r1, #31
 8007a4c:	d007      	beq.n	8007a5e <__any_on+0x26>
 8007a4e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007a52:	fa24 f001 	lsr.w	r0, r4, r1
 8007a56:	fa00 f101 	lsl.w	r1, r0, r1
 8007a5a:	428c      	cmp	r4, r1
 8007a5c:	d10b      	bne.n	8007a76 <__any_on+0x3e>
 8007a5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d803      	bhi.n	8007a6e <__any_on+0x36>
 8007a66:	2000      	movs	r0, #0
 8007a68:	bd10      	pop	{r4, pc}
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	e7f7      	b.n	8007a5e <__any_on+0x26>
 8007a6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007a72:	2900      	cmp	r1, #0
 8007a74:	d0f5      	beq.n	8007a62 <__any_on+0x2a>
 8007a76:	2001      	movs	r0, #1
 8007a78:	e7f6      	b.n	8007a68 <__any_on+0x30>

08007a7a <sulp>:
 8007a7a:	b570      	push	{r4, r5, r6, lr}
 8007a7c:	4604      	mov	r4, r0
 8007a7e:	460d      	mov	r5, r1
 8007a80:	4616      	mov	r6, r2
 8007a82:	ec45 4b10 	vmov	d0, r4, r5
 8007a86:	f7ff febd 	bl	8007804 <__ulp>
 8007a8a:	b17e      	cbz	r6, 8007aac <sulp+0x32>
 8007a8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a90:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	dd09      	ble.n	8007aac <sulp+0x32>
 8007a98:	051b      	lsls	r3, r3, #20
 8007a9a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8007a9e:	2000      	movs	r0, #0
 8007aa0:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8007aa4:	ec41 0b17 	vmov	d7, r0, r1
 8007aa8:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007aac:	bd70      	pop	{r4, r5, r6, pc}
	...

08007ab0 <_strtod_l>:
 8007ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ab4:	ed2d 8b0a 	vpush	{d8-d12}
 8007ab8:	b097      	sub	sp, #92	@ 0x5c
 8007aba:	4688      	mov	r8, r1
 8007abc:	920e      	str	r2, [sp, #56]	@ 0x38
 8007abe:	2200      	movs	r2, #0
 8007ac0:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ac2:	9005      	str	r0, [sp, #20]
 8007ac4:	f04f 0a00 	mov.w	sl, #0
 8007ac8:	f04f 0b00 	mov.w	fp, #0
 8007acc:	460a      	mov	r2, r1
 8007ace:	9211      	str	r2, [sp, #68]	@ 0x44
 8007ad0:	7811      	ldrb	r1, [r2, #0]
 8007ad2:	292b      	cmp	r1, #43	@ 0x2b
 8007ad4:	d04c      	beq.n	8007b70 <_strtod_l+0xc0>
 8007ad6:	d839      	bhi.n	8007b4c <_strtod_l+0x9c>
 8007ad8:	290d      	cmp	r1, #13
 8007ada:	d833      	bhi.n	8007b44 <_strtod_l+0x94>
 8007adc:	2908      	cmp	r1, #8
 8007ade:	d833      	bhi.n	8007b48 <_strtod_l+0x98>
 8007ae0:	2900      	cmp	r1, #0
 8007ae2:	d03c      	beq.n	8007b5e <_strtod_l+0xae>
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	9208      	str	r2, [sp, #32]
 8007ae8:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8007aea:	782a      	ldrb	r2, [r5, #0]
 8007aec:	2a30      	cmp	r2, #48	@ 0x30
 8007aee:	f040 80b5 	bne.w	8007c5c <_strtod_l+0x1ac>
 8007af2:	786a      	ldrb	r2, [r5, #1]
 8007af4:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007af8:	2a58      	cmp	r2, #88	@ 0x58
 8007afa:	d170      	bne.n	8007bde <_strtod_l+0x12e>
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	9b08      	ldr	r3, [sp, #32]
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	ab12      	add	r3, sp, #72	@ 0x48
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4a8b      	ldr	r2, [pc, #556]	@ (8007d34 <_strtod_l+0x284>)
 8007b08:	9805      	ldr	r0, [sp, #20]
 8007b0a:	ab13      	add	r3, sp, #76	@ 0x4c
 8007b0c:	a911      	add	r1, sp, #68	@ 0x44
 8007b0e:	f001 f8c9 	bl	8008ca4 <__gethex>
 8007b12:	f010 060f 	ands.w	r6, r0, #15
 8007b16:	4604      	mov	r4, r0
 8007b18:	d005      	beq.n	8007b26 <_strtod_l+0x76>
 8007b1a:	2e06      	cmp	r6, #6
 8007b1c:	d12a      	bne.n	8007b74 <_strtod_l+0xc4>
 8007b1e:	3501      	adds	r5, #1
 8007b20:	2300      	movs	r3, #0
 8007b22:	9511      	str	r5, [sp, #68]	@ 0x44
 8007b24:	9308      	str	r3, [sp, #32]
 8007b26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	f040 852f 	bne.w	800858c <_strtod_l+0xadc>
 8007b2e:	9b08      	ldr	r3, [sp, #32]
 8007b30:	ec4b ab10 	vmov	d0, sl, fp
 8007b34:	b1cb      	cbz	r3, 8007b6a <_strtod_l+0xba>
 8007b36:	eeb1 0b40 	vneg.f64	d0, d0
 8007b3a:	b017      	add	sp, #92	@ 0x5c
 8007b3c:	ecbd 8b0a 	vpop	{d8-d12}
 8007b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b44:	2920      	cmp	r1, #32
 8007b46:	d1cd      	bne.n	8007ae4 <_strtod_l+0x34>
 8007b48:	3201      	adds	r2, #1
 8007b4a:	e7c0      	b.n	8007ace <_strtod_l+0x1e>
 8007b4c:	292d      	cmp	r1, #45	@ 0x2d
 8007b4e:	d1c9      	bne.n	8007ae4 <_strtod_l+0x34>
 8007b50:	2101      	movs	r1, #1
 8007b52:	9108      	str	r1, [sp, #32]
 8007b54:	1c51      	adds	r1, r2, #1
 8007b56:	9111      	str	r1, [sp, #68]	@ 0x44
 8007b58:	7852      	ldrb	r2, [r2, #1]
 8007b5a:	2a00      	cmp	r2, #0
 8007b5c:	d1c4      	bne.n	8007ae8 <_strtod_l+0x38>
 8007b5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b60:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f040 850f 	bne.w	8008588 <_strtod_l+0xad8>
 8007b6a:	ec4b ab10 	vmov	d0, sl, fp
 8007b6e:	e7e4      	b.n	8007b3a <_strtod_l+0x8a>
 8007b70:	2100      	movs	r1, #0
 8007b72:	e7ee      	b.n	8007b52 <_strtod_l+0xa2>
 8007b74:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007b76:	b13a      	cbz	r2, 8007b88 <_strtod_l+0xd8>
 8007b78:	2135      	movs	r1, #53	@ 0x35
 8007b7a:	a814      	add	r0, sp, #80	@ 0x50
 8007b7c:	f7ff ff39 	bl	80079f2 <__copybits>
 8007b80:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007b82:	9805      	ldr	r0, [sp, #20]
 8007b84:	f7ff fb0a 	bl	800719c <_Bfree>
 8007b88:	1e73      	subs	r3, r6, #1
 8007b8a:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d806      	bhi.n	8007b9e <_strtod_l+0xee>
 8007b90:	e8df f003 	tbb	[pc, r3]
 8007b94:	201d0314 	.word	0x201d0314
 8007b98:	14          	.byte	0x14
 8007b99:	00          	.byte	0x00
 8007b9a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8007b9e:	05e3      	lsls	r3, r4, #23
 8007ba0:	bf48      	it	mi
 8007ba2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007ba6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007baa:	0d1b      	lsrs	r3, r3, #20
 8007bac:	051b      	lsls	r3, r3, #20
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d1b9      	bne.n	8007b26 <_strtod_l+0x76>
 8007bb2:	f7fe fb91 	bl	80062d8 <__errno>
 8007bb6:	2322      	movs	r3, #34	@ 0x22
 8007bb8:	6003      	str	r3, [r0, #0]
 8007bba:	e7b4      	b.n	8007b26 <_strtod_l+0x76>
 8007bbc:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8007bc0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007bc4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007bc8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007bcc:	e7e7      	b.n	8007b9e <_strtod_l+0xee>
 8007bce:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8007d3c <_strtod_l+0x28c>
 8007bd2:	e7e4      	b.n	8007b9e <_strtod_l+0xee>
 8007bd4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007bd8:	f04f 3aff 	mov.w	sl, #4294967295
 8007bdc:	e7df      	b.n	8007b9e <_strtod_l+0xee>
 8007bde:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	9211      	str	r2, [sp, #68]	@ 0x44
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	2b30      	cmp	r3, #48	@ 0x30
 8007be8:	d0f9      	beq.n	8007bde <_strtod_l+0x12e>
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d09b      	beq.n	8007b26 <_strtod_l+0x76>
 8007bee:	2301      	movs	r3, #1
 8007bf0:	2600      	movs	r6, #0
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007bf6:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bf8:	46b1      	mov	r9, r6
 8007bfa:	4635      	mov	r5, r6
 8007bfc:	220a      	movs	r2, #10
 8007bfe:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8007c00:	7804      	ldrb	r4, [r0, #0]
 8007c02:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8007c06:	b2d9      	uxtb	r1, r3
 8007c08:	2909      	cmp	r1, #9
 8007c0a:	d929      	bls.n	8007c60 <_strtod_l+0x1b0>
 8007c0c:	494a      	ldr	r1, [pc, #296]	@ (8007d38 <_strtod_l+0x288>)
 8007c0e:	2201      	movs	r2, #1
 8007c10:	f000 ff84 	bl	8008b1c <strncmp>
 8007c14:	b378      	cbz	r0, 8007c76 <_strtod_l+0x1c6>
 8007c16:	2000      	movs	r0, #0
 8007c18:	4622      	mov	r2, r4
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	9006      	str	r0, [sp, #24]
 8007c20:	2a65      	cmp	r2, #101	@ 0x65
 8007c22:	d001      	beq.n	8007c28 <_strtod_l+0x178>
 8007c24:	2a45      	cmp	r2, #69	@ 0x45
 8007c26:	d117      	bne.n	8007c58 <_strtod_l+0x1a8>
 8007c28:	b91b      	cbnz	r3, 8007c32 <_strtod_l+0x182>
 8007c2a:	9b07      	ldr	r3, [sp, #28]
 8007c2c:	4303      	orrs	r3, r0
 8007c2e:	d096      	beq.n	8007b5e <_strtod_l+0xae>
 8007c30:	2300      	movs	r3, #0
 8007c32:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8007c36:	f108 0201 	add.w	r2, r8, #1
 8007c3a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007c3c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007c40:	2a2b      	cmp	r2, #43	@ 0x2b
 8007c42:	d06b      	beq.n	8007d1c <_strtod_l+0x26c>
 8007c44:	2a2d      	cmp	r2, #45	@ 0x2d
 8007c46:	d071      	beq.n	8007d2c <_strtod_l+0x27c>
 8007c48:	f04f 0e00 	mov.w	lr, #0
 8007c4c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007c50:	2c09      	cmp	r4, #9
 8007c52:	d979      	bls.n	8007d48 <_strtod_l+0x298>
 8007c54:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8007c58:	2400      	movs	r4, #0
 8007c5a:	e094      	b.n	8007d86 <_strtod_l+0x2d6>
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	e7c7      	b.n	8007bf0 <_strtod_l+0x140>
 8007c60:	2d08      	cmp	r5, #8
 8007c62:	f100 0001 	add.w	r0, r0, #1
 8007c66:	bfd4      	ite	le
 8007c68:	fb02 3909 	mlale	r9, r2, r9, r3
 8007c6c:	fb02 3606 	mlagt	r6, r2, r6, r3
 8007c70:	3501      	adds	r5, #1
 8007c72:	9011      	str	r0, [sp, #68]	@ 0x44
 8007c74:	e7c3      	b.n	8007bfe <_strtod_l+0x14e>
 8007c76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c78:	1c5a      	adds	r2, r3, #1
 8007c7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007c7c:	785a      	ldrb	r2, [r3, #1]
 8007c7e:	b375      	cbz	r5, 8007cde <_strtod_l+0x22e>
 8007c80:	4607      	mov	r7, r0
 8007c82:	462b      	mov	r3, r5
 8007c84:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007c88:	2909      	cmp	r1, #9
 8007c8a:	d913      	bls.n	8007cb4 <_strtod_l+0x204>
 8007c8c:	2101      	movs	r1, #1
 8007c8e:	9106      	str	r1, [sp, #24]
 8007c90:	e7c6      	b.n	8007c20 <_strtod_l+0x170>
 8007c92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	9211      	str	r2, [sp, #68]	@ 0x44
 8007c98:	785a      	ldrb	r2, [r3, #1]
 8007c9a:	3001      	adds	r0, #1
 8007c9c:	2a30      	cmp	r2, #48	@ 0x30
 8007c9e:	d0f8      	beq.n	8007c92 <_strtod_l+0x1e2>
 8007ca0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007ca4:	2b08      	cmp	r3, #8
 8007ca6:	f200 8476 	bhi.w	8008596 <_strtod_l+0xae6>
 8007caa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007cac:	930a      	str	r3, [sp, #40]	@ 0x28
 8007cae:	4607      	mov	r7, r0
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	3a30      	subs	r2, #48	@ 0x30
 8007cb6:	f100 0101 	add.w	r1, r0, #1
 8007cba:	d023      	beq.n	8007d04 <_strtod_l+0x254>
 8007cbc:	440f      	add	r7, r1
 8007cbe:	eb00 0c03 	add.w	ip, r0, r3
 8007cc2:	4619      	mov	r1, r3
 8007cc4:	240a      	movs	r4, #10
 8007cc6:	4561      	cmp	r1, ip
 8007cc8:	d10b      	bne.n	8007ce2 <_strtod_l+0x232>
 8007cca:	1c5c      	adds	r4, r3, #1
 8007ccc:	4403      	add	r3, r0
 8007cce:	2b08      	cmp	r3, #8
 8007cd0:	4404      	add	r4, r0
 8007cd2:	dc11      	bgt.n	8007cf8 <_strtod_l+0x248>
 8007cd4:	230a      	movs	r3, #10
 8007cd6:	fb03 2909 	mla	r9, r3, r9, r2
 8007cda:	2100      	movs	r1, #0
 8007cdc:	e013      	b.n	8007d06 <_strtod_l+0x256>
 8007cde:	4628      	mov	r0, r5
 8007ce0:	e7dc      	b.n	8007c9c <_strtod_l+0x1ec>
 8007ce2:	2908      	cmp	r1, #8
 8007ce4:	f101 0101 	add.w	r1, r1, #1
 8007ce8:	dc02      	bgt.n	8007cf0 <_strtod_l+0x240>
 8007cea:	fb04 f909 	mul.w	r9, r4, r9
 8007cee:	e7ea      	b.n	8007cc6 <_strtod_l+0x216>
 8007cf0:	2910      	cmp	r1, #16
 8007cf2:	bfd8      	it	le
 8007cf4:	4366      	mulle	r6, r4
 8007cf6:	e7e6      	b.n	8007cc6 <_strtod_l+0x216>
 8007cf8:	2b0f      	cmp	r3, #15
 8007cfa:	dcee      	bgt.n	8007cda <_strtod_l+0x22a>
 8007cfc:	230a      	movs	r3, #10
 8007cfe:	fb03 2606 	mla	r6, r3, r6, r2
 8007d02:	e7ea      	b.n	8007cda <_strtod_l+0x22a>
 8007d04:	461c      	mov	r4, r3
 8007d06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	9211      	str	r2, [sp, #68]	@ 0x44
 8007d0c:	785a      	ldrb	r2, [r3, #1]
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4623      	mov	r3, r4
 8007d12:	e7b7      	b.n	8007c84 <_strtod_l+0x1d4>
 8007d14:	2301      	movs	r3, #1
 8007d16:	2700      	movs	r7, #0
 8007d18:	9306      	str	r3, [sp, #24]
 8007d1a:	e786      	b.n	8007c2a <_strtod_l+0x17a>
 8007d1c:	f04f 0e00 	mov.w	lr, #0
 8007d20:	f108 0202 	add.w	r2, r8, #2
 8007d24:	9211      	str	r2, [sp, #68]	@ 0x44
 8007d26:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007d2a:	e78f      	b.n	8007c4c <_strtod_l+0x19c>
 8007d2c:	f04f 0e01 	mov.w	lr, #1
 8007d30:	e7f6      	b.n	8007d20 <_strtod_l+0x270>
 8007d32:	bf00      	nop
 8007d34:	0800a118 	.word	0x0800a118
 8007d38:	0800a100 	.word	0x0800a100
 8007d3c:	7ff00000 	.word	0x7ff00000
 8007d40:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d42:	1c54      	adds	r4, r2, #1
 8007d44:	9411      	str	r4, [sp, #68]	@ 0x44
 8007d46:	7852      	ldrb	r2, [r2, #1]
 8007d48:	2a30      	cmp	r2, #48	@ 0x30
 8007d4a:	d0f9      	beq.n	8007d40 <_strtod_l+0x290>
 8007d4c:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8007d50:	2c08      	cmp	r4, #8
 8007d52:	d881      	bhi.n	8007c58 <_strtod_l+0x1a8>
 8007d54:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8007d58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d5c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007d5e:	1c51      	adds	r1, r2, #1
 8007d60:	9111      	str	r1, [sp, #68]	@ 0x44
 8007d62:	7852      	ldrb	r2, [r2, #1]
 8007d64:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8007d68:	2c09      	cmp	r4, #9
 8007d6a:	d938      	bls.n	8007dde <_strtod_l+0x32e>
 8007d6c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8007d6e:	1b0c      	subs	r4, r1, r4
 8007d70:	2c08      	cmp	r4, #8
 8007d72:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8007d76:	dc02      	bgt.n	8007d7e <_strtod_l+0x2ce>
 8007d78:	4564      	cmp	r4, ip
 8007d7a:	bfa8      	it	ge
 8007d7c:	4664      	movge	r4, ip
 8007d7e:	f1be 0f00 	cmp.w	lr, #0
 8007d82:	d000      	beq.n	8007d86 <_strtod_l+0x2d6>
 8007d84:	4264      	negs	r4, r4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d14e      	bne.n	8007e28 <_strtod_l+0x378>
 8007d8a:	9b07      	ldr	r3, [sp, #28]
 8007d8c:	4318      	orrs	r0, r3
 8007d8e:	f47f aeca 	bne.w	8007b26 <_strtod_l+0x76>
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f47f aee2 	bne.w	8007b5e <_strtod_l+0xae>
 8007d9a:	2a69      	cmp	r2, #105	@ 0x69
 8007d9c:	d027      	beq.n	8007dee <_strtod_l+0x33e>
 8007d9e:	dc24      	bgt.n	8007dea <_strtod_l+0x33a>
 8007da0:	2a49      	cmp	r2, #73	@ 0x49
 8007da2:	d024      	beq.n	8007dee <_strtod_l+0x33e>
 8007da4:	2a4e      	cmp	r2, #78	@ 0x4e
 8007da6:	f47f aeda 	bne.w	8007b5e <_strtod_l+0xae>
 8007daa:	4997      	ldr	r1, [pc, #604]	@ (8008008 <_strtod_l+0x558>)
 8007dac:	a811      	add	r0, sp, #68	@ 0x44
 8007dae:	f001 f99b 	bl	80090e8 <__match>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	f43f aed3 	beq.w	8007b5e <_strtod_l+0xae>
 8007db8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b28      	cmp	r3, #40	@ 0x28
 8007dbe:	d12d      	bne.n	8007e1c <_strtod_l+0x36c>
 8007dc0:	4992      	ldr	r1, [pc, #584]	@ (800800c <_strtod_l+0x55c>)
 8007dc2:	aa14      	add	r2, sp, #80	@ 0x50
 8007dc4:	a811      	add	r0, sp, #68	@ 0x44
 8007dc6:	f001 f9a3 	bl	8009110 <__hexnan>
 8007dca:	2805      	cmp	r0, #5
 8007dcc:	d126      	bne.n	8007e1c <_strtod_l+0x36c>
 8007dce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007dd0:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8007dd4:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007dd8:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007ddc:	e6a3      	b.n	8007b26 <_strtod_l+0x76>
 8007dde:	240a      	movs	r4, #10
 8007de0:	fb04 2c0c 	mla	ip, r4, ip, r2
 8007de4:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8007de8:	e7b8      	b.n	8007d5c <_strtod_l+0x2ac>
 8007dea:	2a6e      	cmp	r2, #110	@ 0x6e
 8007dec:	e7db      	b.n	8007da6 <_strtod_l+0x2f6>
 8007dee:	4988      	ldr	r1, [pc, #544]	@ (8008010 <_strtod_l+0x560>)
 8007df0:	a811      	add	r0, sp, #68	@ 0x44
 8007df2:	f001 f979 	bl	80090e8 <__match>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f43f aeb1 	beq.w	8007b5e <_strtod_l+0xae>
 8007dfc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007dfe:	4985      	ldr	r1, [pc, #532]	@ (8008014 <_strtod_l+0x564>)
 8007e00:	3b01      	subs	r3, #1
 8007e02:	a811      	add	r0, sp, #68	@ 0x44
 8007e04:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e06:	f001 f96f 	bl	80090e8 <__match>
 8007e0a:	b910      	cbnz	r0, 8007e12 <_strtod_l+0x362>
 8007e0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007e0e:	3301      	adds	r3, #1
 8007e10:	9311      	str	r3, [sp, #68]	@ 0x44
 8007e12:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8008028 <_strtod_l+0x578>
 8007e16:	f04f 0a00 	mov.w	sl, #0
 8007e1a:	e684      	b.n	8007b26 <_strtod_l+0x76>
 8007e1c:	487e      	ldr	r0, [pc, #504]	@ (8008018 <_strtod_l+0x568>)
 8007e1e:	f000 fe9f 	bl	8008b60 <nan>
 8007e22:	ec5b ab10 	vmov	sl, fp, d0
 8007e26:	e67e      	b.n	8007b26 <_strtod_l+0x76>
 8007e28:	ee07 9a90 	vmov	s15, r9
 8007e2c:	1be2      	subs	r2, r4, r7
 8007e2e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	bf08      	it	eq
 8007e36:	461d      	moveq	r5, r3
 8007e38:	2b10      	cmp	r3, #16
 8007e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	bfa8      	it	ge
 8007e40:	2210      	movge	r2, #16
 8007e42:	2b09      	cmp	r3, #9
 8007e44:	ec5b ab17 	vmov	sl, fp, d7
 8007e48:	dc15      	bgt.n	8007e76 <_strtod_l+0x3c6>
 8007e4a:	1be1      	subs	r1, r4, r7
 8007e4c:	2900      	cmp	r1, #0
 8007e4e:	f43f ae6a 	beq.w	8007b26 <_strtod_l+0x76>
 8007e52:	eba4 0107 	sub.w	r1, r4, r7
 8007e56:	dd72      	ble.n	8007f3e <_strtod_l+0x48e>
 8007e58:	2916      	cmp	r1, #22
 8007e5a:	dc59      	bgt.n	8007f10 <_strtod_l+0x460>
 8007e5c:	4b6f      	ldr	r3, [pc, #444]	@ (800801c <_strtod_l+0x56c>)
 8007e5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e64:	ed93 7b00 	vldr	d7, [r3]
 8007e68:	ec4b ab16 	vmov	d6, sl, fp
 8007e6c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007e70:	ec5b ab17 	vmov	sl, fp, d7
 8007e74:	e657      	b.n	8007b26 <_strtod_l+0x76>
 8007e76:	4969      	ldr	r1, [pc, #420]	@ (800801c <_strtod_l+0x56c>)
 8007e78:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8007e7c:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8007e80:	ee06 6a90 	vmov	s13, r6
 8007e84:	2b0f      	cmp	r3, #15
 8007e86:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8007e8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007e8e:	ec5b ab16 	vmov	sl, fp, d6
 8007e92:	ddda      	ble.n	8007e4a <_strtod_l+0x39a>
 8007e94:	1a9a      	subs	r2, r3, r2
 8007e96:	1be1      	subs	r1, r4, r7
 8007e98:	440a      	add	r2, r1
 8007e9a:	2a00      	cmp	r2, #0
 8007e9c:	f340 8094 	ble.w	8007fc8 <_strtod_l+0x518>
 8007ea0:	f012 000f 	ands.w	r0, r2, #15
 8007ea4:	d00a      	beq.n	8007ebc <_strtod_l+0x40c>
 8007ea6:	495d      	ldr	r1, [pc, #372]	@ (800801c <_strtod_l+0x56c>)
 8007ea8:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007eac:	ed91 7b00 	vldr	d7, [r1]
 8007eb0:	ec4b ab16 	vmov	d6, sl, fp
 8007eb4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007eb8:	ec5b ab17 	vmov	sl, fp, d7
 8007ebc:	f032 020f 	bics.w	r2, r2, #15
 8007ec0:	d073      	beq.n	8007faa <_strtod_l+0x4fa>
 8007ec2:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8007ec6:	dd47      	ble.n	8007f58 <_strtod_l+0x4a8>
 8007ec8:	2400      	movs	r4, #0
 8007eca:	4625      	mov	r5, r4
 8007ecc:	9407      	str	r4, [sp, #28]
 8007ece:	4626      	mov	r6, r4
 8007ed0:	9a05      	ldr	r2, [sp, #20]
 8007ed2:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008028 <_strtod_l+0x578>
 8007ed6:	2322      	movs	r3, #34	@ 0x22
 8007ed8:	6013      	str	r3, [r2, #0]
 8007eda:	f04f 0a00 	mov.w	sl, #0
 8007ede:	9b07      	ldr	r3, [sp, #28]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	f43f ae20 	beq.w	8007b26 <_strtod_l+0x76>
 8007ee6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8007ee8:	9805      	ldr	r0, [sp, #20]
 8007eea:	f7ff f957 	bl	800719c <_Bfree>
 8007eee:	9805      	ldr	r0, [sp, #20]
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	f7ff f953 	bl	800719c <_Bfree>
 8007ef6:	9805      	ldr	r0, [sp, #20]
 8007ef8:	4629      	mov	r1, r5
 8007efa:	f7ff f94f 	bl	800719c <_Bfree>
 8007efe:	9907      	ldr	r1, [sp, #28]
 8007f00:	9805      	ldr	r0, [sp, #20]
 8007f02:	f7ff f94b 	bl	800719c <_Bfree>
 8007f06:	9805      	ldr	r0, [sp, #20]
 8007f08:	4621      	mov	r1, r4
 8007f0a:	f7ff f947 	bl	800719c <_Bfree>
 8007f0e:	e60a      	b.n	8007b26 <_strtod_l+0x76>
 8007f10:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8007f14:	1be0      	subs	r0, r4, r7
 8007f16:	4281      	cmp	r1, r0
 8007f18:	dbbc      	blt.n	8007e94 <_strtod_l+0x3e4>
 8007f1a:	4a40      	ldr	r2, [pc, #256]	@ (800801c <_strtod_l+0x56c>)
 8007f1c:	f1c3 030f 	rsb	r3, r3, #15
 8007f20:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8007f24:	ed91 7b00 	vldr	d7, [r1]
 8007f28:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007f2a:	ec4b ab16 	vmov	d6, sl, fp
 8007f2e:	1acb      	subs	r3, r1, r3
 8007f30:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8007f34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f38:	ed92 6b00 	vldr	d6, [r2]
 8007f3c:	e796      	b.n	8007e6c <_strtod_l+0x3bc>
 8007f3e:	3116      	adds	r1, #22
 8007f40:	dba8      	blt.n	8007e94 <_strtod_l+0x3e4>
 8007f42:	4b36      	ldr	r3, [pc, #216]	@ (800801c <_strtod_l+0x56c>)
 8007f44:	1b3c      	subs	r4, r7, r4
 8007f46:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007f4a:	ed94 7b00 	vldr	d7, [r4]
 8007f4e:	ec4b ab16 	vmov	d6, sl, fp
 8007f52:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007f56:	e78b      	b.n	8007e70 <_strtod_l+0x3c0>
 8007f58:	2000      	movs	r0, #0
 8007f5a:	ec4b ab17 	vmov	d7, sl, fp
 8007f5e:	4e30      	ldr	r6, [pc, #192]	@ (8008020 <_strtod_l+0x570>)
 8007f60:	1112      	asrs	r2, r2, #4
 8007f62:	4601      	mov	r1, r0
 8007f64:	2a01      	cmp	r2, #1
 8007f66:	dc23      	bgt.n	8007fb0 <_strtod_l+0x500>
 8007f68:	b108      	cbz	r0, 8007f6e <_strtod_l+0x4be>
 8007f6a:	ec5b ab17 	vmov	sl, fp, d7
 8007f6e:	4a2c      	ldr	r2, [pc, #176]	@ (8008020 <_strtod_l+0x570>)
 8007f70:	482c      	ldr	r0, [pc, #176]	@ (8008024 <_strtod_l+0x574>)
 8007f72:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8007f76:	ed92 7b00 	vldr	d7, [r2]
 8007f7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007f7e:	ec4b ab16 	vmov	d6, sl, fp
 8007f82:	4a29      	ldr	r2, [pc, #164]	@ (8008028 <_strtod_l+0x578>)
 8007f84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f88:	ee17 1a90 	vmov	r1, s15
 8007f8c:	400a      	ands	r2, r1
 8007f8e:	4282      	cmp	r2, r0
 8007f90:	ec5b ab17 	vmov	sl, fp, d7
 8007f94:	d898      	bhi.n	8007ec8 <_strtod_l+0x418>
 8007f96:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8007f9a:	4282      	cmp	r2, r0
 8007f9c:	bf86      	itte	hi
 8007f9e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800802c <_strtod_l+0x57c>
 8007fa2:	f04f 3aff 	movhi.w	sl, #4294967295
 8007fa6:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8007faa:	2200      	movs	r2, #0
 8007fac:	9206      	str	r2, [sp, #24]
 8007fae:	e076      	b.n	800809e <_strtod_l+0x5ee>
 8007fb0:	f012 0f01 	tst.w	r2, #1
 8007fb4:	d004      	beq.n	8007fc0 <_strtod_l+0x510>
 8007fb6:	ed96 6b00 	vldr	d6, [r6]
 8007fba:	2001      	movs	r0, #1
 8007fbc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007fc0:	3101      	adds	r1, #1
 8007fc2:	1052      	asrs	r2, r2, #1
 8007fc4:	3608      	adds	r6, #8
 8007fc6:	e7cd      	b.n	8007f64 <_strtod_l+0x4b4>
 8007fc8:	d0ef      	beq.n	8007faa <_strtod_l+0x4fa>
 8007fca:	4252      	negs	r2, r2
 8007fcc:	f012 000f 	ands.w	r0, r2, #15
 8007fd0:	d00a      	beq.n	8007fe8 <_strtod_l+0x538>
 8007fd2:	4912      	ldr	r1, [pc, #72]	@ (800801c <_strtod_l+0x56c>)
 8007fd4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8007fd8:	ed91 7b00 	vldr	d7, [r1]
 8007fdc:	ec4b ab16 	vmov	d6, sl, fp
 8007fe0:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007fe4:	ec5b ab17 	vmov	sl, fp, d7
 8007fe8:	1112      	asrs	r2, r2, #4
 8007fea:	d0de      	beq.n	8007faa <_strtod_l+0x4fa>
 8007fec:	2a1f      	cmp	r2, #31
 8007fee:	dd1f      	ble.n	8008030 <_strtod_l+0x580>
 8007ff0:	2400      	movs	r4, #0
 8007ff2:	4625      	mov	r5, r4
 8007ff4:	9407      	str	r4, [sp, #28]
 8007ff6:	4626      	mov	r6, r4
 8007ff8:	9a05      	ldr	r2, [sp, #20]
 8007ffa:	2322      	movs	r3, #34	@ 0x22
 8007ffc:	f04f 0a00 	mov.w	sl, #0
 8008000:	f04f 0b00 	mov.w	fp, #0
 8008004:	6013      	str	r3, [r2, #0]
 8008006:	e76a      	b.n	8007ede <_strtod_l+0x42e>
 8008008:	08009ef1 	.word	0x08009ef1
 800800c:	0800a104 	.word	0x0800a104
 8008010:	08009ee9 	.word	0x08009ee9
 8008014:	08009f20 	.word	0x08009f20
 8008018:	0800a2ad 	.word	0x0800a2ad
 800801c:	0800a038 	.word	0x0800a038
 8008020:	0800a010 	.word	0x0800a010
 8008024:	7ca00000 	.word	0x7ca00000
 8008028:	7ff00000 	.word	0x7ff00000
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	f012 0110 	ands.w	r1, r2, #16
 8008034:	bf18      	it	ne
 8008036:	216a      	movne	r1, #106	@ 0x6a
 8008038:	9106      	str	r1, [sp, #24]
 800803a:	ec4b ab17 	vmov	d7, sl, fp
 800803e:	49b0      	ldr	r1, [pc, #704]	@ (8008300 <_strtod_l+0x850>)
 8008040:	2000      	movs	r0, #0
 8008042:	07d6      	lsls	r6, r2, #31
 8008044:	d504      	bpl.n	8008050 <_strtod_l+0x5a0>
 8008046:	ed91 6b00 	vldr	d6, [r1]
 800804a:	2001      	movs	r0, #1
 800804c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008050:	1052      	asrs	r2, r2, #1
 8008052:	f101 0108 	add.w	r1, r1, #8
 8008056:	d1f4      	bne.n	8008042 <_strtod_l+0x592>
 8008058:	b108      	cbz	r0, 800805e <_strtod_l+0x5ae>
 800805a:	ec5b ab17 	vmov	sl, fp, d7
 800805e:	9a06      	ldr	r2, [sp, #24]
 8008060:	b1b2      	cbz	r2, 8008090 <_strtod_l+0x5e0>
 8008062:	f3cb 510a 	ubfx	r1, fp, #20, #11
 8008066:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800806a:	2a00      	cmp	r2, #0
 800806c:	4658      	mov	r0, fp
 800806e:	dd0f      	ble.n	8008090 <_strtod_l+0x5e0>
 8008070:	2a1f      	cmp	r2, #31
 8008072:	dd55      	ble.n	8008120 <_strtod_l+0x670>
 8008074:	2a34      	cmp	r2, #52	@ 0x34
 8008076:	bfde      	ittt	le
 8008078:	f04f 32ff 	movle.w	r2, #4294967295
 800807c:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8008080:	408a      	lslle	r2, r1
 8008082:	f04f 0a00 	mov.w	sl, #0
 8008086:	bfcc      	ite	gt
 8008088:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800808c:	ea02 0b00 	andle.w	fp, r2, r0
 8008090:	ec4b ab17 	vmov	d7, sl, fp
 8008094:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800809c:	d0a8      	beq.n	8007ff0 <_strtod_l+0x540>
 800809e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80080a0:	9805      	ldr	r0, [sp, #20]
 80080a2:	f8cd 9000 	str.w	r9, [sp]
 80080a6:	462a      	mov	r2, r5
 80080a8:	f7ff f8e0 	bl	800726c <__s2b>
 80080ac:	9007      	str	r0, [sp, #28]
 80080ae:	2800      	cmp	r0, #0
 80080b0:	f43f af0a 	beq.w	8007ec8 <_strtod_l+0x418>
 80080b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080b6:	1b3f      	subs	r7, r7, r4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	bfb4      	ite	lt
 80080bc:	463b      	movlt	r3, r7
 80080be:	2300      	movge	r3, #0
 80080c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080c4:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 80082f0 <_strtod_l+0x840>
 80080c8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080cc:	2400      	movs	r4, #0
 80080ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80080d0:	4625      	mov	r5, r4
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	9805      	ldr	r0, [sp, #20]
 80080d6:	6859      	ldr	r1, [r3, #4]
 80080d8:	f7ff f820 	bl	800711c <_Balloc>
 80080dc:	4606      	mov	r6, r0
 80080de:	2800      	cmp	r0, #0
 80080e0:	f43f aef6 	beq.w	8007ed0 <_strtod_l+0x420>
 80080e4:	9b07      	ldr	r3, [sp, #28]
 80080e6:	691a      	ldr	r2, [r3, #16]
 80080e8:	ec4b ab19 	vmov	d9, sl, fp
 80080ec:	3202      	adds	r2, #2
 80080ee:	f103 010c 	add.w	r1, r3, #12
 80080f2:	0092      	lsls	r2, r2, #2
 80080f4:	300c      	adds	r0, #12
 80080f6:	f7fe f91c 	bl	8006332 <memcpy>
 80080fa:	eeb0 0b49 	vmov.f64	d0, d9
 80080fe:	9805      	ldr	r0, [sp, #20]
 8008100:	aa14      	add	r2, sp, #80	@ 0x50
 8008102:	a913      	add	r1, sp, #76	@ 0x4c
 8008104:	f7ff fbee 	bl	80078e4 <__d2b>
 8008108:	9012      	str	r0, [sp, #72]	@ 0x48
 800810a:	2800      	cmp	r0, #0
 800810c:	f43f aee0 	beq.w	8007ed0 <_strtod_l+0x420>
 8008110:	9805      	ldr	r0, [sp, #20]
 8008112:	2101      	movs	r1, #1
 8008114:	f7ff f940 	bl	8007398 <__i2b>
 8008118:	4605      	mov	r5, r0
 800811a:	b940      	cbnz	r0, 800812e <_strtod_l+0x67e>
 800811c:	2500      	movs	r5, #0
 800811e:	e6d7      	b.n	8007ed0 <_strtod_l+0x420>
 8008120:	f04f 31ff 	mov.w	r1, #4294967295
 8008124:	fa01 f202 	lsl.w	r2, r1, r2
 8008128:	ea02 0a0a 	and.w	sl, r2, sl
 800812c:	e7b0      	b.n	8008090 <_strtod_l+0x5e0>
 800812e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8008130:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008132:	2f00      	cmp	r7, #0
 8008134:	bfab      	itete	ge
 8008136:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8008138:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800813a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800813e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 8008142:	bfac      	ite	ge
 8008144:	eb07 0903 	addge.w	r9, r7, r3
 8008148:	eba3 0807 	sublt.w	r8, r3, r7
 800814c:	9b06      	ldr	r3, [sp, #24]
 800814e:	1aff      	subs	r7, r7, r3
 8008150:	4417      	add	r7, r2
 8008152:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 8008156:	4a6b      	ldr	r2, [pc, #428]	@ (8008304 <_strtod_l+0x854>)
 8008158:	3f01      	subs	r7, #1
 800815a:	4297      	cmp	r7, r2
 800815c:	da51      	bge.n	8008202 <_strtod_l+0x752>
 800815e:	1bd1      	subs	r1, r2, r7
 8008160:	291f      	cmp	r1, #31
 8008162:	eba3 0301 	sub.w	r3, r3, r1
 8008166:	f04f 0201 	mov.w	r2, #1
 800816a:	dc3e      	bgt.n	80081ea <_strtod_l+0x73a>
 800816c:	408a      	lsls	r2, r1
 800816e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008170:	2200      	movs	r2, #0
 8008172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008174:	eb09 0703 	add.w	r7, r9, r3
 8008178:	4498      	add	r8, r3
 800817a:	9b06      	ldr	r3, [sp, #24]
 800817c:	45b9      	cmp	r9, r7
 800817e:	4498      	add	r8, r3
 8008180:	464b      	mov	r3, r9
 8008182:	bfa8      	it	ge
 8008184:	463b      	movge	r3, r7
 8008186:	4543      	cmp	r3, r8
 8008188:	bfa8      	it	ge
 800818a:	4643      	movge	r3, r8
 800818c:	2b00      	cmp	r3, #0
 800818e:	bfc2      	ittt	gt
 8008190:	1aff      	subgt	r7, r7, r3
 8008192:	eba8 0803 	subgt.w	r8, r8, r3
 8008196:	eba9 0903 	subgt.w	r9, r9, r3
 800819a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800819c:	2b00      	cmp	r3, #0
 800819e:	dd16      	ble.n	80081ce <_strtod_l+0x71e>
 80081a0:	4629      	mov	r1, r5
 80081a2:	9805      	ldr	r0, [sp, #20]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f7ff f9b7 	bl	8007518 <__pow5mult>
 80081aa:	4605      	mov	r5, r0
 80081ac:	2800      	cmp	r0, #0
 80081ae:	d0b5      	beq.n	800811c <_strtod_l+0x66c>
 80081b0:	4601      	mov	r1, r0
 80081b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80081b4:	9805      	ldr	r0, [sp, #20]
 80081b6:	f7ff f905 	bl	80073c4 <__multiply>
 80081ba:	900f      	str	r0, [sp, #60]	@ 0x3c
 80081bc:	2800      	cmp	r0, #0
 80081be:	f43f ae87 	beq.w	8007ed0 <_strtod_l+0x420>
 80081c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80081c4:	9805      	ldr	r0, [sp, #20]
 80081c6:	f7fe ffe9 	bl	800719c <_Bfree>
 80081ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081cc:	9312      	str	r3, [sp, #72]	@ 0x48
 80081ce:	2f00      	cmp	r7, #0
 80081d0:	dc1b      	bgt.n	800820a <_strtod_l+0x75a>
 80081d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	dd21      	ble.n	800821c <_strtod_l+0x76c>
 80081d8:	4631      	mov	r1, r6
 80081da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80081dc:	9805      	ldr	r0, [sp, #20]
 80081de:	f7ff f99b 	bl	8007518 <__pow5mult>
 80081e2:	4606      	mov	r6, r0
 80081e4:	b9d0      	cbnz	r0, 800821c <_strtod_l+0x76c>
 80081e6:	2600      	movs	r6, #0
 80081e8:	e672      	b.n	8007ed0 <_strtod_l+0x420>
 80081ea:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80081ee:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80081f2:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80081f6:	37e2      	adds	r7, #226	@ 0xe2
 80081f8:	fa02 f107 	lsl.w	r1, r2, r7
 80081fc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80081fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8008200:	e7b8      	b.n	8008174 <_strtod_l+0x6c4>
 8008202:	2200      	movs	r2, #0
 8008204:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008206:	2201      	movs	r2, #1
 8008208:	e7f9      	b.n	80081fe <_strtod_l+0x74e>
 800820a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800820c:	9805      	ldr	r0, [sp, #20]
 800820e:	463a      	mov	r2, r7
 8008210:	f7ff f9dc 	bl	80075cc <__lshift>
 8008214:	9012      	str	r0, [sp, #72]	@ 0x48
 8008216:	2800      	cmp	r0, #0
 8008218:	d1db      	bne.n	80081d2 <_strtod_l+0x722>
 800821a:	e659      	b.n	8007ed0 <_strtod_l+0x420>
 800821c:	f1b8 0f00 	cmp.w	r8, #0
 8008220:	dd07      	ble.n	8008232 <_strtod_l+0x782>
 8008222:	4631      	mov	r1, r6
 8008224:	9805      	ldr	r0, [sp, #20]
 8008226:	4642      	mov	r2, r8
 8008228:	f7ff f9d0 	bl	80075cc <__lshift>
 800822c:	4606      	mov	r6, r0
 800822e:	2800      	cmp	r0, #0
 8008230:	d0d9      	beq.n	80081e6 <_strtod_l+0x736>
 8008232:	f1b9 0f00 	cmp.w	r9, #0
 8008236:	dd08      	ble.n	800824a <_strtod_l+0x79a>
 8008238:	4629      	mov	r1, r5
 800823a:	9805      	ldr	r0, [sp, #20]
 800823c:	464a      	mov	r2, r9
 800823e:	f7ff f9c5 	bl	80075cc <__lshift>
 8008242:	4605      	mov	r5, r0
 8008244:	2800      	cmp	r0, #0
 8008246:	f43f ae43 	beq.w	8007ed0 <_strtod_l+0x420>
 800824a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800824c:	9805      	ldr	r0, [sp, #20]
 800824e:	4632      	mov	r2, r6
 8008250:	f7ff fa44 	bl	80076dc <__mdiff>
 8008254:	4604      	mov	r4, r0
 8008256:	2800      	cmp	r0, #0
 8008258:	f43f ae3a 	beq.w	8007ed0 <_strtod_l+0x420>
 800825c:	2300      	movs	r3, #0
 800825e:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8008262:	60c3      	str	r3, [r0, #12]
 8008264:	4629      	mov	r1, r5
 8008266:	f7ff fa1d 	bl	80076a4 <__mcmp>
 800826a:	2800      	cmp	r0, #0
 800826c:	da4e      	bge.n	800830c <_strtod_l+0x85c>
 800826e:	ea58 080a 	orrs.w	r8, r8, sl
 8008272:	d174      	bne.n	800835e <_strtod_l+0x8ae>
 8008274:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008278:	2b00      	cmp	r3, #0
 800827a:	d170      	bne.n	800835e <_strtod_l+0x8ae>
 800827c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008280:	0d1b      	lsrs	r3, r3, #20
 8008282:	051b      	lsls	r3, r3, #20
 8008284:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008288:	d969      	bls.n	800835e <_strtod_l+0x8ae>
 800828a:	6963      	ldr	r3, [r4, #20]
 800828c:	b913      	cbnz	r3, 8008294 <_strtod_l+0x7e4>
 800828e:	6923      	ldr	r3, [r4, #16]
 8008290:	2b01      	cmp	r3, #1
 8008292:	dd64      	ble.n	800835e <_strtod_l+0x8ae>
 8008294:	4621      	mov	r1, r4
 8008296:	2201      	movs	r2, #1
 8008298:	9805      	ldr	r0, [sp, #20]
 800829a:	f7ff f997 	bl	80075cc <__lshift>
 800829e:	4629      	mov	r1, r5
 80082a0:	4604      	mov	r4, r0
 80082a2:	f7ff f9ff 	bl	80076a4 <__mcmp>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	dd59      	ble.n	800835e <_strtod_l+0x8ae>
 80082aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082ae:	9a06      	ldr	r2, [sp, #24]
 80082b0:	0d1b      	lsrs	r3, r3, #20
 80082b2:	051b      	lsls	r3, r3, #20
 80082b4:	2a00      	cmp	r2, #0
 80082b6:	d070      	beq.n	800839a <_strtod_l+0x8ea>
 80082b8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80082bc:	d86d      	bhi.n	800839a <_strtod_l+0x8ea>
 80082be:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80082c2:	f67f ae99 	bls.w	8007ff8 <_strtod_l+0x548>
 80082c6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80082f8 <_strtod_l+0x848>
 80082ca:	ec4b ab16 	vmov	d6, sl, fp
 80082ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008308 <_strtod_l+0x858>)
 80082d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80082d4:	ee17 2a90 	vmov	r2, s15
 80082d8:	4013      	ands	r3, r2
 80082da:	ec5b ab17 	vmov	sl, fp, d7
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f47f ae01 	bne.w	8007ee6 <_strtod_l+0x436>
 80082e4:	9a05      	ldr	r2, [sp, #20]
 80082e6:	2322      	movs	r3, #34	@ 0x22
 80082e8:	6013      	str	r3, [r2, #0]
 80082ea:	e5fc      	b.n	8007ee6 <_strtod_l+0x436>
 80082ec:	f3af 8000 	nop.w
 80082f0:	ffc00000 	.word	0xffc00000
 80082f4:	41dfffff 	.word	0x41dfffff
 80082f8:	00000000 	.word	0x00000000
 80082fc:	39500000 	.word	0x39500000
 8008300:	0800a130 	.word	0x0800a130
 8008304:	fffffc02 	.word	0xfffffc02
 8008308:	7ff00000 	.word	0x7ff00000
 800830c:	46d9      	mov	r9, fp
 800830e:	d15d      	bne.n	80083cc <_strtod_l+0x91c>
 8008310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008314:	f1b8 0f00 	cmp.w	r8, #0
 8008318:	d02a      	beq.n	8008370 <_strtod_l+0x8c0>
 800831a:	4aab      	ldr	r2, [pc, #684]	@ (80085c8 <_strtod_l+0xb18>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d12a      	bne.n	8008376 <_strtod_l+0x8c6>
 8008320:	9b06      	ldr	r3, [sp, #24]
 8008322:	4652      	mov	r2, sl
 8008324:	b1fb      	cbz	r3, 8008366 <_strtod_l+0x8b6>
 8008326:	4ba9      	ldr	r3, [pc, #676]	@ (80085cc <_strtod_l+0xb1c>)
 8008328:	ea0b 0303 	and.w	r3, fp, r3
 800832c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008330:	f04f 31ff 	mov.w	r1, #4294967295
 8008334:	d81a      	bhi.n	800836c <_strtod_l+0x8bc>
 8008336:	0d1b      	lsrs	r3, r3, #20
 8008338:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800833c:	fa01 f303 	lsl.w	r3, r1, r3
 8008340:	429a      	cmp	r2, r3
 8008342:	d118      	bne.n	8008376 <_strtod_l+0x8c6>
 8008344:	4ba2      	ldr	r3, [pc, #648]	@ (80085d0 <_strtod_l+0xb20>)
 8008346:	4599      	cmp	r9, r3
 8008348:	d102      	bne.n	8008350 <_strtod_l+0x8a0>
 800834a:	3201      	adds	r2, #1
 800834c:	f43f adc0 	beq.w	8007ed0 <_strtod_l+0x420>
 8008350:	4b9e      	ldr	r3, [pc, #632]	@ (80085cc <_strtod_l+0xb1c>)
 8008352:	ea09 0303 	and.w	r3, r9, r3
 8008356:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800835a:	f04f 0a00 	mov.w	sl, #0
 800835e:	9b06      	ldr	r3, [sp, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1b0      	bne.n	80082c6 <_strtod_l+0x816>
 8008364:	e5bf      	b.n	8007ee6 <_strtod_l+0x436>
 8008366:	f04f 33ff 	mov.w	r3, #4294967295
 800836a:	e7e9      	b.n	8008340 <_strtod_l+0x890>
 800836c:	460b      	mov	r3, r1
 800836e:	e7e7      	b.n	8008340 <_strtod_l+0x890>
 8008370:	ea53 030a 	orrs.w	r3, r3, sl
 8008374:	d099      	beq.n	80082aa <_strtod_l+0x7fa>
 8008376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008378:	b1c3      	cbz	r3, 80083ac <_strtod_l+0x8fc>
 800837a:	ea13 0f09 	tst.w	r3, r9
 800837e:	d0ee      	beq.n	800835e <_strtod_l+0x8ae>
 8008380:	9a06      	ldr	r2, [sp, #24]
 8008382:	4650      	mov	r0, sl
 8008384:	4659      	mov	r1, fp
 8008386:	f1b8 0f00 	cmp.w	r8, #0
 800838a:	d013      	beq.n	80083b4 <_strtod_l+0x904>
 800838c:	f7ff fb75 	bl	8007a7a <sulp>
 8008390:	ee39 7b00 	vadd.f64	d7, d9, d0
 8008394:	ec5b ab17 	vmov	sl, fp, d7
 8008398:	e7e1      	b.n	800835e <_strtod_l+0x8ae>
 800839a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800839e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083a2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083a6:	f04f 3aff 	mov.w	sl, #4294967295
 80083aa:	e7d8      	b.n	800835e <_strtod_l+0x8ae>
 80083ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80083ae:	ea13 0f0a 	tst.w	r3, sl
 80083b2:	e7e4      	b.n	800837e <_strtod_l+0x8ce>
 80083b4:	f7ff fb61 	bl	8007a7a <sulp>
 80083b8:	ee39 0b40 	vsub.f64	d0, d9, d0
 80083bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80083c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083c4:	ec5b ab10 	vmov	sl, fp, d0
 80083c8:	d1c9      	bne.n	800835e <_strtod_l+0x8ae>
 80083ca:	e615      	b.n	8007ff8 <_strtod_l+0x548>
 80083cc:	4629      	mov	r1, r5
 80083ce:	4620      	mov	r0, r4
 80083d0:	f7ff fae0 	bl	8007994 <__ratio>
 80083d4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80083d8:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80083dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e0:	d85d      	bhi.n	800849e <_strtod_l+0x9ee>
 80083e2:	f1b8 0f00 	cmp.w	r8, #0
 80083e6:	d164      	bne.n	80084b2 <_strtod_l+0xa02>
 80083e8:	f1ba 0f00 	cmp.w	sl, #0
 80083ec:	d14b      	bne.n	8008486 <_strtod_l+0x9d6>
 80083ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083f2:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d160      	bne.n	80084bc <_strtod_l+0xa0c>
 80083fa:	eeb4 0bc8 	vcmpe.f64	d0, d8
 80083fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8008402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008406:	d401      	bmi.n	800840c <_strtod_l+0x95c>
 8008408:	ee20 8b08 	vmul.f64	d8, d0, d8
 800840c:	eeb1 ab48 	vneg.f64	d10, d8
 8008410:	486e      	ldr	r0, [pc, #440]	@ (80085cc <_strtod_l+0xb1c>)
 8008412:	4970      	ldr	r1, [pc, #448]	@ (80085d4 <_strtod_l+0xb24>)
 8008414:	ea09 0700 	and.w	r7, r9, r0
 8008418:	428f      	cmp	r7, r1
 800841a:	ec53 2b1a 	vmov	r2, r3, d10
 800841e:	d17d      	bne.n	800851c <_strtod_l+0xa6c>
 8008420:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8008424:	ec4b ab1c 	vmov	d12, sl, fp
 8008428:	eeb0 0b4c 	vmov.f64	d0, d12
 800842c:	f7ff f9ea 	bl	8007804 <__ulp>
 8008430:	4866      	ldr	r0, [pc, #408]	@ (80085cc <_strtod_l+0xb1c>)
 8008432:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8008436:	ee1c 3a90 	vmov	r3, s25
 800843a:	4a67      	ldr	r2, [pc, #412]	@ (80085d8 <_strtod_l+0xb28>)
 800843c:	ea03 0100 	and.w	r1, r3, r0
 8008440:	4291      	cmp	r1, r2
 8008442:	ec5b ab1c 	vmov	sl, fp, d12
 8008446:	d93c      	bls.n	80084c2 <_strtod_l+0xa12>
 8008448:	ee19 2a90 	vmov	r2, s19
 800844c:	4b60      	ldr	r3, [pc, #384]	@ (80085d0 <_strtod_l+0xb20>)
 800844e:	429a      	cmp	r2, r3
 8008450:	d104      	bne.n	800845c <_strtod_l+0x9ac>
 8008452:	ee19 3a10 	vmov	r3, s18
 8008456:	3301      	adds	r3, #1
 8008458:	f43f ad3a 	beq.w	8007ed0 <_strtod_l+0x420>
 800845c:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80085d0 <_strtod_l+0xb20>
 8008460:	f04f 3aff 	mov.w	sl, #4294967295
 8008464:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008466:	9805      	ldr	r0, [sp, #20]
 8008468:	f7fe fe98 	bl	800719c <_Bfree>
 800846c:	9805      	ldr	r0, [sp, #20]
 800846e:	4631      	mov	r1, r6
 8008470:	f7fe fe94 	bl	800719c <_Bfree>
 8008474:	9805      	ldr	r0, [sp, #20]
 8008476:	4629      	mov	r1, r5
 8008478:	f7fe fe90 	bl	800719c <_Bfree>
 800847c:	9805      	ldr	r0, [sp, #20]
 800847e:	4621      	mov	r1, r4
 8008480:	f7fe fe8c 	bl	800719c <_Bfree>
 8008484:	e625      	b.n	80080d2 <_strtod_l+0x622>
 8008486:	f1ba 0f01 	cmp.w	sl, #1
 800848a:	d103      	bne.n	8008494 <_strtod_l+0x9e4>
 800848c:	f1bb 0f00 	cmp.w	fp, #0
 8008490:	f43f adb2 	beq.w	8007ff8 <_strtod_l+0x548>
 8008494:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8008498:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800849c:	e7b8      	b.n	8008410 <_strtod_l+0x960>
 800849e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80084a2:	ee20 8b08 	vmul.f64	d8, d0, d8
 80084a6:	f1b8 0f00 	cmp.w	r8, #0
 80084aa:	d0af      	beq.n	800840c <_strtod_l+0x95c>
 80084ac:	eeb0 ab48 	vmov.f64	d10, d8
 80084b0:	e7ae      	b.n	8008410 <_strtod_l+0x960>
 80084b2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80084b6:	eeb0 8b4a 	vmov.f64	d8, d10
 80084ba:	e7a9      	b.n	8008410 <_strtod_l+0x960>
 80084bc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80084c0:	e7a6      	b.n	8008410 <_strtod_l+0x960>
 80084c2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80084c6:	9b06      	ldr	r3, [sp, #24]
 80084c8:	46d9      	mov	r9, fp
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1ca      	bne.n	8008464 <_strtod_l+0x9b4>
 80084ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80084d2:	0d1b      	lsrs	r3, r3, #20
 80084d4:	051b      	lsls	r3, r3, #20
 80084d6:	429f      	cmp	r7, r3
 80084d8:	d1c4      	bne.n	8008464 <_strtod_l+0x9b4>
 80084da:	ec51 0b18 	vmov	r0, r1, d8
 80084de:	f7f8 f913 	bl	8000708 <__aeabi_d2lz>
 80084e2:	f7f8 f8e3 	bl	80006ac <__aeabi_l2d>
 80084e6:	f3cb 0913 	ubfx	r9, fp, #0, #20
 80084ea:	ec41 0b17 	vmov	d7, r0, r1
 80084ee:	ea49 090a 	orr.w	r9, r9, sl
 80084f2:	ea59 0908 	orrs.w	r9, r9, r8
 80084f6:	ee38 8b47 	vsub.f64	d8, d8, d7
 80084fa:	d03c      	beq.n	8008576 <_strtod_l+0xac6>
 80084fc:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80085b0 <_strtod_l+0xb00>
 8008500:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008508:	f53f aced 	bmi.w	8007ee6 <_strtod_l+0x436>
 800850c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80085b8 <_strtod_l+0xb08>
 8008510:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008518:	dda4      	ble.n	8008464 <_strtod_l+0x9b4>
 800851a:	e4e4      	b.n	8007ee6 <_strtod_l+0x436>
 800851c:	9906      	ldr	r1, [sp, #24]
 800851e:	b1e1      	cbz	r1, 800855a <_strtod_l+0xaaa>
 8008520:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8008524:	d819      	bhi.n	800855a <_strtod_l+0xaaa>
 8008526:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	d811      	bhi.n	8008554 <_strtod_l+0xaa4>
 8008530:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8008534:	ee18 3a10 	vmov	r3, s16
 8008538:	2b01      	cmp	r3, #1
 800853a:	bf38      	it	cc
 800853c:	2301      	movcc	r3, #1
 800853e:	ee08 3a10 	vmov	s16, r3
 8008542:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8008546:	f1b8 0f00 	cmp.w	r8, #0
 800854a:	d111      	bne.n	8008570 <_strtod_l+0xac0>
 800854c:	eeb1 7b48 	vneg.f64	d7, d8
 8008550:	ec53 2b17 	vmov	r2, r3, d7
 8008554:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8008558:	1bcb      	subs	r3, r1, r7
 800855a:	eeb0 0b49 	vmov.f64	d0, d9
 800855e:	ec43 2b1a 	vmov	d10, r2, r3
 8008562:	f7ff f94f 	bl	8007804 <__ulp>
 8008566:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800856a:	ec5b ab19 	vmov	sl, fp, d9
 800856e:	e7aa      	b.n	80084c6 <_strtod_l+0xa16>
 8008570:	eeb0 7b48 	vmov.f64	d7, d8
 8008574:	e7ec      	b.n	8008550 <_strtod_l+0xaa0>
 8008576:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80085c0 <_strtod_l+0xb10>
 800857a:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800857e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008582:	f57f af6f 	bpl.w	8008464 <_strtod_l+0x9b4>
 8008586:	e4ae      	b.n	8007ee6 <_strtod_l+0x436>
 8008588:	2300      	movs	r3, #0
 800858a:	9308      	str	r3, [sp, #32]
 800858c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800858e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008590:	6013      	str	r3, [r2, #0]
 8008592:	f7ff bacc 	b.w	8007b2e <_strtod_l+0x7e>
 8008596:	2a65      	cmp	r2, #101	@ 0x65
 8008598:	f43f abbc 	beq.w	8007d14 <_strtod_l+0x264>
 800859c:	2a45      	cmp	r2, #69	@ 0x45
 800859e:	f43f abb9 	beq.w	8007d14 <_strtod_l+0x264>
 80085a2:	2301      	movs	r3, #1
 80085a4:	9306      	str	r3, [sp, #24]
 80085a6:	f7ff bbf0 	b.w	8007d8a <_strtod_l+0x2da>
 80085aa:	bf00      	nop
 80085ac:	f3af 8000 	nop.w
 80085b0:	94a03595 	.word	0x94a03595
 80085b4:	3fdfffff 	.word	0x3fdfffff
 80085b8:	35afe535 	.word	0x35afe535
 80085bc:	3fe00000 	.word	0x3fe00000
 80085c0:	94a03595 	.word	0x94a03595
 80085c4:	3fcfffff 	.word	0x3fcfffff
 80085c8:	000fffff 	.word	0x000fffff
 80085cc:	7ff00000 	.word	0x7ff00000
 80085d0:	7fefffff 	.word	0x7fefffff
 80085d4:	7fe00000 	.word	0x7fe00000
 80085d8:	7c9fffff 	.word	0x7c9fffff

080085dc <_strtod_r>:
 80085dc:	4b01      	ldr	r3, [pc, #4]	@ (80085e4 <_strtod_r+0x8>)
 80085de:	f7ff ba67 	b.w	8007ab0 <_strtod_l>
 80085e2:	bf00      	nop
 80085e4:	2400006c 	.word	0x2400006c

080085e8 <_strtol_l.constprop.0>:
 80085e8:	2b24      	cmp	r3, #36	@ 0x24
 80085ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ee:	4686      	mov	lr, r0
 80085f0:	4690      	mov	r8, r2
 80085f2:	d801      	bhi.n	80085f8 <_strtol_l.constprop.0+0x10>
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d106      	bne.n	8008606 <_strtol_l.constprop.0+0x1e>
 80085f8:	f7fd fe6e 	bl	80062d8 <__errno>
 80085fc:	2316      	movs	r3, #22
 80085fe:	6003      	str	r3, [r0, #0]
 8008600:	2000      	movs	r0, #0
 8008602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008606:	4834      	ldr	r0, [pc, #208]	@ (80086d8 <_strtol_l.constprop.0+0xf0>)
 8008608:	460d      	mov	r5, r1
 800860a:	462a      	mov	r2, r5
 800860c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008610:	5d06      	ldrb	r6, [r0, r4]
 8008612:	f016 0608 	ands.w	r6, r6, #8
 8008616:	d1f8      	bne.n	800860a <_strtol_l.constprop.0+0x22>
 8008618:	2c2d      	cmp	r4, #45	@ 0x2d
 800861a:	d12d      	bne.n	8008678 <_strtol_l.constprop.0+0x90>
 800861c:	782c      	ldrb	r4, [r5, #0]
 800861e:	2601      	movs	r6, #1
 8008620:	1c95      	adds	r5, r2, #2
 8008622:	f033 0210 	bics.w	r2, r3, #16
 8008626:	d109      	bne.n	800863c <_strtol_l.constprop.0+0x54>
 8008628:	2c30      	cmp	r4, #48	@ 0x30
 800862a:	d12a      	bne.n	8008682 <_strtol_l.constprop.0+0x9a>
 800862c:	782a      	ldrb	r2, [r5, #0]
 800862e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008632:	2a58      	cmp	r2, #88	@ 0x58
 8008634:	d125      	bne.n	8008682 <_strtol_l.constprop.0+0x9a>
 8008636:	786c      	ldrb	r4, [r5, #1]
 8008638:	2310      	movs	r3, #16
 800863a:	3502      	adds	r5, #2
 800863c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008640:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008644:	2200      	movs	r2, #0
 8008646:	fbbc f9f3 	udiv	r9, ip, r3
 800864a:	4610      	mov	r0, r2
 800864c:	fb03 ca19 	mls	sl, r3, r9, ip
 8008650:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008654:	2f09      	cmp	r7, #9
 8008656:	d81b      	bhi.n	8008690 <_strtol_l.constprop.0+0xa8>
 8008658:	463c      	mov	r4, r7
 800865a:	42a3      	cmp	r3, r4
 800865c:	dd27      	ble.n	80086ae <_strtol_l.constprop.0+0xc6>
 800865e:	1c57      	adds	r7, r2, #1
 8008660:	d007      	beq.n	8008672 <_strtol_l.constprop.0+0x8a>
 8008662:	4581      	cmp	r9, r0
 8008664:	d320      	bcc.n	80086a8 <_strtol_l.constprop.0+0xc0>
 8008666:	d101      	bne.n	800866c <_strtol_l.constprop.0+0x84>
 8008668:	45a2      	cmp	sl, r4
 800866a:	db1d      	blt.n	80086a8 <_strtol_l.constprop.0+0xc0>
 800866c:	fb00 4003 	mla	r0, r0, r3, r4
 8008670:	2201      	movs	r2, #1
 8008672:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008676:	e7eb      	b.n	8008650 <_strtol_l.constprop.0+0x68>
 8008678:	2c2b      	cmp	r4, #43	@ 0x2b
 800867a:	bf04      	itt	eq
 800867c:	782c      	ldrbeq	r4, [r5, #0]
 800867e:	1c95      	addeq	r5, r2, #2
 8008680:	e7cf      	b.n	8008622 <_strtol_l.constprop.0+0x3a>
 8008682:	2b00      	cmp	r3, #0
 8008684:	d1da      	bne.n	800863c <_strtol_l.constprop.0+0x54>
 8008686:	2c30      	cmp	r4, #48	@ 0x30
 8008688:	bf0c      	ite	eq
 800868a:	2308      	moveq	r3, #8
 800868c:	230a      	movne	r3, #10
 800868e:	e7d5      	b.n	800863c <_strtol_l.constprop.0+0x54>
 8008690:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008694:	2f19      	cmp	r7, #25
 8008696:	d801      	bhi.n	800869c <_strtol_l.constprop.0+0xb4>
 8008698:	3c37      	subs	r4, #55	@ 0x37
 800869a:	e7de      	b.n	800865a <_strtol_l.constprop.0+0x72>
 800869c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80086a0:	2f19      	cmp	r7, #25
 80086a2:	d804      	bhi.n	80086ae <_strtol_l.constprop.0+0xc6>
 80086a4:	3c57      	subs	r4, #87	@ 0x57
 80086a6:	e7d8      	b.n	800865a <_strtol_l.constprop.0+0x72>
 80086a8:	f04f 32ff 	mov.w	r2, #4294967295
 80086ac:	e7e1      	b.n	8008672 <_strtol_l.constprop.0+0x8a>
 80086ae:	1c53      	adds	r3, r2, #1
 80086b0:	d108      	bne.n	80086c4 <_strtol_l.constprop.0+0xdc>
 80086b2:	2322      	movs	r3, #34	@ 0x22
 80086b4:	f8ce 3000 	str.w	r3, [lr]
 80086b8:	4660      	mov	r0, ip
 80086ba:	f1b8 0f00 	cmp.w	r8, #0
 80086be:	d0a0      	beq.n	8008602 <_strtol_l.constprop.0+0x1a>
 80086c0:	1e69      	subs	r1, r5, #1
 80086c2:	e006      	b.n	80086d2 <_strtol_l.constprop.0+0xea>
 80086c4:	b106      	cbz	r6, 80086c8 <_strtol_l.constprop.0+0xe0>
 80086c6:	4240      	negs	r0, r0
 80086c8:	f1b8 0f00 	cmp.w	r8, #0
 80086cc:	d099      	beq.n	8008602 <_strtol_l.constprop.0+0x1a>
 80086ce:	2a00      	cmp	r2, #0
 80086d0:	d1f6      	bne.n	80086c0 <_strtol_l.constprop.0+0xd8>
 80086d2:	f8c8 1000 	str.w	r1, [r8]
 80086d6:	e794      	b.n	8008602 <_strtol_l.constprop.0+0x1a>
 80086d8:	0800a159 	.word	0x0800a159

080086dc <_strtol_r>:
 80086dc:	f7ff bf84 	b.w	80085e8 <_strtol_l.constprop.0>

080086e0 <__ssputs_r>:
 80086e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80086e4:	688e      	ldr	r6, [r1, #8]
 80086e6:	461f      	mov	r7, r3
 80086e8:	42be      	cmp	r6, r7
 80086ea:	680b      	ldr	r3, [r1, #0]
 80086ec:	4682      	mov	sl, r0
 80086ee:	460c      	mov	r4, r1
 80086f0:	4690      	mov	r8, r2
 80086f2:	d82d      	bhi.n	8008750 <__ssputs_r+0x70>
 80086f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80086f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80086fc:	d026      	beq.n	800874c <__ssputs_r+0x6c>
 80086fe:	6965      	ldr	r5, [r4, #20]
 8008700:	6909      	ldr	r1, [r1, #16]
 8008702:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008706:	eba3 0901 	sub.w	r9, r3, r1
 800870a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800870e:	1c7b      	adds	r3, r7, #1
 8008710:	444b      	add	r3, r9
 8008712:	106d      	asrs	r5, r5, #1
 8008714:	429d      	cmp	r5, r3
 8008716:	bf38      	it	cc
 8008718:	461d      	movcc	r5, r3
 800871a:	0553      	lsls	r3, r2, #21
 800871c:	d527      	bpl.n	800876e <__ssputs_r+0x8e>
 800871e:	4629      	mov	r1, r5
 8008720:	f7fe fc70 	bl	8007004 <_malloc_r>
 8008724:	4606      	mov	r6, r0
 8008726:	b360      	cbz	r0, 8008782 <__ssputs_r+0xa2>
 8008728:	6921      	ldr	r1, [r4, #16]
 800872a:	464a      	mov	r2, r9
 800872c:	f7fd fe01 	bl	8006332 <memcpy>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008736:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	6126      	str	r6, [r4, #16]
 800873e:	6165      	str	r5, [r4, #20]
 8008740:	444e      	add	r6, r9
 8008742:	eba5 0509 	sub.w	r5, r5, r9
 8008746:	6026      	str	r6, [r4, #0]
 8008748:	60a5      	str	r5, [r4, #8]
 800874a:	463e      	mov	r6, r7
 800874c:	42be      	cmp	r6, r7
 800874e:	d900      	bls.n	8008752 <__ssputs_r+0x72>
 8008750:	463e      	mov	r6, r7
 8008752:	6820      	ldr	r0, [r4, #0]
 8008754:	4632      	mov	r2, r6
 8008756:	4641      	mov	r1, r8
 8008758:	f000 f9c6 	bl	8008ae8 <memmove>
 800875c:	68a3      	ldr	r3, [r4, #8]
 800875e:	1b9b      	subs	r3, r3, r6
 8008760:	60a3      	str	r3, [r4, #8]
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	4433      	add	r3, r6
 8008766:	6023      	str	r3, [r4, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876e:	462a      	mov	r2, r5
 8008770:	f000 fd7b 	bl	800926a <_realloc_r>
 8008774:	4606      	mov	r6, r0
 8008776:	2800      	cmp	r0, #0
 8008778:	d1e0      	bne.n	800873c <__ssputs_r+0x5c>
 800877a:	6921      	ldr	r1, [r4, #16]
 800877c:	4650      	mov	r0, sl
 800877e:	f7fe fbcd 	bl	8006f1c <_free_r>
 8008782:	230c      	movs	r3, #12
 8008784:	f8ca 3000 	str.w	r3, [sl]
 8008788:	89a3      	ldrh	r3, [r4, #12]
 800878a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800878e:	81a3      	strh	r3, [r4, #12]
 8008790:	f04f 30ff 	mov.w	r0, #4294967295
 8008794:	e7e9      	b.n	800876a <__ssputs_r+0x8a>
	...

08008798 <_svfiprintf_r>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	4698      	mov	r8, r3
 800879e:	898b      	ldrh	r3, [r1, #12]
 80087a0:	061b      	lsls	r3, r3, #24
 80087a2:	b09d      	sub	sp, #116	@ 0x74
 80087a4:	4607      	mov	r7, r0
 80087a6:	460d      	mov	r5, r1
 80087a8:	4614      	mov	r4, r2
 80087aa:	d510      	bpl.n	80087ce <_svfiprintf_r+0x36>
 80087ac:	690b      	ldr	r3, [r1, #16]
 80087ae:	b973      	cbnz	r3, 80087ce <_svfiprintf_r+0x36>
 80087b0:	2140      	movs	r1, #64	@ 0x40
 80087b2:	f7fe fc27 	bl	8007004 <_malloc_r>
 80087b6:	6028      	str	r0, [r5, #0]
 80087b8:	6128      	str	r0, [r5, #16]
 80087ba:	b930      	cbnz	r0, 80087ca <_svfiprintf_r+0x32>
 80087bc:	230c      	movs	r3, #12
 80087be:	603b      	str	r3, [r7, #0]
 80087c0:	f04f 30ff 	mov.w	r0, #4294967295
 80087c4:	b01d      	add	sp, #116	@ 0x74
 80087c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ca:	2340      	movs	r3, #64	@ 0x40
 80087cc:	616b      	str	r3, [r5, #20]
 80087ce:	2300      	movs	r3, #0
 80087d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d2:	2320      	movs	r3, #32
 80087d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80087dc:	2330      	movs	r3, #48	@ 0x30
 80087de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800897c <_svfiprintf_r+0x1e4>
 80087e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087e6:	f04f 0901 	mov.w	r9, #1
 80087ea:	4623      	mov	r3, r4
 80087ec:	469a      	mov	sl, r3
 80087ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087f2:	b10a      	cbz	r2, 80087f8 <_svfiprintf_r+0x60>
 80087f4:	2a25      	cmp	r2, #37	@ 0x25
 80087f6:	d1f9      	bne.n	80087ec <_svfiprintf_r+0x54>
 80087f8:	ebba 0b04 	subs.w	fp, sl, r4
 80087fc:	d00b      	beq.n	8008816 <_svfiprintf_r+0x7e>
 80087fe:	465b      	mov	r3, fp
 8008800:	4622      	mov	r2, r4
 8008802:	4629      	mov	r1, r5
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff ff6b 	bl	80086e0 <__ssputs_r>
 800880a:	3001      	adds	r0, #1
 800880c:	f000 80a7 	beq.w	800895e <_svfiprintf_r+0x1c6>
 8008810:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008812:	445a      	add	r2, fp
 8008814:	9209      	str	r2, [sp, #36]	@ 0x24
 8008816:	f89a 3000 	ldrb.w	r3, [sl]
 800881a:	2b00      	cmp	r3, #0
 800881c:	f000 809f 	beq.w	800895e <_svfiprintf_r+0x1c6>
 8008820:	2300      	movs	r3, #0
 8008822:	f04f 32ff 	mov.w	r2, #4294967295
 8008826:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800882a:	f10a 0a01 	add.w	sl, sl, #1
 800882e:	9304      	str	r3, [sp, #16]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008836:	931a      	str	r3, [sp, #104]	@ 0x68
 8008838:	4654      	mov	r4, sl
 800883a:	2205      	movs	r2, #5
 800883c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008840:	484e      	ldr	r0, [pc, #312]	@ (800897c <_svfiprintf_r+0x1e4>)
 8008842:	f7f7 fd4d 	bl	80002e0 <memchr>
 8008846:	9a04      	ldr	r2, [sp, #16]
 8008848:	b9d8      	cbnz	r0, 8008882 <_svfiprintf_r+0xea>
 800884a:	06d0      	lsls	r0, r2, #27
 800884c:	bf44      	itt	mi
 800884e:	2320      	movmi	r3, #32
 8008850:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008854:	0711      	lsls	r1, r2, #28
 8008856:	bf44      	itt	mi
 8008858:	232b      	movmi	r3, #43	@ 0x2b
 800885a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800885e:	f89a 3000 	ldrb.w	r3, [sl]
 8008862:	2b2a      	cmp	r3, #42	@ 0x2a
 8008864:	d015      	beq.n	8008892 <_svfiprintf_r+0xfa>
 8008866:	9a07      	ldr	r2, [sp, #28]
 8008868:	4654      	mov	r4, sl
 800886a:	2000      	movs	r0, #0
 800886c:	f04f 0c0a 	mov.w	ip, #10
 8008870:	4621      	mov	r1, r4
 8008872:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008876:	3b30      	subs	r3, #48	@ 0x30
 8008878:	2b09      	cmp	r3, #9
 800887a:	d94b      	bls.n	8008914 <_svfiprintf_r+0x17c>
 800887c:	b1b0      	cbz	r0, 80088ac <_svfiprintf_r+0x114>
 800887e:	9207      	str	r2, [sp, #28]
 8008880:	e014      	b.n	80088ac <_svfiprintf_r+0x114>
 8008882:	eba0 0308 	sub.w	r3, r0, r8
 8008886:	fa09 f303 	lsl.w	r3, r9, r3
 800888a:	4313      	orrs	r3, r2
 800888c:	9304      	str	r3, [sp, #16]
 800888e:	46a2      	mov	sl, r4
 8008890:	e7d2      	b.n	8008838 <_svfiprintf_r+0xa0>
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	1d19      	adds	r1, r3, #4
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	9103      	str	r1, [sp, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	bfbb      	ittet	lt
 800889e:	425b      	neglt	r3, r3
 80088a0:	f042 0202 	orrlt.w	r2, r2, #2
 80088a4:	9307      	strge	r3, [sp, #28]
 80088a6:	9307      	strlt	r3, [sp, #28]
 80088a8:	bfb8      	it	lt
 80088aa:	9204      	strlt	r2, [sp, #16]
 80088ac:	7823      	ldrb	r3, [r4, #0]
 80088ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80088b0:	d10a      	bne.n	80088c8 <_svfiprintf_r+0x130>
 80088b2:	7863      	ldrb	r3, [r4, #1]
 80088b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80088b6:	d132      	bne.n	800891e <_svfiprintf_r+0x186>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	1d1a      	adds	r2, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	9203      	str	r2, [sp, #12]
 80088c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088c4:	3402      	adds	r4, #2
 80088c6:	9305      	str	r3, [sp, #20]
 80088c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800898c <_svfiprintf_r+0x1f4>
 80088cc:	7821      	ldrb	r1, [r4, #0]
 80088ce:	2203      	movs	r2, #3
 80088d0:	4650      	mov	r0, sl
 80088d2:	f7f7 fd05 	bl	80002e0 <memchr>
 80088d6:	b138      	cbz	r0, 80088e8 <_svfiprintf_r+0x150>
 80088d8:	9b04      	ldr	r3, [sp, #16]
 80088da:	eba0 000a 	sub.w	r0, r0, sl
 80088de:	2240      	movs	r2, #64	@ 0x40
 80088e0:	4082      	lsls	r2, r0
 80088e2:	4313      	orrs	r3, r2
 80088e4:	3401      	adds	r4, #1
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088ec:	4824      	ldr	r0, [pc, #144]	@ (8008980 <_svfiprintf_r+0x1e8>)
 80088ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80088f2:	2206      	movs	r2, #6
 80088f4:	f7f7 fcf4 	bl	80002e0 <memchr>
 80088f8:	2800      	cmp	r0, #0
 80088fa:	d036      	beq.n	800896a <_svfiprintf_r+0x1d2>
 80088fc:	4b21      	ldr	r3, [pc, #132]	@ (8008984 <_svfiprintf_r+0x1ec>)
 80088fe:	bb1b      	cbnz	r3, 8008948 <_svfiprintf_r+0x1b0>
 8008900:	9b03      	ldr	r3, [sp, #12]
 8008902:	3307      	adds	r3, #7
 8008904:	f023 0307 	bic.w	r3, r3, #7
 8008908:	3308      	adds	r3, #8
 800890a:	9303      	str	r3, [sp, #12]
 800890c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800890e:	4433      	add	r3, r6
 8008910:	9309      	str	r3, [sp, #36]	@ 0x24
 8008912:	e76a      	b.n	80087ea <_svfiprintf_r+0x52>
 8008914:	fb0c 3202 	mla	r2, ip, r2, r3
 8008918:	460c      	mov	r4, r1
 800891a:	2001      	movs	r0, #1
 800891c:	e7a8      	b.n	8008870 <_svfiprintf_r+0xd8>
 800891e:	2300      	movs	r3, #0
 8008920:	3401      	adds	r4, #1
 8008922:	9305      	str	r3, [sp, #20]
 8008924:	4619      	mov	r1, r3
 8008926:	f04f 0c0a 	mov.w	ip, #10
 800892a:	4620      	mov	r0, r4
 800892c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008930:	3a30      	subs	r2, #48	@ 0x30
 8008932:	2a09      	cmp	r2, #9
 8008934:	d903      	bls.n	800893e <_svfiprintf_r+0x1a6>
 8008936:	2b00      	cmp	r3, #0
 8008938:	d0c6      	beq.n	80088c8 <_svfiprintf_r+0x130>
 800893a:	9105      	str	r1, [sp, #20]
 800893c:	e7c4      	b.n	80088c8 <_svfiprintf_r+0x130>
 800893e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008942:	4604      	mov	r4, r0
 8008944:	2301      	movs	r3, #1
 8008946:	e7f0      	b.n	800892a <_svfiprintf_r+0x192>
 8008948:	ab03      	add	r3, sp, #12
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	462a      	mov	r2, r5
 800894e:	4b0e      	ldr	r3, [pc, #56]	@ (8008988 <_svfiprintf_r+0x1f0>)
 8008950:	a904      	add	r1, sp, #16
 8008952:	4638      	mov	r0, r7
 8008954:	f7fc fd84 	bl	8005460 <_printf_float>
 8008958:	1c42      	adds	r2, r0, #1
 800895a:	4606      	mov	r6, r0
 800895c:	d1d6      	bne.n	800890c <_svfiprintf_r+0x174>
 800895e:	89ab      	ldrh	r3, [r5, #12]
 8008960:	065b      	lsls	r3, r3, #25
 8008962:	f53f af2d 	bmi.w	80087c0 <_svfiprintf_r+0x28>
 8008966:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008968:	e72c      	b.n	80087c4 <_svfiprintf_r+0x2c>
 800896a:	ab03      	add	r3, sp, #12
 800896c:	9300      	str	r3, [sp, #0]
 800896e:	462a      	mov	r2, r5
 8008970:	4b05      	ldr	r3, [pc, #20]	@ (8008988 <_svfiprintf_r+0x1f0>)
 8008972:	a904      	add	r1, sp, #16
 8008974:	4638      	mov	r0, r7
 8008976:	f7fc fffb 	bl	8005970 <_printf_i>
 800897a:	e7ed      	b.n	8008958 <_svfiprintf_r+0x1c0>
 800897c:	0800a259 	.word	0x0800a259
 8008980:	0800a263 	.word	0x0800a263
 8008984:	08005461 	.word	0x08005461
 8008988:	080086e1 	.word	0x080086e1
 800898c:	0800a25f 	.word	0x0800a25f

08008990 <__sflush_r>:
 8008990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008998:	0716      	lsls	r6, r2, #28
 800899a:	4605      	mov	r5, r0
 800899c:	460c      	mov	r4, r1
 800899e:	d454      	bmi.n	8008a4a <__sflush_r+0xba>
 80089a0:	684b      	ldr	r3, [r1, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dc02      	bgt.n	80089ac <__sflush_r+0x1c>
 80089a6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	dd48      	ble.n	8008a3e <__sflush_r+0xae>
 80089ac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089ae:	2e00      	cmp	r6, #0
 80089b0:	d045      	beq.n	8008a3e <__sflush_r+0xae>
 80089b2:	2300      	movs	r3, #0
 80089b4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80089b8:	682f      	ldr	r7, [r5, #0]
 80089ba:	6a21      	ldr	r1, [r4, #32]
 80089bc:	602b      	str	r3, [r5, #0]
 80089be:	d030      	beq.n	8008a22 <__sflush_r+0x92>
 80089c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80089c2:	89a3      	ldrh	r3, [r4, #12]
 80089c4:	0759      	lsls	r1, r3, #29
 80089c6:	d505      	bpl.n	80089d4 <__sflush_r+0x44>
 80089c8:	6863      	ldr	r3, [r4, #4]
 80089ca:	1ad2      	subs	r2, r2, r3
 80089cc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80089ce:	b10b      	cbz	r3, 80089d4 <__sflush_r+0x44>
 80089d0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80089d2:	1ad2      	subs	r2, r2, r3
 80089d4:	2300      	movs	r3, #0
 80089d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80089d8:	6a21      	ldr	r1, [r4, #32]
 80089da:	4628      	mov	r0, r5
 80089dc:	47b0      	blx	r6
 80089de:	1c43      	adds	r3, r0, #1
 80089e0:	89a3      	ldrh	r3, [r4, #12]
 80089e2:	d106      	bne.n	80089f2 <__sflush_r+0x62>
 80089e4:	6829      	ldr	r1, [r5, #0]
 80089e6:	291d      	cmp	r1, #29
 80089e8:	d82b      	bhi.n	8008a42 <__sflush_r+0xb2>
 80089ea:	4a2a      	ldr	r2, [pc, #168]	@ (8008a94 <__sflush_r+0x104>)
 80089ec:	410a      	asrs	r2, r1
 80089ee:	07d6      	lsls	r6, r2, #31
 80089f0:	d427      	bmi.n	8008a42 <__sflush_r+0xb2>
 80089f2:	2200      	movs	r2, #0
 80089f4:	6062      	str	r2, [r4, #4]
 80089f6:	04d9      	lsls	r1, r3, #19
 80089f8:	6922      	ldr	r2, [r4, #16]
 80089fa:	6022      	str	r2, [r4, #0]
 80089fc:	d504      	bpl.n	8008a08 <__sflush_r+0x78>
 80089fe:	1c42      	adds	r2, r0, #1
 8008a00:	d101      	bne.n	8008a06 <__sflush_r+0x76>
 8008a02:	682b      	ldr	r3, [r5, #0]
 8008a04:	b903      	cbnz	r3, 8008a08 <__sflush_r+0x78>
 8008a06:	6560      	str	r0, [r4, #84]	@ 0x54
 8008a08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008a0a:	602f      	str	r7, [r5, #0]
 8008a0c:	b1b9      	cbz	r1, 8008a3e <__sflush_r+0xae>
 8008a0e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008a12:	4299      	cmp	r1, r3
 8008a14:	d002      	beq.n	8008a1c <__sflush_r+0x8c>
 8008a16:	4628      	mov	r0, r5
 8008a18:	f7fe fa80 	bl	8006f1c <_free_r>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008a20:	e00d      	b.n	8008a3e <__sflush_r+0xae>
 8008a22:	2301      	movs	r3, #1
 8008a24:	4628      	mov	r0, r5
 8008a26:	47b0      	blx	r6
 8008a28:	4602      	mov	r2, r0
 8008a2a:	1c50      	adds	r0, r2, #1
 8008a2c:	d1c9      	bne.n	80089c2 <__sflush_r+0x32>
 8008a2e:	682b      	ldr	r3, [r5, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d0c6      	beq.n	80089c2 <__sflush_r+0x32>
 8008a34:	2b1d      	cmp	r3, #29
 8008a36:	d001      	beq.n	8008a3c <__sflush_r+0xac>
 8008a38:	2b16      	cmp	r3, #22
 8008a3a:	d11e      	bne.n	8008a7a <__sflush_r+0xea>
 8008a3c:	602f      	str	r7, [r5, #0]
 8008a3e:	2000      	movs	r0, #0
 8008a40:	e022      	b.n	8008a88 <__sflush_r+0xf8>
 8008a42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a46:	b21b      	sxth	r3, r3
 8008a48:	e01b      	b.n	8008a82 <__sflush_r+0xf2>
 8008a4a:	690f      	ldr	r7, [r1, #16]
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	d0f6      	beq.n	8008a3e <__sflush_r+0xae>
 8008a50:	0793      	lsls	r3, r2, #30
 8008a52:	680e      	ldr	r6, [r1, #0]
 8008a54:	bf08      	it	eq
 8008a56:	694b      	ldreq	r3, [r1, #20]
 8008a58:	600f      	str	r7, [r1, #0]
 8008a5a:	bf18      	it	ne
 8008a5c:	2300      	movne	r3, #0
 8008a5e:	eba6 0807 	sub.w	r8, r6, r7
 8008a62:	608b      	str	r3, [r1, #8]
 8008a64:	f1b8 0f00 	cmp.w	r8, #0
 8008a68:	dde9      	ble.n	8008a3e <__sflush_r+0xae>
 8008a6a:	6a21      	ldr	r1, [r4, #32]
 8008a6c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008a6e:	4643      	mov	r3, r8
 8008a70:	463a      	mov	r2, r7
 8008a72:	4628      	mov	r0, r5
 8008a74:	47b0      	blx	r6
 8008a76:	2800      	cmp	r0, #0
 8008a78:	dc08      	bgt.n	8008a8c <__sflush_r+0xfc>
 8008a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a82:	81a3      	strh	r3, [r4, #12]
 8008a84:	f04f 30ff 	mov.w	r0, #4294967295
 8008a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8c:	4407      	add	r7, r0
 8008a8e:	eba8 0800 	sub.w	r8, r8, r0
 8008a92:	e7e7      	b.n	8008a64 <__sflush_r+0xd4>
 8008a94:	dfbffffe 	.word	0xdfbffffe

08008a98 <_fflush_r>:
 8008a98:	b538      	push	{r3, r4, r5, lr}
 8008a9a:	690b      	ldr	r3, [r1, #16]
 8008a9c:	4605      	mov	r5, r0
 8008a9e:	460c      	mov	r4, r1
 8008aa0:	b913      	cbnz	r3, 8008aa8 <_fflush_r+0x10>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	bd38      	pop	{r3, r4, r5, pc}
 8008aa8:	b118      	cbz	r0, 8008ab2 <_fflush_r+0x1a>
 8008aaa:	6a03      	ldr	r3, [r0, #32]
 8008aac:	b90b      	cbnz	r3, 8008ab2 <_fflush_r+0x1a>
 8008aae:	f7fd fb17 	bl	80060e0 <__sinit>
 8008ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d0f3      	beq.n	8008aa2 <_fflush_r+0xa>
 8008aba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008abc:	07d0      	lsls	r0, r2, #31
 8008abe:	d404      	bmi.n	8008aca <_fflush_r+0x32>
 8008ac0:	0599      	lsls	r1, r3, #22
 8008ac2:	d402      	bmi.n	8008aca <_fflush_r+0x32>
 8008ac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ac6:	f7fd fc32 	bl	800632e <__retarget_lock_acquire_recursive>
 8008aca:	4628      	mov	r0, r5
 8008acc:	4621      	mov	r1, r4
 8008ace:	f7ff ff5f 	bl	8008990 <__sflush_r>
 8008ad2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ad4:	07da      	lsls	r2, r3, #31
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	d4e4      	bmi.n	8008aa4 <_fflush_r+0xc>
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	059b      	lsls	r3, r3, #22
 8008ade:	d4e1      	bmi.n	8008aa4 <_fflush_r+0xc>
 8008ae0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ae2:	f7fd fc25 	bl	8006330 <__retarget_lock_release_recursive>
 8008ae6:	e7dd      	b.n	8008aa4 <_fflush_r+0xc>

08008ae8 <memmove>:
 8008ae8:	4288      	cmp	r0, r1
 8008aea:	b510      	push	{r4, lr}
 8008aec:	eb01 0402 	add.w	r4, r1, r2
 8008af0:	d902      	bls.n	8008af8 <memmove+0x10>
 8008af2:	4284      	cmp	r4, r0
 8008af4:	4623      	mov	r3, r4
 8008af6:	d807      	bhi.n	8008b08 <memmove+0x20>
 8008af8:	1e43      	subs	r3, r0, #1
 8008afa:	42a1      	cmp	r1, r4
 8008afc:	d008      	beq.n	8008b10 <memmove+0x28>
 8008afe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b02:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b06:	e7f8      	b.n	8008afa <memmove+0x12>
 8008b08:	4402      	add	r2, r0
 8008b0a:	4601      	mov	r1, r0
 8008b0c:	428a      	cmp	r2, r1
 8008b0e:	d100      	bne.n	8008b12 <memmove+0x2a>
 8008b10:	bd10      	pop	{r4, pc}
 8008b12:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b16:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b1a:	e7f7      	b.n	8008b0c <memmove+0x24>

08008b1c <strncmp>:
 8008b1c:	b510      	push	{r4, lr}
 8008b1e:	b16a      	cbz	r2, 8008b3c <strncmp+0x20>
 8008b20:	3901      	subs	r1, #1
 8008b22:	1884      	adds	r4, r0, r2
 8008b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b28:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b2c:	429a      	cmp	r2, r3
 8008b2e:	d103      	bne.n	8008b38 <strncmp+0x1c>
 8008b30:	42a0      	cmp	r0, r4
 8008b32:	d001      	beq.n	8008b38 <strncmp+0x1c>
 8008b34:	2a00      	cmp	r2, #0
 8008b36:	d1f5      	bne.n	8008b24 <strncmp+0x8>
 8008b38:	1ad0      	subs	r0, r2, r3
 8008b3a:	bd10      	pop	{r4, pc}
 8008b3c:	4610      	mov	r0, r2
 8008b3e:	e7fc      	b.n	8008b3a <strncmp+0x1e>

08008b40 <_sbrk_r>:
 8008b40:	b538      	push	{r3, r4, r5, lr}
 8008b42:	4d06      	ldr	r5, [pc, #24]	@ (8008b5c <_sbrk_r+0x1c>)
 8008b44:	2300      	movs	r3, #0
 8008b46:	4604      	mov	r4, r0
 8008b48:	4608      	mov	r0, r1
 8008b4a:	602b      	str	r3, [r5, #0]
 8008b4c:	f7f8 fe04 	bl	8001758 <_sbrk>
 8008b50:	1c43      	adds	r3, r0, #1
 8008b52:	d102      	bne.n	8008b5a <_sbrk_r+0x1a>
 8008b54:	682b      	ldr	r3, [r5, #0]
 8008b56:	b103      	cbz	r3, 8008b5a <_sbrk_r+0x1a>
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	bd38      	pop	{r3, r4, r5, pc}
 8008b5c:	24000868 	.word	0x24000868

08008b60 <nan>:
 8008b60:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008b68 <nan+0x8>
 8008b64:	4770      	bx	lr
 8008b66:	bf00      	nop
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	7ff80000 	.word	0x7ff80000

08008b70 <__assert_func>:
 8008b70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008b72:	4614      	mov	r4, r2
 8008b74:	461a      	mov	r2, r3
 8008b76:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <__assert_func+0x2c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	4605      	mov	r5, r0
 8008b7c:	68d8      	ldr	r0, [r3, #12]
 8008b7e:	b954      	cbnz	r4, 8008b96 <__assert_func+0x26>
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <__assert_func+0x30>)
 8008b82:	461c      	mov	r4, r3
 8008b84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008b88:	9100      	str	r1, [sp, #0]
 8008b8a:	462b      	mov	r3, r5
 8008b8c:	4905      	ldr	r1, [pc, #20]	@ (8008ba4 <__assert_func+0x34>)
 8008b8e:	f000 fba7 	bl	80092e0 <fiprintf>
 8008b92:	f000 fbb7 	bl	8009304 <abort>
 8008b96:	4b04      	ldr	r3, [pc, #16]	@ (8008ba8 <__assert_func+0x38>)
 8008b98:	e7f4      	b.n	8008b84 <__assert_func+0x14>
 8008b9a:	bf00      	nop
 8008b9c:	2400001c 	.word	0x2400001c
 8008ba0:	0800a2ad 	.word	0x0800a2ad
 8008ba4:	0800a27f 	.word	0x0800a27f
 8008ba8:	0800a272 	.word	0x0800a272

08008bac <_calloc_r>:
 8008bac:	b570      	push	{r4, r5, r6, lr}
 8008bae:	fba1 5402 	umull	r5, r4, r1, r2
 8008bb2:	b93c      	cbnz	r4, 8008bc4 <_calloc_r+0x18>
 8008bb4:	4629      	mov	r1, r5
 8008bb6:	f7fe fa25 	bl	8007004 <_malloc_r>
 8008bba:	4606      	mov	r6, r0
 8008bbc:	b928      	cbnz	r0, 8008bca <_calloc_r+0x1e>
 8008bbe:	2600      	movs	r6, #0
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	bd70      	pop	{r4, r5, r6, pc}
 8008bc4:	220c      	movs	r2, #12
 8008bc6:	6002      	str	r2, [r0, #0]
 8008bc8:	e7f9      	b.n	8008bbe <_calloc_r+0x12>
 8008bca:	462a      	mov	r2, r5
 8008bcc:	4621      	mov	r1, r4
 8008bce:	f7fd fb30 	bl	8006232 <memset>
 8008bd2:	e7f5      	b.n	8008bc0 <_calloc_r+0x14>

08008bd4 <rshift>:
 8008bd4:	6903      	ldr	r3, [r0, #16]
 8008bd6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008bda:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bde:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008be2:	f100 0414 	add.w	r4, r0, #20
 8008be6:	dd45      	ble.n	8008c74 <rshift+0xa0>
 8008be8:	f011 011f 	ands.w	r1, r1, #31
 8008bec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008bf0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008bf4:	d10c      	bne.n	8008c10 <rshift+0x3c>
 8008bf6:	f100 0710 	add.w	r7, r0, #16
 8008bfa:	4629      	mov	r1, r5
 8008bfc:	42b1      	cmp	r1, r6
 8008bfe:	d334      	bcc.n	8008c6a <rshift+0x96>
 8008c00:	1a9b      	subs	r3, r3, r2
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	1eea      	subs	r2, r5, #3
 8008c06:	4296      	cmp	r6, r2
 8008c08:	bf38      	it	cc
 8008c0a:	2300      	movcc	r3, #0
 8008c0c:	4423      	add	r3, r4
 8008c0e:	e015      	b.n	8008c3c <rshift+0x68>
 8008c10:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c14:	f1c1 0820 	rsb	r8, r1, #32
 8008c18:	40cf      	lsrs	r7, r1
 8008c1a:	f105 0e04 	add.w	lr, r5, #4
 8008c1e:	46a1      	mov	r9, r4
 8008c20:	4576      	cmp	r6, lr
 8008c22:	46f4      	mov	ip, lr
 8008c24:	d815      	bhi.n	8008c52 <rshift+0x7e>
 8008c26:	1a9a      	subs	r2, r3, r2
 8008c28:	0092      	lsls	r2, r2, #2
 8008c2a:	3a04      	subs	r2, #4
 8008c2c:	3501      	adds	r5, #1
 8008c2e:	42ae      	cmp	r6, r5
 8008c30:	bf38      	it	cc
 8008c32:	2200      	movcc	r2, #0
 8008c34:	18a3      	adds	r3, r4, r2
 8008c36:	50a7      	str	r7, [r4, r2]
 8008c38:	b107      	cbz	r7, 8008c3c <rshift+0x68>
 8008c3a:	3304      	adds	r3, #4
 8008c3c:	1b1a      	subs	r2, r3, r4
 8008c3e:	42a3      	cmp	r3, r4
 8008c40:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c44:	bf08      	it	eq
 8008c46:	2300      	moveq	r3, #0
 8008c48:	6102      	str	r2, [r0, #16]
 8008c4a:	bf08      	it	eq
 8008c4c:	6143      	streq	r3, [r0, #20]
 8008c4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c52:	f8dc c000 	ldr.w	ip, [ip]
 8008c56:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c5a:	ea4c 0707 	orr.w	r7, ip, r7
 8008c5e:	f849 7b04 	str.w	r7, [r9], #4
 8008c62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008c66:	40cf      	lsrs	r7, r1
 8008c68:	e7da      	b.n	8008c20 <rshift+0x4c>
 8008c6a:	f851 cb04 	ldr.w	ip, [r1], #4
 8008c6e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008c72:	e7c3      	b.n	8008bfc <rshift+0x28>
 8008c74:	4623      	mov	r3, r4
 8008c76:	e7e1      	b.n	8008c3c <rshift+0x68>

08008c78 <__hexdig_fun>:
 8008c78:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008c7c:	2b09      	cmp	r3, #9
 8008c7e:	d802      	bhi.n	8008c86 <__hexdig_fun+0xe>
 8008c80:	3820      	subs	r0, #32
 8008c82:	b2c0      	uxtb	r0, r0
 8008c84:	4770      	bx	lr
 8008c86:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008c8a:	2b05      	cmp	r3, #5
 8008c8c:	d801      	bhi.n	8008c92 <__hexdig_fun+0x1a>
 8008c8e:	3847      	subs	r0, #71	@ 0x47
 8008c90:	e7f7      	b.n	8008c82 <__hexdig_fun+0xa>
 8008c92:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008c96:	2b05      	cmp	r3, #5
 8008c98:	d801      	bhi.n	8008c9e <__hexdig_fun+0x26>
 8008c9a:	3827      	subs	r0, #39	@ 0x27
 8008c9c:	e7f1      	b.n	8008c82 <__hexdig_fun+0xa>
 8008c9e:	2000      	movs	r0, #0
 8008ca0:	4770      	bx	lr
	...

08008ca4 <__gethex>:
 8008ca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca8:	b085      	sub	sp, #20
 8008caa:	468a      	mov	sl, r1
 8008cac:	9302      	str	r3, [sp, #8]
 8008cae:	680b      	ldr	r3, [r1, #0]
 8008cb0:	9001      	str	r0, [sp, #4]
 8008cb2:	4690      	mov	r8, r2
 8008cb4:	1c9c      	adds	r4, r3, #2
 8008cb6:	46a1      	mov	r9, r4
 8008cb8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008cbc:	2830      	cmp	r0, #48	@ 0x30
 8008cbe:	d0fa      	beq.n	8008cb6 <__gethex+0x12>
 8008cc0:	eba9 0303 	sub.w	r3, r9, r3
 8008cc4:	f1a3 0b02 	sub.w	fp, r3, #2
 8008cc8:	f7ff ffd6 	bl	8008c78 <__hexdig_fun>
 8008ccc:	4605      	mov	r5, r0
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	d168      	bne.n	8008da4 <__gethex+0x100>
 8008cd2:	49a0      	ldr	r1, [pc, #640]	@ (8008f54 <__gethex+0x2b0>)
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	4648      	mov	r0, r9
 8008cd8:	f7ff ff20 	bl	8008b1c <strncmp>
 8008cdc:	4607      	mov	r7, r0
 8008cde:	2800      	cmp	r0, #0
 8008ce0:	d167      	bne.n	8008db2 <__gethex+0x10e>
 8008ce2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008ce6:	4626      	mov	r6, r4
 8008ce8:	f7ff ffc6 	bl	8008c78 <__hexdig_fun>
 8008cec:	2800      	cmp	r0, #0
 8008cee:	d062      	beq.n	8008db6 <__gethex+0x112>
 8008cf0:	4623      	mov	r3, r4
 8008cf2:	7818      	ldrb	r0, [r3, #0]
 8008cf4:	2830      	cmp	r0, #48	@ 0x30
 8008cf6:	4699      	mov	r9, r3
 8008cf8:	f103 0301 	add.w	r3, r3, #1
 8008cfc:	d0f9      	beq.n	8008cf2 <__gethex+0x4e>
 8008cfe:	f7ff ffbb 	bl	8008c78 <__hexdig_fun>
 8008d02:	fab0 f580 	clz	r5, r0
 8008d06:	096d      	lsrs	r5, r5, #5
 8008d08:	f04f 0b01 	mov.w	fp, #1
 8008d0c:	464a      	mov	r2, r9
 8008d0e:	4616      	mov	r6, r2
 8008d10:	3201      	adds	r2, #1
 8008d12:	7830      	ldrb	r0, [r6, #0]
 8008d14:	f7ff ffb0 	bl	8008c78 <__hexdig_fun>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d1f8      	bne.n	8008d0e <__gethex+0x6a>
 8008d1c:	498d      	ldr	r1, [pc, #564]	@ (8008f54 <__gethex+0x2b0>)
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4630      	mov	r0, r6
 8008d22:	f7ff fefb 	bl	8008b1c <strncmp>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d13f      	bne.n	8008daa <__gethex+0x106>
 8008d2a:	b944      	cbnz	r4, 8008d3e <__gethex+0x9a>
 8008d2c:	1c74      	adds	r4, r6, #1
 8008d2e:	4622      	mov	r2, r4
 8008d30:	4616      	mov	r6, r2
 8008d32:	3201      	adds	r2, #1
 8008d34:	7830      	ldrb	r0, [r6, #0]
 8008d36:	f7ff ff9f 	bl	8008c78 <__hexdig_fun>
 8008d3a:	2800      	cmp	r0, #0
 8008d3c:	d1f8      	bne.n	8008d30 <__gethex+0x8c>
 8008d3e:	1ba4      	subs	r4, r4, r6
 8008d40:	00a7      	lsls	r7, r4, #2
 8008d42:	7833      	ldrb	r3, [r6, #0]
 8008d44:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008d48:	2b50      	cmp	r3, #80	@ 0x50
 8008d4a:	d13e      	bne.n	8008dca <__gethex+0x126>
 8008d4c:	7873      	ldrb	r3, [r6, #1]
 8008d4e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008d50:	d033      	beq.n	8008dba <__gethex+0x116>
 8008d52:	2b2d      	cmp	r3, #45	@ 0x2d
 8008d54:	d034      	beq.n	8008dc0 <__gethex+0x11c>
 8008d56:	1c71      	adds	r1, r6, #1
 8008d58:	2400      	movs	r4, #0
 8008d5a:	7808      	ldrb	r0, [r1, #0]
 8008d5c:	f7ff ff8c 	bl	8008c78 <__hexdig_fun>
 8008d60:	1e43      	subs	r3, r0, #1
 8008d62:	b2db      	uxtb	r3, r3
 8008d64:	2b18      	cmp	r3, #24
 8008d66:	d830      	bhi.n	8008dca <__gethex+0x126>
 8008d68:	f1a0 0210 	sub.w	r2, r0, #16
 8008d6c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008d70:	f7ff ff82 	bl	8008c78 <__hexdig_fun>
 8008d74:	f100 3cff 	add.w	ip, r0, #4294967295
 8008d78:	fa5f fc8c 	uxtb.w	ip, ip
 8008d7c:	f1bc 0f18 	cmp.w	ip, #24
 8008d80:	f04f 030a 	mov.w	r3, #10
 8008d84:	d91e      	bls.n	8008dc4 <__gethex+0x120>
 8008d86:	b104      	cbz	r4, 8008d8a <__gethex+0xe6>
 8008d88:	4252      	negs	r2, r2
 8008d8a:	4417      	add	r7, r2
 8008d8c:	f8ca 1000 	str.w	r1, [sl]
 8008d90:	b1ed      	cbz	r5, 8008dce <__gethex+0x12a>
 8008d92:	f1bb 0f00 	cmp.w	fp, #0
 8008d96:	bf0c      	ite	eq
 8008d98:	2506      	moveq	r5, #6
 8008d9a:	2500      	movne	r5, #0
 8008d9c:	4628      	mov	r0, r5
 8008d9e:	b005      	add	sp, #20
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	2500      	movs	r5, #0
 8008da6:	462c      	mov	r4, r5
 8008da8:	e7b0      	b.n	8008d0c <__gethex+0x68>
 8008daa:	2c00      	cmp	r4, #0
 8008dac:	d1c7      	bne.n	8008d3e <__gethex+0x9a>
 8008dae:	4627      	mov	r7, r4
 8008db0:	e7c7      	b.n	8008d42 <__gethex+0x9e>
 8008db2:	464e      	mov	r6, r9
 8008db4:	462f      	mov	r7, r5
 8008db6:	2501      	movs	r5, #1
 8008db8:	e7c3      	b.n	8008d42 <__gethex+0x9e>
 8008dba:	2400      	movs	r4, #0
 8008dbc:	1cb1      	adds	r1, r6, #2
 8008dbe:	e7cc      	b.n	8008d5a <__gethex+0xb6>
 8008dc0:	2401      	movs	r4, #1
 8008dc2:	e7fb      	b.n	8008dbc <__gethex+0x118>
 8008dc4:	fb03 0002 	mla	r0, r3, r2, r0
 8008dc8:	e7ce      	b.n	8008d68 <__gethex+0xc4>
 8008dca:	4631      	mov	r1, r6
 8008dcc:	e7de      	b.n	8008d8c <__gethex+0xe8>
 8008dce:	eba6 0309 	sub.w	r3, r6, r9
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	4629      	mov	r1, r5
 8008dd6:	2b07      	cmp	r3, #7
 8008dd8:	dc0a      	bgt.n	8008df0 <__gethex+0x14c>
 8008dda:	9801      	ldr	r0, [sp, #4]
 8008ddc:	f7fe f99e 	bl	800711c <_Balloc>
 8008de0:	4604      	mov	r4, r0
 8008de2:	b940      	cbnz	r0, 8008df6 <__gethex+0x152>
 8008de4:	4b5c      	ldr	r3, [pc, #368]	@ (8008f58 <__gethex+0x2b4>)
 8008de6:	4602      	mov	r2, r0
 8008de8:	21e4      	movs	r1, #228	@ 0xe4
 8008dea:	485c      	ldr	r0, [pc, #368]	@ (8008f5c <__gethex+0x2b8>)
 8008dec:	f7ff fec0 	bl	8008b70 <__assert_func>
 8008df0:	3101      	adds	r1, #1
 8008df2:	105b      	asrs	r3, r3, #1
 8008df4:	e7ef      	b.n	8008dd6 <__gethex+0x132>
 8008df6:	f100 0a14 	add.w	sl, r0, #20
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	4655      	mov	r5, sl
 8008dfe:	469b      	mov	fp, r3
 8008e00:	45b1      	cmp	r9, r6
 8008e02:	d337      	bcc.n	8008e74 <__gethex+0x1d0>
 8008e04:	f845 bb04 	str.w	fp, [r5], #4
 8008e08:	eba5 050a 	sub.w	r5, r5, sl
 8008e0c:	10ad      	asrs	r5, r5, #2
 8008e0e:	6125      	str	r5, [r4, #16]
 8008e10:	4658      	mov	r0, fp
 8008e12:	f7fe fa75 	bl	8007300 <__hi0bits>
 8008e16:	016d      	lsls	r5, r5, #5
 8008e18:	f8d8 6000 	ldr.w	r6, [r8]
 8008e1c:	1a2d      	subs	r5, r5, r0
 8008e1e:	42b5      	cmp	r5, r6
 8008e20:	dd54      	ble.n	8008ecc <__gethex+0x228>
 8008e22:	1bad      	subs	r5, r5, r6
 8008e24:	4629      	mov	r1, r5
 8008e26:	4620      	mov	r0, r4
 8008e28:	f7fe fe06 	bl	8007a38 <__any_on>
 8008e2c:	4681      	mov	r9, r0
 8008e2e:	b178      	cbz	r0, 8008e50 <__gethex+0x1ac>
 8008e30:	1e6b      	subs	r3, r5, #1
 8008e32:	1159      	asrs	r1, r3, #5
 8008e34:	f003 021f 	and.w	r2, r3, #31
 8008e38:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e3c:	f04f 0901 	mov.w	r9, #1
 8008e40:	fa09 f202 	lsl.w	r2, r9, r2
 8008e44:	420a      	tst	r2, r1
 8008e46:	d003      	beq.n	8008e50 <__gethex+0x1ac>
 8008e48:	454b      	cmp	r3, r9
 8008e4a:	dc36      	bgt.n	8008eba <__gethex+0x216>
 8008e4c:	f04f 0902 	mov.w	r9, #2
 8008e50:	4629      	mov	r1, r5
 8008e52:	4620      	mov	r0, r4
 8008e54:	f7ff febe 	bl	8008bd4 <rshift>
 8008e58:	442f      	add	r7, r5
 8008e5a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e5e:	42bb      	cmp	r3, r7
 8008e60:	da42      	bge.n	8008ee8 <__gethex+0x244>
 8008e62:	9801      	ldr	r0, [sp, #4]
 8008e64:	4621      	mov	r1, r4
 8008e66:	f7fe f999 	bl	800719c <_Bfree>
 8008e6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	25a3      	movs	r5, #163	@ 0xa3
 8008e72:	e793      	b.n	8008d9c <__gethex+0xf8>
 8008e74:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008e78:	2a2e      	cmp	r2, #46	@ 0x2e
 8008e7a:	d012      	beq.n	8008ea2 <__gethex+0x1fe>
 8008e7c:	2b20      	cmp	r3, #32
 8008e7e:	d104      	bne.n	8008e8a <__gethex+0x1e6>
 8008e80:	f845 bb04 	str.w	fp, [r5], #4
 8008e84:	f04f 0b00 	mov.w	fp, #0
 8008e88:	465b      	mov	r3, fp
 8008e8a:	7830      	ldrb	r0, [r6, #0]
 8008e8c:	9303      	str	r3, [sp, #12]
 8008e8e:	f7ff fef3 	bl	8008c78 <__hexdig_fun>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	f000 000f 	and.w	r0, r0, #15
 8008e98:	4098      	lsls	r0, r3
 8008e9a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	e7ae      	b.n	8008e00 <__gethex+0x15c>
 8008ea2:	45b1      	cmp	r9, r6
 8008ea4:	d8ea      	bhi.n	8008e7c <__gethex+0x1d8>
 8008ea6:	492b      	ldr	r1, [pc, #172]	@ (8008f54 <__gethex+0x2b0>)
 8008ea8:	9303      	str	r3, [sp, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	4630      	mov	r0, r6
 8008eae:	f7ff fe35 	bl	8008b1c <strncmp>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	2800      	cmp	r0, #0
 8008eb6:	d1e1      	bne.n	8008e7c <__gethex+0x1d8>
 8008eb8:	e7a2      	b.n	8008e00 <__gethex+0x15c>
 8008eba:	1ea9      	subs	r1, r5, #2
 8008ebc:	4620      	mov	r0, r4
 8008ebe:	f7fe fdbb 	bl	8007a38 <__any_on>
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	d0c2      	beq.n	8008e4c <__gethex+0x1a8>
 8008ec6:	f04f 0903 	mov.w	r9, #3
 8008eca:	e7c1      	b.n	8008e50 <__gethex+0x1ac>
 8008ecc:	da09      	bge.n	8008ee2 <__gethex+0x23e>
 8008ece:	1b75      	subs	r5, r6, r5
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	9801      	ldr	r0, [sp, #4]
 8008ed4:	462a      	mov	r2, r5
 8008ed6:	f7fe fb79 	bl	80075cc <__lshift>
 8008eda:	1b7f      	subs	r7, r7, r5
 8008edc:	4604      	mov	r4, r0
 8008ede:	f100 0a14 	add.w	sl, r0, #20
 8008ee2:	f04f 0900 	mov.w	r9, #0
 8008ee6:	e7b8      	b.n	8008e5a <__gethex+0x1b6>
 8008ee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008eec:	42bd      	cmp	r5, r7
 8008eee:	dd6f      	ble.n	8008fd0 <__gethex+0x32c>
 8008ef0:	1bed      	subs	r5, r5, r7
 8008ef2:	42ae      	cmp	r6, r5
 8008ef4:	dc34      	bgt.n	8008f60 <__gethex+0x2bc>
 8008ef6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008efa:	2b02      	cmp	r3, #2
 8008efc:	d022      	beq.n	8008f44 <__gethex+0x2a0>
 8008efe:	2b03      	cmp	r3, #3
 8008f00:	d024      	beq.n	8008f4c <__gethex+0x2a8>
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d115      	bne.n	8008f32 <__gethex+0x28e>
 8008f06:	42ae      	cmp	r6, r5
 8008f08:	d113      	bne.n	8008f32 <__gethex+0x28e>
 8008f0a:	2e01      	cmp	r6, #1
 8008f0c:	d10b      	bne.n	8008f26 <__gethex+0x282>
 8008f0e:	9a02      	ldr	r2, [sp, #8]
 8008f10:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	2301      	movs	r3, #1
 8008f18:	6123      	str	r3, [r4, #16]
 8008f1a:	f8ca 3000 	str.w	r3, [sl]
 8008f1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f20:	2562      	movs	r5, #98	@ 0x62
 8008f22:	601c      	str	r4, [r3, #0]
 8008f24:	e73a      	b.n	8008d9c <__gethex+0xf8>
 8008f26:	1e71      	subs	r1, r6, #1
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f7fe fd85 	bl	8007a38 <__any_on>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d1ed      	bne.n	8008f0e <__gethex+0x26a>
 8008f32:	9801      	ldr	r0, [sp, #4]
 8008f34:	4621      	mov	r1, r4
 8008f36:	f7fe f931 	bl	800719c <_Bfree>
 8008f3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	2550      	movs	r5, #80	@ 0x50
 8008f42:	e72b      	b.n	8008d9c <__gethex+0xf8>
 8008f44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d1f3      	bne.n	8008f32 <__gethex+0x28e>
 8008f4a:	e7e0      	b.n	8008f0e <__gethex+0x26a>
 8008f4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1dd      	bne.n	8008f0e <__gethex+0x26a>
 8008f52:	e7ee      	b.n	8008f32 <__gethex+0x28e>
 8008f54:	0800a100 	.word	0x0800a100
 8008f58:	08009f99 	.word	0x08009f99
 8008f5c:	0800a2ae 	.word	0x0800a2ae
 8008f60:	1e6f      	subs	r7, r5, #1
 8008f62:	f1b9 0f00 	cmp.w	r9, #0
 8008f66:	d130      	bne.n	8008fca <__gethex+0x326>
 8008f68:	b127      	cbz	r7, 8008f74 <__gethex+0x2d0>
 8008f6a:	4639      	mov	r1, r7
 8008f6c:	4620      	mov	r0, r4
 8008f6e:	f7fe fd63 	bl	8007a38 <__any_on>
 8008f72:	4681      	mov	r9, r0
 8008f74:	117a      	asrs	r2, r7, #5
 8008f76:	2301      	movs	r3, #1
 8008f78:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008f7c:	f007 071f 	and.w	r7, r7, #31
 8008f80:	40bb      	lsls	r3, r7
 8008f82:	4213      	tst	r3, r2
 8008f84:	4629      	mov	r1, r5
 8008f86:	4620      	mov	r0, r4
 8008f88:	bf18      	it	ne
 8008f8a:	f049 0902 	orrne.w	r9, r9, #2
 8008f8e:	f7ff fe21 	bl	8008bd4 <rshift>
 8008f92:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008f96:	1b76      	subs	r6, r6, r5
 8008f98:	2502      	movs	r5, #2
 8008f9a:	f1b9 0f00 	cmp.w	r9, #0
 8008f9e:	d047      	beq.n	8009030 <__gethex+0x38c>
 8008fa0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008fa4:	2b02      	cmp	r3, #2
 8008fa6:	d015      	beq.n	8008fd4 <__gethex+0x330>
 8008fa8:	2b03      	cmp	r3, #3
 8008faa:	d017      	beq.n	8008fdc <__gethex+0x338>
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d109      	bne.n	8008fc4 <__gethex+0x320>
 8008fb0:	f019 0f02 	tst.w	r9, #2
 8008fb4:	d006      	beq.n	8008fc4 <__gethex+0x320>
 8008fb6:	f8da 3000 	ldr.w	r3, [sl]
 8008fba:	ea49 0903 	orr.w	r9, r9, r3
 8008fbe:	f019 0f01 	tst.w	r9, #1
 8008fc2:	d10e      	bne.n	8008fe2 <__gethex+0x33e>
 8008fc4:	f045 0510 	orr.w	r5, r5, #16
 8008fc8:	e032      	b.n	8009030 <__gethex+0x38c>
 8008fca:	f04f 0901 	mov.w	r9, #1
 8008fce:	e7d1      	b.n	8008f74 <__gethex+0x2d0>
 8008fd0:	2501      	movs	r5, #1
 8008fd2:	e7e2      	b.n	8008f9a <__gethex+0x2f6>
 8008fd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fd6:	f1c3 0301 	rsb	r3, r3, #1
 8008fda:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d0f0      	beq.n	8008fc4 <__gethex+0x320>
 8008fe2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008fe6:	f104 0314 	add.w	r3, r4, #20
 8008fea:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008fee:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008ff2:	f04f 0c00 	mov.w	ip, #0
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ffc:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009000:	d01b      	beq.n	800903a <__gethex+0x396>
 8009002:	3201      	adds	r2, #1
 8009004:	6002      	str	r2, [r0, #0]
 8009006:	2d02      	cmp	r5, #2
 8009008:	f104 0314 	add.w	r3, r4, #20
 800900c:	d13c      	bne.n	8009088 <__gethex+0x3e4>
 800900e:	f8d8 2000 	ldr.w	r2, [r8]
 8009012:	3a01      	subs	r2, #1
 8009014:	42b2      	cmp	r2, r6
 8009016:	d109      	bne.n	800902c <__gethex+0x388>
 8009018:	1171      	asrs	r1, r6, #5
 800901a:	2201      	movs	r2, #1
 800901c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009020:	f006 061f 	and.w	r6, r6, #31
 8009024:	fa02 f606 	lsl.w	r6, r2, r6
 8009028:	421e      	tst	r6, r3
 800902a:	d13a      	bne.n	80090a2 <__gethex+0x3fe>
 800902c:	f045 0520 	orr.w	r5, r5, #32
 8009030:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009032:	601c      	str	r4, [r3, #0]
 8009034:	9b02      	ldr	r3, [sp, #8]
 8009036:	601f      	str	r7, [r3, #0]
 8009038:	e6b0      	b.n	8008d9c <__gethex+0xf8>
 800903a:	4299      	cmp	r1, r3
 800903c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009040:	d8d9      	bhi.n	8008ff6 <__gethex+0x352>
 8009042:	68a3      	ldr	r3, [r4, #8]
 8009044:	459b      	cmp	fp, r3
 8009046:	db17      	blt.n	8009078 <__gethex+0x3d4>
 8009048:	6861      	ldr	r1, [r4, #4]
 800904a:	9801      	ldr	r0, [sp, #4]
 800904c:	3101      	adds	r1, #1
 800904e:	f7fe f865 	bl	800711c <_Balloc>
 8009052:	4681      	mov	r9, r0
 8009054:	b918      	cbnz	r0, 800905e <__gethex+0x3ba>
 8009056:	4b1a      	ldr	r3, [pc, #104]	@ (80090c0 <__gethex+0x41c>)
 8009058:	4602      	mov	r2, r0
 800905a:	2184      	movs	r1, #132	@ 0x84
 800905c:	e6c5      	b.n	8008dea <__gethex+0x146>
 800905e:	6922      	ldr	r2, [r4, #16]
 8009060:	3202      	adds	r2, #2
 8009062:	f104 010c 	add.w	r1, r4, #12
 8009066:	0092      	lsls	r2, r2, #2
 8009068:	300c      	adds	r0, #12
 800906a:	f7fd f962 	bl	8006332 <memcpy>
 800906e:	4621      	mov	r1, r4
 8009070:	9801      	ldr	r0, [sp, #4]
 8009072:	f7fe f893 	bl	800719c <_Bfree>
 8009076:	464c      	mov	r4, r9
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	1c5a      	adds	r2, r3, #1
 800907c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009080:	6122      	str	r2, [r4, #16]
 8009082:	2201      	movs	r2, #1
 8009084:	615a      	str	r2, [r3, #20]
 8009086:	e7be      	b.n	8009006 <__gethex+0x362>
 8009088:	6922      	ldr	r2, [r4, #16]
 800908a:	455a      	cmp	r2, fp
 800908c:	dd0b      	ble.n	80090a6 <__gethex+0x402>
 800908e:	2101      	movs	r1, #1
 8009090:	4620      	mov	r0, r4
 8009092:	f7ff fd9f 	bl	8008bd4 <rshift>
 8009096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800909a:	3701      	adds	r7, #1
 800909c:	42bb      	cmp	r3, r7
 800909e:	f6ff aee0 	blt.w	8008e62 <__gethex+0x1be>
 80090a2:	2501      	movs	r5, #1
 80090a4:	e7c2      	b.n	800902c <__gethex+0x388>
 80090a6:	f016 061f 	ands.w	r6, r6, #31
 80090aa:	d0fa      	beq.n	80090a2 <__gethex+0x3fe>
 80090ac:	4453      	add	r3, sl
 80090ae:	f1c6 0620 	rsb	r6, r6, #32
 80090b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80090b6:	f7fe f923 	bl	8007300 <__hi0bits>
 80090ba:	42b0      	cmp	r0, r6
 80090bc:	dbe7      	blt.n	800908e <__gethex+0x3ea>
 80090be:	e7f0      	b.n	80090a2 <__gethex+0x3fe>
 80090c0:	08009f99 	.word	0x08009f99

080090c4 <L_shift>:
 80090c4:	f1c2 0208 	rsb	r2, r2, #8
 80090c8:	0092      	lsls	r2, r2, #2
 80090ca:	b570      	push	{r4, r5, r6, lr}
 80090cc:	f1c2 0620 	rsb	r6, r2, #32
 80090d0:	6843      	ldr	r3, [r0, #4]
 80090d2:	6804      	ldr	r4, [r0, #0]
 80090d4:	fa03 f506 	lsl.w	r5, r3, r6
 80090d8:	432c      	orrs	r4, r5
 80090da:	40d3      	lsrs	r3, r2
 80090dc:	6004      	str	r4, [r0, #0]
 80090de:	f840 3f04 	str.w	r3, [r0, #4]!
 80090e2:	4288      	cmp	r0, r1
 80090e4:	d3f4      	bcc.n	80090d0 <L_shift+0xc>
 80090e6:	bd70      	pop	{r4, r5, r6, pc}

080090e8 <__match>:
 80090e8:	b530      	push	{r4, r5, lr}
 80090ea:	6803      	ldr	r3, [r0, #0]
 80090ec:	3301      	adds	r3, #1
 80090ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090f2:	b914      	cbnz	r4, 80090fa <__match+0x12>
 80090f4:	6003      	str	r3, [r0, #0]
 80090f6:	2001      	movs	r0, #1
 80090f8:	bd30      	pop	{r4, r5, pc}
 80090fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009102:	2d19      	cmp	r5, #25
 8009104:	bf98      	it	ls
 8009106:	3220      	addls	r2, #32
 8009108:	42a2      	cmp	r2, r4
 800910a:	d0f0      	beq.n	80090ee <__match+0x6>
 800910c:	2000      	movs	r0, #0
 800910e:	e7f3      	b.n	80090f8 <__match+0x10>

08009110 <__hexnan>:
 8009110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009114:	680b      	ldr	r3, [r1, #0]
 8009116:	6801      	ldr	r1, [r0, #0]
 8009118:	115e      	asrs	r6, r3, #5
 800911a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800911e:	f013 031f 	ands.w	r3, r3, #31
 8009122:	b087      	sub	sp, #28
 8009124:	bf18      	it	ne
 8009126:	3604      	addne	r6, #4
 8009128:	2500      	movs	r5, #0
 800912a:	1f37      	subs	r7, r6, #4
 800912c:	4682      	mov	sl, r0
 800912e:	4690      	mov	r8, r2
 8009130:	9301      	str	r3, [sp, #4]
 8009132:	f846 5c04 	str.w	r5, [r6, #-4]
 8009136:	46b9      	mov	r9, r7
 8009138:	463c      	mov	r4, r7
 800913a:	9502      	str	r5, [sp, #8]
 800913c:	46ab      	mov	fp, r5
 800913e:	784a      	ldrb	r2, [r1, #1]
 8009140:	1c4b      	adds	r3, r1, #1
 8009142:	9303      	str	r3, [sp, #12]
 8009144:	b342      	cbz	r2, 8009198 <__hexnan+0x88>
 8009146:	4610      	mov	r0, r2
 8009148:	9105      	str	r1, [sp, #20]
 800914a:	9204      	str	r2, [sp, #16]
 800914c:	f7ff fd94 	bl	8008c78 <__hexdig_fun>
 8009150:	2800      	cmp	r0, #0
 8009152:	d151      	bne.n	80091f8 <__hexnan+0xe8>
 8009154:	9a04      	ldr	r2, [sp, #16]
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	2a20      	cmp	r2, #32
 800915a:	d818      	bhi.n	800918e <__hexnan+0x7e>
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	459b      	cmp	fp, r3
 8009160:	dd13      	ble.n	800918a <__hexnan+0x7a>
 8009162:	454c      	cmp	r4, r9
 8009164:	d206      	bcs.n	8009174 <__hexnan+0x64>
 8009166:	2d07      	cmp	r5, #7
 8009168:	dc04      	bgt.n	8009174 <__hexnan+0x64>
 800916a:	462a      	mov	r2, r5
 800916c:	4649      	mov	r1, r9
 800916e:	4620      	mov	r0, r4
 8009170:	f7ff ffa8 	bl	80090c4 <L_shift>
 8009174:	4544      	cmp	r4, r8
 8009176:	d952      	bls.n	800921e <__hexnan+0x10e>
 8009178:	2300      	movs	r3, #0
 800917a:	f1a4 0904 	sub.w	r9, r4, #4
 800917e:	f844 3c04 	str.w	r3, [r4, #-4]
 8009182:	f8cd b008 	str.w	fp, [sp, #8]
 8009186:	464c      	mov	r4, r9
 8009188:	461d      	mov	r5, r3
 800918a:	9903      	ldr	r1, [sp, #12]
 800918c:	e7d7      	b.n	800913e <__hexnan+0x2e>
 800918e:	2a29      	cmp	r2, #41	@ 0x29
 8009190:	d157      	bne.n	8009242 <__hexnan+0x132>
 8009192:	3102      	adds	r1, #2
 8009194:	f8ca 1000 	str.w	r1, [sl]
 8009198:	f1bb 0f00 	cmp.w	fp, #0
 800919c:	d051      	beq.n	8009242 <__hexnan+0x132>
 800919e:	454c      	cmp	r4, r9
 80091a0:	d206      	bcs.n	80091b0 <__hexnan+0xa0>
 80091a2:	2d07      	cmp	r5, #7
 80091a4:	dc04      	bgt.n	80091b0 <__hexnan+0xa0>
 80091a6:	462a      	mov	r2, r5
 80091a8:	4649      	mov	r1, r9
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7ff ff8a 	bl	80090c4 <L_shift>
 80091b0:	4544      	cmp	r4, r8
 80091b2:	d936      	bls.n	8009222 <__hexnan+0x112>
 80091b4:	f1a8 0204 	sub.w	r2, r8, #4
 80091b8:	4623      	mov	r3, r4
 80091ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80091be:	f842 1f04 	str.w	r1, [r2, #4]!
 80091c2:	429f      	cmp	r7, r3
 80091c4:	d2f9      	bcs.n	80091ba <__hexnan+0xaa>
 80091c6:	1b3b      	subs	r3, r7, r4
 80091c8:	f023 0303 	bic.w	r3, r3, #3
 80091cc:	3304      	adds	r3, #4
 80091ce:	3401      	adds	r4, #1
 80091d0:	3e03      	subs	r6, #3
 80091d2:	42b4      	cmp	r4, r6
 80091d4:	bf88      	it	hi
 80091d6:	2304      	movhi	r3, #4
 80091d8:	4443      	add	r3, r8
 80091da:	2200      	movs	r2, #0
 80091dc:	f843 2b04 	str.w	r2, [r3], #4
 80091e0:	429f      	cmp	r7, r3
 80091e2:	d2fb      	bcs.n	80091dc <__hexnan+0xcc>
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	b91b      	cbnz	r3, 80091f0 <__hexnan+0xe0>
 80091e8:	4547      	cmp	r7, r8
 80091ea:	d128      	bne.n	800923e <__hexnan+0x12e>
 80091ec:	2301      	movs	r3, #1
 80091ee:	603b      	str	r3, [r7, #0]
 80091f0:	2005      	movs	r0, #5
 80091f2:	b007      	add	sp, #28
 80091f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f8:	3501      	adds	r5, #1
 80091fa:	2d08      	cmp	r5, #8
 80091fc:	f10b 0b01 	add.w	fp, fp, #1
 8009200:	dd06      	ble.n	8009210 <__hexnan+0x100>
 8009202:	4544      	cmp	r4, r8
 8009204:	d9c1      	bls.n	800918a <__hexnan+0x7a>
 8009206:	2300      	movs	r3, #0
 8009208:	f844 3c04 	str.w	r3, [r4, #-4]
 800920c:	2501      	movs	r5, #1
 800920e:	3c04      	subs	r4, #4
 8009210:	6822      	ldr	r2, [r4, #0]
 8009212:	f000 000f 	and.w	r0, r0, #15
 8009216:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	e7b5      	b.n	800918a <__hexnan+0x7a>
 800921e:	2508      	movs	r5, #8
 8009220:	e7b3      	b.n	800918a <__hexnan+0x7a>
 8009222:	9b01      	ldr	r3, [sp, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d0dd      	beq.n	80091e4 <__hexnan+0xd4>
 8009228:	f1c3 0320 	rsb	r3, r3, #32
 800922c:	f04f 32ff 	mov.w	r2, #4294967295
 8009230:	40da      	lsrs	r2, r3
 8009232:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009236:	4013      	ands	r3, r2
 8009238:	f846 3c04 	str.w	r3, [r6, #-4]
 800923c:	e7d2      	b.n	80091e4 <__hexnan+0xd4>
 800923e:	3f04      	subs	r7, #4
 8009240:	e7d0      	b.n	80091e4 <__hexnan+0xd4>
 8009242:	2004      	movs	r0, #4
 8009244:	e7d5      	b.n	80091f2 <__hexnan+0xe2>

08009246 <__ascii_mbtowc>:
 8009246:	b082      	sub	sp, #8
 8009248:	b901      	cbnz	r1, 800924c <__ascii_mbtowc+0x6>
 800924a:	a901      	add	r1, sp, #4
 800924c:	b142      	cbz	r2, 8009260 <__ascii_mbtowc+0x1a>
 800924e:	b14b      	cbz	r3, 8009264 <__ascii_mbtowc+0x1e>
 8009250:	7813      	ldrb	r3, [r2, #0]
 8009252:	600b      	str	r3, [r1, #0]
 8009254:	7812      	ldrb	r2, [r2, #0]
 8009256:	1e10      	subs	r0, r2, #0
 8009258:	bf18      	it	ne
 800925a:	2001      	movne	r0, #1
 800925c:	b002      	add	sp, #8
 800925e:	4770      	bx	lr
 8009260:	4610      	mov	r0, r2
 8009262:	e7fb      	b.n	800925c <__ascii_mbtowc+0x16>
 8009264:	f06f 0001 	mvn.w	r0, #1
 8009268:	e7f8      	b.n	800925c <__ascii_mbtowc+0x16>

0800926a <_realloc_r>:
 800926a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800926e:	4680      	mov	r8, r0
 8009270:	4615      	mov	r5, r2
 8009272:	460c      	mov	r4, r1
 8009274:	b921      	cbnz	r1, 8009280 <_realloc_r+0x16>
 8009276:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800927a:	4611      	mov	r1, r2
 800927c:	f7fd bec2 	b.w	8007004 <_malloc_r>
 8009280:	b92a      	cbnz	r2, 800928e <_realloc_r+0x24>
 8009282:	f7fd fe4b 	bl	8006f1c <_free_r>
 8009286:	2400      	movs	r4, #0
 8009288:	4620      	mov	r0, r4
 800928a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928e:	f000 f840 	bl	8009312 <_malloc_usable_size_r>
 8009292:	4285      	cmp	r5, r0
 8009294:	4606      	mov	r6, r0
 8009296:	d802      	bhi.n	800929e <_realloc_r+0x34>
 8009298:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800929c:	d8f4      	bhi.n	8009288 <_realloc_r+0x1e>
 800929e:	4629      	mov	r1, r5
 80092a0:	4640      	mov	r0, r8
 80092a2:	f7fd feaf 	bl	8007004 <_malloc_r>
 80092a6:	4607      	mov	r7, r0
 80092a8:	2800      	cmp	r0, #0
 80092aa:	d0ec      	beq.n	8009286 <_realloc_r+0x1c>
 80092ac:	42b5      	cmp	r5, r6
 80092ae:	462a      	mov	r2, r5
 80092b0:	4621      	mov	r1, r4
 80092b2:	bf28      	it	cs
 80092b4:	4632      	movcs	r2, r6
 80092b6:	f7fd f83c 	bl	8006332 <memcpy>
 80092ba:	4621      	mov	r1, r4
 80092bc:	4640      	mov	r0, r8
 80092be:	f7fd fe2d 	bl	8006f1c <_free_r>
 80092c2:	463c      	mov	r4, r7
 80092c4:	e7e0      	b.n	8009288 <_realloc_r+0x1e>

080092c6 <__ascii_wctomb>:
 80092c6:	4603      	mov	r3, r0
 80092c8:	4608      	mov	r0, r1
 80092ca:	b141      	cbz	r1, 80092de <__ascii_wctomb+0x18>
 80092cc:	2aff      	cmp	r2, #255	@ 0xff
 80092ce:	d904      	bls.n	80092da <__ascii_wctomb+0x14>
 80092d0:	228a      	movs	r2, #138	@ 0x8a
 80092d2:	601a      	str	r2, [r3, #0]
 80092d4:	f04f 30ff 	mov.w	r0, #4294967295
 80092d8:	4770      	bx	lr
 80092da:	700a      	strb	r2, [r1, #0]
 80092dc:	2001      	movs	r0, #1
 80092de:	4770      	bx	lr

080092e0 <fiprintf>:
 80092e0:	b40e      	push	{r1, r2, r3}
 80092e2:	b503      	push	{r0, r1, lr}
 80092e4:	4601      	mov	r1, r0
 80092e6:	ab03      	add	r3, sp, #12
 80092e8:	4805      	ldr	r0, [pc, #20]	@ (8009300 <fiprintf+0x20>)
 80092ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ee:	6800      	ldr	r0, [r0, #0]
 80092f0:	9301      	str	r3, [sp, #4]
 80092f2:	f000 f83f 	bl	8009374 <_vfiprintf_r>
 80092f6:	b002      	add	sp, #8
 80092f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80092fc:	b003      	add	sp, #12
 80092fe:	4770      	bx	lr
 8009300:	2400001c 	.word	0x2400001c

08009304 <abort>:
 8009304:	b508      	push	{r3, lr}
 8009306:	2006      	movs	r0, #6
 8009308:	f000 fa08 	bl	800971c <raise>
 800930c:	2001      	movs	r0, #1
 800930e:	f7f8 f9aa 	bl	8001666 <_exit>

08009312 <_malloc_usable_size_r>:
 8009312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009316:	1f18      	subs	r0, r3, #4
 8009318:	2b00      	cmp	r3, #0
 800931a:	bfbc      	itt	lt
 800931c:	580b      	ldrlt	r3, [r1, r0]
 800931e:	18c0      	addlt	r0, r0, r3
 8009320:	4770      	bx	lr

08009322 <__sfputc_r>:
 8009322:	6893      	ldr	r3, [r2, #8]
 8009324:	3b01      	subs	r3, #1
 8009326:	2b00      	cmp	r3, #0
 8009328:	b410      	push	{r4}
 800932a:	6093      	str	r3, [r2, #8]
 800932c:	da08      	bge.n	8009340 <__sfputc_r+0x1e>
 800932e:	6994      	ldr	r4, [r2, #24]
 8009330:	42a3      	cmp	r3, r4
 8009332:	db01      	blt.n	8009338 <__sfputc_r+0x16>
 8009334:	290a      	cmp	r1, #10
 8009336:	d103      	bne.n	8009340 <__sfputc_r+0x1e>
 8009338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800933c:	f000 b932 	b.w	80095a4 <__swbuf_r>
 8009340:	6813      	ldr	r3, [r2, #0]
 8009342:	1c58      	adds	r0, r3, #1
 8009344:	6010      	str	r0, [r2, #0]
 8009346:	7019      	strb	r1, [r3, #0]
 8009348:	4608      	mov	r0, r1
 800934a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800934e:	4770      	bx	lr

08009350 <__sfputs_r>:
 8009350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009352:	4606      	mov	r6, r0
 8009354:	460f      	mov	r7, r1
 8009356:	4614      	mov	r4, r2
 8009358:	18d5      	adds	r5, r2, r3
 800935a:	42ac      	cmp	r4, r5
 800935c:	d101      	bne.n	8009362 <__sfputs_r+0x12>
 800935e:	2000      	movs	r0, #0
 8009360:	e007      	b.n	8009372 <__sfputs_r+0x22>
 8009362:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009366:	463a      	mov	r2, r7
 8009368:	4630      	mov	r0, r6
 800936a:	f7ff ffda 	bl	8009322 <__sfputc_r>
 800936e:	1c43      	adds	r3, r0, #1
 8009370:	d1f3      	bne.n	800935a <__sfputs_r+0xa>
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009374 <_vfiprintf_r>:
 8009374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009378:	460d      	mov	r5, r1
 800937a:	b09d      	sub	sp, #116	@ 0x74
 800937c:	4614      	mov	r4, r2
 800937e:	4698      	mov	r8, r3
 8009380:	4606      	mov	r6, r0
 8009382:	b118      	cbz	r0, 800938c <_vfiprintf_r+0x18>
 8009384:	6a03      	ldr	r3, [r0, #32]
 8009386:	b90b      	cbnz	r3, 800938c <_vfiprintf_r+0x18>
 8009388:	f7fc feaa 	bl	80060e0 <__sinit>
 800938c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800938e:	07d9      	lsls	r1, r3, #31
 8009390:	d405      	bmi.n	800939e <_vfiprintf_r+0x2a>
 8009392:	89ab      	ldrh	r3, [r5, #12]
 8009394:	059a      	lsls	r2, r3, #22
 8009396:	d402      	bmi.n	800939e <_vfiprintf_r+0x2a>
 8009398:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800939a:	f7fc ffc8 	bl	800632e <__retarget_lock_acquire_recursive>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	071b      	lsls	r3, r3, #28
 80093a2:	d501      	bpl.n	80093a8 <_vfiprintf_r+0x34>
 80093a4:	692b      	ldr	r3, [r5, #16]
 80093a6:	b99b      	cbnz	r3, 80093d0 <_vfiprintf_r+0x5c>
 80093a8:	4629      	mov	r1, r5
 80093aa:	4630      	mov	r0, r6
 80093ac:	f000 f938 	bl	8009620 <__swsetup_r>
 80093b0:	b170      	cbz	r0, 80093d0 <_vfiprintf_r+0x5c>
 80093b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093b4:	07dc      	lsls	r4, r3, #31
 80093b6:	d504      	bpl.n	80093c2 <_vfiprintf_r+0x4e>
 80093b8:	f04f 30ff 	mov.w	r0, #4294967295
 80093bc:	b01d      	add	sp, #116	@ 0x74
 80093be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c2:	89ab      	ldrh	r3, [r5, #12]
 80093c4:	0598      	lsls	r0, r3, #22
 80093c6:	d4f7      	bmi.n	80093b8 <_vfiprintf_r+0x44>
 80093c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093ca:	f7fc ffb1 	bl	8006330 <__retarget_lock_release_recursive>
 80093ce:	e7f3      	b.n	80093b8 <_vfiprintf_r+0x44>
 80093d0:	2300      	movs	r3, #0
 80093d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80093d4:	2320      	movs	r3, #32
 80093d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093da:	f8cd 800c 	str.w	r8, [sp, #12]
 80093de:	2330      	movs	r3, #48	@ 0x30
 80093e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009590 <_vfiprintf_r+0x21c>
 80093e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093e8:	f04f 0901 	mov.w	r9, #1
 80093ec:	4623      	mov	r3, r4
 80093ee:	469a      	mov	sl, r3
 80093f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80093f4:	b10a      	cbz	r2, 80093fa <_vfiprintf_r+0x86>
 80093f6:	2a25      	cmp	r2, #37	@ 0x25
 80093f8:	d1f9      	bne.n	80093ee <_vfiprintf_r+0x7a>
 80093fa:	ebba 0b04 	subs.w	fp, sl, r4
 80093fe:	d00b      	beq.n	8009418 <_vfiprintf_r+0xa4>
 8009400:	465b      	mov	r3, fp
 8009402:	4622      	mov	r2, r4
 8009404:	4629      	mov	r1, r5
 8009406:	4630      	mov	r0, r6
 8009408:	f7ff ffa2 	bl	8009350 <__sfputs_r>
 800940c:	3001      	adds	r0, #1
 800940e:	f000 80a7 	beq.w	8009560 <_vfiprintf_r+0x1ec>
 8009412:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009414:	445a      	add	r2, fp
 8009416:	9209      	str	r2, [sp, #36]	@ 0x24
 8009418:	f89a 3000 	ldrb.w	r3, [sl]
 800941c:	2b00      	cmp	r3, #0
 800941e:	f000 809f 	beq.w	8009560 <_vfiprintf_r+0x1ec>
 8009422:	2300      	movs	r3, #0
 8009424:	f04f 32ff 	mov.w	r2, #4294967295
 8009428:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800942c:	f10a 0a01 	add.w	sl, sl, #1
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	9307      	str	r3, [sp, #28]
 8009434:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009438:	931a      	str	r3, [sp, #104]	@ 0x68
 800943a:	4654      	mov	r4, sl
 800943c:	2205      	movs	r2, #5
 800943e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009442:	4853      	ldr	r0, [pc, #332]	@ (8009590 <_vfiprintf_r+0x21c>)
 8009444:	f7f6 ff4c 	bl	80002e0 <memchr>
 8009448:	9a04      	ldr	r2, [sp, #16]
 800944a:	b9d8      	cbnz	r0, 8009484 <_vfiprintf_r+0x110>
 800944c:	06d1      	lsls	r1, r2, #27
 800944e:	bf44      	itt	mi
 8009450:	2320      	movmi	r3, #32
 8009452:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009456:	0713      	lsls	r3, r2, #28
 8009458:	bf44      	itt	mi
 800945a:	232b      	movmi	r3, #43	@ 0x2b
 800945c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009460:	f89a 3000 	ldrb.w	r3, [sl]
 8009464:	2b2a      	cmp	r3, #42	@ 0x2a
 8009466:	d015      	beq.n	8009494 <_vfiprintf_r+0x120>
 8009468:	9a07      	ldr	r2, [sp, #28]
 800946a:	4654      	mov	r4, sl
 800946c:	2000      	movs	r0, #0
 800946e:	f04f 0c0a 	mov.w	ip, #10
 8009472:	4621      	mov	r1, r4
 8009474:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009478:	3b30      	subs	r3, #48	@ 0x30
 800947a:	2b09      	cmp	r3, #9
 800947c:	d94b      	bls.n	8009516 <_vfiprintf_r+0x1a2>
 800947e:	b1b0      	cbz	r0, 80094ae <_vfiprintf_r+0x13a>
 8009480:	9207      	str	r2, [sp, #28]
 8009482:	e014      	b.n	80094ae <_vfiprintf_r+0x13a>
 8009484:	eba0 0308 	sub.w	r3, r0, r8
 8009488:	fa09 f303 	lsl.w	r3, r9, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	9304      	str	r3, [sp, #16]
 8009490:	46a2      	mov	sl, r4
 8009492:	e7d2      	b.n	800943a <_vfiprintf_r+0xc6>
 8009494:	9b03      	ldr	r3, [sp, #12]
 8009496:	1d19      	adds	r1, r3, #4
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	9103      	str	r1, [sp, #12]
 800949c:	2b00      	cmp	r3, #0
 800949e:	bfbb      	ittet	lt
 80094a0:	425b      	neglt	r3, r3
 80094a2:	f042 0202 	orrlt.w	r2, r2, #2
 80094a6:	9307      	strge	r3, [sp, #28]
 80094a8:	9307      	strlt	r3, [sp, #28]
 80094aa:	bfb8      	it	lt
 80094ac:	9204      	strlt	r2, [sp, #16]
 80094ae:	7823      	ldrb	r3, [r4, #0]
 80094b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80094b2:	d10a      	bne.n	80094ca <_vfiprintf_r+0x156>
 80094b4:	7863      	ldrb	r3, [r4, #1]
 80094b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80094b8:	d132      	bne.n	8009520 <_vfiprintf_r+0x1ac>
 80094ba:	9b03      	ldr	r3, [sp, #12]
 80094bc:	1d1a      	adds	r2, r3, #4
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	9203      	str	r2, [sp, #12]
 80094c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094c6:	3402      	adds	r4, #2
 80094c8:	9305      	str	r3, [sp, #20]
 80094ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095a0 <_vfiprintf_r+0x22c>
 80094ce:	7821      	ldrb	r1, [r4, #0]
 80094d0:	2203      	movs	r2, #3
 80094d2:	4650      	mov	r0, sl
 80094d4:	f7f6 ff04 	bl	80002e0 <memchr>
 80094d8:	b138      	cbz	r0, 80094ea <_vfiprintf_r+0x176>
 80094da:	9b04      	ldr	r3, [sp, #16]
 80094dc:	eba0 000a 	sub.w	r0, r0, sl
 80094e0:	2240      	movs	r2, #64	@ 0x40
 80094e2:	4082      	lsls	r2, r0
 80094e4:	4313      	orrs	r3, r2
 80094e6:	3401      	adds	r4, #1
 80094e8:	9304      	str	r3, [sp, #16]
 80094ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ee:	4829      	ldr	r0, [pc, #164]	@ (8009594 <_vfiprintf_r+0x220>)
 80094f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80094f4:	2206      	movs	r2, #6
 80094f6:	f7f6 fef3 	bl	80002e0 <memchr>
 80094fa:	2800      	cmp	r0, #0
 80094fc:	d03f      	beq.n	800957e <_vfiprintf_r+0x20a>
 80094fe:	4b26      	ldr	r3, [pc, #152]	@ (8009598 <_vfiprintf_r+0x224>)
 8009500:	bb1b      	cbnz	r3, 800954a <_vfiprintf_r+0x1d6>
 8009502:	9b03      	ldr	r3, [sp, #12]
 8009504:	3307      	adds	r3, #7
 8009506:	f023 0307 	bic.w	r3, r3, #7
 800950a:	3308      	adds	r3, #8
 800950c:	9303      	str	r3, [sp, #12]
 800950e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009510:	443b      	add	r3, r7
 8009512:	9309      	str	r3, [sp, #36]	@ 0x24
 8009514:	e76a      	b.n	80093ec <_vfiprintf_r+0x78>
 8009516:	fb0c 3202 	mla	r2, ip, r2, r3
 800951a:	460c      	mov	r4, r1
 800951c:	2001      	movs	r0, #1
 800951e:	e7a8      	b.n	8009472 <_vfiprintf_r+0xfe>
 8009520:	2300      	movs	r3, #0
 8009522:	3401      	adds	r4, #1
 8009524:	9305      	str	r3, [sp, #20]
 8009526:	4619      	mov	r1, r3
 8009528:	f04f 0c0a 	mov.w	ip, #10
 800952c:	4620      	mov	r0, r4
 800952e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009532:	3a30      	subs	r2, #48	@ 0x30
 8009534:	2a09      	cmp	r2, #9
 8009536:	d903      	bls.n	8009540 <_vfiprintf_r+0x1cc>
 8009538:	2b00      	cmp	r3, #0
 800953a:	d0c6      	beq.n	80094ca <_vfiprintf_r+0x156>
 800953c:	9105      	str	r1, [sp, #20]
 800953e:	e7c4      	b.n	80094ca <_vfiprintf_r+0x156>
 8009540:	fb0c 2101 	mla	r1, ip, r1, r2
 8009544:	4604      	mov	r4, r0
 8009546:	2301      	movs	r3, #1
 8009548:	e7f0      	b.n	800952c <_vfiprintf_r+0x1b8>
 800954a:	ab03      	add	r3, sp, #12
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	462a      	mov	r2, r5
 8009550:	4b12      	ldr	r3, [pc, #72]	@ (800959c <_vfiprintf_r+0x228>)
 8009552:	a904      	add	r1, sp, #16
 8009554:	4630      	mov	r0, r6
 8009556:	f7fb ff83 	bl	8005460 <_printf_float>
 800955a:	4607      	mov	r7, r0
 800955c:	1c78      	adds	r0, r7, #1
 800955e:	d1d6      	bne.n	800950e <_vfiprintf_r+0x19a>
 8009560:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009562:	07d9      	lsls	r1, r3, #31
 8009564:	d405      	bmi.n	8009572 <_vfiprintf_r+0x1fe>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	059a      	lsls	r2, r3, #22
 800956a:	d402      	bmi.n	8009572 <_vfiprintf_r+0x1fe>
 800956c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800956e:	f7fc fedf 	bl	8006330 <__retarget_lock_release_recursive>
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	065b      	lsls	r3, r3, #25
 8009576:	f53f af1f 	bmi.w	80093b8 <_vfiprintf_r+0x44>
 800957a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800957c:	e71e      	b.n	80093bc <_vfiprintf_r+0x48>
 800957e:	ab03      	add	r3, sp, #12
 8009580:	9300      	str	r3, [sp, #0]
 8009582:	462a      	mov	r2, r5
 8009584:	4b05      	ldr	r3, [pc, #20]	@ (800959c <_vfiprintf_r+0x228>)
 8009586:	a904      	add	r1, sp, #16
 8009588:	4630      	mov	r0, r6
 800958a:	f7fc f9f1 	bl	8005970 <_printf_i>
 800958e:	e7e4      	b.n	800955a <_vfiprintf_r+0x1e6>
 8009590:	0800a259 	.word	0x0800a259
 8009594:	0800a263 	.word	0x0800a263
 8009598:	08005461 	.word	0x08005461
 800959c:	08009351 	.word	0x08009351
 80095a0:	0800a25f 	.word	0x0800a25f

080095a4 <__swbuf_r>:
 80095a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095a6:	460e      	mov	r6, r1
 80095a8:	4614      	mov	r4, r2
 80095aa:	4605      	mov	r5, r0
 80095ac:	b118      	cbz	r0, 80095b6 <__swbuf_r+0x12>
 80095ae:	6a03      	ldr	r3, [r0, #32]
 80095b0:	b90b      	cbnz	r3, 80095b6 <__swbuf_r+0x12>
 80095b2:	f7fc fd95 	bl	80060e0 <__sinit>
 80095b6:	69a3      	ldr	r3, [r4, #24]
 80095b8:	60a3      	str	r3, [r4, #8]
 80095ba:	89a3      	ldrh	r3, [r4, #12]
 80095bc:	071a      	lsls	r2, r3, #28
 80095be:	d501      	bpl.n	80095c4 <__swbuf_r+0x20>
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	b943      	cbnz	r3, 80095d6 <__swbuf_r+0x32>
 80095c4:	4621      	mov	r1, r4
 80095c6:	4628      	mov	r0, r5
 80095c8:	f000 f82a 	bl	8009620 <__swsetup_r>
 80095cc:	b118      	cbz	r0, 80095d6 <__swbuf_r+0x32>
 80095ce:	f04f 37ff 	mov.w	r7, #4294967295
 80095d2:	4638      	mov	r0, r7
 80095d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095d6:	6823      	ldr	r3, [r4, #0]
 80095d8:	6922      	ldr	r2, [r4, #16]
 80095da:	1a98      	subs	r0, r3, r2
 80095dc:	6963      	ldr	r3, [r4, #20]
 80095de:	b2f6      	uxtb	r6, r6
 80095e0:	4283      	cmp	r3, r0
 80095e2:	4637      	mov	r7, r6
 80095e4:	dc05      	bgt.n	80095f2 <__swbuf_r+0x4e>
 80095e6:	4621      	mov	r1, r4
 80095e8:	4628      	mov	r0, r5
 80095ea:	f7ff fa55 	bl	8008a98 <_fflush_r>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d1ed      	bne.n	80095ce <__swbuf_r+0x2a>
 80095f2:	68a3      	ldr	r3, [r4, #8]
 80095f4:	3b01      	subs	r3, #1
 80095f6:	60a3      	str	r3, [r4, #8]
 80095f8:	6823      	ldr	r3, [r4, #0]
 80095fa:	1c5a      	adds	r2, r3, #1
 80095fc:	6022      	str	r2, [r4, #0]
 80095fe:	701e      	strb	r6, [r3, #0]
 8009600:	6962      	ldr	r2, [r4, #20]
 8009602:	1c43      	adds	r3, r0, #1
 8009604:	429a      	cmp	r2, r3
 8009606:	d004      	beq.n	8009612 <__swbuf_r+0x6e>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	07db      	lsls	r3, r3, #31
 800960c:	d5e1      	bpl.n	80095d2 <__swbuf_r+0x2e>
 800960e:	2e0a      	cmp	r6, #10
 8009610:	d1df      	bne.n	80095d2 <__swbuf_r+0x2e>
 8009612:	4621      	mov	r1, r4
 8009614:	4628      	mov	r0, r5
 8009616:	f7ff fa3f 	bl	8008a98 <_fflush_r>
 800961a:	2800      	cmp	r0, #0
 800961c:	d0d9      	beq.n	80095d2 <__swbuf_r+0x2e>
 800961e:	e7d6      	b.n	80095ce <__swbuf_r+0x2a>

08009620 <__swsetup_r>:
 8009620:	b538      	push	{r3, r4, r5, lr}
 8009622:	4b29      	ldr	r3, [pc, #164]	@ (80096c8 <__swsetup_r+0xa8>)
 8009624:	4605      	mov	r5, r0
 8009626:	6818      	ldr	r0, [r3, #0]
 8009628:	460c      	mov	r4, r1
 800962a:	b118      	cbz	r0, 8009634 <__swsetup_r+0x14>
 800962c:	6a03      	ldr	r3, [r0, #32]
 800962e:	b90b      	cbnz	r3, 8009634 <__swsetup_r+0x14>
 8009630:	f7fc fd56 	bl	80060e0 <__sinit>
 8009634:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009638:	0719      	lsls	r1, r3, #28
 800963a:	d422      	bmi.n	8009682 <__swsetup_r+0x62>
 800963c:	06da      	lsls	r2, r3, #27
 800963e:	d407      	bmi.n	8009650 <__swsetup_r+0x30>
 8009640:	2209      	movs	r2, #9
 8009642:	602a      	str	r2, [r5, #0]
 8009644:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009648:	81a3      	strh	r3, [r4, #12]
 800964a:	f04f 30ff 	mov.w	r0, #4294967295
 800964e:	e033      	b.n	80096b8 <__swsetup_r+0x98>
 8009650:	0758      	lsls	r0, r3, #29
 8009652:	d512      	bpl.n	800967a <__swsetup_r+0x5a>
 8009654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009656:	b141      	cbz	r1, 800966a <__swsetup_r+0x4a>
 8009658:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800965c:	4299      	cmp	r1, r3
 800965e:	d002      	beq.n	8009666 <__swsetup_r+0x46>
 8009660:	4628      	mov	r0, r5
 8009662:	f7fd fc5b 	bl	8006f1c <_free_r>
 8009666:	2300      	movs	r3, #0
 8009668:	6363      	str	r3, [r4, #52]	@ 0x34
 800966a:	89a3      	ldrh	r3, [r4, #12]
 800966c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009670:	81a3      	strh	r3, [r4, #12]
 8009672:	2300      	movs	r3, #0
 8009674:	6063      	str	r3, [r4, #4]
 8009676:	6923      	ldr	r3, [r4, #16]
 8009678:	6023      	str	r3, [r4, #0]
 800967a:	89a3      	ldrh	r3, [r4, #12]
 800967c:	f043 0308 	orr.w	r3, r3, #8
 8009680:	81a3      	strh	r3, [r4, #12]
 8009682:	6923      	ldr	r3, [r4, #16]
 8009684:	b94b      	cbnz	r3, 800969a <__swsetup_r+0x7a>
 8009686:	89a3      	ldrh	r3, [r4, #12]
 8009688:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800968c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009690:	d003      	beq.n	800969a <__swsetup_r+0x7a>
 8009692:	4621      	mov	r1, r4
 8009694:	4628      	mov	r0, r5
 8009696:	f000 f883 	bl	80097a0 <__smakebuf_r>
 800969a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969e:	f013 0201 	ands.w	r2, r3, #1
 80096a2:	d00a      	beq.n	80096ba <__swsetup_r+0x9a>
 80096a4:	2200      	movs	r2, #0
 80096a6:	60a2      	str	r2, [r4, #8]
 80096a8:	6962      	ldr	r2, [r4, #20]
 80096aa:	4252      	negs	r2, r2
 80096ac:	61a2      	str	r2, [r4, #24]
 80096ae:	6922      	ldr	r2, [r4, #16]
 80096b0:	b942      	cbnz	r2, 80096c4 <__swsetup_r+0xa4>
 80096b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80096b6:	d1c5      	bne.n	8009644 <__swsetup_r+0x24>
 80096b8:	bd38      	pop	{r3, r4, r5, pc}
 80096ba:	0799      	lsls	r1, r3, #30
 80096bc:	bf58      	it	pl
 80096be:	6962      	ldrpl	r2, [r4, #20]
 80096c0:	60a2      	str	r2, [r4, #8]
 80096c2:	e7f4      	b.n	80096ae <__swsetup_r+0x8e>
 80096c4:	2000      	movs	r0, #0
 80096c6:	e7f7      	b.n	80096b8 <__swsetup_r+0x98>
 80096c8:	2400001c 	.word	0x2400001c

080096cc <_raise_r>:
 80096cc:	291f      	cmp	r1, #31
 80096ce:	b538      	push	{r3, r4, r5, lr}
 80096d0:	4605      	mov	r5, r0
 80096d2:	460c      	mov	r4, r1
 80096d4:	d904      	bls.n	80096e0 <_raise_r+0x14>
 80096d6:	2316      	movs	r3, #22
 80096d8:	6003      	str	r3, [r0, #0]
 80096da:	f04f 30ff 	mov.w	r0, #4294967295
 80096de:	bd38      	pop	{r3, r4, r5, pc}
 80096e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80096e2:	b112      	cbz	r2, 80096ea <_raise_r+0x1e>
 80096e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096e8:	b94b      	cbnz	r3, 80096fe <_raise_r+0x32>
 80096ea:	4628      	mov	r0, r5
 80096ec:	f000 f830 	bl	8009750 <_getpid_r>
 80096f0:	4622      	mov	r2, r4
 80096f2:	4601      	mov	r1, r0
 80096f4:	4628      	mov	r0, r5
 80096f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096fa:	f000 b817 	b.w	800972c <_kill_r>
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d00a      	beq.n	8009718 <_raise_r+0x4c>
 8009702:	1c59      	adds	r1, r3, #1
 8009704:	d103      	bne.n	800970e <_raise_r+0x42>
 8009706:	2316      	movs	r3, #22
 8009708:	6003      	str	r3, [r0, #0]
 800970a:	2001      	movs	r0, #1
 800970c:	e7e7      	b.n	80096de <_raise_r+0x12>
 800970e:	2100      	movs	r1, #0
 8009710:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009714:	4620      	mov	r0, r4
 8009716:	4798      	blx	r3
 8009718:	2000      	movs	r0, #0
 800971a:	e7e0      	b.n	80096de <_raise_r+0x12>

0800971c <raise>:
 800971c:	4b02      	ldr	r3, [pc, #8]	@ (8009728 <raise+0xc>)
 800971e:	4601      	mov	r1, r0
 8009720:	6818      	ldr	r0, [r3, #0]
 8009722:	f7ff bfd3 	b.w	80096cc <_raise_r>
 8009726:	bf00      	nop
 8009728:	2400001c 	.word	0x2400001c

0800972c <_kill_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d07      	ldr	r5, [pc, #28]	@ (800974c <_kill_r+0x20>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	4611      	mov	r1, r2
 8009738:	602b      	str	r3, [r5, #0]
 800973a:	f7f7 ff84 	bl	8001646 <_kill>
 800973e:	1c43      	adds	r3, r0, #1
 8009740:	d102      	bne.n	8009748 <_kill_r+0x1c>
 8009742:	682b      	ldr	r3, [r5, #0]
 8009744:	b103      	cbz	r3, 8009748 <_kill_r+0x1c>
 8009746:	6023      	str	r3, [r4, #0]
 8009748:	bd38      	pop	{r3, r4, r5, pc}
 800974a:	bf00      	nop
 800974c:	24000868 	.word	0x24000868

08009750 <_getpid_r>:
 8009750:	f7f7 bf71 	b.w	8001636 <_getpid>

08009754 <__swhatbuf_r>:
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	460c      	mov	r4, r1
 8009758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800975c:	2900      	cmp	r1, #0
 800975e:	b096      	sub	sp, #88	@ 0x58
 8009760:	4615      	mov	r5, r2
 8009762:	461e      	mov	r6, r3
 8009764:	da0d      	bge.n	8009782 <__swhatbuf_r+0x2e>
 8009766:	89a3      	ldrh	r3, [r4, #12]
 8009768:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800976c:	f04f 0100 	mov.w	r1, #0
 8009770:	bf14      	ite	ne
 8009772:	2340      	movne	r3, #64	@ 0x40
 8009774:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009778:	2000      	movs	r0, #0
 800977a:	6031      	str	r1, [r6, #0]
 800977c:	602b      	str	r3, [r5, #0]
 800977e:	b016      	add	sp, #88	@ 0x58
 8009780:	bd70      	pop	{r4, r5, r6, pc}
 8009782:	466a      	mov	r2, sp
 8009784:	f000 f848 	bl	8009818 <_fstat_r>
 8009788:	2800      	cmp	r0, #0
 800978a:	dbec      	blt.n	8009766 <__swhatbuf_r+0x12>
 800978c:	9901      	ldr	r1, [sp, #4]
 800978e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009792:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009796:	4259      	negs	r1, r3
 8009798:	4159      	adcs	r1, r3
 800979a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800979e:	e7eb      	b.n	8009778 <__swhatbuf_r+0x24>

080097a0 <__smakebuf_r>:
 80097a0:	898b      	ldrh	r3, [r1, #12]
 80097a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097a4:	079d      	lsls	r5, r3, #30
 80097a6:	4606      	mov	r6, r0
 80097a8:	460c      	mov	r4, r1
 80097aa:	d507      	bpl.n	80097bc <__smakebuf_r+0x1c>
 80097ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097b0:	6023      	str	r3, [r4, #0]
 80097b2:	6123      	str	r3, [r4, #16]
 80097b4:	2301      	movs	r3, #1
 80097b6:	6163      	str	r3, [r4, #20]
 80097b8:	b003      	add	sp, #12
 80097ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097bc:	ab01      	add	r3, sp, #4
 80097be:	466a      	mov	r2, sp
 80097c0:	f7ff ffc8 	bl	8009754 <__swhatbuf_r>
 80097c4:	9f00      	ldr	r7, [sp, #0]
 80097c6:	4605      	mov	r5, r0
 80097c8:	4639      	mov	r1, r7
 80097ca:	4630      	mov	r0, r6
 80097cc:	f7fd fc1a 	bl	8007004 <_malloc_r>
 80097d0:	b948      	cbnz	r0, 80097e6 <__smakebuf_r+0x46>
 80097d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d6:	059a      	lsls	r2, r3, #22
 80097d8:	d4ee      	bmi.n	80097b8 <__smakebuf_r+0x18>
 80097da:	f023 0303 	bic.w	r3, r3, #3
 80097de:	f043 0302 	orr.w	r3, r3, #2
 80097e2:	81a3      	strh	r3, [r4, #12]
 80097e4:	e7e2      	b.n	80097ac <__smakebuf_r+0xc>
 80097e6:	89a3      	ldrh	r3, [r4, #12]
 80097e8:	6020      	str	r0, [r4, #0]
 80097ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097ee:	81a3      	strh	r3, [r4, #12]
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097f6:	b15b      	cbz	r3, 8009810 <__smakebuf_r+0x70>
 80097f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097fc:	4630      	mov	r0, r6
 80097fe:	f000 f81d 	bl	800983c <_isatty_r>
 8009802:	b128      	cbz	r0, 8009810 <__smakebuf_r+0x70>
 8009804:	89a3      	ldrh	r3, [r4, #12]
 8009806:	f023 0303 	bic.w	r3, r3, #3
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	81a3      	strh	r3, [r4, #12]
 8009810:	89a3      	ldrh	r3, [r4, #12]
 8009812:	431d      	orrs	r5, r3
 8009814:	81a5      	strh	r5, [r4, #12]
 8009816:	e7cf      	b.n	80097b8 <__smakebuf_r+0x18>

08009818 <_fstat_r>:
 8009818:	b538      	push	{r3, r4, r5, lr}
 800981a:	4d07      	ldr	r5, [pc, #28]	@ (8009838 <_fstat_r+0x20>)
 800981c:	2300      	movs	r3, #0
 800981e:	4604      	mov	r4, r0
 8009820:	4608      	mov	r0, r1
 8009822:	4611      	mov	r1, r2
 8009824:	602b      	str	r3, [r5, #0]
 8009826:	f7f7 ff6e 	bl	8001706 <_fstat>
 800982a:	1c43      	adds	r3, r0, #1
 800982c:	d102      	bne.n	8009834 <_fstat_r+0x1c>
 800982e:	682b      	ldr	r3, [r5, #0]
 8009830:	b103      	cbz	r3, 8009834 <_fstat_r+0x1c>
 8009832:	6023      	str	r3, [r4, #0]
 8009834:	bd38      	pop	{r3, r4, r5, pc}
 8009836:	bf00      	nop
 8009838:	24000868 	.word	0x24000868

0800983c <_isatty_r>:
 800983c:	b538      	push	{r3, r4, r5, lr}
 800983e:	4d06      	ldr	r5, [pc, #24]	@ (8009858 <_isatty_r+0x1c>)
 8009840:	2300      	movs	r3, #0
 8009842:	4604      	mov	r4, r0
 8009844:	4608      	mov	r0, r1
 8009846:	602b      	str	r3, [r5, #0]
 8009848:	f7f7 ff6d 	bl	8001726 <_isatty>
 800984c:	1c43      	adds	r3, r0, #1
 800984e:	d102      	bne.n	8009856 <_isatty_r+0x1a>
 8009850:	682b      	ldr	r3, [r5, #0]
 8009852:	b103      	cbz	r3, 8009856 <_isatty_r+0x1a>
 8009854:	6023      	str	r3, [r4, #0]
 8009856:	bd38      	pop	{r3, r4, r5, pc}
 8009858:	24000868 	.word	0x24000868

0800985c <_init>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	bf00      	nop
 8009860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009862:	bc08      	pop	{r3}
 8009864:	469e      	mov	lr, r3
 8009866:	4770      	bx	lr

08009868 <_fini>:
 8009868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986a:	bf00      	nop
 800986c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800986e:	bc08      	pop	{r3}
 8009870:	469e      	mov	lr, r3
 8009872:	4770      	bx	lr
