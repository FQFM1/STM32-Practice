
PWM_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030d4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800336c  0800336c  0000436c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800337c  0800337c  0000437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08003380  08003380  00004380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08003384  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  24000010  08003394  00005010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  240000c8  08003394  000050c8  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000c4c0  00000000  00000000  0000503e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018fe  00000000  00000000  000114fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000ba0  00000000  00000000  00012e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000008f9  00000000  00000000  000139a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003579c  00000000  00000000  00014299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000d4a7  00000000  00000000  00049a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00159f00  00000000  00000000  00056edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001b0ddc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000030a8  00000000  00000000  001b0e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005b  00000000  00000000  001b3ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003354 	.word	0x08003354

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08003354 	.word	0x08003354

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 fa13 	bl	8000708 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fbd9 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f82d 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f9d5 	bl	8000698 <MX_GPIO_Init>
  MX_TIM3_Init();
 80002ee:	f000 f94f 	bl	8000590 <MX_TIM3_Init>
  MX_TIM2_Init();
 80002f2:	f000 f8d7 	bl	80004a4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80002f6:	210c      	movs	r1, #12
 80002f8:	4811      	ldr	r0, [pc, #68]	@ (8000340 <main+0x68>)
 80002fa:	f002 f817 	bl	800232c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for (int i = 0; i < 100; i++)
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e009      	b.n	8000318 <main+0x40>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8000304:	4b0e      	ldr	r3, [pc, #56]	@ (8000340 <main+0x68>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	687a      	ldr	r2, [r7, #4]
 800030a:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_Delay(10);
 800030c:	200a      	movs	r0, #10
 800030e:	f000 fc55 	bl	8000bbc <HAL_Delay>
	  for (int i = 0; i < 100; i++)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	3301      	adds	r3, #1
 8000316:	607b      	str	r3, [r7, #4]
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	2b63      	cmp	r3, #99	@ 0x63
 800031c:	ddf2      	ble.n	8000304 <main+0x2c>
	  }
	  for (int i = 100; i > 0; i--)
 800031e:	2364      	movs	r3, #100	@ 0x64
 8000320:	603b      	str	r3, [r7, #0]
 8000322:	e009      	b.n	8000338 <main+0x60>
	  {
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, i);
 8000324:	4b06      	ldr	r3, [pc, #24]	@ (8000340 <main+0x68>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	641a      	str	r2, [r3, #64]	@ 0x40
		  HAL_Delay(10);
 800032c:	200a      	movs	r0, #10
 800032e:	f000 fc45 	bl	8000bbc <HAL_Delay>
	  for (int i = 100; i > 0; i--)
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	3b01      	subs	r3, #1
 8000336:	603b      	str	r3, [r7, #0]
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	dcf2      	bgt.n	8000324 <main+0x4c>
	  for (int i = 0; i < 100; i++)
 800033e:	e7de      	b.n	80002fe <main+0x26>
 8000340:	2400002c 	.word	0x2400002c

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b09e      	sub	sp, #120	@ 0x78
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800034e:	224c      	movs	r2, #76	@ 0x4c
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f002 ffd2 	bl	80032fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	f107 030c 	add.w	r3, r7, #12
 800035c:	2220      	movs	r2, #32
 800035e:	2100      	movs	r1, #0
 8000360:	4618      	mov	r0, r3
 8000362:	f002 ffcb 	bl	80032fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000366:	2002      	movs	r0, #2
 8000368:	f000 ff64 	bl	8001234 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800036c:	2300      	movs	r3, #0
 800036e:	60bb      	str	r3, [r7, #8]
 8000370:	4b49      	ldr	r3, [pc, #292]	@ (8000498 <SystemClock_Config+0x154>)
 8000372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000374:	4a48      	ldr	r2, [pc, #288]	@ (8000498 <SystemClock_Config+0x154>)
 8000376:	f023 0301 	bic.w	r3, r3, #1
 800037a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800037c:	4b46      	ldr	r3, [pc, #280]	@ (8000498 <SystemClock_Config+0x154>)
 800037e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	60bb      	str	r3, [r7, #8]
 8000386:	4b45      	ldr	r3, [pc, #276]	@ (800049c <SystemClock_Config+0x158>)
 8000388:	699b      	ldr	r3, [r3, #24]
 800038a:	4a44      	ldr	r2, [pc, #272]	@ (800049c <SystemClock_Config+0x158>)
 800038c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000390:	6193      	str	r3, [r2, #24]
 8000392:	4b42      	ldr	r3, [pc, #264]	@ (800049c <SystemClock_Config+0x158>)
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800039a:	60bb      	str	r3, [r7, #8]
 800039c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800039e:	bf00      	nop
 80003a0:	4b3e      	ldr	r3, [pc, #248]	@ (800049c <SystemClock_Config+0x158>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80003a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80003ac:	d1f8      	bne.n	80003a0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ae:	4b3c      	ldr	r3, [pc, #240]	@ (80004a0 <SystemClock_Config+0x15c>)
 80003b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003b4:	4a3a      	ldr	r2, [pc, #232]	@ (80004a0 <SystemClock_Config+0x15c>)
 80003b6:	f043 0302 	orr.w	r3, r3, #2
 80003ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80003be:	4b38      	ldr	r3, [pc, #224]	@ (80004a0 <SystemClock_Config+0x15c>)
 80003c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80003c4:	f003 0302 	and.w	r3, r3, #2
 80003c8:	607b      	str	r3, [r7, #4]
 80003ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80003cc:	2300      	movs	r3, #0
 80003ce:	603b      	str	r3, [r7, #0]
 80003d0:	4b32      	ldr	r3, [pc, #200]	@ (800049c <SystemClock_Config+0x158>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a31      	ldr	r2, [pc, #196]	@ (800049c <SystemClock_Config+0x158>)
 80003d6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80003da:	6193      	str	r3, [r2, #24]
 80003dc:	4b2f      	ldr	r3, [pc, #188]	@ (800049c <SystemClock_Config+0x158>)
 80003de:	699b      	ldr	r3, [r3, #24]
 80003e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80003e4:	603b      	str	r3, [r7, #0]
 80003e6:	4b2c      	ldr	r3, [pc, #176]	@ (8000498 <SystemClock_Config+0x154>)
 80003e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000498 <SystemClock_Config+0x154>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80003f2:	4b29      	ldr	r3, [pc, #164]	@ (8000498 <SystemClock_Config+0x154>)
 80003f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80003fe:	bf00      	nop
 8000400:	4b26      	ldr	r3, [pc, #152]	@ (800049c <SystemClock_Config+0x158>)
 8000402:	699b      	ldr	r3, [r3, #24]
 8000404:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000408:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800040c:	d1f8      	bne.n	8000400 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800040e:	2302      	movs	r3, #2
 8000410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000412:	2301      	movs	r3, #1
 8000414:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000416:	2340      	movs	r3, #64	@ 0x40
 8000418:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800041a:	2302      	movs	r3, #2
 800041c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800041e:	2300      	movs	r3, #0
 8000420:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000422:	2304      	movs	r3, #4
 8000424:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000426:	233c      	movs	r3, #60	@ 0x3c
 8000428:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800042a:	2302      	movs	r3, #2
 800042c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800042e:	2302      	movs	r3, #2
 8000430:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000432:	2302      	movs	r3, #2
 8000434:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000436:	230c      	movs	r3, #12
 8000438:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800043a:	2300      	movs	r3, #0
 800043c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800043e:	2300      	movs	r3, #0
 8000440:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000446:	4618      	mov	r0, r3
 8000448:	f000 ff2e 	bl	80012a8 <HAL_RCC_OscConfig>
 800044c:	4603      	mov	r3, r0
 800044e:	2b00      	cmp	r3, #0
 8000450:	d001      	beq.n	8000456 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000452:	f000 f985 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000456:	233f      	movs	r3, #63	@ 0x3f
 8000458:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045a:	2303      	movs	r3, #3
 800045c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	2300      	movs	r3, #0
 8000460:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000462:	2308      	movs	r3, #8
 8000464:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000466:	2340      	movs	r3, #64	@ 0x40
 8000468:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800046a:	2340      	movs	r3, #64	@ 0x40
 800046c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800046e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000472:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000474:	2340      	movs	r3, #64	@ 0x40
 8000476:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000478:	f107 030c 	add.w	r3, r7, #12
 800047c:	2104      	movs	r1, #4
 800047e:	4618      	mov	r0, r3
 8000480:	f001 fb6c 	bl	8001b5c <HAL_RCC_ClockConfig>
 8000484:	4603      	mov	r3, r0
 8000486:	2b00      	cmp	r3, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800048a:	f000 f969 	bl	8000760 <Error_Handler>
  }
}
 800048e:	bf00      	nop
 8000490:	3778      	adds	r7, #120	@ 0x78
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	58000400 	.word	0x58000400
 800049c:	58024800 	.word	0x58024800
 80004a0:	58024400 	.word	0x58024400

080004a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b08e      	sub	sp, #56	@ 0x38
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004b8:	f107 031c 	add.w	r3, r7, #28
 80004bc:	2200      	movs	r2, #0
 80004be:	601a      	str	r2, [r3, #0]
 80004c0:	605a      	str	r2, [r3, #4]
 80004c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004c4:	463b      	mov	r3, r7
 80004c6:	2200      	movs	r2, #0
 80004c8:	601a      	str	r2, [r3, #0]
 80004ca:	605a      	str	r2, [r3, #4]
 80004cc:	609a      	str	r2, [r3, #8]
 80004ce:	60da      	str	r2, [r3, #12]
 80004d0:	611a      	str	r2, [r3, #16]
 80004d2:	615a      	str	r2, [r3, #20]
 80004d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80004d6:	4b2d      	ldr	r3, [pc, #180]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004d8:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004dc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 240-1;
 80004de:	4b2b      	ldr	r3, [pc, #172]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004e0:	22ef      	movs	r2, #239	@ 0xef
 80004e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e4:	4b29      	ldr	r3, [pc, #164]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80004ea:	4b28      	ldr	r3, [pc, #160]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004ec:	2263      	movs	r2, #99	@ 0x63
 80004ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f0:	4b26      	ldr	r3, [pc, #152]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f6:	4b25      	ldr	r3, [pc, #148]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80004fc:	4823      	ldr	r0, [pc, #140]	@ (800058c <MX_TIM2_Init+0xe8>)
 80004fe:	f001 fe5d 	bl	80021bc <HAL_TIM_Base_Init>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000508:	f000 f92a 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800050c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000510:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000512:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000516:	4619      	mov	r1, r3
 8000518:	481c      	ldr	r0, [pc, #112]	@ (800058c <MX_TIM2_Init+0xe8>)
 800051a:	f002 f929 	bl	8002770 <HAL_TIM_ConfigClockSource>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000524:	f000 f91c 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000528:	4818      	ldr	r0, [pc, #96]	@ (800058c <MX_TIM2_Init+0xe8>)
 800052a:	f001 fe9e 	bl	800226a <HAL_TIM_PWM_Init>
 800052e:	4603      	mov	r3, r0
 8000530:	2b00      	cmp	r3, #0
 8000532:	d001      	beq.n	8000538 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000534:	f000 f914 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053c:	2300      	movs	r3, #0
 800053e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000540:	f107 031c 	add.w	r3, r7, #28
 8000544:	4619      	mov	r1, r3
 8000546:	4811      	ldr	r0, [pc, #68]	@ (800058c <MX_TIM2_Init+0xe8>)
 8000548:	f002 fe4a 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000552:	f000 f905 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000556:	2360      	movs	r3, #96	@ 0x60
 8000558:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 30;
 800055a:	231e      	movs	r3, #30
 800055c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800055e:	2300      	movs	r3, #0
 8000560:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000566:	463b      	mov	r3, r7
 8000568:	220c      	movs	r2, #12
 800056a:	4619      	mov	r1, r3
 800056c:	4807      	ldr	r0, [pc, #28]	@ (800058c <MX_TIM2_Init+0xe8>)
 800056e:	f001 ffeb 	bl	8002548 <HAL_TIM_PWM_ConfigChannel>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000578:	f000 f8f2 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800057c:	4803      	ldr	r0, [pc, #12]	@ (800058c <MX_TIM2_Init+0xe8>)
 800057e:	f000 f947 	bl	8000810 <HAL_TIM_MspPostInit>

}
 8000582:	bf00      	nop
 8000584:	3738      	adds	r7, #56	@ 0x38
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2400002c 	.word	0x2400002c

08000590 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08e      	sub	sp, #56	@ 0x38
 8000594:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
 800059e:	605a      	str	r2, [r3, #4]
 80005a0:	609a      	str	r2, [r3, #8]
 80005a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005a4:	f107 031c 	add.w	r3, r7, #28
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005b0:	463b      	mov	r3, r7
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005c2:	4b33      	ldr	r3, [pc, #204]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005c4:	4a33      	ldr	r2, [pc, #204]	@ (8000694 <MX_TIM3_Init+0x104>)
 80005c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 240-1;
 80005c8:	4b31      	ldr	r3, [pc, #196]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005ca:	22ef      	movs	r2, #239	@ 0xef
 80005cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005ce:	4b30      	ldr	r3, [pc, #192]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80005d4:	4b2e      	ldr	r3, [pc, #184]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005d6:	2263      	movs	r2, #99	@ 0x63
 80005d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005da:	4b2d      	ldr	r3, [pc, #180]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005e0:	4b2b      	ldr	r3, [pc, #172]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005e6:	482a      	ldr	r0, [pc, #168]	@ (8000690 <MX_TIM3_Init+0x100>)
 80005e8:	f001 fde8 	bl	80021bc <HAL_TIM_Base_Init>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80005f2:	f000 f8b5 	bl	8000760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005fc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000600:	4619      	mov	r1, r3
 8000602:	4823      	ldr	r0, [pc, #140]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000604:	f002 f8b4 	bl	8002770 <HAL_TIM_ConfigClockSource>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800060e:	f000 f8a7 	bl	8000760 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000612:	481f      	ldr	r0, [pc, #124]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000614:	f001 fe29 	bl	800226a <HAL_TIM_PWM_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800061e:	f000 f89f 	bl	8000760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000622:	2300      	movs	r3, #0
 8000624:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000626:	2300      	movs	r3, #0
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800062a:	f107 031c 	add.w	r3, r7, #28
 800062e:	4619      	mov	r1, r3
 8000630:	4817      	ldr	r0, [pc, #92]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000632:	f002 fdd5 	bl	80031e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800063c:	f000 f890 	bl	8000760 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000640:	2360      	movs	r3, #96	@ 0x60
 8000642:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000644:	2332      	movs	r3, #50	@ 0x32
 8000646:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000648:	2300      	movs	r3, #0
 800064a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000650:	463b      	mov	r3, r7
 8000652:	2208      	movs	r2, #8
 8000654:	4619      	mov	r1, r3
 8000656:	480e      	ldr	r0, [pc, #56]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000658:	f001 ff76 	bl	8002548 <HAL_TIM_PWM_ConfigChannel>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000662:	f000 f87d 	bl	8000760 <Error_Handler>
  }
  sConfigOC.Pulse = 70;
 8000666:	2346      	movs	r3, #70	@ 0x46
 8000668:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	220c      	movs	r2, #12
 800066e:	4619      	mov	r1, r3
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000672:	f001 ff69 	bl	8002548 <HAL_TIM_PWM_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_TIM3_Init+0xf0>
  {
    Error_Handler();
 800067c:	f000 f870 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <MX_TIM3_Init+0x100>)
 8000682:	f000 f8c5 	bl	8000810 <HAL_TIM_MspPostInit>

}
 8000686:	bf00      	nop
 8000688:	3738      	adds	r7, #56	@ 0x38
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	24000078 	.word	0x24000078
 8000694:	40000400 	.word	0x40000400

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b19      	ldr	r3, [pc, #100]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a4:	4a17      	ldr	r2, [pc, #92]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006aa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ae:	4b15      	ldr	r3, [pc, #84]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006bc:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c2:	4a10      	ldr	r2, [pc, #64]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006cc:	4b0d      	ldr	r3, [pc, #52]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d2:	f003 0302 	and.w	r3, r3, #2
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006da:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006e0:	4a08      	ldr	r2, [pc, #32]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006e2:	f043 0301 	orr.w	r3, r3, #1
 80006e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_GPIO_Init+0x6c>)
 80006ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006f8:	bf00      	nop
 80006fa:	3714      	adds	r7, #20
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	58024400 	.word	0x58024400

08000708 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b084      	sub	sp, #16
 800070c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800070e:	463b      	mov	r3, r7
 8000710:	2200      	movs	r2, #0
 8000712:	601a      	str	r2, [r3, #0]
 8000714:	605a      	str	r2, [r3, #4]
 8000716:	609a      	str	r2, [r3, #8]
 8000718:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800071a:	f000 fb63 	bl	8000de4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800071e:	2301      	movs	r3, #1
 8000720:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000722:	2300      	movs	r3, #0
 8000724:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800072a:	231f      	movs	r3, #31
 800072c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800072e:	2387      	movs	r3, #135	@ 0x87
 8000730:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000732:	2300      	movs	r3, #0
 8000734:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000736:	2300      	movs	r3, #0
 8000738:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800073a:	2301      	movs	r3, #1
 800073c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800073e:	2301      	movs	r3, #1
 8000740:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f000 fb81 	bl	8000e54 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000752:	2004      	movs	r0, #4
 8000754:	f000 fb5e 	bl	8000e14 <HAL_MPU_Enable>

}
 8000758:	bf00      	nop
 800075a:	3710      	adds	r7, #16
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <Error_Handler+0x8>

0800076c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b480      	push	{r7}
 800076e:	b083      	sub	sp, #12
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b0a      	ldr	r3, [pc, #40]	@ (800079c <HAL_MspInit+0x30>)
 8000774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000778:	4a08      	ldr	r2, [pc, #32]	@ (800079c <HAL_MspInit+0x30>)
 800077a:	f043 0302 	orr.w	r3, r3, #2
 800077e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000782:	4b06      	ldr	r3, [pc, #24]	@ (800079c <HAL_MspInit+0x30>)
 8000784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000788:	f003 0302 	and.w	r3, r3, #2
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000790:	bf00      	nop
 8000792:	370c      	adds	r7, #12
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	58024400 	.word	0x58024400

080007a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80007b0:	d10f      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	60fb      	str	r3, [r7, #12]
 80007ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80007d0:	e013      	b.n	80007fa <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	4a0d      	ldr	r2, [pc, #52]	@ (800080c <HAL_TIM_Base_MspInit+0x6c>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d10e      	bne.n	80007fa <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007e2:	4a09      	ldr	r2, [pc, #36]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80007ec:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <HAL_TIM_Base_MspInit+0x68>)
 80007ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
}
 80007fa:	bf00      	nop
 80007fc:	3714      	adds	r7, #20
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	58024400 	.word	0x58024400
 800080c:	40000400 	.word	0x40000400

08000810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000830:	d11f      	bne.n	8000872 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a22      	ldr	r2, [pc, #136]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 800083a:	f043 0301 	orr.w	r3, r3, #1
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b20      	ldr	r3, [pc, #128]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000850:	2308      	movs	r3, #8
 8000852:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000854:	2302      	movs	r3, #2
 8000856:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000860:	2301      	movs	r3, #1
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	4817      	ldr	r0, [pc, #92]	@ (80008c8 <HAL_TIM_MspPostInit+0xb8>)
 800086c:	f000 fb32 	bl	8000ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000870:	e023      	b.n	80008ba <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM3)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a15      	ldr	r2, [pc, #84]	@ (80008cc <HAL_TIM_MspPostInit+0xbc>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d11e      	bne.n	80008ba <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087c:	4b11      	ldr	r3, [pc, #68]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 800087e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000882:	4a10      	ldr	r2, [pc, #64]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <HAL_TIM_MspPostInit+0xb4>)
 800088e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0;
 800089a:	2303      	movs	r3, #3
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80008aa:	2302      	movs	r3, #2
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 0314 	add.w	r3, r7, #20
 80008b2:	4619      	mov	r1, r3
 80008b4:	4806      	ldr	r0, [pc, #24]	@ (80008d0 <HAL_TIM_MspPostInit+0xc0>)
 80008b6:	f000 fb0d 	bl	8000ed4 <HAL_GPIO_Init>
}
 80008ba:	bf00      	nop
 80008bc:	3728      	adds	r7, #40	@ 0x28
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	58024400 	.word	0x58024400
 80008c8:	58020000 	.word	0x58020000
 80008cc:	40000400 	.word	0x40000400
 80008d0:	58020400 	.word	0x58020400

080008d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <NMI_Handler+0x4>

080008dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <MemManage_Handler+0x4>

080008ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <BusFault_Handler+0x4>

080008f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <UsageFault_Handler+0x4>

080008fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr

08000926 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092a:	f000 f927 	bl	8000b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000938:	4b37      	ldr	r3, [pc, #220]	@ (8000a18 <SystemInit+0xe4>)
 800093a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800093e:	4a36      	ldr	r2, [pc, #216]	@ (8000a18 <SystemInit+0xe4>)
 8000940:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000944:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000948:	4b34      	ldr	r3, [pc, #208]	@ (8000a1c <SystemInit+0xe8>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	f003 030f 	and.w	r3, r3, #15
 8000950:	2b06      	cmp	r3, #6
 8000952:	d807      	bhi.n	8000964 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000954:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <SystemInit+0xe8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f023 030f 	bic.w	r3, r3, #15
 800095c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a1c <SystemInit+0xe8>)
 800095e:	f043 0307 	orr.w	r3, r3, #7
 8000962:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000964:	4b2e      	ldr	r3, [pc, #184]	@ (8000a20 <SystemInit+0xec>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a2d      	ldr	r2, [pc, #180]	@ (8000a20 <SystemInit+0xec>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000970:	4b2b      	ldr	r3, [pc, #172]	@ (8000a20 <SystemInit+0xec>)
 8000972:	2200      	movs	r2, #0
 8000974:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000976:	4b2a      	ldr	r3, [pc, #168]	@ (8000a20 <SystemInit+0xec>)
 8000978:	681a      	ldr	r2, [r3, #0]
 800097a:	4929      	ldr	r1, [pc, #164]	@ (8000a20 <SystemInit+0xec>)
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <SystemInit+0xf0>)
 800097e:	4013      	ands	r3, r2
 8000980:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <SystemInit+0xe8>)
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0308 	and.w	r3, r3, #8
 800098a:	2b00      	cmp	r3, #0
 800098c:	d007      	beq.n	800099e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800098e:	4b23      	ldr	r3, [pc, #140]	@ (8000a1c <SystemInit+0xe8>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	f023 030f 	bic.w	r3, r3, #15
 8000996:	4a21      	ldr	r2, [pc, #132]	@ (8000a1c <SystemInit+0xe8>)
 8000998:	f043 0307 	orr.w	r3, r3, #7
 800099c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800099e:	4b20      	ldr	r3, [pc, #128]	@ (8000a20 <SystemInit+0xec>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009a4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a20 <SystemInit+0xec>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000a20 <SystemInit+0xec>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a20 <SystemInit+0xec>)
 80009b2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <SystemInit+0xf4>)
 80009b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a20 <SystemInit+0xec>)
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <SystemInit+0xf8>)
 80009ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009bc:	4b18      	ldr	r3, [pc, #96]	@ (8000a20 <SystemInit+0xec>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <SystemInit+0xfc>)
 80009c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009c2:	4b17      	ldr	r3, [pc, #92]	@ (8000a20 <SystemInit+0xec>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009c8:	4b15      	ldr	r3, [pc, #84]	@ (8000a20 <SystemInit+0xec>)
 80009ca:	4a19      	ldr	r2, [pc, #100]	@ (8000a30 <SystemInit+0xfc>)
 80009cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ce:	4b14      	ldr	r3, [pc, #80]	@ (8000a20 <SystemInit+0xec>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <SystemInit+0xec>)
 80009d6:	4a16      	ldr	r2, [pc, #88]	@ (8000a30 <SystemInit+0xfc>)
 80009d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009da:	4b11      	ldr	r3, [pc, #68]	@ (8000a20 <SystemInit+0xec>)
 80009dc:	2200      	movs	r2, #0
 80009de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000a20 <SystemInit+0xec>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000a20 <SystemInit+0xec>)
 80009e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80009ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80009ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000a20 <SystemInit+0xec>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <SystemInit+0x100>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b10      	ldr	r3, [pc, #64]	@ (8000a38 <SystemInit+0x104>)
 80009f8:	4013      	ands	r3, r2
 80009fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80009fe:	d202      	bcs.n	8000a06 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <SystemInit+0x108>)
 8000a02:	2201      	movs	r2, #1
 8000a04:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <SystemInit+0x10c>)
 8000a08:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr
 8000a18:	e000ed00 	.word	0xe000ed00
 8000a1c:	52002000 	.word	0x52002000
 8000a20:	58024400 	.word	0x58024400
 8000a24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a28:	02020200 	.word	0x02020200
 8000a2c:	01ff0000 	.word	0x01ff0000
 8000a30:	01010280 	.word	0x01010280
 8000a34:	5c001000 	.word	0x5c001000
 8000a38:	ffff0000 	.word	0xffff0000
 8000a3c:	51008108 	.word	0x51008108
 8000a40:	52004000 	.word	0x52004000

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a48:	f7ff ff74 	bl	8000934 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a72:	f002 fc4b 	bl	800330c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fc2f 	bl	80002d8 <main>
  bx  lr
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a84:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000a88:	08003384 	.word	0x08003384
  ldr r2, =_sbss
 8000a8c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000a90:	240000c8 	.word	0x240000c8

08000a94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC3_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9e:	2003      	movs	r0, #3
 8000aa0:	f000 f96e 	bl	8000d80 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000aa4:	f001 fa10 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8000aa8:	4602      	mov	r2, r0
 8000aaa:	4b15      	ldr	r3, [pc, #84]	@ (8000b00 <HAL_Init+0x68>)
 8000aac:	699b      	ldr	r3, [r3, #24]
 8000aae:	0a1b      	lsrs	r3, r3, #8
 8000ab0:	f003 030f 	and.w	r3, r3, #15
 8000ab4:	4913      	ldr	r1, [pc, #76]	@ (8000b04 <HAL_Init+0x6c>)
 8000ab6:	5ccb      	ldrb	r3, [r1, r3]
 8000ab8:	f003 031f 	and.w	r3, r3, #31
 8000abc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <HAL_Init+0x68>)
 8000ac4:	699b      	ldr	r3, [r3, #24]
 8000ac6:	f003 030f 	and.w	r3, r3, #15
 8000aca:	4a0e      	ldr	r2, [pc, #56]	@ (8000b04 <HAL_Init+0x6c>)
 8000acc:	5cd3      	ldrb	r3, [r2, r3]
 8000ace:	f003 031f 	and.w	r3, r3, #31
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ad8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x70>)
 8000ada:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000adc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b0c <HAL_Init+0x74>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae2:	200f      	movs	r0, #15
 8000ae4:	f000 f814 	bl	8000b10 <HAL_InitTick>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000aee:	2301      	movs	r3, #1
 8000af0:	e002      	b.n	8000af8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000af2:	f7ff fe3b 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af6:	2300      	movs	r3, #0
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	3708      	adds	r7, #8
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	58024400 	.word	0x58024400
 8000b04:	0800336c 	.word	0x0800336c
 8000b08:	24000004 	.word	0x24000004
 8000b0c:	24000000 	.word	0x24000000

08000b10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b18:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_InitTick+0x60>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	e021      	b.n	8000b68 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <HAL_InitTick+0x64>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_InitTick+0x60>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b32:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f000 f945 	bl	8000dca <HAL_SYSTICK_Config>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	e00e      	b.n	8000b68 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	2b0f      	cmp	r3, #15
 8000b4e:	d80a      	bhi.n	8000b66 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b50:	2200      	movs	r2, #0
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	f04f 30ff 	mov.w	r0, #4294967295
 8000b58:	f000 f91d 	bl	8000d96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b5c:	4a06      	ldr	r2, [pc, #24]	@ (8000b78 <HAL_InitTick+0x68>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e000      	b.n	8000b68 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	2400000c 	.word	0x2400000c
 8000b74:	24000000 	.word	0x24000000
 8000b78:	24000008 	.word	0x24000008

08000b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b80:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <HAL_IncTick+0x20>)
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	461a      	mov	r2, r3
 8000b86:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	4a04      	ldr	r2, [pc, #16]	@ (8000ba0 <HAL_IncTick+0x24>)
 8000b8e:	6013      	str	r3, [r2, #0]
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	2400000c 	.word	0x2400000c
 8000ba0:	240000c4 	.word	0x240000c4

08000ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba8:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <HAL_GetTick+0x14>)
 8000baa:	681b      	ldr	r3, [r3, #0]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	240000c4 	.word	0x240000c4

08000bbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bc4:	f7ff ffee 	bl	8000ba4 <HAL_GetTick>
 8000bc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bd4:	d005      	beq.n	8000be2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c00 <HAL_Delay+0x44>)
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	4413      	add	r3, r2
 8000be0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000be2:	bf00      	nop
 8000be4:	f7ff ffde 	bl	8000ba4 <HAL_GetTick>
 8000be8:	4602      	mov	r2, r0
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	68fa      	ldr	r2, [r7, #12]
 8000bf0:	429a      	cmp	r2, r3
 8000bf2:	d8f7      	bhi.n	8000be4 <HAL_Delay+0x28>
  {
  }
}
 8000bf4:	bf00      	nop
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	2400000c 	.word	0x2400000c

08000c04 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c08:	4b03      	ldr	r3, [pc, #12]	@ (8000c18 <HAL_GetREVID+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	0c1b      	lsrs	r3, r3, #16
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	5c001000 	.word	0x5c001000

08000c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f003 0307 	and.w	r3, r3, #7
 8000c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c2e:	68db      	ldr	r3, [r3, #12]
 8000c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c38:	4013      	ands	r3, r2
 8000c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	4313      	orrs	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c4a:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	60d3      	str	r3, [r2, #12]
}
 8000c50:	bf00      	nop
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	e000ed00 	.word	0xe000ed00
 8000c60:	05fa0000 	.word	0x05fa0000

08000c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c68:	4b04      	ldr	r3, [pc, #16]	@ (8000c7c <__NVIC_GetPriorityGrouping+0x18>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	0a1b      	lsrs	r3, r3, #8
 8000c6e:	f003 0307 	and.w	r3, r3, #7
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	6039      	str	r1, [r7, #0]
 8000c8a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db0a      	blt.n	8000caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	490c      	ldr	r1, [pc, #48]	@ (8000ccc <__NVIC_SetPriority+0x4c>)
 8000c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca8:	e00a      	b.n	8000cc0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	4908      	ldr	r1, [pc, #32]	@ (8000cd0 <__NVIC_SetPriority+0x50>)
 8000cb0:	88fb      	ldrh	r3, [r7, #6]
 8000cb2:	f003 030f 	and.w	r3, r3, #15
 8000cb6:	3b04      	subs	r3, #4
 8000cb8:	0112      	lsls	r2, r2, #4
 8000cba:	b2d2      	uxtb	r2, r2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	761a      	strb	r2, [r3, #24]
}
 8000cc0:	bf00      	nop
 8000cc2:	370c      	adds	r7, #12
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr
 8000ccc:	e000e100 	.word	0xe000e100
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b089      	sub	sp, #36	@ 0x24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f1c3 0307 	rsb	r3, r3, #7
 8000cee:	2b04      	cmp	r3, #4
 8000cf0:	bf28      	it	cs
 8000cf2:	2304      	movcs	r3, #4
 8000cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf6:	69fb      	ldr	r3, [r7, #28]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d902      	bls.n	8000d04 <NVIC_EncodePriority+0x30>
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3b03      	subs	r3, #3
 8000d02:	e000      	b.n	8000d06 <NVIC_EncodePriority+0x32>
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	69bb      	ldr	r3, [r7, #24]
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43da      	mvns	r2, r3
 8000d14:	68bb      	ldr	r3, [r7, #8]
 8000d16:	401a      	ands	r2, r3
 8000d18:	697b      	ldr	r3, [r7, #20]
 8000d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	fa01 f303 	lsl.w	r3, r1, r3
 8000d26:	43d9      	mvns	r1, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d2c:	4313      	orrs	r3, r2
         );
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3724      	adds	r7, #36	@ 0x24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d4c:	d301      	bcc.n	8000d52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e00f      	b.n	8000d72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <SysTick_Config+0x40>)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d5a:	210f      	movs	r1, #15
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	f7ff ff8e 	bl	8000c80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <SysTick_Config+0x40>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d6a:	4b04      	ldr	r3, [pc, #16]	@ (8000d7c <SysTick_Config+0x40>)
 8000d6c:	2207      	movs	r2, #7
 8000d6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d70:	2300      	movs	r3, #0
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	e000e010 	.word	0xe000e010

08000d80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f7ff ff47 	bl	8000c1c <__NVIC_SetPriorityGrouping>
}
 8000d8e:	bf00      	nop
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b086      	sub	sp, #24
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	60b9      	str	r1, [r7, #8]
 8000da0:	607a      	str	r2, [r7, #4]
 8000da2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000da4:	f7ff ff5e 	bl	8000c64 <__NVIC_GetPriorityGrouping>
 8000da8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000daa:	687a      	ldr	r2, [r7, #4]
 8000dac:	68b9      	ldr	r1, [r7, #8]
 8000dae:	6978      	ldr	r0, [r7, #20]
 8000db0:	f7ff ff90 	bl	8000cd4 <NVIC_EncodePriority>
 8000db4:	4602      	mov	r2, r0
 8000db6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff5f 	bl	8000c80 <__NVIC_SetPriority>
}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffb2 	bl	8000d3c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000de8:	f3bf 8f5f 	dmb	sy
}
 8000dec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <HAL_MPU_Disable+0x28>)
 8000df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000df2:	4a06      	ldr	r2, [pc, #24]	@ (8000e0c <HAL_MPU_Disable+0x28>)
 8000df4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000df8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_MPU_Disable+0x2c>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	605a      	str	r2, [r3, #4]
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	e000ed90 	.word	0xe000ed90

08000e14 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <HAL_MPU_Enable+0x38>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e26:	4b0a      	ldr	r3, [pc, #40]	@ (8000e50 <HAL_MPU_Enable+0x3c>)
 8000e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e2a:	4a09      	ldr	r2, [pc, #36]	@ (8000e50 <HAL_MPU_Enable+0x3c>)
 8000e2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e30:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e3e:	bf00      	nop
 8000e40:	370c      	adds	r7, #12
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed90 	.word	0xe000ed90
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	785a      	ldrb	r2, [r3, #1]
 8000e60:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e62:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	4a19      	ldr	r2, [pc, #100]	@ (8000ed0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e6a:	f023 0301 	bic.w	r3, r3, #1
 8000e6e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e70:	4a17      	ldr	r2, [pc, #92]	@ (8000ed0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	7b1b      	ldrb	r3, [r3, #12]
 8000e7c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	7adb      	ldrb	r3, [r3, #11]
 8000e82:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e84:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	7a9b      	ldrb	r3, [r3, #10]
 8000e8a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	7b5b      	ldrb	r3, [r3, #13]
 8000e92:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000e94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	7b9b      	ldrb	r3, [r3, #14]
 8000e9a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000e9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7bdb      	ldrb	r3, [r3, #15]
 8000ea2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ea4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7a5b      	ldrb	r3, [r3, #9]
 8000eaa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000eac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7a1b      	ldrb	r3, [r3, #8]
 8000eb2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000eb4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000eb6:	687a      	ldr	r2, [r7, #4]
 8000eb8:	7812      	ldrb	r2, [r2, #0]
 8000eba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ebc:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ebe:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ec0:	6113      	str	r3, [r2, #16]
}
 8000ec2:	bf00      	nop
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed90 	.word	0xe000ed90

08000ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b089      	sub	sp, #36	@ 0x24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000ee2:	4b89      	ldr	r3, [pc, #548]	@ (8001108 <HAL_GPIO_Init+0x234>)
 8000ee4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000ee6:	e194      	b.n	8001212 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	2101      	movs	r1, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	f000 8186 	beq.w	800120c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d005      	beq.n	8000f18 <HAL_GPIO_Init+0x44>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d130      	bne.n	8000f7a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	68da      	ldr	r2, [r3, #12]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	091b      	lsrs	r3, r3, #4
 8000f64:	f003 0201 	and.w	r2, r3, #1
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f003 0303 	and.w	r3, r3, #3
 8000f82:	2b03      	cmp	r3, #3
 8000f84:	d017      	beq.n	8000fb6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	2203      	movs	r2, #3
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	689a      	ldr	r2, [r3, #8]
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	f003 0303 	and.w	r3, r3, #3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d123      	bne.n	800100a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000fd0:	69fb      	ldr	r3, [r7, #28]
 8000fd2:	f003 0307 	and.w	r3, r3, #7
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	220f      	movs	r2, #15
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	691a      	ldr	r2, [r3, #16]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ffc:	69fb      	ldr	r3, [r7, #28]
 8000ffe:	08da      	lsrs	r2, r3, #3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3208      	adds	r2, #8
 8001004:	69b9      	ldr	r1, [r7, #24]
 8001006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0203 	and.w	r2, r3, #3
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001046:	2b00      	cmp	r3, #0
 8001048:	f000 80e0 	beq.w	800120c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104c:	4b2f      	ldr	r3, [pc, #188]	@ (800110c <HAL_GPIO_Init+0x238>)
 800104e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001052:	4a2e      	ldr	r2, [pc, #184]	@ (800110c <HAL_GPIO_Init+0x238>)
 8001054:	f043 0302 	orr.w	r3, r3, #2
 8001058:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800105c:	4b2b      	ldr	r3, [pc, #172]	@ (800110c <HAL_GPIO_Init+0x238>)
 800105e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800106a:	4a29      	ldr	r2, [pc, #164]	@ (8001110 <HAL_GPIO_Init+0x23c>)
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	089b      	lsrs	r3, r3, #2
 8001070:	3302      	adds	r3, #2
 8001072:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f003 0303 	and.w	r3, r3, #3
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	220f      	movs	r2, #15
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a20      	ldr	r2, [pc, #128]	@ (8001114 <HAL_GPIO_Init+0x240>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d052      	beq.n	800113c <HAL_GPIO_Init+0x268>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a1f      	ldr	r2, [pc, #124]	@ (8001118 <HAL_GPIO_Init+0x244>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d031      	beq.n	8001102 <HAL_GPIO_Init+0x22e>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a1e      	ldr	r2, [pc, #120]	@ (800111c <HAL_GPIO_Init+0x248>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d02b      	beq.n	80010fe <HAL_GPIO_Init+0x22a>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001120 <HAL_GPIO_Init+0x24c>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d025      	beq.n	80010fa <HAL_GPIO_Init+0x226>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	@ (8001124 <HAL_GPIO_Init+0x250>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d01f      	beq.n	80010f6 <HAL_GPIO_Init+0x222>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <HAL_GPIO_Init+0x254>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d019      	beq.n	80010f2 <HAL_GPIO_Init+0x21e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1a      	ldr	r2, [pc, #104]	@ (800112c <HAL_GPIO_Init+0x258>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d013      	beq.n	80010ee <HAL_GPIO_Init+0x21a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a19      	ldr	r2, [pc, #100]	@ (8001130 <HAL_GPIO_Init+0x25c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d00d      	beq.n	80010ea <HAL_GPIO_Init+0x216>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <HAL_GPIO_Init+0x260>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d007      	beq.n	80010e6 <HAL_GPIO_Init+0x212>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <HAL_GPIO_Init+0x264>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_GPIO_Init+0x20e>
 80010de:	2309      	movs	r3, #9
 80010e0:	e02d      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010e2:	230a      	movs	r3, #10
 80010e4:	e02b      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010e6:	2308      	movs	r3, #8
 80010e8:	e029      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010ea:	2307      	movs	r3, #7
 80010ec:	e027      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010ee:	2306      	movs	r3, #6
 80010f0:	e025      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010f2:	2305      	movs	r3, #5
 80010f4:	e023      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010f6:	2304      	movs	r3, #4
 80010f8:	e021      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010fa:	2303      	movs	r3, #3
 80010fc:	e01f      	b.n	800113e <HAL_GPIO_Init+0x26a>
 80010fe:	2302      	movs	r3, #2
 8001100:	e01d      	b.n	800113e <HAL_GPIO_Init+0x26a>
 8001102:	2301      	movs	r3, #1
 8001104:	e01b      	b.n	800113e <HAL_GPIO_Init+0x26a>
 8001106:	bf00      	nop
 8001108:	58000080 	.word	0x58000080
 800110c:	58024400 	.word	0x58024400
 8001110:	58000400 	.word	0x58000400
 8001114:	58020000 	.word	0x58020000
 8001118:	58020400 	.word	0x58020400
 800111c:	58020800 	.word	0x58020800
 8001120:	58020c00 	.word	0x58020c00
 8001124:	58021000 	.word	0x58021000
 8001128:	58021400 	.word	0x58021400
 800112c:	58021800 	.word	0x58021800
 8001130:	58021c00 	.word	0x58021c00
 8001134:	58022000 	.word	0x58022000
 8001138:	58022400 	.word	0x58022400
 800113c:	2300      	movs	r3, #0
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	f002 0203 	and.w	r2, r2, #3
 8001144:	0092      	lsls	r2, r2, #2
 8001146:	4093      	lsls	r3, r2
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800114e:	4938      	ldr	r1, [pc, #224]	@ (8001230 <HAL_GPIO_Init+0x35c>)
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	089b      	lsrs	r3, r3, #2
 8001154:	3302      	adds	r3, #2
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800115c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	43db      	mvns	r3, r3
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4013      	ands	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d003      	beq.n	8001182 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	4313      	orrs	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001182:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800118a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d003      	beq.n	80011b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	3301      	adds	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa22 f303 	lsr.w	r3, r2, r3
 800121c:	2b00      	cmp	r3, #0
 800121e:	f47f ae63 	bne.w	8000ee8 <HAL_GPIO_Init+0x14>
  }
}
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	3724      	adds	r7, #36	@ 0x24
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	58000400 	.word	0x58000400

08001234 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800123c:	4b19      	ldr	r3, [pc, #100]	@ (80012a4 <HAL_PWREx_ConfigSupply+0x70>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b04      	cmp	r3, #4
 8001246:	d00a      	beq.n	800125e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001248:	4b16      	ldr	r3, [pc, #88]	@ (80012a4 <HAL_PWREx_ConfigSupply+0x70>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f003 0307 	and.w	r3, r3, #7
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	429a      	cmp	r2, r3
 8001254:	d001      	beq.n	800125a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e01f      	b.n	800129a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800125a:	2300      	movs	r3, #0
 800125c:	e01d      	b.n	800129a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800125e:	4b11      	ldr	r3, [pc, #68]	@ (80012a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f023 0207 	bic.w	r2, r3, #7
 8001266:	490f      	ldr	r1, [pc, #60]	@ (80012a4 <HAL_PWREx_ConfigSupply+0x70>)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4313      	orrs	r3, r2
 800126c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800126e:	f7ff fc99 	bl	8000ba4 <HAL_GetTick>
 8001272:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001274:	e009      	b.n	800128a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001276:	f7ff fc95 	bl	8000ba4 <HAL_GetTick>
 800127a:	4602      	mov	r2, r0
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001284:	d901      	bls.n	800128a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e007      	b.n	800129a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_PWREx_ConfigSupply+0x70>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001292:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001296:	d1ee      	bne.n	8001276 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	58024800 	.word	0x58024800

080012a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08c      	sub	sp, #48	@ 0x30
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d102      	bne.n	80012bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f000 bc48 	b.w	8001b4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 8088 	beq.w	80013da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ca:	4b99      	ldr	r3, [pc, #612]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012d4:	4b96      	ldr	r3, [pc, #600]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80012d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80012da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012dc:	2b10      	cmp	r3, #16
 80012de:	d007      	beq.n	80012f0 <HAL_RCC_OscConfig+0x48>
 80012e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012e2:	2b18      	cmp	r3, #24
 80012e4:	d111      	bne.n	800130a <HAL_RCC_OscConfig+0x62>
 80012e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d10c      	bne.n	800130a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f0:	4b8f      	ldr	r3, [pc, #572]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d06d      	beq.n	80013d8 <HAL_RCC_OscConfig+0x130>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d169      	bne.n	80013d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001304:	2301      	movs	r3, #1
 8001306:	f000 bc21 	b.w	8001b4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001312:	d106      	bne.n	8001322 <HAL_RCC_OscConfig+0x7a>
 8001314:	4b86      	ldr	r3, [pc, #536]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a85      	ldr	r2, [pc, #532]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800131a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	e02e      	b.n	8001380 <HAL_RCC_OscConfig+0xd8>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10c      	bne.n	8001344 <HAL_RCC_OscConfig+0x9c>
 800132a:	4b81      	ldr	r3, [pc, #516]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a80      	ldr	r2, [pc, #512]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001330:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b7e      	ldr	r3, [pc, #504]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a7d      	ldr	r2, [pc, #500]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800133c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	e01d      	b.n	8001380 <HAL_RCC_OscConfig+0xd8>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800134c:	d10c      	bne.n	8001368 <HAL_RCC_OscConfig+0xc0>
 800134e:	4b78      	ldr	r3, [pc, #480]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a77      	ldr	r2, [pc, #476]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001354:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	4b75      	ldr	r3, [pc, #468]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a74      	ldr	r2, [pc, #464]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6013      	str	r3, [r2, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xd8>
 8001368:	4b71      	ldr	r3, [pc, #452]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a70      	ldr	r2, [pc, #448]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800136e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001372:	6013      	str	r3, [r2, #0]
 8001374:	4b6e      	ldr	r3, [pc, #440]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a6d      	ldr	r2, [pc, #436]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800137a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800137e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d013      	beq.n	80013b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc0c 	bl	8000ba4 <HAL_GetTick>
 800138c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001390:	f7ff fc08 	bl	8000ba4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b64      	cmp	r3, #100	@ 0x64
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e3d4      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80013a2:	4b63      	ldr	r3, [pc, #396]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0xe8>
 80013ae:	e014      	b.n	80013da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b0:	f7ff fbf8 	bl	8000ba4 <HAL_GetTick>
 80013b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013b6:	e008      	b.n	80013ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b8:	f7ff fbf4 	bl	8000ba4 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	2b64      	cmp	r3, #100	@ 0x64
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e3c0      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80013ca:	4b59      	ldr	r3, [pc, #356]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d1f0      	bne.n	80013b8 <HAL_RCC_OscConfig+0x110>
 80013d6:	e000      	b.n	80013da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 80ca 	beq.w	800157c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013e8:	4b51      	ldr	r3, [pc, #324]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80013f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80013f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80013f8:	6a3b      	ldr	r3, [r7, #32]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d007      	beq.n	800140e <HAL_RCC_OscConfig+0x166>
 80013fe:	6a3b      	ldr	r3, [r7, #32]
 8001400:	2b18      	cmp	r3, #24
 8001402:	d156      	bne.n	80014b2 <HAL_RCC_OscConfig+0x20a>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d151      	bne.n	80014b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800140e:	4b48      	ldr	r3, [pc, #288]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	2b00      	cmp	r3, #0
 8001418:	d005      	beq.n	8001426 <HAL_RCC_OscConfig+0x17e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	68db      	ldr	r3, [r3, #12]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e392      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001426:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f023 0219 	bic.w	r2, r3, #25
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	493f      	ldr	r1, [pc, #252]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fbb4 	bl	8000ba4 <HAL_GetTick>
 800143c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001440:	f7ff fbb0 	bl	8000ba4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e37c      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001452:	4b37      	ldr	r3, [pc, #220]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800145e:	f7ff fbd1 	bl	8000c04 <HAL_GetREVID>
 8001462:	4603      	mov	r3, r0
 8001464:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001468:	4293      	cmp	r3, r2
 800146a:	d817      	bhi.n	800149c <HAL_RCC_OscConfig+0x1f4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	2b40      	cmp	r3, #64	@ 0x40
 8001472:	d108      	bne.n	8001486 <HAL_RCC_OscConfig+0x1de>
 8001474:	4b2e      	ldr	r3, [pc, #184]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800147c:	4a2c      	ldr	r2, [pc, #176]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800147e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001482:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001484:	e07a      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001486:	4b2a      	ldr	r3, [pc, #168]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	031b      	lsls	r3, r3, #12
 8001494:	4926      	ldr	r1, [pc, #152]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001496:	4313      	orrs	r3, r2
 8001498:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800149a:	e06f      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149c:	4b24      	ldr	r3, [pc, #144]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	691b      	ldr	r3, [r3, #16]
 80014a8:	061b      	lsls	r3, r3, #24
 80014aa:	4921      	ldr	r1, [pc, #132]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80014ac:	4313      	orrs	r3, r2
 80014ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014b0:	e064      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d047      	beq.n	800154a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80014ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f023 0219 	bic.w	r2, r3, #25
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	491a      	ldr	r1, [pc, #104]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80014c8:	4313      	orrs	r3, r2
 80014ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014cc:	f7ff fb6a 	bl	8000ba4 <HAL_GetTick>
 80014d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d4:	f7ff fb66 	bl	8000ba4 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e332      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d0f0      	beq.n	80014d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f2:	f7ff fb87 	bl	8000c04 <HAL_GetREVID>
 80014f6:	4603      	mov	r3, r0
 80014f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d819      	bhi.n	8001534 <HAL_RCC_OscConfig+0x28c>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	2b40      	cmp	r3, #64	@ 0x40
 8001506:	d108      	bne.n	800151a <HAL_RCC_OscConfig+0x272>
 8001508:	4b09      	ldr	r3, [pc, #36]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001510:	4a07      	ldr	r2, [pc, #28]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 8001512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001516:	6053      	str	r3, [r2, #4]
 8001518:	e030      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
 800151a:	4b05      	ldr	r3, [pc, #20]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	691b      	ldr	r3, [r3, #16]
 8001526:	031b      	lsls	r3, r3, #12
 8001528:	4901      	ldr	r1, [pc, #4]	@ (8001530 <HAL_RCC_OscConfig+0x288>)
 800152a:	4313      	orrs	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
 800152e:	e025      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
 8001530:	58024400 	.word	0x58024400
 8001534:	4b9a      	ldr	r3, [pc, #616]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	061b      	lsls	r3, r3, #24
 8001542:	4997      	ldr	r1, [pc, #604]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001544:	4313      	orrs	r3, r2
 8001546:	604b      	str	r3, [r1, #4]
 8001548:	e018      	b.n	800157c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800154a:	4b95      	ldr	r3, [pc, #596]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a94      	ldr	r2, [pc, #592]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001550:	f023 0301 	bic.w	r3, r3, #1
 8001554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb25 	bl	8000ba4 <HAL_GetTick>
 800155a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800155e:	f7ff fb21 	bl	8000ba4 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e2ed      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001570:	4b8b      	ldr	r3, [pc, #556]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0304 	and.w	r3, r3, #4
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1f0      	bne.n	800155e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0310 	and.w	r3, r3, #16
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a9 	beq.w	80016dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800158a:	4b85      	ldr	r3, [pc, #532]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001592:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001594:	4b82      	ldr	r3, [pc, #520]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001598:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b08      	cmp	r3, #8
 800159e:	d007      	beq.n	80015b0 <HAL_RCC_OscConfig+0x308>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b18      	cmp	r3, #24
 80015a4:	d13a      	bne.n	800161c <HAL_RCC_OscConfig+0x374>
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d135      	bne.n	800161c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015b0:	4b7b      	ldr	r3, [pc, #492]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d005      	beq.n	80015c8 <HAL_RCC_OscConfig+0x320>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	2b80      	cmp	r3, #128	@ 0x80
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e2c1      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015c8:	f7ff fb1c 	bl	8000c04 <HAL_GetREVID>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d817      	bhi.n	8001606 <HAL_RCC_OscConfig+0x35e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d108      	bne.n	80015f0 <HAL_RCC_OscConfig+0x348>
 80015de:	4b70      	ldr	r3, [pc, #448]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80015e6:	4a6e      	ldr	r2, [pc, #440]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80015e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80015ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80015ee:	e075      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80015f0:	4b6b      	ldr	r3, [pc, #428]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	069b      	lsls	r3, r3, #26
 80015fe:	4968      	ldr	r1, [pc, #416]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001600:	4313      	orrs	r3, r2
 8001602:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001604:	e06a      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001606:	4b66      	ldr	r3, [pc, #408]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	061b      	lsls	r3, r3, #24
 8001614:	4962      	ldr	r1, [pc, #392]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001616:	4313      	orrs	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800161a:	e05f      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d042      	beq.n	80016aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001624:	4b5e      	ldr	r3, [pc, #376]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800162a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800162e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff fab8 	bl	8000ba4 <HAL_GetTick>
 8001634:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001638:	f7ff fab4 	bl	8000ba4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e280      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800164a:	4b55      	ldr	r3, [pc, #340]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001656:	f7ff fad5 	bl	8000c04 <HAL_GetREVID>
 800165a:	4603      	mov	r3, r0
 800165c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001660:	4293      	cmp	r3, r2
 8001662:	d817      	bhi.n	8001694 <HAL_RCC_OscConfig+0x3ec>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	2b20      	cmp	r3, #32
 800166a:	d108      	bne.n	800167e <HAL_RCC_OscConfig+0x3d6>
 800166c:	4b4c      	ldr	r3, [pc, #304]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001674:	4a4a      	ldr	r2, [pc, #296]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001676:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800167a:	6053      	str	r3, [r2, #4]
 800167c:	e02e      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
 800167e:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	069b      	lsls	r3, r3, #26
 800168c:	4944      	ldr	r1, [pc, #272]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]
 8001692:	e023      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
 8001694:	4b42      	ldr	r3, [pc, #264]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	061b      	lsls	r3, r3, #24
 80016a2:	493f      	ldr	r1, [pc, #252]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
 80016a8:	e018      	b.n	80016dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a3c      	ldr	r2, [pc, #240]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80016b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b6:	f7ff fa75 	bl	8000ba4 <HAL_GetTick>
 80016ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016bc:	e008      	b.n	80016d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80016be:	f7ff fa71 	bl	8000ba4 <HAL_GetTick>
 80016c2:	4602      	mov	r2, r0
 80016c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c6:	1ad3      	subs	r3, r2, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d901      	bls.n	80016d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016cc:	2303      	movs	r3, #3
 80016ce:	e23d      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80016d0:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d1f0      	bne.n	80016be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d036      	beq.n	8001756 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d019      	beq.n	8001724 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f0:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80016f4:	4a2a      	ldr	r2, [pc, #168]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 80016f6:	f043 0301 	orr.w	r3, r3, #1
 80016fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fc:	f7ff fa52 	bl	8000ba4 <HAL_GetTick>
 8001700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001702:	e008      	b.n	8001716 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001704:	f7ff fa4e 	bl	8000ba4 <HAL_GetTick>
 8001708:	4602      	mov	r2, r0
 800170a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e21a      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001716:	4b22      	ldr	r3, [pc, #136]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171a:	f003 0302 	and.w	r3, r3, #2
 800171e:	2b00      	cmp	r3, #0
 8001720:	d0f0      	beq.n	8001704 <HAL_RCC_OscConfig+0x45c>
 8001722:	e018      	b.n	8001756 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001724:	4b1e      	ldr	r3, [pc, #120]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001726:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001728:	4a1d      	ldr	r2, [pc, #116]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001730:	f7ff fa38 	bl	8000ba4 <HAL_GetTick>
 8001734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001738:	f7ff fa34 	bl	8000ba4 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e200      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800174a:	4b15      	ldr	r3, [pc, #84]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800174c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0320 	and.w	r3, r3, #32
 800175e:	2b00      	cmp	r3, #0
 8001760:	d039      	beq.n	80017d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	699b      	ldr	r3, [r3, #24]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800176a:	4b0d      	ldr	r3, [pc, #52]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a0c      	ldr	r2, [pc, #48]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001774:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001776:	f7ff fa15 	bl	8000ba4 <HAL_GetTick>
 800177a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800177c:	e008      	b.n	8001790 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800177e:	f7ff fa11 	bl	8000ba4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e1dd      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001790:	4b03      	ldr	r3, [pc, #12]	@ (80017a0 <HAL_RCC_OscConfig+0x4f8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0f0      	beq.n	800177e <HAL_RCC_OscConfig+0x4d6>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x52e>
 800179e:	bf00      	nop
 80017a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a4:	4b9b      	ldr	r3, [pc, #620]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a9a      	ldr	r2, [pc, #616]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80017aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80017b0:	f7ff f9f8 	bl	8000ba4 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017b8:	f7ff f9f4 	bl	8000ba4 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1c0      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80017ca:	4b92      	ldr	r3, [pc, #584]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 8081 	beq.w	80018e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80017e4:	4b8c      	ldr	r3, [pc, #560]	@ (8001a18 <HAL_RCC_OscConfig+0x770>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a8b      	ldr	r2, [pc, #556]	@ (8001a18 <HAL_RCC_OscConfig+0x770>)
 80017ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80017f0:	f7ff f9d8 	bl	8000ba4 <HAL_GetTick>
 80017f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017f8:	f7ff f9d4 	bl	8000ba4 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e1a0      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800180a:	4b83      	ldr	r3, [pc, #524]	@ (8001a18 <HAL_RCC_OscConfig+0x770>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d106      	bne.n	800182c <HAL_RCC_OscConfig+0x584>
 800181e:	4b7d      	ldr	r3, [pc, #500]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001822:	4a7c      	ldr	r2, [pc, #496]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6713      	str	r3, [r2, #112]	@ 0x70
 800182a:	e02d      	b.n	8001888 <HAL_RCC_OscConfig+0x5e0>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10c      	bne.n	800184e <HAL_RCC_OscConfig+0x5a6>
 8001834:	4b77      	ldr	r3, [pc, #476]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001838:	4a76      	ldr	r2, [pc, #472]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800183a:	f023 0301 	bic.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001840:	4b74      	ldr	r3, [pc, #464]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	4a73      	ldr	r2, [pc, #460]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001846:	f023 0304 	bic.w	r3, r3, #4
 800184a:	6713      	str	r3, [r2, #112]	@ 0x70
 800184c:	e01c      	b.n	8001888 <HAL_RCC_OscConfig+0x5e0>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b05      	cmp	r3, #5
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x5c8>
 8001856:	4b6f      	ldr	r3, [pc, #444]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	4a6e      	ldr	r2, [pc, #440]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	6713      	str	r3, [r2, #112]	@ 0x70
 8001862:	4b6c      	ldr	r3, [pc, #432]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001866:	4a6b      	ldr	r2, [pc, #428]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001868:	f043 0301 	orr.w	r3, r3, #1
 800186c:	6713      	str	r3, [r2, #112]	@ 0x70
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0x5e0>
 8001870:	4b68      	ldr	r3, [pc, #416]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001874:	4a67      	ldr	r2, [pc, #412]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6713      	str	r3, [r2, #112]	@ 0x70
 800187c:	4b65      	ldr	r3, [pc, #404]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001880:	4a64      	ldr	r2, [pc, #400]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001882:	f023 0304 	bic.w	r3, r3, #4
 8001886:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d015      	beq.n	80018bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001890:	f7ff f988 	bl	8000ba4 <HAL_GetTick>
 8001894:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001896:	e00a      	b.n	80018ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001898:	f7ff f984 	bl	8000ba4 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e14e      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018ae:	4b59      	ldr	r3, [pc, #356]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d0ee      	beq.n	8001898 <HAL_RCC_OscConfig+0x5f0>
 80018ba:	e014      	b.n	80018e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018bc:	f7ff f972 	bl	8000ba4 <HAL_GetTick>
 80018c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018c2:	e00a      	b.n	80018da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018c4:	f7ff f96e 	bl	8000ba4 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e138      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018da:	4b4e      	ldr	r3, [pc, #312]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1ee      	bne.n	80018c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 812d 	beq.w	8001b4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80018f0:	4b48      	ldr	r3, [pc, #288]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	f000 80bd 	beq.w	8001a78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001902:	2b02      	cmp	r3, #2
 8001904:	f040 809e 	bne.w	8001a44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001908:	4b42      	ldr	r3, [pc, #264]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a41      	ldr	r2, [pc, #260]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800190e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001914:	f7ff f946 	bl	8000ba4 <HAL_GetTick>
 8001918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f942 	bl	8000ba4 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e10e      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d1f0      	bne.n	800191c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800193c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800193e:	4b37      	ldr	r3, [pc, #220]	@ (8001a1c <HAL_RCC_OscConfig+0x774>)
 8001940:	4013      	ands	r3, r2
 8001942:	687a      	ldr	r2, [r7, #4]
 8001944:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	430a      	orrs	r2, r1
 800194e:	4931      	ldr	r1, [pc, #196]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001950:	4313      	orrs	r3, r2
 8001952:	628b      	str	r3, [r1, #40]	@ 0x28
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001958:	3b01      	subs	r3, #1
 800195a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001962:	3b01      	subs	r3, #1
 8001964:	025b      	lsls	r3, r3, #9
 8001966:	b29b      	uxth	r3, r3
 8001968:	431a      	orrs	r2, r3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800196e:	3b01      	subs	r3, #1
 8001970:	041b      	lsls	r3, r3, #16
 8001972:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800197c:	3b01      	subs	r3, #1
 800197e:	061b      	lsls	r3, r3, #24
 8001980:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001984:	4923      	ldr	r1, [pc, #140]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001986:	4313      	orrs	r3, r2
 8001988:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 800198c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800198e:	4a21      	ldr	r2, [pc, #132]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001990:	f023 0301 	bic.w	r3, r3, #1
 8001994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001996:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800199a:	4b21      	ldr	r3, [pc, #132]	@ (8001a20 <HAL_RCC_OscConfig+0x778>)
 800199c:	4013      	ands	r3, r2
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80019a2:	00d2      	lsls	r2, r2, #3
 80019a4:	491b      	ldr	r1, [pc, #108]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ae:	f023 020c 	bic.w	r2, r3, #12
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4917      	ldr	r1, [pc, #92]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80019bc:	4b15      	ldr	r3, [pc, #84]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c0:	f023 0202 	bic.w	r2, r3, #2
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019c8:	4912      	ldr	r1, [pc, #72]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80019ce:	4b11      	ldr	r3, [pc, #68]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	4a10      	ldr	r2, [pc, #64]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	4a0d      	ldr	r2, [pc, #52]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80019e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f6:	4a07      	ldr	r2, [pc, #28]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a04      	ldr	r2, [pc, #16]	@ (8001a14 <HAL_RCC_OscConfig+0x76c>)
 8001a04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff f8cb 	bl	8000ba4 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a10:	e011      	b.n	8001a36 <HAL_RCC_OscConfig+0x78e>
 8001a12:	bf00      	nop
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58024800 	.word	0x58024800
 8001a1c:	fffffc0c 	.word	0xfffffc0c
 8001a20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8be 	bl	8000ba4 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e08a      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a36:	4b47      	ldr	r3, [pc, #284]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x77c>
 8001a42:	e082      	b.n	8001b4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a44:	4b43      	ldr	r3, [pc, #268]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a42      	ldr	r2, [pc, #264]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff f8a8 	bl	8000ba4 <HAL_GetTick>
 8001a54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff f8a4 	bl	8000ba4 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e070      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a6a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x7b0>
 8001a76:	e068      	b.n	8001b4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001a78:	4b36      	ldr	r3, [pc, #216]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001a7e:	4b35      	ldr	r3, [pc, #212]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d031      	beq.n	8001af0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f003 0203 	and.w	r2, r3, #3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d12a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	091b      	lsrs	r3, r3, #4
 8001a9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d122      	bne.n	8001af0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11a      	bne.n	8001af0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	0a5b      	lsrs	r3, r3, #9
 8001abe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ac6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d111      	bne.n	8001af0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	0c1b      	lsrs	r3, r3, #16
 8001ad0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ad8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d108      	bne.n	8001af0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	0e1b      	lsrs	r3, r3, #24
 8001ae2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001aea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d001      	beq.n	8001af4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e02b      	b.n	8001b4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001af4:	4b17      	ldr	r3, [pc, #92]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001af6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af8:	08db      	lsrs	r3, r3, #3
 8001afa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001afe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d01f      	beq.n	8001b4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001b0a:	4b12      	ldr	r3, [pc, #72]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b0e:	4a11      	ldr	r2, [pc, #68]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b10:	f023 0301 	bic.w	r3, r3, #1
 8001b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b16:	f7ff f845 	bl	8000ba4 <HAL_GetTick>
 8001b1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001b1c:	bf00      	nop
 8001b1e:	f7ff f841 	bl	8000ba4 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d0f9      	beq.n	8001b1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b58 <HAL_RCC_OscConfig+0x8b0>)
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001b36:	00d2      	lsls	r2, r2, #3
 8001b38:	4906      	ldr	r1, [pc, #24]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001b3e:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b42:	4a04      	ldr	r2, [pc, #16]	@ (8001b54 <HAL_RCC_OscConfig+0x8ac>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3730      	adds	r7, #48	@ 0x30
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	58024400 	.word	0x58024400
 8001b58:	ffff0007 	.word	0xffff0007

08001b5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b086      	sub	sp, #24
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e19c      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b8a      	ldr	r3, [pc, #552]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d910      	bls.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b87      	ldr	r3, [pc, #540]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 020f 	bic.w	r2, r3, #15
 8001b86:	4985      	ldr	r1, [pc, #532]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b8e:	4b83      	ldr	r3, [pc, #524]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d001      	beq.n	8001ba0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e184      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d010      	beq.n	8001bce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691a      	ldr	r2, [r3, #16]
 8001bb0:	4b7b      	ldr	r3, [pc, #492]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d908      	bls.n	8001bce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001bbc:	4b78      	ldr	r3, [pc, #480]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	4975      	ldr	r1, [pc, #468]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d010      	beq.n	8001bfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695a      	ldr	r2, [r3, #20]
 8001bde:	4b70      	ldr	r3, [pc, #448]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d908      	bls.n	8001bfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001bea:	4b6d      	ldr	r3, [pc, #436]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	496a      	ldr	r1, [pc, #424]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d010      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	4b64      	ldr	r3, [pc, #400]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c0e:	69db      	ldr	r3, [r3, #28]
 8001c10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d908      	bls.n	8001c2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001c18:	4b61      	ldr	r3, [pc, #388]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	495e      	ldr	r1, [pc, #376]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0320 	and.w	r3, r3, #32
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d010      	beq.n	8001c58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	4b59      	ldr	r3, [pc, #356]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001c46:	4b56      	ldr	r3, [pc, #344]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	4953      	ldr	r1, [pc, #332]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d010      	beq.n	8001c86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b4d      	ldr	r3, [pc, #308]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 030f 	and.w	r3, r3, #15
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d908      	bls.n	8001c86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c74:	4b4a      	ldr	r3, [pc, #296]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f023 020f 	bic.w	r2, r3, #15
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4947      	ldr	r1, [pc, #284]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0301 	and.w	r3, r3, #1
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d055      	beq.n	8001d3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001c92:	4b43      	ldr	r3, [pc, #268]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4940      	ldr	r1, [pc, #256]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cac:	4b3c      	ldr	r3, [pc, #240]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d121      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0f6      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001cc4:	4b36      	ldr	r3, [pc, #216]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d115      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0ea      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cdc:	4b30      	ldr	r3, [pc, #192]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d109      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e0de      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cec:	4b2c      	ldr	r3, [pc, #176]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d101      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e0d6      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cfc:	4b28      	ldr	r3, [pc, #160]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	f023 0207 	bic.w	r2, r3, #7
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4925      	ldr	r1, [pc, #148]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0e:	f7fe ff49 	bl	8000ba4 <HAL_GetTick>
 8001d12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	e00a      	b.n	8001d2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7fe ff45 	bl	8000ba4 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e0be      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	00db      	lsls	r3, r3, #3
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d1eb      	bne.n	8001d16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d010      	beq.n	8001d6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	4b14      	ldr	r3, [pc, #80]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d208      	bcs.n	8001d6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d5a:	4b11      	ldr	r3, [pc, #68]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	f023 020f 	bic.w	r2, r3, #15
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	490e      	ldr	r1, [pc, #56]	@ (8001da0 <HAL_RCC_ClockConfig+0x244>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f003 030f 	and.w	r3, r3, #15
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d214      	bcs.n	8001da4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7a:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f023 020f 	bic.w	r2, r3, #15
 8001d82:	4906      	ldr	r1, [pc, #24]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d8a:	4b04      	ldr	r3, [pc, #16]	@ (8001d9c <HAL_RCC_ClockConfig+0x240>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 030f 	and.w	r3, r3, #15
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e086      	b.n	8001eaa <HAL_RCC_ClockConfig+0x34e>
 8001d9c:	52002000 	.word	0x52002000
 8001da0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d208      	bcs.n	8001dd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4939      	ldr	r1, [pc, #228]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b34      	ldr	r3, [pc, #208]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d208      	bcs.n	8001e00 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dee:	4b31      	ldr	r3, [pc, #196]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	492e      	ldr	r1, [pc, #184]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b28      	ldr	r3, [pc, #160]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d208      	bcs.n	8001e2e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e1c:	4b25      	ldr	r3, [pc, #148]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	4922      	ldr	r1, [pc, #136]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d208      	bcs.n	8001e5c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4917      	ldr	r1, [pc, #92]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e5c:	f000 f834 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e64:	699b      	ldr	r3, [r3, #24]
 8001e66:	0a1b      	lsrs	r3, r3, #8
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	4912      	ldr	r1, [pc, #72]	@ (8001eb8 <HAL_RCC_ClockConfig+0x35c>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb4 <HAL_RCC_ClockConfig+0x358>)
 8001e7c:	699b      	ldr	r3, [r3, #24]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	4a0d      	ldr	r2, [pc, #52]	@ (8001eb8 <HAL_RCC_ClockConfig+0x35c>)
 8001e84:	5cd3      	ldrb	r3, [r2, r3]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e90:	4a0a      	ldr	r2, [pc, #40]	@ (8001ebc <HAL_RCC_ClockConfig+0x360>)
 8001e92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e94:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x364>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_RCC_ClockConfig+0x368>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fe36 	bl	8000b10 <HAL_InitTick>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	58024400 	.word	0x58024400
 8001eb8:	0800336c 	.word	0x0800336c
 8001ebc:	24000004 	.word	0x24000004
 8001ec0:	24000000 	.word	0x24000000
 8001ec4:	24000008 	.word	0x24000008

08001ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b089      	sub	sp, #36	@ 0x24
 8001ecc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ece:	4bb3      	ldr	r3, [pc, #716]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	f200 8155 	bhi.w	8002186 <HAL_RCC_GetSysClockFreq+0x2be>
 8001edc:	a201      	add	r2, pc, #4	@ (adr r2, 8001ee4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001f49 	.word	0x08001f49
 8001ee8:	08002187 	.word	0x08002187
 8001eec:	08002187 	.word	0x08002187
 8001ef0:	08002187 	.word	0x08002187
 8001ef4:	08002187 	.word	0x08002187
 8001ef8:	08002187 	.word	0x08002187
 8001efc:	08002187 	.word	0x08002187
 8001f00:	08002187 	.word	0x08002187
 8001f04:	08001f6f 	.word	0x08001f6f
 8001f08:	08002187 	.word	0x08002187
 8001f0c:	08002187 	.word	0x08002187
 8001f10:	08002187 	.word	0x08002187
 8001f14:	08002187 	.word	0x08002187
 8001f18:	08002187 	.word	0x08002187
 8001f1c:	08002187 	.word	0x08002187
 8001f20:	08002187 	.word	0x08002187
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08002187 	.word	0x08002187
 8001f2c:	08002187 	.word	0x08002187
 8001f30:	08002187 	.word	0x08002187
 8001f34:	08002187 	.word	0x08002187
 8001f38:	08002187 	.word	0x08002187
 8001f3c:	08002187 	.word	0x08002187
 8001f40:	08002187 	.word	0x08002187
 8001f44:	08001f7b 	.word	0x08001f7b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001f48:	4b94      	ldr	r3, [pc, #592]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0320 	and.w	r3, r3, #32
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d009      	beq.n	8001f68 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001f54:	4b91      	ldr	r3, [pc, #580]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	08db      	lsrs	r3, r3, #3
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	4a90      	ldr	r2, [pc, #576]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
 8001f64:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001f66:	e111      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001f68:	4b8d      	ldr	r3, [pc, #564]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001f6a:	61bb      	str	r3, [r7, #24]
      break;
 8001f6c:	e10e      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001f70:	61bb      	str	r3, [r7, #24]
      break;
 8001f72:	e10b      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001f74:	4b8c      	ldr	r3, [pc, #560]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001f76:	61bb      	str	r3, [r7, #24]
      break;
 8001f78:	e108      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001f7a:	4b88      	ldr	r3, [pc, #544]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	f003 0303 	and.w	r3, r3, #3
 8001f82:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001f84:	4b85      	ldr	r3, [pc, #532]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f8e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001f90:	4b82      	ldr	r3, [pc, #520]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001f9a:	4b80      	ldr	r3, [pc, #512]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f9e:	08db      	lsrs	r3, r3, #3
 8001fa0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	ee07 3a90 	vmov	s15, r3
 8001fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fb2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80e1 	beq.w	8002180 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f000 8083 	beq.w	80020cc <HAL_RCC_GetSysClockFreq+0x204>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b02      	cmp	r3, #2
 8001fca:	f200 80a1 	bhi.w	8002110 <HAL_RCC_GetSysClockFreq+0x248>
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_RCC_GetSysClockFreq+0x114>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d056      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x1c0>
 8001fda:	e099      	b.n	8002110 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001fdc:	4b6f      	ldr	r3, [pc, #444]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d02d      	beq.n	8002044 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f003 0303 	and.w	r3, r3, #3
 8001ff2:	4a6b      	ldr	r2, [pc, #428]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002012:	4b62      	ldr	r3, [pc, #392]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201a:	ee07 3a90 	vmov	s15, r3
 800201e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002022:	ed97 6a02 	vldr	s12, [r7, #8]
 8002026:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800202a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800202e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002042:	e087      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	ee07 3a90 	vmov	s15, r3
 800204a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800204e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80021b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002056:	4b51      	ldr	r3, [pc, #324]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800205e:	ee07 3a90 	vmov	s15, r3
 8002062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002066:	ed97 6a02 	vldr	s12, [r7, #8]
 800206a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800206e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800207a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800207e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002082:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002086:	e065      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	ee07 3a90 	vmov	s15, r3
 800208e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002092:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80021b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800209a:	4b40      	ldr	r3, [pc, #256]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800209e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020a2:	ee07 3a90 	vmov	s15, r3
 80020a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80020ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80020b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80020be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80020c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80020ca:	e043      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	ee07 3a90 	vmov	s15, r3
 80020d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80021b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80020da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80020de:	4b2f      	ldr	r3, [pc, #188]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020e6:	ee07 3a90 	vmov	s15, r3
 80020ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80020ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80020f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80020f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80020fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80020fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800210e:	e021      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	ee07 3a90 	vmov	s15, r3
 8002116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800211a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80021b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800211e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002122:	4b1e      	ldr	r3, [pc, #120]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800212a:	ee07 3a90 	vmov	s15, r3
 800212e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002132:	ed97 6a02 	vldr	s12, [r7, #8]
 8002136:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80021ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800213a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800213e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800214a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002152:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002158:	0a5b      	lsrs	r3, r3, #9
 800215a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800215e:	3301      	adds	r3, #1
 8002160:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	ee07 3a90 	vmov	s15, r3
 8002168:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002170:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002178:	ee17 3a90 	vmov	r3, s15
 800217c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002180:	2300      	movs	r3, #0
 8002182:	61bb      	str	r3, [r7, #24]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002186:	4b07      	ldr	r3, [pc, #28]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002188:	61bb      	str	r3, [r7, #24]
      break;
 800218a:	bf00      	nop
  }

  return sysclockfreq;
 800218c:	69bb      	ldr	r3, [r7, #24]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3724      	adds	r7, #36	@ 0x24
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
 800219a:	bf00      	nop
 800219c:	58024400 	.word	0x58024400
 80021a0:	03d09000 	.word	0x03d09000
 80021a4:	003d0900 	.word	0x003d0900
 80021a8:	017d7840 	.word	0x017d7840
 80021ac:	46000000 	.word	0x46000000
 80021b0:	4c742400 	.word	0x4c742400
 80021b4:	4a742400 	.word	0x4a742400
 80021b8:	4bbebc20 	.word	0x4bbebc20

080021bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e049      	b.n	8002262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d106      	bne.n	80021e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7fe fadc 	bl	80007a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2202      	movs	r2, #2
 80021ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f000 fbb0 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2201      	movs	r2, #1
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2201      	movs	r2, #1
 800222c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2201      	movs	r2, #1
 800223c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3708      	adds	r7, #8
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800226a:	b580      	push	{r7, lr}
 800226c:	b082      	sub	sp, #8
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e049      	b.n	8002310 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b00      	cmp	r3, #0
 8002286:	d106      	bne.n	8002296 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f000 f841 	bl	8002318 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2202      	movs	r2, #2
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	3304      	adds	r3, #4
 80022a6:	4619      	mov	r1, r3
 80022a8:	4610      	mov	r0, r2
 80022aa:	f000 fb59 	bl	8002960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2201      	movs	r2, #1
 80022c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2201      	movs	r2, #1
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2201      	movs	r2, #1
 80022ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d109      	bne.n	8002350 <HAL_TIM_PWM_Start+0x24>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002342:	b2db      	uxtb	r3, r3
 8002344:	2b01      	cmp	r3, #1
 8002346:	bf14      	ite	ne
 8002348:	2301      	movne	r3, #1
 800234a:	2300      	moveq	r3, #0
 800234c:	b2db      	uxtb	r3, r3
 800234e:	e03c      	b.n	80023ca <HAL_TIM_PWM_Start+0x9e>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	2b04      	cmp	r3, #4
 8002354:	d109      	bne.n	800236a <HAL_TIM_PWM_Start+0x3e>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b01      	cmp	r3, #1
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	e02f      	b.n	80023ca <HAL_TIM_PWM_Start+0x9e>
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2b08      	cmp	r3, #8
 800236e:	d109      	bne.n	8002384 <HAL_TIM_PWM_Start+0x58>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	bf14      	ite	ne
 800237c:	2301      	movne	r3, #1
 800237e:	2300      	moveq	r3, #0
 8002380:	b2db      	uxtb	r3, r3
 8002382:	e022      	b.n	80023ca <HAL_TIM_PWM_Start+0x9e>
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d109      	bne.n	800239e <HAL_TIM_PWM_Start+0x72>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b01      	cmp	r3, #1
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	e015      	b.n	80023ca <HAL_TIM_PWM_Start+0x9e>
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d109      	bne.n	80023b8 <HAL_TIM_PWM_Start+0x8c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	bf14      	ite	ne
 80023b0:	2301      	movne	r3, #1
 80023b2:	2300      	moveq	r3, #0
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	e008      	b.n	80023ca <HAL_TIM_PWM_Start+0x9e>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	bf14      	ite	ne
 80023c4:	2301      	movne	r3, #1
 80023c6:	2300      	moveq	r3, #0
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d001      	beq.n	80023d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e0a1      	b.n	8002516 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d104      	bne.n	80023e2 <HAL_TIM_PWM_Start+0xb6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2202      	movs	r2, #2
 80023dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023e0:	e023      	b.n	800242a <HAL_TIM_PWM_Start+0xfe>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	d104      	bne.n	80023f2 <HAL_TIM_PWM_Start+0xc6>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2202      	movs	r2, #2
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023f0:	e01b      	b.n	800242a <HAL_TIM_PWM_Start+0xfe>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d104      	bne.n	8002402 <HAL_TIM_PWM_Start+0xd6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002400:	e013      	b.n	800242a <HAL_TIM_PWM_Start+0xfe>
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d104      	bne.n	8002412 <HAL_TIM_PWM_Start+0xe6>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2202      	movs	r2, #2
 800240c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002410:	e00b      	b.n	800242a <HAL_TIM_PWM_Start+0xfe>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	2b10      	cmp	r3, #16
 8002416:	d104      	bne.n	8002422 <HAL_TIM_PWM_Start+0xf6>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2202      	movs	r2, #2
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002420:	e003      	b.n	800242a <HAL_TIM_PWM_Start+0xfe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	6839      	ldr	r1, [r7, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f000 feae 	bl	8003194 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a38      	ldr	r2, [pc, #224]	@ (8002520 <HAL_TIM_PWM_Start+0x1f4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_TIM_PWM_Start+0x13e>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a37      	ldr	r2, [pc, #220]	@ (8002524 <HAL_TIM_PWM_Start+0x1f8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d00e      	beq.n	800246a <HAL_TIM_PWM_Start+0x13e>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a35      	ldr	r2, [pc, #212]	@ (8002528 <HAL_TIM_PWM_Start+0x1fc>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d009      	beq.n	800246a <HAL_TIM_PWM_Start+0x13e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a34      	ldr	r2, [pc, #208]	@ (800252c <HAL_TIM_PWM_Start+0x200>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d004      	beq.n	800246a <HAL_TIM_PWM_Start+0x13e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <HAL_TIM_PWM_Start+0x204>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_TIM_PWM_Start+0x142>
 800246a:	2301      	movs	r3, #1
 800246c:	e000      	b.n	8002470 <HAL_TIM_PWM_Start+0x144>
 800246e:	2300      	movs	r3, #0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d007      	beq.n	8002484 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002482:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a25      	ldr	r2, [pc, #148]	@ (8002520 <HAL_TIM_PWM_Start+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d022      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002496:	d01d      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a25      	ldr	r2, [pc, #148]	@ (8002534 <HAL_TIM_PWM_Start+0x208>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d018      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a24      	ldr	r2, [pc, #144]	@ (8002538 <HAL_TIM_PWM_Start+0x20c>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d013      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a22      	ldr	r2, [pc, #136]	@ (800253c <HAL_TIM_PWM_Start+0x210>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d00e      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a1a      	ldr	r2, [pc, #104]	@ (8002524 <HAL_TIM_PWM_Start+0x1f8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d009      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002540 <HAL_TIM_PWM_Start+0x214>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d004      	beq.n	80024d4 <HAL_TIM_PWM_Start+0x1a8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a16      	ldr	r2, [pc, #88]	@ (8002528 <HAL_TIM_PWM_Start+0x1fc>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d115      	bne.n	8002500 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_TIM_PWM_Start+0x218>)
 80024dc:	4013      	ands	r3, r2
 80024de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2b06      	cmp	r3, #6
 80024e4:	d015      	beq.n	8002512 <HAL_TIM_PWM_Start+0x1e6>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024ec:	d011      	beq.n	8002512 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0201 	orr.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024fe:	e008      	b.n	8002512 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f042 0201 	orr.w	r2, r2, #1
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	e000      	b.n	8002514 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002512:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40010000 	.word	0x40010000
 8002524:	40010400 	.word	0x40010400
 8002528:	40014000 	.word	0x40014000
 800252c:	40014400 	.word	0x40014400
 8002530:	40014800 	.word	0x40014800
 8002534:	40000400 	.word	0x40000400
 8002538:	40000800 	.word	0x40000800
 800253c:	40000c00 	.word	0x40000c00
 8002540:	40001800 	.word	0x40001800
 8002544:	00010007 	.word	0x00010007

08002548 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002562:	2302      	movs	r3, #2
 8002564:	e0ff      	b.n	8002766 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b14      	cmp	r3, #20
 8002572:	f200 80f0 	bhi.w	8002756 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002576:	a201      	add	r2, pc, #4	@ (adr r2, 800257c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800257c:	080025d1 	.word	0x080025d1
 8002580:	08002757 	.word	0x08002757
 8002584:	08002757 	.word	0x08002757
 8002588:	08002757 	.word	0x08002757
 800258c:	08002611 	.word	0x08002611
 8002590:	08002757 	.word	0x08002757
 8002594:	08002757 	.word	0x08002757
 8002598:	08002757 	.word	0x08002757
 800259c:	08002653 	.word	0x08002653
 80025a0:	08002757 	.word	0x08002757
 80025a4:	08002757 	.word	0x08002757
 80025a8:	08002757 	.word	0x08002757
 80025ac:	08002693 	.word	0x08002693
 80025b0:	08002757 	.word	0x08002757
 80025b4:	08002757 	.word	0x08002757
 80025b8:	08002757 	.word	0x08002757
 80025bc:	080026d5 	.word	0x080026d5
 80025c0:	08002757 	.word	0x08002757
 80025c4:	08002757 	.word	0x08002757
 80025c8:	08002757 	.word	0x08002757
 80025cc:	08002715 	.word	0x08002715
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68b9      	ldr	r1, [r7, #8]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fa68 	bl	8002aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f042 0208 	orr.w	r2, r2, #8
 80025ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699a      	ldr	r2, [r3, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0204 	bic.w	r2, r2, #4
 80025fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6999      	ldr	r1, [r3, #24]
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	619a      	str	r2, [r3, #24]
      break;
 800260e:	e0a5      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68b9      	ldr	r1, [r7, #8]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fad8 	bl	8002bcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800262a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	699a      	ldr	r2, [r3, #24]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800263a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6999      	ldr	r1, [r3, #24]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	021a      	lsls	r2, r3, #8
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	430a      	orrs	r2, r1
 800264e:	619a      	str	r2, [r3, #24]
      break;
 8002650:	e084      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	4618      	mov	r0, r3
 800265a:	f000 fb41 	bl	8002ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f042 0208 	orr.w	r2, r2, #8
 800266c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0204 	bic.w	r2, r2, #4
 800267c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69d9      	ldr	r1, [r3, #28]
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	691a      	ldr	r2, [r3, #16]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	61da      	str	r2, [r3, #28]
      break;
 8002690:	e064      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68b9      	ldr	r1, [r7, #8]
 8002698:	4618      	mov	r0, r3
 800269a:	f000 fba9 	bl	8002df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69da      	ldr	r2, [r3, #28]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80026bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	69d9      	ldr	r1, [r3, #28]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	021a      	lsls	r2, r3, #8
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	61da      	str	r2, [r3, #28]
      break;
 80026d2:	e043      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	4618      	mov	r0, r3
 80026dc:	f000 fbf2 	bl	8002ec4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0208 	orr.w	r2, r2, #8
 80026ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0204 	bic.w	r2, r2, #4
 80026fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	691a      	ldr	r2, [r3, #16]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	430a      	orrs	r2, r1
 8002710:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002712:	e023      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	4618      	mov	r0, r3
 800271c:	f000 fc36 	bl	8002f8c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800272e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	021a      	lsls	r2, r3, #8
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	430a      	orrs	r2, r1
 8002752:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002754:	e002      	b.n	800275c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	75fb      	strb	r3, [r7, #23]
      break;
 800275a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002764:	7dfb      	ldrb	r3, [r7, #23]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop

08002770 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002784:	2b01      	cmp	r3, #1
 8002786:	d101      	bne.n	800278c <HAL_TIM_ConfigClockSource+0x1c>
 8002788:	2302      	movs	r3, #2
 800278a:	e0dc      	b.n	8002946 <HAL_TIM_ConfigClockSource+0x1d6>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a4:	68ba      	ldr	r2, [r7, #8]
 80027a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_TIM_ConfigClockSource+0x1e0>)
 80027a8:	4013      	ands	r3, r2
 80027aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80027b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68ba      	ldr	r2, [r7, #8]
 80027ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a64      	ldr	r2, [pc, #400]	@ (8002954 <HAL_TIM_ConfigClockSource+0x1e4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	f000 80a9 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 80027c8:	4a62      	ldr	r2, [pc, #392]	@ (8002954 <HAL_TIM_ConfigClockSource+0x1e4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	f200 80ae 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 80027d0:	4a61      	ldr	r2, [pc, #388]	@ (8002958 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	f000 80a1 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 80027d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002958 <HAL_TIM_ConfigClockSource+0x1e8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	f200 80a6 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 80027e0:	4a5e      	ldr	r2, [pc, #376]	@ (800295c <HAL_TIM_ConfigClockSource+0x1ec>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	f000 8099 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 80027e8:	4a5c      	ldr	r2, [pc, #368]	@ (800295c <HAL_TIM_ConfigClockSource+0x1ec>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	f200 809e 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 80027f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80027f4:	f000 8091 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 80027f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80027fc:	f200 8096 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 8002800:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002804:	f000 8089 	beq.w	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 8002808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800280c:	f200 808e 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 8002810:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002814:	d03e      	beq.n	8002894 <HAL_TIM_ConfigClockSource+0x124>
 8002816:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800281a:	f200 8087 	bhi.w	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 800281e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002822:	f000 8086 	beq.w	8002932 <HAL_TIM_ConfigClockSource+0x1c2>
 8002826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800282a:	d87f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 800282c:	2b70      	cmp	r3, #112	@ 0x70
 800282e:	d01a      	beq.n	8002866 <HAL_TIM_ConfigClockSource+0xf6>
 8002830:	2b70      	cmp	r3, #112	@ 0x70
 8002832:	d87b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 8002834:	2b60      	cmp	r3, #96	@ 0x60
 8002836:	d050      	beq.n	80028da <HAL_TIM_ConfigClockSource+0x16a>
 8002838:	2b60      	cmp	r3, #96	@ 0x60
 800283a:	d877      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 800283c:	2b50      	cmp	r3, #80	@ 0x50
 800283e:	d03c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x14a>
 8002840:	2b50      	cmp	r3, #80	@ 0x50
 8002842:	d873      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 8002844:	2b40      	cmp	r3, #64	@ 0x40
 8002846:	d058      	beq.n	80028fa <HAL_TIM_ConfigClockSource+0x18a>
 8002848:	2b40      	cmp	r3, #64	@ 0x40
 800284a:	d86f      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 800284c:	2b30      	cmp	r3, #48	@ 0x30
 800284e:	d064      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 8002850:	2b30      	cmp	r3, #48	@ 0x30
 8002852:	d86b      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 8002854:	2b20      	cmp	r3, #32
 8002856:	d060      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 8002858:	2b20      	cmp	r3, #32
 800285a:	d867      	bhi.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
 800285c:	2b00      	cmp	r3, #0
 800285e:	d05c      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 8002860:	2b10      	cmp	r3, #16
 8002862:	d05a      	beq.n	800291a <HAL_TIM_ConfigClockSource+0x1aa>
 8002864:	e062      	b.n	800292c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002876:	f000 fc6d 	bl	8003154 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002888:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68ba      	ldr	r2, [r7, #8]
 8002890:	609a      	str	r2, [r3, #8]
      break;
 8002892:	e04f      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80028a4:	f000 fc56 	bl	8003154 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689a      	ldr	r2, [r3, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80028b6:	609a      	str	r2, [r3, #8]
      break;
 80028b8:	e03c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80028c6:	461a      	mov	r2, r3
 80028c8:	f000 fbc6 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2150      	movs	r1, #80	@ 0x50
 80028d2:	4618      	mov	r0, r3
 80028d4:	f000 fc20 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 80028d8:	e02c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80028e6:	461a      	mov	r2, r3
 80028e8:	f000 fbe5 	bl	80030b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2160      	movs	r1, #96	@ 0x60
 80028f2:	4618      	mov	r0, r3
 80028f4:	f000 fc10 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 80028f8:	e01c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002906:	461a      	mov	r2, r3
 8002908:	f000 fba6 	bl	8003058 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2140      	movs	r1, #64	@ 0x40
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fc00 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 8002918:	e00c      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f000 fbf7 	bl	8003118 <TIM_ITRx_SetConfig>
      break;
 800292a:	e003      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e000      	b.n	8002934 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8002932:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002944:	7bfb      	ldrb	r3, [r7, #15]
}
 8002946:	4618      	mov	r0, r3
 8002948:	3710      	adds	r7, #16
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	ffceff88 	.word	0xffceff88
 8002954:	00100040 	.word	0x00100040
 8002958:	00100030 	.word	0x00100030
 800295c:	00100020 	.word	0x00100020

08002960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
 8002968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a46      	ldr	r2, [pc, #280]	@ (8002a8c <TIM_Base_SetConfig+0x12c>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d013      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800297e:	d00f      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a43      	ldr	r2, [pc, #268]	@ (8002a90 <TIM_Base_SetConfig+0x130>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d00b      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a42      	ldr	r2, [pc, #264]	@ (8002a94 <TIM_Base_SetConfig+0x134>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d007      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a41      	ldr	r2, [pc, #260]	@ (8002a98 <TIM_Base_SetConfig+0x138>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d003      	beq.n	80029a0 <TIM_Base_SetConfig+0x40>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a40      	ldr	r2, [pc, #256]	@ (8002a9c <TIM_Base_SetConfig+0x13c>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d108      	bne.n	80029b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	4a35      	ldr	r2, [pc, #212]	@ (8002a8c <TIM_Base_SetConfig+0x12c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d01f      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c0:	d01b      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a32      	ldr	r2, [pc, #200]	@ (8002a90 <TIM_Base_SetConfig+0x130>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d017      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4a31      	ldr	r2, [pc, #196]	@ (8002a94 <TIM_Base_SetConfig+0x134>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d013      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a30      	ldr	r2, [pc, #192]	@ (8002a98 <TIM_Base_SetConfig+0x138>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00f      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a9c <TIM_Base_SetConfig+0x13c>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d00b      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa0 <TIM_Base_SetConfig+0x140>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d007      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2d      	ldr	r2, [pc, #180]	@ (8002aa4 <TIM_Base_SetConfig+0x144>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d003      	beq.n	80029fa <TIM_Base_SetConfig+0x9a>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a2c      	ldr	r2, [pc, #176]	@ (8002aa8 <TIM_Base_SetConfig+0x148>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d108      	bne.n	8002a0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	695b      	ldr	r3, [r3, #20]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a16      	ldr	r2, [pc, #88]	@ (8002a8c <TIM_Base_SetConfig+0x12c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d00f      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	4a18      	ldr	r2, [pc, #96]	@ (8002a9c <TIM_Base_SetConfig+0x13c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d00b      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a17      	ldr	r2, [pc, #92]	@ (8002aa0 <TIM_Base_SetConfig+0x140>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d007      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a16      	ldr	r2, [pc, #88]	@ (8002aa4 <TIM_Base_SetConfig+0x144>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_Base_SetConfig+0xf8>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a15      	ldr	r2, [pc, #84]	@ (8002aa8 <TIM_Base_SetConfig+0x148>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d103      	bne.n	8002a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691a      	ldr	r2, [r3, #16]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0301 	and.w	r3, r3, #1
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d105      	bne.n	8002a7e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	611a      	str	r2, [r3, #16]
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	40010000 	.word	0x40010000
 8002a90:	40000400 	.word	0x40000400
 8002a94:	40000800 	.word	0x40000800
 8002a98:	40000c00 	.word	0x40000c00
 8002a9c:	40010400 	.word	0x40010400
 8002aa0:	40014000 	.word	0x40014000
 8002aa4:	40014400 	.word	0x40014400
 8002aa8:	40014800 	.word	0x40014800

08002aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b087      	sub	sp, #28
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	f023 0201 	bic.w	r2, r3, #1
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	699b      	ldr	r3, [r3, #24]
 8002ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4b37      	ldr	r3, [pc, #220]	@ (8002bb4 <TIM_OC1_SetConfig+0x108>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f023 0303 	bic.w	r3, r3, #3
 8002ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	f023 0302 	bic.w	r3, r3, #2
 8002af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb8 <TIM_OC1_SetConfig+0x10c>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d00f      	beq.n	8002b28 <TIM_OC1_SetConfig+0x7c>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8002bbc <TIM_OC1_SetConfig+0x110>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00b      	beq.n	8002b28 <TIM_OC1_SetConfig+0x7c>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc0 <TIM_OC1_SetConfig+0x114>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d007      	beq.n	8002b28 <TIM_OC1_SetConfig+0x7c>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc4 <TIM_OC1_SetConfig+0x118>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d003      	beq.n	8002b28 <TIM_OC1_SetConfig+0x7c>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a29      	ldr	r2, [pc, #164]	@ (8002bc8 <TIM_OC1_SetConfig+0x11c>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d10c      	bne.n	8002b42 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	f023 0308 	bic.w	r3, r3, #8
 8002b2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a1c      	ldr	r2, [pc, #112]	@ (8002bb8 <TIM_OC1_SetConfig+0x10c>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d00f      	beq.n	8002b6a <TIM_OC1_SetConfig+0xbe>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a1b      	ldr	r2, [pc, #108]	@ (8002bbc <TIM_OC1_SetConfig+0x110>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00b      	beq.n	8002b6a <TIM_OC1_SetConfig+0xbe>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc0 <TIM_OC1_SetConfig+0x114>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d007      	beq.n	8002b6a <TIM_OC1_SetConfig+0xbe>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	@ (8002bc4 <TIM_OC1_SetConfig+0x118>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d003      	beq.n	8002b6a <TIM_OC1_SetConfig+0xbe>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a18      	ldr	r2, [pc, #96]	@ (8002bc8 <TIM_OC1_SetConfig+0x11c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d111      	bne.n	8002b8e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	693a      	ldr	r2, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	693a      	ldr	r2, [r7, #16]
 8002b92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68fa      	ldr	r2, [r7, #12]
 8002b98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	621a      	str	r2, [r3, #32]
}
 8002ba8:	bf00      	nop
 8002baa:	371c      	adds	r7, #28
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	fffeff8f 	.word	0xfffeff8f
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40010400 	.word	0x40010400
 8002bc0:	40014000 	.word	0x40014000
 8002bc4:	40014400 	.word	0x40014400
 8002bc8:	40014800 	.word	0x40014800

08002bcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a1b      	ldr	r3, [r3, #32]
 8002be0:	f023 0210 	bic.w	r2, r3, #16
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4b34      	ldr	r3, [pc, #208]	@ (8002cc8 <TIM_OC2_SetConfig+0xfc>)
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	021b      	lsls	r3, r3, #8
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f023 0320 	bic.w	r3, r3, #32
 8002c16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a29      	ldr	r2, [pc, #164]	@ (8002ccc <TIM_OC2_SetConfig+0x100>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_OC2_SetConfig+0x68>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a28      	ldr	r2, [pc, #160]	@ (8002cd0 <TIM_OC2_SetConfig+0x104>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d10d      	bne.n	8002c50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	4313      	orrs	r3, r2
 8002c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a1e      	ldr	r2, [pc, #120]	@ (8002ccc <TIM_OC2_SetConfig+0x100>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d00f      	beq.n	8002c78 <TIM_OC2_SetConfig+0xac>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd0 <TIM_OC2_SetConfig+0x104>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d00b      	beq.n	8002c78 <TIM_OC2_SetConfig+0xac>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd4 <TIM_OC2_SetConfig+0x108>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d007      	beq.n	8002c78 <TIM_OC2_SetConfig+0xac>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd8 <TIM_OC2_SetConfig+0x10c>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_OC2_SetConfig+0xac>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a1a      	ldr	r2, [pc, #104]	@ (8002cdc <TIM_OC2_SetConfig+0x110>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d113      	bne.n	8002ca0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	695b      	ldr	r3, [r3, #20]
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	693a      	ldr	r2, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68fa      	ldr	r2, [r7, #12]
 8002caa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	621a      	str	r2, [r3, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	feff8fff 	.word	0xfeff8fff
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40010400 	.word	0x40010400
 8002cd4:	40014000 	.word	0x40014000
 8002cd8:	40014400 	.word	0x40014400
 8002cdc:	40014800 	.word	0x40014800

08002ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4b33      	ldr	r3, [pc, #204]	@ (8002dd8 <TIM_OC3_SetConfig+0xf8>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a28      	ldr	r2, [pc, #160]	@ (8002ddc <TIM_OC3_SetConfig+0xfc>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_OC3_SetConfig+0x66>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a27      	ldr	r2, [pc, #156]	@ (8002de0 <TIM_OC3_SetConfig+0x100>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10d      	bne.n	8002d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a1d      	ldr	r2, [pc, #116]	@ (8002ddc <TIM_OC3_SetConfig+0xfc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d00f      	beq.n	8002d8a <TIM_OC3_SetConfig+0xaa>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a1c      	ldr	r2, [pc, #112]	@ (8002de0 <TIM_OC3_SetConfig+0x100>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d00b      	beq.n	8002d8a <TIM_OC3_SetConfig+0xaa>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a1b      	ldr	r2, [pc, #108]	@ (8002de4 <TIM_OC3_SetConfig+0x104>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d007      	beq.n	8002d8a <TIM_OC3_SetConfig+0xaa>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a1a      	ldr	r2, [pc, #104]	@ (8002de8 <TIM_OC3_SetConfig+0x108>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d003      	beq.n	8002d8a <TIM_OC3_SetConfig+0xaa>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a19      	ldr	r2, [pc, #100]	@ (8002dec <TIM_OC3_SetConfig+0x10c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d113      	bne.n	8002db2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	693a      	ldr	r2, [r7, #16]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	621a      	str	r2, [r3, #32]
}
 8002dcc:	bf00      	nop
 8002dce:	371c      	adds	r7, #28
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	fffeff8f 	.word	0xfffeff8f
 8002ddc:	40010000 	.word	0x40010000
 8002de0:	40010400 	.word	0x40010400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b087      	sub	sp, #28
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	69db      	ldr	r3, [r3, #28]
 8002e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4b24      	ldr	r3, [pc, #144]	@ (8002eac <TIM_OC4_SetConfig+0xbc>)
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	031b      	lsls	r3, r3, #12
 8002e42:	693a      	ldr	r2, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	4a19      	ldr	r2, [pc, #100]	@ (8002eb0 <TIM_OC4_SetConfig+0xc0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00f      	beq.n	8002e70 <TIM_OC4_SetConfig+0x80>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a18      	ldr	r2, [pc, #96]	@ (8002eb4 <TIM_OC4_SetConfig+0xc4>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d00b      	beq.n	8002e70 <TIM_OC4_SetConfig+0x80>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	4a17      	ldr	r2, [pc, #92]	@ (8002eb8 <TIM_OC4_SetConfig+0xc8>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d007      	beq.n	8002e70 <TIM_OC4_SetConfig+0x80>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a16      	ldr	r2, [pc, #88]	@ (8002ebc <TIM_OC4_SetConfig+0xcc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d003      	beq.n	8002e70 <TIM_OC4_SetConfig+0x80>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ec0 <TIM_OC4_SetConfig+0xd0>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d109      	bne.n	8002e84 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	019b      	lsls	r3, r3, #6
 8002e7e:	697a      	ldr	r2, [r7, #20]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	697a      	ldr	r2, [r7, #20]
 8002e88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685a      	ldr	r2, [r3, #4]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	621a      	str	r2, [r3, #32]
}
 8002e9e:	bf00      	nop
 8002ea0:	371c      	adds	r7, #28
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	feff8fff 	.word	0xfeff8fff
 8002eb0:	40010000 	.word	0x40010000
 8002eb4:	40010400 	.word	0x40010400
 8002eb8:	40014000 	.word	0x40014000
 8002ebc:	40014400 	.word	0x40014400
 8002ec0:	40014800 	.word	0x40014800

08002ec4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	4b21      	ldr	r3, [pc, #132]	@ (8002f74 <TIM_OC5_SetConfig+0xb0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002f04:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	041b      	lsls	r3, r3, #16
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a18      	ldr	r2, [pc, #96]	@ (8002f78 <TIM_OC5_SetConfig+0xb4>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <TIM_OC5_SetConfig+0x76>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a17      	ldr	r2, [pc, #92]	@ (8002f7c <TIM_OC5_SetConfig+0xb8>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_OC5_SetConfig+0x76>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a16      	ldr	r2, [pc, #88]	@ (8002f80 <TIM_OC5_SetConfig+0xbc>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_OC5_SetConfig+0x76>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a15      	ldr	r2, [pc, #84]	@ (8002f84 <TIM_OC5_SetConfig+0xc0>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_OC5_SetConfig+0x76>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a14      	ldr	r2, [pc, #80]	@ (8002f88 <TIM_OC5_SetConfig+0xc4>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d109      	bne.n	8002f4e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f40:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	021b      	lsls	r3, r3, #8
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	697a      	ldr	r2, [r7, #20]
 8002f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685a      	ldr	r2, [r3, #4]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	621a      	str	r2, [r3, #32]
}
 8002f68:	bf00      	nop
 8002f6a:	371c      	adds	r7, #28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	fffeff8f 	.word	0xfffeff8f
 8002f78:	40010000 	.word	0x40010000
 8002f7c:	40010400 	.word	0x40010400
 8002f80:	40014000 	.word	0x40014000
 8002f84:	40014400 	.word	0x40014400
 8002f88:	40014800 	.word	0x40014800

08002f8c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b087      	sub	sp, #28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a1b      	ldr	r3, [r3, #32]
 8002fa0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <TIM_OC6_SetConfig+0xb4>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	021b      	lsls	r3, r3, #8
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	051b      	lsls	r3, r3, #20
 8002fd6:	693a      	ldr	r2, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a19      	ldr	r2, [pc, #100]	@ (8003044 <TIM_OC6_SetConfig+0xb8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d00f      	beq.n	8003004 <TIM_OC6_SetConfig+0x78>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a18      	ldr	r2, [pc, #96]	@ (8003048 <TIM_OC6_SetConfig+0xbc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d00b      	beq.n	8003004 <TIM_OC6_SetConfig+0x78>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a17      	ldr	r2, [pc, #92]	@ (800304c <TIM_OC6_SetConfig+0xc0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d007      	beq.n	8003004 <TIM_OC6_SetConfig+0x78>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a16      	ldr	r2, [pc, #88]	@ (8003050 <TIM_OC6_SetConfig+0xc4>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d003      	beq.n	8003004 <TIM_OC6_SetConfig+0x78>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a15      	ldr	r2, [pc, #84]	@ (8003054 <TIM_OC6_SetConfig+0xc8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d109      	bne.n	8003018 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800300a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	029b      	lsls	r3, r3, #10
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68fa      	ldr	r2, [r7, #12]
 8003022:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	621a      	str	r2, [r3, #32]
}
 8003032:	bf00      	nop
 8003034:	371c      	adds	r7, #28
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	feff8fff 	.word	0xfeff8fff
 8003044:	40010000 	.word	0x40010000
 8003048:	40010400 	.word	0x40010400
 800304c:	40014000 	.word	0x40014000
 8003050:	40014400 	.word	0x40014400
 8003054:	40014800 	.word	0x40014800

08003058 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003058:	b480      	push	{r7}
 800305a:	b087      	sub	sp, #28
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	f023 0201 	bic.w	r2, r3, #1
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003082:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	f023 030a 	bic.w	r3, r3, #10
 8003094:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	621a      	str	r2, [r3, #32]
}
 80030aa:	bf00      	nop
 80030ac:	371c      	adds	r7, #28
 80030ae:	46bd      	mov	sp, r7
 80030b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b4:	4770      	bx	lr

080030b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	f023 0210 	bic.w	r2, r3, #16
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80030e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	031b      	lsls	r3, r3, #12
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80030f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	621a      	str	r2, [r3, #32]
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
	...

08003118 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <TIM_ITRx_SetConfig+0x38>)
 800312c:	4013      	ands	r3, r2
 800312e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003130:	683a      	ldr	r2, [r7, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	4313      	orrs	r3, r2
 8003136:	f043 0307 	orr.w	r3, r3, #7
 800313a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68fa      	ldr	r2, [r7, #12]
 8003140:	609a      	str	r2, [r3, #8]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	ffcfff8f 	.word	0xffcfff8f

08003154 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003154:	b480      	push	{r7}
 8003156:	b087      	sub	sp, #28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800316e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	021a      	lsls	r2, r3, #8
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	431a      	orrs	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4313      	orrs	r3, r2
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	609a      	str	r2, [r3, #8]
}
 8003188:	bf00      	nop
 800318a:	371c      	adds	r7, #28
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003194:	b480      	push	{r7}
 8003196:	b087      	sub	sp, #28
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	f003 031f 	and.w	r3, r3, #31
 80031a6:	2201      	movs	r2, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6a1a      	ldr	r2, [r3, #32]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	401a      	ands	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a1a      	ldr	r2, [r3, #32]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	fa01 f303 	lsl.w	r3, r1, r3
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e06d      	b.n	80032d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2202      	movs	r2, #2
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a30      	ldr	r2, [pc, #192]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a2f      	ldr	r2, [pc, #188]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d108      	bne.n	800323e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	4313      	orrs	r3, r2
 800323c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003244:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4313      	orrs	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a20      	ldr	r2, [pc, #128]	@ (80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d022      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800326a:	d01d      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a1d      	ldr	r2, [pc, #116]	@ (80032e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d018      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a1c      	ldr	r2, [pc, #112]	@ (80032ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d013      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a1a      	ldr	r2, [pc, #104]	@ (80032f0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a15      	ldr	r2, [pc, #84]	@ (80032e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d009      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a16      	ldr	r2, [pc, #88]	@ (80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a15      	ldr	r2, [pc, #84]	@ (80032f8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d10c      	bne.n	80032c2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68ba      	ldr	r2, [r7, #8]
 80032c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2201      	movs	r2, #1
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	40010000 	.word	0x40010000
 80032e4:	40010400 	.word	0x40010400
 80032e8:	40000400 	.word	0x40000400
 80032ec:	40000800 	.word	0x40000800
 80032f0:	40000c00 	.word	0x40000c00
 80032f4:	40001800 	.word	0x40001800
 80032f8:	40014000 	.word	0x40014000

080032fc <memset>:
 80032fc:	4402      	add	r2, r0
 80032fe:	4603      	mov	r3, r0
 8003300:	4293      	cmp	r3, r2
 8003302:	d100      	bne.n	8003306 <memset+0xa>
 8003304:	4770      	bx	lr
 8003306:	f803 1b01 	strb.w	r1, [r3], #1
 800330a:	e7f9      	b.n	8003300 <memset+0x4>

0800330c <__libc_init_array>:
 800330c:	b570      	push	{r4, r5, r6, lr}
 800330e:	4d0d      	ldr	r5, [pc, #52]	@ (8003344 <__libc_init_array+0x38>)
 8003310:	4c0d      	ldr	r4, [pc, #52]	@ (8003348 <__libc_init_array+0x3c>)
 8003312:	1b64      	subs	r4, r4, r5
 8003314:	10a4      	asrs	r4, r4, #2
 8003316:	2600      	movs	r6, #0
 8003318:	42a6      	cmp	r6, r4
 800331a:	d109      	bne.n	8003330 <__libc_init_array+0x24>
 800331c:	4d0b      	ldr	r5, [pc, #44]	@ (800334c <__libc_init_array+0x40>)
 800331e:	4c0c      	ldr	r4, [pc, #48]	@ (8003350 <__libc_init_array+0x44>)
 8003320:	f000 f818 	bl	8003354 <_init>
 8003324:	1b64      	subs	r4, r4, r5
 8003326:	10a4      	asrs	r4, r4, #2
 8003328:	2600      	movs	r6, #0
 800332a:	42a6      	cmp	r6, r4
 800332c:	d105      	bne.n	800333a <__libc_init_array+0x2e>
 800332e:	bd70      	pop	{r4, r5, r6, pc}
 8003330:	f855 3b04 	ldr.w	r3, [r5], #4
 8003334:	4798      	blx	r3
 8003336:	3601      	adds	r6, #1
 8003338:	e7ee      	b.n	8003318 <__libc_init_array+0xc>
 800333a:	f855 3b04 	ldr.w	r3, [r5], #4
 800333e:	4798      	blx	r3
 8003340:	3601      	adds	r6, #1
 8003342:	e7f2      	b.n	800332a <__libc_init_array+0x1e>
 8003344:	0800337c 	.word	0x0800337c
 8003348:	0800337c 	.word	0x0800337c
 800334c:	0800337c 	.word	0x0800337c
 8003350:	08003380 	.word	0x08003380

08003354 <_init>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	bf00      	nop
 8003358:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800335a:	bc08      	pop	{r3}
 800335c:	469e      	mov	lr, r3
 800335e:	4770      	bx	lr

08003360 <_fini>:
 8003360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003362:	bf00      	nop
 8003364:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003366:	bc08      	pop	{r3}
 8003368:	469e      	mov	lr, r3
 800336a:	4770      	bx	lr
