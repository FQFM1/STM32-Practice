
TIM_InputCapture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a644  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  0800a8e8  0800a8e8  0000b8e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b360  0800b360  0000c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b368  0800b368  0000c368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b36c  0800b36c  0000c36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b370  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006a4  240001d8  0800b548  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400087c  0800b548  0000d87c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00014d85  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c64  00000000  00000000  00021f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000011b0  00000000  00000000  00024bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00037f78  00000000  00000000  00025da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00017c20  00000000  00000000  0005dd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015e5e1  00000000  00000000  00075938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001d3f19  2**0
                  CONTENTS, READONLY
 17 .debug_rnglists 00000dac  00000000  00000000  001d3f5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00005cf8  00000000  00000000  001d4d08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000062  00000000  00000000  001daa00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d8 	.word	0x240001d8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a8cc 	.word	0x0800a8cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001dc 	.word	0x240001dc
 80002dc:	0800a8cc 	.word	0x0800a8cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_d2lz>:
 8000708:	b508      	push	{r3, lr}
 800070a:	4602      	mov	r2, r0
 800070c:	460b      	mov	r3, r1
 800070e:	ec43 2b17 	vmov	d7, r2, r3
 8000712:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800071a:	d403      	bmi.n	8000724 <__aeabi_d2lz+0x1c>
 800071c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000720:	f000 b80a 	b.w	8000738 <__aeabi_d2ulz>
 8000724:	eeb1 7b47 	vneg.f64	d7, d7
 8000728:	ec51 0b17 	vmov	r0, r1, d7
 800072c:	f000 f804 	bl	8000738 <__aeabi_d2ulz>
 8000730:	4240      	negs	r0, r0
 8000732:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000736:	bd08      	pop	{r3, pc}

08000738 <__aeabi_d2ulz>:
 8000738:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000768 <__aeabi_d2ulz+0x30>
 800073c:	ec41 0b17 	vmov	d7, r0, r1
 8000740:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 8000770 <__aeabi_d2ulz+0x38>
 8000744:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000748:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800074c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000750:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000754:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000758:	ee16 1a10 	vmov	r1, s12
 800075c:	ee17 0a90 	vmov	r0, s15
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	f3af 8000 	nop.w
 8000768:	00000000 	.word	0x00000000
 800076c:	3df00000 	.word	0x3df00000
 8000770:	00000000 	.word	0x00000000
 8000774:	41f00000 	.word	0x41f00000

08000778 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b088      	sub	sp, #32
 800077c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
 8000786:	605a      	str	r2, [r3, #4]
 8000788:	609a      	str	r2, [r3, #8]
 800078a:	60da      	str	r2, [r3, #12]
 800078c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b23      	ldr	r3, [pc, #140]	@ (800081c <MX_GPIO_Init+0xa4>)
 8000790:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000794:	4a21      	ldr	r2, [pc, #132]	@ (800081c <MX_GPIO_Init+0xa4>)
 8000796:	f043 0302 	orr.w	r3, r3, #2
 800079a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007a4:	f003 0302 	and.w	r3, r3, #2
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b2:	4a1a      	ldr	r2, [pc, #104]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007bc:	4b17      	ldr	r3, [pc, #92]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ca:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d0:	4a12      	ldr	r2, [pc, #72]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_GPIO_Init+0xa4>)
 80007dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007e4:	603b      	str	r3, [r7, #0]
 80007e6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 80007e8:	2200      	movs	r2, #0
 80007ea:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80007ee:	480c      	ldr	r0, [pc, #48]	@ (8000820 <MX_GPIO_Init+0xa8>)
 80007f0:	f001 fc44 	bl	800207c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Trig_Pin;
 80007f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	4804      	ldr	r0, [pc, #16]	@ (8000820 <MX_GPIO_Init+0xa8>)
 800080e:	f001 fa85 	bl	8001d1c <HAL_GPIO_Init>

}
 8000812:	bf00      	nop
 8000814:	3720      	adds	r7, #32
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	58024400 	.word	0x58024400
 8000820:	58020000 	.word	0x58020000

08000824 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1c      	ldr	r3, [pc, #112]	@ (800089c <MX_I2C1_Init+0x78>)
 800082a:	4a1d      	ldr	r2, [pc, #116]	@ (80008a0 <MX_I2C1_Init+0x7c>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 800082e:	4b1b      	ldr	r3, [pc, #108]	@ (800089c <MX_I2C1_Init+0x78>)
 8000830:	4a1c      	ldr	r2, [pc, #112]	@ (80008a4 <MX_I2C1_Init+0x80>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b19      	ldr	r3, [pc, #100]	@ (800089c <MX_I2C1_Init+0x78>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b18      	ldr	r3, [pc, #96]	@ (800089c <MX_I2C1_Init+0x78>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b16      	ldr	r3, [pc, #88]	@ (800089c <MX_I2C1_Init+0x78>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b15      	ldr	r3, [pc, #84]	@ (800089c <MX_I2C1_Init+0x78>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b13      	ldr	r3, [pc, #76]	@ (800089c <MX_I2C1_Init+0x78>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b12      	ldr	r3, [pc, #72]	@ (800089c <MX_I2C1_Init+0x78>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_I2C1_Init+0x78>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	480f      	ldr	r0, [pc, #60]	@ (800089c <MX_I2C1_Init+0x78>)
 8000860:	f001 fc26 	bl	80020b0 <HAL_I2C_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 fa0f 	bl	8000c8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	2100      	movs	r1, #0
 8000870:	480a      	ldr	r0, [pc, #40]	@ (800089c <MX_I2C1_Init+0x78>)
 8000872:	f001 ffeb 	bl	800284c <HAL_I2CEx_ConfigAnalogFilter>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 fa06 	bl	8000c8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	2100      	movs	r1, #0
 8000882:	4806      	ldr	r0, [pc, #24]	@ (800089c <MX_I2C1_Init+0x78>)
 8000884:	f002 f82d 	bl	80028e2 <HAL_I2CEx_ConfigDigitalFilter>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f9fd 	bl	8000c8c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8000892:	2001      	movs	r0, #1
 8000894:	f002 f872 	bl	800297c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	240001f4 	.word	0x240001f4
 80008a0:	40005400 	.word	0x40005400
 80008a4:	0050174f 	.word	0x0050174f

080008a8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b0ba      	sub	sp, #232	@ 0xe8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c0:	f107 0310 	add.w	r3, r7, #16
 80008c4:	22c0      	movs	r2, #192	@ 0xc0
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 fcea 	bl	80072a2 <memset>
  if(i2cHandle->Instance==I2C1)
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	4a27      	ldr	r2, [pc, #156]	@ (8000970 <HAL_I2C_MspInit+0xc8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d146      	bne.n	8000966 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008d8:	f04f 0208 	mov.w	r2, #8
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008ea:	f107 0310 	add.w	r3, r7, #16
 80008ee:	4618      	mov	r0, r3
 80008f0:	f003 f82c 	bl	800394c <HAL_RCCEx_PeriphCLKConfig>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80008fa:	f000 f9c7 	bl	8000c8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 8000900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000904:	4a1b      	ldr	r2, [pc, #108]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 8000906:	f043 0302 	orr.w	r3, r3, #2
 800090a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090e:	4b19      	ldr	r3, [pc, #100]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 8000910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000914:	f003 0302 	and.w	r3, r3, #2
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800091c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000920:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000924:	2312      	movs	r3, #18
 8000926:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000936:	2304      	movs	r3, #4
 8000938:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000940:	4619      	mov	r1, r3
 8000942:	480d      	ldr	r0, [pc, #52]	@ (8000978 <HAL_I2C_MspInit+0xd0>)
 8000944:	f001 f9ea 	bl	8001d1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000948:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 800094a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800094e:	4a09      	ldr	r2, [pc, #36]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 8000950:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000954:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000958:	4b06      	ldr	r3, [pc, #24]	@ (8000974 <HAL_I2C_MspInit+0xcc>)
 800095a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800095e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000966:	bf00      	nop
 8000968:	37e8      	adds	r7, #232	@ 0xe8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40005400 	.word	0x40005400
 8000974:	58024400 	.word	0x58024400
 8000978:	58020400 	.word	0x58020400
 800097c:	00000000 	.word	0x00000000

08000980 <HAL_TIM_IC_CaptureCallback>:
int DownEdge = 0;
float distance = 0.0;
float sum = 0.0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	if(htim == &htim1 && htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	4a1b      	ldr	r2, [pc, #108]	@ (80009f8 <HAL_TIM_IC_CaptureCallback+0x78>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d129      	bne.n	80009e4 <HAL_TIM_IC_CaptureCallback+0x64>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	7f1b      	ldrb	r3, [r3, #28]
 8000994:	2b08      	cmp	r3, #8
 8000996:	d125      	bne.n	80009e4 <HAL_TIM_IC_CaptureCallback+0x64>
	{
		UpEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 8000998:	2108      	movs	r1, #8
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f005 f95e 	bl	8005c5c <HAL_TIM_ReadCapturedValue>
 80009a0:	4603      	mov	r3, r0
 80009a2:	461a      	mov	r2, r3
 80009a4:	4b15      	ldr	r3, [pc, #84]	@ (80009fc <HAL_TIM_IC_CaptureCallback+0x7c>)
 80009a6:	601a      	str	r2, [r3, #0]
		DownEdge = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80009a8:	210c      	movs	r1, #12
 80009aa:	6878      	ldr	r0, [r7, #4]
 80009ac:	f005 f956 	bl	8005c5c <HAL_TIM_ReadCapturedValue>
 80009b0:	4603      	mov	r3, r0
 80009b2:	461a      	mov	r2, r3
 80009b4:	4b12      	ldr	r3, [pc, #72]	@ (8000a00 <HAL_TIM_IC_CaptureCallback+0x80>)
 80009b6:	601a      	str	r2, [r3, #0]
		distance = ((DownEdge - UpEdge) * 0.034) / 2;
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_TIM_IC_CaptureCallback+0x80>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b0f      	ldr	r3, [pc, #60]	@ (80009fc <HAL_TIM_IC_CaptureCallback+0x7c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	1ad3      	subs	r3, r2, r3
 80009c2:	ee07 3a90 	vmov	s15, r3
 80009c6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80009ca:	ed9f 6b09 	vldr	d6, [pc, #36]	@ 80009f0 <HAL_TIM_IC_CaptureCallback+0x70>
 80009ce:	ee27 6b06 	vmul.f64	d6, d7, d6
 80009d2:	eeb0 5b00 	vmov.f64	d5, #0	@ 0x40000000  2.0
 80009d6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80009da:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009de:	4b09      	ldr	r3, [pc, #36]	@ (8000a04 <HAL_TIM_IC_CaptureCallback+0x84>)
 80009e0:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80009e4:	bf00      	nop
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	f3af 8000 	nop.w
 80009f0:	b020c49c 	.word	0xb020c49c
 80009f4:	3fa16872 	.word	0x3fa16872
 80009f8:	240006e0 	.word	0x240006e0
 80009fc:	24000248 	.word	0x24000248
 8000a00:	2400024c 	.word	0x2400024c
 8000a04:	24000250 	.word	0x24000250

08000a08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000a0e:	f000 f911 	bl	8000c34 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a12:	f000 ff39 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a16:	f000 f85d 	bl	8000ad4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a1a:	f7ff fead 	bl	8000778 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a1e:	f7ff ff01 	bl	8000824 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000a22:	f000 fe2f 	bl	8001684 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 8000a26:	2014      	movs	r0, #20
 8000a28:	f000 ffc0 	bl	80019ac <HAL_Delay>
  OLED_Init();
 8000a2c:	f000 f95c 	bl	8000ce8 <OLED_Init>

  HAL_TIM_Base_Start(&htim1);
 8000a30:	4823      	ldr	r0, [pc, #140]	@ (8000ac0 <main+0xb8>)
 8000a32:	f004 fb51 	bl	80050d8 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
 8000a36:	2108      	movs	r1, #8
 8000a38:	4821      	ldr	r0, [pc, #132]	@ (8000ac0 <main+0xb8>)
 8000a3a:	f004 fc1f 	bl	800527c <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000a3e:	210c      	movs	r1, #12
 8000a40:	481f      	ldr	r0, [pc, #124]	@ (8000ac0 <main+0xb8>)
 8000a42:	f004 fd1f 	bl	8005484 <HAL_TIM_IC_Start_IT>

  char message[20] = "";
 8000a46:	2300      	movs	r3, #0
 8000a48:	607b      	str	r3, [r7, #4]
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a5e:	4819      	ldr	r0, [pc, #100]	@ (8000ac4 <main+0xbc>)
 8000a60:	f001 fb0c 	bl	800207c <HAL_GPIO_WritePin>
	  HAL_Delay(1);
 8000a64:	2001      	movs	r0, #1
 8000a66:	f000 ffa1 	bl	80019ac <HAL_Delay>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a70:	4814      	ldr	r0, [pc, #80]	@ (8000ac4 <main+0xbc>)
 8000a72:	f001 fb03 	bl	800207c <HAL_GPIO_WritePin>

	  __HAL_TIM_SET_COUNTER(&htim1, 0);
 8000a76:	4b12      	ldr	r3, [pc, #72]	@ (8000ac0 <main+0xb8>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	@ 0x24

	  HAL_Delay(20);
 8000a7e:	2014      	movs	r0, #20
 8000a80:	f000 ff94 	bl	80019ac <HAL_Delay>

	  OLED_NewFrame();
 8000a84:	f000 f990 	bl	8000da8 <OLED_NewFrame>
	  sprintf(message, "Dist: %.2fcm", distance);
 8000a88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac8 <main+0xc0>)
 8000a8a:	edd3 7a00 	vldr	s15, [r3]
 8000a8e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a92:	1d38      	adds	r0, r7, #4
 8000a94:	ec53 2b17 	vmov	r2, r3, d7
 8000a98:	490c      	ldr	r1, [pc, #48]	@ (8000acc <main+0xc4>)
 8000a9a:	f006 fb8f 	bl	80071bc <siprintf>
	  OLED_PrintString(0, 0, message, &font16x16, OLED_COLOR_NORMAL);
 8000a9e:	1d3a      	adds	r2, r7, #4
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ad0 <main+0xc8>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 fba3 	bl	80011f4 <OLED_PrintString>
	  OLED_ShowFrame();
 8000aae:	f000 f987 	bl	8000dc0 <OLED_ShowFrame>

	  HAL_Delay(500);
 8000ab2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ab6:	f000 ff79 	bl	80019ac <HAL_Delay>
	  HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);
 8000aba:	bf00      	nop
 8000abc:	e7cc      	b.n	8000a58 <main+0x50>
 8000abe:	bf00      	nop
 8000ac0:	240006e0 	.word	0x240006e0
 8000ac4:	58020000 	.word	0x58020000
 8000ac8:	24000250 	.word	0x24000250
 8000acc:	0800a8e8 	.word	0x0800a8e8
 8000ad0:	0800af14 	.word	0x0800af14

08000ad4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b09e      	sub	sp, #120	@ 0x78
 8000ad8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ada:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000ade:	224c      	movs	r2, #76	@ 0x4c
 8000ae0:	2100      	movs	r1, #0
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f006 fbdd 	bl	80072a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae8:	f107 030c 	add.w	r3, r7, #12
 8000aec:	2220      	movs	r2, #32
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 fbd6 	bl	80072a2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000af6:	2002      	movs	r0, #2
 8000af8:	f001 ff64 	bl	80029c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	4b49      	ldr	r3, [pc, #292]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b04:	4a48      	ldr	r2, [pc, #288]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b06:	f023 0301 	bic.w	r3, r3, #1
 8000b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b0c:	4b46      	ldr	r3, [pc, #280]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b10:	f003 0301 	and.w	r3, r3, #1
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	4b45      	ldr	r3, [pc, #276]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b18:	699b      	ldr	r3, [r3, #24]
 8000b1a:	4a44      	ldr	r2, [pc, #272]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b20:	6193      	str	r3, [r2, #24]
 8000b22:	4b42      	ldr	r3, [pc, #264]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b24:	699b      	ldr	r3, [r3, #24]
 8000b26:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b2a:	60bb      	str	r3, [r7, #8]
 8000b2c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b2e:	bf00      	nop
 8000b30:	4b3e      	ldr	r3, [pc, #248]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b3c:	d1f8      	bne.n	8000b30 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <SystemClock_Config+0x15c>)
 8000b40:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b44:	4a3a      	ldr	r2, [pc, #232]	@ (8000c30 <SystemClock_Config+0x15c>)
 8000b46:	f043 0302 	orr.w	r3, r3, #2
 8000b4a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b4e:	4b38      	ldr	r3, [pc, #224]	@ (8000c30 <SystemClock_Config+0x15c>)
 8000b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	603b      	str	r3, [r7, #0]
 8000b60:	4b32      	ldr	r3, [pc, #200]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	4a31      	ldr	r2, [pc, #196]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b66:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b6a:	6193      	str	r3, [r2, #24]
 8000b6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b6e:	699b      	ldr	r3, [r3, #24]
 8000b70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b74:	603b      	str	r3, [r7, #0]
 8000b76:	4b2c      	ldr	r3, [pc, #176]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000b82:	4b29      	ldr	r3, [pc, #164]	@ (8000c28 <SystemClock_Config+0x154>)
 8000b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b8e:	bf00      	nop
 8000b90:	4b26      	ldr	r3, [pc, #152]	@ (8000c2c <SystemClock_Config+0x158>)
 8000b92:	699b      	ldr	r3, [r3, #24]
 8000b94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b98:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b9c:	d1f8      	bne.n	8000b90 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba6:	2340      	movs	r3, #64	@ 0x40
 8000ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000baa:	2302      	movs	r3, #2
 8000bac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bb2:	2304      	movs	r3, #4
 8000bb4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000bb6:	233c      	movs	r3, #60	@ 0x3c
 8000bb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000bba:	2302      	movs	r3, #2
 8000bbc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000bc6:	230c      	movs	r3, #12
 8000bc8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f001 ff2e 	bl	8002a38 <HAL_RCC_OscConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000be2:	f000 f853 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be6:	233f      	movs	r3, #63	@ 0x3f
 8000be8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bea:	2303      	movs	r3, #3
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bf2:	2308      	movs	r3, #8
 8000bf4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bf6:	2340      	movs	r3, #64	@ 0x40
 8000bf8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bfa:	2340      	movs	r3, #64	@ 0x40
 8000bfc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c04:	2340      	movs	r3, #64	@ 0x40
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f002 fb6c 	bl	80032ec <HAL_RCC_ClockConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c1a:	f000 f837 	bl	8000c8c <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	3778      	adds	r7, #120	@ 0x78
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	58000400 	.word	0x58000400
 8000c2c:	58024800 	.word	0x58024800
 8000c30:	58024400 	.word	0x58024400

08000c34 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c46:	f000 fff1 	bl	8001c2c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c52:	2300      	movs	r3, #0
 8000c54:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c56:	231f      	movs	r3, #31
 8000c58:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c5a:	2387      	movs	r3, #135	@ 0x87
 8000c5c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c62:	2300      	movs	r3, #0
 8000c64:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c66:	2301      	movs	r3, #1
 8000c68:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c72:	2300      	movs	r3, #0
 8000c74:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c76:	463b      	mov	r3, r7
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f001 f80f 	bl	8001c9c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c7e:	2004      	movs	r0, #4
 8000c80:	f000 ffec 	bl	8001c5c <HAL_MPU_Enable>

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <OLED_Send>:
 * @param len 要发送的数据长度
 * @return None
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他平台时应根据实际情况修改此函数
 */
void OLED_Send(uint8_t *data, uint8_t len)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af02      	add	r7, sp, #8
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	70fb      	strb	r3, [r7, #3]
  HAL_I2C_Master_Transmit(&HI2C, OLED_ADDRESS, data, len, HAL_MAX_DELAY);
 8000ca4:	78fb      	ldrb	r3, [r7, #3]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cac:	9200      	str	r2, [sp, #0]
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	2178      	movs	r1, #120	@ 0x78
 8000cb2:	4803      	ldr	r0, [pc, #12]	@ (8000cc0 <OLED_Send+0x28>)
 8000cb4:	f001 fa98 	bl	80021e8 <HAL_I2C_Master_Transmit>
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	240001f4 	.word	0x240001f4

08000cc4 <OLED_SendCmd>:

/**
 * @brief 向OLED发送指令
 */
void OLED_SendCmd(uint8_t cmd)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  static uint8_t sendBuffer[2] = {0};
  sendBuffer[1] = cmd;
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <OLED_SendCmd+0x20>)
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	7053      	strb	r3, [r2, #1]
  OLED_Send(sendBuffer, 2);
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	4803      	ldr	r0, [pc, #12]	@ (8000ce4 <OLED_SendCmd+0x20>)
 8000cd8:	f7ff ffde 	bl	8000c98 <OLED_Send>
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	24000654 	.word	0x24000654

08000ce8 <OLED_Init>:
/**
 * @brief 初始化OLED (SSD1306)
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_Init()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 8000cec:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000cf0:	f000 fe5c 	bl	80019ac <HAL_Delay>

  OLED_SendCmd(0xAE); /*关闭显示 display off*/
 8000cf4:	20ae      	movs	r0, #174	@ 0xae
 8000cf6:	f7ff ffe5 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x20);
 8000cfa:	2020      	movs	r0, #32
 8000cfc:	f7ff ffe2 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000d00:	2010      	movs	r0, #16
 8000d02:	f7ff ffdf 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xB0);
 8000d06:	20b0      	movs	r0, #176	@ 0xb0
 8000d08:	f7ff ffdc 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xC8);
 8000d0c:	20c8      	movs	r0, #200	@ 0xc8
 8000d0e:	f7ff ffd9 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x00);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff ffd6 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x10);
 8000d18:	2010      	movs	r0, #16
 8000d1a:	f7ff ffd3 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x40);
 8000d1e:	2040      	movs	r0, #64	@ 0x40
 8000d20:	f7ff ffd0 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x81);
 8000d24:	2081      	movs	r0, #129	@ 0x81
 8000d26:	f7ff ffcd 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xDF);
 8000d2a:	20df      	movs	r0, #223	@ 0xdf
 8000d2c:	f7ff ffca 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0xA1);
 8000d30:	20a1      	movs	r0, #161	@ 0xa1
 8000d32:	f7ff ffc7 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xA6);
 8000d36:	20a6      	movs	r0, #166	@ 0xa6
 8000d38:	f7ff ffc4 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0xA8);
 8000d3c:	20a8      	movs	r0, #168	@ 0xa8
 8000d3e:	f7ff ffc1 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x3F);
 8000d42:	203f      	movs	r0, #63	@ 0x3f
 8000d44:	f7ff ffbe 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xA4);
 8000d48:	20a4      	movs	r0, #164	@ 0xa4
 8000d4a:	f7ff ffbb 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xD3);
 8000d4e:	20d3      	movs	r0, #211	@ 0xd3
 8000d50:	f7ff ffb8 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x00);
 8000d54:	2000      	movs	r0, #0
 8000d56:	f7ff ffb5 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xD5);
 8000d5a:	20d5      	movs	r0, #213	@ 0xd5
 8000d5c:	f7ff ffb2 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0xF0);
 8000d60:	20f0      	movs	r0, #240	@ 0xf0
 8000d62:	f7ff ffaf 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xD9);
 8000d66:	20d9      	movs	r0, #217	@ 0xd9
 8000d68:	f7ff ffac 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x22);
 8000d6c:	2022      	movs	r0, #34	@ 0x22
 8000d6e:	f7ff ffa9 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xDA);
 8000d72:	20da      	movs	r0, #218	@ 0xda
 8000d74:	f7ff ffa6 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x12);
 8000d78:	2012      	movs	r0, #18
 8000d7a:	f7ff ffa3 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0xDB);
 8000d7e:	20db      	movs	r0, #219	@ 0xdb
 8000d80:	f7ff ffa0 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x20);
 8000d84:	2020      	movs	r0, #32
 8000d86:	f7ff ff9d 	bl	8000cc4 <OLED_SendCmd>

  OLED_SendCmd(0x8D);
 8000d8a:	208d      	movs	r0, #141	@ 0x8d
 8000d8c:	f7ff ff9a 	bl	8000cc4 <OLED_SendCmd>
  OLED_SendCmd(0x14);
 8000d90:	2014      	movs	r0, #20
 8000d92:	f7ff ff97 	bl	8000cc4 <OLED_SendCmd>

  OLED_NewFrame();
 8000d96:	f000 f807 	bl	8000da8 <OLED_NewFrame>
  OLED_ShowFrame();
 8000d9a:	f000 f811 	bl	8000dc0 <OLED_ShowFrame>

  OLED_SendCmd(0xAF); /*开启显示 display ON*/
 8000d9e:	20af      	movs	r0, #175	@ 0xaf
 8000da0:	f7ff ff90 	bl	8000cc4 <OLED_SendCmd>
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <OLED_NewFrame>:

/**
 * @brief 清空显存 绘制新的一帧
 */
void OLED_NewFrame()
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  memset(OLED_GRAM, 0, sizeof(OLED_GRAM));
 8000dac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db0:	2100      	movs	r1, #0
 8000db2:	4802      	ldr	r0, [pc, #8]	@ (8000dbc <OLED_NewFrame+0x14>)
 8000db4:	f006 fa75 	bl	80072a2 <memset>
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	24000254 	.word	0x24000254

08000dc0 <OLED_ShowFrame>:
/**
 * @brief 将当前显存显示到屏幕上
 * @note 此函数是移植本驱动时的重要函数 将本驱动库移植到其他驱动芯片时应根据实际情况修改此函数
 */
void OLED_ShowFrame()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
  static uint8_t sendBuffer[OLED_COLUMN + 1];
  sendBuffer[0] = 0x40;
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <OLED_ShowFrame+0x5c>)
 8000dc8:	2240      	movs	r2, #64	@ 0x40
 8000dca:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000dcc:	2300      	movs	r3, #0
 8000dce:	71fb      	strb	r3, [r7, #7]
 8000dd0:	e01b      	b.n	8000e0a <OLED_ShowFrame+0x4a>
  {
    OLED_SendCmd(0xB0 + i); // 设置页地址
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	3b50      	subs	r3, #80	@ 0x50
 8000dd6:	b2db      	uxtb	r3, r3
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff73 	bl	8000cc4 <OLED_SendCmd>
    OLED_SendCmd(0x00);     // 设置列地址低4位
 8000dde:	2000      	movs	r0, #0
 8000de0:	f7ff ff70 	bl	8000cc4 <OLED_SendCmd>
    OLED_SendCmd(0x10);     // 设置列地址高4位
 8000de4:	2010      	movs	r0, #16
 8000de6:	f7ff ff6d 	bl	8000cc4 <OLED_SendCmd>
    memcpy(sendBuffer + 1, OLED_GRAM[i], OLED_COLUMN);
 8000dea:	480d      	ldr	r0, [pc, #52]	@ (8000e20 <OLED_ShowFrame+0x60>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	01db      	lsls	r3, r3, #7
 8000df0:	4a0c      	ldr	r2, [pc, #48]	@ (8000e24 <OLED_ShowFrame+0x64>)
 8000df2:	4413      	add	r3, r2
 8000df4:	2280      	movs	r2, #128	@ 0x80
 8000df6:	4619      	mov	r1, r3
 8000df8:	f006 fad3 	bl	80073a2 <memcpy>
    OLED_Send(sendBuffer, OLED_COLUMN + 1);
 8000dfc:	2181      	movs	r1, #129	@ 0x81
 8000dfe:	4807      	ldr	r0, [pc, #28]	@ (8000e1c <OLED_ShowFrame+0x5c>)
 8000e00:	f7ff ff4a 	bl	8000c98 <OLED_Send>
  for (uint8_t i = 0; i < OLED_PAGE; i++)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	3301      	adds	r3, #1
 8000e08:	71fb      	strb	r3, [r7, #7]
 8000e0a:	79fb      	ldrb	r3, [r7, #7]
 8000e0c:	2b07      	cmp	r3, #7
 8000e0e:	d9e0      	bls.n	8000dd2 <OLED_ShowFrame+0x12>
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	24000658 	.word	0x24000658
 8000e20:	24000659 	.word	0x24000659
 8000e24:	24000254 	.word	0x24000254

08000e28 <OLED_SetByte_Fine>:
 * @note 此函数将显存中的某一字节的第start位到第end位设置为与data相同
 * @note start和end的范围为0-7, start必须小于等于end
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数只能设置显存中的某一真实字节
 */
void OLED_SetByte_Fine(uint8_t page, uint8_t column, uint8_t data, uint8_t start, uint8_t end, OLED_ColorMode color)
{
 8000e28:	b490      	push	{r4, r7}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4604      	mov	r4, r0
 8000e30:	4608      	mov	r0, r1
 8000e32:	4611      	mov	r1, r2
 8000e34:	461a      	mov	r2, r3
 8000e36:	4623      	mov	r3, r4
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71bb      	strb	r3, [r7, #6]
 8000e3e:	460b      	mov	r3, r1
 8000e40:	717b      	strb	r3, [r7, #5]
 8000e42:	4613      	mov	r3, r2
 8000e44:	713b      	strb	r3, [r7, #4]
  static uint8_t temp;
  if (page >= OLED_PAGE || column >= OLED_COLUMN)
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b07      	cmp	r3, #7
 8000e4a:	d860      	bhi.n	8000f0e <OLED_SetByte_Fine+0xe6>
 8000e4c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db5c      	blt.n	8000f0e <OLED_SetByte_Fine+0xe6>
    return;
  if (color)
 8000e54:	7d3b      	ldrb	r3, [r7, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d002      	beq.n	8000e60 <OLED_SetByte_Fine+0x38>
    data = ~data;
 8000e5a:	797b      	ldrb	r3, [r7, #5]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	717b      	strb	r3, [r7, #5]

  temp = data | (0xff << (end + 1)) | (0xff >> (8 - start));
 8000e60:	7c3b      	ldrb	r3, [r7, #16]
 8000e62:	3301      	adds	r3, #1
 8000e64:	22ff      	movs	r2, #255	@ 0xff
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	b25a      	sxtb	r2, r3
 8000e74:	793b      	ldrb	r3, [r7, #4]
 8000e76:	f1c3 0308 	rsb	r3, r3, #8
 8000e7a:	21ff      	movs	r1, #255	@ 0xff
 8000e7c:	fa41 f303 	asr.w	r3, r1, r3
 8000e80:	b25b      	sxtb	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <OLED_SetByte_Fine+0xf0>)
 8000e8a:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] &= temp;
 8000e8c:	79fa      	ldrb	r2, [r7, #7]
 8000e8e:	79bb      	ldrb	r3, [r7, #6]
 8000e90:	4922      	ldr	r1, [pc, #136]	@ (8000f1c <OLED_SetByte_Fine+0xf4>)
 8000e92:	01d2      	lsls	r2, r2, #7
 8000e94:	440a      	add	r2, r1
 8000e96:	4413      	add	r3, r2
 8000e98:	7818      	ldrb	r0, [r3, #0]
 8000e9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f18 <OLED_SetByte_Fine+0xf0>)
 8000e9c:	7819      	ldrb	r1, [r3, #0]
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	79bb      	ldrb	r3, [r7, #6]
 8000ea2:	4001      	ands	r1, r0
 8000ea4:	b2c8      	uxtb	r0, r1
 8000ea6:	491d      	ldr	r1, [pc, #116]	@ (8000f1c <OLED_SetByte_Fine+0xf4>)
 8000ea8:	01d2      	lsls	r2, r2, #7
 8000eaa:	440a      	add	r2, r1
 8000eac:	4413      	add	r3, r2
 8000eae:	4602      	mov	r2, r0
 8000eb0:	701a      	strb	r2, [r3, #0]
  temp = data & ~(0xff << (end + 1)) & ~(0xff >> (8 - start));
 8000eb2:	7c3b      	ldrb	r3, [r7, #16]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	22ff      	movs	r2, #255	@ 0xff
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	b25b      	sxtb	r3, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	b25a      	sxtb	r2, r3
 8000ec2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	b25a      	sxtb	r2, r3
 8000eca:	793b      	ldrb	r3, [r7, #4]
 8000ecc:	f1c3 0308 	rsb	r3, r3, #8
 8000ed0:	21ff      	movs	r1, #255	@ 0xff
 8000ed2:	fa41 f303 	asr.w	r3, r1, r3
 8000ed6:	b25b      	sxtb	r3, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	4013      	ands	r3, r2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	b2da      	uxtb	r2, r3
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8000f18 <OLED_SetByte_Fine+0xf0>)
 8000ee4:	701a      	strb	r2, [r3, #0]
  OLED_GRAM[page][column] |= temp;
 8000ee6:	79fa      	ldrb	r2, [r7, #7]
 8000ee8:	79bb      	ldrb	r3, [r7, #6]
 8000eea:	490c      	ldr	r1, [pc, #48]	@ (8000f1c <OLED_SetByte_Fine+0xf4>)
 8000eec:	01d2      	lsls	r2, r2, #7
 8000eee:	440a      	add	r2, r1
 8000ef0:	4413      	add	r3, r2
 8000ef2:	7818      	ldrb	r0, [r3, #0]
 8000ef4:	4b08      	ldr	r3, [pc, #32]	@ (8000f18 <OLED_SetByte_Fine+0xf0>)
 8000ef6:	7819      	ldrb	r1, [r3, #0]
 8000ef8:	79fa      	ldrb	r2, [r7, #7]
 8000efa:	79bb      	ldrb	r3, [r7, #6]
 8000efc:	4301      	orrs	r1, r0
 8000efe:	b2c8      	uxtb	r0, r1
 8000f00:	4906      	ldr	r1, [pc, #24]	@ (8000f1c <OLED_SetByte_Fine+0xf4>)
 8000f02:	01d2      	lsls	r2, r2, #7
 8000f04:	440a      	add	r2, r1
 8000f06:	4413      	add	r3, r2
 8000f08:	4602      	mov	r2, r0
 8000f0a:	701a      	strb	r2, [r3, #0]
 8000f0c:	e000      	b.n	8000f10 <OLED_SetByte_Fine+0xe8>
    return;
 8000f0e:	bf00      	nop
  // 使用OLED_SetPixel实现
  // for (uint8_t i = start; i <= end; i++) {
  //   OLED_SetPixel(column, page * 8 + i, !((data >> i) & 0x01));
  // }
}
 8000f10:	3708      	adds	r7, #8
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc90      	pop	{r4, r7}
 8000f16:	4770      	bx	lr
 8000f18:	240006d9 	.word	0x240006d9
 8000f1c:	24000254 	.word	0x24000254

08000f20 <OLED_SetBits_Fine>:
 * @note 此函数将显存中从(x,y)开始向下数len位设置为与data相同
 * @note len的范围为1-8
 * @note 此函数与OLED_SetByte_Fine的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits_Fine(uint8_t x, uint8_t y, uint8_t data, uint8_t len, OLED_ColorMode color)
{
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	4604      	mov	r4, r0
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4623      	mov	r3, r4
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	4603      	mov	r3, r0
 8000f34:	71bb      	strb	r3, [r7, #6]
 8000f36:	460b      	mov	r3, r1
 8000f38:	717b      	strb	r3, [r7, #5]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000f3e:	79bb      	ldrb	r3, [r7, #6]
 8000f40:	08db      	lsrs	r3, r3, #3
 8000f42:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8000f44:	79bb      	ldrb	r3, [r7, #6]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	73bb      	strb	r3, [r7, #14]
  if (bit + len > 8)
 8000f4c:	7bba      	ldrb	r2, [r7, #14]
 8000f4e:	793b      	ldrb	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	2b08      	cmp	r3, #8
 8000f54:	dd29      	ble.n	8000faa <OLED_SetBits_Fine+0x8a>
  {
    OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 8000f56:	797a      	ldrb	r2, [r7, #5]
 8000f58:	7bbb      	ldrb	r3, [r7, #14]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	7bbc      	ldrb	r4, [r7, #14]
 8000f62:	79f9      	ldrb	r1, [r7, #7]
 8000f64:	7bf8      	ldrb	r0, [r7, #15]
 8000f66:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4623      	mov	r3, r4
 8000f72:	f7ff ff59 	bl	8000e28 <OLED_SetByte_Fine>
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, len + bit - 1 - 8, color);
 8000f76:	7bfb      	ldrb	r3, [r7, #15]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	b2d8      	uxtb	r0, r3
 8000f7c:	797a      	ldrb	r2, [r7, #5]
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
 8000f80:	f1c3 0308 	rsb	r3, r3, #8
 8000f84:	fa42 f303 	asr.w	r3, r2, r3
 8000f88:	b2dc      	uxtb	r4, r3
 8000f8a:	793a      	ldrb	r2, [r7, #4]
 8000f8c:	7bbb      	ldrb	r3, [r7, #14]
 8000f8e:	4413      	add	r3, r2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	3b09      	subs	r3, #9
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	79f9      	ldrb	r1, [r7, #7]
 8000f98:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	4622      	mov	r2, r4
 8000fa4:	f7ff ff40 	bl	8000e28 <OLED_SetByte_Fine>
  }
  // 使用OLED_SetPixel实现
  // for (uint8_t i = 0; i < len; i++) {
  //   OLED_SetPixel(x, y + i, !((data >> i) & 0x01));
  // }
}
 8000fa8:	e015      	b.n	8000fd6 <OLED_SetBits_Fine+0xb6>
    OLED_SetByte_Fine(page, x, data << bit, bit, bit + len - 1, color);
 8000faa:	797a      	ldrb	r2, [r7, #5]
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	b2dc      	uxtb	r4, r3
 8000fb4:	7bba      	ldrb	r2, [r7, #14]
 8000fb6:	793b      	ldrb	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	7bbd      	ldrb	r5, [r7, #14]
 8000fc2:	79f9      	ldrb	r1, [r7, #7]
 8000fc4:	7bf8      	ldrb	r0, [r7, #15]
 8000fc6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	462b      	mov	r3, r5
 8000fd0:	4622      	mov	r2, r4
 8000fd2:	f7ff ff29 	bl	8000e28 <OLED_SetByte_Fine>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}

08000fde <OLED_SetBits>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始向下数8位设置为与data相同
 * @note 此函数与OLED_SetByte的区别在于此函数的横坐标和纵坐标是以像素为单位的, 可能出现跨两个真实字节的情况(跨页)
 */
void OLED_SetBits(uint8_t x, uint8_t y, uint8_t data, OLED_ColorMode color)
{
 8000fde:	b590      	push	{r4, r7, lr}
 8000fe0:	b087      	sub	sp, #28
 8000fe2:	af02      	add	r7, sp, #8
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	4611      	mov	r1, r2
 8000fea:	461a      	mov	r2, r3
 8000fec:	4623      	mov	r3, r4
 8000fee:	71fb      	strb	r3, [r7, #7]
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	71bb      	strb	r3, [r7, #6]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	717b      	strb	r3, [r7, #5]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	713b      	strb	r3, [r7, #4]
  uint8_t page = y / 8;
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	08db      	lsrs	r3, r3, #3
 8001000:	73fb      	strb	r3, [r7, #15]
  uint8_t bit = y % 8;
 8001002:	79bb      	ldrb	r3, [r7, #6]
 8001004:	f003 0307 	and.w	r3, r3, #7
 8001008:	73bb      	strb	r3, [r7, #14]
  OLED_SetByte_Fine(page, x, data << bit, bit, 7, color);
 800100a:	797a      	ldrb	r2, [r7, #5]
 800100c:	7bbb      	ldrb	r3, [r7, #14]
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	b2da      	uxtb	r2, r3
 8001014:	7bbc      	ldrb	r4, [r7, #14]
 8001016:	79f9      	ldrb	r1, [r7, #7]
 8001018:	7bf8      	ldrb	r0, [r7, #15]
 800101a:	793b      	ldrb	r3, [r7, #4]
 800101c:	9301      	str	r3, [sp, #4]
 800101e:	2307      	movs	r3, #7
 8001020:	9300      	str	r3, [sp, #0]
 8001022:	4623      	mov	r3, r4
 8001024:	f7ff ff00 	bl	8000e28 <OLED_SetByte_Fine>
  if (bit)
 8001028:	7bbb      	ldrb	r3, [r7, #14]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d014      	beq.n	8001058 <OLED_SetBits+0x7a>
  {
    OLED_SetByte_Fine(page + 1, x, data >> (8 - bit), 0, bit - 1, color);
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	3301      	adds	r3, #1
 8001032:	b2d8      	uxtb	r0, r3
 8001034:	797a      	ldrb	r2, [r7, #5]
 8001036:	7bbb      	ldrb	r3, [r7, #14]
 8001038:	f1c3 0308 	rsb	r3, r3, #8
 800103c:	fa42 f303 	asr.w	r3, r2, r3
 8001040:	b2dc      	uxtb	r4, r3
 8001042:	7bbb      	ldrb	r3, [r7, #14]
 8001044:	3b01      	subs	r3, #1
 8001046:	b2db      	uxtb	r3, r3
 8001048:	79f9      	ldrb	r1, [r7, #7]
 800104a:	793a      	ldrb	r2, [r7, #4]
 800104c:	9201      	str	r2, [sp, #4]
 800104e:	9300      	str	r3, [sp, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	4622      	mov	r2, r4
 8001054:	f7ff fee8 	bl	8000e28 <OLED_SetByte_Fine>
  }
}
 8001058:	bf00      	nop
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	bd90      	pop	{r4, r7, pc}

08001060 <OLED_SetBlock>:
 * @param color 颜色
 * @note 此函数将显存中从(x,y)开始的w*h个像素设置为data中的数据
 * @note data的数据应该采用列行式排列
 */
void OLED_SetBlock(uint8_t x, uint8_t y, const uint8_t *data, uint8_t w, uint8_t h, OLED_ColorMode color)
{
 8001060:	b590      	push	{r4, r7, lr}
 8001062:	b087      	sub	sp, #28
 8001064:	af02      	add	r7, sp, #8
 8001066:	603a      	str	r2, [r7, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	460b      	mov	r3, r1
 8001070:	71bb      	strb	r3, [r7, #6]
 8001072:	4613      	mov	r3, r2
 8001074:	717b      	strb	r3, [r7, #5]
  uint8_t fullRow = h / 8; // 完整的行数
 8001076:	f897 3020 	ldrb.w	r3, [r7, #32]
 800107a:	08db      	lsrs	r3, r3, #3
 800107c:	733b      	strb	r3, [r7, #12]
  uint8_t partBit = h % 8; // 不完整的字节中的有效位数
 800107e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	72fb      	strb	r3, [r7, #11]
  for (uint8_t i = 0; i < w; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e025      	b.n	80010da <OLED_SetBlock+0x7a>
  {
    for (uint8_t j = 0; j < fullRow; j++)
 800108e:	2300      	movs	r3, #0
 8001090:	73bb      	strb	r3, [r7, #14]
 8001092:	e01b      	b.n	80010cc <OLED_SetBlock+0x6c>
    {
      OLED_SetBits(x + i, y + j * 8, data[i + j * w], color);
 8001094:	79fa      	ldrb	r2, [r7, #7]
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	4413      	add	r3, r2
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	00db      	lsls	r3, r3, #3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	79bb      	ldrb	r3, [r7, #6]
 80010a4:	4413      	add	r3, r2
 80010a6:	b2dc      	uxtb	r4, r3
 80010a8:	7bfa      	ldrb	r2, [r7, #15]
 80010aa:	7bbb      	ldrb	r3, [r7, #14]
 80010ac:	7979      	ldrb	r1, [r7, #5]
 80010ae:	fb01 f303 	mul.w	r3, r1, r3
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	781a      	ldrb	r2, [r3, #0]
 80010bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80010c0:	4621      	mov	r1, r4
 80010c2:	f7ff ff8c 	bl	8000fde <OLED_SetBits>
    for (uint8_t j = 0; j < fullRow; j++)
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73bb      	strb	r3, [r7, #14]
 80010cc:	7bba      	ldrb	r2, [r7, #14]
 80010ce:	7b3b      	ldrb	r3, [r7, #12]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d3df      	bcc.n	8001094 <OLED_SetBlock+0x34>
  for (uint8_t i = 0; i < w; i++)
 80010d4:	7bfb      	ldrb	r3, [r7, #15]
 80010d6:	3301      	adds	r3, #1
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	7bfa      	ldrb	r2, [r7, #15]
 80010dc:	797b      	ldrb	r3, [r7, #5]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d3d5      	bcc.n	800108e <OLED_SetBlock+0x2e>
    }
  }
  if (partBit)
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d028      	beq.n	800113a <OLED_SetBlock+0xda>
  {
    uint16_t fullNum = w * fullRow; // 完整的字节数
 80010e8:	797b      	ldrb	r3, [r7, #5]
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	7b3b      	ldrb	r3, [r7, #12]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	fb12 f303 	smulbb	r3, r2, r3
 80010f4:	813b      	strh	r3, [r7, #8]
    for (uint8_t i = 0; i < w; i++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	737b      	strb	r3, [r7, #13]
 80010fa:	e01a      	b.n	8001132 <OLED_SetBlock+0xd2>
    {
      OLED_SetBits_Fine(x + i, y + (fullRow * 8), data[fullNum + i], partBit, color);
 80010fc:	79fa      	ldrb	r2, [r7, #7]
 80010fe:	7b7b      	ldrb	r3, [r7, #13]
 8001100:	4413      	add	r3, r2
 8001102:	b2d8      	uxtb	r0, r3
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	b2da      	uxtb	r2, r3
 800110a:	79bb      	ldrb	r3, [r7, #6]
 800110c:	4413      	add	r3, r2
 800110e:	b2d9      	uxtb	r1, r3
 8001110:	893a      	ldrh	r2, [r7, #8]
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	4413      	add	r3, r2
 800111c:	781a      	ldrb	r2, [r3, #0]
 800111e:	7afc      	ldrb	r4, [r7, #11]
 8001120:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4623      	mov	r3, r4
 8001128:	f7ff fefa 	bl	8000f20 <OLED_SetBits_Fine>
    for (uint8_t i = 0; i < w; i++)
 800112c:	7b7b      	ldrb	r3, [r7, #13]
 800112e:	3301      	adds	r3, #1
 8001130:	737b      	strb	r3, [r7, #13]
 8001132:	7b7a      	ldrb	r2, [r7, #13]
 8001134:	797b      	ldrb	r3, [r7, #5]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3e0      	bcc.n	80010fc <OLED_SetBlock+0x9c>
  //       if (j * 8 + k >= h) break; // 防止越界(不完整的字节
  //       OLED_SetPixel(x + i, y + j * 8 + k, !((data[i + j * w] >> k) & 0x01));
  //     }
  //   }
  // }
}
 800113a:	bf00      	nop
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}

08001142 <OLED_PrintASCIIChar>:
 * @param ch 字符
 * @param font 字体
 * @param color 颜色
 */
void OLED_PrintASCIIChar(uint8_t x, uint8_t y, char ch, const ASCIIFont *font, OLED_ColorMode color)
{
 8001142:	b5b0      	push	{r4, r5, r7, lr}
 8001144:	b084      	sub	sp, #16
 8001146:	af02      	add	r7, sp, #8
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	460b      	mov	r3, r1
 8001150:	71bb      	strb	r3, [r7, #6]
 8001152:	4613      	mov	r3, r2
 8001154:	717b      	strb	r3, [r7, #5]
  OLED_SetBlock(x, y, font->chars + (ch - ' ') * (((font->h + 7) / 8) * font->w), font->w, font->h, color);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685a      	ldr	r2, [r3, #4]
 800115a:	797b      	ldrb	r3, [r7, #5]
 800115c:	f1a3 0120 	sub.w	r1, r3, #32
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	3307      	adds	r3, #7
 8001166:	2b00      	cmp	r3, #0
 8001168:	da00      	bge.n	800116c <OLED_PrintASCIIChar+0x2a>
 800116a:	3307      	adds	r3, #7
 800116c:	10db      	asrs	r3, r3, #3
 800116e:	4618      	mov	r0, r3
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	785b      	ldrb	r3, [r3, #1]
 8001174:	fb00 f303 	mul.w	r3, r0, r3
 8001178:	fb01 f303 	mul.w	r3, r1, r3
 800117c:	18d4      	adds	r4, r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	785d      	ldrb	r5, [r3, #1]
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	79b9      	ldrb	r1, [r7, #6]
 8001188:	79f8      	ldrb	r0, [r7, #7]
 800118a:	7e3a      	ldrb	r2, [r7, #24]
 800118c:	9201      	str	r2, [sp, #4]
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	462b      	mov	r3, r5
 8001192:	4622      	mov	r2, r4
 8001194:	f7ff ff64 	bl	8001060 <OLED_SetBlock>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bdb0      	pop	{r4, r5, r7, pc}

080011a0 <_OLED_GetUTF8Len>:

/**
 * @brief 获取UTF-8编码的字符长度
 */
uint8_t _OLED_GetUTF8Len(char *string)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((string[0] & 0x80) == 0x00)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db01      	blt.n	80011b6 <_OLED_GetUTF8Len+0x16>
  {
    return 1;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e018      	b.n	80011e8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xE0) == 0xC0)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 80011be:	2bc0      	cmp	r3, #192	@ 0xc0
 80011c0:	d101      	bne.n	80011c6 <_OLED_GetUTF8Len+0x26>
  {
    return 2;
 80011c2:	2302      	movs	r3, #2
 80011c4:	e010      	b.n	80011e8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF0) == 0xE0)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011ce:	2be0      	cmp	r3, #224	@ 0xe0
 80011d0:	d101      	bne.n	80011d6 <_OLED_GetUTF8Len+0x36>
  {
    return 3;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e008      	b.n	80011e8 <_OLED_GetUTF8Len+0x48>
  }
  else if ((string[0] & 0xF8) == 0xF0)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 80011de:	2bf0      	cmp	r3, #240	@ 0xf0
 80011e0:	d101      	bne.n	80011e6 <_OLED_GetUTF8Len+0x46>
  {
    return 4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	e000      	b.n	80011e8 <_OLED_GetUTF8Len+0x48>
  }
  return 0;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <OLED_PrintString>:
 * @note 为保证字符串中的中文会被自动识别并绘制, 需:
 * 1. 编译器字符集设置为UTF-8
 * 2. 使用波特律动LED取模工具生成字模(https://led.baud-dance.com)
 */
void OLED_PrintString(uint8_t x, uint8_t y, char *str, const Font *font, OLED_ColorMode color)
{
 80011f4:	b5b0      	push	{r4, r5, r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af02      	add	r7, sp, #8
 80011fa:	60ba      	str	r2, [r7, #8]
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
 8001202:	460b      	mov	r3, r1
 8001204:	73bb      	strb	r3, [r7, #14]
  uint16_t i = 0;                                       // 字符串索引
 8001206:	2300      	movs	r3, #0
 8001208:	83fb      	strh	r3, [r7, #30]
  uint8_t oneLen = (((font->h + 7) / 8) * font->w) + 4; // 一个字模占多少字节
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	3307      	adds	r3, #7
 8001210:	2b00      	cmp	r3, #0
 8001212:	da00      	bge.n	8001216 <OLED_PrintString+0x22>
 8001214:	3307      	adds	r3, #7
 8001216:	10db      	asrs	r3, r3, #3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	785b      	ldrb	r3, [r3, #1]
 800121e:	fb12 f303 	smulbb	r3, r2, r3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	3304      	adds	r3, #4
 8001226:	76fb      	strb	r3, [r7, #27]
  uint8_t found;                                        // 是否找到字模
  uint8_t utf8Len;                                      // UTF-8编码长度
  uint8_t *head;                                        // 字模头指针
  while (str[i])
 8001228:	e07d      	b.n	8001326 <OLED_PrintString+0x132>
  {
    found = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	777b      	strb	r3, [r7, #29]
    utf8Len = _OLED_GetUTF8Len(str + i);
 800122e:	8bfb      	ldrh	r3, [r7, #30]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	4413      	add	r3, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ffb3 	bl	80011a0 <_OLED_GetUTF8Len>
 800123a:	4603      	mov	r3, r0
 800123c:	76bb      	strb	r3, [r7, #26]
    if (utf8Len == 0)
 800123e:	7ebb      	ldrb	r3, [r7, #26]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d078      	beq.n	8001336 <OLED_PrintString+0x142>
      break; // 有问题的UTF-8编码

    // 寻找字符  TODO 优化查找算法, 二分查找或者hash
    for (uint8_t j = 0; j < font->len; j++)
 8001244:	2300      	movs	r3, #0
 8001246:	773b      	strb	r3, [r7, #28]
 8001248:	e032      	b.n	80012b0 <OLED_PrintString+0xbc>
    {
      head = (uint8_t *)(font->chars) + (j * oneLen);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	7f3a      	ldrb	r2, [r7, #28]
 8001250:	7ef9      	ldrb	r1, [r7, #27]
 8001252:	fb01 f202 	mul.w	r2, r1, r2
 8001256:	4413      	add	r3, r2
 8001258:	617b      	str	r3, [r7, #20]
      if (memcmp(str + i, head, utf8Len) == 0)
 800125a:	8bfb      	ldrh	r3, [r7, #30]
 800125c:	68ba      	ldr	r2, [r7, #8]
 800125e:	4413      	add	r3, r2
 8001260:	7eba      	ldrb	r2, [r7, #26]
 8001262:	6979      	ldr	r1, [r7, #20]
 8001264:	4618      	mov	r0, r3
 8001266:	f006 f80c 	bl	8007282 <memcmp>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d11c      	bne.n	80012aa <OLED_PrintString+0xb6>
      {
        OLED_SetBlock(x, y, head + 4, font->w, font->h, color);
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	1d1c      	adds	r4, r3, #4
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	785d      	ldrb	r5, [r3, #1]
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	7bb9      	ldrb	r1, [r7, #14]
 800127e:	7bf8      	ldrb	r0, [r7, #15]
 8001280:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8001284:	9201      	str	r2, [sp, #4]
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	462b      	mov	r3, r5
 800128a:	4622      	mov	r2, r4
 800128c:	f7ff fee8 	bl	8001060 <OLED_SetBlock>
        // 移动光标
        x += font->w;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	785a      	ldrb	r2, [r3, #1]
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4413      	add	r3, r2
 8001298:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800129a:	7ebb      	ldrb	r3, [r7, #26]
 800129c:	b29a      	uxth	r2, r3
 800129e:	8bfb      	ldrh	r3, [r7, #30]
 80012a0:	4413      	add	r3, r2
 80012a2:	83fb      	strh	r3, [r7, #30]
        found = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	777b      	strb	r3, [r7, #29]
        break;
 80012a8:	e007      	b.n	80012ba <OLED_PrintString+0xc6>
    for (uint8_t j = 0; j < font->len; j++)
 80012aa:	7f3b      	ldrb	r3, [r7, #28]
 80012ac:	3301      	adds	r3, #1
 80012ae:	773b      	strb	r3, [r7, #28]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7a1b      	ldrb	r3, [r3, #8]
 80012b4:	7f3a      	ldrb	r2, [r7, #28]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d3c7      	bcc.n	800124a <OLED_PrintString+0x56>
      }
    }

    // 若未找到字模,且为ASCII字符, 则缺省显示ASCII字符
    if (found == 0)
 80012ba:	7f7b      	ldrb	r3, [r7, #29]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d132      	bne.n	8001326 <OLED_PrintString+0x132>
    {
      if (utf8Len == 1)
 80012c0:	7ebb      	ldrb	r3, [r7, #26]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d119      	bne.n	80012fa <OLED_PrintString+0x106>
      {
        OLED_PrintASCIIChar(x, y, str[i], font->ascii, color);
 80012c6:	8bfb      	ldrh	r3, [r7, #30]
 80012c8:	68ba      	ldr	r2, [r7, #8]
 80012ca:	4413      	add	r3, r2
 80012cc:	781a      	ldrb	r2, [r3, #0]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68dc      	ldr	r4, [r3, #12]
 80012d2:	7bb9      	ldrb	r1, [r7, #14]
 80012d4:	7bf8      	ldrb	r0, [r7, #15]
 80012d6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	4623      	mov	r3, r4
 80012de:	f7ff ff30 	bl	8001142 <OLED_PrintASCIIChar>
        // 移动光标
        x += font->ascii->w;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	785a      	ldrb	r2, [r3, #1]
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	4413      	add	r3, r2
 80012ec:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 80012ee:	7ebb      	ldrb	r3, [r7, #26]
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	8bfb      	ldrh	r3, [r7, #30]
 80012f4:	4413      	add	r3, r2
 80012f6:	83fb      	strh	r3, [r7, #30]
 80012f8:	e015      	b.n	8001326 <OLED_PrintString+0x132>
      }
      else
      {
        OLED_PrintASCIIChar(x, y, ' ', font->ascii, color);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	7bb9      	ldrb	r1, [r7, #14]
 8001300:	7bf8      	ldrb	r0, [r7, #15]
 8001302:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	4613      	mov	r3, r2
 800130a:	2220      	movs	r2, #32
 800130c:	f7ff ff19 	bl	8001142 <OLED_PrintASCIIChar>
        x += font->ascii->w;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	785a      	ldrb	r2, [r3, #1]
 8001316:	7bfb      	ldrb	r3, [r7, #15]
 8001318:	4413      	add	r3, r2
 800131a:	73fb      	strb	r3, [r7, #15]
        i += utf8Len;
 800131c:	7ebb      	ldrb	r3, [r7, #26]
 800131e:	b29a      	uxth	r2, r3
 8001320:	8bfb      	ldrh	r3, [r7, #30]
 8001322:	4413      	add	r3, r2
 8001324:	83fb      	strh	r3, [r7, #30]
  while (str[i])
 8001326:	8bfb      	ldrh	r3, [r7, #30]
 8001328:	68ba      	ldr	r2, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f af7b 	bne.w	800122a <OLED_PrintString+0x36>
      }
    }
  }
}
 8001334:	e000      	b.n	8001338 <OLED_PrintString+0x144>
      break; // 有问题的UTF-8编码
 8001336:	bf00      	nop
}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bdb0      	pop	{r4, r5, r7, pc}

08001340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001346:	4b0a      	ldr	r3, [pc, #40]	@ (8001370 <HAL_MspInit+0x30>)
 8001348:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800134c:	4a08      	ldr	r2, [pc, #32]	@ (8001370 <HAL_MspInit+0x30>)
 800134e:	f043 0302 	orr.w	r3, r3, #2
 8001352:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001356:	4b06      	ldr	r3, [pc, #24]	@ (8001370 <HAL_MspInit+0x30>)
 8001358:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	607b      	str	r3, [r7, #4]
 8001362:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	58024400 	.word	0x58024400

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 facf 	bl	800196c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <TIM1_CC_IRQHandler+0x10>)
 80013da:	f004 f9a3 	bl	8005724 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	240006e0 	.word	0x240006e0

080013e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return 1;
 80013ec:	2301      	movs	r3, #1
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <_kill>:

int _kill(int pid, int sig)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001402:	f005 ffa1 	bl	8007348 <__errno>
 8001406:	4603      	mov	r3, r0
 8001408:	2216      	movs	r2, #22
 800140a:	601a      	str	r2, [r3, #0]
  return -1;
 800140c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <_exit>:

void _exit (int status)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff ffe7 	bl	80013f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800142a:	bf00      	nop
 800142c:	e7fd      	b.n	800142a <_exit+0x12>

0800142e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	60f8      	str	r0, [r7, #12]
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e00a      	b.n	8001456 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001440:	f3af 8000 	nop.w
 8001444:	4601      	mov	r1, r0
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	1c5a      	adds	r2, r3, #1
 800144a:	60ba      	str	r2, [r7, #8]
 800144c:	b2ca      	uxtb	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	3301      	adds	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	429a      	cmp	r2, r3
 800145c:	dbf0      	blt.n	8001440 <_read+0x12>
  }

  return len;
 800145e:	687b      	ldr	r3, [r7, #4]
}
 8001460:	4618      	mov	r0, r3
 8001462:	3718      	adds	r7, #24
 8001464:	46bd      	mov	sp, r7
 8001466:	bd80      	pop	{r7, pc}

08001468 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	e009      	b.n	800148e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1c5a      	adds	r2, r3, #1
 800147e:	60ba      	str	r2, [r7, #8]
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697a      	ldr	r2, [r7, #20]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	429a      	cmp	r2, r3
 8001494:	dbf1      	blt.n	800147a <_write+0x12>
  }
  return len;
 8001496:	687b      	ldr	r3, [r7, #4]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <_close>:

int _close(int file)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr

080014b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
 80014c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014c8:	605a      	str	r2, [r3, #4]
  return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	370c      	adds	r7, #12
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <_isatty>:

int _isatty(int file)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e0:	2301      	movs	r3, #1
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	60f8      	str	r0, [r7, #12]
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b086      	sub	sp, #24
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001510:	4a14      	ldr	r2, [pc, #80]	@ (8001564 <_sbrk+0x5c>)
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <_sbrk+0x60>)
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <_sbrk+0x64>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d102      	bne.n	800152a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001524:	4b11      	ldr	r3, [pc, #68]	@ (800156c <_sbrk+0x64>)
 8001526:	4a12      	ldr	r2, [pc, #72]	@ (8001570 <_sbrk+0x68>)
 8001528:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <_sbrk+0x64>)
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4413      	add	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	429a      	cmp	r2, r3
 8001536:	d207      	bcs.n	8001548 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001538:	f005 ff06 	bl	8007348 <__errno>
 800153c:	4603      	mov	r3, r0
 800153e:	220c      	movs	r2, #12
 8001540:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001542:	f04f 33ff 	mov.w	r3, #4294967295
 8001546:	e009      	b.n	800155c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001548:	4b08      	ldr	r3, [pc, #32]	@ (800156c <_sbrk+0x64>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800154e:	4b07      	ldr	r3, [pc, #28]	@ (800156c <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	4a05      	ldr	r2, [pc, #20]	@ (800156c <_sbrk+0x64>)
 8001558:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800155a:	68fb      	ldr	r3, [r7, #12]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3718      	adds	r7, #24
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	24080000 	.word	0x24080000
 8001568:	00000400 	.word	0x00000400
 800156c:	240006dc 	.word	0x240006dc
 8001570:	24000880 	.word	0x24000880

08001574 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001578:	4b37      	ldr	r3, [pc, #220]	@ (8001658 <SystemInit+0xe4>)
 800157a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800157e:	4a36      	ldr	r2, [pc, #216]	@ (8001658 <SystemInit+0xe4>)
 8001580:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001584:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001588:	4b34      	ldr	r3, [pc, #208]	@ (800165c <SystemInit+0xe8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	2b06      	cmp	r3, #6
 8001592:	d807      	bhi.n	80015a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001594:	4b31      	ldr	r3, [pc, #196]	@ (800165c <SystemInit+0xe8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 030f 	bic.w	r3, r3, #15
 800159c:	4a2f      	ldr	r2, [pc, #188]	@ (800165c <SystemInit+0xe8>)
 800159e:	f043 0307 	orr.w	r3, r3, #7
 80015a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015a4:	4b2e      	ldr	r3, [pc, #184]	@ (8001660 <SystemInit+0xec>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a2d      	ldr	r2, [pc, #180]	@ (8001660 <SystemInit+0xec>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015b0:	4b2b      	ldr	r3, [pc, #172]	@ (8001660 <SystemInit+0xec>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <SystemInit+0xec>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4929      	ldr	r1, [pc, #164]	@ (8001660 <SystemInit+0xec>)
 80015bc:	4b29      	ldr	r3, [pc, #164]	@ (8001664 <SystemInit+0xf0>)
 80015be:	4013      	ands	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <SystemInit+0xe8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0308 	and.w	r3, r3, #8
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <SystemInit+0xe8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f023 030f 	bic.w	r3, r3, #15
 80015d6:	4a21      	ldr	r2, [pc, #132]	@ (800165c <SystemInit+0xe8>)
 80015d8:	f043 0307 	orr.w	r3, r3, #7
 80015dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80015de:	4b20      	ldr	r3, [pc, #128]	@ (8001660 <SystemInit+0xec>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015e4:	4b1e      	ldr	r3, [pc, #120]	@ (8001660 <SystemInit+0xec>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001660 <SystemInit+0xec>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001660 <SystemInit+0xec>)
 80015f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001668 <SystemInit+0xf4>)
 80015f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001660 <SystemInit+0xec>)
 80015f8:	4a1c      	ldr	r2, [pc, #112]	@ (800166c <SystemInit+0xf8>)
 80015fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015fc:	4b18      	ldr	r3, [pc, #96]	@ (8001660 <SystemInit+0xec>)
 80015fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001670 <SystemInit+0xfc>)
 8001600:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001602:	4b17      	ldr	r3, [pc, #92]	@ (8001660 <SystemInit+0xec>)
 8001604:	2200      	movs	r2, #0
 8001606:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001608:	4b15      	ldr	r3, [pc, #84]	@ (8001660 <SystemInit+0xec>)
 800160a:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <SystemInit+0xfc>)
 800160c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800160e:	4b14      	ldr	r3, [pc, #80]	@ (8001660 <SystemInit+0xec>)
 8001610:	2200      	movs	r2, #0
 8001612:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <SystemInit+0xec>)
 8001616:	4a16      	ldr	r2, [pc, #88]	@ (8001670 <SystemInit+0xfc>)
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800161a:	4b11      	ldr	r3, [pc, #68]	@ (8001660 <SystemInit+0xec>)
 800161c:	2200      	movs	r2, #0
 800161e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001620:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <SystemInit+0xec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <SystemInit+0xec>)
 8001626:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800162a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800162c:	4b0c      	ldr	r3, [pc, #48]	@ (8001660 <SystemInit+0xec>)
 800162e:	2200      	movs	r2, #0
 8001630:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001632:	4b10      	ldr	r3, [pc, #64]	@ (8001674 <SystemInit+0x100>)
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <SystemInit+0x104>)
 8001638:	4013      	ands	r3, r2
 800163a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800163e:	d202      	bcs.n	8001646 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001640:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <SystemInit+0x108>)
 8001642:	2201      	movs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <SystemInit+0x10c>)
 8001648:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800164c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	e000ed00 	.word	0xe000ed00
 800165c:	52002000 	.word	0x52002000
 8001660:	58024400 	.word	0x58024400
 8001664:	eaf6ed7f 	.word	0xeaf6ed7f
 8001668:	02020200 	.word	0x02020200
 800166c:	01ff0000 	.word	0x01ff0000
 8001670:	01010280 	.word	0x01010280
 8001674:	5c001000 	.word	0x5c001000
 8001678:	ffff0000 	.word	0xffff0000
 800167c:	51008108 	.word	0x51008108
 8001680:	52004000 	.word	0x52004000

08001684 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08c      	sub	sp, #48	@ 0x30
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168a:	f107 0320 	add.w	r3, r7, #32
 800168e:	2200      	movs	r2, #0
 8001690:	601a      	str	r2, [r3, #0]
 8001692:	605a      	str	r2, [r3, #4]
 8001694:	609a      	str	r2, [r3, #8]
 8001696:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2200      	movs	r2, #0
 80016a8:	601a      	str	r2, [r3, #0]
 80016aa:	605a      	str	r2, [r3, #4]
 80016ac:	609a      	str	r2, [r3, #8]
 80016ae:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b0:	4b35      	ldr	r3, [pc, #212]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016b2:	4a36      	ldr	r2, [pc, #216]	@ (800178c <MX_TIM1_Init+0x108>)
 80016b4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 240-1;
 80016b6:	4b34      	ldr	r3, [pc, #208]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016b8:	22ef      	movs	r2, #239	@ 0xef
 80016ba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016bc:	4b32      	ldr	r3, [pc, #200]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80016c2:	4b31      	ldr	r3, [pc, #196]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016c4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016c8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016d8:	2200      	movs	r2, #0
 80016da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016dc:	482a      	ldr	r0, [pc, #168]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016de:	f003 fca3 	bl	8005028 <HAL_TIM_Base_Init>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d001      	beq.n	80016ec <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 80016e8:	f7ff fad0 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	4619      	mov	r1, r3
 80016f8:	4823      	ldr	r0, [pc, #140]	@ (8001788 <MX_TIM1_Init+0x104>)
 80016fa:	f004 f9b7 	bl	8005a6c <HAL_TIM_ConfigClockSource>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001704:	f7ff fac2 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001708:	481f      	ldr	r0, [pc, #124]	@ (8001788 <MX_TIM1_Init+0x104>)
 800170a:	f003 fd55 	bl	80051b8 <HAL_TIM_IC_Init>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001714:	f7ff faba 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800171c:	2300      	movs	r3, #0
 800171e:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	4619      	mov	r1, r3
 800172a:	4817      	ldr	r0, [pc, #92]	@ (8001788 <MX_TIM1_Init+0x104>)
 800172c:	f004 fd96 	bl	800625c <HAL_TIMEx_MasterConfigSynchronization>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8001736:	f7ff faa9 	bl	8000c8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800173a:	2300      	movs	r3, #0
 800173c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800173e:	2301      	movs	r3, #1
 8001740:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001746:	2300      	movs	r3, #0
 8001748:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2208      	movs	r2, #8
 800174e:	4619      	mov	r1, r3
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_TIM1_Init+0x104>)
 8001752:	f004 f8ee 	bl	8005932 <HAL_TIM_IC_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 800175c:	f7ff fa96 	bl	8000c8c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001760:	2302      	movs	r3, #2
 8001762:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001764:	2302      	movs	r3, #2
 8001766:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001768:	1d3b      	adds	r3, r7, #4
 800176a:	220c      	movs	r2, #12
 800176c:	4619      	mov	r1, r3
 800176e:	4806      	ldr	r0, [pc, #24]	@ (8001788 <MX_TIM1_Init+0x104>)
 8001770:	f004 f8df 	bl	8005932 <HAL_TIM_IC_ConfigChannel>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800177a:	f7ff fa87 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	3730      	adds	r7, #48	@ 0x30
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	240006e0 	.word	0x240006e0
 800178c:	40010000 	.word	0x40010000

08001790 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	@ 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_TIM_Base_MspInit+0x98>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d136      	bne.n	8001820 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b2:	4b1e      	ldr	r3, [pc, #120]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017b8:	4a1c      	ldr	r2, [pc, #112]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80017c2:	4b1a      	ldr	r3, [pc, #104]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d0:	4b16      	ldr	r3, [pc, #88]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017d6:	4a15      	ldr	r2, [pc, #84]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017e0:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_TIM_Base_MspInit+0x9c>)
 80017e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80017ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80017f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001800:	2301      	movs	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	@ (8001830 <HAL_TIM_Base_MspInit+0xa0>)
 800180c:	f000 fa86 	bl	8001d1c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2100      	movs	r1, #0
 8001814:	201b      	movs	r0, #27
 8001816:	f000 f9d4 	bl	8001bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800181a:	201b      	movs	r0, #27
 800181c:	f000 f9eb 	bl	8001bf6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001820:	bf00      	nop
 8001822:	3728      	adds	r7, #40	@ 0x28
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40010000 	.word	0x40010000
 800182c:	58024400 	.word	0x58024400
 8001830:	58020000 	.word	0x58020000

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001838:	f7ff fe9c 	bl	8001574 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001862:	f005 fd77 	bl	8007354 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff f8cf 	bl	8000a08 <main>
  bx  lr
 800186a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800186c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001870:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001874:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001878:	0800b370 	.word	0x0800b370
  ldr r2, =_sbss
 800187c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001880:	2400087c 	.word	0x2400087c

08001884 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC3_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800188e:	2003      	movs	r0, #3
 8001890:	f000 f98c 	bl	8001bac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001894:	f001 fee0 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 8001898:	4602      	mov	r2, r0
 800189a:	4b15      	ldr	r3, [pc, #84]	@ (80018f0 <HAL_Init+0x68>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	0a1b      	lsrs	r3, r3, #8
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	4913      	ldr	r1, [pc, #76]	@ (80018f4 <HAL_Init+0x6c>)
 80018a6:	5ccb      	ldrb	r3, [r1, r3]
 80018a8:	f003 031f 	and.w	r3, r3, #31
 80018ac:	fa22 f303 	lsr.w	r3, r2, r3
 80018b0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018b2:	4b0f      	ldr	r3, [pc, #60]	@ (80018f0 <HAL_Init+0x68>)
 80018b4:	699b      	ldr	r3, [r3, #24]
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	4a0e      	ldr	r2, [pc, #56]	@ (80018f4 <HAL_Init+0x6c>)
 80018bc:	5cd3      	ldrb	r3, [r2, r3]
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	687a      	ldr	r2, [r7, #4]
 80018c4:	fa22 f303 	lsr.w	r3, r2, r3
 80018c8:	4a0b      	ldr	r2, [pc, #44]	@ (80018f8 <HAL_Init+0x70>)
 80018ca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018cc:	4a0b      	ldr	r2, [pc, #44]	@ (80018fc <HAL_Init+0x74>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018d2:	200f      	movs	r0, #15
 80018d4:	f000 f814 	bl	8001900 <HAL_InitTick>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e002      	b.n	80018e8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80018e2:	f7ff fd2d 	bl	8001340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	58024400 	.word	0x58024400
 80018f4:	0800af24 	.word	0x0800af24
 80018f8:	24000004 	.word	0x24000004
 80018fc:	24000000 	.word	0x24000000

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001908:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <HAL_InitTick+0x60>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d101      	bne.n	8001914 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e021      	b.n	8001958 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001914:	4b13      	ldr	r3, [pc, #76]	@ (8001964 <HAL_InitTick+0x64>)
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	4b11      	ldr	r3, [pc, #68]	@ (8001960 <HAL_InitTick+0x60>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	4619      	mov	r1, r3
 800191e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001922:	fbb3 f3f1 	udiv	r3, r3, r1
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f971 	bl	8001c12 <HAL_SYSTICK_Config>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e00e      	b.n	8001958 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b0f      	cmp	r3, #15
 800193e:	d80a      	bhi.n	8001956 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f000 f93b 	bl	8001bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800194c:	4a06      	ldr	r2, [pc, #24]	@ (8001968 <HAL_InitTick+0x68>)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	e000      	b.n	8001958 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
}
 8001958:	4618      	mov	r0, r3
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	2400000c 	.word	0x2400000c
 8001964:	24000000 	.word	0x24000000
 8001968:	24000008 	.word	0x24000008

0800196c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001970:	4b06      	ldr	r3, [pc, #24]	@ (800198c <HAL_IncTick+0x20>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	4b06      	ldr	r3, [pc, #24]	@ (8001990 <HAL_IncTick+0x24>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4413      	add	r3, r2
 800197c:	4a04      	ldr	r2, [pc, #16]	@ (8001990 <HAL_IncTick+0x24>)
 800197e:	6013      	str	r3, [r2, #0]
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	2400000c 	.word	0x2400000c
 8001990:	2400072c 	.word	0x2400072c

08001994 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return uwTick;
 8001998:	4b03      	ldr	r3, [pc, #12]	@ (80019a8 <HAL_GetTick+0x14>)
 800199a:	681b      	ldr	r3, [r3, #0]
}
 800199c:	4618      	mov	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	2400072c 	.word	0x2400072c

080019ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019b4:	f7ff ffee 	bl	8001994 <HAL_GetTick>
 80019b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c4:	d005      	beq.n	80019d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019c6:	4b0a      	ldr	r3, [pc, #40]	@ (80019f0 <HAL_Delay+0x44>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4413      	add	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019d2:	bf00      	nop
 80019d4:	f7ff ffde 	bl	8001994 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d8f7      	bhi.n	80019d4 <HAL_Delay+0x28>
  {
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2400000c 	.word	0x2400000c

080019f4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_GetREVID+0x14>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	0c1b      	lsrs	r3, r3, #16
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	5c001000 	.word	0x5c001000

08001a0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b085      	sub	sp, #20
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a34:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a3a:	4a04      	ldr	r2, [pc, #16]	@ (8001a4c <__NVIC_SetPriorityGrouping+0x40>)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	60d3      	str	r3, [r2, #12]
}
 8001a40:	bf00      	nop
 8001a42:	3714      	adds	r7, #20
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	e000ed00 	.word	0xe000ed00
 8001a50:	05fa0000 	.word	0x05fa0000

08001a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a58:	4b04      	ldr	r3, [pc, #16]	@ (8001a6c <__NVIC_GetPriorityGrouping+0x18>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	0a1b      	lsrs	r3, r3, #8
 8001a5e:	f003 0307 	and.w	r3, r3, #7
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00

08001a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	db0b      	blt.n	8001a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	f003 021f 	and.w	r2, r3, #31
 8001a88:	4907      	ldr	r1, [pc, #28]	@ (8001aa8 <__NVIC_EnableIRQ+0x38>)
 8001a8a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	2001      	movs	r0, #1
 8001a92:	fa00 f202 	lsl.w	r2, r0, r2
 8001a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	e000e100 	.word	0xe000e100

08001aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	6039      	str	r1, [r7, #0]
 8001ab6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ab8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	db0a      	blt.n	8001ad6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	b2da      	uxtb	r2, r3
 8001ac4:	490c      	ldr	r1, [pc, #48]	@ (8001af8 <__NVIC_SetPriority+0x4c>)
 8001ac6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001aca:	0112      	lsls	r2, r2, #4
 8001acc:	b2d2      	uxtb	r2, r2
 8001ace:	440b      	add	r3, r1
 8001ad0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad4:	e00a      	b.n	8001aec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	4908      	ldr	r1, [pc, #32]	@ (8001afc <__NVIC_SetPriority+0x50>)
 8001adc:	88fb      	ldrh	r3, [r7, #6]
 8001ade:	f003 030f 	and.w	r3, r3, #15
 8001ae2:	3b04      	subs	r3, #4
 8001ae4:	0112      	lsls	r2, r2, #4
 8001ae6:	b2d2      	uxtb	r2, r2
 8001ae8:	440b      	add	r3, r1
 8001aea:	761a      	strb	r2, [r3, #24]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000e100 	.word	0xe000e100
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b089      	sub	sp, #36	@ 0x24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	60f8      	str	r0, [r7, #12]
 8001b08:	60b9      	str	r1, [r7, #8]
 8001b0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f1c3 0307 	rsb	r3, r3, #7
 8001b1a:	2b04      	cmp	r3, #4
 8001b1c:	bf28      	it	cs
 8001b1e:	2304      	movcs	r3, #4
 8001b20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	3304      	adds	r3, #4
 8001b26:	2b06      	cmp	r3, #6
 8001b28:	d902      	bls.n	8001b30 <NVIC_EncodePriority+0x30>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3b03      	subs	r3, #3
 8001b2e:	e000      	b.n	8001b32 <NVIC_EncodePriority+0x32>
 8001b30:	2300      	movs	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	f04f 32ff 	mov.w	r2, #4294967295
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	401a      	ands	r2, r3
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b48:	f04f 31ff 	mov.w	r1, #4294967295
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b52:	43d9      	mvns	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	4313      	orrs	r3, r2
         );
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3724      	adds	r7, #36	@ 0x24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
	...

08001b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b78:	d301      	bcc.n	8001b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00f      	b.n	8001b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b86:	210f      	movs	r1, #15
 8001b88:	f04f 30ff 	mov.w	r0, #4294967295
 8001b8c:	f7ff ff8e 	bl	8001aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b90:	4b05      	ldr	r3, [pc, #20]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b96:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <SysTick_Config+0x40>)
 8001b98:	2207      	movs	r2, #7
 8001b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	e000e010 	.word	0xe000e010

08001bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f7ff ff29 	bl	8001a0c <__NVIC_SetPriorityGrouping>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b086      	sub	sp, #24
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	4603      	mov	r3, r0
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
 8001bce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd0:	f7ff ff40 	bl	8001a54 <__NVIC_GetPriorityGrouping>
 8001bd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	68b9      	ldr	r1, [r7, #8]
 8001bda:	6978      	ldr	r0, [r7, #20]
 8001bdc:	f7ff ff90 	bl	8001b00 <NVIC_EncodePriority>
 8001be0:	4602      	mov	r2, r0
 8001be2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff5f 	bl	8001aac <__NVIC_SetPriority>
}
 8001bee:	bf00      	nop
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf6:	b580      	push	{r7, lr}
 8001bf8:	b082      	sub	sp, #8
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c00:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7ff ff33 	bl	8001a70 <__NVIC_EnableIRQ>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7ff ffa4 	bl	8001b68 <SysTick_Config>
 8001c20:	4603      	mov	r3, r0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c30:	f3bf 8f5f 	dmb	sy
}
 8001c34:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c36:	4b07      	ldr	r3, [pc, #28]	@ (8001c54 <HAL_MPU_Disable+0x28>)
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	4a06      	ldr	r2, [pc, #24]	@ (8001c54 <HAL_MPU_Disable+0x28>)
 8001c3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c40:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_MPU_Disable+0x2c>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00
 8001c58:	e000ed90 	.word	0xe000ed90

08001c5c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c64:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_MPU_Enable+0x38>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f043 0301 	orr.w	r3, r3, #1
 8001c6c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c98 <HAL_MPU_Enable+0x3c>)
 8001c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c72:	4a09      	ldr	r2, [pc, #36]	@ (8001c98 <HAL_MPU_Enable+0x3c>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c78:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c7a:	f3bf 8f4f 	dsb	sy
}
 8001c7e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c80:	f3bf 8f6f 	isb	sy
}
 8001c84:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	e000ed90 	.word	0xe000ed90
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	785a      	ldrb	r2, [r3, #1]
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001caa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001cac:	4b1a      	ldr	r3, [pc, #104]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cae:	691b      	ldr	r3, [r3, #16]
 8001cb0:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cb2:	f023 0301 	bic.w	r3, r3, #1
 8001cb6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001cb8:	4a17      	ldr	r2, [pc, #92]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7b1b      	ldrb	r3, [r3, #12]
 8001cc4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	7adb      	ldrb	r3, [r3, #11]
 8001cca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ccc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	7a9b      	ldrb	r3, [r3, #10]
 8001cd2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001cd4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7b5b      	ldrb	r3, [r3, #13]
 8001cda:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001cdc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7b9b      	ldrb	r3, [r3, #14]
 8001ce2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ce4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	7bdb      	ldrb	r3, [r3, #15]
 8001cea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	7a5b      	ldrb	r3, [r3, #9]
 8001cf2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cf4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	7a1b      	ldrb	r3, [r3, #8]
 8001cfa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cfc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cfe:	687a      	ldr	r2, [r7, #4]
 8001d00:	7812      	ldrb	r2, [r2, #0]
 8001d02:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d04:	4a04      	ldr	r2, [pc, #16]	@ (8001d18 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d06:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d08:	6113      	str	r3, [r2, #16]
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000ed90 	.word	0xe000ed90

08001d1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b089      	sub	sp, #36	@ 0x24
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d2a:	4b89      	ldr	r3, [pc, #548]	@ (8001f50 <HAL_GPIO_Init+0x234>)
 8001d2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d2e:	e194      	b.n	800205a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2101      	movs	r1, #1
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	fa01 f303 	lsl.w	r3, r1, r3
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8186 	beq.w	8002054 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f003 0303 	and.w	r3, r3, #3
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d005      	beq.n	8001d60 <HAL_GPIO_Init+0x44>
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0303 	and.w	r3, r3, #3
 8001d5c:	2b02      	cmp	r3, #2
 8001d5e:	d130      	bne.n	8001dc2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	2203      	movs	r2, #3
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	68da      	ldr	r2, [r3, #12]
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4313      	orrs	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d96:	2201      	movs	r2, #1
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	091b      	lsrs	r3, r3, #4
 8001dac:	f003 0201 	and.w	r2, r3, #1
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d017      	beq.n	8001dfe <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	005b      	lsls	r3, r3, #1
 8001dd8:	2203      	movs	r2, #3
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d123      	bne.n	8001e52 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	08da      	lsrs	r2, r3, #3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3208      	adds	r2, #8
 8001e12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	220f      	movs	r2, #15
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	691a      	ldr	r2, [r3, #16]
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	f003 0307 	and.w	r3, r3, #7
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 0203 	and.w	r2, r3, #3
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80e0 	beq.w	8002054 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e94:	4b2f      	ldr	r3, [pc, #188]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e9a:	4a2e      	ldr	r2, [pc, #184]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001e9c:	f043 0302 	orr.w	r3, r3, #2
 8001ea0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ea4:	4b2b      	ldr	r3, [pc, #172]	@ (8001f54 <HAL_GPIO_Init+0x238>)
 8001ea6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	60fb      	str	r3, [r7, #12]
 8001eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_GPIO_Init+0x23c>)
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0303 	and.w	r3, r3, #3
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	220f      	movs	r2, #15
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a20      	ldr	r2, [pc, #128]	@ (8001f5c <HAL_GPIO_Init+0x240>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d052      	beq.n	8001f84 <HAL_GPIO_Init+0x268>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_GPIO_Init+0x244>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_GPIO_Init+0x22e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_GPIO_Init+0x248>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d02b      	beq.n	8001f46 <HAL_GPIO_Init+0x22a>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1d      	ldr	r2, [pc, #116]	@ (8001f68 <HAL_GPIO_Init+0x24c>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d025      	beq.n	8001f42 <HAL_GPIO_Init+0x226>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f6c <HAL_GPIO_Init+0x250>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d01f      	beq.n	8001f3e <HAL_GPIO_Init+0x222>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_GPIO_Init+0x254>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d019      	beq.n	8001f3a <HAL_GPIO_Init+0x21e>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_GPIO_Init+0x258>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_GPIO_Init+0x21a>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a19      	ldr	r2, [pc, #100]	@ (8001f78 <HAL_GPIO_Init+0x25c>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00d      	beq.n	8001f32 <HAL_GPIO_Init+0x216>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a18      	ldr	r2, [pc, #96]	@ (8001f7c <HAL_GPIO_Init+0x260>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d007      	beq.n	8001f2e <HAL_GPIO_Init+0x212>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a17      	ldr	r2, [pc, #92]	@ (8001f80 <HAL_GPIO_Init+0x264>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d101      	bne.n	8001f2a <HAL_GPIO_Init+0x20e>
 8001f26:	2309      	movs	r3, #9
 8001f28:	e02d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	e02b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f2e:	2308      	movs	r3, #8
 8001f30:	e029      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f32:	2307      	movs	r3, #7
 8001f34:	e027      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f36:	2306      	movs	r3, #6
 8001f38:	e025      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3a:	2305      	movs	r3, #5
 8001f3c:	e023      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f3e:	2304      	movs	r3, #4
 8001f40:	e021      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e01f      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e01d      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e01b      	b.n	8001f86 <HAL_GPIO_Init+0x26a>
 8001f4e:	bf00      	nop
 8001f50:	58000080 	.word	0x58000080
 8001f54:	58024400 	.word	0x58024400
 8001f58:	58000400 	.word	0x58000400
 8001f5c:	58020000 	.word	0x58020000
 8001f60:	58020400 	.word	0x58020400
 8001f64:	58020800 	.word	0x58020800
 8001f68:	58020c00 	.word	0x58020c00
 8001f6c:	58021000 	.word	0x58021000
 8001f70:	58021400 	.word	0x58021400
 8001f74:	58021800 	.word	0x58021800
 8001f78:	58021c00 	.word	0x58021c00
 8001f7c:	58022000 	.word	0x58022000
 8001f80:	58022400 	.word	0x58022400
 8001f84:	2300      	movs	r3, #0
 8001f86:	69fa      	ldr	r2, [r7, #28]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f96:	4938      	ldr	r1, [pc, #224]	@ (8002078 <HAL_GPIO_Init+0x35c>)
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fca:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fd2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	43db      	mvns	r3, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4013      	ands	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	69ba      	ldr	r2, [r7, #24]
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	3301      	adds	r3, #1
 8002058:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	fa22 f303 	lsr.w	r3, r2, r3
 8002064:	2b00      	cmp	r3, #0
 8002066:	f47f ae63 	bne.w	8001d30 <HAL_GPIO_Init+0x14>
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3724      	adds	r7, #36	@ 0x24
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	58000400 	.word	0x58000400

0800207c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	807b      	strh	r3, [r7, #2]
 8002088:	4613      	mov	r3, r2
 800208a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800208c:	787b      	ldrb	r3, [r7, #1]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002092:	887a      	ldrh	r2, [r7, #2]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002098:	e003      	b.n	80020a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800209a:	887b      	ldrh	r3, [r7, #2]
 800209c:	041a      	lsls	r2, r3, #16
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	619a      	str	r2, [r3, #24]
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
	...

080020b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e08b      	b.n	80021da <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d106      	bne.n	80020dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7fe fbe6 	bl	80008a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2224      	movs	r2, #36	@ 0x24
 80020e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685a      	ldr	r2, [r3, #4]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002100:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002110:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d107      	bne.n	800212a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	689a      	ldr	r2, [r3, #8]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	e006      	b.n	8002138 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002136:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b02      	cmp	r3, #2
 800213e:	d108      	bne.n	8002152 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800214e:	605a      	str	r2, [r3, #4]
 8002150:	e007      	b.n	8002162 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	685a      	ldr	r2, [r3, #4]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002160:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681a      	ldr	r2, [r3, #0]
 800216c:	4b1d      	ldr	r3, [pc, #116]	@ (80021e4 <HAL_I2C_Init+0x134>)
 800216e:	430b      	orrs	r3, r1
 8002170:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68da      	ldr	r2, [r3, #12]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002180:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691a      	ldr	r2, [r3, #16]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	699b      	ldr	r3, [r3, #24]
 8002192:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	430a      	orrs	r2, r1
 800219a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69d9      	ldr	r1, [r3, #28]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6a1a      	ldr	r2, [r3, #32]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f042 0201 	orr.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2220      	movs	r2, #32
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3708      	adds	r7, #8
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	02008000 	.word	0x02008000

080021e8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af02      	add	r7, sp, #8
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	607a      	str	r2, [r7, #4]
 80021f2:	461a      	mov	r2, r3
 80021f4:	460b      	mov	r3, r1
 80021f6:	817b      	strh	r3, [r7, #10]
 80021f8:	4613      	mov	r3, r2
 80021fa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002202:	b2db      	uxtb	r3, r3
 8002204:	2b20      	cmp	r3, #32
 8002206:	f040 80fd 	bne.w	8002404 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x30>
 8002214:	2302      	movs	r3, #2
 8002216:	e0f6      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002220:	f7ff fbb8 	bl	8001994 <HAL_GetTick>
 8002224:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2319      	movs	r3, #25
 800222c:	2201      	movs	r2, #1
 800222e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f914 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e0e1      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2221      	movs	r2, #33	@ 0x21
 8002246:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2210      	movs	r2, #16
 800224e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	893a      	ldrh	r2, [r7, #8]
 8002262:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226e:	b29b      	uxth	r3, r3
 8002270:	2bff      	cmp	r3, #255	@ 0xff
 8002272:	d906      	bls.n	8002282 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	22ff      	movs	r2, #255	@ 0xff
 8002278:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800227a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800227e:	617b      	str	r3, [r7, #20]
 8002280:	e007      	b.n	8002292 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002286:	b29a      	uxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800228c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002290:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d024      	beq.n	80022e4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229e:	781a      	ldrb	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022aa:	1c5a      	adds	r2, r3, #1
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	3b01      	subs	r3, #1
 80022b8:	b29a      	uxth	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022c2:	3b01      	subs	r3, #1
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	8979      	ldrh	r1, [r7, #10]
 80022d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	68f8      	ldr	r0, [r7, #12]
 80022de:	f000 fa83 	bl	80027e8 <I2C_TransferConfig>
 80022e2:	e066      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	4b48      	ldr	r3, [pc, #288]	@ (8002410 <HAL_I2C_Master_Transmit+0x228>)
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa78 	bl	80027e8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80022f8:	e05b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	6a39      	ldr	r1, [r7, #32]
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	f000 f907 	bl	8002512 <I2C_WaitOnTXISFlagUntilTimeout>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07b      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002312:	781a      	ldrb	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002328:	b29b      	uxth	r3, r3
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002336:	3b01      	subs	r3, #1
 8002338:	b29a      	uxth	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002342:	b29b      	uxth	r3, r3
 8002344:	2b00      	cmp	r3, #0
 8002346:	d034      	beq.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	2b00      	cmp	r3, #0
 800234e:	d130      	bne.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2200      	movs	r2, #0
 8002358:	2180      	movs	r1, #128	@ 0x80
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f880 	bl	8002460 <I2C_WaitOnFlagUntilTimeout>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e04d      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	2bff      	cmp	r3, #255	@ 0xff
 8002372:	d90e      	bls.n	8002392 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	22ff      	movs	r2, #255	@ 0xff
 8002378:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800237e:	b2da      	uxtb	r2, r3
 8002380:	8979      	ldrh	r1, [r7, #10]
 8002382:	2300      	movs	r3, #0
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 fa2c 	bl	80027e8 <I2C_TransferConfig>
 8002390:	e00f      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002396:	b29a      	uxth	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	8979      	ldrh	r1, [r7, #10]
 80023a4:	2300      	movs	r3, #0
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f000 fa1b 	bl	80027e8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d19e      	bne.n	80022fa <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	6a39      	ldr	r1, [r7, #32]
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 f8ed 	bl	80025a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e01a      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2220      	movs	r2, #32
 80023d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <HAL_I2C_Master_Transmit+0x22c>)
 80023e4:	400b      	ands	r3, r1
 80023e6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	e000      	b.n	8002406 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002404:	2302      	movs	r3, #2
  }
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	80002000 	.word	0x80002000
 8002414:	fe00e800 	.word	0xfe00e800

08002418 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b02      	cmp	r3, #2
 800242c:	d103      	bne.n	8002436 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2200      	movs	r2, #0
 8002434:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b01      	cmp	r3, #1
 8002442:	d007      	beq.n	8002454 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	619a      	str	r2, [r3, #24]
  }
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	4613      	mov	r3, r2
 800246e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002470:	e03b      	b.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	6839      	ldr	r1, [r7, #0]
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 f8d6 	bl	8002628 <I2C_IsErrorOccurred>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e041      	b.n	800250a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800248c:	d02d      	beq.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800248e:	f7ff fa81 	bl	8001994 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d302      	bcc.n	80024a4 <I2C_WaitOnFlagUntilTimeout+0x44>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d122      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	699a      	ldr	r2, [r3, #24]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	4013      	ands	r3, r2
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	bf0c      	ite	eq
 80024b4:	2301      	moveq	r3, #1
 80024b6:	2300      	movne	r3, #0
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	461a      	mov	r2, r3
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	429a      	cmp	r2, r3
 80024c0:	d113      	bne.n	80024ea <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2220      	movs	r2, #32
 80024d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4013      	ands	r3, r2
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	429a      	cmp	r2, r3
 80024f8:	bf0c      	ite	eq
 80024fa:	2301      	moveq	r3, #1
 80024fc:	2300      	movne	r3, #0
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	461a      	mov	r2, r3
 8002502:	79fb      	ldrb	r3, [r7, #7]
 8002504:	429a      	cmp	r2, r3
 8002506:	d0b4      	beq.n	8002472 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	60f8      	str	r0, [r7, #12]
 800251a:	60b9      	str	r1, [r7, #8]
 800251c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800251e:	e033      	b.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	68b9      	ldr	r1, [r7, #8]
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 f87f 	bl	8002628 <I2C_IsErrorOccurred>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e031      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f1b3 3fff 	cmp.w	r3, #4294967295
 800253a:	d025      	beq.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800253c:	f7ff fa2a 	bl	8001994 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	429a      	cmp	r2, r3
 800254a:	d302      	bcc.n	8002552 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d11a      	bne.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b02      	cmp	r3, #2
 800255e:	d013      	beq.n	8002588 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002564:	f043 0220 	orr.w	r2, r3, #32
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e007      	b.n	8002598 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d1c4      	bne.n	8002520 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	60f8      	str	r0, [r7, #12]
 80025a8:	60b9      	str	r1, [r7, #8]
 80025aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025ac:	e02f      	b.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	68b9      	ldr	r1, [r7, #8]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f838 	bl	8002628 <I2C_IsErrorOccurred>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e02d      	b.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025c2:	f7ff f9e7 	bl	8001994 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d302      	bcc.n	80025d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d11a      	bne.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	699b      	ldr	r3, [r3, #24]
 80025de:	f003 0320 	and.w	r3, r3, #32
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	d013      	beq.n	800260e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ea:	f043 0220 	orr.w	r2, r3, #32
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2220      	movs	r2, #32
 80025f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e007      	b.n	800261e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	f003 0320 	and.w	r3, r3, #32
 8002618:	2b20      	cmp	r3, #32
 800261a:	d1c8      	bne.n	80025ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800261c:	2300      	movs	r3, #0
}
 800261e:	4618      	mov	r0, r3
 8002620:	3710      	adds	r7, #16
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
	...

08002628 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b08a      	sub	sp, #40	@ 0x28
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0310 	and.w	r3, r3, #16
 8002650:	2b00      	cmp	r3, #0
 8002652:	d068      	beq.n	8002726 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800265c:	e049      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002664:	d045      	beq.n	80026f2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002666:	f7ff f995 	bl	8001994 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	429a      	cmp	r2, r3
 8002674:	d302      	bcc.n	800267c <I2C_IsErrorOccurred+0x54>
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d13a      	bne.n	80026f2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002686:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800268e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800269a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800269e:	d121      	bne.n	80026e4 <I2C_IsErrorOccurred+0xbc>
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026a6:	d01d      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d01a      	beq.n	80026e4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80026bc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80026be:	f7ff f969 	bl	8001994 <HAL_GetTick>
 80026c2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026c4:	e00e      	b.n	80026e4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80026c6:	f7ff f965 	bl	8001994 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b19      	cmp	r3, #25
 80026d2:	d907      	bls.n	80026e4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f043 0320 	orr.w	r3, r3, #32
 80026da:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80026e2:	e006      	b.n	80026f2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d1e9      	bne.n	80026c6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d003      	beq.n	8002708 <I2C_IsErrorOccurred+0xe0>
 8002700:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002704:	2b00      	cmp	r3, #0
 8002706:	d0aa      	beq.n	800265e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2220      	movs	r2, #32
 8002716:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	f043 0304 	orr.w	r3, r3, #4
 800271e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800272e:	69bb      	ldr	r3, [r7, #24]
 8002730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00b      	beq.n	8002750 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002738:	6a3b      	ldr	r3, [r7, #32]
 800273a:	f043 0301 	orr.w	r3, r3, #1
 800273e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002748:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00b      	beq.n	8002772 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800275a:	6a3b      	ldr	r3, [r7, #32]
 800275c:	f043 0308 	orr.w	r3, r3, #8
 8002760:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800276a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00b      	beq.n	8002794 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800277c:	6a3b      	ldr	r3, [r7, #32]
 800277e:	f043 0302 	orr.w	r3, r3, #2
 8002782:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800278c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002794:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002798:	2b00      	cmp	r3, #0
 800279a:	d01c      	beq.n	80027d6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fe3b 	bl	8002418 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b0d      	ldr	r3, [pc, #52]	@ (80027e4 <I2C_IsErrorOccurred+0x1bc>)
 80027ae:	400b      	ands	r3, r1
 80027b0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2220      	movs	r2, #32
 80027c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80027d6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3728      	adds	r7, #40	@ 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	fe00e800 	.word	0xfe00e800

080027e8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	607b      	str	r3, [r7, #4]
 80027f2:	460b      	mov	r3, r1
 80027f4:	817b      	strh	r3, [r7, #10]
 80027f6:	4613      	mov	r3, r2
 80027f8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80027fa:	897b      	ldrh	r3, [r7, #10]
 80027fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002800:	7a7b      	ldrb	r3, [r7, #9]
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002808:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	4313      	orrs	r3, r2
 8002812:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002816:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	6a3b      	ldr	r3, [r7, #32]
 8002820:	0d5b      	lsrs	r3, r3, #21
 8002822:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002826:	4b08      	ldr	r3, [pc, #32]	@ (8002848 <I2C_TransferConfig+0x60>)
 8002828:	430b      	orrs	r3, r1
 800282a:	43db      	mvns	r3, r3
 800282c:	ea02 0103 	and.w	r1, r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	697a      	ldr	r2, [r7, #20]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800283a:	bf00      	nop
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	03ff63ff 	.word	0x03ff63ff

0800284c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b20      	cmp	r3, #32
 8002860:	d138      	bne.n	80028d4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002868:	2b01      	cmp	r3, #1
 800286a:	d101      	bne.n	8002870 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800286c:	2302      	movs	r3, #2
 800286e:	e032      	b.n	80028d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2224      	movs	r2, #36	@ 0x24
 800287c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f022 0201 	bic.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800289e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	6819      	ldr	r1, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f042 0201 	orr.w	r2, r2, #1
 80028be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2220      	movs	r2, #32
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028d0:	2300      	movs	r3, #0
 80028d2:	e000      	b.n	80028d6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d4:	2302      	movs	r3, #2
  }
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d139      	bne.n	800296c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d101      	bne.n	8002906 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002902:	2302      	movs	r3, #2
 8002904:	e033      	b.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2201      	movs	r2, #1
 800290a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2224      	movs	r2, #36	@ 0x24
 8002912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f022 0201 	bic.w	r2, r2, #1
 8002924:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002934:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	021b      	lsls	r3, r3, #8
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68fa      	ldr	r2, [r7, #12]
 8002946:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2220      	movs	r2, #32
 800295c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	e000      	b.n	800296e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800296c:	2302      	movs	r3, #2
  }
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
	...

0800297c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002984:	4b0d      	ldr	r3, [pc, #52]	@ (80029bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002986:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800298a:	4a0c      	ldr	r2, [pc, #48]	@ (80029bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 800298c:	f043 0302 	orr.w	r3, r3, #2
 8002990:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002994:	4b09      	ldr	r3, [pc, #36]	@ (80029bc <HAL_I2CEx_EnableFastModePlus+0x40>)
 8002996:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	60fb      	str	r3, [r7, #12]
 80029a0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80029a2:	4b07      	ldr	r3, [pc, #28]	@ (80029c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4906      	ldr	r1, [pc, #24]	@ (80029c0 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
}
 80029ae:	bf00      	nop
 80029b0:	3714      	adds	r7, #20
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	58024400 	.word	0x58024400
 80029c0:	58000400 	.word	0x58000400

080029c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d00a      	beq.n	80029ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80029d8:	4b16      	ldr	r3, [pc, #88]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f003 0307 	and.w	r3, r3, #7
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d001      	beq.n	80029ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e01f      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e01d      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80029ee:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	490f      	ldr	r1, [pc, #60]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80029fe:	f7fe ffc9 	bl	8001994 <HAL_GetTick>
 8002a02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a04:	e009      	b.n	8002a1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002a06:	f7fe ffc5 	bl	8001994 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002a14:	d901      	bls.n	8002a1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e007      	b.n	8002a2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002a1a:	4b06      	ldr	r3, [pc, #24]	@ (8002a34 <HAL_PWREx_ConfigSupply+0x70>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a26:	d1ee      	bne.n	8002a06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	58024800 	.word	0x58024800

08002a38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b08c      	sub	sp, #48	@ 0x30
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f000 bc48 	b.w	80032dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	f000 8088 	beq.w	8002b6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a5a:	4b99      	ldr	r3, [pc, #612]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a5c:	691b      	ldr	r3, [r3, #16]
 8002a5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002a64:	4b96      	ldr	r3, [pc, #600]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d007      	beq.n	8002a80 <HAL_RCC_OscConfig+0x48>
 8002a70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a72:	2b18      	cmp	r3, #24
 8002a74:	d111      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62>
 8002a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a80:	4b8f      	ldr	r3, [pc, #572]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d06d      	beq.n	8002b68 <HAL_RCC_OscConfig+0x130>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d169      	bne.n	8002b68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	f000 bc21 	b.w	80032dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002aa2:	d106      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x7a>
 8002aa4:	4b86      	ldr	r3, [pc, #536]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a85      	ldr	r2, [pc, #532]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e02e      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x9c>
 8002aba:	4b81      	ldr	r3, [pc, #516]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a80      	ldr	r2, [pc, #512]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	4b7e      	ldr	r3, [pc, #504]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a7d      	ldr	r2, [pc, #500]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	e01d      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002adc:	d10c      	bne.n	8002af8 <HAL_RCC_OscConfig+0xc0>
 8002ade:	4b78      	ldr	r3, [pc, #480]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a77      	ldr	r2, [pc, #476]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	4b75      	ldr	r3, [pc, #468]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a74      	ldr	r2, [pc, #464]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002af0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002af4:	6013      	str	r3, [r2, #0]
 8002af6:	e00b      	b.n	8002b10 <HAL_RCC_OscConfig+0xd8>
 8002af8:	4b71      	ldr	r3, [pc, #452]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a70      	ldr	r2, [pc, #448]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002afe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b02:	6013      	str	r3, [r2, #0]
 8002b04:	4b6e      	ldr	r3, [pc, #440]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a6d      	ldr	r2, [pc, #436]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d013      	beq.n	8002b40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe ff3c 	bl	8001994 <HAL_GetTick>
 8002b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b20:	f7fe ff38 	bl	8001994 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b64      	cmp	r3, #100	@ 0x64
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e3d4      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b32:	4b63      	ldr	r3, [pc, #396]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f0      	beq.n	8002b20 <HAL_RCC_OscConfig+0xe8>
 8002b3e:	e014      	b.n	8002b6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe ff28 	bl	8001994 <HAL_GetTick>
 8002b44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b48:	f7fe ff24 	bl	8001994 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b64      	cmp	r3, #100	@ 0x64
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e3c0      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002b5a:	4b59      	ldr	r3, [pc, #356]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d1f0      	bne.n	8002b48 <HAL_RCC_OscConfig+0x110>
 8002b66:	e000      	b.n	8002b6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	f000 80ca 	beq.w	8002d0c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b78:	4b51      	ldr	r3, [pc, #324]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002b82:	4b4f      	ldr	r3, [pc, #316]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d007      	beq.n	8002b9e <HAL_RCC_OscConfig+0x166>
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	2b18      	cmp	r3, #24
 8002b92:	d156      	bne.n	8002c42 <HAL_RCC_OscConfig+0x20a>
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 0303 	and.w	r3, r3, #3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d151      	bne.n	8002c42 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b9e:	4b48      	ldr	r3, [pc, #288]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0304 	and.w	r3, r3, #4
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d005      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e392      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002bb6:	4b42      	ldr	r3, [pc, #264]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 0219 	bic.w	r2, r3, #25
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68db      	ldr	r3, [r3, #12]
 8002bc2:	493f      	ldr	r1, [pc, #252]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc8:	f7fe fee4 	bl	8001994 <HAL_GetTick>
 8002bcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fee0 	bl	8001994 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e37c      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002be2:	4b37      	ldr	r3, [pc, #220]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0304 	and.w	r3, r3, #4
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bee:	f7fe ff01 	bl	80019f4 <HAL_GetREVID>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d817      	bhi.n	8002c2c <HAL_RCC_OscConfig+0x1f4>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	2b40      	cmp	r3, #64	@ 0x40
 8002c02:	d108      	bne.n	8002c16 <HAL_RCC_OscConfig+0x1de>
 8002c04:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002c0c:	4a2c      	ldr	r2, [pc, #176]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c12:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c14:	e07a      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c16:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	031b      	lsls	r3, r3, #12
 8002c24:	4926      	ldr	r1, [pc, #152]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c2a:	e06f      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c2c:	4b24      	ldr	r3, [pc, #144]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	061b      	lsls	r3, r3, #24
 8002c3a:	4921      	ldr	r1, [pc, #132]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c40:	e064      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68db      	ldr	r3, [r3, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d047      	beq.n	8002cda <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002c4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 0219 	bic.w	r2, r3, #25
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	491a      	ldr	r1, [pc, #104]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5c:	f7fe fe9a 	bl	8001994 <HAL_GetTick>
 8002c60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c62:	e008      	b.n	8002c76 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c64:	f7fe fe96 	bl	8001994 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d901      	bls.n	8002c76 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e332      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c76:	4b12      	ldr	r3, [pc, #72]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d0f0      	beq.n	8002c64 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	f7fe feb7 	bl	80019f4 <HAL_GetREVID>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d819      	bhi.n	8002cc4 <HAL_RCC_OscConfig+0x28c>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b40      	cmp	r3, #64	@ 0x40
 8002c96:	d108      	bne.n	8002caa <HAL_RCC_OscConfig+0x272>
 8002c98:	4b09      	ldr	r3, [pc, #36]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002ca0:	4a07      	ldr	r2, [pc, #28]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca6:	6053      	str	r3, [r2, #4]
 8002ca8:	e030      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
 8002caa:	4b05      	ldr	r3, [pc, #20]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	031b      	lsls	r3, r3, #12
 8002cb8:	4901      	ldr	r1, [pc, #4]	@ (8002cc0 <HAL_RCC_OscConfig+0x288>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	604b      	str	r3, [r1, #4]
 8002cbe:	e025      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
 8002cc0:	58024400 	.word	0x58024400
 8002cc4:	4b9a      	ldr	r3, [pc, #616]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	061b      	lsls	r3, r3, #24
 8002cd2:	4997      	ldr	r1, [pc, #604]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	604b      	str	r3, [r1, #4]
 8002cd8:	e018      	b.n	8002d0c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cda:	4b95      	ldr	r3, [pc, #596]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a94      	ldr	r2, [pc, #592]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce6:	f7fe fe55 	bl	8001994 <HAL_GetTick>
 8002cea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002cec:	e008      	b.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cee:	f7fe fe51 	bl	8001994 <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d901      	bls.n	8002d00 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002cfc:	2303      	movs	r3, #3
 8002cfe:	e2ed      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002d00:	4b8b      	ldr	r3, [pc, #556]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1f0      	bne.n	8002cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0310 	and.w	r3, r3, #16
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 80a9 	beq.w	8002e6c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d1a:	4b85      	ldr	r3, [pc, #532]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d22:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002d24:	4b82      	ldr	r3, [pc, #520]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d28:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d007      	beq.n	8002d40 <HAL_RCC_OscConfig+0x308>
 8002d30:	69bb      	ldr	r3, [r7, #24]
 8002d32:	2b18      	cmp	r3, #24
 8002d34:	d13a      	bne.n	8002dac <HAL_RCC_OscConfig+0x374>
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f003 0303 	and.w	r3, r3, #3
 8002d3c:	2b01      	cmp	r3, #1
 8002d3e:	d135      	bne.n	8002dac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d40:	4b7b      	ldr	r3, [pc, #492]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d005      	beq.n	8002d58 <HAL_RCC_OscConfig+0x320>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	2b80      	cmp	r3, #128	@ 0x80
 8002d52:	d001      	beq.n	8002d58 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e2c1      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d58:	f7fe fe4c 	bl	80019f4 <HAL_GetREVID>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d817      	bhi.n	8002d96 <HAL_RCC_OscConfig+0x35e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	2b20      	cmp	r3, #32
 8002d6c:	d108      	bne.n	8002d80 <HAL_RCC_OscConfig+0x348>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002d76:	4a6e      	ldr	r2, [pc, #440]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002d7c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d7e:	e075      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d80:	4b6b      	ldr	r3, [pc, #428]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a1b      	ldr	r3, [r3, #32]
 8002d8c:	069b      	lsls	r3, r3, #26
 8002d8e:	4968      	ldr	r1, [pc, #416]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002d94:	e06a      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002d96:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002d98:	68db      	ldr	r3, [r3, #12]
 8002d9a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	061b      	lsls	r3, r3, #24
 8002da4:	4962      	ldr	r1, [pc, #392]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002daa:	e05f      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d042      	beq.n	8002e3a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002db4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5d      	ldr	r2, [pc, #372]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002dbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe fde8 	bl	8001994 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002dc8:	f7fe fde4 	bl	8001994 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e280      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dda:	4b55      	ldr	r3, [pc, #340]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002de6:	f7fe fe05 	bl	80019f4 <HAL_GetREVID>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d817      	bhi.n	8002e24 <HAL_RCC_OscConfig+0x3ec>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a1b      	ldr	r3, [r3, #32]
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d108      	bne.n	8002e0e <HAL_RCC_OscConfig+0x3d6>
 8002dfc:	4b4c      	ldr	r3, [pc, #304]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002e04:	4a4a      	ldr	r2, [pc, #296]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002e0a:	6053      	str	r3, [r2, #4]
 8002e0c:	e02e      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
 8002e0e:	4b48      	ldr	r3, [pc, #288]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	069b      	lsls	r3, r3, #26
 8002e1c:	4944      	ldr	r1, [pc, #272]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	604b      	str	r3, [r1, #4]
 8002e22:	e023      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
 8002e24:	4b42      	ldr	r3, [pc, #264]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	493f      	ldr	r1, [pc, #252]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	60cb      	str	r3, [r1, #12]
 8002e38:	e018      	b.n	8002e6c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a3c      	ldr	r2, [pc, #240]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e46:	f7fe fda5 	bl	8001994 <HAL_GetTick>
 8002e4a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e4c:	e008      	b.n	8002e60 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002e4e:	f7fe fda1 	bl	8001994 <HAL_GetTick>
 8002e52:	4602      	mov	r2, r0
 8002e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e23d      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002e60:	4b33      	ldr	r3, [pc, #204]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f0      	bne.n	8002e4e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0308 	and.w	r3, r3, #8
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d036      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d019      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e80:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	4a2a      	ldr	r2, [pc, #168]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e8c:	f7fe fd82 	bl	8001994 <HAL_GetTick>
 8002e90:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e94:	f7fe fd7e 	bl	8001994 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e21a      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ea6:	4b22      	ldr	r3, [pc, #136]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002ea8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0x45c>
 8002eb2:	e018      	b.n	8002ee6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002eba:	f023 0301 	bic.w	r3, r3, #1
 8002ebe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec0:	f7fe fd68 	bl	8001994 <HAL_GetTick>
 8002ec4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fd64 	bl	8001994 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e200      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002eda:	4b15      	ldr	r3, [pc, #84]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002edc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d1f0      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d039      	beq.n	8002f66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d01c      	beq.n	8002f34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002efa:	4b0d      	ldr	r3, [pc, #52]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a0c      	ldr	r2, [pc, #48]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002f00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002f04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f06:	f7fe fd45 	bl	8001994 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f0c:	e008      	b.n	8002f20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f0e:	f7fe fd41 	bl	8001994 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e1dd      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002f20:	4b03      	ldr	r3, [pc, #12]	@ (8002f30 <HAL_RCC_OscConfig+0x4f8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0f0      	beq.n	8002f0e <HAL_RCC_OscConfig+0x4d6>
 8002f2c:	e01b      	b.n	8002f66 <HAL_RCC_OscConfig+0x52e>
 8002f2e:	bf00      	nop
 8002f30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f34:	4b9b      	ldr	r3, [pc, #620]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a9a      	ldr	r2, [pc, #616]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002f3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002f40:	f7fe fd28 	bl	8001994 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f48:	f7fe fd24 	bl	8001994 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e1c0      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002f5a:	4b92      	ldr	r3, [pc, #584]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0304 	and.w	r3, r3, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	f000 8081 	beq.w	8003076 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f74:	4b8c      	ldr	r3, [pc, #560]	@ (80031a8 <HAL_RCC_OscConfig+0x770>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a8b      	ldr	r2, [pc, #556]	@ (80031a8 <HAL_RCC_OscConfig+0x770>)
 8002f7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f80:	f7fe fd08 	bl	8001994 <HAL_GetTick>
 8002f84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f88:	f7fe fd04 	bl	8001994 <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e1a0      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f9a:	4b83      	ldr	r3, [pc, #524]	@ (80031a8 <HAL_RCC_OscConfig+0x770>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d106      	bne.n	8002fbc <HAL_RCC_OscConfig+0x584>
 8002fae:	4b7d      	ldr	r3, [pc, #500]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fb2:	4a7c      	ldr	r2, [pc, #496]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fba:	e02d      	b.n	8003018 <HAL_RCC_OscConfig+0x5e0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10c      	bne.n	8002fde <HAL_RCC_OscConfig+0x5a6>
 8002fc4:	4b77      	ldr	r3, [pc, #476]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc8:	4a76      	ldr	r2, [pc, #472]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fca:	f023 0301 	bic.w	r3, r3, #1
 8002fce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd0:	4b74      	ldr	r3, [pc, #464]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd4:	4a73      	ldr	r2, [pc, #460]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fd6:	f023 0304 	bic.w	r3, r3, #4
 8002fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fdc:	e01c      	b.n	8003018 <HAL_RCC_OscConfig+0x5e0>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	2b05      	cmp	r3, #5
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x5c8>
 8002fe6:	4b6f      	ldr	r3, [pc, #444]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	4a6e      	ldr	r2, [pc, #440]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002fec:	f043 0304 	orr.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ff2:	4b6c      	ldr	r3, [pc, #432]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff6:	4a6b      	ldr	r2, [pc, #428]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8002ff8:	f043 0301 	orr.w	r3, r3, #1
 8002ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0x5e0>
 8003000:	4b68      	ldr	r3, [pc, #416]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003004:	4a67      	ldr	r2, [pc, #412]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003006:	f023 0301 	bic.w	r3, r3, #1
 800300a:	6713      	str	r3, [r2, #112]	@ 0x70
 800300c:	4b65      	ldr	r3, [pc, #404]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800300e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003010:	4a64      	ldr	r2, [pc, #400]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003012:	f023 0304 	bic.w	r3, r3, #4
 8003016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d015      	beq.n	800304c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003020:	f7fe fcb8 	bl	8001994 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003026:	e00a      	b.n	800303e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003028:	f7fe fcb4 	bl	8001994 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e14e      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800303e:	4b59      	ldr	r3, [pc, #356]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0ee      	beq.n	8003028 <HAL_RCC_OscConfig+0x5f0>
 800304a:	e014      	b.n	8003076 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304c:	f7fe fca2 	bl	8001994 <HAL_GetTick>
 8003050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003052:	e00a      	b.n	800306a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003054:	f7fe fc9e 	bl	8001994 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003062:	4293      	cmp	r3, r2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e138      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800306a:	4b4e      	ldr	r3, [pc, #312]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800306c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306e:	f003 0302 	and.w	r3, r3, #2
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ee      	bne.n	8003054 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800307a:	2b00      	cmp	r3, #0
 800307c:	f000 812d 	beq.w	80032da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003080:	4b48      	ldr	r3, [pc, #288]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003088:	2b18      	cmp	r3, #24
 800308a:	f000 80bd 	beq.w	8003208 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003092:	2b02      	cmp	r3, #2
 8003094:	f040 809e 	bne.w	80031d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003098:	4b42      	ldr	r3, [pc, #264]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a41      	ldr	r2, [pc, #260]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800309e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80030a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030a4:	f7fe fc76 	bl	8001994 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030aa:	e008      	b.n	80030be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ac:	f7fe fc72 	bl	8001994 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d901      	bls.n	80030be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80030ba:	2303      	movs	r3, #3
 80030bc:	e10e      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80030be:	4b39      	ldr	r3, [pc, #228]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f0      	bne.n	80030ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030ca:	4b36      	ldr	r3, [pc, #216]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 80030cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80030ce:	4b37      	ldr	r3, [pc, #220]	@ (80031ac <HAL_RCC_OscConfig+0x774>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80030da:	0112      	lsls	r2, r2, #4
 80030dc:	430a      	orrs	r2, r1
 80030de:	4931      	ldr	r1, [pc, #196]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	3b01      	subs	r3, #1
 80030ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f2:	3b01      	subs	r3, #1
 80030f4:	025b      	lsls	r3, r3, #9
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	431a      	orrs	r2, r3
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003106:	431a      	orrs	r2, r3
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310c:	3b01      	subs	r3, #1
 800310e:	061b      	lsls	r3, r3, #24
 8003110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003114:	4923      	ldr	r1, [pc, #140]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003116:	4313      	orrs	r3, r2
 8003118:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800311a:	4b22      	ldr	r3, [pc, #136]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	4a21      	ldr	r2, [pc, #132]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003126:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800312a:	4b21      	ldr	r3, [pc, #132]	@ (80031b0 <HAL_RCC_OscConfig+0x778>)
 800312c:	4013      	ands	r3, r2
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003132:	00d2      	lsls	r2, r2, #3
 8003134:	491b      	ldr	r1, [pc, #108]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003136:	4313      	orrs	r3, r2
 8003138:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800313a:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800313c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800313e:	f023 020c 	bic.w	r2, r3, #12
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	4917      	ldr	r1, [pc, #92]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003148:	4313      	orrs	r3, r2
 800314a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800314c:	4b15      	ldr	r3, [pc, #84]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003150:	f023 0202 	bic.w	r2, r3, #2
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003158:	4912      	ldr	r1, [pc, #72]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800315a:	4313      	orrs	r3, r2
 800315c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800315e:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	4a10      	ldr	r2, [pc, #64]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003168:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316a:	4b0e      	ldr	r3, [pc, #56]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	4a0d      	ldr	r2, [pc, #52]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003174:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003176:	4b0b      	ldr	r3, [pc, #44]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800317a:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 800317c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003180:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003182:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003188:	f043 0301 	orr.w	r3, r3, #1
 800318c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318e:	4b05      	ldr	r3, [pc, #20]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a04      	ldr	r2, [pc, #16]	@ (80031a4 <HAL_RCC_OscConfig+0x76c>)
 8003194:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319a:	f7fe fbfb 	bl	8001994 <HAL_GetTick>
 800319e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031a0:	e011      	b.n	80031c6 <HAL_RCC_OscConfig+0x78e>
 80031a2:	bf00      	nop
 80031a4:	58024400 	.word	0x58024400
 80031a8:	58024800 	.word	0x58024800
 80031ac:	fffffc0c 	.word	0xfffffc0c
 80031b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fbee 	bl	8001994 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e08a      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80031c6:	4b47      	ldr	r3, [pc, #284]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCC_OscConfig+0x77c>
 80031d2:	e082      	b.n	80032da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d4:	4b43      	ldr	r3, [pc, #268]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a42      	ldr	r2, [pc, #264]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fe fbd8 	bl	8001994 <HAL_GetTick>
 80031e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e8:	f7fe fbd4 	bl	8001994 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e070      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80031fa:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d1f0      	bne.n	80031e8 <HAL_RCC_OscConfig+0x7b0>
 8003206:	e068      	b.n	80032da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003208:	4b36      	ldr	r3, [pc, #216]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800320e:	4b35      	ldr	r3, [pc, #212]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003218:	2b01      	cmp	r3, #1
 800321a:	d031      	beq.n	8003280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0203 	and.w	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d12a      	bne.n	8003280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	091b      	lsrs	r3, r3, #4
 800322e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003236:	429a      	cmp	r2, r3
 8003238:	d122      	bne.n	8003280 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003246:	429a      	cmp	r2, r3
 8003248:	d11a      	bne.n	8003280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0a5b      	lsrs	r3, r3, #9
 800324e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003256:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003258:	429a      	cmp	r2, r3
 800325a:	d111      	bne.n	8003280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003268:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800326a:	429a      	cmp	r2, r3
 800326c:	d108      	bne.n	8003280 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	0e1b      	lsrs	r3, r3, #24
 8003272:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800327a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800327c:	429a      	cmp	r2, r3
 800327e:	d001      	beq.n	8003284 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e02b      	b.n	80032dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003284:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 8003286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800328e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	429a      	cmp	r2, r3
 8003298:	d01f      	beq.n	80032da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800329a:	4b12      	ldr	r3, [pc, #72]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	4a11      	ldr	r2, [pc, #68]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80032a6:	f7fe fb75 	bl	8001994 <HAL_GetTick>
 80032aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80032ac:	bf00      	nop
 80032ae:	f7fe fb71 	bl	8001994 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d0f9      	beq.n	80032ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80032ba:	4b0a      	ldr	r3, [pc, #40]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80032bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032be:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <HAL_RCC_OscConfig+0x8b0>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80032c6:	00d2      	lsls	r2, r2, #3
 80032c8:	4906      	ldr	r1, [pc, #24]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80032ce:	4b05      	ldr	r3, [pc, #20]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	4a04      	ldr	r2, [pc, #16]	@ (80032e4 <HAL_RCC_OscConfig+0x8ac>)
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3730      	adds	r7, #48	@ 0x30
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	58024400 	.word	0x58024400
 80032e8:	ffff0007 	.word	0xffff0007

080032ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d101      	bne.n	8003300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e19c      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003300:	4b8a      	ldr	r3, [pc, #552]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d910      	bls.n	8003330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b87      	ldr	r3, [pc, #540]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 020f 	bic.w	r2, r3, #15
 8003316:	4985      	ldr	r1, [pc, #532]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	4313      	orrs	r3, r2
 800331c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800331e:	4b83      	ldr	r3, [pc, #524]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 030f 	and.w	r3, r3, #15
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d001      	beq.n	8003330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e184      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d010      	beq.n	800335e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	4b7b      	ldr	r3, [pc, #492]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003348:	429a      	cmp	r2, r3
 800334a:	d908      	bls.n	800335e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800334c:	4b78      	ldr	r3, [pc, #480]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	4975      	ldr	r1, [pc, #468]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800335a:	4313      	orrs	r3, r2
 800335c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0308 	and.w	r3, r3, #8
 8003366:	2b00      	cmp	r3, #0
 8003368:	d010      	beq.n	800338c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	695a      	ldr	r2, [r3, #20]
 800336e:	4b70      	ldr	r3, [pc, #448]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003370:	69db      	ldr	r3, [r3, #28]
 8003372:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003376:	429a      	cmp	r2, r3
 8003378:	d908      	bls.n	800338c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800337a:	4b6d      	ldr	r3, [pc, #436]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	496a      	ldr	r1, [pc, #424]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003388:	4313      	orrs	r3, r2
 800338a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d010      	beq.n	80033ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	699a      	ldr	r2, [r3, #24]
 800339c:	4b64      	ldr	r3, [pc, #400]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d908      	bls.n	80033ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80033a8:	4b61      	ldr	r3, [pc, #388]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	495e      	ldr	r1, [pc, #376]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 0320 	and.w	r3, r3, #32
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69da      	ldr	r2, [r3, #28]
 80033ca:	4b59      	ldr	r3, [pc, #356]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d908      	bls.n	80033e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80033d6:	4b56      	ldr	r3, [pc, #344]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033d8:	6a1b      	ldr	r3, [r3, #32]
 80033da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4953      	ldr	r1, [pc, #332]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d010      	beq.n	8003416 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80033fa:	699b      	ldr	r3, [r3, #24]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	429a      	cmp	r2, r3
 8003402:	d908      	bls.n	8003416 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003404:	4b4a      	ldr	r3, [pc, #296]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	f023 020f 	bic.w	r2, r3, #15
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	4947      	ldr	r1, [pc, #284]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003412:	4313      	orrs	r3, r2
 8003414:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d055      	beq.n	80034ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003422:	4b43      	ldr	r3, [pc, #268]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	4940      	ldr	r1, [pc, #256]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003430:	4313      	orrs	r3, r2
 8003432:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d107      	bne.n	800344c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800343c:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d121      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e0f6      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d107      	bne.n	8003464 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003454:	4b36      	ldr	r3, [pc, #216]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d115      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e0ea      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d107      	bne.n	800347c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800346c:	4b30      	ldr	r3, [pc, #192]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	e0de      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800347c:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e0d6      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800348c:	4b28      	ldr	r3, [pc, #160]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800348e:	691b      	ldr	r3, [r3, #16]
 8003490:	f023 0207 	bic.w	r2, r3, #7
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	4925      	ldr	r1, [pc, #148]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 800349a:	4313      	orrs	r3, r2
 800349c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800349e:	f7fe fa79 	bl	8001994 <HAL_GetTick>
 80034a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a4:	e00a      	b.n	80034bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a6:	f7fe fa75 	bl	8001994 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d901      	bls.n	80034bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	e0be      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	00db      	lsls	r3, r3, #3
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d1eb      	bne.n	80034a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d010      	beq.n	80034fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	4b14      	ldr	r3, [pc, #80]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	f003 030f 	and.w	r3, r3, #15
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d208      	bcs.n	80034fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ea:	4b11      	ldr	r3, [pc, #68]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f023 020f 	bic.w	r2, r3, #15
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	490e      	ldr	r1, [pc, #56]	@ (8003530 <HAL_RCC_ClockConfig+0x244>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	429a      	cmp	r2, r3
 8003508:	d214      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800350a:	4b08      	ldr	r3, [pc, #32]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f023 020f 	bic.w	r2, r3, #15
 8003512:	4906      	ldr	r1, [pc, #24]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800351a:	4b04      	ldr	r3, [pc, #16]	@ (800352c <HAL_RCC_ClockConfig+0x240>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 030f 	and.w	r3, r3, #15
 8003522:	683a      	ldr	r2, [r7, #0]
 8003524:	429a      	cmp	r2, r3
 8003526:	d005      	beq.n	8003534 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e086      	b.n	800363a <HAL_RCC_ClockConfig+0x34e>
 800352c:	52002000 	.word	0x52002000
 8003530:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d010      	beq.n	8003562 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	4b3f      	ldr	r3, [pc, #252]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800354c:	429a      	cmp	r2, r3
 800354e:	d208      	bcs.n	8003562 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003550:	4b3c      	ldr	r3, [pc, #240]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	4939      	ldr	r1, [pc, #228]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 800355e:	4313      	orrs	r3, r2
 8003560:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0308 	and.w	r3, r3, #8
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695a      	ldr	r2, [r3, #20]
 8003572:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800357a:	429a      	cmp	r2, r3
 800357c:	d208      	bcs.n	8003590 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800357e:	4b31      	ldr	r3, [pc, #196]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	492e      	ldr	r1, [pc, #184]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 800358c:	4313      	orrs	r3, r2
 800358e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0310 	and.w	r3, r3, #16
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	4b28      	ldr	r3, [pc, #160]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d208      	bcs.n	80035be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80035ac:	4b25      	ldr	r3, [pc, #148]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	4922      	ldr	r1, [pc, #136]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	69da      	ldr	r2, [r3, #28]
 80035ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d208      	bcs.n	80035ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80035da:	4b1a      	ldr	r3, [pc, #104]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4917      	ldr	r1, [pc, #92]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80035ec:	f000 f834 	bl	8003658 <HAL_RCC_GetSysClockFreq>
 80035f0:	4602      	mov	r2, r0
 80035f2:	4b14      	ldr	r3, [pc, #80]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	0a1b      	lsrs	r3, r3, #8
 80035f8:	f003 030f 	and.w	r3, r3, #15
 80035fc:	4912      	ldr	r1, [pc, #72]	@ (8003648 <HAL_RCC_ClockConfig+0x35c>)
 80035fe:	5ccb      	ldrb	r3, [r1, r3]
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	fa22 f303 	lsr.w	r3, r2, r3
 8003608:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800360a:	4b0e      	ldr	r3, [pc, #56]	@ (8003644 <HAL_RCC_ClockConfig+0x358>)
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	4a0d      	ldr	r2, [pc, #52]	@ (8003648 <HAL_RCC_ClockConfig+0x35c>)
 8003614:	5cd3      	ldrb	r3, [r2, r3]
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	fa22 f303 	lsr.w	r3, r2, r3
 8003620:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <HAL_RCC_ClockConfig+0x360>)
 8003622:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003624:	4a0a      	ldr	r2, [pc, #40]	@ (8003650 <HAL_RCC_ClockConfig+0x364>)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800362a:	4b0a      	ldr	r3, [pc, #40]	@ (8003654 <HAL_RCC_ClockConfig+0x368>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f7fe f966 	bl	8001900 <HAL_InitTick>
 8003634:	4603      	mov	r3, r0
 8003636:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003638:	7bfb      	ldrb	r3, [r7, #15]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	58024400 	.word	0x58024400
 8003648:	0800af24 	.word	0x0800af24
 800364c:	24000004 	.word	0x24000004
 8003650:	24000000 	.word	0x24000000
 8003654:	24000008 	.word	0x24000008

08003658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003658:	b480      	push	{r7}
 800365a:	b089      	sub	sp, #36	@ 0x24
 800365c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800365e:	4bb3      	ldr	r3, [pc, #716]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003666:	2b18      	cmp	r3, #24
 8003668:	f200 8155 	bhi.w	8003916 <HAL_RCC_GetSysClockFreq+0x2be>
 800366c:	a201      	add	r2, pc, #4	@ (adr r2, 8003674 <HAL_RCC_GetSysClockFreq+0x1c>)
 800366e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003672:	bf00      	nop
 8003674:	080036d9 	.word	0x080036d9
 8003678:	08003917 	.word	0x08003917
 800367c:	08003917 	.word	0x08003917
 8003680:	08003917 	.word	0x08003917
 8003684:	08003917 	.word	0x08003917
 8003688:	08003917 	.word	0x08003917
 800368c:	08003917 	.word	0x08003917
 8003690:	08003917 	.word	0x08003917
 8003694:	080036ff 	.word	0x080036ff
 8003698:	08003917 	.word	0x08003917
 800369c:	08003917 	.word	0x08003917
 80036a0:	08003917 	.word	0x08003917
 80036a4:	08003917 	.word	0x08003917
 80036a8:	08003917 	.word	0x08003917
 80036ac:	08003917 	.word	0x08003917
 80036b0:	08003917 	.word	0x08003917
 80036b4:	08003705 	.word	0x08003705
 80036b8:	08003917 	.word	0x08003917
 80036bc:	08003917 	.word	0x08003917
 80036c0:	08003917 	.word	0x08003917
 80036c4:	08003917 	.word	0x08003917
 80036c8:	08003917 	.word	0x08003917
 80036cc:	08003917 	.word	0x08003917
 80036d0:	08003917 	.word	0x08003917
 80036d4:	0800370b 	.word	0x0800370b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036d8:	4b94      	ldr	r3, [pc, #592]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80036e4:	4b91      	ldr	r3, [pc, #580]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	08db      	lsrs	r3, r3, #3
 80036ea:	f003 0303 	and.w	r3, r3, #3
 80036ee:	4a90      	ldr	r2, [pc, #576]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036f0:	fa22 f303 	lsr.w	r3, r2, r3
 80036f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80036f6:	e111      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80036f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80036fa:	61bb      	str	r3, [r7, #24]
      break;
 80036fc:	e10e      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80036fe:	4b8d      	ldr	r3, [pc, #564]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003700:	61bb      	str	r3, [r7, #24]
      break;
 8003702:	e10b      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003704:	4b8c      	ldr	r3, [pc, #560]	@ (8003938 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003706:	61bb      	str	r3, [r7, #24]
      break;
 8003708:	e108      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800370a:	4b88      	ldr	r3, [pc, #544]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800370c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800370e:	f003 0303 	and.w	r3, r3, #3
 8003712:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003714:	4b85      	ldr	r3, [pc, #532]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003718:	091b      	lsrs	r3, r3, #4
 800371a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800371e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003720:	4b82      	ldr	r3, [pc, #520]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800372a:	4b80      	ldr	r3, [pc, #512]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	08db      	lsrs	r3, r3, #3
 8003730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	ee07 3a90 	vmov	s15, r3
 800373e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003742:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 80e1 	beq.w	8003910 <HAL_RCC_GetSysClockFreq+0x2b8>
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	2b02      	cmp	r3, #2
 8003752:	f000 8083 	beq.w	800385c <HAL_RCC_GetSysClockFreq+0x204>
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2b02      	cmp	r3, #2
 800375a:	f200 80a1 	bhi.w	80038a0 <HAL_RCC_GetSysClockFreq+0x248>
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x114>
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d056      	beq.n	8003818 <HAL_RCC_GetSysClockFreq+0x1c0>
 800376a:	e099      	b.n	80038a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800376c:	4b6f      	ldr	r3, [pc, #444]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d02d      	beq.n	80037d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003778:	4b6c      	ldr	r3, [pc, #432]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	08db      	lsrs	r3, r3, #3
 800377e:	f003 0303 	and.w	r3, r3, #3
 8003782:	4a6b      	ldr	r2, [pc, #428]	@ (8003930 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003784:	fa22 f303 	lsr.w	r3, r2, r3
 8003788:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	ee07 3a90 	vmov	s15, r3
 8003790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a2:	4b62      	ldr	r3, [pc, #392]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037aa:	ee07 3a90 	vmov	s15, r3
 80037ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80037b6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800393c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80037c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80037d2:	e087      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	ee07 3a90 	vmov	s15, r3
 80037da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037de:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003940 <HAL_RCC_GetSysClockFreq+0x2e8>
 80037e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037e6:	4b51      	ldr	r3, [pc, #324]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ee:	ee07 3a90 	vmov	s15, r3
 80037f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80037fa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800393c <HAL_RCC_GetSysClockFreq+0x2e4>
 80037fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800380a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800380e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003812:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003816:	e065      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003822:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800382a:	4b40      	ldr	r3, [pc, #256]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800382e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003832:	ee07 3a90 	vmov	s15, r3
 8003836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800383a:	ed97 6a02 	vldr	s12, [r7, #8]
 800383e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800393c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800384a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800384e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003856:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800385a:	e043      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	ee07 3a90 	vmov	s15, r3
 8003862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003866:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003948 <HAL_RCC_GetSysClockFreq+0x2f0>
 800386a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800386e:	4b2f      	ldr	r3, [pc, #188]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003876:	ee07 3a90 	vmov	s15, r3
 800387a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800387e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003882:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800393c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800388a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800388e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800389a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800389e:	e021      	b.n	80038e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	ee07 3a90 	vmov	s15, r3
 80038a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80038aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003944 <HAL_RCC_GetSysClockFreq+0x2ec>
 80038ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038b2:	4b1e      	ldr	r3, [pc, #120]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80038c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80038c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800393c <HAL_RCC_GetSysClockFreq+0x2e4>
 80038ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80038ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80038d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80038da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80038e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80038e4:	4b11      	ldr	r3, [pc, #68]	@ (800392c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80038e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e8:	0a5b      	lsrs	r3, r3, #9
 80038ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80038ee:	3301      	adds	r3, #1
 80038f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	ee07 3a90 	vmov	s15, r3
 80038f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80038fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003908:	ee17 3a90 	vmov	r3, s15
 800390c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800390e:	e005      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003910:	2300      	movs	r3, #0
 8003912:	61bb      	str	r3, [r7, #24]
      break;
 8003914:	e002      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003916:	4b07      	ldr	r3, [pc, #28]	@ (8003934 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003918:	61bb      	str	r3, [r7, #24]
      break;
 800391a:	bf00      	nop
  }

  return sysclockfreq;
 800391c:	69bb      	ldr	r3, [r7, #24]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3724      	adds	r7, #36	@ 0x24
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	58024400 	.word	0x58024400
 8003930:	03d09000 	.word	0x03d09000
 8003934:	003d0900 	.word	0x003d0900
 8003938:	017d7840 	.word	0x017d7840
 800393c:	46000000 	.word	0x46000000
 8003940:	4c742400 	.word	0x4c742400
 8003944:	4a742400 	.word	0x4a742400
 8003948:	4bbebc20 	.word	0x4bbebc20

0800394c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800394c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003950:	b0ca      	sub	sp, #296	@ 0x128
 8003952:	af00      	add	r7, sp, #0
 8003954:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003958:	2300      	movs	r3, #0
 800395a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800395e:	2300      	movs	r3, #0
 8003960:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003970:	2500      	movs	r5, #0
 8003972:	ea54 0305 	orrs.w	r3, r4, r5
 8003976:	d049      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800397e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003982:	d02f      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003984:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003988:	d828      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800398a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800398e:	d01a      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003990:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003994:	d822      	bhi.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800399a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800399e:	d007      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80039a0:	e01c      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a2:	4bb8      	ldr	r3, [pc, #736]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a6:	4ab7      	ldr	r2, [pc, #732]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039ae:	e01a      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b4:	3308      	adds	r3, #8
 80039b6:	2102      	movs	r1, #2
 80039b8:	4618      	mov	r0, r3
 80039ba:	f001 f9d1 	bl	8004d60 <RCCEx_PLL2_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039c4:	e00f      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ca:	3328      	adds	r3, #40	@ 0x28
 80039cc:	2102      	movs	r1, #2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 fa78 	bl	8004ec4 <RCCEx_PLL3_Config>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80039da:	e004      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e2:	e000      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80039e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10a      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80039ee:	4ba5      	ldr	r3, [pc, #660]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039fc:	4aa1      	ldr	r2, [pc, #644]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039fe:	430b      	orrs	r3, r1
 8003a00:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a02:	e003      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003a18:	f04f 0900 	mov.w	r9, #0
 8003a1c:	ea58 0309 	orrs.w	r3, r8, r9
 8003a20:	d047      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d82a      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a32:	bf00      	nop
 8003a34:	08003a49 	.word	0x08003a49
 8003a38:	08003a57 	.word	0x08003a57
 8003a3c:	08003a6d 	.word	0x08003a6d
 8003a40:	08003a8b 	.word	0x08003a8b
 8003a44:	08003a8b 	.word	0x08003a8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b8e      	ldr	r3, [pc, #568]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4c:	4a8d      	ldr	r2, [pc, #564]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a54:	e01a      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f001 f97e 	bl	8004d60 <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a6a:	e00f      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	3328      	adds	r3, #40	@ 0x28
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 fa25 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003a80:	e004      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a88:	e000      	b.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003a8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10a      	bne.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003a94:	4b7b      	ldr	r3, [pc, #492]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a98:	f023 0107 	bic.w	r1, r3, #7
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aa2:	4a78      	ldr	r2, [pc, #480]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003aa4:	430b      	orrs	r3, r1
 8003aa6:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa8:	e003      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003abe:	f04f 0b00 	mov.w	fp, #0
 8003ac2:	ea5a 030b 	orrs.w	r3, sl, fp
 8003ac6:	d04c      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad2:	d030      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003ad4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ad8:	d829      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ada:	2bc0      	cmp	r3, #192	@ 0xc0
 8003adc:	d02d      	beq.n	8003b3a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003ade:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ae0:	d825      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003ae2:	2b80      	cmp	r3, #128	@ 0x80
 8003ae4:	d018      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003ae6:	2b80      	cmp	r3, #128	@ 0x80
 8003ae8:	d821      	bhi.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d002      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003aee:	2b40      	cmp	r3, #64	@ 0x40
 8003af0:	d007      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003af2:	e01c      	b.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003af4:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003af8:	4a62      	ldr	r2, [pc, #392]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003afa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b00:	e01c      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b06:	3308      	adds	r3, #8
 8003b08:	2100      	movs	r1, #0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 f928 	bl	8004d60 <RCCEx_PLL2_Config>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b16:	e011      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1c:	3328      	adds	r3, #40	@ 0x28
 8003b1e:	2100      	movs	r1, #0
 8003b20:	4618      	mov	r0, r3
 8003b22:	f001 f9cf 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b34:	e002      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b36:	bf00      	nop
 8003b38:	e000      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003b3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b3c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10a      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003b44:	4b4f      	ldr	r3, [pc, #316]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b46:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b48:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	4a4c      	ldr	r2, [pc, #304]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003b54:	430b      	orrs	r3, r1
 8003b56:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b58:	e003      	b.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003b62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b6a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003b6e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003b78:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	d053      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b86:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003b8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b8e:	d035      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003b90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003b94:	d82e      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003b96:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003b9a:	d031      	beq.n	8003c00 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003b9c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003ba0:	d828      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003ba2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ba6:	d01a      	beq.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003ba8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bac:	d822      	bhi.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bb6:	d007      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003bb8:	e01c      	b.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bba:	4b32      	ldr	r3, [pc, #200]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bbe:	4a31      	ldr	r2, [pc, #196]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bc6:	e01c      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bcc:	3308      	adds	r3, #8
 8003bce:	2100      	movs	r1, #0
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f001 f8c5 	bl	8004d60 <RCCEx_PLL2_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003bdc:	e011      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be2:	3328      	adds	r3, #40	@ 0x28
 8003be4:	2100      	movs	r1, #0
 8003be6:	4618      	mov	r0, r3
 8003be8:	f001 f96c 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003bec:	4603      	mov	r3, r0
 8003bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003bf2:	e006      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003bfc:	bf00      	nop
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c0e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c84 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c20:	e003      	b.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c32:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003c36:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003c40:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003c44:	460b      	mov	r3, r1
 8003c46:	4313      	orrs	r3, r2
 8003c48:	d056      	beq.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003c52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c56:	d038      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003c58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c5c:	d831      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c5e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c62:	d034      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003c64:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003c68:	d82b      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c6e:	d01d      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003c70:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c74:	d825      	bhi.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003c7a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c7e:	d00a      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003c80:	e01f      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003c82:	bf00      	nop
 8003c84:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c88:	4ba2      	ldr	r3, [pc, #648]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8c:	4aa1      	ldr	r2, [pc, #644]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003c94:	e01c      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f001 f85e 	bl	8004d60 <RCCEx_PLL2_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003caa:	e011      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	3328      	adds	r3, #40	@ 0x28
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f001 f905 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e006      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cc8:	e002      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003cce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d10b      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003cd8:	4b8e      	ldr	r3, [pc, #568]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cdc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003ce8:	4a8a      	ldr	r2, [pc, #552]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003cea:	430b      	orrs	r3, r1
 8003cec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cee:	e003      	b.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d00:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003d08:	2300      	movs	r3, #0
 8003d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003d0e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003d12:	460b      	mov	r3, r1
 8003d14:	4313      	orrs	r3, r2
 8003d16:	d03a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d1e:	2b30      	cmp	r3, #48	@ 0x30
 8003d20:	d01f      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003d22:	2b30      	cmp	r3, #48	@ 0x30
 8003d24:	d819      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d00c      	beq.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003d2a:	2b20      	cmp	r3, #32
 8003d2c:	d815      	bhi.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d019      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003d32:	2b10      	cmp	r3, #16
 8003d34:	d111      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d36:	4b77      	ldr	r3, [pc, #476]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3a:	4a76      	ldr	r2, [pc, #472]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2102      	movs	r1, #2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f001 f807 	bl	8004d60 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003d58:	e006      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d60:	e002      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d62:	bf00      	nop
 8003d64:	e000      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d10a      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003d70:	4b68      	ldr	r3, [pc, #416]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d74:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d7e:	4a65      	ldr	r2, [pc, #404]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003d9a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003da4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d051      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003db4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003db8:	d035      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003dba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003dbe:	d82e      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dc0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dc4:	d031      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003dc6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003dca:	d828      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd0:	d01a      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dd6:	d822      	bhi.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003ddc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003de0:	d007      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003de2:	e01c      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003de4:	4b4b      	ldr	r3, [pc, #300]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de8:	4a4a      	ldr	r2, [pc, #296]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003dea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003df0:	e01c      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df6:	3308      	adds	r3, #8
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 ffb0 	bl	8004d60 <RCCEx_PLL2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e06:	e011      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0c:	3328      	adds	r3, #40	@ 0x28
 8003e0e:	2100      	movs	r1, #0
 8003e10:	4618      	mov	r0, r3
 8003e12:	f001 f857 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003e16:	4603      	mov	r3, r0
 8003e18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e24:	e002      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003e2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d10a      	bne.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003e34:	4b37      	ldr	r3, [pc, #220]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e42:	4a34      	ldr	r2, [pc, #208]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003e44:	430b      	orrs	r3, r1
 8003e46:	6513      	str	r3, [r2, #80]	@ 0x50
 8003e48:	e003      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003e5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003e68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	d056      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e7c:	d033      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003e7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e82:	d82c      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e88:	d02f      	beq.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003e8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e8e:	d826      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e94:	d02b      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003e96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003e9a:	d820      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003e9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea0:	d012      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003ea2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ea6:	d81a      	bhi.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d022      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003eac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb0:	d115      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb6:	3308      	adds	r3, #8
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 ff50 	bl	8004d60 <RCCEx_PLL2_Config>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ec6:	e015      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	3328      	adds	r3, #40	@ 0x28
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 fff7 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00a      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ee4:	e006      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ee6:	bf00      	nop
 8003ee8:	e004      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eea:	bf00      	nop
 8003eec:	e002      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003eee:	bf00      	nop
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003ef2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10d      	bne.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003efc:	4b05      	ldr	r3, [pc, #20]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003efe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f0a:	4a02      	ldr	r2, [pc, #8]	@ (8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003f0c:	430b      	orrs	r3, r1
 8003f0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f10:	e006      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003f12:	bf00      	nop
 8003f14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f30:	2300      	movs	r3, #0
 8003f32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003f3a:	460b      	mov	r3, r1
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	d055      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003f48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f4c:	d033      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f52:	d82c      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f58:	d02f      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5e:	d826      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f64:	d02b      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003f66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f6a:	d820      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f70:	d012      	beq.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f76:	d81a      	bhi.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d022      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f80:	d115      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	3308      	adds	r3, #8
 8003f88:	2101      	movs	r1, #1
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fee8 	bl	8004d60 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003f96:	e015      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9c:	3328      	adds	r3, #40	@ 0x28
 8003f9e:	2101      	movs	r1, #1
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f000 ff8f 	bl	8004ec4 <RCCEx_PLL3_Config>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb4:	e006      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fb6:	bf00      	nop
 8003fb8:	e004      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fba:	bf00      	nop
 8003fbc:	e002      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fbe:	bf00      	nop
 8003fc0:	e000      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003fc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003fcc:	4ba3      	ldr	r3, [pc, #652]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003fdc:	4a9f      	ldr	r2, [pc, #636]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003fde:	430b      	orrs	r3, r1
 8003fe0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fe2:	e003      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ff8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004002:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004006:	460b      	mov	r3, r1
 8004008:	4313      	orrs	r3, r2
 800400a:	d037      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800400c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004012:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004016:	d00e      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004018:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800401c:	d816      	bhi.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800401e:	2b00      	cmp	r3, #0
 8004020:	d018      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8004022:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004026:	d111      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004028:	4b8c      	ldr	r3, [pc, #560]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800402c:	4a8b      	ldr	r2, [pc, #556]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800402e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004032:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004034:	e00f      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403a:	3308      	adds	r3, #8
 800403c:	2101      	movs	r1, #1
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fe8e 	bl	8004d60 <RCCEx_PLL2_Config>
 8004044:	4603      	mov	r3, r0
 8004046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800404a:	e004      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004052:	e000      	b.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8004054:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10a      	bne.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800405e:	4b7f      	ldr	r3, [pc, #508]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004060:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004062:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4a7b      	ldr	r2, [pc, #492]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6513      	str	r3, [r2, #80]	@ 0x50
 8004072:	e003      	b.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004078:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004084:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004088:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800408c:	2300      	movs	r3, #0
 800408e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004092:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8004096:	460b      	mov	r3, r1
 8004098:	4313      	orrs	r3, r2
 800409a:	d039      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d81c      	bhi.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80040a6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80040a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ac:	080040e9 	.word	0x080040e9
 80040b0:	080040bd 	.word	0x080040bd
 80040b4:	080040cb 	.word	0x080040cb
 80040b8:	080040e9 	.word	0x080040e9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040bc:	4b67      	ldr	r3, [pc, #412]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c0:	4a66      	ldr	r2, [pc, #408]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040c8:	e00f      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	3308      	adds	r3, #8
 80040d0:	2102      	movs	r1, #2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fe44 	bl	8004d60 <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80040de:	e004      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040e6:	e000      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80040e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80040f2:	4b5a      	ldr	r3, [pc, #360]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f6:	f023 0103 	bic.w	r1, r3, #3
 80040fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004100:	4a56      	ldr	r2, [pc, #344]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004102:	430b      	orrs	r3, r1
 8004104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004106:	e003      	b.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800410c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004118:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800411c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004126:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800412a:	460b      	mov	r3, r1
 800412c:	4313      	orrs	r3, r2
 800412e:	f000 809f 	beq.w	8004270 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004132:	4b4b      	ldr	r3, [pc, #300]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a4a      	ldr	r2, [pc, #296]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800413c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800413e:	f7fd fc29 	bl	8001994 <HAL_GetTick>
 8004142:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004146:	e00b      	b.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004148:	f7fd fc24 	bl	8001994 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b64      	cmp	r3, #100	@ 0x64
 8004156:	d903      	bls.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800415e:	e005      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004160:	4b3f      	ldr	r3, [pc, #252]	@ (8004260 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ed      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800416c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004170:	2b00      	cmp	r3, #0
 8004172:	d179      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004174:	4b39      	ldr	r3, [pc, #228]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004176:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004180:	4053      	eors	r3, r2
 8004182:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004186:	2b00      	cmp	r3, #0
 8004188:	d015      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800418a:	4b34      	ldr	r3, [pc, #208]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800418c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800418e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004192:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	4b31      	ldr	r3, [pc, #196]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800419a:	4a30      	ldr	r2, [pc, #192]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800419c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041a0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041a2:	4b2e      	ldr	r3, [pc, #184]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041a6:	4a2d      	ldr	r2, [pc, #180]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041ac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80041ae:	4a2b      	ldr	r2, [pc, #172]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80041b4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80041be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041c2:	d118      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd fbe6 	bl	8001994 <HAL_GetTick>
 80041c8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041cc:	e00d      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ce:	f7fd fbe1 	bl	8001994 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80041d8:	1ad2      	subs	r2, r2, r3
 80041da:	f241 3388 	movw	r3, #5000	@ 0x1388
 80041de:	429a      	cmp	r2, r3
 80041e0:	d903      	bls.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80041e8:	e005      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ea:	4b1c      	ldr	r3, [pc, #112]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80041ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d0eb      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d129      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800420e:	d10e      	bne.n	800422e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8004210:	4b12      	ldr	r3, [pc, #72]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004220:	091a      	lsrs	r2, r3, #4
 8004222:	4b10      	ldr	r3, [pc, #64]	@ (8004264 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8004224:	4013      	ands	r3, r2
 8004226:	4a0d      	ldr	r2, [pc, #52]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004228:	430b      	orrs	r3, r1
 800422a:	6113      	str	r3, [r2, #16]
 800422c:	e005      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	4a0a      	ldr	r2, [pc, #40]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004234:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004238:	6113      	str	r3, [r2, #16]
 800423a:	4b08      	ldr	r3, [pc, #32]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800423c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	4a04      	ldr	r2, [pc, #16]	@ (800425c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800424c:	430b      	orrs	r3, r1
 800424e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004250:	e00e      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800425a:	e009      	b.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800425c:	58024400 	.word	0x58024400
 8004260:	58024800 	.word	0x58024800
 8004264:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004268:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800426c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004278:	f002 0301 	and.w	r3, r2, #1
 800427c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004286:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800428a:	460b      	mov	r3, r1
 800428c:	4313      	orrs	r3, r2
 800428e:	f000 8089 	beq.w	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004298:	2b28      	cmp	r3, #40	@ 0x28
 800429a:	d86b      	bhi.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800429c:	a201      	add	r2, pc, #4	@ (adr r2, 80042a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800429e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042a2:	bf00      	nop
 80042a4:	0800437d 	.word	0x0800437d
 80042a8:	08004375 	.word	0x08004375
 80042ac:	08004375 	.word	0x08004375
 80042b0:	08004375 	.word	0x08004375
 80042b4:	08004375 	.word	0x08004375
 80042b8:	08004375 	.word	0x08004375
 80042bc:	08004375 	.word	0x08004375
 80042c0:	08004375 	.word	0x08004375
 80042c4:	08004349 	.word	0x08004349
 80042c8:	08004375 	.word	0x08004375
 80042cc:	08004375 	.word	0x08004375
 80042d0:	08004375 	.word	0x08004375
 80042d4:	08004375 	.word	0x08004375
 80042d8:	08004375 	.word	0x08004375
 80042dc:	08004375 	.word	0x08004375
 80042e0:	08004375 	.word	0x08004375
 80042e4:	0800435f 	.word	0x0800435f
 80042e8:	08004375 	.word	0x08004375
 80042ec:	08004375 	.word	0x08004375
 80042f0:	08004375 	.word	0x08004375
 80042f4:	08004375 	.word	0x08004375
 80042f8:	08004375 	.word	0x08004375
 80042fc:	08004375 	.word	0x08004375
 8004300:	08004375 	.word	0x08004375
 8004304:	0800437d 	.word	0x0800437d
 8004308:	08004375 	.word	0x08004375
 800430c:	08004375 	.word	0x08004375
 8004310:	08004375 	.word	0x08004375
 8004314:	08004375 	.word	0x08004375
 8004318:	08004375 	.word	0x08004375
 800431c:	08004375 	.word	0x08004375
 8004320:	08004375 	.word	0x08004375
 8004324:	0800437d 	.word	0x0800437d
 8004328:	08004375 	.word	0x08004375
 800432c:	08004375 	.word	0x08004375
 8004330:	08004375 	.word	0x08004375
 8004334:	08004375 	.word	0x08004375
 8004338:	08004375 	.word	0x08004375
 800433c:	08004375 	.word	0x08004375
 8004340:	08004375 	.word	0x08004375
 8004344:	0800437d 	.word	0x0800437d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	3308      	adds	r3, #8
 800434e:	2101      	movs	r1, #1
 8004350:	4618      	mov	r0, r3
 8004352:	f000 fd05 	bl	8004d60 <RCCEx_PLL2_Config>
 8004356:	4603      	mov	r3, r0
 8004358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800435c:	e00f      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	3328      	adds	r3, #40	@ 0x28
 8004364:	2101      	movs	r1, #1
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fdac 	bl	8004ec4 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004372:	e004      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437a:	e000      	b.n	800437e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004382:	2b00      	cmp	r3, #0
 8004384:	d10a      	bne.n	800439c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004386:	4bbf      	ldr	r3, [pc, #764]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004392:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004394:	4abb      	ldr	r2, [pc, #748]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004396:	430b      	orrs	r3, r1
 8004398:	6553      	str	r3, [r2, #84]	@ 0x54
 800439a:	e003      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80043a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ac:	f002 0302 	and.w	r3, r2, #2
 80043b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043b4:	2300      	movs	r3, #0
 80043b6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80043ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80043be:	460b      	mov	r3, r1
 80043c0:	4313      	orrs	r3, r2
 80043c2:	d041      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80043c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d824      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80043ce:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	08004421 	.word	0x08004421
 80043d8:	080043ed 	.word	0x080043ed
 80043dc:	08004403 	.word	0x08004403
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004421 	.word	0x08004421
 80043e8:	08004421 	.word	0x08004421
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	3308      	adds	r3, #8
 80043f2:	2101      	movs	r1, #1
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fcb3 	bl	8004d60 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd5a 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800442a:	4b96      	ldr	r3, [pc, #600]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800442c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800442e:	f023 0107 	bic.w	r1, r3, #7
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004438:	4a92      	ldr	r2, [pc, #584]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800443a:	430b      	orrs	r3, r1
 800443c:	6553      	str	r3, [r2, #84]	@ 0x54
 800443e:	e003      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004444:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f002 0304 	and.w	r3, r2, #4
 8004454:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004458:	2300      	movs	r3, #0
 800445a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800445e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d044      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004470:	2b05      	cmp	r3, #5
 8004472:	d825      	bhi.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004474:	a201      	add	r2, pc, #4	@ (adr r2, 800447c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800447a:	bf00      	nop
 800447c:	080044c9 	.word	0x080044c9
 8004480:	08004495 	.word	0x08004495
 8004484:	080044ab 	.word	0x080044ab
 8004488:	080044c9 	.word	0x080044c9
 800448c:	080044c9 	.word	0x080044c9
 8004490:	080044c9 	.word	0x080044c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004498:	3308      	adds	r3, #8
 800449a:	2101      	movs	r1, #1
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fc5f 	bl	8004d60 <RCCEx_PLL2_Config>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044a8:	e00f      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2101      	movs	r1, #1
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fd06 	bl	8004ec4 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80044be:	e004      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044c6:	e000      	b.n	80044ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80044c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044d2:	4b6c      	ldr	r3, [pc, #432]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d6:	f023 0107 	bic.w	r1, r3, #7
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80044e2:	4a68      	ldr	r2, [pc, #416]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044e8:	e003      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044fa:	f002 0320 	and.w	r3, r2, #32
 80044fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004502:	2300      	movs	r3, #0
 8004504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800450c:	460b      	mov	r3, r1
 800450e:	4313      	orrs	r3, r2
 8004510:	d055      	beq.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800451a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800451e:	d033      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004524:	d82c      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452a:	d02f      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800452c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004530:	d826      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004532:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004536:	d02b      	beq.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004538:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800453c:	d820      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800453e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004542:	d012      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004544:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004548:	d81a      	bhi.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d022      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800454e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004552:	d115      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	3308      	adds	r3, #8
 800455a:	2100      	movs	r1, #0
 800455c:	4618      	mov	r0, r3
 800455e:	f000 fbff 	bl	8004d60 <RCCEx_PLL2_Config>
 8004562:	4603      	mov	r3, r0
 8004564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004568:	e015      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800456a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800456e:	3328      	adds	r3, #40	@ 0x28
 8004570:	2102      	movs	r1, #2
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fca6 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004578:	4603      	mov	r3, r0
 800457a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800457e:	e00a      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004586:	e006      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004588:	bf00      	nop
 800458a:	e004      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800458c:	bf00      	nop
 800458e:	e002      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004590:	bf00      	nop
 8004592:	e000      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004594:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800459e:	4b39      	ldr	r3, [pc, #228]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80045a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80045ae:	4a35      	ldr	r2, [pc, #212]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80045b0:	430b      	orrs	r3, r1
 80045b2:	6553      	str	r3, [r2, #84]	@ 0x54
 80045b4:	e003      	b.n	80045be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80045ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80045d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80045d8:	460b      	mov	r3, r1
 80045da:	4313      	orrs	r3, r2
 80045dc:	d058      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80045e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045ea:	d033      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80045ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80045f0:	d82c      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f6:	d02f      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80045f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045fc:	d826      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80045fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004602:	d02b      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004604:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004608:	d820      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800460a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800460e:	d012      	beq.n	8004636 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004610:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004614:	d81a      	bhi.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d022      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800461e:	d115      	bne.n	800464c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004624:	3308      	adds	r3, #8
 8004626:	2100      	movs	r1, #0
 8004628:	4618      	mov	r0, r3
 800462a:	f000 fb99 	bl	8004d60 <RCCEx_PLL2_Config>
 800462e:	4603      	mov	r3, r0
 8004630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004634:	e015      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463a:	3328      	adds	r3, #40	@ 0x28
 800463c:	2102      	movs	r1, #2
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fc40 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800464a:	e00a      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004652:	e006      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004654:	bf00      	nop
 8004656:	e004      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004658:	bf00      	nop
 800465a:	e002      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800465c:	bf00      	nop
 800465e:	e000      	b.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004660:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10e      	bne.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800466a:	4b06      	ldr	r3, [pc, #24]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800466e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004672:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800467a:	4a02      	ldr	r2, [pc, #8]	@ (8004684 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800467c:	430b      	orrs	r3, r1
 800467e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004680:	e006      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004682:	bf00      	nop
 8004684:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800468c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800469c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046a0:	2300      	movs	r3, #0
 80046a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d055      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80046b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80046b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046bc:	d033      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80046be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80046c2:	d82c      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046c8:	d02f      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80046ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046ce:	d826      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046d4:	d02b      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80046d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80046da:	d820      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e0:	d012      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80046e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80046e6:	d81a      	bhi.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d022      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80046ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f0:	d115      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f6:	3308      	adds	r3, #8
 80046f8:	2100      	movs	r1, #0
 80046fa:	4618      	mov	r0, r3
 80046fc:	f000 fb30 	bl	8004d60 <RCCEx_PLL2_Config>
 8004700:	4603      	mov	r3, r0
 8004702:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004706:	e015      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470c:	3328      	adds	r3, #40	@ 0x28
 800470e:	2102      	movs	r1, #2
 8004710:	4618      	mov	r0, r3
 8004712:	f000 fbd7 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004716:	4603      	mov	r3, r0
 8004718:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800471c:	e00a      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004726:	bf00      	nop
 8004728:	e004      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800472a:	bf00      	nop
 800472c:	e002      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800472e:	bf00      	nop
 8004730:	e000      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004732:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004734:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800473c:	4ba1      	ldr	r3, [pc, #644]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004740:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004748:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800474c:	4a9d      	ldr	r2, [pc, #628]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800474e:	430b      	orrs	r3, r1
 8004750:	6593      	str	r3, [r2, #88]	@ 0x58
 8004752:	e003      	b.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004754:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004758:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800475c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004764:	f002 0308 	and.w	r3, r2, #8
 8004768:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800476c:	2300      	movs	r3, #0
 800476e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004772:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004776:	460b      	mov	r3, r1
 8004778:	4313      	orrs	r3, r2
 800477a:	d01e      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800477c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004780:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004788:	d10c      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800478a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478e:	3328      	adds	r3, #40	@ 0x28
 8004790:	2102      	movs	r1, #2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fb96 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80047a4:	4b87      	ldr	r3, [pc, #540]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047b4:	4a83      	ldr	r2, [pc, #524]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f002 0310 	and.w	r3, r2, #16
 80047c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80047ca:	2300      	movs	r3, #0
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80047d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80047d4:	460b      	mov	r3, r1
 80047d6:	4313      	orrs	r3, r2
 80047d8:	d01e      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80047e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047e6:	d10c      	bne.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80047e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ec:	3328      	adds	r3, #40	@ 0x28
 80047ee:	2102      	movs	r1, #2
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 fb67 	bl	8004ec4 <RCCEx_PLL3_Config>
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d002      	beq.n	8004802 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004802:	4b70      	ldr	r3, [pc, #448]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004804:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004806:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004812:	4a6c      	ldr	r2, [pc, #432]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004814:	430b      	orrs	r3, r1
 8004816:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004820:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004824:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004828:	2300      	movs	r3, #0
 800482a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800482e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004832:	460b      	mov	r3, r1
 8004834:	4313      	orrs	r3, r2
 8004836:	d03e      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004840:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004844:	d022      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004846:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800484a:	d81b      	bhi.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004854:	d00b      	beq.n	800486e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004856:	e015      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485c:	3308      	adds	r3, #8
 800485e:	2100      	movs	r1, #0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 fa7d 	bl	8004d60 <RCCEx_PLL2_Config>
 8004866:	4603      	mov	r3, r0
 8004868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800486c:	e00f      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800486e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004872:	3328      	adds	r3, #40	@ 0x28
 8004874:	2102      	movs	r1, #2
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fb24 	bl	8004ec4 <RCCEx_PLL3_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004882:	e004      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800488a:	e000      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800488c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	2b00      	cmp	r3, #0
 8004894:	d10b      	bne.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004896:	4b4b      	ldr	r3, [pc, #300]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800489a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800489e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048a6:	4a47      	ldr	r2, [pc, #284]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048a8:	430b      	orrs	r3, r1
 80048aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80048ac:	e003      	b.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80048b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80048c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048c4:	2300      	movs	r3, #0
 80048c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80048c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80048cc:	460b      	mov	r3, r1
 80048ce:	4313      	orrs	r3, r2
 80048d0:	d03b      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80048d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048de:	d01f      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80048e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80048e4:	d818      	bhi.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80048e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ea:	d003      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80048ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80048f0:	d007      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80048f2:	e011      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048f4:	4b33      	ldr	r3, [pc, #204]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f8:	4a32      	ldr	r2, [pc, #200]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80048fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004900:	e00f      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004906:	3328      	adds	r3, #40	@ 0x28
 8004908:	2101      	movs	r1, #1
 800490a:	4618      	mov	r0, r3
 800490c:	f000 fada 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004910:	4603      	mov	r3, r0
 8004912:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004916:	e004      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800491e:	e000      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10b      	bne.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800492a:	4b26      	ldr	r3, [pc, #152]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493a:	4a22      	ldr	r2, [pc, #136]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800493c:	430b      	orrs	r3, r1
 800493e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004940:	e003      	b.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800494a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800494e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004952:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004956:	673b      	str	r3, [r7, #112]	@ 0x70
 8004958:	2300      	movs	r3, #0
 800495a:	677b      	str	r3, [r7, #116]	@ 0x74
 800495c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004960:	460b      	mov	r3, r1
 8004962:	4313      	orrs	r3, r2
 8004964:	d034      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800496a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496c:	2b00      	cmp	r3, #0
 800496e:	d003      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004974:	d007      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004976:	e011      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004978:	4b12      	ldr	r3, [pc, #72]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497c:	4a11      	ldr	r2, [pc, #68]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800497e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004984:	e00e      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800498a:	3308      	adds	r3, #8
 800498c:	2102      	movs	r1, #2
 800498e:	4618      	mov	r0, r3
 8004990:	f000 f9e6 	bl	8004d60 <RCCEx_PLL2_Config>
 8004994:	4603      	mov	r3, r0
 8004996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800499a:	e003      	b.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80049a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10d      	bne.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049ac:	4b05      	ldr	r3, [pc, #20]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80049b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ba:	4a02      	ldr	r2, [pc, #8]	@ (80049c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80049bc:	430b      	orrs	r3, r1
 80049be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80049c0:	e006      	b.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80049dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80049de:	2300      	movs	r3, #0
 80049e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80049e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80049e6:	460b      	mov	r3, r1
 80049e8:	4313      	orrs	r3, r2
 80049ea:	d00c      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80049ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049f0:	3328      	adds	r3, #40	@ 0x28
 80049f2:	2102      	movs	r1, #2
 80049f4:	4618      	mov	r0, r3
 80049f6:	f000 fa65 	bl	8004ec4 <RCCEx_PLL3_Config>
 80049fa:	4603      	mov	r3, r0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004a12:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a14:	2300      	movs	r3, #0
 8004a16:	667b      	str	r3, [r7, #100]	@ 0x64
 8004a18:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	d038      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a2e:	d018      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004a30:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a34:	d811      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a36:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a3a:	d014      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004a3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004a40:	d80b      	bhi.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d011      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004a46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a4a:	d106      	bne.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a4c:	4bc3      	ldr	r3, [pc, #780]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a50:	4ac2      	ldr	r2, [pc, #776]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004a58:	e008      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a60:	e004      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a62:	bf00      	nop
 8004a64:	e002      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a66:	bf00      	nop
 8004a68:	e000      	b.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004a6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d10b      	bne.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a74:	4bb9      	ldr	r3, [pc, #740]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a78:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a80:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a84:	4ab5      	ldr	r2, [pc, #724]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004a86:	430b      	orrs	r3, r1
 8004a88:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a8a:	e003      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004aa0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004aa6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004aaa:	460b      	mov	r3, r1
 8004aac:	4313      	orrs	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ab0:	4baa      	ldr	r3, [pc, #680]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ab4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	4aa7      	ldr	r2, [pc, #668]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ac0:	430b      	orrs	r3, r1
 8004ac2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004acc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004ad0:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ad6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004ada:	460b      	mov	r3, r1
 8004adc:	4313      	orrs	r3, r2
 8004ade:	d00a      	beq.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004aec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004af0:	4a9a      	ldr	r2, [pc, #616]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004afe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004b02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b04:	2300      	movs	r3, #0
 8004b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b08:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	d009      	beq.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b12:	4b92      	ldr	r3, [pc, #584]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b16:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b20:	4a8e      	ldr	r2, [pc, #568]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b22:	430b      	orrs	r3, r1
 8004b24:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b34:	2300      	movs	r3, #0
 8004b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b38:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	d00e      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b42:	4b86      	ldr	r3, [pc, #536]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b44:	691b      	ldr	r3, [r3, #16]
 8004b46:	4a85      	ldr	r2, [pc, #532]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004b4c:	6113      	str	r3, [r2, #16]
 8004b4e:	4b83      	ldr	r3, [pc, #524]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b50:	6919      	ldr	r1, [r3, #16]
 8004b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b56:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004b5a:	4a80      	ldr	r2, [pc, #512]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b6e:	2300      	movs	r3, #0
 8004b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b72:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004b76:	460b      	mov	r3, r1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	d009      	beq.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b7c:	4b77      	ldr	r3, [pc, #476]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b80:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b8a:	4a74      	ldr	r2, [pc, #464]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004b8c:	430b      	orrs	r3, r1
 8004b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b98:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004b9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ba2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	d00a      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004bac:	4b6b      	ldr	r3, [pc, #428]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bb0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bbc:	4a67      	ldr	r2, [pc, #412]	@ (8004d5c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bca:	2100      	movs	r1, #0
 8004bcc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bd4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	d011      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004bde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004be2:	3308      	adds	r3, #8
 8004be4:	2100      	movs	r1, #0
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f8ba 	bl	8004d60 <RCCEx_PLL2_Config>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c0a:	2100      	movs	r1, #0
 8004c0c:	6239      	str	r1, [r7, #32]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c14:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	d011      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c22:	3308      	adds	r3, #8
 8004c24:	2101      	movs	r1, #1
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f89a 	bl	8004d60 <RCCEx_PLL2_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4a:	2100      	movs	r1, #0
 8004c4c:	61b9      	str	r1, [r7, #24]
 8004c4e:	f003 0304 	and.w	r3, r3, #4
 8004c52:	61fb      	str	r3, [r7, #28]
 8004c54:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004c58:	460b      	mov	r3, r1
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	d011      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c62:	3308      	adds	r3, #8
 8004c64:	2102      	movs	r1, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 f87a 	bl	8004d60 <RCCEx_PLL2_Config>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	6139      	str	r1, [r7, #16]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	d011      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca2:	3328      	adds	r3, #40	@ 0x28
 8004ca4:	2100      	movs	r1, #0
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 f90c 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d003      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cca:	2100      	movs	r1, #0
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	f003 0310 	and.w	r3, r3, #16
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004cd8:	460b      	mov	r3, r1
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	d011      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ce2:	3328      	adds	r3, #40	@ 0x28
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 f8ec 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004cfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	6039      	str	r1, [r7, #0]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	607b      	str	r3, [r7, #4]
 8004d14:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004d18:	460b      	mov	r3, r1
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	d011      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d22:	3328      	adds	r3, #40	@ 0x28
 8004d24:	2102      	movs	r1, #2
 8004d26:	4618      	mov	r0, r3
 8004d28:	f000 f8cc 	bl	8004ec4 <RCCEx_PLL3_Config>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004d42:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d5c:	58024400 	.word	0x58024400

08004d60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d6e:	4b53      	ldr	r3, [pc, #332]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	2b03      	cmp	r3, #3
 8004d78:	d101      	bne.n	8004d7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e099      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a4e      	ldr	r2, [pc, #312]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004d84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8a:	f7fc fe03 	bl	8001994 <HAL_GetTick>
 8004d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d90:	e008      	b.n	8004da4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d92:	f7fc fdff 	bl	8001994 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	d901      	bls.n	8004da4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e086      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004da4:	4b45      	ldr	r3, [pc, #276]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1f0      	bne.n	8004d92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	031b      	lsls	r3, r3, #12
 8004dbe:	493f      	ldr	r1, [pc, #252]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	025b      	lsls	r3, r3, #9
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	041b      	lsls	r3, r3, #16
 8004de2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004de6:	431a      	orrs	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	691b      	ldr	r3, [r3, #16]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	061b      	lsls	r3, r3, #24
 8004df0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004df4:	4931      	ldr	r1, [pc, #196]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004dfa:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	695b      	ldr	r3, [r3, #20]
 8004e06:	492d      	ldr	r1, [pc, #180]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e10:	f023 0220 	bic.w	r2, r3, #32
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	4928      	ldr	r1, [pc, #160]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e1e:	4b27      	ldr	r3, [pc, #156]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e22:	4a26      	ldr	r2, [pc, #152]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e2e:	4b24      	ldr	r3, [pc, #144]	@ (8004ec0 <RCCEx_PLL2_Config+0x160>)
 8004e30:	4013      	ands	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	69d2      	ldr	r2, [r2, #28]
 8004e36:	00d2      	lsls	r2, r2, #3
 8004e38:	4920      	ldr	r1, [pc, #128]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e42:	4a1e      	ldr	r2, [pc, #120]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e44:	f043 0310 	orr.w	r3, r3, #16
 8004e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d106      	bne.n	8004e5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004e50:	4b1a      	ldr	r3, [pc, #104]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e54:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004e5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e5c:	e00f      	b.n	8004e7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004e64:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	4a14      	ldr	r2, [pc, #80]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e70:	e005      	b.n	8004e7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	4a11      	ldr	r2, [pc, #68]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a0e      	ldr	r2, [pc, #56]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004e84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8a:	f7fc fd83 	bl	8001994 <HAL_GetTick>
 8004e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e90:	e008      	b.n	8004ea4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e92:	f7fc fd7f 	bl	8001994 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d901      	bls.n	8004ea4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e006      	b.n	8004eb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ea4:	4b05      	ldr	r3, [pc, #20]	@ (8004ebc <RCCEx_PLL2_Config+0x15c>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d0f0      	beq.n	8004e92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	58024400 	.word	0x58024400
 8004ec0:	ffff0007 	.word	0xffff0007

08004ec4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ed2:	4b53      	ldr	r3, [pc, #332]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ed6:	f003 0303 	and.w	r3, r3, #3
 8004eda:	2b03      	cmp	r3, #3
 8004edc:	d101      	bne.n	8004ee2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e099      	b.n	8005016 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a4e      	ldr	r2, [pc, #312]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eee:	f7fc fd51 	bl	8001994 <HAL_GetTick>
 8004ef2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ef6:	f7fc fd4d 	bl	8001994 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e086      	b.n	8005016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f08:	4b45      	ldr	r3, [pc, #276]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f14:	4b42      	ldr	r3, [pc, #264]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	051b      	lsls	r3, r3, #20
 8004f22:	493f      	ldr	r1, [pc, #252]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	025b      	lsls	r3, r3, #9
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	431a      	orrs	r2, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	3b01      	subs	r3, #1
 8004f44:	041b      	lsls	r3, r3, #16
 8004f46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f58:	4931      	ldr	r1, [pc, #196]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004f5e:	4b30      	ldr	r3, [pc, #192]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	492d      	ldr	r1, [pc, #180]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f70:	4b2b      	ldr	r3, [pc, #172]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	699b      	ldr	r3, [r3, #24]
 8004f7c:	4928      	ldr	r1, [pc, #160]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f82:	4b27      	ldr	r3, [pc, #156]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a26      	ldr	r2, [pc, #152]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f8e:	4b24      	ldr	r3, [pc, #144]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f92:	4b24      	ldr	r3, [pc, #144]	@ (8005024 <RCCEx_PLL3_Config+0x160>)
 8004f94:	4013      	ands	r3, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	69d2      	ldr	r2, [r2, #28]
 8004f9a:	00d2      	lsls	r2, r2, #3
 8004f9c:	4920      	ldr	r1, [pc, #128]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d106      	bne.n	8004fc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb8:	4a19      	ldr	r2, [pc, #100]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004fbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fc0:	e00f      	b.n	8004fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d106      	bne.n	8004fd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004fc8:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	4a14      	ldr	r2, [pc, #80]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004fd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fd4:	e005      	b.n	8004fe2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004fd6:	4b12      	ldr	r3, [pc, #72]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fda:	4a11      	ldr	r2, [pc, #68]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a0e      	ldr	r2, [pc, #56]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fee:	f7fc fcd1 	bl	8001994 <HAL_GetTick>
 8004ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ff4:	e008      	b.n	8005008 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ff6:	f7fc fccd 	bl	8001994 <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e006      	b.n	8005016 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005008:	4b05      	ldr	r3, [pc, #20]	@ (8005020 <RCCEx_PLL3_Config+0x15c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d0f0      	beq.n	8004ff6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005014:	7bfb      	ldrb	r3, [r7, #15]
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	58024400 	.word	0x58024400
 8005024:	ffff0007 	.word	0xffff0007

08005028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	e049      	b.n	80050ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2b00      	cmp	r3, #0
 8005044:	d106      	bne.n	8005054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7fc fb9e 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	4619      	mov	r1, r3
 8005066:	4610      	mov	r0, r2
 8005068:	f000 fe64 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2201      	movs	r2, #1
 8005070:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}
	...

080050d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050d8:	b480      	push	{r7}
 80050da:	b085      	sub	sp, #20
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d001      	beq.n	80050f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e04c      	b.n	800518a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a26      	ldr	r2, [pc, #152]	@ (8005198 <HAL_TIM_Base_Start+0xc0>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d022      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510a:	d01d      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a22      	ldr	r2, [pc, #136]	@ (800519c <HAL_TIM_Base_Start+0xc4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d018      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a21      	ldr	r2, [pc, #132]	@ (80051a0 <HAL_TIM_Base_Start+0xc8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d013      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a1f      	ldr	r2, [pc, #124]	@ (80051a4 <HAL_TIM_Base_Start+0xcc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d00e      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <HAL_TIM_Base_Start+0xd0>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d009      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1c      	ldr	r2, [pc, #112]	@ (80051ac <HAL_TIM_Base_Start+0xd4>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d004      	beq.n	8005148 <HAL_TIM_Base_Start+0x70>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a1b      	ldr	r2, [pc, #108]	@ (80051b0 <HAL_TIM_Base_Start+0xd8>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d115      	bne.n	8005174 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b19      	ldr	r3, [pc, #100]	@ (80051b4 <HAL_TIM_Base_Start+0xdc>)
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b06      	cmp	r3, #6
 8005158:	d015      	beq.n	8005186 <HAL_TIM_Base_Start+0xae>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005160:	d011      	beq.n	8005186 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f042 0201 	orr.w	r2, r2, #1
 8005170:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005172:	e008      	b.n	8005186 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	601a      	str	r2, [r3, #0]
 8005184:	e000      	b.n	8005188 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005186:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	40010000 	.word	0x40010000
 800519c:	40000400 	.word	0x40000400
 80051a0:	40000800 	.word	0x40000800
 80051a4:	40000c00 	.word	0x40000c00
 80051a8:	40010400 	.word	0x40010400
 80051ac:	40001800 	.word	0x40001800
 80051b0:	40014000 	.word	0x40014000
 80051b4:	00010007 	.word	0x00010007

080051b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e049      	b.n	800525e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d106      	bne.n	80051e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 f841 	bl	8005266 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2202      	movs	r2, #2
 80051e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4619      	mov	r1, r3
 80051f6:	4610      	mov	r0, r2
 80051f8:	f000 fd9c 	bl	8005d34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2201      	movs	r2, #1
 8005240:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005266:	b480      	push	{r7}
 8005268:	b083      	sub	sp, #12
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800526e:	bf00      	nop
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
	...

0800527c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d104      	bne.n	8005296 <HAL_TIM_IC_Start+0x1a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005292:	b2db      	uxtb	r3, r3
 8005294:	e023      	b.n	80052de <HAL_TIM_IC_Start+0x62>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b04      	cmp	r3, #4
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_IC_Start+0x2a>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	e01b      	b.n	80052de <HAL_TIM_IC_Start+0x62>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_IC_Start+0x3a>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	e013      	b.n	80052de <HAL_TIM_IC_Start+0x62>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_IC_Start+0x4a>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	e00b      	b.n	80052de <HAL_TIM_IC_Start+0x62>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d104      	bne.n	80052d6 <HAL_TIM_IC_Start+0x5a>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	e003      	b.n	80052de <HAL_TIM_IC_Start+0x62>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d104      	bne.n	80052f0 <HAL_TIM_IC_Start+0x74>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e013      	b.n	8005318 <HAL_TIM_IC_Start+0x9c>
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	2b04      	cmp	r3, #4
 80052f4:	d104      	bne.n	8005300 <HAL_TIM_IC_Start+0x84>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	e00b      	b.n	8005318 <HAL_TIM_IC_Start+0x9c>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b08      	cmp	r3, #8
 8005304:	d104      	bne.n	8005310 <HAL_TIM_IC_Start+0x94>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800530c:	b2db      	uxtb	r3, r3
 800530e:	e003      	b.n	8005318 <HAL_TIM_IC_Start+0x9c>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005316:	b2db      	uxtb	r3, r3
 8005318:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800531a:	7bfb      	ldrb	r3, [r7, #15]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d102      	bne.n	8005326 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005320:	7bbb      	ldrb	r3, [r7, #14]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d001      	beq.n	800532a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e097      	b.n	800545a <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d104      	bne.n	800533a <HAL_TIM_IC_Start+0xbe>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005338:	e023      	b.n	8005382 <HAL_TIM_IC_Start+0x106>
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	2b04      	cmp	r3, #4
 800533e:	d104      	bne.n	800534a <HAL_TIM_IC_Start+0xce>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005348:	e01b      	b.n	8005382 <HAL_TIM_IC_Start+0x106>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b08      	cmp	r3, #8
 800534e:	d104      	bne.n	800535a <HAL_TIM_IC_Start+0xde>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2202      	movs	r2, #2
 8005354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005358:	e013      	b.n	8005382 <HAL_TIM_IC_Start+0x106>
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	2b0c      	cmp	r3, #12
 800535e:	d104      	bne.n	800536a <HAL_TIM_IC_Start+0xee>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2202      	movs	r2, #2
 8005364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005368:	e00b      	b.n	8005382 <HAL_TIM_IC_Start+0x106>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b10      	cmp	r3, #16
 800536e:	d104      	bne.n	800537a <HAL_TIM_IC_Start+0xfe>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005378:	e003      	b.n	8005382 <HAL_TIM_IC_Start+0x106>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d104      	bne.n	8005392 <HAL_TIM_IC_Start+0x116>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005390:	e013      	b.n	80053ba <HAL_TIM_IC_Start+0x13e>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	2b04      	cmp	r3, #4
 8005396:	d104      	bne.n	80053a2 <HAL_TIM_IC_Start+0x126>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a0:	e00b      	b.n	80053ba <HAL_TIM_IC_Start+0x13e>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b08      	cmp	r3, #8
 80053a6:	d104      	bne.n	80053b2 <HAL_TIM_IC_Start+0x136>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053b0:	e003      	b.n	80053ba <HAL_TIM_IC_Start+0x13e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2202      	movs	r2, #2
 80053b6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2201      	movs	r2, #1
 80053c0:	6839      	ldr	r1, [r7, #0]
 80053c2:	4618      	mov	r0, r3
 80053c4:	f000 ff24 	bl	8006210 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a25      	ldr	r2, [pc, #148]	@ (8005464 <HAL_TIM_IC_Start+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d022      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053da:	d01d      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a21      	ldr	r2, [pc, #132]	@ (8005468 <HAL_TIM_IC_Start+0x1ec>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d018      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a20      	ldr	r2, [pc, #128]	@ (800546c <HAL_TIM_IC_Start+0x1f0>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d013      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a1e      	ldr	r2, [pc, #120]	@ (8005470 <HAL_TIM_IC_Start+0x1f4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d00e      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a1d      	ldr	r2, [pc, #116]	@ (8005474 <HAL_TIM_IC_Start+0x1f8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d009      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1b      	ldr	r2, [pc, #108]	@ (8005478 <HAL_TIM_IC_Start+0x1fc>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d004      	beq.n	8005418 <HAL_TIM_IC_Start+0x19c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a1a      	ldr	r2, [pc, #104]	@ (800547c <HAL_TIM_IC_Start+0x200>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d115      	bne.n	8005444 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	4b18      	ldr	r3, [pc, #96]	@ (8005480 <HAL_TIM_IC_Start+0x204>)
 8005420:	4013      	ands	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2b06      	cmp	r3, #6
 8005428:	d015      	beq.n	8005456 <HAL_TIM_IC_Start+0x1da>
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005430:	d011      	beq.n	8005456 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0201 	orr.w	r2, r2, #1
 8005440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005442:	e008      	b.n	8005456 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]
 8005454:	e000      	b.n	8005458 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	3710      	adds	r7, #16
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40000400 	.word	0x40000400
 800546c:	40000800 	.word	0x40000800
 8005470:	40000c00 	.word	0x40000c00
 8005474:	40010400 	.word	0x40010400
 8005478:	40001800 	.word	0x40001800
 800547c:	40014000 	.word	0x40014000
 8005480:	00010007 	.word	0x00010007

08005484 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d104      	bne.n	80054a2 <HAL_TIM_IC_Start_IT+0x1e>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	e023      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x66>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b04      	cmp	r3, #4
 80054a6:	d104      	bne.n	80054b2 <HAL_TIM_IC_Start_IT+0x2e>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	e01b      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x66>
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	2b08      	cmp	r3, #8
 80054b6:	d104      	bne.n	80054c2 <HAL_TIM_IC_Start_IT+0x3e>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e013      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x66>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b0c      	cmp	r3, #12
 80054c6:	d104      	bne.n	80054d2 <HAL_TIM_IC_Start_IT+0x4e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	e00b      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x66>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b10      	cmp	r3, #16
 80054d6:	d104      	bne.n	80054e2 <HAL_TIM_IC_Start_IT+0x5e>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	e003      	b.n	80054ea <HAL_TIM_IC_Start_IT+0x66>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d104      	bne.n	80054fc <HAL_TIM_IC_Start_IT+0x78>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	e013      	b.n	8005524 <HAL_TIM_IC_Start_IT+0xa0>
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d104      	bne.n	800550c <HAL_TIM_IC_Start_IT+0x88>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005508:	b2db      	uxtb	r3, r3
 800550a:	e00b      	b.n	8005524 <HAL_TIM_IC_Start_IT+0xa0>
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b08      	cmp	r3, #8
 8005510:	d104      	bne.n	800551c <HAL_TIM_IC_Start_IT+0x98>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8005518:	b2db      	uxtb	r3, r3
 800551a:	e003      	b.n	8005524 <HAL_TIM_IC_Start_IT+0xa0>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005522:	b2db      	uxtb	r3, r3
 8005524:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005526:	7bbb      	ldrb	r3, [r7, #14]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800552c:	7b7b      	ldrb	r3, [r7, #13]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d001      	beq.n	8005536 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8005532:	2301      	movs	r3, #1
 8005534:	e0e2      	b.n	80056fc <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d104      	bne.n	8005546 <HAL_TIM_IC_Start_IT+0xc2>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005544:	e023      	b.n	800558e <HAL_TIM_IC_Start_IT+0x10a>
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b04      	cmp	r3, #4
 800554a:	d104      	bne.n	8005556 <HAL_TIM_IC_Start_IT+0xd2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2202      	movs	r2, #2
 8005550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005554:	e01b      	b.n	800558e <HAL_TIM_IC_Start_IT+0x10a>
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b08      	cmp	r3, #8
 800555a:	d104      	bne.n	8005566 <HAL_TIM_IC_Start_IT+0xe2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2202      	movs	r2, #2
 8005560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005564:	e013      	b.n	800558e <HAL_TIM_IC_Start_IT+0x10a>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b0c      	cmp	r3, #12
 800556a:	d104      	bne.n	8005576 <HAL_TIM_IC_Start_IT+0xf2>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2202      	movs	r2, #2
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005574:	e00b      	b.n	800558e <HAL_TIM_IC_Start_IT+0x10a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b10      	cmp	r3, #16
 800557a:	d104      	bne.n	8005586 <HAL_TIM_IC_Start_IT+0x102>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2202      	movs	r2, #2
 8005580:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005584:	e003      	b.n	800558e <HAL_TIM_IC_Start_IT+0x10a>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2202      	movs	r2, #2
 800558a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d104      	bne.n	800559e <HAL_TIM_IC_Start_IT+0x11a>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2202      	movs	r2, #2
 8005598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800559c:	e013      	b.n	80055c6 <HAL_TIM_IC_Start_IT+0x142>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b04      	cmp	r3, #4
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Start_IT+0x12a>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055ac:	e00b      	b.n	80055c6 <HAL_TIM_IC_Start_IT+0x142>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b08      	cmp	r3, #8
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Start_IT+0x13a>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2202      	movs	r2, #2
 80055b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80055bc:	e003      	b.n	80055c6 <HAL_TIM_IC_Start_IT+0x142>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2202      	movs	r2, #2
 80055c2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d841      	bhi.n	8005650 <HAL_TIM_IC_Start_IT+0x1cc>
 80055cc:	a201      	add	r2, pc, #4	@ (adr r2, 80055d4 <HAL_TIM_IC_Start_IT+0x150>)
 80055ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d2:	bf00      	nop
 80055d4:	08005609 	.word	0x08005609
 80055d8:	08005651 	.word	0x08005651
 80055dc:	08005651 	.word	0x08005651
 80055e0:	08005651 	.word	0x08005651
 80055e4:	0800561b 	.word	0x0800561b
 80055e8:	08005651 	.word	0x08005651
 80055ec:	08005651 	.word	0x08005651
 80055f0:	08005651 	.word	0x08005651
 80055f4:	0800562d 	.word	0x0800562d
 80055f8:	08005651 	.word	0x08005651
 80055fc:	08005651 	.word	0x08005651
 8005600:	08005651 	.word	0x08005651
 8005604:	0800563f 	.word	0x0800563f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f042 0202 	orr.w	r2, r2, #2
 8005616:	60da      	str	r2, [r3, #12]
      break;
 8005618:	e01d      	b.n	8005656 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	68da      	ldr	r2, [r3, #12]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f042 0204 	orr.w	r2, r2, #4
 8005628:	60da      	str	r2, [r3, #12]
      break;
 800562a:	e014      	b.n	8005656 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f042 0208 	orr.w	r2, r2, #8
 800563a:	60da      	str	r2, [r3, #12]
      break;
 800563c:	e00b      	b.n	8005656 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0210 	orr.w	r2, r2, #16
 800564c:	60da      	str	r2, [r3, #12]
      break;
 800564e:	e002      	b.n	8005656 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	73fb      	strb	r3, [r7, #15]
      break;
 8005654:	bf00      	nop
  }

  if (status == HAL_OK)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d14e      	bne.n	80056fa <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2201      	movs	r2, #1
 8005662:	6839      	ldr	r1, [r7, #0]
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fdd3 	bl	8006210 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a25      	ldr	r2, [pc, #148]	@ (8005704 <HAL_TIM_IC_Start_IT+0x280>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d022      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800567c:	d01d      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a21      	ldr	r2, [pc, #132]	@ (8005708 <HAL_TIM_IC_Start_IT+0x284>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d018      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a1f      	ldr	r2, [pc, #124]	@ (800570c <HAL_TIM_IC_Start_IT+0x288>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d013      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a1e      	ldr	r2, [pc, #120]	@ (8005710 <HAL_TIM_IC_Start_IT+0x28c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00e      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005714 <HAL_TIM_IC_Start_IT+0x290>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d009      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005718 <HAL_TIM_IC_Start_IT+0x294>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d004      	beq.n	80056ba <HAL_TIM_IC_Start_IT+0x236>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a19      	ldr	r2, [pc, #100]	@ (800571c <HAL_TIM_IC_Start_IT+0x298>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d115      	bne.n	80056e6 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	4b17      	ldr	r3, [pc, #92]	@ (8005720 <HAL_TIM_IC_Start_IT+0x29c>)
 80056c2:	4013      	ands	r3, r2
 80056c4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2b06      	cmp	r3, #6
 80056ca:	d015      	beq.n	80056f8 <HAL_TIM_IC_Start_IT+0x274>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056d2:	d011      	beq.n	80056f8 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f042 0201 	orr.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e4:	e008      	b.n	80056f8 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681a      	ldr	r2, [r3, #0]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0201 	orr.w	r2, r2, #1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e000      	b.n	80056fa <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	40010000 	.word	0x40010000
 8005708:	40000400 	.word	0x40000400
 800570c:	40000800 	.word	0x40000800
 8005710:	40000c00 	.word	0x40000c00
 8005714:	40010400 	.word	0x40010400
 8005718:	40001800 	.word	0x40001800
 800571c:	40014000 	.word	0x40014000
 8005720:	00010007 	.word	0x00010007

08005724 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d020      	beq.n	8005788 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d01b      	beq.n	8005788 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f06f 0202 	mvn.w	r2, #2
 8005758:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2201      	movs	r2, #1
 800575e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f7fb f906 	bl	8000980 <HAL_TIM_IC_CaptureCallback>
 8005774:	e005      	b.n	8005782 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fabe 	bl	8005cf8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fac5 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d020      	beq.n	80057d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d01b      	beq.n	80057d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f06f 0204 	mvn.w	r2, #4
 80057a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2202      	movs	r2, #2
 80057aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f7fb f8e0 	bl	8000980 <HAL_TIM_IC_CaptureCallback>
 80057c0:	e005      	b.n	80057ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 fa98 	bl	8005cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 fa9f 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f003 0308 	and.w	r3, r3, #8
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d020      	beq.n	8005820 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01b      	beq.n	8005820 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f06f 0208 	mvn.w	r2, #8
 80057f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d003      	beq.n	800580e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fb f8ba 	bl	8000980 <HAL_TIM_IC_CaptureCallback>
 800580c:	e005      	b.n	800581a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fa72 	bl	8005cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 fa79 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 0310 	and.w	r3, r3, #16
 8005826:	2b00      	cmp	r3, #0
 8005828:	d020      	beq.n	800586c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f003 0310 	and.w	r3, r3, #16
 8005830:	2b00      	cmp	r3, #0
 8005832:	d01b      	beq.n	800586c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f06f 0210 	mvn.w	r2, #16
 800583c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2208      	movs	r2, #8
 8005842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	69db      	ldr	r3, [r3, #28]
 800584a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584e:	2b00      	cmp	r3, #0
 8005850:	d003      	beq.n	800585a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb f894 	bl	8000980 <HAL_TIM_IC_CaptureCallback>
 8005858:	e005      	b.n	8005866 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa4c 	bl	8005cf8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 fa53 	bl	8005d0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00c      	beq.n	8005890 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 0301 	and.w	r3, r3, #1
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f06f 0201 	mvn.w	r2, #1
 8005888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f000 fa2a 	bl	8005ce4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005896:	2b00      	cmp	r3, #0
 8005898:	d104      	bne.n	80058a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00c      	beq.n	80058be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d007      	beq.n	80058be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80058b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fd67 	bl	800638c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d00c      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80058da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fd5f 	bl	80063a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00c      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d007      	beq.n	8005906 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80058fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fa0d 	bl	8005d20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f06f 0220 	mvn.w	r2, #32
 8005922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fd27 	bl	8006378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800592a:	bf00      	nop
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	60f8      	str	r0, [r7, #12]
 800593a:	60b9      	str	r1, [r7, #8]
 800593c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIM_IC_ConfigChannel+0x1e>
 800594c:	2302      	movs	r3, #2
 800594e:	e088      	b.n	8005a62 <HAL_TIM_IC_ConfigChannel+0x130>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d11b      	bne.n	8005996 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800596e:	f000 fa87 	bl	8005e80 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	699a      	ldr	r2, [r3, #24]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 020c 	bic.w	r2, r2, #12
 8005980:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	6999      	ldr	r1, [r3, #24]
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	689a      	ldr	r2, [r3, #8]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	430a      	orrs	r2, r1
 8005992:	619a      	str	r2, [r3, #24]
 8005994:	e060      	b.n	8005a58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2b04      	cmp	r3, #4
 800599a:	d11c      	bne.n	80059d6 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80059ac:	f000 fb0b 	bl	8005fc6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	699a      	ldr	r2, [r3, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80059be:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6999      	ldr	r1, [r3, #24]
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021a      	lsls	r2, r3, #8
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	430a      	orrs	r2, r1
 80059d2:	619a      	str	r2, [r3, #24]
 80059d4:	e040      	b.n	8005a58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d11b      	bne.n	8005a14 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80059ec:	f000 fb58 	bl	80060a0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69da      	ldr	r2, [r3, #28]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 020c 	bic.w	r2, r2, #12
 80059fe:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69d9      	ldr	r1, [r3, #28]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	61da      	str	r2, [r3, #28]
 8005a12:	e021      	b.n	8005a58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d11c      	bne.n	8005a54 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005a2a:	f000 fb75 	bl	8006118 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69da      	ldr	r2, [r3, #28]
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005a3c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	69d9      	ldr	r1, [r3, #28]
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	021a      	lsls	r2, r3, #8
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	430a      	orrs	r2, r1
 8005a50:	61da      	str	r2, [r3, #28]
 8005a52:	e001      	b.n	8005a58 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3718      	adds	r7, #24
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_TIM_ConfigClockSource+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e0dc      	b.n	8005c42 <HAL_TIM_ConfigClockSource+0x1d6>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2202      	movs	r2, #2
 8005a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005aa0:	68ba      	ldr	r2, [r7, #8]
 8005aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c4c <HAL_TIM_ConfigClockSource+0x1e0>)
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005aae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68ba      	ldr	r2, [r7, #8]
 8005ab6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a64      	ldr	r2, [pc, #400]	@ (8005c50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	f000 80a9 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ac4:	4a62      	ldr	r2, [pc, #392]	@ (8005c50 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	f200 80ae 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005acc:	4a61      	ldr	r2, [pc, #388]	@ (8005c54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	f000 80a1 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ad4:	4a5f      	ldr	r2, [pc, #380]	@ (8005c54 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	f200 80a6 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005adc:	4a5e      	ldr	r2, [pc, #376]	@ (8005c58 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	f000 8099 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8005c58 <HAL_TIM_ConfigClockSource+0x1ec>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	f200 809e 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005aec:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005af0:	f000 8091 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005af4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005af8:	f200 8096 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005afc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b00:	f000 8089 	beq.w	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b04:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b08:	f200 808e 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b10:	d03e      	beq.n	8005b90 <HAL_TIM_ConfigClockSource+0x124>
 8005b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b16:	f200 8087 	bhi.w	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b1e:	f000 8086 	beq.w	8005c2e <HAL_TIM_ConfigClockSource+0x1c2>
 8005b22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b26:	d87f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b28:	2b70      	cmp	r3, #112	@ 0x70
 8005b2a:	d01a      	beq.n	8005b62 <HAL_TIM_ConfigClockSource+0xf6>
 8005b2c:	2b70      	cmp	r3, #112	@ 0x70
 8005b2e:	d87b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b30:	2b60      	cmp	r3, #96	@ 0x60
 8005b32:	d050      	beq.n	8005bd6 <HAL_TIM_ConfigClockSource+0x16a>
 8005b34:	2b60      	cmp	r3, #96	@ 0x60
 8005b36:	d877      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b38:	2b50      	cmp	r3, #80	@ 0x50
 8005b3a:	d03c      	beq.n	8005bb6 <HAL_TIM_ConfigClockSource+0x14a>
 8005b3c:	2b50      	cmp	r3, #80	@ 0x50
 8005b3e:	d873      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b40:	2b40      	cmp	r3, #64	@ 0x40
 8005b42:	d058      	beq.n	8005bf6 <HAL_TIM_ConfigClockSource+0x18a>
 8005b44:	2b40      	cmp	r3, #64	@ 0x40
 8005b46:	d86f      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b48:	2b30      	cmp	r3, #48	@ 0x30
 8005b4a:	d064      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b4c:	2b30      	cmp	r3, #48	@ 0x30
 8005b4e:	d86b      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d060      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d867      	bhi.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d05c      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b5c:	2b10      	cmp	r3, #16
 8005b5e:	d05a      	beq.n	8005c16 <HAL_TIM_ConfigClockSource+0x1aa>
 8005b60:	e062      	b.n	8005c28 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005b72:	f000 fb2d 	bl	80061d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005b84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68ba      	ldr	r2, [r7, #8]
 8005b8c:	609a      	str	r2, [r3, #8]
      break;
 8005b8e:	e04f      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ba0:	f000 fb16 	bl	80061d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bb2:	609a      	str	r2, [r3, #8]
      break;
 8005bb4:	e03c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f000 f9d0 	bl	8005f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2150      	movs	r1, #80	@ 0x50
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fae0 	bl	8006194 <TIM_ITRx_SetConfig>
      break;
 8005bd4:	e02c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005be2:	461a      	mov	r2, r3
 8005be4:	f000 fa2c 	bl	8006040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2160      	movs	r1, #96	@ 0x60
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fad0 	bl	8006194 <TIM_ITRx_SetConfig>
      break;
 8005bf4:	e01c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c02:	461a      	mov	r2, r3
 8005c04:	f000 f9b0 	bl	8005f68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	2140      	movs	r1, #64	@ 0x40
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f000 fac0 	bl	8006194 <TIM_ITRx_SetConfig>
      break;
 8005c14:	e00c      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4619      	mov	r1, r3
 8005c20:	4610      	mov	r0, r2
 8005c22:	f000 fab7 	bl	8006194 <TIM_ITRx_SetConfig>
      break;
 8005c26:	e003      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c2c:	e000      	b.n	8005c30 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005c2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	ffceff88 	.word	0xffceff88
 8005c50:	00100040 	.word	0x00100040
 8005c54:	00100030 	.word	0x00100030
 8005c58:	00100020 	.word	0x00100020

08005c5c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	2b0c      	cmp	r3, #12
 8005c6e:	d831      	bhi.n	8005cd4 <HAL_TIM_ReadCapturedValue+0x78>
 8005c70:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c76:	bf00      	nop
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cd5 	.word	0x08005cd5
 8005c80:	08005cd5 	.word	0x08005cd5
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005cb7 	.word	0x08005cb7
 8005c8c:	08005cd5 	.word	0x08005cd5
 8005c90:	08005cd5 	.word	0x08005cd5
 8005c94:	08005cd5 	.word	0x08005cd5
 8005c98:	08005cc1 	.word	0x08005cc1
 8005c9c:	08005cd5 	.word	0x08005cd5
 8005ca0:	08005cd5 	.word	0x08005cd5
 8005ca4:	08005cd5 	.word	0x08005cd5
 8005ca8:	08005ccb 	.word	0x08005ccb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005cb2:	60fb      	str	r3, [r7, #12]

      break;
 8005cb4:	e00f      	b.n	8005cd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cbc:	60fb      	str	r3, [r7, #12]

      break;
 8005cbe:	e00a      	b.n	8005cd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cc6:	60fb      	str	r3, [r7, #12]

      break;
 8005cc8:	e005      	b.n	8005cd6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	60fb      	str	r3, [r7, #12]

      break;
 8005cd2:	e000      	b.n	8005cd6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005cd4:	bf00      	nop
  }

  return tmpreg;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3714      	adds	r7, #20
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005cec:	bf00      	nop
 8005cee:	370c      	adds	r7, #12
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr

08005cf8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d00:	bf00      	nop
 8005d02:	370c      	adds	r7, #12
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d14:	bf00      	nop
 8005d16:	370c      	adds	r7, #12
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr

08005d20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b083      	sub	sp, #12
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d28:	bf00      	nop
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a46      	ldr	r2, [pc, #280]	@ (8005e60 <TIM_Base_SetConfig+0x12c>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d52:	d00f      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a43      	ldr	r2, [pc, #268]	@ (8005e64 <TIM_Base_SetConfig+0x130>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d00b      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a42      	ldr	r2, [pc, #264]	@ (8005e68 <TIM_Base_SetConfig+0x134>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d007      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	4a41      	ldr	r2, [pc, #260]	@ (8005e6c <TIM_Base_SetConfig+0x138>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d003      	beq.n	8005d74 <TIM_Base_SetConfig+0x40>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4a40      	ldr	r2, [pc, #256]	@ (8005e70 <TIM_Base_SetConfig+0x13c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d108      	bne.n	8005d86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a35      	ldr	r2, [pc, #212]	@ (8005e60 <TIM_Base_SetConfig+0x12c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d01f      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d94:	d01b      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a32      	ldr	r2, [pc, #200]	@ (8005e64 <TIM_Base_SetConfig+0x130>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d017      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a31      	ldr	r2, [pc, #196]	@ (8005e68 <TIM_Base_SetConfig+0x134>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a30      	ldr	r2, [pc, #192]	@ (8005e6c <TIM_Base_SetConfig+0x138>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d00f      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a2f      	ldr	r2, [pc, #188]	@ (8005e70 <TIM_Base_SetConfig+0x13c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d00b      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a2e      	ldr	r2, [pc, #184]	@ (8005e74 <TIM_Base_SetConfig+0x140>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d007      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e78 <TIM_Base_SetConfig+0x144>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d003      	beq.n	8005dce <TIM_Base_SetConfig+0x9a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8005e7c <TIM_Base_SetConfig+0x148>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d108      	bne.n	8005de0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681a      	ldr	r2, [r3, #0]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <TIM_Base_SetConfig+0x12c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_Base_SetConfig+0xf8>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a18      	ldr	r2, [pc, #96]	@ (8005e70 <TIM_Base_SetConfig+0x13c>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_Base_SetConfig+0xf8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a17      	ldr	r2, [pc, #92]	@ (8005e74 <TIM_Base_SetConfig+0x140>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_Base_SetConfig+0xf8>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a16      	ldr	r2, [pc, #88]	@ (8005e78 <TIM_Base_SetConfig+0x144>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_Base_SetConfig+0xf8>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a15      	ldr	r2, [pc, #84]	@ (8005e7c <TIM_Base_SetConfig+0x148>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d103      	bne.n	8005e34 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	691a      	ldr	r2, [r3, #16]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d105      	bne.n	8005e52 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f023 0201 	bic.w	r2, r3, #1
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	611a      	str	r2, [r3, #16]
  }
}
 8005e52:	bf00      	nop
 8005e54:	3714      	adds	r7, #20
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40010000 	.word	0x40010000
 8005e64:	40000400 	.word	0x40000400
 8005e68:	40000800 	.word	0x40000800
 8005e6c:	40000c00 	.word	0x40000c00
 8005e70:	40010400 	.word	0x40010400
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	607a      	str	r2, [r7, #4]
 8005e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f023 0201 	bic.w	r2, r3, #1
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	699b      	ldr	r3, [r3, #24]
 8005ea4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	4a28      	ldr	r2, [pc, #160]	@ (8005f4c <TIM_TI1_SetConfig+0xcc>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01b      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005eb4:	d017      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4a25      	ldr	r2, [pc, #148]	@ (8005f50 <TIM_TI1_SetConfig+0xd0>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d013      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4a24      	ldr	r2, [pc, #144]	@ (8005f54 <TIM_TI1_SetConfig+0xd4>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d00f      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	4a23      	ldr	r2, [pc, #140]	@ (8005f58 <TIM_TI1_SetConfig+0xd8>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	4a22      	ldr	r2, [pc, #136]	@ (8005f5c <TIM_TI1_SetConfig+0xdc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d007      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4a21      	ldr	r2, [pc, #132]	@ (8005f60 <TIM_TI1_SetConfig+0xe0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d003      	beq.n	8005ee6 <TIM_TI1_SetConfig+0x66>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	4a20      	ldr	r2, [pc, #128]	@ (8005f64 <TIM_TI1_SetConfig+0xe4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d101      	bne.n	8005eea <TIM_TI1_SetConfig+0x6a>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <TIM_TI1_SetConfig+0x6c>
 8005eea:	2300      	movs	r3, #0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f023 0303 	bic.w	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	617b      	str	r3, [r7, #20]
 8005f00:	e003      	b.n	8005f0a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f043 0301 	orr.w	r3, r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	011b      	lsls	r3, r3, #4
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	f023 030a 	bic.w	r3, r3, #10
 8005f24:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	f003 030a 	and.w	r3, r3, #10
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	697a      	ldr	r2, [r7, #20]
 8005f36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
 8005f4a:	bf00      	nop
 8005f4c:	40010000 	.word	0x40010000
 8005f50:	40000400 	.word	0x40000400
 8005f54:	40000800 	.word	0x40000800
 8005f58:	40000c00 	.word	0x40000c00
 8005f5c:	40010400 	.word	0x40010400
 8005f60:	40001800 	.word	0x40001800
 8005f64:	40014000 	.word	0x40014000

08005f68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	699b      	ldr	r3, [r3, #24]
 8005f8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f023 030a 	bic.w	r3, r3, #10
 8005fa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fa6:	697a      	ldr	r2, [r7, #20]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	621a      	str	r2, [r3, #32]
}
 8005fba:	bf00      	nop
 8005fbc:	371c      	adds	r7, #28
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr

08005fc6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b087      	sub	sp, #28
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	60f8      	str	r0, [r7, #12]
 8005fce:	60b9      	str	r1, [r7, #8]
 8005fd0:	607a      	str	r2, [r7, #4]
 8005fd2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	f023 0210 	bic.w	r2, r3, #16
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	699b      	ldr	r3, [r3, #24]
 8005fea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	021b      	lsls	r3, r3, #8
 8005ff8:	693a      	ldr	r2, [r7, #16]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	031b      	lsls	r3, r3, #12
 800600a:	b29b      	uxth	r3, r3
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	4313      	orrs	r3, r2
 8006010:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006012:	697b      	ldr	r3, [r7, #20]
 8006014:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006018:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	011b      	lsls	r3, r3, #4
 800601e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	4313      	orrs	r3, r2
 8006026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	621a      	str	r2, [r3, #32]
}
 8006034:	bf00      	nop
 8006036:	371c      	adds	r7, #28
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006040:	b480      	push	{r7}
 8006042:	b087      	sub	sp, #28
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6a1b      	ldr	r3, [r3, #32]
 8006050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006064:	693b      	ldr	r3, [r7, #16]
 8006066:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800606a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	031b      	lsls	r3, r3, #12
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	4313      	orrs	r3, r2
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800607c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	011b      	lsls	r3, r3, #4
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	4313      	orrs	r3, r2
 8006086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	693a      	ldr	r2, [r7, #16]
 800608c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	621a      	str	r2, [r3, #32]
}
 8006094:	bf00      	nop
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b087      	sub	sp, #28
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
 80060ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	69db      	ldr	r3, [r3, #28]
 80060c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f023 0303 	bic.w	r3, r3, #3
 80060cc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80060ce:	693a      	ldr	r2, [r7, #16]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	693a      	ldr	r2, [r7, #16]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80060f0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	021b      	lsls	r3, r3, #8
 80060f6:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	621a      	str	r2, [r3, #32]
}
 800610c:	bf00      	nop
 800610e:	371c      	adds	r7, #28
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	607a      	str	r2, [r7, #4]
 8006124:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	6a1b      	ldr	r3, [r3, #32]
 8006130:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006144:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	021b      	lsls	r3, r3, #8
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006156:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	031b      	lsls	r3, r3, #12
 800615c:	b29b      	uxth	r3, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	4313      	orrs	r3, r2
 8006162:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 800616a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	031b      	lsls	r3, r3, #12
 8006170:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	4313      	orrs	r3, r2
 8006178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
	...

08006194 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <TIM_ITRx_SetConfig+0x38>)
 80061a8:	4013      	ands	r3, r2
 80061aa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f043 0307 	orr.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	609a      	str	r2, [r3, #8]
}
 80061be:	bf00      	nop
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	ffcfff8f 	.word	0xffcfff8f

080061d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b087      	sub	sp, #28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
 80061dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	431a      	orrs	r2, r3
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	609a      	str	r2, [r3, #8]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	2201      	movs	r2, #1
 8006224:	fa02 f303 	lsl.w	r3, r2, r3
 8006228:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1a      	ldr	r2, [r3, #32]
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	43db      	mvns	r3, r3
 8006232:	401a      	ands	r2, r3
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6a1a      	ldr	r2, [r3, #32]
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	6879      	ldr	r1, [r7, #4]
 8006244:	fa01 f303 	lsl.w	r3, r1, r3
 8006248:	431a      	orrs	r2, r3
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	621a      	str	r2, [r3, #32]
}
 800624e:	bf00      	nop
 8006250:	371c      	adds	r7, #28
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
	...

0800625c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
 8006264:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800626c:	2b01      	cmp	r3, #1
 800626e:	d101      	bne.n	8006274 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006270:	2302      	movs	r3, #2
 8006272:	e06d      	b.n	8006350 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2202      	movs	r2, #2
 8006280:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a30      	ldr	r2, [pc, #192]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d004      	beq.n	80062a8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a2f      	ldr	r2, [pc, #188]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4313      	orrs	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a20      	ldr	r2, [pc, #128]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d022      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062e6:	d01d      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	4a1d      	ldr	r2, [pc, #116]	@ (8006364 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d018      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	4a1c      	ldr	r2, [pc, #112]	@ (8006368 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	4a1a      	ldr	r2, [pc, #104]	@ (800636c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00e      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	4a15      	ldr	r2, [pc, #84]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800630c:	4293      	cmp	r3, r2
 800630e:	d009      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	4a16      	ldr	r2, [pc, #88]	@ (8006370 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d004      	beq.n	8006324 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	4a15      	ldr	r2, [pc, #84]	@ (8006374 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d10c      	bne.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800632a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	68ba      	ldr	r2, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3714      	adds	r7, #20
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40010000 	.word	0x40010000
 8006360:	40010400 	.word	0x40010400
 8006364:	40000400 	.word	0x40000400
 8006368:	40000800 	.word	0x40000800
 800636c:	40000c00 	.word	0x40000c00
 8006370:	40001800 	.word	0x40001800
 8006374:	40014000 	.word	0x40014000

08006378 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80063a8:	bf00      	nop
 80063aa:	370c      	adds	r7, #12
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <__cvt>:
 80063b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063b6:	ed2d 8b02 	vpush	{d8}
 80063ba:	eeb0 8b40 	vmov.f64	d8, d0
 80063be:	b085      	sub	sp, #20
 80063c0:	4617      	mov	r7, r2
 80063c2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80063c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80063c6:	ee18 2a90 	vmov	r2, s17
 80063ca:	f025 0520 	bic.w	r5, r5, #32
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	bfb6      	itet	lt
 80063d2:	222d      	movlt	r2, #45	@ 0x2d
 80063d4:	2200      	movge	r2, #0
 80063d6:	eeb1 8b40 	vneglt.f64	d8, d0
 80063da:	2d46      	cmp	r5, #70	@ 0x46
 80063dc:	460c      	mov	r4, r1
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	d004      	beq.n	80063ec <__cvt+0x38>
 80063e2:	2d45      	cmp	r5, #69	@ 0x45
 80063e4:	d100      	bne.n	80063e8 <__cvt+0x34>
 80063e6:	3401      	adds	r4, #1
 80063e8:	2102      	movs	r1, #2
 80063ea:	e000      	b.n	80063ee <__cvt+0x3a>
 80063ec:	2103      	movs	r1, #3
 80063ee:	ab03      	add	r3, sp, #12
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	ab02      	add	r3, sp, #8
 80063f4:	9300      	str	r3, [sp, #0]
 80063f6:	4622      	mov	r2, r4
 80063f8:	4633      	mov	r3, r6
 80063fa:	eeb0 0b48 	vmov.f64	d0, d8
 80063fe:	f001 f86f 	bl	80074e0 <_dtoa_r>
 8006402:	2d47      	cmp	r5, #71	@ 0x47
 8006404:	d114      	bne.n	8006430 <__cvt+0x7c>
 8006406:	07fb      	lsls	r3, r7, #31
 8006408:	d50a      	bpl.n	8006420 <__cvt+0x6c>
 800640a:	1902      	adds	r2, r0, r4
 800640c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	bf08      	it	eq
 8006416:	9203      	streq	r2, [sp, #12]
 8006418:	2130      	movs	r1, #48	@ 0x30
 800641a:	9b03      	ldr	r3, [sp, #12]
 800641c:	4293      	cmp	r3, r2
 800641e:	d319      	bcc.n	8006454 <__cvt+0xa0>
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006424:	1a1b      	subs	r3, r3, r0
 8006426:	6013      	str	r3, [r2, #0]
 8006428:	b005      	add	sp, #20
 800642a:	ecbd 8b02 	vpop	{d8}
 800642e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006430:	2d46      	cmp	r5, #70	@ 0x46
 8006432:	eb00 0204 	add.w	r2, r0, r4
 8006436:	d1e9      	bne.n	800640c <__cvt+0x58>
 8006438:	7803      	ldrb	r3, [r0, #0]
 800643a:	2b30      	cmp	r3, #48	@ 0x30
 800643c:	d107      	bne.n	800644e <__cvt+0x9a>
 800643e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006446:	bf1c      	itt	ne
 8006448:	f1c4 0401 	rsbne	r4, r4, #1
 800644c:	6034      	strne	r4, [r6, #0]
 800644e:	6833      	ldr	r3, [r6, #0]
 8006450:	441a      	add	r2, r3
 8006452:	e7db      	b.n	800640c <__cvt+0x58>
 8006454:	1c5c      	adds	r4, r3, #1
 8006456:	9403      	str	r4, [sp, #12]
 8006458:	7019      	strb	r1, [r3, #0]
 800645a:	e7de      	b.n	800641a <__cvt+0x66>

0800645c <__exponent>:
 800645c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800645e:	2900      	cmp	r1, #0
 8006460:	bfba      	itte	lt
 8006462:	4249      	neglt	r1, r1
 8006464:	232d      	movlt	r3, #45	@ 0x2d
 8006466:	232b      	movge	r3, #43	@ 0x2b
 8006468:	2909      	cmp	r1, #9
 800646a:	7002      	strb	r2, [r0, #0]
 800646c:	7043      	strb	r3, [r0, #1]
 800646e:	dd29      	ble.n	80064c4 <__exponent+0x68>
 8006470:	f10d 0307 	add.w	r3, sp, #7
 8006474:	461d      	mov	r5, r3
 8006476:	270a      	movs	r7, #10
 8006478:	461a      	mov	r2, r3
 800647a:	fbb1 f6f7 	udiv	r6, r1, r7
 800647e:	fb07 1416 	mls	r4, r7, r6, r1
 8006482:	3430      	adds	r4, #48	@ 0x30
 8006484:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006488:	460c      	mov	r4, r1
 800648a:	2c63      	cmp	r4, #99	@ 0x63
 800648c:	f103 33ff 	add.w	r3, r3, #4294967295
 8006490:	4631      	mov	r1, r6
 8006492:	dcf1      	bgt.n	8006478 <__exponent+0x1c>
 8006494:	3130      	adds	r1, #48	@ 0x30
 8006496:	1e94      	subs	r4, r2, #2
 8006498:	f803 1c01 	strb.w	r1, [r3, #-1]
 800649c:	1c41      	adds	r1, r0, #1
 800649e:	4623      	mov	r3, r4
 80064a0:	42ab      	cmp	r3, r5
 80064a2:	d30a      	bcc.n	80064ba <__exponent+0x5e>
 80064a4:	f10d 0309 	add.w	r3, sp, #9
 80064a8:	1a9b      	subs	r3, r3, r2
 80064aa:	42ac      	cmp	r4, r5
 80064ac:	bf88      	it	hi
 80064ae:	2300      	movhi	r3, #0
 80064b0:	3302      	adds	r3, #2
 80064b2:	4403      	add	r3, r0
 80064b4:	1a18      	subs	r0, r3, r0
 80064b6:	b003      	add	sp, #12
 80064b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ba:	f813 6b01 	ldrb.w	r6, [r3], #1
 80064be:	f801 6f01 	strb.w	r6, [r1, #1]!
 80064c2:	e7ed      	b.n	80064a0 <__exponent+0x44>
 80064c4:	2330      	movs	r3, #48	@ 0x30
 80064c6:	3130      	adds	r1, #48	@ 0x30
 80064c8:	7083      	strb	r3, [r0, #2]
 80064ca:	70c1      	strb	r1, [r0, #3]
 80064cc:	1d03      	adds	r3, r0, #4
 80064ce:	e7f1      	b.n	80064b4 <__exponent+0x58>

080064d0 <_printf_float>:
 80064d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d4:	b08d      	sub	sp, #52	@ 0x34
 80064d6:	460c      	mov	r4, r1
 80064d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80064dc:	4616      	mov	r6, r2
 80064de:	461f      	mov	r7, r3
 80064e0:	4605      	mov	r5, r0
 80064e2:	f000 fee7 	bl	80072b4 <_localeconv_r>
 80064e6:	f8d0 b000 	ldr.w	fp, [r0]
 80064ea:	4658      	mov	r0, fp
 80064ec:	f7f9 ff48 	bl	8000380 <strlen>
 80064f0:	2300      	movs	r3, #0
 80064f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80064f4:	f8d8 3000 	ldr.w	r3, [r8]
 80064f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80064fc:	6822      	ldr	r2, [r4, #0]
 80064fe:	9005      	str	r0, [sp, #20]
 8006500:	3307      	adds	r3, #7
 8006502:	f023 0307 	bic.w	r3, r3, #7
 8006506:	f103 0108 	add.w	r1, r3, #8
 800650a:	f8c8 1000 	str.w	r1, [r8]
 800650e:	ed93 0b00 	vldr	d0, [r3]
 8006512:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006770 <_printf_float+0x2a0>
 8006516:	eeb0 7bc0 	vabs.f64	d7, d0
 800651a:	eeb4 7b46 	vcmp.f64	d7, d6
 800651e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006522:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8006526:	dd24      	ble.n	8006572 <_printf_float+0xa2>
 8006528:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800652c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006530:	d502      	bpl.n	8006538 <_printf_float+0x68>
 8006532:	232d      	movs	r3, #45	@ 0x2d
 8006534:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006538:	498f      	ldr	r1, [pc, #572]	@ (8006778 <_printf_float+0x2a8>)
 800653a:	4b90      	ldr	r3, [pc, #576]	@ (800677c <_printf_float+0x2ac>)
 800653c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006540:	bf94      	ite	ls
 8006542:	4688      	movls	r8, r1
 8006544:	4698      	movhi	r8, r3
 8006546:	f022 0204 	bic.w	r2, r2, #4
 800654a:	2303      	movs	r3, #3
 800654c:	6123      	str	r3, [r4, #16]
 800654e:	6022      	str	r2, [r4, #0]
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	9700      	str	r7, [sp, #0]
 8006556:	4633      	mov	r3, r6
 8006558:	aa0b      	add	r2, sp, #44	@ 0x2c
 800655a:	4621      	mov	r1, r4
 800655c:	4628      	mov	r0, r5
 800655e:	f000 f9d1 	bl	8006904 <_printf_common>
 8006562:	3001      	adds	r0, #1
 8006564:	f040 8089 	bne.w	800667a <_printf_float+0x1aa>
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	b00d      	add	sp, #52	@ 0x34
 800656e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006572:	eeb4 0b40 	vcmp.f64	d0, d0
 8006576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800657a:	d709      	bvc.n	8006590 <_printf_float+0xc0>
 800657c:	ee10 3a90 	vmov	r3, s1
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfbc      	itt	lt
 8006584:	232d      	movlt	r3, #45	@ 0x2d
 8006586:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800658a:	497d      	ldr	r1, [pc, #500]	@ (8006780 <_printf_float+0x2b0>)
 800658c:	4b7d      	ldr	r3, [pc, #500]	@ (8006784 <_printf_float+0x2b4>)
 800658e:	e7d5      	b.n	800653c <_printf_float+0x6c>
 8006590:	6863      	ldr	r3, [r4, #4]
 8006592:	1c59      	adds	r1, r3, #1
 8006594:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006598:	d139      	bne.n	800660e <_printf_float+0x13e>
 800659a:	2306      	movs	r3, #6
 800659c:	6063      	str	r3, [r4, #4]
 800659e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065a2:	2300      	movs	r3, #0
 80065a4:	6022      	str	r2, [r4, #0]
 80065a6:	9303      	str	r3, [sp, #12]
 80065a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80065aa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80065ae:	ab09      	add	r3, sp, #36	@ 0x24
 80065b0:	9300      	str	r3, [sp, #0]
 80065b2:	6861      	ldr	r1, [r4, #4]
 80065b4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80065b8:	4628      	mov	r0, r5
 80065ba:	f7ff fefb 	bl	80063b4 <__cvt>
 80065be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80065c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80065c4:	4680      	mov	r8, r0
 80065c6:	d129      	bne.n	800661c <_printf_float+0x14c>
 80065c8:	1cc8      	adds	r0, r1, #3
 80065ca:	db02      	blt.n	80065d2 <_printf_float+0x102>
 80065cc:	6863      	ldr	r3, [r4, #4]
 80065ce:	4299      	cmp	r1, r3
 80065d0:	dd41      	ble.n	8006656 <_printf_float+0x186>
 80065d2:	f1a9 0902 	sub.w	r9, r9, #2
 80065d6:	fa5f f989 	uxtb.w	r9, r9
 80065da:	3901      	subs	r1, #1
 80065dc:	464a      	mov	r2, r9
 80065de:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80065e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80065e4:	f7ff ff3a 	bl	800645c <__exponent>
 80065e8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80065ea:	1813      	adds	r3, r2, r0
 80065ec:	2a01      	cmp	r2, #1
 80065ee:	4682      	mov	sl, r0
 80065f0:	6123      	str	r3, [r4, #16]
 80065f2:	dc02      	bgt.n	80065fa <_printf_float+0x12a>
 80065f4:	6822      	ldr	r2, [r4, #0]
 80065f6:	07d2      	lsls	r2, r2, #31
 80065f8:	d501      	bpl.n	80065fe <_printf_float+0x12e>
 80065fa:	3301      	adds	r3, #1
 80065fc:	6123      	str	r3, [r4, #16]
 80065fe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006602:	2b00      	cmp	r3, #0
 8006604:	d0a6      	beq.n	8006554 <_printf_float+0x84>
 8006606:	232d      	movs	r3, #45	@ 0x2d
 8006608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800660c:	e7a2      	b.n	8006554 <_printf_float+0x84>
 800660e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006612:	d1c4      	bne.n	800659e <_printf_float+0xce>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1c2      	bne.n	800659e <_printf_float+0xce>
 8006618:	2301      	movs	r3, #1
 800661a:	e7bf      	b.n	800659c <_printf_float+0xcc>
 800661c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006620:	d9db      	bls.n	80065da <_printf_float+0x10a>
 8006622:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8006626:	d118      	bne.n	800665a <_printf_float+0x18a>
 8006628:	2900      	cmp	r1, #0
 800662a:	6863      	ldr	r3, [r4, #4]
 800662c:	dd0b      	ble.n	8006646 <_printf_float+0x176>
 800662e:	6121      	str	r1, [r4, #16]
 8006630:	b913      	cbnz	r3, 8006638 <_printf_float+0x168>
 8006632:	6822      	ldr	r2, [r4, #0]
 8006634:	07d0      	lsls	r0, r2, #31
 8006636:	d502      	bpl.n	800663e <_printf_float+0x16e>
 8006638:	3301      	adds	r3, #1
 800663a:	440b      	add	r3, r1
 800663c:	6123      	str	r3, [r4, #16]
 800663e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006640:	f04f 0a00 	mov.w	sl, #0
 8006644:	e7db      	b.n	80065fe <_printf_float+0x12e>
 8006646:	b913      	cbnz	r3, 800664e <_printf_float+0x17e>
 8006648:	6822      	ldr	r2, [r4, #0]
 800664a:	07d2      	lsls	r2, r2, #31
 800664c:	d501      	bpl.n	8006652 <_printf_float+0x182>
 800664e:	3302      	adds	r3, #2
 8006650:	e7f4      	b.n	800663c <_printf_float+0x16c>
 8006652:	2301      	movs	r3, #1
 8006654:	e7f2      	b.n	800663c <_printf_float+0x16c>
 8006656:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800665a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800665c:	4299      	cmp	r1, r3
 800665e:	db05      	blt.n	800666c <_printf_float+0x19c>
 8006660:	6823      	ldr	r3, [r4, #0]
 8006662:	6121      	str	r1, [r4, #16]
 8006664:	07d8      	lsls	r0, r3, #31
 8006666:	d5ea      	bpl.n	800663e <_printf_float+0x16e>
 8006668:	1c4b      	adds	r3, r1, #1
 800666a:	e7e7      	b.n	800663c <_printf_float+0x16c>
 800666c:	2900      	cmp	r1, #0
 800666e:	bfd4      	ite	le
 8006670:	f1c1 0202 	rsble	r2, r1, #2
 8006674:	2201      	movgt	r2, #1
 8006676:	4413      	add	r3, r2
 8006678:	e7e0      	b.n	800663c <_printf_float+0x16c>
 800667a:	6823      	ldr	r3, [r4, #0]
 800667c:	055a      	lsls	r2, r3, #21
 800667e:	d407      	bmi.n	8006690 <_printf_float+0x1c0>
 8006680:	6923      	ldr	r3, [r4, #16]
 8006682:	4642      	mov	r2, r8
 8006684:	4631      	mov	r1, r6
 8006686:	4628      	mov	r0, r5
 8006688:	47b8      	blx	r7
 800668a:	3001      	adds	r0, #1
 800668c:	d12a      	bne.n	80066e4 <_printf_float+0x214>
 800668e:	e76b      	b.n	8006568 <_printf_float+0x98>
 8006690:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006694:	f240 80e0 	bls.w	8006858 <_printf_float+0x388>
 8006698:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800669c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066a4:	d133      	bne.n	800670e <_printf_float+0x23e>
 80066a6:	4a38      	ldr	r2, [pc, #224]	@ (8006788 <_printf_float+0x2b8>)
 80066a8:	2301      	movs	r3, #1
 80066aa:	4631      	mov	r1, r6
 80066ac:	4628      	mov	r0, r5
 80066ae:	47b8      	blx	r7
 80066b0:	3001      	adds	r0, #1
 80066b2:	f43f af59 	beq.w	8006568 <_printf_float+0x98>
 80066b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80066ba:	4543      	cmp	r3, r8
 80066bc:	db02      	blt.n	80066c4 <_printf_float+0x1f4>
 80066be:	6823      	ldr	r3, [r4, #0]
 80066c0:	07d8      	lsls	r0, r3, #31
 80066c2:	d50f      	bpl.n	80066e4 <_printf_float+0x214>
 80066c4:	9b05      	ldr	r3, [sp, #20]
 80066c6:	465a      	mov	r2, fp
 80066c8:	4631      	mov	r1, r6
 80066ca:	4628      	mov	r0, r5
 80066cc:	47b8      	blx	r7
 80066ce:	3001      	adds	r0, #1
 80066d0:	f43f af4a 	beq.w	8006568 <_printf_float+0x98>
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80066dc:	f104 0a1a 	add.w	sl, r4, #26
 80066e0:	45c8      	cmp	r8, r9
 80066e2:	dc09      	bgt.n	80066f8 <_printf_float+0x228>
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	079b      	lsls	r3, r3, #30
 80066e8:	f100 8107 	bmi.w	80068fa <_printf_float+0x42a>
 80066ec:	68e0      	ldr	r0, [r4, #12]
 80066ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066f0:	4298      	cmp	r0, r3
 80066f2:	bfb8      	it	lt
 80066f4:	4618      	movlt	r0, r3
 80066f6:	e739      	b.n	800656c <_printf_float+0x9c>
 80066f8:	2301      	movs	r3, #1
 80066fa:	4652      	mov	r2, sl
 80066fc:	4631      	mov	r1, r6
 80066fe:	4628      	mov	r0, r5
 8006700:	47b8      	blx	r7
 8006702:	3001      	adds	r0, #1
 8006704:	f43f af30 	beq.w	8006568 <_printf_float+0x98>
 8006708:	f109 0901 	add.w	r9, r9, #1
 800670c:	e7e8      	b.n	80066e0 <_printf_float+0x210>
 800670e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006710:	2b00      	cmp	r3, #0
 8006712:	dc3b      	bgt.n	800678c <_printf_float+0x2bc>
 8006714:	4a1c      	ldr	r2, [pc, #112]	@ (8006788 <_printf_float+0x2b8>)
 8006716:	2301      	movs	r3, #1
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af22 	beq.w	8006568 <_printf_float+0x98>
 8006724:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006728:	ea59 0303 	orrs.w	r3, r9, r3
 800672c:	d102      	bne.n	8006734 <_printf_float+0x264>
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	07d9      	lsls	r1, r3, #31
 8006732:	d5d7      	bpl.n	80066e4 <_printf_float+0x214>
 8006734:	9b05      	ldr	r3, [sp, #20]
 8006736:	465a      	mov	r2, fp
 8006738:	4631      	mov	r1, r6
 800673a:	4628      	mov	r0, r5
 800673c:	47b8      	blx	r7
 800673e:	3001      	adds	r0, #1
 8006740:	f43f af12 	beq.w	8006568 <_printf_float+0x98>
 8006744:	f04f 0a00 	mov.w	sl, #0
 8006748:	f104 0b1a 	add.w	fp, r4, #26
 800674c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800674e:	425b      	negs	r3, r3
 8006750:	4553      	cmp	r3, sl
 8006752:	dc01      	bgt.n	8006758 <_printf_float+0x288>
 8006754:	464b      	mov	r3, r9
 8006756:	e794      	b.n	8006682 <_printf_float+0x1b2>
 8006758:	2301      	movs	r3, #1
 800675a:	465a      	mov	r2, fp
 800675c:	4631      	mov	r1, r6
 800675e:	4628      	mov	r0, r5
 8006760:	47b8      	blx	r7
 8006762:	3001      	adds	r0, #1
 8006764:	f43f af00 	beq.w	8006568 <_printf_float+0x98>
 8006768:	f10a 0a01 	add.w	sl, sl, #1
 800676c:	e7ee      	b.n	800674c <_printf_float+0x27c>
 800676e:	bf00      	nop
 8006770:	ffffffff 	.word	0xffffffff
 8006774:	7fefffff 	.word	0x7fefffff
 8006778:	0800af34 	.word	0x0800af34
 800677c:	0800af38 	.word	0x0800af38
 8006780:	0800af3c 	.word	0x0800af3c
 8006784:	0800af40 	.word	0x0800af40
 8006788:	0800af44 	.word	0x0800af44
 800678c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800678e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006792:	4553      	cmp	r3, sl
 8006794:	bfa8      	it	ge
 8006796:	4653      	movge	r3, sl
 8006798:	2b00      	cmp	r3, #0
 800679a:	4699      	mov	r9, r3
 800679c:	dc37      	bgt.n	800680e <_printf_float+0x33e>
 800679e:	2300      	movs	r3, #0
 80067a0:	9307      	str	r3, [sp, #28]
 80067a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067a6:	f104 021a 	add.w	r2, r4, #26
 80067aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80067ac:	9907      	ldr	r1, [sp, #28]
 80067ae:	9306      	str	r3, [sp, #24]
 80067b0:	eba3 0309 	sub.w	r3, r3, r9
 80067b4:	428b      	cmp	r3, r1
 80067b6:	dc31      	bgt.n	800681c <_printf_float+0x34c>
 80067b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ba:	459a      	cmp	sl, r3
 80067bc:	dc3b      	bgt.n	8006836 <_printf_float+0x366>
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	07da      	lsls	r2, r3, #31
 80067c2:	d438      	bmi.n	8006836 <_printf_float+0x366>
 80067c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067c6:	ebaa 0903 	sub.w	r9, sl, r3
 80067ca:	9b06      	ldr	r3, [sp, #24]
 80067cc:	ebaa 0303 	sub.w	r3, sl, r3
 80067d0:	4599      	cmp	r9, r3
 80067d2:	bfa8      	it	ge
 80067d4:	4699      	movge	r9, r3
 80067d6:	f1b9 0f00 	cmp.w	r9, #0
 80067da:	dc34      	bgt.n	8006846 <_printf_float+0x376>
 80067dc:	f04f 0800 	mov.w	r8, #0
 80067e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e4:	f104 0b1a 	add.w	fp, r4, #26
 80067e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ea:	ebaa 0303 	sub.w	r3, sl, r3
 80067ee:	eba3 0309 	sub.w	r3, r3, r9
 80067f2:	4543      	cmp	r3, r8
 80067f4:	f77f af76 	ble.w	80066e4 <_printf_float+0x214>
 80067f8:	2301      	movs	r3, #1
 80067fa:	465a      	mov	r2, fp
 80067fc:	4631      	mov	r1, r6
 80067fe:	4628      	mov	r0, r5
 8006800:	47b8      	blx	r7
 8006802:	3001      	adds	r0, #1
 8006804:	f43f aeb0 	beq.w	8006568 <_printf_float+0x98>
 8006808:	f108 0801 	add.w	r8, r8, #1
 800680c:	e7ec      	b.n	80067e8 <_printf_float+0x318>
 800680e:	4642      	mov	r2, r8
 8006810:	4631      	mov	r1, r6
 8006812:	4628      	mov	r0, r5
 8006814:	47b8      	blx	r7
 8006816:	3001      	adds	r0, #1
 8006818:	d1c1      	bne.n	800679e <_printf_float+0x2ce>
 800681a:	e6a5      	b.n	8006568 <_printf_float+0x98>
 800681c:	2301      	movs	r3, #1
 800681e:	4631      	mov	r1, r6
 8006820:	4628      	mov	r0, r5
 8006822:	9206      	str	r2, [sp, #24]
 8006824:	47b8      	blx	r7
 8006826:	3001      	adds	r0, #1
 8006828:	f43f ae9e 	beq.w	8006568 <_printf_float+0x98>
 800682c:	9b07      	ldr	r3, [sp, #28]
 800682e:	9a06      	ldr	r2, [sp, #24]
 8006830:	3301      	adds	r3, #1
 8006832:	9307      	str	r3, [sp, #28]
 8006834:	e7b9      	b.n	80067aa <_printf_float+0x2da>
 8006836:	9b05      	ldr	r3, [sp, #20]
 8006838:	465a      	mov	r2, fp
 800683a:	4631      	mov	r1, r6
 800683c:	4628      	mov	r0, r5
 800683e:	47b8      	blx	r7
 8006840:	3001      	adds	r0, #1
 8006842:	d1bf      	bne.n	80067c4 <_printf_float+0x2f4>
 8006844:	e690      	b.n	8006568 <_printf_float+0x98>
 8006846:	9a06      	ldr	r2, [sp, #24]
 8006848:	464b      	mov	r3, r9
 800684a:	4442      	add	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d1c2      	bne.n	80067dc <_printf_float+0x30c>
 8006856:	e687      	b.n	8006568 <_printf_float+0x98>
 8006858:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800685c:	f1b9 0f01 	cmp.w	r9, #1
 8006860:	dc01      	bgt.n	8006866 <_printf_float+0x396>
 8006862:	07db      	lsls	r3, r3, #31
 8006864:	d536      	bpl.n	80068d4 <_printf_float+0x404>
 8006866:	2301      	movs	r3, #1
 8006868:	4642      	mov	r2, r8
 800686a:	4631      	mov	r1, r6
 800686c:	4628      	mov	r0, r5
 800686e:	47b8      	blx	r7
 8006870:	3001      	adds	r0, #1
 8006872:	f43f ae79 	beq.w	8006568 <_printf_float+0x98>
 8006876:	9b05      	ldr	r3, [sp, #20]
 8006878:	465a      	mov	r2, fp
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f ae71 	beq.w	8006568 <_printf_float+0x98>
 8006886:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800688a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800688e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006892:	f109 39ff 	add.w	r9, r9, #4294967295
 8006896:	d018      	beq.n	80068ca <_printf_float+0x3fa>
 8006898:	464b      	mov	r3, r9
 800689a:	f108 0201 	add.w	r2, r8, #1
 800689e:	4631      	mov	r1, r6
 80068a0:	4628      	mov	r0, r5
 80068a2:	47b8      	blx	r7
 80068a4:	3001      	adds	r0, #1
 80068a6:	d10c      	bne.n	80068c2 <_printf_float+0x3f2>
 80068a8:	e65e      	b.n	8006568 <_printf_float+0x98>
 80068aa:	2301      	movs	r3, #1
 80068ac:	465a      	mov	r2, fp
 80068ae:	4631      	mov	r1, r6
 80068b0:	4628      	mov	r0, r5
 80068b2:	47b8      	blx	r7
 80068b4:	3001      	adds	r0, #1
 80068b6:	f43f ae57 	beq.w	8006568 <_printf_float+0x98>
 80068ba:	f108 0801 	add.w	r8, r8, #1
 80068be:	45c8      	cmp	r8, r9
 80068c0:	dbf3      	blt.n	80068aa <_printf_float+0x3da>
 80068c2:	4653      	mov	r3, sl
 80068c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80068c8:	e6dc      	b.n	8006684 <_printf_float+0x1b4>
 80068ca:	f04f 0800 	mov.w	r8, #0
 80068ce:	f104 0b1a 	add.w	fp, r4, #26
 80068d2:	e7f4      	b.n	80068be <_printf_float+0x3ee>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4642      	mov	r2, r8
 80068d8:	e7e1      	b.n	800689e <_printf_float+0x3ce>
 80068da:	2301      	movs	r3, #1
 80068dc:	464a      	mov	r2, r9
 80068de:	4631      	mov	r1, r6
 80068e0:	4628      	mov	r0, r5
 80068e2:	47b8      	blx	r7
 80068e4:	3001      	adds	r0, #1
 80068e6:	f43f ae3f 	beq.w	8006568 <_printf_float+0x98>
 80068ea:	f108 0801 	add.w	r8, r8, #1
 80068ee:	68e3      	ldr	r3, [r4, #12]
 80068f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068f2:	1a5b      	subs	r3, r3, r1
 80068f4:	4543      	cmp	r3, r8
 80068f6:	dcf0      	bgt.n	80068da <_printf_float+0x40a>
 80068f8:	e6f8      	b.n	80066ec <_printf_float+0x21c>
 80068fa:	f04f 0800 	mov.w	r8, #0
 80068fe:	f104 0919 	add.w	r9, r4, #25
 8006902:	e7f4      	b.n	80068ee <_printf_float+0x41e>

08006904 <_printf_common>:
 8006904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006908:	4616      	mov	r6, r2
 800690a:	4698      	mov	r8, r3
 800690c:	688a      	ldr	r2, [r1, #8]
 800690e:	690b      	ldr	r3, [r1, #16]
 8006910:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006914:	4293      	cmp	r3, r2
 8006916:	bfb8      	it	lt
 8006918:	4613      	movlt	r3, r2
 800691a:	6033      	str	r3, [r6, #0]
 800691c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006920:	4607      	mov	r7, r0
 8006922:	460c      	mov	r4, r1
 8006924:	b10a      	cbz	r2, 800692a <_printf_common+0x26>
 8006926:	3301      	adds	r3, #1
 8006928:	6033      	str	r3, [r6, #0]
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	0699      	lsls	r1, r3, #26
 800692e:	bf42      	ittt	mi
 8006930:	6833      	ldrmi	r3, [r6, #0]
 8006932:	3302      	addmi	r3, #2
 8006934:	6033      	strmi	r3, [r6, #0]
 8006936:	6825      	ldr	r5, [r4, #0]
 8006938:	f015 0506 	ands.w	r5, r5, #6
 800693c:	d106      	bne.n	800694c <_printf_common+0x48>
 800693e:	f104 0a19 	add.w	sl, r4, #25
 8006942:	68e3      	ldr	r3, [r4, #12]
 8006944:	6832      	ldr	r2, [r6, #0]
 8006946:	1a9b      	subs	r3, r3, r2
 8006948:	42ab      	cmp	r3, r5
 800694a:	dc26      	bgt.n	800699a <_printf_common+0x96>
 800694c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	3b00      	subs	r3, #0
 8006954:	bf18      	it	ne
 8006956:	2301      	movne	r3, #1
 8006958:	0692      	lsls	r2, r2, #26
 800695a:	d42b      	bmi.n	80069b4 <_printf_common+0xb0>
 800695c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006960:	4641      	mov	r1, r8
 8006962:	4638      	mov	r0, r7
 8006964:	47c8      	blx	r9
 8006966:	3001      	adds	r0, #1
 8006968:	d01e      	beq.n	80069a8 <_printf_common+0xa4>
 800696a:	6823      	ldr	r3, [r4, #0]
 800696c:	6922      	ldr	r2, [r4, #16]
 800696e:	f003 0306 	and.w	r3, r3, #6
 8006972:	2b04      	cmp	r3, #4
 8006974:	bf02      	ittt	eq
 8006976:	68e5      	ldreq	r5, [r4, #12]
 8006978:	6833      	ldreq	r3, [r6, #0]
 800697a:	1aed      	subeq	r5, r5, r3
 800697c:	68a3      	ldr	r3, [r4, #8]
 800697e:	bf0c      	ite	eq
 8006980:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006984:	2500      	movne	r5, #0
 8006986:	4293      	cmp	r3, r2
 8006988:	bfc4      	itt	gt
 800698a:	1a9b      	subgt	r3, r3, r2
 800698c:	18ed      	addgt	r5, r5, r3
 800698e:	2600      	movs	r6, #0
 8006990:	341a      	adds	r4, #26
 8006992:	42b5      	cmp	r5, r6
 8006994:	d11a      	bne.n	80069cc <_printf_common+0xc8>
 8006996:	2000      	movs	r0, #0
 8006998:	e008      	b.n	80069ac <_printf_common+0xa8>
 800699a:	2301      	movs	r3, #1
 800699c:	4652      	mov	r2, sl
 800699e:	4641      	mov	r1, r8
 80069a0:	4638      	mov	r0, r7
 80069a2:	47c8      	blx	r9
 80069a4:	3001      	adds	r0, #1
 80069a6:	d103      	bne.n	80069b0 <_printf_common+0xac>
 80069a8:	f04f 30ff 	mov.w	r0, #4294967295
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	3501      	adds	r5, #1
 80069b2:	e7c6      	b.n	8006942 <_printf_common+0x3e>
 80069b4:	18e1      	adds	r1, r4, r3
 80069b6:	1c5a      	adds	r2, r3, #1
 80069b8:	2030      	movs	r0, #48	@ 0x30
 80069ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80069be:	4422      	add	r2, r4
 80069c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80069c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80069c8:	3302      	adds	r3, #2
 80069ca:	e7c7      	b.n	800695c <_printf_common+0x58>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4622      	mov	r2, r4
 80069d0:	4641      	mov	r1, r8
 80069d2:	4638      	mov	r0, r7
 80069d4:	47c8      	blx	r9
 80069d6:	3001      	adds	r0, #1
 80069d8:	d0e6      	beq.n	80069a8 <_printf_common+0xa4>
 80069da:	3601      	adds	r6, #1
 80069dc:	e7d9      	b.n	8006992 <_printf_common+0x8e>
	...

080069e0 <_printf_i>:
 80069e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	7e0f      	ldrb	r7, [r1, #24]
 80069e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80069e8:	2f78      	cmp	r7, #120	@ 0x78
 80069ea:	4691      	mov	r9, r2
 80069ec:	4680      	mov	r8, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	469a      	mov	sl, r3
 80069f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80069f6:	d807      	bhi.n	8006a08 <_printf_i+0x28>
 80069f8:	2f62      	cmp	r7, #98	@ 0x62
 80069fa:	d80a      	bhi.n	8006a12 <_printf_i+0x32>
 80069fc:	2f00      	cmp	r7, #0
 80069fe:	f000 80d2 	beq.w	8006ba6 <_printf_i+0x1c6>
 8006a02:	2f58      	cmp	r7, #88	@ 0x58
 8006a04:	f000 80b9 	beq.w	8006b7a <_printf_i+0x19a>
 8006a08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006a10:	e03a      	b.n	8006a88 <_printf_i+0xa8>
 8006a12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006a16:	2b15      	cmp	r3, #21
 8006a18:	d8f6      	bhi.n	8006a08 <_printf_i+0x28>
 8006a1a:	a101      	add	r1, pc, #4	@ (adr r1, 8006a20 <_printf_i+0x40>)
 8006a1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006a20:	08006a79 	.word	0x08006a79
 8006a24:	08006a8d 	.word	0x08006a8d
 8006a28:	08006a09 	.word	0x08006a09
 8006a2c:	08006a09 	.word	0x08006a09
 8006a30:	08006a09 	.word	0x08006a09
 8006a34:	08006a09 	.word	0x08006a09
 8006a38:	08006a8d 	.word	0x08006a8d
 8006a3c:	08006a09 	.word	0x08006a09
 8006a40:	08006a09 	.word	0x08006a09
 8006a44:	08006a09 	.word	0x08006a09
 8006a48:	08006a09 	.word	0x08006a09
 8006a4c:	08006b8d 	.word	0x08006b8d
 8006a50:	08006ab7 	.word	0x08006ab7
 8006a54:	08006b47 	.word	0x08006b47
 8006a58:	08006a09 	.word	0x08006a09
 8006a5c:	08006a09 	.word	0x08006a09
 8006a60:	08006baf 	.word	0x08006baf
 8006a64:	08006a09 	.word	0x08006a09
 8006a68:	08006ab7 	.word	0x08006ab7
 8006a6c:	08006a09 	.word	0x08006a09
 8006a70:	08006a09 	.word	0x08006a09
 8006a74:	08006b4f 	.word	0x08006b4f
 8006a78:	6833      	ldr	r3, [r6, #0]
 8006a7a:	1d1a      	adds	r2, r3, #4
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	6032      	str	r2, [r6, #0]
 8006a80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09d      	b.n	8006bc8 <_printf_i+0x1e8>
 8006a8c:	6833      	ldr	r3, [r6, #0]
 8006a8e:	6820      	ldr	r0, [r4, #0]
 8006a90:	1d19      	adds	r1, r3, #4
 8006a92:	6031      	str	r1, [r6, #0]
 8006a94:	0606      	lsls	r6, r0, #24
 8006a96:	d501      	bpl.n	8006a9c <_printf_i+0xbc>
 8006a98:	681d      	ldr	r5, [r3, #0]
 8006a9a:	e003      	b.n	8006aa4 <_printf_i+0xc4>
 8006a9c:	0645      	lsls	r5, r0, #25
 8006a9e:	d5fb      	bpl.n	8006a98 <_printf_i+0xb8>
 8006aa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006aa4:	2d00      	cmp	r5, #0
 8006aa6:	da03      	bge.n	8006ab0 <_printf_i+0xd0>
 8006aa8:	232d      	movs	r3, #45	@ 0x2d
 8006aaa:	426d      	negs	r5, r5
 8006aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ab0:	4859      	ldr	r0, [pc, #356]	@ (8006c18 <_printf_i+0x238>)
 8006ab2:	230a      	movs	r3, #10
 8006ab4:	e011      	b.n	8006ada <_printf_i+0xfa>
 8006ab6:	6821      	ldr	r1, [r4, #0]
 8006ab8:	6833      	ldr	r3, [r6, #0]
 8006aba:	0608      	lsls	r0, r1, #24
 8006abc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ac0:	d402      	bmi.n	8006ac8 <_printf_i+0xe8>
 8006ac2:	0649      	lsls	r1, r1, #25
 8006ac4:	bf48      	it	mi
 8006ac6:	b2ad      	uxthmi	r5, r5
 8006ac8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006aca:	4853      	ldr	r0, [pc, #332]	@ (8006c18 <_printf_i+0x238>)
 8006acc:	6033      	str	r3, [r6, #0]
 8006ace:	bf14      	ite	ne
 8006ad0:	230a      	movne	r3, #10
 8006ad2:	2308      	moveq	r3, #8
 8006ad4:	2100      	movs	r1, #0
 8006ad6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ada:	6866      	ldr	r6, [r4, #4]
 8006adc:	60a6      	str	r6, [r4, #8]
 8006ade:	2e00      	cmp	r6, #0
 8006ae0:	bfa2      	ittt	ge
 8006ae2:	6821      	ldrge	r1, [r4, #0]
 8006ae4:	f021 0104 	bicge.w	r1, r1, #4
 8006ae8:	6021      	strge	r1, [r4, #0]
 8006aea:	b90d      	cbnz	r5, 8006af0 <_printf_i+0x110>
 8006aec:	2e00      	cmp	r6, #0
 8006aee:	d04b      	beq.n	8006b88 <_printf_i+0x1a8>
 8006af0:	4616      	mov	r6, r2
 8006af2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006af6:	fb03 5711 	mls	r7, r3, r1, r5
 8006afa:	5dc7      	ldrb	r7, [r0, r7]
 8006afc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006b00:	462f      	mov	r7, r5
 8006b02:	42bb      	cmp	r3, r7
 8006b04:	460d      	mov	r5, r1
 8006b06:	d9f4      	bls.n	8006af2 <_printf_i+0x112>
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d10b      	bne.n	8006b24 <_printf_i+0x144>
 8006b0c:	6823      	ldr	r3, [r4, #0]
 8006b0e:	07df      	lsls	r7, r3, #31
 8006b10:	d508      	bpl.n	8006b24 <_printf_i+0x144>
 8006b12:	6923      	ldr	r3, [r4, #16]
 8006b14:	6861      	ldr	r1, [r4, #4]
 8006b16:	4299      	cmp	r1, r3
 8006b18:	bfde      	ittt	le
 8006b1a:	2330      	movle	r3, #48	@ 0x30
 8006b1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006b20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006b24:	1b92      	subs	r2, r2, r6
 8006b26:	6122      	str	r2, [r4, #16]
 8006b28:	f8cd a000 	str.w	sl, [sp]
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	aa03      	add	r2, sp, #12
 8006b30:	4621      	mov	r1, r4
 8006b32:	4640      	mov	r0, r8
 8006b34:	f7ff fee6 	bl	8006904 <_printf_common>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d14a      	bne.n	8006bd2 <_printf_i+0x1f2>
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	b004      	add	sp, #16
 8006b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b46:	6823      	ldr	r3, [r4, #0]
 8006b48:	f043 0320 	orr.w	r3, r3, #32
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	4833      	ldr	r0, [pc, #204]	@ (8006c1c <_printf_i+0x23c>)
 8006b50:	2778      	movs	r7, #120	@ 0x78
 8006b52:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006b56:	6823      	ldr	r3, [r4, #0]
 8006b58:	6831      	ldr	r1, [r6, #0]
 8006b5a:	061f      	lsls	r7, r3, #24
 8006b5c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b60:	d402      	bmi.n	8006b68 <_printf_i+0x188>
 8006b62:	065f      	lsls	r7, r3, #25
 8006b64:	bf48      	it	mi
 8006b66:	b2ad      	uxthmi	r5, r5
 8006b68:	6031      	str	r1, [r6, #0]
 8006b6a:	07d9      	lsls	r1, r3, #31
 8006b6c:	bf44      	itt	mi
 8006b6e:	f043 0320 	orrmi.w	r3, r3, #32
 8006b72:	6023      	strmi	r3, [r4, #0]
 8006b74:	b11d      	cbz	r5, 8006b7e <_printf_i+0x19e>
 8006b76:	2310      	movs	r3, #16
 8006b78:	e7ac      	b.n	8006ad4 <_printf_i+0xf4>
 8006b7a:	4827      	ldr	r0, [pc, #156]	@ (8006c18 <_printf_i+0x238>)
 8006b7c:	e7e9      	b.n	8006b52 <_printf_i+0x172>
 8006b7e:	6823      	ldr	r3, [r4, #0]
 8006b80:	f023 0320 	bic.w	r3, r3, #32
 8006b84:	6023      	str	r3, [r4, #0]
 8006b86:	e7f6      	b.n	8006b76 <_printf_i+0x196>
 8006b88:	4616      	mov	r6, r2
 8006b8a:	e7bd      	b.n	8006b08 <_printf_i+0x128>
 8006b8c:	6833      	ldr	r3, [r6, #0]
 8006b8e:	6825      	ldr	r5, [r4, #0]
 8006b90:	6961      	ldr	r1, [r4, #20]
 8006b92:	1d18      	adds	r0, r3, #4
 8006b94:	6030      	str	r0, [r6, #0]
 8006b96:	062e      	lsls	r6, r5, #24
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	d501      	bpl.n	8006ba0 <_printf_i+0x1c0>
 8006b9c:	6019      	str	r1, [r3, #0]
 8006b9e:	e002      	b.n	8006ba6 <_printf_i+0x1c6>
 8006ba0:	0668      	lsls	r0, r5, #25
 8006ba2:	d5fb      	bpl.n	8006b9c <_printf_i+0x1bc>
 8006ba4:	8019      	strh	r1, [r3, #0]
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	6123      	str	r3, [r4, #16]
 8006baa:	4616      	mov	r6, r2
 8006bac:	e7bc      	b.n	8006b28 <_printf_i+0x148>
 8006bae:	6833      	ldr	r3, [r6, #0]
 8006bb0:	1d1a      	adds	r2, r3, #4
 8006bb2:	6032      	str	r2, [r6, #0]
 8006bb4:	681e      	ldr	r6, [r3, #0]
 8006bb6:	6862      	ldr	r2, [r4, #4]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7f9 fb90 	bl	80002e0 <memchr>
 8006bc0:	b108      	cbz	r0, 8006bc6 <_printf_i+0x1e6>
 8006bc2:	1b80      	subs	r0, r0, r6
 8006bc4:	6060      	str	r0, [r4, #4]
 8006bc6:	6863      	ldr	r3, [r4, #4]
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006bd0:	e7aa      	b.n	8006b28 <_printf_i+0x148>
 8006bd2:	6923      	ldr	r3, [r4, #16]
 8006bd4:	4632      	mov	r2, r6
 8006bd6:	4649      	mov	r1, r9
 8006bd8:	4640      	mov	r0, r8
 8006bda:	47d0      	blx	sl
 8006bdc:	3001      	adds	r0, #1
 8006bde:	d0ad      	beq.n	8006b3c <_printf_i+0x15c>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	079b      	lsls	r3, r3, #30
 8006be4:	d413      	bmi.n	8006c0e <_printf_i+0x22e>
 8006be6:	68e0      	ldr	r0, [r4, #12]
 8006be8:	9b03      	ldr	r3, [sp, #12]
 8006bea:	4298      	cmp	r0, r3
 8006bec:	bfb8      	it	lt
 8006bee:	4618      	movlt	r0, r3
 8006bf0:	e7a6      	b.n	8006b40 <_printf_i+0x160>
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	4632      	mov	r2, r6
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	4640      	mov	r0, r8
 8006bfa:	47d0      	blx	sl
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d09d      	beq.n	8006b3c <_printf_i+0x15c>
 8006c00:	3501      	adds	r5, #1
 8006c02:	68e3      	ldr	r3, [r4, #12]
 8006c04:	9903      	ldr	r1, [sp, #12]
 8006c06:	1a5b      	subs	r3, r3, r1
 8006c08:	42ab      	cmp	r3, r5
 8006c0a:	dcf2      	bgt.n	8006bf2 <_printf_i+0x212>
 8006c0c:	e7eb      	b.n	8006be6 <_printf_i+0x206>
 8006c0e:	2500      	movs	r5, #0
 8006c10:	f104 0619 	add.w	r6, r4, #25
 8006c14:	e7f5      	b.n	8006c02 <_printf_i+0x222>
 8006c16:	bf00      	nop
 8006c18:	0800af46 	.word	0x0800af46
 8006c1c:	0800af57 	.word	0x0800af57

08006c20 <_scanf_float>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	b087      	sub	sp, #28
 8006c26:	4617      	mov	r7, r2
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	688b      	ldr	r3, [r1, #8]
 8006c2c:	1e5a      	subs	r2, r3, #1
 8006c2e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006c32:	bf81      	itttt	hi
 8006c34:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006c38:	eb03 0b05 	addhi.w	fp, r3, r5
 8006c3c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006c40:	608b      	strhi	r3, [r1, #8]
 8006c42:	680b      	ldr	r3, [r1, #0]
 8006c44:	460a      	mov	r2, r1
 8006c46:	f04f 0500 	mov.w	r5, #0
 8006c4a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006c4e:	f842 3b1c 	str.w	r3, [r2], #28
 8006c52:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006c56:	4680      	mov	r8, r0
 8006c58:	460c      	mov	r4, r1
 8006c5a:	bf98      	it	ls
 8006c5c:	f04f 0b00 	movls.w	fp, #0
 8006c60:	9201      	str	r2, [sp, #4]
 8006c62:	4616      	mov	r6, r2
 8006c64:	46aa      	mov	sl, r5
 8006c66:	46a9      	mov	r9, r5
 8006c68:	9502      	str	r5, [sp, #8]
 8006c6a:	68a2      	ldr	r2, [r4, #8]
 8006c6c:	b152      	cbz	r2, 8006c84 <_scanf_float+0x64>
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	2b4e      	cmp	r3, #78	@ 0x4e
 8006c74:	d864      	bhi.n	8006d40 <_scanf_float+0x120>
 8006c76:	2b40      	cmp	r3, #64	@ 0x40
 8006c78:	d83c      	bhi.n	8006cf4 <_scanf_float+0xd4>
 8006c7a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006c7e:	b2c8      	uxtb	r0, r1
 8006c80:	280e      	cmp	r0, #14
 8006c82:	d93a      	bls.n	8006cfa <_scanf_float+0xda>
 8006c84:	f1b9 0f00 	cmp.w	r9, #0
 8006c88:	d003      	beq.n	8006c92 <_scanf_float+0x72>
 8006c8a:	6823      	ldr	r3, [r4, #0]
 8006c8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c96:	f1ba 0f01 	cmp.w	sl, #1
 8006c9a:	f200 8117 	bhi.w	8006ecc <_scanf_float+0x2ac>
 8006c9e:	9b01      	ldr	r3, [sp, #4]
 8006ca0:	429e      	cmp	r6, r3
 8006ca2:	f200 8108 	bhi.w	8006eb6 <_scanf_float+0x296>
 8006ca6:	2001      	movs	r0, #1
 8006ca8:	b007      	add	sp, #28
 8006caa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cae:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006cb2:	2a0d      	cmp	r2, #13
 8006cb4:	d8e6      	bhi.n	8006c84 <_scanf_float+0x64>
 8006cb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cbc <_scanf_float+0x9c>)
 8006cb8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006cbc:	08006e03 	.word	0x08006e03
 8006cc0:	08006c85 	.word	0x08006c85
 8006cc4:	08006c85 	.word	0x08006c85
 8006cc8:	08006c85 	.word	0x08006c85
 8006ccc:	08006e63 	.word	0x08006e63
 8006cd0:	08006e3b 	.word	0x08006e3b
 8006cd4:	08006c85 	.word	0x08006c85
 8006cd8:	08006c85 	.word	0x08006c85
 8006cdc:	08006e11 	.word	0x08006e11
 8006ce0:	08006c85 	.word	0x08006c85
 8006ce4:	08006c85 	.word	0x08006c85
 8006ce8:	08006c85 	.word	0x08006c85
 8006cec:	08006c85 	.word	0x08006c85
 8006cf0:	08006dc9 	.word	0x08006dc9
 8006cf4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006cf8:	e7db      	b.n	8006cb2 <_scanf_float+0x92>
 8006cfa:	290e      	cmp	r1, #14
 8006cfc:	d8c2      	bhi.n	8006c84 <_scanf_float+0x64>
 8006cfe:	a001      	add	r0, pc, #4	@ (adr r0, 8006d04 <_scanf_float+0xe4>)
 8006d00:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006d04:	08006db9 	.word	0x08006db9
 8006d08:	08006c85 	.word	0x08006c85
 8006d0c:	08006db9 	.word	0x08006db9
 8006d10:	08006e4f 	.word	0x08006e4f
 8006d14:	08006c85 	.word	0x08006c85
 8006d18:	08006d61 	.word	0x08006d61
 8006d1c:	08006d9f 	.word	0x08006d9f
 8006d20:	08006d9f 	.word	0x08006d9f
 8006d24:	08006d9f 	.word	0x08006d9f
 8006d28:	08006d9f 	.word	0x08006d9f
 8006d2c:	08006d9f 	.word	0x08006d9f
 8006d30:	08006d9f 	.word	0x08006d9f
 8006d34:	08006d9f 	.word	0x08006d9f
 8006d38:	08006d9f 	.word	0x08006d9f
 8006d3c:	08006d9f 	.word	0x08006d9f
 8006d40:	2b6e      	cmp	r3, #110	@ 0x6e
 8006d42:	d809      	bhi.n	8006d58 <_scanf_float+0x138>
 8006d44:	2b60      	cmp	r3, #96	@ 0x60
 8006d46:	d8b2      	bhi.n	8006cae <_scanf_float+0x8e>
 8006d48:	2b54      	cmp	r3, #84	@ 0x54
 8006d4a:	d07b      	beq.n	8006e44 <_scanf_float+0x224>
 8006d4c:	2b59      	cmp	r3, #89	@ 0x59
 8006d4e:	d199      	bne.n	8006c84 <_scanf_float+0x64>
 8006d50:	2d07      	cmp	r5, #7
 8006d52:	d197      	bne.n	8006c84 <_scanf_float+0x64>
 8006d54:	2508      	movs	r5, #8
 8006d56:	e02c      	b.n	8006db2 <_scanf_float+0x192>
 8006d58:	2b74      	cmp	r3, #116	@ 0x74
 8006d5a:	d073      	beq.n	8006e44 <_scanf_float+0x224>
 8006d5c:	2b79      	cmp	r3, #121	@ 0x79
 8006d5e:	e7f6      	b.n	8006d4e <_scanf_float+0x12e>
 8006d60:	6821      	ldr	r1, [r4, #0]
 8006d62:	05c8      	lsls	r0, r1, #23
 8006d64:	d51b      	bpl.n	8006d9e <_scanf_float+0x17e>
 8006d66:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006d6a:	6021      	str	r1, [r4, #0]
 8006d6c:	f109 0901 	add.w	r9, r9, #1
 8006d70:	f1bb 0f00 	cmp.w	fp, #0
 8006d74:	d003      	beq.n	8006d7e <_scanf_float+0x15e>
 8006d76:	3201      	adds	r2, #1
 8006d78:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006d7c:	60a2      	str	r2, [r4, #8]
 8006d7e:	68a3      	ldr	r3, [r4, #8]
 8006d80:	3b01      	subs	r3, #1
 8006d82:	60a3      	str	r3, [r4, #8]
 8006d84:	6923      	ldr	r3, [r4, #16]
 8006d86:	3301      	adds	r3, #1
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	3b01      	subs	r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	607b      	str	r3, [r7, #4]
 8006d92:	f340 8087 	ble.w	8006ea4 <_scanf_float+0x284>
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	603b      	str	r3, [r7, #0]
 8006d9c:	e765      	b.n	8006c6a <_scanf_float+0x4a>
 8006d9e:	eb1a 0105 	adds.w	r1, sl, r5
 8006da2:	f47f af6f 	bne.w	8006c84 <_scanf_float+0x64>
 8006da6:	6822      	ldr	r2, [r4, #0]
 8006da8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006dac:	6022      	str	r2, [r4, #0]
 8006dae:	460d      	mov	r5, r1
 8006db0:	468a      	mov	sl, r1
 8006db2:	f806 3b01 	strb.w	r3, [r6], #1
 8006db6:	e7e2      	b.n	8006d7e <_scanf_float+0x15e>
 8006db8:	6822      	ldr	r2, [r4, #0]
 8006dba:	0610      	lsls	r0, r2, #24
 8006dbc:	f57f af62 	bpl.w	8006c84 <_scanf_float+0x64>
 8006dc0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dc4:	6022      	str	r2, [r4, #0]
 8006dc6:	e7f4      	b.n	8006db2 <_scanf_float+0x192>
 8006dc8:	f1ba 0f00 	cmp.w	sl, #0
 8006dcc:	d10e      	bne.n	8006dec <_scanf_float+0x1cc>
 8006dce:	f1b9 0f00 	cmp.w	r9, #0
 8006dd2:	d10e      	bne.n	8006df2 <_scanf_float+0x1d2>
 8006dd4:	6822      	ldr	r2, [r4, #0]
 8006dd6:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006dda:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006dde:	d108      	bne.n	8006df2 <_scanf_float+0x1d2>
 8006de0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006de4:	6022      	str	r2, [r4, #0]
 8006de6:	f04f 0a01 	mov.w	sl, #1
 8006dea:	e7e2      	b.n	8006db2 <_scanf_float+0x192>
 8006dec:	f1ba 0f02 	cmp.w	sl, #2
 8006df0:	d055      	beq.n	8006e9e <_scanf_float+0x27e>
 8006df2:	2d01      	cmp	r5, #1
 8006df4:	d002      	beq.n	8006dfc <_scanf_float+0x1dc>
 8006df6:	2d04      	cmp	r5, #4
 8006df8:	f47f af44 	bne.w	8006c84 <_scanf_float+0x64>
 8006dfc:	3501      	adds	r5, #1
 8006dfe:	b2ed      	uxtb	r5, r5
 8006e00:	e7d7      	b.n	8006db2 <_scanf_float+0x192>
 8006e02:	f1ba 0f01 	cmp.w	sl, #1
 8006e06:	f47f af3d 	bne.w	8006c84 <_scanf_float+0x64>
 8006e0a:	f04f 0a02 	mov.w	sl, #2
 8006e0e:	e7d0      	b.n	8006db2 <_scanf_float+0x192>
 8006e10:	b97d      	cbnz	r5, 8006e32 <_scanf_float+0x212>
 8006e12:	f1b9 0f00 	cmp.w	r9, #0
 8006e16:	f47f af38 	bne.w	8006c8a <_scanf_float+0x6a>
 8006e1a:	6822      	ldr	r2, [r4, #0]
 8006e1c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006e20:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006e24:	f040 8101 	bne.w	800702a <_scanf_float+0x40a>
 8006e28:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e2c:	6022      	str	r2, [r4, #0]
 8006e2e:	2501      	movs	r5, #1
 8006e30:	e7bf      	b.n	8006db2 <_scanf_float+0x192>
 8006e32:	2d03      	cmp	r5, #3
 8006e34:	d0e2      	beq.n	8006dfc <_scanf_float+0x1dc>
 8006e36:	2d05      	cmp	r5, #5
 8006e38:	e7de      	b.n	8006df8 <_scanf_float+0x1d8>
 8006e3a:	2d02      	cmp	r5, #2
 8006e3c:	f47f af22 	bne.w	8006c84 <_scanf_float+0x64>
 8006e40:	2503      	movs	r5, #3
 8006e42:	e7b6      	b.n	8006db2 <_scanf_float+0x192>
 8006e44:	2d06      	cmp	r5, #6
 8006e46:	f47f af1d 	bne.w	8006c84 <_scanf_float+0x64>
 8006e4a:	2507      	movs	r5, #7
 8006e4c:	e7b1      	b.n	8006db2 <_scanf_float+0x192>
 8006e4e:	6822      	ldr	r2, [r4, #0]
 8006e50:	0591      	lsls	r1, r2, #22
 8006e52:	f57f af17 	bpl.w	8006c84 <_scanf_float+0x64>
 8006e56:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006e5a:	6022      	str	r2, [r4, #0]
 8006e5c:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e60:	e7a7      	b.n	8006db2 <_scanf_float+0x192>
 8006e62:	6822      	ldr	r2, [r4, #0]
 8006e64:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006e68:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006e6c:	d006      	beq.n	8006e7c <_scanf_float+0x25c>
 8006e6e:	0550      	lsls	r0, r2, #21
 8006e70:	f57f af08 	bpl.w	8006c84 <_scanf_float+0x64>
 8006e74:	f1b9 0f00 	cmp.w	r9, #0
 8006e78:	f000 80d7 	beq.w	800702a <_scanf_float+0x40a>
 8006e7c:	0591      	lsls	r1, r2, #22
 8006e7e:	bf58      	it	pl
 8006e80:	9902      	ldrpl	r1, [sp, #8]
 8006e82:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006e86:	bf58      	it	pl
 8006e88:	eba9 0101 	subpl.w	r1, r9, r1
 8006e8c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006e90:	bf58      	it	pl
 8006e92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006e96:	6022      	str	r2, [r4, #0]
 8006e98:	f04f 0900 	mov.w	r9, #0
 8006e9c:	e789      	b.n	8006db2 <_scanf_float+0x192>
 8006e9e:	f04f 0a03 	mov.w	sl, #3
 8006ea2:	e786      	b.n	8006db2 <_scanf_float+0x192>
 8006ea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006ea8:	4639      	mov	r1, r7
 8006eaa:	4640      	mov	r0, r8
 8006eac:	4798      	blx	r3
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f43f aedb 	beq.w	8006c6a <_scanf_float+0x4a>
 8006eb4:	e6e6      	b.n	8006c84 <_scanf_float+0x64>
 8006eb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4798      	blx	r3
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	3b01      	subs	r3, #1
 8006ec8:	6123      	str	r3, [r4, #16]
 8006eca:	e6e8      	b.n	8006c9e <_scanf_float+0x7e>
 8006ecc:	1e6b      	subs	r3, r5, #1
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d824      	bhi.n	8006f1c <_scanf_float+0x2fc>
 8006ed2:	2d02      	cmp	r5, #2
 8006ed4:	d836      	bhi.n	8006f44 <_scanf_float+0x324>
 8006ed6:	9b01      	ldr	r3, [sp, #4]
 8006ed8:	429e      	cmp	r6, r3
 8006eda:	f67f aee4 	bls.w	8006ca6 <_scanf_float+0x86>
 8006ede:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ee2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4640      	mov	r0, r8
 8006eea:	4798      	blx	r3
 8006eec:	6923      	ldr	r3, [r4, #16]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	6123      	str	r3, [r4, #16]
 8006ef2:	e7f0      	b.n	8006ed6 <_scanf_float+0x2b6>
 8006ef4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006ef8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006efc:	463a      	mov	r2, r7
 8006efe:	4640      	mov	r0, r8
 8006f00:	4798      	blx	r3
 8006f02:	6923      	ldr	r3, [r4, #16]
 8006f04:	3b01      	subs	r3, #1
 8006f06:	6123      	str	r3, [r4, #16]
 8006f08:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f0c:	fa5f fa8a 	uxtb.w	sl, sl
 8006f10:	f1ba 0f02 	cmp.w	sl, #2
 8006f14:	d1ee      	bne.n	8006ef4 <_scanf_float+0x2d4>
 8006f16:	3d03      	subs	r5, #3
 8006f18:	b2ed      	uxtb	r5, r5
 8006f1a:	1b76      	subs	r6, r6, r5
 8006f1c:	6823      	ldr	r3, [r4, #0]
 8006f1e:	05da      	lsls	r2, r3, #23
 8006f20:	d530      	bpl.n	8006f84 <_scanf_float+0x364>
 8006f22:	055b      	lsls	r3, r3, #21
 8006f24:	d511      	bpl.n	8006f4a <_scanf_float+0x32a>
 8006f26:	9b01      	ldr	r3, [sp, #4]
 8006f28:	429e      	cmp	r6, r3
 8006f2a:	f67f aebc 	bls.w	8006ca6 <_scanf_float+0x86>
 8006f2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006f36:	463a      	mov	r2, r7
 8006f38:	4640      	mov	r0, r8
 8006f3a:	4798      	blx	r3
 8006f3c:	6923      	ldr	r3, [r4, #16]
 8006f3e:	3b01      	subs	r3, #1
 8006f40:	6123      	str	r3, [r4, #16]
 8006f42:	e7f0      	b.n	8006f26 <_scanf_float+0x306>
 8006f44:	46aa      	mov	sl, r5
 8006f46:	46b3      	mov	fp, r6
 8006f48:	e7de      	b.n	8006f08 <_scanf_float+0x2e8>
 8006f4a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006f4e:	6923      	ldr	r3, [r4, #16]
 8006f50:	2965      	cmp	r1, #101	@ 0x65
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f56:	f106 35ff 	add.w	r5, r6, #4294967295
 8006f5a:	6123      	str	r3, [r4, #16]
 8006f5c:	d00c      	beq.n	8006f78 <_scanf_float+0x358>
 8006f5e:	2945      	cmp	r1, #69	@ 0x45
 8006f60:	d00a      	beq.n	8006f78 <_scanf_float+0x358>
 8006f62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f66:	463a      	mov	r2, r7
 8006f68:	4640      	mov	r0, r8
 8006f6a:	4798      	blx	r3
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006f72:	3b01      	subs	r3, #1
 8006f74:	1eb5      	subs	r5, r6, #2
 8006f76:	6123      	str	r3, [r4, #16]
 8006f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006f7c:	463a      	mov	r2, r7
 8006f7e:	4640      	mov	r0, r8
 8006f80:	4798      	blx	r3
 8006f82:	462e      	mov	r6, r5
 8006f84:	6822      	ldr	r2, [r4, #0]
 8006f86:	f012 0210 	ands.w	r2, r2, #16
 8006f8a:	d001      	beq.n	8006f90 <_scanf_float+0x370>
 8006f8c:	2000      	movs	r0, #0
 8006f8e:	e68b      	b.n	8006ca8 <_scanf_float+0x88>
 8006f90:	7032      	strb	r2, [r6, #0]
 8006f92:	6823      	ldr	r3, [r4, #0]
 8006f94:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006f9c:	d11a      	bne.n	8006fd4 <_scanf_float+0x3b4>
 8006f9e:	9b02      	ldr	r3, [sp, #8]
 8006fa0:	454b      	cmp	r3, r9
 8006fa2:	eba3 0209 	sub.w	r2, r3, r9
 8006fa6:	d121      	bne.n	8006fec <_scanf_float+0x3cc>
 8006fa8:	9901      	ldr	r1, [sp, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	4640      	mov	r0, r8
 8006fae:	f002 fb4d 	bl	800964c <_strtod_r>
 8006fb2:	9b03      	ldr	r3, [sp, #12]
 8006fb4:	6821      	ldr	r1, [r4, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f011 0f02 	tst.w	r1, #2
 8006fbc:	f103 0204 	add.w	r2, r3, #4
 8006fc0:	d01f      	beq.n	8007002 <_scanf_float+0x3e2>
 8006fc2:	9903      	ldr	r1, [sp, #12]
 8006fc4:	600a      	str	r2, [r1, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	ed83 0b00 	vstr	d0, [r3]
 8006fcc:	68e3      	ldr	r3, [r4, #12]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	60e3      	str	r3, [r4, #12]
 8006fd2:	e7db      	b.n	8006f8c <_scanf_float+0x36c>
 8006fd4:	9b04      	ldr	r3, [sp, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d0e6      	beq.n	8006fa8 <_scanf_float+0x388>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	230a      	movs	r3, #10
 8006fde:	3101      	adds	r1, #1
 8006fe0:	4640      	mov	r0, r8
 8006fe2:	f002 fbb3 	bl	800974c <_strtol_r>
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	9e05      	ldr	r6, [sp, #20]
 8006fea:	1ac2      	subs	r2, r0, r3
 8006fec:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006ff0:	429e      	cmp	r6, r3
 8006ff2:	bf28      	it	cs
 8006ff4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006ff8:	490d      	ldr	r1, [pc, #52]	@ (8007030 <_scanf_float+0x410>)
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f000 f8de 	bl	80071bc <siprintf>
 8007000:	e7d2      	b.n	8006fa8 <_scanf_float+0x388>
 8007002:	f011 0f04 	tst.w	r1, #4
 8007006:	9903      	ldr	r1, [sp, #12]
 8007008:	600a      	str	r2, [r1, #0]
 800700a:	d1dc      	bne.n	8006fc6 <_scanf_float+0x3a6>
 800700c:	eeb4 0b40 	vcmp.f64	d0, d0
 8007010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007014:	681d      	ldr	r5, [r3, #0]
 8007016:	d705      	bvc.n	8007024 <_scanf_float+0x404>
 8007018:	4806      	ldr	r0, [pc, #24]	@ (8007034 <_scanf_float+0x414>)
 800701a:	f000 f9d1 	bl	80073c0 <nanf>
 800701e:	ed85 0a00 	vstr	s0, [r5]
 8007022:	e7d3      	b.n	8006fcc <_scanf_float+0x3ac>
 8007024:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007028:	e7f9      	b.n	800701e <_scanf_float+0x3fe>
 800702a:	f04f 0900 	mov.w	r9, #0
 800702e:	e630      	b.n	8006c92 <_scanf_float+0x72>
 8007030:	0800af68 	.word	0x0800af68
 8007034:	0800b2fd 	.word	0x0800b2fd

08007038 <std>:
 8007038:	2300      	movs	r3, #0
 800703a:	b510      	push	{r4, lr}
 800703c:	4604      	mov	r4, r0
 800703e:	e9c0 3300 	strd	r3, r3, [r0]
 8007042:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007046:	6083      	str	r3, [r0, #8]
 8007048:	8181      	strh	r1, [r0, #12]
 800704a:	6643      	str	r3, [r0, #100]	@ 0x64
 800704c:	81c2      	strh	r2, [r0, #14]
 800704e:	6183      	str	r3, [r0, #24]
 8007050:	4619      	mov	r1, r3
 8007052:	2208      	movs	r2, #8
 8007054:	305c      	adds	r0, #92	@ 0x5c
 8007056:	f000 f924 	bl	80072a2 <memset>
 800705a:	4b0d      	ldr	r3, [pc, #52]	@ (8007090 <std+0x58>)
 800705c:	6263      	str	r3, [r4, #36]	@ 0x24
 800705e:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <std+0x5c>)
 8007060:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007062:	4b0d      	ldr	r3, [pc, #52]	@ (8007098 <std+0x60>)
 8007064:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <std+0x64>)
 8007068:	6323      	str	r3, [r4, #48]	@ 0x30
 800706a:	4b0d      	ldr	r3, [pc, #52]	@ (80070a0 <std+0x68>)
 800706c:	6224      	str	r4, [r4, #32]
 800706e:	429c      	cmp	r4, r3
 8007070:	d006      	beq.n	8007080 <std+0x48>
 8007072:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007076:	4294      	cmp	r4, r2
 8007078:	d002      	beq.n	8007080 <std+0x48>
 800707a:	33d0      	adds	r3, #208	@ 0xd0
 800707c:	429c      	cmp	r4, r3
 800707e:	d105      	bne.n	800708c <std+0x54>
 8007080:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007088:	f000 b988 	b.w	800739c <__retarget_lock_init_recursive>
 800708c:	bd10      	pop	{r4, pc}
 800708e:	bf00      	nop
 8007090:	080071fd 	.word	0x080071fd
 8007094:	0800721f 	.word	0x0800721f
 8007098:	08007257 	.word	0x08007257
 800709c:	0800727b 	.word	0x0800727b
 80070a0:	24000730 	.word	0x24000730

080070a4 <stdio_exit_handler>:
 80070a4:	4a02      	ldr	r2, [pc, #8]	@ (80070b0 <stdio_exit_handler+0xc>)
 80070a6:	4903      	ldr	r1, [pc, #12]	@ (80070b4 <stdio_exit_handler+0x10>)
 80070a8:	4803      	ldr	r0, [pc, #12]	@ (80070b8 <stdio_exit_handler+0x14>)
 80070aa:	f000 b869 	b.w	8007180 <_fwalk_sglue>
 80070ae:	bf00      	nop
 80070b0:	24000010 	.word	0x24000010
 80070b4:	08009b09 	.word	0x08009b09
 80070b8:	24000020 	.word	0x24000020

080070bc <cleanup_stdio>:
 80070bc:	6841      	ldr	r1, [r0, #4]
 80070be:	4b0c      	ldr	r3, [pc, #48]	@ (80070f0 <cleanup_stdio+0x34>)
 80070c0:	4299      	cmp	r1, r3
 80070c2:	b510      	push	{r4, lr}
 80070c4:	4604      	mov	r4, r0
 80070c6:	d001      	beq.n	80070cc <cleanup_stdio+0x10>
 80070c8:	f002 fd1e 	bl	8009b08 <_fflush_r>
 80070cc:	68a1      	ldr	r1, [r4, #8]
 80070ce:	4b09      	ldr	r3, [pc, #36]	@ (80070f4 <cleanup_stdio+0x38>)
 80070d0:	4299      	cmp	r1, r3
 80070d2:	d002      	beq.n	80070da <cleanup_stdio+0x1e>
 80070d4:	4620      	mov	r0, r4
 80070d6:	f002 fd17 	bl	8009b08 <_fflush_r>
 80070da:	68e1      	ldr	r1, [r4, #12]
 80070dc:	4b06      	ldr	r3, [pc, #24]	@ (80070f8 <cleanup_stdio+0x3c>)
 80070de:	4299      	cmp	r1, r3
 80070e0:	d004      	beq.n	80070ec <cleanup_stdio+0x30>
 80070e2:	4620      	mov	r0, r4
 80070e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070e8:	f002 bd0e 	b.w	8009b08 <_fflush_r>
 80070ec:	bd10      	pop	{r4, pc}
 80070ee:	bf00      	nop
 80070f0:	24000730 	.word	0x24000730
 80070f4:	24000798 	.word	0x24000798
 80070f8:	24000800 	.word	0x24000800

080070fc <global_stdio_init.part.0>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <global_stdio_init.part.0+0x30>)
 8007100:	4c0b      	ldr	r4, [pc, #44]	@ (8007130 <global_stdio_init.part.0+0x34>)
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <global_stdio_init.part.0+0x38>)
 8007104:	601a      	str	r2, [r3, #0]
 8007106:	4620      	mov	r0, r4
 8007108:	2200      	movs	r2, #0
 800710a:	2104      	movs	r1, #4
 800710c:	f7ff ff94 	bl	8007038 <std>
 8007110:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007114:	2201      	movs	r2, #1
 8007116:	2109      	movs	r1, #9
 8007118:	f7ff ff8e 	bl	8007038 <std>
 800711c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007120:	2202      	movs	r2, #2
 8007122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007126:	2112      	movs	r1, #18
 8007128:	f7ff bf86 	b.w	8007038 <std>
 800712c:	24000868 	.word	0x24000868
 8007130:	24000730 	.word	0x24000730
 8007134:	080070a5 	.word	0x080070a5

08007138 <__sfp_lock_acquire>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__sfp_lock_acquire+0x8>)
 800713a:	f000 b930 	b.w	800739e <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	24000871 	.word	0x24000871

08007144 <__sfp_lock_release>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__sfp_lock_release+0x8>)
 8007146:	f000 b92b 	b.w	80073a0 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	24000871 	.word	0x24000871

08007150 <__sinit>:
 8007150:	b510      	push	{r4, lr}
 8007152:	4604      	mov	r4, r0
 8007154:	f7ff fff0 	bl	8007138 <__sfp_lock_acquire>
 8007158:	6a23      	ldr	r3, [r4, #32]
 800715a:	b11b      	cbz	r3, 8007164 <__sinit+0x14>
 800715c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007160:	f7ff bff0 	b.w	8007144 <__sfp_lock_release>
 8007164:	4b04      	ldr	r3, [pc, #16]	@ (8007178 <__sinit+0x28>)
 8007166:	6223      	str	r3, [r4, #32]
 8007168:	4b04      	ldr	r3, [pc, #16]	@ (800717c <__sinit+0x2c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d1f5      	bne.n	800715c <__sinit+0xc>
 8007170:	f7ff ffc4 	bl	80070fc <global_stdio_init.part.0>
 8007174:	e7f2      	b.n	800715c <__sinit+0xc>
 8007176:	bf00      	nop
 8007178:	080070bd 	.word	0x080070bd
 800717c:	24000868 	.word	0x24000868

08007180 <_fwalk_sglue>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	4607      	mov	r7, r0
 8007186:	4688      	mov	r8, r1
 8007188:	4614      	mov	r4, r2
 800718a:	2600      	movs	r6, #0
 800718c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007190:	f1b9 0901 	subs.w	r9, r9, #1
 8007194:	d505      	bpl.n	80071a2 <_fwalk_sglue+0x22>
 8007196:	6824      	ldr	r4, [r4, #0]
 8007198:	2c00      	cmp	r4, #0
 800719a:	d1f7      	bne.n	800718c <_fwalk_sglue+0xc>
 800719c:	4630      	mov	r0, r6
 800719e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a2:	89ab      	ldrh	r3, [r5, #12]
 80071a4:	2b01      	cmp	r3, #1
 80071a6:	d907      	bls.n	80071b8 <_fwalk_sglue+0x38>
 80071a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071ac:	3301      	adds	r3, #1
 80071ae:	d003      	beq.n	80071b8 <_fwalk_sglue+0x38>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4638      	mov	r0, r7
 80071b4:	47c0      	blx	r8
 80071b6:	4306      	orrs	r6, r0
 80071b8:	3568      	adds	r5, #104	@ 0x68
 80071ba:	e7e9      	b.n	8007190 <_fwalk_sglue+0x10>

080071bc <siprintf>:
 80071bc:	b40e      	push	{r1, r2, r3}
 80071be:	b500      	push	{lr}
 80071c0:	b09c      	sub	sp, #112	@ 0x70
 80071c2:	ab1d      	add	r3, sp, #116	@ 0x74
 80071c4:	9002      	str	r0, [sp, #8]
 80071c6:	9006      	str	r0, [sp, #24]
 80071c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80071cc:	4809      	ldr	r0, [pc, #36]	@ (80071f4 <siprintf+0x38>)
 80071ce:	9107      	str	r1, [sp, #28]
 80071d0:	9104      	str	r1, [sp, #16]
 80071d2:	4909      	ldr	r1, [pc, #36]	@ (80071f8 <siprintf+0x3c>)
 80071d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071d8:	9105      	str	r1, [sp, #20]
 80071da:	6800      	ldr	r0, [r0, #0]
 80071dc:	9301      	str	r3, [sp, #4]
 80071de:	a902      	add	r1, sp, #8
 80071e0:	f002 fb12 	bl	8009808 <_svfiprintf_r>
 80071e4:	9b02      	ldr	r3, [sp, #8]
 80071e6:	2200      	movs	r2, #0
 80071e8:	701a      	strb	r2, [r3, #0]
 80071ea:	b01c      	add	sp, #112	@ 0x70
 80071ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f0:	b003      	add	sp, #12
 80071f2:	4770      	bx	lr
 80071f4:	2400001c 	.word	0x2400001c
 80071f8:	ffff0208 	.word	0xffff0208

080071fc <__sread>:
 80071fc:	b510      	push	{r4, lr}
 80071fe:	460c      	mov	r4, r1
 8007200:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007204:	f000 f87c 	bl	8007300 <_read_r>
 8007208:	2800      	cmp	r0, #0
 800720a:	bfab      	itete	ge
 800720c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800720e:	89a3      	ldrhlt	r3, [r4, #12]
 8007210:	181b      	addge	r3, r3, r0
 8007212:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007216:	bfac      	ite	ge
 8007218:	6563      	strge	r3, [r4, #84]	@ 0x54
 800721a:	81a3      	strhlt	r3, [r4, #12]
 800721c:	bd10      	pop	{r4, pc}

0800721e <__swrite>:
 800721e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007222:	461f      	mov	r7, r3
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	05db      	lsls	r3, r3, #23
 8007228:	4605      	mov	r5, r0
 800722a:	460c      	mov	r4, r1
 800722c:	4616      	mov	r6, r2
 800722e:	d505      	bpl.n	800723c <__swrite+0x1e>
 8007230:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007234:	2302      	movs	r3, #2
 8007236:	2200      	movs	r2, #0
 8007238:	f000 f850 	bl	80072dc <_lseek_r>
 800723c:	89a3      	ldrh	r3, [r4, #12]
 800723e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007242:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007246:	81a3      	strh	r3, [r4, #12]
 8007248:	4632      	mov	r2, r6
 800724a:	463b      	mov	r3, r7
 800724c:	4628      	mov	r0, r5
 800724e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007252:	f000 b867 	b.w	8007324 <_write_r>

08007256 <__sseek>:
 8007256:	b510      	push	{r4, lr}
 8007258:	460c      	mov	r4, r1
 800725a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800725e:	f000 f83d 	bl	80072dc <_lseek_r>
 8007262:	1c43      	adds	r3, r0, #1
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	bf15      	itete	ne
 8007268:	6560      	strne	r0, [r4, #84]	@ 0x54
 800726a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800726e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007272:	81a3      	strheq	r3, [r4, #12]
 8007274:	bf18      	it	ne
 8007276:	81a3      	strhne	r3, [r4, #12]
 8007278:	bd10      	pop	{r4, pc}

0800727a <__sclose>:
 800727a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800727e:	f000 b81d 	b.w	80072bc <_close_r>

08007282 <memcmp>:
 8007282:	b510      	push	{r4, lr}
 8007284:	3901      	subs	r1, #1
 8007286:	4402      	add	r2, r0
 8007288:	4290      	cmp	r0, r2
 800728a:	d101      	bne.n	8007290 <memcmp+0xe>
 800728c:	2000      	movs	r0, #0
 800728e:	e005      	b.n	800729c <memcmp+0x1a>
 8007290:	7803      	ldrb	r3, [r0, #0]
 8007292:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007296:	42a3      	cmp	r3, r4
 8007298:	d001      	beq.n	800729e <memcmp+0x1c>
 800729a:	1b18      	subs	r0, r3, r4
 800729c:	bd10      	pop	{r4, pc}
 800729e:	3001      	adds	r0, #1
 80072a0:	e7f2      	b.n	8007288 <memcmp+0x6>

080072a2 <memset>:
 80072a2:	4402      	add	r2, r0
 80072a4:	4603      	mov	r3, r0
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d100      	bne.n	80072ac <memset+0xa>
 80072aa:	4770      	bx	lr
 80072ac:	f803 1b01 	strb.w	r1, [r3], #1
 80072b0:	e7f9      	b.n	80072a6 <memset+0x4>
	...

080072b4 <_localeconv_r>:
 80072b4:	4800      	ldr	r0, [pc, #0]	@ (80072b8 <_localeconv_r+0x4>)
 80072b6:	4770      	bx	lr
 80072b8:	2400015c 	.word	0x2400015c

080072bc <_close_r>:
 80072bc:	b538      	push	{r3, r4, r5, lr}
 80072be:	4d06      	ldr	r5, [pc, #24]	@ (80072d8 <_close_r+0x1c>)
 80072c0:	2300      	movs	r3, #0
 80072c2:	4604      	mov	r4, r0
 80072c4:	4608      	mov	r0, r1
 80072c6:	602b      	str	r3, [r5, #0]
 80072c8:	f7fa f8ea 	bl	80014a0 <_close>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_close_r+0x1a>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_close_r+0x1a>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	2400086c 	.word	0x2400086c

080072dc <_lseek_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d07      	ldr	r5, [pc, #28]	@ (80072fc <_lseek_r+0x20>)
 80072e0:	4604      	mov	r4, r0
 80072e2:	4608      	mov	r0, r1
 80072e4:	4611      	mov	r1, r2
 80072e6:	2200      	movs	r2, #0
 80072e8:	602a      	str	r2, [r5, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f7fa f8ff 	bl	80014ee <_lseek>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_lseek_r+0x1e>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_lseek_r+0x1e>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	2400086c 	.word	0x2400086c

08007300 <_read_r>:
 8007300:	b538      	push	{r3, r4, r5, lr}
 8007302:	4d07      	ldr	r5, [pc, #28]	@ (8007320 <_read_r+0x20>)
 8007304:	4604      	mov	r4, r0
 8007306:	4608      	mov	r0, r1
 8007308:	4611      	mov	r1, r2
 800730a:	2200      	movs	r2, #0
 800730c:	602a      	str	r2, [r5, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	f7fa f88d 	bl	800142e <_read>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	d102      	bne.n	800731e <_read_r+0x1e>
 8007318:	682b      	ldr	r3, [r5, #0]
 800731a:	b103      	cbz	r3, 800731e <_read_r+0x1e>
 800731c:	6023      	str	r3, [r4, #0]
 800731e:	bd38      	pop	{r3, r4, r5, pc}
 8007320:	2400086c 	.word	0x2400086c

08007324 <_write_r>:
 8007324:	b538      	push	{r3, r4, r5, lr}
 8007326:	4d07      	ldr	r5, [pc, #28]	@ (8007344 <_write_r+0x20>)
 8007328:	4604      	mov	r4, r0
 800732a:	4608      	mov	r0, r1
 800732c:	4611      	mov	r1, r2
 800732e:	2200      	movs	r2, #0
 8007330:	602a      	str	r2, [r5, #0]
 8007332:	461a      	mov	r2, r3
 8007334:	f7fa f898 	bl	8001468 <_write>
 8007338:	1c43      	adds	r3, r0, #1
 800733a:	d102      	bne.n	8007342 <_write_r+0x1e>
 800733c:	682b      	ldr	r3, [r5, #0]
 800733e:	b103      	cbz	r3, 8007342 <_write_r+0x1e>
 8007340:	6023      	str	r3, [r4, #0]
 8007342:	bd38      	pop	{r3, r4, r5, pc}
 8007344:	2400086c 	.word	0x2400086c

08007348 <__errno>:
 8007348:	4b01      	ldr	r3, [pc, #4]	@ (8007350 <__errno+0x8>)
 800734a:	6818      	ldr	r0, [r3, #0]
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	2400001c 	.word	0x2400001c

08007354 <__libc_init_array>:
 8007354:	b570      	push	{r4, r5, r6, lr}
 8007356:	4d0d      	ldr	r5, [pc, #52]	@ (800738c <__libc_init_array+0x38>)
 8007358:	4c0d      	ldr	r4, [pc, #52]	@ (8007390 <__libc_init_array+0x3c>)
 800735a:	1b64      	subs	r4, r4, r5
 800735c:	10a4      	asrs	r4, r4, #2
 800735e:	2600      	movs	r6, #0
 8007360:	42a6      	cmp	r6, r4
 8007362:	d109      	bne.n	8007378 <__libc_init_array+0x24>
 8007364:	4d0b      	ldr	r5, [pc, #44]	@ (8007394 <__libc_init_array+0x40>)
 8007366:	4c0c      	ldr	r4, [pc, #48]	@ (8007398 <__libc_init_array+0x44>)
 8007368:	f003 fab0 	bl	800a8cc <_init>
 800736c:	1b64      	subs	r4, r4, r5
 800736e:	10a4      	asrs	r4, r4, #2
 8007370:	2600      	movs	r6, #0
 8007372:	42a6      	cmp	r6, r4
 8007374:	d105      	bne.n	8007382 <__libc_init_array+0x2e>
 8007376:	bd70      	pop	{r4, r5, r6, pc}
 8007378:	f855 3b04 	ldr.w	r3, [r5], #4
 800737c:	4798      	blx	r3
 800737e:	3601      	adds	r6, #1
 8007380:	e7ee      	b.n	8007360 <__libc_init_array+0xc>
 8007382:	f855 3b04 	ldr.w	r3, [r5], #4
 8007386:	4798      	blx	r3
 8007388:	3601      	adds	r6, #1
 800738a:	e7f2      	b.n	8007372 <__libc_init_array+0x1e>
 800738c:	0800b368 	.word	0x0800b368
 8007390:	0800b368 	.word	0x0800b368
 8007394:	0800b368 	.word	0x0800b368
 8007398:	0800b36c 	.word	0x0800b36c

0800739c <__retarget_lock_init_recursive>:
 800739c:	4770      	bx	lr

0800739e <__retarget_lock_acquire_recursive>:
 800739e:	4770      	bx	lr

080073a0 <__retarget_lock_release_recursive>:
 80073a0:	4770      	bx	lr

080073a2 <memcpy>:
 80073a2:	440a      	add	r2, r1
 80073a4:	4291      	cmp	r1, r2
 80073a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80073aa:	d100      	bne.n	80073ae <memcpy+0xc>
 80073ac:	4770      	bx	lr
 80073ae:	b510      	push	{r4, lr}
 80073b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073b8:	4291      	cmp	r1, r2
 80073ba:	d1f9      	bne.n	80073b0 <memcpy+0xe>
 80073bc:	bd10      	pop	{r4, pc}
	...

080073c0 <nanf>:
 80073c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80073c8 <nanf+0x8>
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	7fc00000 	.word	0x7fc00000

080073cc <quorem>:
 80073cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	6903      	ldr	r3, [r0, #16]
 80073d2:	690c      	ldr	r4, [r1, #16]
 80073d4:	42a3      	cmp	r3, r4
 80073d6:	4607      	mov	r7, r0
 80073d8:	db7e      	blt.n	80074d8 <quorem+0x10c>
 80073da:	3c01      	subs	r4, #1
 80073dc:	f101 0814 	add.w	r8, r1, #20
 80073e0:	00a3      	lsls	r3, r4, #2
 80073e2:	f100 0514 	add.w	r5, r0, #20
 80073e6:	9300      	str	r3, [sp, #0]
 80073e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073ec:	9301      	str	r3, [sp, #4]
 80073ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80073f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073f6:	3301      	adds	r3, #1
 80073f8:	429a      	cmp	r2, r3
 80073fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80073fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8007402:	d32e      	bcc.n	8007462 <quorem+0x96>
 8007404:	f04f 0a00 	mov.w	sl, #0
 8007408:	46c4      	mov	ip, r8
 800740a:	46ae      	mov	lr, r5
 800740c:	46d3      	mov	fp, sl
 800740e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007412:	b298      	uxth	r0, r3
 8007414:	fb06 a000 	mla	r0, r6, r0, sl
 8007418:	0c02      	lsrs	r2, r0, #16
 800741a:	0c1b      	lsrs	r3, r3, #16
 800741c:	fb06 2303 	mla	r3, r6, r3, r2
 8007420:	f8de 2000 	ldr.w	r2, [lr]
 8007424:	b280      	uxth	r0, r0
 8007426:	b292      	uxth	r2, r2
 8007428:	1a12      	subs	r2, r2, r0
 800742a:	445a      	add	r2, fp
 800742c:	f8de 0000 	ldr.w	r0, [lr]
 8007430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007434:	b29b      	uxth	r3, r3
 8007436:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800743a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800743e:	b292      	uxth	r2, r2
 8007440:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007444:	45e1      	cmp	r9, ip
 8007446:	f84e 2b04 	str.w	r2, [lr], #4
 800744a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800744e:	d2de      	bcs.n	800740e <quorem+0x42>
 8007450:	9b00      	ldr	r3, [sp, #0]
 8007452:	58eb      	ldr	r3, [r5, r3]
 8007454:	b92b      	cbnz	r3, 8007462 <quorem+0x96>
 8007456:	9b01      	ldr	r3, [sp, #4]
 8007458:	3b04      	subs	r3, #4
 800745a:	429d      	cmp	r5, r3
 800745c:	461a      	mov	r2, r3
 800745e:	d32f      	bcc.n	80074c0 <quorem+0xf4>
 8007460:	613c      	str	r4, [r7, #16]
 8007462:	4638      	mov	r0, r7
 8007464:	f001 f956 	bl	8008714 <__mcmp>
 8007468:	2800      	cmp	r0, #0
 800746a:	db25      	blt.n	80074b8 <quorem+0xec>
 800746c:	4629      	mov	r1, r5
 800746e:	2000      	movs	r0, #0
 8007470:	f858 2b04 	ldr.w	r2, [r8], #4
 8007474:	f8d1 c000 	ldr.w	ip, [r1]
 8007478:	fa1f fe82 	uxth.w	lr, r2
 800747c:	fa1f f38c 	uxth.w	r3, ip
 8007480:	eba3 030e 	sub.w	r3, r3, lr
 8007484:	4403      	add	r3, r0
 8007486:	0c12      	lsrs	r2, r2, #16
 8007488:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800748c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007490:	b29b      	uxth	r3, r3
 8007492:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007496:	45c1      	cmp	r9, r8
 8007498:	f841 3b04 	str.w	r3, [r1], #4
 800749c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80074a0:	d2e6      	bcs.n	8007470 <quorem+0xa4>
 80074a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074aa:	b922      	cbnz	r2, 80074b6 <quorem+0xea>
 80074ac:	3b04      	subs	r3, #4
 80074ae:	429d      	cmp	r5, r3
 80074b0:	461a      	mov	r2, r3
 80074b2:	d30b      	bcc.n	80074cc <quorem+0x100>
 80074b4:	613c      	str	r4, [r7, #16]
 80074b6:	3601      	adds	r6, #1
 80074b8:	4630      	mov	r0, r6
 80074ba:	b003      	add	sp, #12
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	6812      	ldr	r2, [r2, #0]
 80074c2:	3b04      	subs	r3, #4
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	d1cb      	bne.n	8007460 <quorem+0x94>
 80074c8:	3c01      	subs	r4, #1
 80074ca:	e7c6      	b.n	800745a <quorem+0x8e>
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	3b04      	subs	r3, #4
 80074d0:	2a00      	cmp	r2, #0
 80074d2:	d1ef      	bne.n	80074b4 <quorem+0xe8>
 80074d4:	3c01      	subs	r4, #1
 80074d6:	e7ea      	b.n	80074ae <quorem+0xe2>
 80074d8:	2000      	movs	r0, #0
 80074da:	e7ee      	b.n	80074ba <quorem+0xee>
 80074dc:	0000      	movs	r0, r0
	...

080074e0 <_dtoa_r>:
 80074e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e4:	ed2d 8b02 	vpush	{d8}
 80074e8:	69c7      	ldr	r7, [r0, #28]
 80074ea:	b091      	sub	sp, #68	@ 0x44
 80074ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80074f0:	ec55 4b10 	vmov	r4, r5, d0
 80074f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80074f6:	9107      	str	r1, [sp, #28]
 80074f8:	4681      	mov	r9, r0
 80074fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80074fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80074fe:	b97f      	cbnz	r7, 8007520 <_dtoa_r+0x40>
 8007500:	2010      	movs	r0, #16
 8007502:	f000 fd8d 	bl	8008020 <malloc>
 8007506:	4602      	mov	r2, r0
 8007508:	f8c9 001c 	str.w	r0, [r9, #28]
 800750c:	b920      	cbnz	r0, 8007518 <_dtoa_r+0x38>
 800750e:	4ba0      	ldr	r3, [pc, #640]	@ (8007790 <_dtoa_r+0x2b0>)
 8007510:	21ef      	movs	r1, #239	@ 0xef
 8007512:	48a0      	ldr	r0, [pc, #640]	@ (8007794 <_dtoa_r+0x2b4>)
 8007514:	f002 fb64 	bl	8009be0 <__assert_func>
 8007518:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800751c:	6007      	str	r7, [r0, #0]
 800751e:	60c7      	str	r7, [r0, #12]
 8007520:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007524:	6819      	ldr	r1, [r3, #0]
 8007526:	b159      	cbz	r1, 8007540 <_dtoa_r+0x60>
 8007528:	685a      	ldr	r2, [r3, #4]
 800752a:	604a      	str	r2, [r1, #4]
 800752c:	2301      	movs	r3, #1
 800752e:	4093      	lsls	r3, r2
 8007530:	608b      	str	r3, [r1, #8]
 8007532:	4648      	mov	r0, r9
 8007534:	f000 fe6a 	bl	800820c <_Bfree>
 8007538:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	1e2b      	subs	r3, r5, #0
 8007542:	bfbb      	ittet	lt
 8007544:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007548:	9303      	strlt	r3, [sp, #12]
 800754a:	2300      	movge	r3, #0
 800754c:	2201      	movlt	r2, #1
 800754e:	bfac      	ite	ge
 8007550:	6033      	strge	r3, [r6, #0]
 8007552:	6032      	strlt	r2, [r6, #0]
 8007554:	4b90      	ldr	r3, [pc, #576]	@ (8007798 <_dtoa_r+0x2b8>)
 8007556:	9e03      	ldr	r6, [sp, #12]
 8007558:	43b3      	bics	r3, r6
 800755a:	d110      	bne.n	800757e <_dtoa_r+0x9e>
 800755c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800755e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007562:	6013      	str	r3, [r2, #0]
 8007564:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007568:	4323      	orrs	r3, r4
 800756a:	f000 84de 	beq.w	8007f2a <_dtoa_r+0xa4a>
 800756e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007570:	4f8a      	ldr	r7, [pc, #552]	@ (800779c <_dtoa_r+0x2bc>)
 8007572:	2b00      	cmp	r3, #0
 8007574:	f000 84e0 	beq.w	8007f38 <_dtoa_r+0xa58>
 8007578:	1cfb      	adds	r3, r7, #3
 800757a:	f000 bcdb 	b.w	8007f34 <_dtoa_r+0xa54>
 800757e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8007582:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	d10a      	bne.n	80075a2 <_dtoa_r+0xc2>
 800758c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800758e:	2301      	movs	r3, #1
 8007590:	6013      	str	r3, [r2, #0]
 8007592:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007594:	b113      	cbz	r3, 800759c <_dtoa_r+0xbc>
 8007596:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007598:	4b81      	ldr	r3, [pc, #516]	@ (80077a0 <_dtoa_r+0x2c0>)
 800759a:	6013      	str	r3, [r2, #0]
 800759c:	4f81      	ldr	r7, [pc, #516]	@ (80077a4 <_dtoa_r+0x2c4>)
 800759e:	f000 bccb 	b.w	8007f38 <_dtoa_r+0xa58>
 80075a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80075a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80075a6:	4648      	mov	r0, r9
 80075a8:	eeb0 0b48 	vmov.f64	d0, d8
 80075ac:	f001 f9d2 	bl	8008954 <__d2b>
 80075b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80075b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80075b6:	9001      	str	r0, [sp, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d045      	beq.n	8007648 <_dtoa_r+0x168>
 80075bc:	eeb0 7b48 	vmov.f64	d7, d8
 80075c0:	ee18 1a90 	vmov	r1, s17
 80075c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80075c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80075cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80075d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80075d4:	2500      	movs	r5, #0
 80075d6:	ee07 1a90 	vmov	s15, r1
 80075da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80075de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007778 <_dtoa_r+0x298>
 80075e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80075e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007780 <_dtoa_r+0x2a0>
 80075ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80075ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007788 <_dtoa_r+0x2a8>
 80075f2:	ee07 3a90 	vmov	s15, r3
 80075f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80075fa:	eeb0 7b46 	vmov.f64	d7, d6
 80075fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007602:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007606:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800760a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800760e:	ee16 8a90 	vmov	r8, s13
 8007612:	d508      	bpl.n	8007626 <_dtoa_r+0x146>
 8007614:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007618:	eeb4 6b47 	vcmp.f64	d6, d7
 800761c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007620:	bf18      	it	ne
 8007622:	f108 38ff 	addne.w	r8, r8, #4294967295
 8007626:	f1b8 0f16 	cmp.w	r8, #22
 800762a:	d82b      	bhi.n	8007684 <_dtoa_r+0x1a4>
 800762c:	495e      	ldr	r1, [pc, #376]	@ (80077a8 <_dtoa_r+0x2c8>)
 800762e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8007632:	ed91 7b00 	vldr	d7, [r1]
 8007636:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800763a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763e:	d501      	bpl.n	8007644 <_dtoa_r+0x164>
 8007640:	f108 38ff 	add.w	r8, r8, #4294967295
 8007644:	2100      	movs	r1, #0
 8007646:	e01e      	b.n	8007686 <_dtoa_r+0x1a6>
 8007648:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800764a:	4413      	add	r3, r2
 800764c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8007650:	2920      	cmp	r1, #32
 8007652:	bfc1      	itttt	gt
 8007654:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007658:	408e      	lslgt	r6, r1
 800765a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800765e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8007662:	bfd6      	itet	le
 8007664:	f1c1 0120 	rsble	r1, r1, #32
 8007668:	4331      	orrgt	r1, r6
 800766a:	fa04 f101 	lslle.w	r1, r4, r1
 800766e:	ee07 1a90 	vmov	s15, r1
 8007672:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8007676:	3b01      	subs	r3, #1
 8007678:	ee17 1a90 	vmov	r1, s15
 800767c:	2501      	movs	r5, #1
 800767e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8007682:	e7a8      	b.n	80075d6 <_dtoa_r+0xf6>
 8007684:	2101      	movs	r1, #1
 8007686:	1ad2      	subs	r2, r2, r3
 8007688:	1e53      	subs	r3, r2, #1
 800768a:	9306      	str	r3, [sp, #24]
 800768c:	bf45      	ittet	mi
 800768e:	f1c2 0301 	rsbmi	r3, r2, #1
 8007692:	9305      	strmi	r3, [sp, #20]
 8007694:	2300      	movpl	r3, #0
 8007696:	2300      	movmi	r3, #0
 8007698:	bf4c      	ite	mi
 800769a:	9306      	strmi	r3, [sp, #24]
 800769c:	9305      	strpl	r3, [sp, #20]
 800769e:	f1b8 0f00 	cmp.w	r8, #0
 80076a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80076a4:	db18      	blt.n	80076d8 <_dtoa_r+0x1f8>
 80076a6:	9b06      	ldr	r3, [sp, #24]
 80076a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80076ac:	4443      	add	r3, r8
 80076ae:	9306      	str	r3, [sp, #24]
 80076b0:	2300      	movs	r3, #0
 80076b2:	9a07      	ldr	r2, [sp, #28]
 80076b4:	2a09      	cmp	r2, #9
 80076b6:	d849      	bhi.n	800774c <_dtoa_r+0x26c>
 80076b8:	2a05      	cmp	r2, #5
 80076ba:	bfc4      	itt	gt
 80076bc:	3a04      	subgt	r2, #4
 80076be:	9207      	strgt	r2, [sp, #28]
 80076c0:	9a07      	ldr	r2, [sp, #28]
 80076c2:	f1a2 0202 	sub.w	r2, r2, #2
 80076c6:	bfcc      	ite	gt
 80076c8:	2400      	movgt	r4, #0
 80076ca:	2401      	movle	r4, #1
 80076cc:	2a03      	cmp	r2, #3
 80076ce:	d848      	bhi.n	8007762 <_dtoa_r+0x282>
 80076d0:	e8df f002 	tbb	[pc, r2]
 80076d4:	3a2c2e0b 	.word	0x3a2c2e0b
 80076d8:	9b05      	ldr	r3, [sp, #20]
 80076da:	2200      	movs	r2, #0
 80076dc:	eba3 0308 	sub.w	r3, r3, r8
 80076e0:	9305      	str	r3, [sp, #20]
 80076e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80076e4:	f1c8 0300 	rsb	r3, r8, #0
 80076e8:	e7e3      	b.n	80076b2 <_dtoa_r+0x1d2>
 80076ea:	2200      	movs	r2, #0
 80076ec:	9208      	str	r2, [sp, #32]
 80076ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076f0:	2a00      	cmp	r2, #0
 80076f2:	dc39      	bgt.n	8007768 <_dtoa_r+0x288>
 80076f4:	f04f 0b01 	mov.w	fp, #1
 80076f8:	46da      	mov	sl, fp
 80076fa:	465a      	mov	r2, fp
 80076fc:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8007700:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8007704:	2100      	movs	r1, #0
 8007706:	2004      	movs	r0, #4
 8007708:	f100 0614 	add.w	r6, r0, #20
 800770c:	4296      	cmp	r6, r2
 800770e:	d930      	bls.n	8007772 <_dtoa_r+0x292>
 8007710:	6079      	str	r1, [r7, #4]
 8007712:	4648      	mov	r0, r9
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	f000 fd39 	bl	800818c <_Balloc>
 800771a:	9b04      	ldr	r3, [sp, #16]
 800771c:	4607      	mov	r7, r0
 800771e:	2800      	cmp	r0, #0
 8007720:	d146      	bne.n	80077b0 <_dtoa_r+0x2d0>
 8007722:	4b22      	ldr	r3, [pc, #136]	@ (80077ac <_dtoa_r+0x2cc>)
 8007724:	4602      	mov	r2, r0
 8007726:	f240 11af 	movw	r1, #431	@ 0x1af
 800772a:	e6f2      	b.n	8007512 <_dtoa_r+0x32>
 800772c:	2201      	movs	r2, #1
 800772e:	e7dd      	b.n	80076ec <_dtoa_r+0x20c>
 8007730:	2200      	movs	r2, #0
 8007732:	9208      	str	r2, [sp, #32]
 8007734:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007736:	eb08 0b02 	add.w	fp, r8, r2
 800773a:	f10b 0a01 	add.w	sl, fp, #1
 800773e:	4652      	mov	r2, sl
 8007740:	2a01      	cmp	r2, #1
 8007742:	bfb8      	it	lt
 8007744:	2201      	movlt	r2, #1
 8007746:	e7db      	b.n	8007700 <_dtoa_r+0x220>
 8007748:	2201      	movs	r2, #1
 800774a:	e7f2      	b.n	8007732 <_dtoa_r+0x252>
 800774c:	2401      	movs	r4, #1
 800774e:	2200      	movs	r2, #0
 8007750:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8007754:	f04f 3bff 	mov.w	fp, #4294967295
 8007758:	2100      	movs	r1, #0
 800775a:	46da      	mov	sl, fp
 800775c:	2212      	movs	r2, #18
 800775e:	9109      	str	r1, [sp, #36]	@ 0x24
 8007760:	e7ce      	b.n	8007700 <_dtoa_r+0x220>
 8007762:	2201      	movs	r2, #1
 8007764:	9208      	str	r2, [sp, #32]
 8007766:	e7f5      	b.n	8007754 <_dtoa_r+0x274>
 8007768:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800776c:	46da      	mov	sl, fp
 800776e:	465a      	mov	r2, fp
 8007770:	e7c6      	b.n	8007700 <_dtoa_r+0x220>
 8007772:	3101      	adds	r1, #1
 8007774:	0040      	lsls	r0, r0, #1
 8007776:	e7c7      	b.n	8007708 <_dtoa_r+0x228>
 8007778:	636f4361 	.word	0x636f4361
 800777c:	3fd287a7 	.word	0x3fd287a7
 8007780:	8b60c8b3 	.word	0x8b60c8b3
 8007784:	3fc68a28 	.word	0x3fc68a28
 8007788:	509f79fb 	.word	0x509f79fb
 800778c:	3fd34413 	.word	0x3fd34413
 8007790:	0800af7a 	.word	0x0800af7a
 8007794:	0800af91 	.word	0x0800af91
 8007798:	7ff00000 	.word	0x7ff00000
 800779c:	0800af76 	.word	0x0800af76
 80077a0:	0800af45 	.word	0x0800af45
 80077a4:	0800af44 	.word	0x0800af44
 80077a8:	0800b088 	.word	0x0800b088
 80077ac:	0800afe9 	.word	0x0800afe9
 80077b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80077b4:	f1ba 0f0e 	cmp.w	sl, #14
 80077b8:	6010      	str	r0, [r2, #0]
 80077ba:	d86f      	bhi.n	800789c <_dtoa_r+0x3bc>
 80077bc:	2c00      	cmp	r4, #0
 80077be:	d06d      	beq.n	800789c <_dtoa_r+0x3bc>
 80077c0:	f1b8 0f00 	cmp.w	r8, #0
 80077c4:	f340 80c2 	ble.w	800794c <_dtoa_r+0x46c>
 80077c8:	4aca      	ldr	r2, [pc, #808]	@ (8007af4 <_dtoa_r+0x614>)
 80077ca:	f008 010f 	and.w	r1, r8, #15
 80077ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80077d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80077d6:	ed92 7b00 	vldr	d7, [r2]
 80077da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80077de:	f000 80a9 	beq.w	8007934 <_dtoa_r+0x454>
 80077e2:	4ac5      	ldr	r2, [pc, #788]	@ (8007af8 <_dtoa_r+0x618>)
 80077e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80077e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80077ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80077f0:	f001 010f 	and.w	r1, r1, #15
 80077f4:	2203      	movs	r2, #3
 80077f6:	48c0      	ldr	r0, [pc, #768]	@ (8007af8 <_dtoa_r+0x618>)
 80077f8:	2900      	cmp	r1, #0
 80077fa:	f040 809d 	bne.w	8007938 <_dtoa_r+0x458>
 80077fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007802:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007806:	ed8d 7b02 	vstr	d7, [sp, #8]
 800780a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800780c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007810:	2900      	cmp	r1, #0
 8007812:	f000 80c1 	beq.w	8007998 <_dtoa_r+0x4b8>
 8007816:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800781a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800781e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007822:	f140 80b9 	bpl.w	8007998 <_dtoa_r+0x4b8>
 8007826:	f1ba 0f00 	cmp.w	sl, #0
 800782a:	f000 80b5 	beq.w	8007998 <_dtoa_r+0x4b8>
 800782e:	f1bb 0f00 	cmp.w	fp, #0
 8007832:	dd31      	ble.n	8007898 <_dtoa_r+0x3b8>
 8007834:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8007838:	ee27 7b06 	vmul.f64	d7, d7, d6
 800783c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007840:	f108 31ff 	add.w	r1, r8, #4294967295
 8007844:	9104      	str	r1, [sp, #16]
 8007846:	3201      	adds	r2, #1
 8007848:	465c      	mov	r4, fp
 800784a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800784e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8007852:	ee07 2a90 	vmov	s15, r2
 8007856:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800785a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800785e:	ee15 2a90 	vmov	r2, s11
 8007862:	ec51 0b15 	vmov	r0, r1, d5
 8007866:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800786a:	2c00      	cmp	r4, #0
 800786c:	f040 8098 	bne.w	80079a0 <_dtoa_r+0x4c0>
 8007870:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007874:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007878:	ec41 0b17 	vmov	d7, r0, r1
 800787c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007884:	f300 8261 	bgt.w	8007d4a <_dtoa_r+0x86a>
 8007888:	eeb1 7b47 	vneg.f64	d7, d7
 800788c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007894:	f100 80f5 	bmi.w	8007a82 <_dtoa_r+0x5a2>
 8007898:	ed8d 8b02 	vstr	d8, [sp, #8]
 800789c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800789e:	2a00      	cmp	r2, #0
 80078a0:	f2c0 812c 	blt.w	8007afc <_dtoa_r+0x61c>
 80078a4:	f1b8 0f0e 	cmp.w	r8, #14
 80078a8:	f300 8128 	bgt.w	8007afc <_dtoa_r+0x61c>
 80078ac:	4b91      	ldr	r3, [pc, #580]	@ (8007af4 <_dtoa_r+0x614>)
 80078ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80078b2:	ed93 6b00 	vldr	d6, [r3]
 80078b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	da03      	bge.n	80078c4 <_dtoa_r+0x3e4>
 80078bc:	f1ba 0f00 	cmp.w	sl, #0
 80078c0:	f340 80d2 	ble.w	8007a68 <_dtoa_r+0x588>
 80078c4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80078c8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80078cc:	463e      	mov	r6, r7
 80078ce:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80078d2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80078d6:	ee15 3a10 	vmov	r3, s10
 80078da:	3330      	adds	r3, #48	@ 0x30
 80078dc:	f806 3b01 	strb.w	r3, [r6], #1
 80078e0:	1bf3      	subs	r3, r6, r7
 80078e2:	459a      	cmp	sl, r3
 80078e4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80078e8:	eea3 7b46 	vfms.f64	d7, d3, d6
 80078ec:	f040 80f8 	bne.w	8007ae0 <_dtoa_r+0x600>
 80078f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80078f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078fc:	f300 80dd 	bgt.w	8007aba <_dtoa_r+0x5da>
 8007900:	eeb4 7b46 	vcmp.f64	d7, d6
 8007904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007908:	d104      	bne.n	8007914 <_dtoa_r+0x434>
 800790a:	ee15 3a10 	vmov	r3, s10
 800790e:	07db      	lsls	r3, r3, #31
 8007910:	f100 80d3 	bmi.w	8007aba <_dtoa_r+0x5da>
 8007914:	9901      	ldr	r1, [sp, #4]
 8007916:	4648      	mov	r0, r9
 8007918:	f000 fc78 	bl	800820c <_Bfree>
 800791c:	2300      	movs	r3, #0
 800791e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007920:	7033      	strb	r3, [r6, #0]
 8007922:	f108 0301 	add.w	r3, r8, #1
 8007926:	6013      	str	r3, [r2, #0]
 8007928:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800792a:	2b00      	cmp	r3, #0
 800792c:	f000 8304 	beq.w	8007f38 <_dtoa_r+0xa58>
 8007930:	601e      	str	r6, [r3, #0]
 8007932:	e301      	b.n	8007f38 <_dtoa_r+0xa58>
 8007934:	2202      	movs	r2, #2
 8007936:	e75e      	b.n	80077f6 <_dtoa_r+0x316>
 8007938:	07cc      	lsls	r4, r1, #31
 800793a:	d504      	bpl.n	8007946 <_dtoa_r+0x466>
 800793c:	ed90 6b00 	vldr	d6, [r0]
 8007940:	3201      	adds	r2, #1
 8007942:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007946:	1049      	asrs	r1, r1, #1
 8007948:	3008      	adds	r0, #8
 800794a:	e755      	b.n	80077f8 <_dtoa_r+0x318>
 800794c:	d022      	beq.n	8007994 <_dtoa_r+0x4b4>
 800794e:	f1c8 0100 	rsb	r1, r8, #0
 8007952:	4a68      	ldr	r2, [pc, #416]	@ (8007af4 <_dtoa_r+0x614>)
 8007954:	f001 000f 	and.w	r0, r1, #15
 8007958:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800795c:	ed92 7b00 	vldr	d7, [r2]
 8007960:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007968:	4863      	ldr	r0, [pc, #396]	@ (8007af8 <_dtoa_r+0x618>)
 800796a:	1109      	asrs	r1, r1, #4
 800796c:	2400      	movs	r4, #0
 800796e:	2202      	movs	r2, #2
 8007970:	b929      	cbnz	r1, 800797e <_dtoa_r+0x49e>
 8007972:	2c00      	cmp	r4, #0
 8007974:	f43f af49 	beq.w	800780a <_dtoa_r+0x32a>
 8007978:	ed8d 7b02 	vstr	d7, [sp, #8]
 800797c:	e745      	b.n	800780a <_dtoa_r+0x32a>
 800797e:	07ce      	lsls	r6, r1, #31
 8007980:	d505      	bpl.n	800798e <_dtoa_r+0x4ae>
 8007982:	ed90 6b00 	vldr	d6, [r0]
 8007986:	3201      	adds	r2, #1
 8007988:	2401      	movs	r4, #1
 800798a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800798e:	1049      	asrs	r1, r1, #1
 8007990:	3008      	adds	r0, #8
 8007992:	e7ed      	b.n	8007970 <_dtoa_r+0x490>
 8007994:	2202      	movs	r2, #2
 8007996:	e738      	b.n	800780a <_dtoa_r+0x32a>
 8007998:	f8cd 8010 	str.w	r8, [sp, #16]
 800799c:	4654      	mov	r4, sl
 800799e:	e754      	b.n	800784a <_dtoa_r+0x36a>
 80079a0:	4a54      	ldr	r2, [pc, #336]	@ (8007af4 <_dtoa_r+0x614>)
 80079a2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80079a6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80079aa:	9a08      	ldr	r2, [sp, #32]
 80079ac:	ec41 0b17 	vmov	d7, r0, r1
 80079b0:	443c      	add	r4, r7
 80079b2:	b34a      	cbz	r2, 8007a08 <_dtoa_r+0x528>
 80079b4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80079b8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80079bc:	463e      	mov	r6, r7
 80079be:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80079c2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80079c6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80079ca:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80079ce:	ee14 2a90 	vmov	r2, s9
 80079d2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80079d6:	3230      	adds	r2, #48	@ 0x30
 80079d8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80079dc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80079e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079e4:	f806 2b01 	strb.w	r2, [r6], #1
 80079e8:	d438      	bmi.n	8007a5c <_dtoa_r+0x57c>
 80079ea:	ee32 5b46 	vsub.f64	d5, d2, d6
 80079ee:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80079f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079f6:	d462      	bmi.n	8007abe <_dtoa_r+0x5de>
 80079f8:	42a6      	cmp	r6, r4
 80079fa:	f43f af4d 	beq.w	8007898 <_dtoa_r+0x3b8>
 80079fe:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007a02:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a06:	e7e0      	b.n	80079ca <_dtoa_r+0x4ea>
 8007a08:	4621      	mov	r1, r4
 8007a0a:	463e      	mov	r6, r7
 8007a0c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007a10:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007a14:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007a18:	ee14 2a90 	vmov	r2, s9
 8007a1c:	3230      	adds	r2, #48	@ 0x30
 8007a1e:	f806 2b01 	strb.w	r2, [r6], #1
 8007a22:	42a6      	cmp	r6, r4
 8007a24:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007a28:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007a2c:	d119      	bne.n	8007a62 <_dtoa_r+0x582>
 8007a2e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007a32:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007a36:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3e:	dc3e      	bgt.n	8007abe <_dtoa_r+0x5de>
 8007a40:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007a44:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a4c:	f57f af24 	bpl.w	8007898 <_dtoa_r+0x3b8>
 8007a50:	460e      	mov	r6, r1
 8007a52:	3901      	subs	r1, #1
 8007a54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a58:	2b30      	cmp	r3, #48	@ 0x30
 8007a5a:	d0f9      	beq.n	8007a50 <_dtoa_r+0x570>
 8007a5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007a60:	e758      	b.n	8007914 <_dtoa_r+0x434>
 8007a62:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007a66:	e7d5      	b.n	8007a14 <_dtoa_r+0x534>
 8007a68:	d10b      	bne.n	8007a82 <_dtoa_r+0x5a2>
 8007a6a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a6e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007a72:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a7e:	f2c0 8161 	blt.w	8007d44 <_dtoa_r+0x864>
 8007a82:	2400      	movs	r4, #0
 8007a84:	4625      	mov	r5, r4
 8007a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a88:	43db      	mvns	r3, r3
 8007a8a:	9304      	str	r3, [sp, #16]
 8007a8c:	463e      	mov	r6, r7
 8007a8e:	f04f 0800 	mov.w	r8, #0
 8007a92:	4621      	mov	r1, r4
 8007a94:	4648      	mov	r0, r9
 8007a96:	f000 fbb9 	bl	800820c <_Bfree>
 8007a9a:	2d00      	cmp	r5, #0
 8007a9c:	d0de      	beq.n	8007a5c <_dtoa_r+0x57c>
 8007a9e:	f1b8 0f00 	cmp.w	r8, #0
 8007aa2:	d005      	beq.n	8007ab0 <_dtoa_r+0x5d0>
 8007aa4:	45a8      	cmp	r8, r5
 8007aa6:	d003      	beq.n	8007ab0 <_dtoa_r+0x5d0>
 8007aa8:	4641      	mov	r1, r8
 8007aaa:	4648      	mov	r0, r9
 8007aac:	f000 fbae 	bl	800820c <_Bfree>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4648      	mov	r0, r9
 8007ab4:	f000 fbaa 	bl	800820c <_Bfree>
 8007ab8:	e7d0      	b.n	8007a5c <_dtoa_r+0x57c>
 8007aba:	f8cd 8010 	str.w	r8, [sp, #16]
 8007abe:	4633      	mov	r3, r6
 8007ac0:	461e      	mov	r6, r3
 8007ac2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ac6:	2a39      	cmp	r2, #57	@ 0x39
 8007ac8:	d106      	bne.n	8007ad8 <_dtoa_r+0x5f8>
 8007aca:	429f      	cmp	r7, r3
 8007acc:	d1f8      	bne.n	8007ac0 <_dtoa_r+0x5e0>
 8007ace:	9a04      	ldr	r2, [sp, #16]
 8007ad0:	3201      	adds	r2, #1
 8007ad2:	9204      	str	r2, [sp, #16]
 8007ad4:	2230      	movs	r2, #48	@ 0x30
 8007ad6:	703a      	strb	r2, [r7, #0]
 8007ad8:	781a      	ldrb	r2, [r3, #0]
 8007ada:	3201      	adds	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	e7bd      	b.n	8007a5c <_dtoa_r+0x57c>
 8007ae0:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007ae4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007ae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aec:	f47f aeef 	bne.w	80078ce <_dtoa_r+0x3ee>
 8007af0:	e710      	b.n	8007914 <_dtoa_r+0x434>
 8007af2:	bf00      	nop
 8007af4:	0800b088 	.word	0x0800b088
 8007af8:	0800b060 	.word	0x0800b060
 8007afc:	9908      	ldr	r1, [sp, #32]
 8007afe:	2900      	cmp	r1, #0
 8007b00:	f000 80e3 	beq.w	8007cca <_dtoa_r+0x7ea>
 8007b04:	9907      	ldr	r1, [sp, #28]
 8007b06:	2901      	cmp	r1, #1
 8007b08:	f300 80c8 	bgt.w	8007c9c <_dtoa_r+0x7bc>
 8007b0c:	2d00      	cmp	r5, #0
 8007b0e:	f000 80c1 	beq.w	8007c94 <_dtoa_r+0x7b4>
 8007b12:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007b16:	9e05      	ldr	r6, [sp, #20]
 8007b18:	461c      	mov	r4, r3
 8007b1a:	9304      	str	r3, [sp, #16]
 8007b1c:	9b05      	ldr	r3, [sp, #20]
 8007b1e:	4413      	add	r3, r2
 8007b20:	9305      	str	r3, [sp, #20]
 8007b22:	9b06      	ldr	r3, [sp, #24]
 8007b24:	2101      	movs	r1, #1
 8007b26:	4413      	add	r3, r2
 8007b28:	4648      	mov	r0, r9
 8007b2a:	9306      	str	r3, [sp, #24]
 8007b2c:	f000 fc6c 	bl	8008408 <__i2b>
 8007b30:	9b04      	ldr	r3, [sp, #16]
 8007b32:	4605      	mov	r5, r0
 8007b34:	b166      	cbz	r6, 8007b50 <_dtoa_r+0x670>
 8007b36:	9a06      	ldr	r2, [sp, #24]
 8007b38:	2a00      	cmp	r2, #0
 8007b3a:	dd09      	ble.n	8007b50 <_dtoa_r+0x670>
 8007b3c:	42b2      	cmp	r2, r6
 8007b3e:	9905      	ldr	r1, [sp, #20]
 8007b40:	bfa8      	it	ge
 8007b42:	4632      	movge	r2, r6
 8007b44:	1a89      	subs	r1, r1, r2
 8007b46:	9105      	str	r1, [sp, #20]
 8007b48:	9906      	ldr	r1, [sp, #24]
 8007b4a:	1ab6      	subs	r6, r6, r2
 8007b4c:	1a8a      	subs	r2, r1, r2
 8007b4e:	9206      	str	r2, [sp, #24]
 8007b50:	b1fb      	cbz	r3, 8007b92 <_dtoa_r+0x6b2>
 8007b52:	9a08      	ldr	r2, [sp, #32]
 8007b54:	2a00      	cmp	r2, #0
 8007b56:	f000 80bc 	beq.w	8007cd2 <_dtoa_r+0x7f2>
 8007b5a:	b19c      	cbz	r4, 8007b84 <_dtoa_r+0x6a4>
 8007b5c:	4629      	mov	r1, r5
 8007b5e:	4622      	mov	r2, r4
 8007b60:	4648      	mov	r0, r9
 8007b62:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b64:	f000 fd10 	bl	8008588 <__pow5mult>
 8007b68:	9a01      	ldr	r2, [sp, #4]
 8007b6a:	4601      	mov	r1, r0
 8007b6c:	4605      	mov	r5, r0
 8007b6e:	4648      	mov	r0, r9
 8007b70:	f000 fc60 	bl	8008434 <__multiply>
 8007b74:	9901      	ldr	r1, [sp, #4]
 8007b76:	9004      	str	r0, [sp, #16]
 8007b78:	4648      	mov	r0, r9
 8007b7a:	f000 fb47 	bl	800820c <_Bfree>
 8007b7e:	9a04      	ldr	r2, [sp, #16]
 8007b80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b82:	9201      	str	r2, [sp, #4]
 8007b84:	1b1a      	subs	r2, r3, r4
 8007b86:	d004      	beq.n	8007b92 <_dtoa_r+0x6b2>
 8007b88:	9901      	ldr	r1, [sp, #4]
 8007b8a:	4648      	mov	r0, r9
 8007b8c:	f000 fcfc 	bl	8008588 <__pow5mult>
 8007b90:	9001      	str	r0, [sp, #4]
 8007b92:	2101      	movs	r1, #1
 8007b94:	4648      	mov	r0, r9
 8007b96:	f000 fc37 	bl	8008408 <__i2b>
 8007b9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b9c:	4604      	mov	r4, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 81d0 	beq.w	8007f44 <_dtoa_r+0xa64>
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	4648      	mov	r0, r9
 8007baa:	f000 fced 	bl	8008588 <__pow5mult>
 8007bae:	9b07      	ldr	r3, [sp, #28]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	f300 8095 	bgt.w	8007ce2 <_dtoa_r+0x802>
 8007bb8:	9b02      	ldr	r3, [sp, #8]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f040 808b 	bne.w	8007cd6 <_dtoa_r+0x7f6>
 8007bc0:	9b03      	ldr	r3, [sp, #12]
 8007bc2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	f040 8087 	bne.w	8007cda <_dtoa_r+0x7fa>
 8007bcc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007bd0:	0d12      	lsrs	r2, r2, #20
 8007bd2:	0512      	lsls	r2, r2, #20
 8007bd4:	2a00      	cmp	r2, #0
 8007bd6:	f000 8082 	beq.w	8007cde <_dtoa_r+0x7fe>
 8007bda:	9b05      	ldr	r3, [sp, #20]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	9305      	str	r3, [sp, #20]
 8007be0:	9b06      	ldr	r3, [sp, #24]
 8007be2:	3301      	adds	r3, #1
 8007be4:	9306      	str	r3, [sp, #24]
 8007be6:	2301      	movs	r3, #1
 8007be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	f000 81af 	beq.w	8007f50 <_dtoa_r+0xa70>
 8007bf2:	6922      	ldr	r2, [r4, #16]
 8007bf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007bf8:	6910      	ldr	r0, [r2, #16]
 8007bfa:	f000 fbb9 	bl	8008370 <__hi0bits>
 8007bfe:	f1c0 0020 	rsb	r0, r0, #32
 8007c02:	9b06      	ldr	r3, [sp, #24]
 8007c04:	4418      	add	r0, r3
 8007c06:	f010 001f 	ands.w	r0, r0, #31
 8007c0a:	d076      	beq.n	8007cfa <_dtoa_r+0x81a>
 8007c0c:	f1c0 0220 	rsb	r2, r0, #32
 8007c10:	2a04      	cmp	r2, #4
 8007c12:	dd69      	ble.n	8007ce8 <_dtoa_r+0x808>
 8007c14:	9b05      	ldr	r3, [sp, #20]
 8007c16:	f1c0 001c 	rsb	r0, r0, #28
 8007c1a:	4403      	add	r3, r0
 8007c1c:	9305      	str	r3, [sp, #20]
 8007c1e:	9b06      	ldr	r3, [sp, #24]
 8007c20:	4406      	add	r6, r0
 8007c22:	4403      	add	r3, r0
 8007c24:	9306      	str	r3, [sp, #24]
 8007c26:	9b05      	ldr	r3, [sp, #20]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	dd05      	ble.n	8007c38 <_dtoa_r+0x758>
 8007c2c:	9901      	ldr	r1, [sp, #4]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4648      	mov	r0, r9
 8007c32:	f000 fd03 	bl	800863c <__lshift>
 8007c36:	9001      	str	r0, [sp, #4]
 8007c38:	9b06      	ldr	r3, [sp, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	dd05      	ble.n	8007c4a <_dtoa_r+0x76a>
 8007c3e:	4621      	mov	r1, r4
 8007c40:	461a      	mov	r2, r3
 8007c42:	4648      	mov	r0, r9
 8007c44:	f000 fcfa 	bl	800863c <__lshift>
 8007c48:	4604      	mov	r4, r0
 8007c4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d056      	beq.n	8007cfe <_dtoa_r+0x81e>
 8007c50:	9801      	ldr	r0, [sp, #4]
 8007c52:	4621      	mov	r1, r4
 8007c54:	f000 fd5e 	bl	8008714 <__mcmp>
 8007c58:	2800      	cmp	r0, #0
 8007c5a:	da50      	bge.n	8007cfe <_dtoa_r+0x81e>
 8007c5c:	f108 33ff 	add.w	r3, r8, #4294967295
 8007c60:	9304      	str	r3, [sp, #16]
 8007c62:	9901      	ldr	r1, [sp, #4]
 8007c64:	2300      	movs	r3, #0
 8007c66:	220a      	movs	r2, #10
 8007c68:	4648      	mov	r0, r9
 8007c6a:	f000 faf1 	bl	8008250 <__multadd>
 8007c6e:	9b08      	ldr	r3, [sp, #32]
 8007c70:	9001      	str	r0, [sp, #4]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 816e 	beq.w	8007f54 <_dtoa_r+0xa74>
 8007c78:	4629      	mov	r1, r5
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	220a      	movs	r2, #10
 8007c7e:	4648      	mov	r0, r9
 8007c80:	f000 fae6 	bl	8008250 <__multadd>
 8007c84:	f1bb 0f00 	cmp.w	fp, #0
 8007c88:	4605      	mov	r5, r0
 8007c8a:	dc64      	bgt.n	8007d56 <_dtoa_r+0x876>
 8007c8c:	9b07      	ldr	r3, [sp, #28]
 8007c8e:	2b02      	cmp	r3, #2
 8007c90:	dc3e      	bgt.n	8007d10 <_dtoa_r+0x830>
 8007c92:	e060      	b.n	8007d56 <_dtoa_r+0x876>
 8007c94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007c96:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c9a:	e73c      	b.n	8007b16 <_dtoa_r+0x636>
 8007c9c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007ca0:	42a3      	cmp	r3, r4
 8007ca2:	bfbf      	itttt	lt
 8007ca4:	1ae2      	sublt	r2, r4, r3
 8007ca6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007ca8:	189b      	addlt	r3, r3, r2
 8007caa:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007cac:	bfae      	itee	ge
 8007cae:	1b1c      	subge	r4, r3, r4
 8007cb0:	4623      	movlt	r3, r4
 8007cb2:	2400      	movlt	r4, #0
 8007cb4:	f1ba 0f00 	cmp.w	sl, #0
 8007cb8:	bfb5      	itete	lt
 8007cba:	9a05      	ldrlt	r2, [sp, #20]
 8007cbc:	9e05      	ldrge	r6, [sp, #20]
 8007cbe:	eba2 060a 	sublt.w	r6, r2, sl
 8007cc2:	4652      	movge	r2, sl
 8007cc4:	bfb8      	it	lt
 8007cc6:	2200      	movlt	r2, #0
 8007cc8:	e727      	b.n	8007b1a <_dtoa_r+0x63a>
 8007cca:	9e05      	ldr	r6, [sp, #20]
 8007ccc:	9d08      	ldr	r5, [sp, #32]
 8007cce:	461c      	mov	r4, r3
 8007cd0:	e730      	b.n	8007b34 <_dtoa_r+0x654>
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	e758      	b.n	8007b88 <_dtoa_r+0x6a8>
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	e786      	b.n	8007be8 <_dtoa_r+0x708>
 8007cda:	9b02      	ldr	r3, [sp, #8]
 8007cdc:	e784      	b.n	8007be8 <_dtoa_r+0x708>
 8007cde:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ce0:	e783      	b.n	8007bea <_dtoa_r+0x70a>
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ce6:	e784      	b.n	8007bf2 <_dtoa_r+0x712>
 8007ce8:	d09d      	beq.n	8007c26 <_dtoa_r+0x746>
 8007cea:	9b05      	ldr	r3, [sp, #20]
 8007cec:	321c      	adds	r2, #28
 8007cee:	4413      	add	r3, r2
 8007cf0:	9305      	str	r3, [sp, #20]
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	4416      	add	r6, r2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	e794      	b.n	8007c24 <_dtoa_r+0x744>
 8007cfa:	4602      	mov	r2, r0
 8007cfc:	e7f5      	b.n	8007cea <_dtoa_r+0x80a>
 8007cfe:	f1ba 0f00 	cmp.w	sl, #0
 8007d02:	f8cd 8010 	str.w	r8, [sp, #16]
 8007d06:	46d3      	mov	fp, sl
 8007d08:	dc21      	bgt.n	8007d4e <_dtoa_r+0x86e>
 8007d0a:	9b07      	ldr	r3, [sp, #28]
 8007d0c:	2b02      	cmp	r3, #2
 8007d0e:	dd1e      	ble.n	8007d4e <_dtoa_r+0x86e>
 8007d10:	f1bb 0f00 	cmp.w	fp, #0
 8007d14:	f47f aeb7 	bne.w	8007a86 <_dtoa_r+0x5a6>
 8007d18:	4621      	mov	r1, r4
 8007d1a:	465b      	mov	r3, fp
 8007d1c:	2205      	movs	r2, #5
 8007d1e:	4648      	mov	r0, r9
 8007d20:	f000 fa96 	bl	8008250 <__multadd>
 8007d24:	4601      	mov	r1, r0
 8007d26:	4604      	mov	r4, r0
 8007d28:	9801      	ldr	r0, [sp, #4]
 8007d2a:	f000 fcf3 	bl	8008714 <__mcmp>
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	f77f aea9 	ble.w	8007a86 <_dtoa_r+0x5a6>
 8007d34:	463e      	mov	r6, r7
 8007d36:	2331      	movs	r3, #49	@ 0x31
 8007d38:	f806 3b01 	strb.w	r3, [r6], #1
 8007d3c:	9b04      	ldr	r3, [sp, #16]
 8007d3e:	3301      	adds	r3, #1
 8007d40:	9304      	str	r3, [sp, #16]
 8007d42:	e6a4      	b.n	8007a8e <_dtoa_r+0x5ae>
 8007d44:	f8cd 8010 	str.w	r8, [sp, #16]
 8007d48:	4654      	mov	r4, sl
 8007d4a:	4625      	mov	r5, r4
 8007d4c:	e7f2      	b.n	8007d34 <_dtoa_r+0x854>
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f000 8103 	beq.w	8007f5c <_dtoa_r+0xa7c>
 8007d56:	2e00      	cmp	r6, #0
 8007d58:	dd05      	ble.n	8007d66 <_dtoa_r+0x886>
 8007d5a:	4629      	mov	r1, r5
 8007d5c:	4632      	mov	r2, r6
 8007d5e:	4648      	mov	r0, r9
 8007d60:	f000 fc6c 	bl	800863c <__lshift>
 8007d64:	4605      	mov	r5, r0
 8007d66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d058      	beq.n	8007e1e <_dtoa_r+0x93e>
 8007d6c:	6869      	ldr	r1, [r5, #4]
 8007d6e:	4648      	mov	r0, r9
 8007d70:	f000 fa0c 	bl	800818c <_Balloc>
 8007d74:	4606      	mov	r6, r0
 8007d76:	b928      	cbnz	r0, 8007d84 <_dtoa_r+0x8a4>
 8007d78:	4b82      	ldr	r3, [pc, #520]	@ (8007f84 <_dtoa_r+0xaa4>)
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d80:	f7ff bbc7 	b.w	8007512 <_dtoa_r+0x32>
 8007d84:	692a      	ldr	r2, [r5, #16]
 8007d86:	3202      	adds	r2, #2
 8007d88:	0092      	lsls	r2, r2, #2
 8007d8a:	f105 010c 	add.w	r1, r5, #12
 8007d8e:	300c      	adds	r0, #12
 8007d90:	f7ff fb07 	bl	80073a2 <memcpy>
 8007d94:	2201      	movs	r2, #1
 8007d96:	4631      	mov	r1, r6
 8007d98:	4648      	mov	r0, r9
 8007d9a:	f000 fc4f 	bl	800863c <__lshift>
 8007d9e:	1c7b      	adds	r3, r7, #1
 8007da0:	9305      	str	r3, [sp, #20]
 8007da2:	eb07 030b 	add.w	r3, r7, fp
 8007da6:	9309      	str	r3, [sp, #36]	@ 0x24
 8007da8:	9b02      	ldr	r3, [sp, #8]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	46a8      	mov	r8, r5
 8007db0:	9308      	str	r3, [sp, #32]
 8007db2:	4605      	mov	r5, r0
 8007db4:	9b05      	ldr	r3, [sp, #20]
 8007db6:	9801      	ldr	r0, [sp, #4]
 8007db8:	4621      	mov	r1, r4
 8007dba:	f103 3bff 	add.w	fp, r3, #4294967295
 8007dbe:	f7ff fb05 	bl	80073cc <quorem>
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	9002      	str	r0, [sp, #8]
 8007dc6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007dca:	9801      	ldr	r0, [sp, #4]
 8007dcc:	f000 fca2 	bl	8008714 <__mcmp>
 8007dd0:	462a      	mov	r2, r5
 8007dd2:	9006      	str	r0, [sp, #24]
 8007dd4:	4621      	mov	r1, r4
 8007dd6:	4648      	mov	r0, r9
 8007dd8:	f000 fcb8 	bl	800874c <__mdiff>
 8007ddc:	68c2      	ldr	r2, [r0, #12]
 8007dde:	4606      	mov	r6, r0
 8007de0:	b9fa      	cbnz	r2, 8007e22 <_dtoa_r+0x942>
 8007de2:	4601      	mov	r1, r0
 8007de4:	9801      	ldr	r0, [sp, #4]
 8007de6:	f000 fc95 	bl	8008714 <__mcmp>
 8007dea:	4602      	mov	r2, r0
 8007dec:	4631      	mov	r1, r6
 8007dee:	4648      	mov	r0, r9
 8007df0:	920a      	str	r2, [sp, #40]	@ 0x28
 8007df2:	f000 fa0b 	bl	800820c <_Bfree>
 8007df6:	9b07      	ldr	r3, [sp, #28]
 8007df8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007dfa:	9e05      	ldr	r6, [sp, #20]
 8007dfc:	ea43 0102 	orr.w	r1, r3, r2
 8007e00:	9b08      	ldr	r3, [sp, #32]
 8007e02:	4319      	orrs	r1, r3
 8007e04:	d10f      	bne.n	8007e26 <_dtoa_r+0x946>
 8007e06:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007e0a:	d028      	beq.n	8007e5e <_dtoa_r+0x97e>
 8007e0c:	9b06      	ldr	r3, [sp, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dd02      	ble.n	8007e18 <_dtoa_r+0x938>
 8007e12:	9b02      	ldr	r3, [sp, #8]
 8007e14:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007e18:	f88b a000 	strb.w	sl, [fp]
 8007e1c:	e639      	b.n	8007a92 <_dtoa_r+0x5b2>
 8007e1e:	4628      	mov	r0, r5
 8007e20:	e7bd      	b.n	8007d9e <_dtoa_r+0x8be>
 8007e22:	2201      	movs	r2, #1
 8007e24:	e7e2      	b.n	8007dec <_dtoa_r+0x90c>
 8007e26:	9b06      	ldr	r3, [sp, #24]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	db04      	blt.n	8007e36 <_dtoa_r+0x956>
 8007e2c:	9907      	ldr	r1, [sp, #28]
 8007e2e:	430b      	orrs	r3, r1
 8007e30:	9908      	ldr	r1, [sp, #32]
 8007e32:	430b      	orrs	r3, r1
 8007e34:	d120      	bne.n	8007e78 <_dtoa_r+0x998>
 8007e36:	2a00      	cmp	r2, #0
 8007e38:	ddee      	ble.n	8007e18 <_dtoa_r+0x938>
 8007e3a:	9901      	ldr	r1, [sp, #4]
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	4648      	mov	r0, r9
 8007e40:	f000 fbfc 	bl	800863c <__lshift>
 8007e44:	4621      	mov	r1, r4
 8007e46:	9001      	str	r0, [sp, #4]
 8007e48:	f000 fc64 	bl	8008714 <__mcmp>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	dc03      	bgt.n	8007e58 <_dtoa_r+0x978>
 8007e50:	d1e2      	bne.n	8007e18 <_dtoa_r+0x938>
 8007e52:	f01a 0f01 	tst.w	sl, #1
 8007e56:	d0df      	beq.n	8007e18 <_dtoa_r+0x938>
 8007e58:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007e5c:	d1d9      	bne.n	8007e12 <_dtoa_r+0x932>
 8007e5e:	2339      	movs	r3, #57	@ 0x39
 8007e60:	f88b 3000 	strb.w	r3, [fp]
 8007e64:	4633      	mov	r3, r6
 8007e66:	461e      	mov	r6, r3
 8007e68:	3b01      	subs	r3, #1
 8007e6a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e6e:	2a39      	cmp	r2, #57	@ 0x39
 8007e70:	d053      	beq.n	8007f1a <_dtoa_r+0xa3a>
 8007e72:	3201      	adds	r2, #1
 8007e74:	701a      	strb	r2, [r3, #0]
 8007e76:	e60c      	b.n	8007a92 <_dtoa_r+0x5b2>
 8007e78:	2a00      	cmp	r2, #0
 8007e7a:	dd07      	ble.n	8007e8c <_dtoa_r+0x9ac>
 8007e7c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007e80:	d0ed      	beq.n	8007e5e <_dtoa_r+0x97e>
 8007e82:	f10a 0301 	add.w	r3, sl, #1
 8007e86:	f88b 3000 	strb.w	r3, [fp]
 8007e8a:	e602      	b.n	8007a92 <_dtoa_r+0x5b2>
 8007e8c:	9b05      	ldr	r3, [sp, #20]
 8007e8e:	9a05      	ldr	r2, [sp, #20]
 8007e90:	f803 ac01 	strb.w	sl, [r3, #-1]
 8007e94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d029      	beq.n	8007eee <_dtoa_r+0xa0e>
 8007e9a:	9901      	ldr	r1, [sp, #4]
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	220a      	movs	r2, #10
 8007ea0:	4648      	mov	r0, r9
 8007ea2:	f000 f9d5 	bl	8008250 <__multadd>
 8007ea6:	45a8      	cmp	r8, r5
 8007ea8:	9001      	str	r0, [sp, #4]
 8007eaa:	f04f 0300 	mov.w	r3, #0
 8007eae:	f04f 020a 	mov.w	r2, #10
 8007eb2:	4641      	mov	r1, r8
 8007eb4:	4648      	mov	r0, r9
 8007eb6:	d107      	bne.n	8007ec8 <_dtoa_r+0x9e8>
 8007eb8:	f000 f9ca 	bl	8008250 <__multadd>
 8007ebc:	4680      	mov	r8, r0
 8007ebe:	4605      	mov	r5, r0
 8007ec0:	9b05      	ldr	r3, [sp, #20]
 8007ec2:	3301      	adds	r3, #1
 8007ec4:	9305      	str	r3, [sp, #20]
 8007ec6:	e775      	b.n	8007db4 <_dtoa_r+0x8d4>
 8007ec8:	f000 f9c2 	bl	8008250 <__multadd>
 8007ecc:	4629      	mov	r1, r5
 8007ece:	4680      	mov	r8, r0
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	4648      	mov	r0, r9
 8007ed6:	f000 f9bb 	bl	8008250 <__multadd>
 8007eda:	4605      	mov	r5, r0
 8007edc:	e7f0      	b.n	8007ec0 <_dtoa_r+0x9e0>
 8007ede:	f1bb 0f00 	cmp.w	fp, #0
 8007ee2:	bfcc      	ite	gt
 8007ee4:	465e      	movgt	r6, fp
 8007ee6:	2601      	movle	r6, #1
 8007ee8:	443e      	add	r6, r7
 8007eea:	f04f 0800 	mov.w	r8, #0
 8007eee:	9901      	ldr	r1, [sp, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	4648      	mov	r0, r9
 8007ef4:	f000 fba2 	bl	800863c <__lshift>
 8007ef8:	4621      	mov	r1, r4
 8007efa:	9001      	str	r0, [sp, #4]
 8007efc:	f000 fc0a 	bl	8008714 <__mcmp>
 8007f00:	2800      	cmp	r0, #0
 8007f02:	dcaf      	bgt.n	8007e64 <_dtoa_r+0x984>
 8007f04:	d102      	bne.n	8007f0c <_dtoa_r+0xa2c>
 8007f06:	f01a 0f01 	tst.w	sl, #1
 8007f0a:	d1ab      	bne.n	8007e64 <_dtoa_r+0x984>
 8007f0c:	4633      	mov	r3, r6
 8007f0e:	461e      	mov	r6, r3
 8007f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f14:	2a30      	cmp	r2, #48	@ 0x30
 8007f16:	d0fa      	beq.n	8007f0e <_dtoa_r+0xa2e>
 8007f18:	e5bb      	b.n	8007a92 <_dtoa_r+0x5b2>
 8007f1a:	429f      	cmp	r7, r3
 8007f1c:	d1a3      	bne.n	8007e66 <_dtoa_r+0x986>
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	3301      	adds	r3, #1
 8007f22:	9304      	str	r3, [sp, #16]
 8007f24:	2331      	movs	r3, #49	@ 0x31
 8007f26:	703b      	strb	r3, [r7, #0]
 8007f28:	e5b3      	b.n	8007a92 <_dtoa_r+0x5b2>
 8007f2a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007f2c:	4f16      	ldr	r7, [pc, #88]	@ (8007f88 <_dtoa_r+0xaa8>)
 8007f2e:	b11b      	cbz	r3, 8007f38 <_dtoa_r+0xa58>
 8007f30:	f107 0308 	add.w	r3, r7, #8
 8007f34:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007f36:	6013      	str	r3, [r2, #0]
 8007f38:	4638      	mov	r0, r7
 8007f3a:	b011      	add	sp, #68	@ 0x44
 8007f3c:	ecbd 8b02 	vpop	{d8}
 8007f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f44:	9b07      	ldr	r3, [sp, #28]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	f77f ae36 	ble.w	8007bb8 <_dtoa_r+0x6d8>
 8007f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f50:	2001      	movs	r0, #1
 8007f52:	e656      	b.n	8007c02 <_dtoa_r+0x722>
 8007f54:	f1bb 0f00 	cmp.w	fp, #0
 8007f58:	f77f aed7 	ble.w	8007d0a <_dtoa_r+0x82a>
 8007f5c:	463e      	mov	r6, r7
 8007f5e:	9801      	ldr	r0, [sp, #4]
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7ff fa33 	bl	80073cc <quorem>
 8007f66:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007f6a:	f806 ab01 	strb.w	sl, [r6], #1
 8007f6e:	1bf2      	subs	r2, r6, r7
 8007f70:	4593      	cmp	fp, r2
 8007f72:	ddb4      	ble.n	8007ede <_dtoa_r+0x9fe>
 8007f74:	9901      	ldr	r1, [sp, #4]
 8007f76:	2300      	movs	r3, #0
 8007f78:	220a      	movs	r2, #10
 8007f7a:	4648      	mov	r0, r9
 8007f7c:	f000 f968 	bl	8008250 <__multadd>
 8007f80:	9001      	str	r0, [sp, #4]
 8007f82:	e7ec      	b.n	8007f5e <_dtoa_r+0xa7e>
 8007f84:	0800afe9 	.word	0x0800afe9
 8007f88:	0800af6d 	.word	0x0800af6d

08007f8c <_free_r>:
 8007f8c:	b538      	push	{r3, r4, r5, lr}
 8007f8e:	4605      	mov	r5, r0
 8007f90:	2900      	cmp	r1, #0
 8007f92:	d041      	beq.n	8008018 <_free_r+0x8c>
 8007f94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f98:	1f0c      	subs	r4, r1, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	bfb8      	it	lt
 8007f9e:	18e4      	addlt	r4, r4, r3
 8007fa0:	f000 f8e8 	bl	8008174 <__malloc_lock>
 8007fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800801c <_free_r+0x90>)
 8007fa6:	6813      	ldr	r3, [r2, #0]
 8007fa8:	b933      	cbnz	r3, 8007fb8 <_free_r+0x2c>
 8007faa:	6063      	str	r3, [r4, #4]
 8007fac:	6014      	str	r4, [r2, #0]
 8007fae:	4628      	mov	r0, r5
 8007fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fb4:	f000 b8e4 	b.w	8008180 <__malloc_unlock>
 8007fb8:	42a3      	cmp	r3, r4
 8007fba:	d908      	bls.n	8007fce <_free_r+0x42>
 8007fbc:	6820      	ldr	r0, [r4, #0]
 8007fbe:	1821      	adds	r1, r4, r0
 8007fc0:	428b      	cmp	r3, r1
 8007fc2:	bf01      	itttt	eq
 8007fc4:	6819      	ldreq	r1, [r3, #0]
 8007fc6:	685b      	ldreq	r3, [r3, #4]
 8007fc8:	1809      	addeq	r1, r1, r0
 8007fca:	6021      	streq	r1, [r4, #0]
 8007fcc:	e7ed      	b.n	8007faa <_free_r+0x1e>
 8007fce:	461a      	mov	r2, r3
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	b10b      	cbz	r3, 8007fd8 <_free_r+0x4c>
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d9fa      	bls.n	8007fce <_free_r+0x42>
 8007fd8:	6811      	ldr	r1, [r2, #0]
 8007fda:	1850      	adds	r0, r2, r1
 8007fdc:	42a0      	cmp	r0, r4
 8007fde:	d10b      	bne.n	8007ff8 <_free_r+0x6c>
 8007fe0:	6820      	ldr	r0, [r4, #0]
 8007fe2:	4401      	add	r1, r0
 8007fe4:	1850      	adds	r0, r2, r1
 8007fe6:	4283      	cmp	r3, r0
 8007fe8:	6011      	str	r1, [r2, #0]
 8007fea:	d1e0      	bne.n	8007fae <_free_r+0x22>
 8007fec:	6818      	ldr	r0, [r3, #0]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	6053      	str	r3, [r2, #4]
 8007ff2:	4408      	add	r0, r1
 8007ff4:	6010      	str	r0, [r2, #0]
 8007ff6:	e7da      	b.n	8007fae <_free_r+0x22>
 8007ff8:	d902      	bls.n	8008000 <_free_r+0x74>
 8007ffa:	230c      	movs	r3, #12
 8007ffc:	602b      	str	r3, [r5, #0]
 8007ffe:	e7d6      	b.n	8007fae <_free_r+0x22>
 8008000:	6820      	ldr	r0, [r4, #0]
 8008002:	1821      	adds	r1, r4, r0
 8008004:	428b      	cmp	r3, r1
 8008006:	bf04      	itt	eq
 8008008:	6819      	ldreq	r1, [r3, #0]
 800800a:	685b      	ldreq	r3, [r3, #4]
 800800c:	6063      	str	r3, [r4, #4]
 800800e:	bf04      	itt	eq
 8008010:	1809      	addeq	r1, r1, r0
 8008012:	6021      	streq	r1, [r4, #0]
 8008014:	6054      	str	r4, [r2, #4]
 8008016:	e7ca      	b.n	8007fae <_free_r+0x22>
 8008018:	bd38      	pop	{r3, r4, r5, pc}
 800801a:	bf00      	nop
 800801c:	24000878 	.word	0x24000878

08008020 <malloc>:
 8008020:	4b02      	ldr	r3, [pc, #8]	@ (800802c <malloc+0xc>)
 8008022:	4601      	mov	r1, r0
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	f000 b825 	b.w	8008074 <_malloc_r>
 800802a:	bf00      	nop
 800802c:	2400001c 	.word	0x2400001c

08008030 <sbrk_aligned>:
 8008030:	b570      	push	{r4, r5, r6, lr}
 8008032:	4e0f      	ldr	r6, [pc, #60]	@ (8008070 <sbrk_aligned+0x40>)
 8008034:	460c      	mov	r4, r1
 8008036:	6831      	ldr	r1, [r6, #0]
 8008038:	4605      	mov	r5, r0
 800803a:	b911      	cbnz	r1, 8008042 <sbrk_aligned+0x12>
 800803c:	f001 fdb8 	bl	8009bb0 <_sbrk_r>
 8008040:	6030      	str	r0, [r6, #0]
 8008042:	4621      	mov	r1, r4
 8008044:	4628      	mov	r0, r5
 8008046:	f001 fdb3 	bl	8009bb0 <_sbrk_r>
 800804a:	1c43      	adds	r3, r0, #1
 800804c:	d103      	bne.n	8008056 <sbrk_aligned+0x26>
 800804e:	f04f 34ff 	mov.w	r4, #4294967295
 8008052:	4620      	mov	r0, r4
 8008054:	bd70      	pop	{r4, r5, r6, pc}
 8008056:	1cc4      	adds	r4, r0, #3
 8008058:	f024 0403 	bic.w	r4, r4, #3
 800805c:	42a0      	cmp	r0, r4
 800805e:	d0f8      	beq.n	8008052 <sbrk_aligned+0x22>
 8008060:	1a21      	subs	r1, r4, r0
 8008062:	4628      	mov	r0, r5
 8008064:	f001 fda4 	bl	8009bb0 <_sbrk_r>
 8008068:	3001      	adds	r0, #1
 800806a:	d1f2      	bne.n	8008052 <sbrk_aligned+0x22>
 800806c:	e7ef      	b.n	800804e <sbrk_aligned+0x1e>
 800806e:	bf00      	nop
 8008070:	24000874 	.word	0x24000874

08008074 <_malloc_r>:
 8008074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008078:	1ccd      	adds	r5, r1, #3
 800807a:	f025 0503 	bic.w	r5, r5, #3
 800807e:	3508      	adds	r5, #8
 8008080:	2d0c      	cmp	r5, #12
 8008082:	bf38      	it	cc
 8008084:	250c      	movcc	r5, #12
 8008086:	2d00      	cmp	r5, #0
 8008088:	4606      	mov	r6, r0
 800808a:	db01      	blt.n	8008090 <_malloc_r+0x1c>
 800808c:	42a9      	cmp	r1, r5
 800808e:	d904      	bls.n	800809a <_malloc_r+0x26>
 8008090:	230c      	movs	r3, #12
 8008092:	6033      	str	r3, [r6, #0]
 8008094:	2000      	movs	r0, #0
 8008096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800809a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008170 <_malloc_r+0xfc>
 800809e:	f000 f869 	bl	8008174 <__malloc_lock>
 80080a2:	f8d8 3000 	ldr.w	r3, [r8]
 80080a6:	461c      	mov	r4, r3
 80080a8:	bb44      	cbnz	r4, 80080fc <_malloc_r+0x88>
 80080aa:	4629      	mov	r1, r5
 80080ac:	4630      	mov	r0, r6
 80080ae:	f7ff ffbf 	bl	8008030 <sbrk_aligned>
 80080b2:	1c43      	adds	r3, r0, #1
 80080b4:	4604      	mov	r4, r0
 80080b6:	d158      	bne.n	800816a <_malloc_r+0xf6>
 80080b8:	f8d8 4000 	ldr.w	r4, [r8]
 80080bc:	4627      	mov	r7, r4
 80080be:	2f00      	cmp	r7, #0
 80080c0:	d143      	bne.n	800814a <_malloc_r+0xd6>
 80080c2:	2c00      	cmp	r4, #0
 80080c4:	d04b      	beq.n	800815e <_malloc_r+0xea>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	4639      	mov	r1, r7
 80080ca:	4630      	mov	r0, r6
 80080cc:	eb04 0903 	add.w	r9, r4, r3
 80080d0:	f001 fd6e 	bl	8009bb0 <_sbrk_r>
 80080d4:	4581      	cmp	r9, r0
 80080d6:	d142      	bne.n	800815e <_malloc_r+0xea>
 80080d8:	6821      	ldr	r1, [r4, #0]
 80080da:	1a6d      	subs	r5, r5, r1
 80080dc:	4629      	mov	r1, r5
 80080de:	4630      	mov	r0, r6
 80080e0:	f7ff ffa6 	bl	8008030 <sbrk_aligned>
 80080e4:	3001      	adds	r0, #1
 80080e6:	d03a      	beq.n	800815e <_malloc_r+0xea>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	442b      	add	r3, r5
 80080ec:	6023      	str	r3, [r4, #0]
 80080ee:	f8d8 3000 	ldr.w	r3, [r8]
 80080f2:	685a      	ldr	r2, [r3, #4]
 80080f4:	bb62      	cbnz	r2, 8008150 <_malloc_r+0xdc>
 80080f6:	f8c8 7000 	str.w	r7, [r8]
 80080fa:	e00f      	b.n	800811c <_malloc_r+0xa8>
 80080fc:	6822      	ldr	r2, [r4, #0]
 80080fe:	1b52      	subs	r2, r2, r5
 8008100:	d420      	bmi.n	8008144 <_malloc_r+0xd0>
 8008102:	2a0b      	cmp	r2, #11
 8008104:	d917      	bls.n	8008136 <_malloc_r+0xc2>
 8008106:	1961      	adds	r1, r4, r5
 8008108:	42a3      	cmp	r3, r4
 800810a:	6025      	str	r5, [r4, #0]
 800810c:	bf18      	it	ne
 800810e:	6059      	strne	r1, [r3, #4]
 8008110:	6863      	ldr	r3, [r4, #4]
 8008112:	bf08      	it	eq
 8008114:	f8c8 1000 	streq.w	r1, [r8]
 8008118:	5162      	str	r2, [r4, r5]
 800811a:	604b      	str	r3, [r1, #4]
 800811c:	4630      	mov	r0, r6
 800811e:	f000 f82f 	bl	8008180 <__malloc_unlock>
 8008122:	f104 000b 	add.w	r0, r4, #11
 8008126:	1d23      	adds	r3, r4, #4
 8008128:	f020 0007 	bic.w	r0, r0, #7
 800812c:	1ac2      	subs	r2, r0, r3
 800812e:	bf1c      	itt	ne
 8008130:	1a1b      	subne	r3, r3, r0
 8008132:	50a3      	strne	r3, [r4, r2]
 8008134:	e7af      	b.n	8008096 <_malloc_r+0x22>
 8008136:	6862      	ldr	r2, [r4, #4]
 8008138:	42a3      	cmp	r3, r4
 800813a:	bf0c      	ite	eq
 800813c:	f8c8 2000 	streq.w	r2, [r8]
 8008140:	605a      	strne	r2, [r3, #4]
 8008142:	e7eb      	b.n	800811c <_malloc_r+0xa8>
 8008144:	4623      	mov	r3, r4
 8008146:	6864      	ldr	r4, [r4, #4]
 8008148:	e7ae      	b.n	80080a8 <_malloc_r+0x34>
 800814a:	463c      	mov	r4, r7
 800814c:	687f      	ldr	r7, [r7, #4]
 800814e:	e7b6      	b.n	80080be <_malloc_r+0x4a>
 8008150:	461a      	mov	r2, r3
 8008152:	685b      	ldr	r3, [r3, #4]
 8008154:	42a3      	cmp	r3, r4
 8008156:	d1fb      	bne.n	8008150 <_malloc_r+0xdc>
 8008158:	2300      	movs	r3, #0
 800815a:	6053      	str	r3, [r2, #4]
 800815c:	e7de      	b.n	800811c <_malloc_r+0xa8>
 800815e:	230c      	movs	r3, #12
 8008160:	6033      	str	r3, [r6, #0]
 8008162:	4630      	mov	r0, r6
 8008164:	f000 f80c 	bl	8008180 <__malloc_unlock>
 8008168:	e794      	b.n	8008094 <_malloc_r+0x20>
 800816a:	6005      	str	r5, [r0, #0]
 800816c:	e7d6      	b.n	800811c <_malloc_r+0xa8>
 800816e:	bf00      	nop
 8008170:	24000878 	.word	0x24000878

08008174 <__malloc_lock>:
 8008174:	4801      	ldr	r0, [pc, #4]	@ (800817c <__malloc_lock+0x8>)
 8008176:	f7ff b912 	b.w	800739e <__retarget_lock_acquire_recursive>
 800817a:	bf00      	nop
 800817c:	24000870 	.word	0x24000870

08008180 <__malloc_unlock>:
 8008180:	4801      	ldr	r0, [pc, #4]	@ (8008188 <__malloc_unlock+0x8>)
 8008182:	f7ff b90d 	b.w	80073a0 <__retarget_lock_release_recursive>
 8008186:	bf00      	nop
 8008188:	24000870 	.word	0x24000870

0800818c <_Balloc>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	69c6      	ldr	r6, [r0, #28]
 8008190:	4604      	mov	r4, r0
 8008192:	460d      	mov	r5, r1
 8008194:	b976      	cbnz	r6, 80081b4 <_Balloc+0x28>
 8008196:	2010      	movs	r0, #16
 8008198:	f7ff ff42 	bl	8008020 <malloc>
 800819c:	4602      	mov	r2, r0
 800819e:	61e0      	str	r0, [r4, #28]
 80081a0:	b920      	cbnz	r0, 80081ac <_Balloc+0x20>
 80081a2:	4b18      	ldr	r3, [pc, #96]	@ (8008204 <_Balloc+0x78>)
 80081a4:	4818      	ldr	r0, [pc, #96]	@ (8008208 <_Balloc+0x7c>)
 80081a6:	216b      	movs	r1, #107	@ 0x6b
 80081a8:	f001 fd1a 	bl	8009be0 <__assert_func>
 80081ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081b0:	6006      	str	r6, [r0, #0]
 80081b2:	60c6      	str	r6, [r0, #12]
 80081b4:	69e6      	ldr	r6, [r4, #28]
 80081b6:	68f3      	ldr	r3, [r6, #12]
 80081b8:	b183      	cbz	r3, 80081dc <_Balloc+0x50>
 80081ba:	69e3      	ldr	r3, [r4, #28]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081c2:	b9b8      	cbnz	r0, 80081f4 <_Balloc+0x68>
 80081c4:	2101      	movs	r1, #1
 80081c6:	fa01 f605 	lsl.w	r6, r1, r5
 80081ca:	1d72      	adds	r2, r6, #5
 80081cc:	0092      	lsls	r2, r2, #2
 80081ce:	4620      	mov	r0, r4
 80081d0:	f001 fd24 	bl	8009c1c <_calloc_r>
 80081d4:	b160      	cbz	r0, 80081f0 <_Balloc+0x64>
 80081d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081da:	e00e      	b.n	80081fa <_Balloc+0x6e>
 80081dc:	2221      	movs	r2, #33	@ 0x21
 80081de:	2104      	movs	r1, #4
 80081e0:	4620      	mov	r0, r4
 80081e2:	f001 fd1b 	bl	8009c1c <_calloc_r>
 80081e6:	69e3      	ldr	r3, [r4, #28]
 80081e8:	60f0      	str	r0, [r6, #12]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e4      	bne.n	80081ba <_Balloc+0x2e>
 80081f0:	2000      	movs	r0, #0
 80081f2:	bd70      	pop	{r4, r5, r6, pc}
 80081f4:	6802      	ldr	r2, [r0, #0]
 80081f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80081fa:	2300      	movs	r3, #0
 80081fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008200:	e7f7      	b.n	80081f2 <_Balloc+0x66>
 8008202:	bf00      	nop
 8008204:	0800af7a 	.word	0x0800af7a
 8008208:	0800affa 	.word	0x0800affa

0800820c <_Bfree>:
 800820c:	b570      	push	{r4, r5, r6, lr}
 800820e:	69c6      	ldr	r6, [r0, #28]
 8008210:	4605      	mov	r5, r0
 8008212:	460c      	mov	r4, r1
 8008214:	b976      	cbnz	r6, 8008234 <_Bfree+0x28>
 8008216:	2010      	movs	r0, #16
 8008218:	f7ff ff02 	bl	8008020 <malloc>
 800821c:	4602      	mov	r2, r0
 800821e:	61e8      	str	r0, [r5, #28]
 8008220:	b920      	cbnz	r0, 800822c <_Bfree+0x20>
 8008222:	4b09      	ldr	r3, [pc, #36]	@ (8008248 <_Bfree+0x3c>)
 8008224:	4809      	ldr	r0, [pc, #36]	@ (800824c <_Bfree+0x40>)
 8008226:	218f      	movs	r1, #143	@ 0x8f
 8008228:	f001 fcda 	bl	8009be0 <__assert_func>
 800822c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008230:	6006      	str	r6, [r0, #0]
 8008232:	60c6      	str	r6, [r0, #12]
 8008234:	b13c      	cbz	r4, 8008246 <_Bfree+0x3a>
 8008236:	69eb      	ldr	r3, [r5, #28]
 8008238:	6862      	ldr	r2, [r4, #4]
 800823a:	68db      	ldr	r3, [r3, #12]
 800823c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008240:	6021      	str	r1, [r4, #0]
 8008242:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008246:	bd70      	pop	{r4, r5, r6, pc}
 8008248:	0800af7a 	.word	0x0800af7a
 800824c:	0800affa 	.word	0x0800affa

08008250 <__multadd>:
 8008250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008254:	690d      	ldr	r5, [r1, #16]
 8008256:	4607      	mov	r7, r0
 8008258:	460c      	mov	r4, r1
 800825a:	461e      	mov	r6, r3
 800825c:	f101 0c14 	add.w	ip, r1, #20
 8008260:	2000      	movs	r0, #0
 8008262:	f8dc 3000 	ldr.w	r3, [ip]
 8008266:	b299      	uxth	r1, r3
 8008268:	fb02 6101 	mla	r1, r2, r1, r6
 800826c:	0c1e      	lsrs	r6, r3, #16
 800826e:	0c0b      	lsrs	r3, r1, #16
 8008270:	fb02 3306 	mla	r3, r2, r6, r3
 8008274:	b289      	uxth	r1, r1
 8008276:	3001      	adds	r0, #1
 8008278:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800827c:	4285      	cmp	r5, r0
 800827e:	f84c 1b04 	str.w	r1, [ip], #4
 8008282:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008286:	dcec      	bgt.n	8008262 <__multadd+0x12>
 8008288:	b30e      	cbz	r6, 80082ce <__multadd+0x7e>
 800828a:	68a3      	ldr	r3, [r4, #8]
 800828c:	42ab      	cmp	r3, r5
 800828e:	dc19      	bgt.n	80082c4 <__multadd+0x74>
 8008290:	6861      	ldr	r1, [r4, #4]
 8008292:	4638      	mov	r0, r7
 8008294:	3101      	adds	r1, #1
 8008296:	f7ff ff79 	bl	800818c <_Balloc>
 800829a:	4680      	mov	r8, r0
 800829c:	b928      	cbnz	r0, 80082aa <__multadd+0x5a>
 800829e:	4602      	mov	r2, r0
 80082a0:	4b0c      	ldr	r3, [pc, #48]	@ (80082d4 <__multadd+0x84>)
 80082a2:	480d      	ldr	r0, [pc, #52]	@ (80082d8 <__multadd+0x88>)
 80082a4:	21ba      	movs	r1, #186	@ 0xba
 80082a6:	f001 fc9b 	bl	8009be0 <__assert_func>
 80082aa:	6922      	ldr	r2, [r4, #16]
 80082ac:	3202      	adds	r2, #2
 80082ae:	f104 010c 	add.w	r1, r4, #12
 80082b2:	0092      	lsls	r2, r2, #2
 80082b4:	300c      	adds	r0, #12
 80082b6:	f7ff f874 	bl	80073a2 <memcpy>
 80082ba:	4621      	mov	r1, r4
 80082bc:	4638      	mov	r0, r7
 80082be:	f7ff ffa5 	bl	800820c <_Bfree>
 80082c2:	4644      	mov	r4, r8
 80082c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082c8:	3501      	adds	r5, #1
 80082ca:	615e      	str	r6, [r3, #20]
 80082cc:	6125      	str	r5, [r4, #16]
 80082ce:	4620      	mov	r0, r4
 80082d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d4:	0800afe9 	.word	0x0800afe9
 80082d8:	0800affa 	.word	0x0800affa

080082dc <__s2b>:
 80082dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082e0:	460c      	mov	r4, r1
 80082e2:	4615      	mov	r5, r2
 80082e4:	461f      	mov	r7, r3
 80082e6:	2209      	movs	r2, #9
 80082e8:	3308      	adds	r3, #8
 80082ea:	4606      	mov	r6, r0
 80082ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80082f0:	2100      	movs	r1, #0
 80082f2:	2201      	movs	r2, #1
 80082f4:	429a      	cmp	r2, r3
 80082f6:	db09      	blt.n	800830c <__s2b+0x30>
 80082f8:	4630      	mov	r0, r6
 80082fa:	f7ff ff47 	bl	800818c <_Balloc>
 80082fe:	b940      	cbnz	r0, 8008312 <__s2b+0x36>
 8008300:	4602      	mov	r2, r0
 8008302:	4b19      	ldr	r3, [pc, #100]	@ (8008368 <__s2b+0x8c>)
 8008304:	4819      	ldr	r0, [pc, #100]	@ (800836c <__s2b+0x90>)
 8008306:	21d3      	movs	r1, #211	@ 0xd3
 8008308:	f001 fc6a 	bl	8009be0 <__assert_func>
 800830c:	0052      	lsls	r2, r2, #1
 800830e:	3101      	adds	r1, #1
 8008310:	e7f0      	b.n	80082f4 <__s2b+0x18>
 8008312:	9b08      	ldr	r3, [sp, #32]
 8008314:	6143      	str	r3, [r0, #20]
 8008316:	2d09      	cmp	r5, #9
 8008318:	f04f 0301 	mov.w	r3, #1
 800831c:	6103      	str	r3, [r0, #16]
 800831e:	dd16      	ble.n	800834e <__s2b+0x72>
 8008320:	f104 0909 	add.w	r9, r4, #9
 8008324:	46c8      	mov	r8, r9
 8008326:	442c      	add	r4, r5
 8008328:	f818 3b01 	ldrb.w	r3, [r8], #1
 800832c:	4601      	mov	r1, r0
 800832e:	3b30      	subs	r3, #48	@ 0x30
 8008330:	220a      	movs	r2, #10
 8008332:	4630      	mov	r0, r6
 8008334:	f7ff ff8c 	bl	8008250 <__multadd>
 8008338:	45a0      	cmp	r8, r4
 800833a:	d1f5      	bne.n	8008328 <__s2b+0x4c>
 800833c:	f1a5 0408 	sub.w	r4, r5, #8
 8008340:	444c      	add	r4, r9
 8008342:	1b2d      	subs	r5, r5, r4
 8008344:	1963      	adds	r3, r4, r5
 8008346:	42bb      	cmp	r3, r7
 8008348:	db04      	blt.n	8008354 <__s2b+0x78>
 800834a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800834e:	340a      	adds	r4, #10
 8008350:	2509      	movs	r5, #9
 8008352:	e7f6      	b.n	8008342 <__s2b+0x66>
 8008354:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008358:	4601      	mov	r1, r0
 800835a:	3b30      	subs	r3, #48	@ 0x30
 800835c:	220a      	movs	r2, #10
 800835e:	4630      	mov	r0, r6
 8008360:	f7ff ff76 	bl	8008250 <__multadd>
 8008364:	e7ee      	b.n	8008344 <__s2b+0x68>
 8008366:	bf00      	nop
 8008368:	0800afe9 	.word	0x0800afe9
 800836c:	0800affa 	.word	0x0800affa

08008370 <__hi0bits>:
 8008370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008374:	4603      	mov	r3, r0
 8008376:	bf36      	itet	cc
 8008378:	0403      	lslcc	r3, r0, #16
 800837a:	2000      	movcs	r0, #0
 800837c:	2010      	movcc	r0, #16
 800837e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008382:	bf3c      	itt	cc
 8008384:	021b      	lslcc	r3, r3, #8
 8008386:	3008      	addcc	r0, #8
 8008388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800838c:	bf3c      	itt	cc
 800838e:	011b      	lslcc	r3, r3, #4
 8008390:	3004      	addcc	r0, #4
 8008392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008396:	bf3c      	itt	cc
 8008398:	009b      	lslcc	r3, r3, #2
 800839a:	3002      	addcc	r0, #2
 800839c:	2b00      	cmp	r3, #0
 800839e:	db05      	blt.n	80083ac <__hi0bits+0x3c>
 80083a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80083a4:	f100 0001 	add.w	r0, r0, #1
 80083a8:	bf08      	it	eq
 80083aa:	2020      	moveq	r0, #32
 80083ac:	4770      	bx	lr

080083ae <__lo0bits>:
 80083ae:	6803      	ldr	r3, [r0, #0]
 80083b0:	4602      	mov	r2, r0
 80083b2:	f013 0007 	ands.w	r0, r3, #7
 80083b6:	d00b      	beq.n	80083d0 <__lo0bits+0x22>
 80083b8:	07d9      	lsls	r1, r3, #31
 80083ba:	d421      	bmi.n	8008400 <__lo0bits+0x52>
 80083bc:	0798      	lsls	r0, r3, #30
 80083be:	bf49      	itett	mi
 80083c0:	085b      	lsrmi	r3, r3, #1
 80083c2:	089b      	lsrpl	r3, r3, #2
 80083c4:	2001      	movmi	r0, #1
 80083c6:	6013      	strmi	r3, [r2, #0]
 80083c8:	bf5c      	itt	pl
 80083ca:	6013      	strpl	r3, [r2, #0]
 80083cc:	2002      	movpl	r0, #2
 80083ce:	4770      	bx	lr
 80083d0:	b299      	uxth	r1, r3
 80083d2:	b909      	cbnz	r1, 80083d8 <__lo0bits+0x2a>
 80083d4:	0c1b      	lsrs	r3, r3, #16
 80083d6:	2010      	movs	r0, #16
 80083d8:	b2d9      	uxtb	r1, r3
 80083da:	b909      	cbnz	r1, 80083e0 <__lo0bits+0x32>
 80083dc:	3008      	adds	r0, #8
 80083de:	0a1b      	lsrs	r3, r3, #8
 80083e0:	0719      	lsls	r1, r3, #28
 80083e2:	bf04      	itt	eq
 80083e4:	091b      	lsreq	r3, r3, #4
 80083e6:	3004      	addeq	r0, #4
 80083e8:	0799      	lsls	r1, r3, #30
 80083ea:	bf04      	itt	eq
 80083ec:	089b      	lsreq	r3, r3, #2
 80083ee:	3002      	addeq	r0, #2
 80083f0:	07d9      	lsls	r1, r3, #31
 80083f2:	d403      	bmi.n	80083fc <__lo0bits+0x4e>
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	f100 0001 	add.w	r0, r0, #1
 80083fa:	d003      	beq.n	8008404 <__lo0bits+0x56>
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	4770      	bx	lr
 8008400:	2000      	movs	r0, #0
 8008402:	4770      	bx	lr
 8008404:	2020      	movs	r0, #32
 8008406:	4770      	bx	lr

08008408 <__i2b>:
 8008408:	b510      	push	{r4, lr}
 800840a:	460c      	mov	r4, r1
 800840c:	2101      	movs	r1, #1
 800840e:	f7ff febd 	bl	800818c <_Balloc>
 8008412:	4602      	mov	r2, r0
 8008414:	b928      	cbnz	r0, 8008422 <__i2b+0x1a>
 8008416:	4b05      	ldr	r3, [pc, #20]	@ (800842c <__i2b+0x24>)
 8008418:	4805      	ldr	r0, [pc, #20]	@ (8008430 <__i2b+0x28>)
 800841a:	f240 1145 	movw	r1, #325	@ 0x145
 800841e:	f001 fbdf 	bl	8009be0 <__assert_func>
 8008422:	2301      	movs	r3, #1
 8008424:	6144      	str	r4, [r0, #20]
 8008426:	6103      	str	r3, [r0, #16]
 8008428:	bd10      	pop	{r4, pc}
 800842a:	bf00      	nop
 800842c:	0800afe9 	.word	0x0800afe9
 8008430:	0800affa 	.word	0x0800affa

08008434 <__multiply>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	4614      	mov	r4, r2
 800843a:	690a      	ldr	r2, [r1, #16]
 800843c:	6923      	ldr	r3, [r4, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	bfa8      	it	ge
 8008442:	4623      	movge	r3, r4
 8008444:	460f      	mov	r7, r1
 8008446:	bfa4      	itt	ge
 8008448:	460c      	movge	r4, r1
 800844a:	461f      	movge	r7, r3
 800844c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008450:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008454:	68a3      	ldr	r3, [r4, #8]
 8008456:	6861      	ldr	r1, [r4, #4]
 8008458:	eb0a 0609 	add.w	r6, sl, r9
 800845c:	42b3      	cmp	r3, r6
 800845e:	b085      	sub	sp, #20
 8008460:	bfb8      	it	lt
 8008462:	3101      	addlt	r1, #1
 8008464:	f7ff fe92 	bl	800818c <_Balloc>
 8008468:	b930      	cbnz	r0, 8008478 <__multiply+0x44>
 800846a:	4602      	mov	r2, r0
 800846c:	4b44      	ldr	r3, [pc, #272]	@ (8008580 <__multiply+0x14c>)
 800846e:	4845      	ldr	r0, [pc, #276]	@ (8008584 <__multiply+0x150>)
 8008470:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008474:	f001 fbb4 	bl	8009be0 <__assert_func>
 8008478:	f100 0514 	add.w	r5, r0, #20
 800847c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008480:	462b      	mov	r3, r5
 8008482:	2200      	movs	r2, #0
 8008484:	4543      	cmp	r3, r8
 8008486:	d321      	bcc.n	80084cc <__multiply+0x98>
 8008488:	f107 0114 	add.w	r1, r7, #20
 800848c:	f104 0214 	add.w	r2, r4, #20
 8008490:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008494:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008498:	9302      	str	r3, [sp, #8]
 800849a:	1b13      	subs	r3, r2, r4
 800849c:	3b15      	subs	r3, #21
 800849e:	f023 0303 	bic.w	r3, r3, #3
 80084a2:	3304      	adds	r3, #4
 80084a4:	f104 0715 	add.w	r7, r4, #21
 80084a8:	42ba      	cmp	r2, r7
 80084aa:	bf38      	it	cc
 80084ac:	2304      	movcc	r3, #4
 80084ae:	9301      	str	r3, [sp, #4]
 80084b0:	9b02      	ldr	r3, [sp, #8]
 80084b2:	9103      	str	r1, [sp, #12]
 80084b4:	428b      	cmp	r3, r1
 80084b6:	d80c      	bhi.n	80084d2 <__multiply+0x9e>
 80084b8:	2e00      	cmp	r6, #0
 80084ba:	dd03      	ble.n	80084c4 <__multiply+0x90>
 80084bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d05b      	beq.n	800857c <__multiply+0x148>
 80084c4:	6106      	str	r6, [r0, #16]
 80084c6:	b005      	add	sp, #20
 80084c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084cc:	f843 2b04 	str.w	r2, [r3], #4
 80084d0:	e7d8      	b.n	8008484 <__multiply+0x50>
 80084d2:	f8b1 a000 	ldrh.w	sl, [r1]
 80084d6:	f1ba 0f00 	cmp.w	sl, #0
 80084da:	d024      	beq.n	8008526 <__multiply+0xf2>
 80084dc:	f104 0e14 	add.w	lr, r4, #20
 80084e0:	46a9      	mov	r9, r5
 80084e2:	f04f 0c00 	mov.w	ip, #0
 80084e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80084ea:	f8d9 3000 	ldr.w	r3, [r9]
 80084ee:	fa1f fb87 	uxth.w	fp, r7
 80084f2:	b29b      	uxth	r3, r3
 80084f4:	fb0a 330b 	mla	r3, sl, fp, r3
 80084f8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80084fc:	f8d9 7000 	ldr.w	r7, [r9]
 8008500:	4463      	add	r3, ip
 8008502:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008506:	fb0a c70b 	mla	r7, sl, fp, ip
 800850a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800850e:	b29b      	uxth	r3, r3
 8008510:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008514:	4572      	cmp	r2, lr
 8008516:	f849 3b04 	str.w	r3, [r9], #4
 800851a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800851e:	d8e2      	bhi.n	80084e6 <__multiply+0xb2>
 8008520:	9b01      	ldr	r3, [sp, #4]
 8008522:	f845 c003 	str.w	ip, [r5, r3]
 8008526:	9b03      	ldr	r3, [sp, #12]
 8008528:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800852c:	3104      	adds	r1, #4
 800852e:	f1b9 0f00 	cmp.w	r9, #0
 8008532:	d021      	beq.n	8008578 <__multiply+0x144>
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	f104 0c14 	add.w	ip, r4, #20
 800853a:	46ae      	mov	lr, r5
 800853c:	f04f 0a00 	mov.w	sl, #0
 8008540:	f8bc b000 	ldrh.w	fp, [ip]
 8008544:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008548:	fb09 770b 	mla	r7, r9, fp, r7
 800854c:	4457      	add	r7, sl
 800854e:	b29b      	uxth	r3, r3
 8008550:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008554:	f84e 3b04 	str.w	r3, [lr], #4
 8008558:	f85c 3b04 	ldr.w	r3, [ip], #4
 800855c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008560:	f8be 3000 	ldrh.w	r3, [lr]
 8008564:	fb09 330a 	mla	r3, r9, sl, r3
 8008568:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800856c:	4562      	cmp	r2, ip
 800856e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008572:	d8e5      	bhi.n	8008540 <__multiply+0x10c>
 8008574:	9f01      	ldr	r7, [sp, #4]
 8008576:	51eb      	str	r3, [r5, r7]
 8008578:	3504      	adds	r5, #4
 800857a:	e799      	b.n	80084b0 <__multiply+0x7c>
 800857c:	3e01      	subs	r6, #1
 800857e:	e79b      	b.n	80084b8 <__multiply+0x84>
 8008580:	0800afe9 	.word	0x0800afe9
 8008584:	0800affa 	.word	0x0800affa

08008588 <__pow5mult>:
 8008588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800858c:	4615      	mov	r5, r2
 800858e:	f012 0203 	ands.w	r2, r2, #3
 8008592:	4607      	mov	r7, r0
 8008594:	460e      	mov	r6, r1
 8008596:	d007      	beq.n	80085a8 <__pow5mult+0x20>
 8008598:	4c25      	ldr	r4, [pc, #148]	@ (8008630 <__pow5mult+0xa8>)
 800859a:	3a01      	subs	r2, #1
 800859c:	2300      	movs	r3, #0
 800859e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085a2:	f7ff fe55 	bl	8008250 <__multadd>
 80085a6:	4606      	mov	r6, r0
 80085a8:	10ad      	asrs	r5, r5, #2
 80085aa:	d03d      	beq.n	8008628 <__pow5mult+0xa0>
 80085ac:	69fc      	ldr	r4, [r7, #28]
 80085ae:	b97c      	cbnz	r4, 80085d0 <__pow5mult+0x48>
 80085b0:	2010      	movs	r0, #16
 80085b2:	f7ff fd35 	bl	8008020 <malloc>
 80085b6:	4602      	mov	r2, r0
 80085b8:	61f8      	str	r0, [r7, #28]
 80085ba:	b928      	cbnz	r0, 80085c8 <__pow5mult+0x40>
 80085bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008634 <__pow5mult+0xac>)
 80085be:	481e      	ldr	r0, [pc, #120]	@ (8008638 <__pow5mult+0xb0>)
 80085c0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80085c4:	f001 fb0c 	bl	8009be0 <__assert_func>
 80085c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085cc:	6004      	str	r4, [r0, #0]
 80085ce:	60c4      	str	r4, [r0, #12]
 80085d0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80085d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085d8:	b94c      	cbnz	r4, 80085ee <__pow5mult+0x66>
 80085da:	f240 2171 	movw	r1, #625	@ 0x271
 80085de:	4638      	mov	r0, r7
 80085e0:	f7ff ff12 	bl	8008408 <__i2b>
 80085e4:	2300      	movs	r3, #0
 80085e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80085ea:	4604      	mov	r4, r0
 80085ec:	6003      	str	r3, [r0, #0]
 80085ee:	f04f 0900 	mov.w	r9, #0
 80085f2:	07eb      	lsls	r3, r5, #31
 80085f4:	d50a      	bpl.n	800860c <__pow5mult+0x84>
 80085f6:	4631      	mov	r1, r6
 80085f8:	4622      	mov	r2, r4
 80085fa:	4638      	mov	r0, r7
 80085fc:	f7ff ff1a 	bl	8008434 <__multiply>
 8008600:	4631      	mov	r1, r6
 8008602:	4680      	mov	r8, r0
 8008604:	4638      	mov	r0, r7
 8008606:	f7ff fe01 	bl	800820c <_Bfree>
 800860a:	4646      	mov	r6, r8
 800860c:	106d      	asrs	r5, r5, #1
 800860e:	d00b      	beq.n	8008628 <__pow5mult+0xa0>
 8008610:	6820      	ldr	r0, [r4, #0]
 8008612:	b938      	cbnz	r0, 8008624 <__pow5mult+0x9c>
 8008614:	4622      	mov	r2, r4
 8008616:	4621      	mov	r1, r4
 8008618:	4638      	mov	r0, r7
 800861a:	f7ff ff0b 	bl	8008434 <__multiply>
 800861e:	6020      	str	r0, [r4, #0]
 8008620:	f8c0 9000 	str.w	r9, [r0]
 8008624:	4604      	mov	r4, r0
 8008626:	e7e4      	b.n	80085f2 <__pow5mult+0x6a>
 8008628:	4630      	mov	r0, r6
 800862a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800862e:	bf00      	nop
 8008630:	0800b054 	.word	0x0800b054
 8008634:	0800af7a 	.word	0x0800af7a
 8008638:	0800affa 	.word	0x0800affa

0800863c <__lshift>:
 800863c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008640:	460c      	mov	r4, r1
 8008642:	6849      	ldr	r1, [r1, #4]
 8008644:	6923      	ldr	r3, [r4, #16]
 8008646:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800864a:	68a3      	ldr	r3, [r4, #8]
 800864c:	4607      	mov	r7, r0
 800864e:	4691      	mov	r9, r2
 8008650:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008654:	f108 0601 	add.w	r6, r8, #1
 8008658:	42b3      	cmp	r3, r6
 800865a:	db0b      	blt.n	8008674 <__lshift+0x38>
 800865c:	4638      	mov	r0, r7
 800865e:	f7ff fd95 	bl	800818c <_Balloc>
 8008662:	4605      	mov	r5, r0
 8008664:	b948      	cbnz	r0, 800867a <__lshift+0x3e>
 8008666:	4602      	mov	r2, r0
 8008668:	4b28      	ldr	r3, [pc, #160]	@ (800870c <__lshift+0xd0>)
 800866a:	4829      	ldr	r0, [pc, #164]	@ (8008710 <__lshift+0xd4>)
 800866c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008670:	f001 fab6 	bl	8009be0 <__assert_func>
 8008674:	3101      	adds	r1, #1
 8008676:	005b      	lsls	r3, r3, #1
 8008678:	e7ee      	b.n	8008658 <__lshift+0x1c>
 800867a:	2300      	movs	r3, #0
 800867c:	f100 0114 	add.w	r1, r0, #20
 8008680:	f100 0210 	add.w	r2, r0, #16
 8008684:	4618      	mov	r0, r3
 8008686:	4553      	cmp	r3, sl
 8008688:	db33      	blt.n	80086f2 <__lshift+0xb6>
 800868a:	6920      	ldr	r0, [r4, #16]
 800868c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008690:	f104 0314 	add.w	r3, r4, #20
 8008694:	f019 091f 	ands.w	r9, r9, #31
 8008698:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800869c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086a0:	d02b      	beq.n	80086fa <__lshift+0xbe>
 80086a2:	f1c9 0e20 	rsb	lr, r9, #32
 80086a6:	468a      	mov	sl, r1
 80086a8:	2200      	movs	r2, #0
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	fa00 f009 	lsl.w	r0, r0, r9
 80086b0:	4310      	orrs	r0, r2
 80086b2:	f84a 0b04 	str.w	r0, [sl], #4
 80086b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80086ba:	459c      	cmp	ip, r3
 80086bc:	fa22 f20e 	lsr.w	r2, r2, lr
 80086c0:	d8f3      	bhi.n	80086aa <__lshift+0x6e>
 80086c2:	ebac 0304 	sub.w	r3, ip, r4
 80086c6:	3b15      	subs	r3, #21
 80086c8:	f023 0303 	bic.w	r3, r3, #3
 80086cc:	3304      	adds	r3, #4
 80086ce:	f104 0015 	add.w	r0, r4, #21
 80086d2:	4584      	cmp	ip, r0
 80086d4:	bf38      	it	cc
 80086d6:	2304      	movcc	r3, #4
 80086d8:	50ca      	str	r2, [r1, r3]
 80086da:	b10a      	cbz	r2, 80086e0 <__lshift+0xa4>
 80086dc:	f108 0602 	add.w	r6, r8, #2
 80086e0:	3e01      	subs	r6, #1
 80086e2:	4638      	mov	r0, r7
 80086e4:	612e      	str	r6, [r5, #16]
 80086e6:	4621      	mov	r1, r4
 80086e8:	f7ff fd90 	bl	800820c <_Bfree>
 80086ec:	4628      	mov	r0, r5
 80086ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80086f6:	3301      	adds	r3, #1
 80086f8:	e7c5      	b.n	8008686 <__lshift+0x4a>
 80086fa:	3904      	subs	r1, #4
 80086fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008700:	f841 2f04 	str.w	r2, [r1, #4]!
 8008704:	459c      	cmp	ip, r3
 8008706:	d8f9      	bhi.n	80086fc <__lshift+0xc0>
 8008708:	e7ea      	b.n	80086e0 <__lshift+0xa4>
 800870a:	bf00      	nop
 800870c:	0800afe9 	.word	0x0800afe9
 8008710:	0800affa 	.word	0x0800affa

08008714 <__mcmp>:
 8008714:	690a      	ldr	r2, [r1, #16]
 8008716:	4603      	mov	r3, r0
 8008718:	6900      	ldr	r0, [r0, #16]
 800871a:	1a80      	subs	r0, r0, r2
 800871c:	b530      	push	{r4, r5, lr}
 800871e:	d10e      	bne.n	800873e <__mcmp+0x2a>
 8008720:	3314      	adds	r3, #20
 8008722:	3114      	adds	r1, #20
 8008724:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008728:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800872c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008730:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008734:	4295      	cmp	r5, r2
 8008736:	d003      	beq.n	8008740 <__mcmp+0x2c>
 8008738:	d205      	bcs.n	8008746 <__mcmp+0x32>
 800873a:	f04f 30ff 	mov.w	r0, #4294967295
 800873e:	bd30      	pop	{r4, r5, pc}
 8008740:	42a3      	cmp	r3, r4
 8008742:	d3f3      	bcc.n	800872c <__mcmp+0x18>
 8008744:	e7fb      	b.n	800873e <__mcmp+0x2a>
 8008746:	2001      	movs	r0, #1
 8008748:	e7f9      	b.n	800873e <__mcmp+0x2a>
	...

0800874c <__mdiff>:
 800874c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008750:	4689      	mov	r9, r1
 8008752:	4606      	mov	r6, r0
 8008754:	4611      	mov	r1, r2
 8008756:	4648      	mov	r0, r9
 8008758:	4614      	mov	r4, r2
 800875a:	f7ff ffdb 	bl	8008714 <__mcmp>
 800875e:	1e05      	subs	r5, r0, #0
 8008760:	d112      	bne.n	8008788 <__mdiff+0x3c>
 8008762:	4629      	mov	r1, r5
 8008764:	4630      	mov	r0, r6
 8008766:	f7ff fd11 	bl	800818c <_Balloc>
 800876a:	4602      	mov	r2, r0
 800876c:	b928      	cbnz	r0, 800877a <__mdiff+0x2e>
 800876e:	4b3f      	ldr	r3, [pc, #252]	@ (800886c <__mdiff+0x120>)
 8008770:	f240 2137 	movw	r1, #567	@ 0x237
 8008774:	483e      	ldr	r0, [pc, #248]	@ (8008870 <__mdiff+0x124>)
 8008776:	f001 fa33 	bl	8009be0 <__assert_func>
 800877a:	2301      	movs	r3, #1
 800877c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008780:	4610      	mov	r0, r2
 8008782:	b003      	add	sp, #12
 8008784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008788:	bfbc      	itt	lt
 800878a:	464b      	movlt	r3, r9
 800878c:	46a1      	movlt	r9, r4
 800878e:	4630      	mov	r0, r6
 8008790:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008794:	bfba      	itte	lt
 8008796:	461c      	movlt	r4, r3
 8008798:	2501      	movlt	r5, #1
 800879a:	2500      	movge	r5, #0
 800879c:	f7ff fcf6 	bl	800818c <_Balloc>
 80087a0:	4602      	mov	r2, r0
 80087a2:	b918      	cbnz	r0, 80087ac <__mdiff+0x60>
 80087a4:	4b31      	ldr	r3, [pc, #196]	@ (800886c <__mdiff+0x120>)
 80087a6:	f240 2145 	movw	r1, #581	@ 0x245
 80087aa:	e7e3      	b.n	8008774 <__mdiff+0x28>
 80087ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80087b0:	6926      	ldr	r6, [r4, #16]
 80087b2:	60c5      	str	r5, [r0, #12]
 80087b4:	f109 0310 	add.w	r3, r9, #16
 80087b8:	f109 0514 	add.w	r5, r9, #20
 80087bc:	f104 0e14 	add.w	lr, r4, #20
 80087c0:	f100 0b14 	add.w	fp, r0, #20
 80087c4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80087c8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80087cc:	9301      	str	r3, [sp, #4]
 80087ce:	46d9      	mov	r9, fp
 80087d0:	f04f 0c00 	mov.w	ip, #0
 80087d4:	9b01      	ldr	r3, [sp, #4]
 80087d6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80087da:	f853 af04 	ldr.w	sl, [r3, #4]!
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	fa1f f38a 	uxth.w	r3, sl
 80087e4:	4619      	mov	r1, r3
 80087e6:	b283      	uxth	r3, r0
 80087e8:	1acb      	subs	r3, r1, r3
 80087ea:	0c00      	lsrs	r0, r0, #16
 80087ec:	4463      	add	r3, ip
 80087ee:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80087f2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80087fc:	4576      	cmp	r6, lr
 80087fe:	f849 3b04 	str.w	r3, [r9], #4
 8008802:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008806:	d8e5      	bhi.n	80087d4 <__mdiff+0x88>
 8008808:	1b33      	subs	r3, r6, r4
 800880a:	3b15      	subs	r3, #21
 800880c:	f023 0303 	bic.w	r3, r3, #3
 8008810:	3415      	adds	r4, #21
 8008812:	3304      	adds	r3, #4
 8008814:	42a6      	cmp	r6, r4
 8008816:	bf38      	it	cc
 8008818:	2304      	movcc	r3, #4
 800881a:	441d      	add	r5, r3
 800881c:	445b      	add	r3, fp
 800881e:	461e      	mov	r6, r3
 8008820:	462c      	mov	r4, r5
 8008822:	4544      	cmp	r4, r8
 8008824:	d30e      	bcc.n	8008844 <__mdiff+0xf8>
 8008826:	f108 0103 	add.w	r1, r8, #3
 800882a:	1b49      	subs	r1, r1, r5
 800882c:	f021 0103 	bic.w	r1, r1, #3
 8008830:	3d03      	subs	r5, #3
 8008832:	45a8      	cmp	r8, r5
 8008834:	bf38      	it	cc
 8008836:	2100      	movcc	r1, #0
 8008838:	440b      	add	r3, r1
 800883a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800883e:	b191      	cbz	r1, 8008866 <__mdiff+0x11a>
 8008840:	6117      	str	r7, [r2, #16]
 8008842:	e79d      	b.n	8008780 <__mdiff+0x34>
 8008844:	f854 1b04 	ldr.w	r1, [r4], #4
 8008848:	46e6      	mov	lr, ip
 800884a:	0c08      	lsrs	r0, r1, #16
 800884c:	fa1c fc81 	uxtah	ip, ip, r1
 8008850:	4471      	add	r1, lr
 8008852:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008856:	b289      	uxth	r1, r1
 8008858:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800885c:	f846 1b04 	str.w	r1, [r6], #4
 8008860:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008864:	e7dd      	b.n	8008822 <__mdiff+0xd6>
 8008866:	3f01      	subs	r7, #1
 8008868:	e7e7      	b.n	800883a <__mdiff+0xee>
 800886a:	bf00      	nop
 800886c:	0800afe9 	.word	0x0800afe9
 8008870:	0800affa 	.word	0x0800affa

08008874 <__ulp>:
 8008874:	b082      	sub	sp, #8
 8008876:	ed8d 0b00 	vstr	d0, [sp]
 800887a:	9a01      	ldr	r2, [sp, #4]
 800887c:	4b0f      	ldr	r3, [pc, #60]	@ (80088bc <__ulp+0x48>)
 800887e:	4013      	ands	r3, r2
 8008880:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008884:	2b00      	cmp	r3, #0
 8008886:	dc08      	bgt.n	800889a <__ulp+0x26>
 8008888:	425b      	negs	r3, r3
 800888a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800888e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008892:	da04      	bge.n	800889e <__ulp+0x2a>
 8008894:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008898:	4113      	asrs	r3, r2
 800889a:	2200      	movs	r2, #0
 800889c:	e008      	b.n	80088b0 <__ulp+0x3c>
 800889e:	f1a2 0314 	sub.w	r3, r2, #20
 80088a2:	2b1e      	cmp	r3, #30
 80088a4:	bfda      	itte	le
 80088a6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80088aa:	40da      	lsrle	r2, r3
 80088ac:	2201      	movgt	r2, #1
 80088ae:	2300      	movs	r3, #0
 80088b0:	4619      	mov	r1, r3
 80088b2:	4610      	mov	r0, r2
 80088b4:	ec41 0b10 	vmov	d0, r0, r1
 80088b8:	b002      	add	sp, #8
 80088ba:	4770      	bx	lr
 80088bc:	7ff00000 	.word	0x7ff00000

080088c0 <__b2d>:
 80088c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c4:	6906      	ldr	r6, [r0, #16]
 80088c6:	f100 0814 	add.w	r8, r0, #20
 80088ca:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80088ce:	1f37      	subs	r7, r6, #4
 80088d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80088d4:	4610      	mov	r0, r2
 80088d6:	f7ff fd4b 	bl	8008370 <__hi0bits>
 80088da:	f1c0 0320 	rsb	r3, r0, #32
 80088de:	280a      	cmp	r0, #10
 80088e0:	600b      	str	r3, [r1, #0]
 80088e2:	491b      	ldr	r1, [pc, #108]	@ (8008950 <__b2d+0x90>)
 80088e4:	dc15      	bgt.n	8008912 <__b2d+0x52>
 80088e6:	f1c0 0c0b 	rsb	ip, r0, #11
 80088ea:	fa22 f30c 	lsr.w	r3, r2, ip
 80088ee:	45b8      	cmp	r8, r7
 80088f0:	ea43 0501 	orr.w	r5, r3, r1
 80088f4:	bf34      	ite	cc
 80088f6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80088fa:	2300      	movcs	r3, #0
 80088fc:	3015      	adds	r0, #21
 80088fe:	fa02 f000 	lsl.w	r0, r2, r0
 8008902:	fa23 f30c 	lsr.w	r3, r3, ip
 8008906:	4303      	orrs	r3, r0
 8008908:	461c      	mov	r4, r3
 800890a:	ec45 4b10 	vmov	d0, r4, r5
 800890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008912:	45b8      	cmp	r8, r7
 8008914:	bf3a      	itte	cc
 8008916:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800891a:	f1a6 0708 	subcc.w	r7, r6, #8
 800891e:	2300      	movcs	r3, #0
 8008920:	380b      	subs	r0, #11
 8008922:	d012      	beq.n	800894a <__b2d+0x8a>
 8008924:	f1c0 0120 	rsb	r1, r0, #32
 8008928:	fa23 f401 	lsr.w	r4, r3, r1
 800892c:	4082      	lsls	r2, r0
 800892e:	4322      	orrs	r2, r4
 8008930:	4547      	cmp	r7, r8
 8008932:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008936:	bf8c      	ite	hi
 8008938:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800893c:	2200      	movls	r2, #0
 800893e:	4083      	lsls	r3, r0
 8008940:	40ca      	lsrs	r2, r1
 8008942:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008946:	4313      	orrs	r3, r2
 8008948:	e7de      	b.n	8008908 <__b2d+0x48>
 800894a:	ea42 0501 	orr.w	r5, r2, r1
 800894e:	e7db      	b.n	8008908 <__b2d+0x48>
 8008950:	3ff00000 	.word	0x3ff00000

08008954 <__d2b>:
 8008954:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008958:	460f      	mov	r7, r1
 800895a:	2101      	movs	r1, #1
 800895c:	ec59 8b10 	vmov	r8, r9, d0
 8008960:	4616      	mov	r6, r2
 8008962:	f7ff fc13 	bl	800818c <_Balloc>
 8008966:	4604      	mov	r4, r0
 8008968:	b930      	cbnz	r0, 8008978 <__d2b+0x24>
 800896a:	4602      	mov	r2, r0
 800896c:	4b23      	ldr	r3, [pc, #140]	@ (80089fc <__d2b+0xa8>)
 800896e:	4824      	ldr	r0, [pc, #144]	@ (8008a00 <__d2b+0xac>)
 8008970:	f240 310f 	movw	r1, #783	@ 0x30f
 8008974:	f001 f934 	bl	8009be0 <__assert_func>
 8008978:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800897c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008980:	b10d      	cbz	r5, 8008986 <__d2b+0x32>
 8008982:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	f1b8 0300 	subs.w	r3, r8, #0
 800898c:	d023      	beq.n	80089d6 <__d2b+0x82>
 800898e:	4668      	mov	r0, sp
 8008990:	9300      	str	r3, [sp, #0]
 8008992:	f7ff fd0c 	bl	80083ae <__lo0bits>
 8008996:	e9dd 1200 	ldrd	r1, r2, [sp]
 800899a:	b1d0      	cbz	r0, 80089d2 <__d2b+0x7e>
 800899c:	f1c0 0320 	rsb	r3, r0, #32
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	430b      	orrs	r3, r1
 80089a6:	40c2      	lsrs	r2, r0
 80089a8:	6163      	str	r3, [r4, #20]
 80089aa:	9201      	str	r2, [sp, #4]
 80089ac:	9b01      	ldr	r3, [sp, #4]
 80089ae:	61a3      	str	r3, [r4, #24]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	bf0c      	ite	eq
 80089b4:	2201      	moveq	r2, #1
 80089b6:	2202      	movne	r2, #2
 80089b8:	6122      	str	r2, [r4, #16]
 80089ba:	b1a5      	cbz	r5, 80089e6 <__d2b+0x92>
 80089bc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80089c0:	4405      	add	r5, r0
 80089c2:	603d      	str	r5, [r7, #0]
 80089c4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80089c8:	6030      	str	r0, [r6, #0]
 80089ca:	4620      	mov	r0, r4
 80089cc:	b003      	add	sp, #12
 80089ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80089d2:	6161      	str	r1, [r4, #20]
 80089d4:	e7ea      	b.n	80089ac <__d2b+0x58>
 80089d6:	a801      	add	r0, sp, #4
 80089d8:	f7ff fce9 	bl	80083ae <__lo0bits>
 80089dc:	9b01      	ldr	r3, [sp, #4]
 80089de:	6163      	str	r3, [r4, #20]
 80089e0:	3020      	adds	r0, #32
 80089e2:	2201      	movs	r2, #1
 80089e4:	e7e8      	b.n	80089b8 <__d2b+0x64>
 80089e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80089ea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80089ee:	6038      	str	r0, [r7, #0]
 80089f0:	6918      	ldr	r0, [r3, #16]
 80089f2:	f7ff fcbd 	bl	8008370 <__hi0bits>
 80089f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80089fa:	e7e5      	b.n	80089c8 <__d2b+0x74>
 80089fc:	0800afe9 	.word	0x0800afe9
 8008a00:	0800affa 	.word	0x0800affa

08008a04 <__ratio>:
 8008a04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a08:	4688      	mov	r8, r1
 8008a0a:	4669      	mov	r1, sp
 8008a0c:	4681      	mov	r9, r0
 8008a0e:	f7ff ff57 	bl	80088c0 <__b2d>
 8008a12:	a901      	add	r1, sp, #4
 8008a14:	4640      	mov	r0, r8
 8008a16:	ec55 4b10 	vmov	r4, r5, d0
 8008a1a:	f7ff ff51 	bl	80088c0 <__b2d>
 8008a1e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008a22:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008a26:	1ad2      	subs	r2, r2, r3
 8008a28:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008a2c:	1a5b      	subs	r3, r3, r1
 8008a2e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008a32:	ec57 6b10 	vmov	r6, r7, d0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	bfd6      	itet	le
 8008a3a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008a3e:	462a      	movgt	r2, r5
 8008a40:	463a      	movle	r2, r7
 8008a42:	46ab      	mov	fp, r5
 8008a44:	46a2      	mov	sl, r4
 8008a46:	bfce      	itee	gt
 8008a48:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008a4c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008a50:	ee00 3a90 	vmovle	s1, r3
 8008a54:	ec4b ab17 	vmov	d7, sl, fp
 8008a58:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008a5c:	b003      	add	sp, #12
 8008a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008a62 <__copybits>:
 8008a62:	3901      	subs	r1, #1
 8008a64:	b570      	push	{r4, r5, r6, lr}
 8008a66:	1149      	asrs	r1, r1, #5
 8008a68:	6914      	ldr	r4, [r2, #16]
 8008a6a:	3101      	adds	r1, #1
 8008a6c:	f102 0314 	add.w	r3, r2, #20
 8008a70:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008a74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008a78:	1f05      	subs	r5, r0, #4
 8008a7a:	42a3      	cmp	r3, r4
 8008a7c:	d30c      	bcc.n	8008a98 <__copybits+0x36>
 8008a7e:	1aa3      	subs	r3, r4, r2
 8008a80:	3b11      	subs	r3, #17
 8008a82:	f023 0303 	bic.w	r3, r3, #3
 8008a86:	3211      	adds	r2, #17
 8008a88:	42a2      	cmp	r2, r4
 8008a8a:	bf88      	it	hi
 8008a8c:	2300      	movhi	r3, #0
 8008a8e:	4418      	add	r0, r3
 8008a90:	2300      	movs	r3, #0
 8008a92:	4288      	cmp	r0, r1
 8008a94:	d305      	bcc.n	8008aa2 <__copybits+0x40>
 8008a96:	bd70      	pop	{r4, r5, r6, pc}
 8008a98:	f853 6b04 	ldr.w	r6, [r3], #4
 8008a9c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008aa0:	e7eb      	b.n	8008a7a <__copybits+0x18>
 8008aa2:	f840 3b04 	str.w	r3, [r0], #4
 8008aa6:	e7f4      	b.n	8008a92 <__copybits+0x30>

08008aa8 <__any_on>:
 8008aa8:	f100 0214 	add.w	r2, r0, #20
 8008aac:	6900      	ldr	r0, [r0, #16]
 8008aae:	114b      	asrs	r3, r1, #5
 8008ab0:	4298      	cmp	r0, r3
 8008ab2:	b510      	push	{r4, lr}
 8008ab4:	db11      	blt.n	8008ada <__any_on+0x32>
 8008ab6:	dd0a      	ble.n	8008ace <__any_on+0x26>
 8008ab8:	f011 011f 	ands.w	r1, r1, #31
 8008abc:	d007      	beq.n	8008ace <__any_on+0x26>
 8008abe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ac2:	fa24 f001 	lsr.w	r0, r4, r1
 8008ac6:	fa00 f101 	lsl.w	r1, r0, r1
 8008aca:	428c      	cmp	r4, r1
 8008acc:	d10b      	bne.n	8008ae6 <__any_on+0x3e>
 8008ace:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d803      	bhi.n	8008ade <__any_on+0x36>
 8008ad6:	2000      	movs	r0, #0
 8008ad8:	bd10      	pop	{r4, pc}
 8008ada:	4603      	mov	r3, r0
 8008adc:	e7f7      	b.n	8008ace <__any_on+0x26>
 8008ade:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ae2:	2900      	cmp	r1, #0
 8008ae4:	d0f5      	beq.n	8008ad2 <__any_on+0x2a>
 8008ae6:	2001      	movs	r0, #1
 8008ae8:	e7f6      	b.n	8008ad8 <__any_on+0x30>

08008aea <sulp>:
 8008aea:	b570      	push	{r4, r5, r6, lr}
 8008aec:	4604      	mov	r4, r0
 8008aee:	460d      	mov	r5, r1
 8008af0:	4616      	mov	r6, r2
 8008af2:	ec45 4b10 	vmov	d0, r4, r5
 8008af6:	f7ff febd 	bl	8008874 <__ulp>
 8008afa:	b17e      	cbz	r6, 8008b1c <sulp+0x32>
 8008afc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008b00:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	dd09      	ble.n	8008b1c <sulp+0x32>
 8008b08:	051b      	lsls	r3, r3, #20
 8008b0a:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008b0e:	2000      	movs	r0, #0
 8008b10:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008b14:	ec41 0b17 	vmov	d7, r0, r1
 8008b18:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008b1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008b20 <_strtod_l>:
 8008b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b24:	ed2d 8b0a 	vpush	{d8-d12}
 8008b28:	b097      	sub	sp, #92	@ 0x5c
 8008b2a:	4688      	mov	r8, r1
 8008b2c:	920e      	str	r2, [sp, #56]	@ 0x38
 8008b2e:	2200      	movs	r2, #0
 8008b30:	9212      	str	r2, [sp, #72]	@ 0x48
 8008b32:	9005      	str	r0, [sp, #20]
 8008b34:	f04f 0a00 	mov.w	sl, #0
 8008b38:	f04f 0b00 	mov.w	fp, #0
 8008b3c:	460a      	mov	r2, r1
 8008b3e:	9211      	str	r2, [sp, #68]	@ 0x44
 8008b40:	7811      	ldrb	r1, [r2, #0]
 8008b42:	292b      	cmp	r1, #43	@ 0x2b
 8008b44:	d04c      	beq.n	8008be0 <_strtod_l+0xc0>
 8008b46:	d839      	bhi.n	8008bbc <_strtod_l+0x9c>
 8008b48:	290d      	cmp	r1, #13
 8008b4a:	d833      	bhi.n	8008bb4 <_strtod_l+0x94>
 8008b4c:	2908      	cmp	r1, #8
 8008b4e:	d833      	bhi.n	8008bb8 <_strtod_l+0x98>
 8008b50:	2900      	cmp	r1, #0
 8008b52:	d03c      	beq.n	8008bce <_strtod_l+0xae>
 8008b54:	2200      	movs	r2, #0
 8008b56:	9208      	str	r2, [sp, #32]
 8008b58:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008b5a:	782a      	ldrb	r2, [r5, #0]
 8008b5c:	2a30      	cmp	r2, #48	@ 0x30
 8008b5e:	f040 80b5 	bne.w	8008ccc <_strtod_l+0x1ac>
 8008b62:	786a      	ldrb	r2, [r5, #1]
 8008b64:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b68:	2a58      	cmp	r2, #88	@ 0x58
 8008b6a:	d170      	bne.n	8008c4e <_strtod_l+0x12e>
 8008b6c:	9302      	str	r3, [sp, #8]
 8008b6e:	9b08      	ldr	r3, [sp, #32]
 8008b70:	9301      	str	r3, [sp, #4]
 8008b72:	ab12      	add	r3, sp, #72	@ 0x48
 8008b74:	9300      	str	r3, [sp, #0]
 8008b76:	4a8b      	ldr	r2, [pc, #556]	@ (8008da4 <_strtod_l+0x284>)
 8008b78:	9805      	ldr	r0, [sp, #20]
 8008b7a:	ab13      	add	r3, sp, #76	@ 0x4c
 8008b7c:	a911      	add	r1, sp, #68	@ 0x44
 8008b7e:	f001 f8c9 	bl	8009d14 <__gethex>
 8008b82:	f010 060f 	ands.w	r6, r0, #15
 8008b86:	4604      	mov	r4, r0
 8008b88:	d005      	beq.n	8008b96 <_strtod_l+0x76>
 8008b8a:	2e06      	cmp	r6, #6
 8008b8c:	d12a      	bne.n	8008be4 <_strtod_l+0xc4>
 8008b8e:	3501      	adds	r5, #1
 8008b90:	2300      	movs	r3, #0
 8008b92:	9511      	str	r5, [sp, #68]	@ 0x44
 8008b94:	9308      	str	r3, [sp, #32]
 8008b96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 852f 	bne.w	80095fc <_strtod_l+0xadc>
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	ec4b ab10 	vmov	d0, sl, fp
 8008ba4:	b1cb      	cbz	r3, 8008bda <_strtod_l+0xba>
 8008ba6:	eeb1 0b40 	vneg.f64	d0, d0
 8008baa:	b017      	add	sp, #92	@ 0x5c
 8008bac:	ecbd 8b0a 	vpop	{d8-d12}
 8008bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb4:	2920      	cmp	r1, #32
 8008bb6:	d1cd      	bne.n	8008b54 <_strtod_l+0x34>
 8008bb8:	3201      	adds	r2, #1
 8008bba:	e7c0      	b.n	8008b3e <_strtod_l+0x1e>
 8008bbc:	292d      	cmp	r1, #45	@ 0x2d
 8008bbe:	d1c9      	bne.n	8008b54 <_strtod_l+0x34>
 8008bc0:	2101      	movs	r1, #1
 8008bc2:	9108      	str	r1, [sp, #32]
 8008bc4:	1c51      	adds	r1, r2, #1
 8008bc6:	9111      	str	r1, [sp, #68]	@ 0x44
 8008bc8:	7852      	ldrb	r2, [r2, #1]
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	d1c4      	bne.n	8008b58 <_strtod_l+0x38>
 8008bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bd0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f040 850f 	bne.w	80095f8 <_strtod_l+0xad8>
 8008bda:	ec4b ab10 	vmov	d0, sl, fp
 8008bde:	e7e4      	b.n	8008baa <_strtod_l+0x8a>
 8008be0:	2100      	movs	r1, #0
 8008be2:	e7ee      	b.n	8008bc2 <_strtod_l+0xa2>
 8008be4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008be6:	b13a      	cbz	r2, 8008bf8 <_strtod_l+0xd8>
 8008be8:	2135      	movs	r1, #53	@ 0x35
 8008bea:	a814      	add	r0, sp, #80	@ 0x50
 8008bec:	f7ff ff39 	bl	8008a62 <__copybits>
 8008bf0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008bf2:	9805      	ldr	r0, [sp, #20]
 8008bf4:	f7ff fb0a 	bl	800820c <_Bfree>
 8008bf8:	1e73      	subs	r3, r6, #1
 8008bfa:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008bfc:	2b04      	cmp	r3, #4
 8008bfe:	d806      	bhi.n	8008c0e <_strtod_l+0xee>
 8008c00:	e8df f003 	tbb	[pc, r3]
 8008c04:	201d0314 	.word	0x201d0314
 8008c08:	14          	.byte	0x14
 8008c09:	00          	.byte	0x00
 8008c0a:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8008c0e:	05e3      	lsls	r3, r4, #23
 8008c10:	bf48      	it	mi
 8008c12:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008c16:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008c1a:	0d1b      	lsrs	r3, r3, #20
 8008c1c:	051b      	lsls	r3, r3, #20
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d1b9      	bne.n	8008b96 <_strtod_l+0x76>
 8008c22:	f7fe fb91 	bl	8007348 <__errno>
 8008c26:	2322      	movs	r3, #34	@ 0x22
 8008c28:	6003      	str	r3, [r0, #0]
 8008c2a:	e7b4      	b.n	8008b96 <_strtod_l+0x76>
 8008c2c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008c30:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008c34:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008c38:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008c3c:	e7e7      	b.n	8008c0e <_strtod_l+0xee>
 8008c3e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8008dac <_strtod_l+0x28c>
 8008c42:	e7e4      	b.n	8008c0e <_strtod_l+0xee>
 8008c44:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008c48:	f04f 3aff 	mov.w	sl, #4294967295
 8008c4c:	e7df      	b.n	8008c0e <_strtod_l+0xee>
 8008c4e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	9211      	str	r2, [sp, #68]	@ 0x44
 8008c54:	785b      	ldrb	r3, [r3, #1]
 8008c56:	2b30      	cmp	r3, #48	@ 0x30
 8008c58:	d0f9      	beq.n	8008c4e <_strtod_l+0x12e>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d09b      	beq.n	8008b96 <_strtod_l+0x76>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	2600      	movs	r6, #0
 8008c62:	9307      	str	r3, [sp, #28]
 8008c64:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c66:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c68:	46b1      	mov	r9, r6
 8008c6a:	4635      	mov	r5, r6
 8008c6c:	220a      	movs	r2, #10
 8008c6e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008c70:	7804      	ldrb	r4, [r0, #0]
 8008c72:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008c76:	b2d9      	uxtb	r1, r3
 8008c78:	2909      	cmp	r1, #9
 8008c7a:	d929      	bls.n	8008cd0 <_strtod_l+0x1b0>
 8008c7c:	494a      	ldr	r1, [pc, #296]	@ (8008da8 <_strtod_l+0x288>)
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f000 ff84 	bl	8009b8c <strncmp>
 8008c84:	b378      	cbz	r0, 8008ce6 <_strtod_l+0x1c6>
 8008c86:	2000      	movs	r0, #0
 8008c88:	4622      	mov	r2, r4
 8008c8a:	462b      	mov	r3, r5
 8008c8c:	4607      	mov	r7, r0
 8008c8e:	9006      	str	r0, [sp, #24]
 8008c90:	2a65      	cmp	r2, #101	@ 0x65
 8008c92:	d001      	beq.n	8008c98 <_strtod_l+0x178>
 8008c94:	2a45      	cmp	r2, #69	@ 0x45
 8008c96:	d117      	bne.n	8008cc8 <_strtod_l+0x1a8>
 8008c98:	b91b      	cbnz	r3, 8008ca2 <_strtod_l+0x182>
 8008c9a:	9b07      	ldr	r3, [sp, #28]
 8008c9c:	4303      	orrs	r3, r0
 8008c9e:	d096      	beq.n	8008bce <_strtod_l+0xae>
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008ca6:	f108 0201 	add.w	r2, r8, #1
 8008caa:	9211      	str	r2, [sp, #68]	@ 0x44
 8008cac:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008cb0:	2a2b      	cmp	r2, #43	@ 0x2b
 8008cb2:	d06b      	beq.n	8008d8c <_strtod_l+0x26c>
 8008cb4:	2a2d      	cmp	r2, #45	@ 0x2d
 8008cb6:	d071      	beq.n	8008d9c <_strtod_l+0x27c>
 8008cb8:	f04f 0e00 	mov.w	lr, #0
 8008cbc:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008cc0:	2c09      	cmp	r4, #9
 8008cc2:	d979      	bls.n	8008db8 <_strtod_l+0x298>
 8008cc4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008cc8:	2400      	movs	r4, #0
 8008cca:	e094      	b.n	8008df6 <_strtod_l+0x2d6>
 8008ccc:	2300      	movs	r3, #0
 8008cce:	e7c7      	b.n	8008c60 <_strtod_l+0x140>
 8008cd0:	2d08      	cmp	r5, #8
 8008cd2:	f100 0001 	add.w	r0, r0, #1
 8008cd6:	bfd4      	ite	le
 8008cd8:	fb02 3909 	mlale	r9, r2, r9, r3
 8008cdc:	fb02 3606 	mlagt	r6, r2, r6, r3
 8008ce0:	3501      	adds	r5, #1
 8008ce2:	9011      	str	r0, [sp, #68]	@ 0x44
 8008ce4:	e7c3      	b.n	8008c6e <_strtod_l+0x14e>
 8008ce6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ce8:	1c5a      	adds	r2, r3, #1
 8008cea:	9211      	str	r2, [sp, #68]	@ 0x44
 8008cec:	785a      	ldrb	r2, [r3, #1]
 8008cee:	b375      	cbz	r5, 8008d4e <_strtod_l+0x22e>
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	462b      	mov	r3, r5
 8008cf4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008cf8:	2909      	cmp	r1, #9
 8008cfa:	d913      	bls.n	8008d24 <_strtod_l+0x204>
 8008cfc:	2101      	movs	r1, #1
 8008cfe:	9106      	str	r1, [sp, #24]
 8008d00:	e7c6      	b.n	8008c90 <_strtod_l+0x170>
 8008d02:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d04:	1c5a      	adds	r2, r3, #1
 8008d06:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d08:	785a      	ldrb	r2, [r3, #1]
 8008d0a:	3001      	adds	r0, #1
 8008d0c:	2a30      	cmp	r2, #48	@ 0x30
 8008d0e:	d0f8      	beq.n	8008d02 <_strtod_l+0x1e2>
 8008d10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008d14:	2b08      	cmp	r3, #8
 8008d16:	f200 8476 	bhi.w	8009606 <_strtod_l+0xae6>
 8008d1a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d1c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d1e:	4607      	mov	r7, r0
 8008d20:	2000      	movs	r0, #0
 8008d22:	4603      	mov	r3, r0
 8008d24:	3a30      	subs	r2, #48	@ 0x30
 8008d26:	f100 0101 	add.w	r1, r0, #1
 8008d2a:	d023      	beq.n	8008d74 <_strtod_l+0x254>
 8008d2c:	440f      	add	r7, r1
 8008d2e:	eb00 0c03 	add.w	ip, r0, r3
 8008d32:	4619      	mov	r1, r3
 8008d34:	240a      	movs	r4, #10
 8008d36:	4561      	cmp	r1, ip
 8008d38:	d10b      	bne.n	8008d52 <_strtod_l+0x232>
 8008d3a:	1c5c      	adds	r4, r3, #1
 8008d3c:	4403      	add	r3, r0
 8008d3e:	2b08      	cmp	r3, #8
 8008d40:	4404      	add	r4, r0
 8008d42:	dc11      	bgt.n	8008d68 <_strtod_l+0x248>
 8008d44:	230a      	movs	r3, #10
 8008d46:	fb03 2909 	mla	r9, r3, r9, r2
 8008d4a:	2100      	movs	r1, #0
 8008d4c:	e013      	b.n	8008d76 <_strtod_l+0x256>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	e7dc      	b.n	8008d0c <_strtod_l+0x1ec>
 8008d52:	2908      	cmp	r1, #8
 8008d54:	f101 0101 	add.w	r1, r1, #1
 8008d58:	dc02      	bgt.n	8008d60 <_strtod_l+0x240>
 8008d5a:	fb04 f909 	mul.w	r9, r4, r9
 8008d5e:	e7ea      	b.n	8008d36 <_strtod_l+0x216>
 8008d60:	2910      	cmp	r1, #16
 8008d62:	bfd8      	it	le
 8008d64:	4366      	mulle	r6, r4
 8008d66:	e7e6      	b.n	8008d36 <_strtod_l+0x216>
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	dcee      	bgt.n	8008d4a <_strtod_l+0x22a>
 8008d6c:	230a      	movs	r3, #10
 8008d6e:	fb03 2606 	mla	r6, r3, r6, r2
 8008d72:	e7ea      	b.n	8008d4a <_strtod_l+0x22a>
 8008d74:	461c      	mov	r4, r3
 8008d76:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008d78:	1c5a      	adds	r2, r3, #1
 8008d7a:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d7c:	785a      	ldrb	r2, [r3, #1]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4623      	mov	r3, r4
 8008d82:	e7b7      	b.n	8008cf4 <_strtod_l+0x1d4>
 8008d84:	2301      	movs	r3, #1
 8008d86:	2700      	movs	r7, #0
 8008d88:	9306      	str	r3, [sp, #24]
 8008d8a:	e786      	b.n	8008c9a <_strtod_l+0x17a>
 8008d8c:	f04f 0e00 	mov.w	lr, #0
 8008d90:	f108 0202 	add.w	r2, r8, #2
 8008d94:	9211      	str	r2, [sp, #68]	@ 0x44
 8008d96:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008d9a:	e78f      	b.n	8008cbc <_strtod_l+0x19c>
 8008d9c:	f04f 0e01 	mov.w	lr, #1
 8008da0:	e7f6      	b.n	8008d90 <_strtod_l+0x270>
 8008da2:	bf00      	nop
 8008da4:	0800b168 	.word	0x0800b168
 8008da8:	0800b150 	.word	0x0800b150
 8008dac:	7ff00000 	.word	0x7ff00000
 8008db0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008db2:	1c54      	adds	r4, r2, #1
 8008db4:	9411      	str	r4, [sp, #68]	@ 0x44
 8008db6:	7852      	ldrb	r2, [r2, #1]
 8008db8:	2a30      	cmp	r2, #48	@ 0x30
 8008dba:	d0f9      	beq.n	8008db0 <_strtod_l+0x290>
 8008dbc:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008dc0:	2c08      	cmp	r4, #8
 8008dc2:	d881      	bhi.n	8008cc8 <_strtod_l+0x1a8>
 8008dc4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008dc8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008dca:	9209      	str	r2, [sp, #36]	@ 0x24
 8008dcc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008dce:	1c51      	adds	r1, r2, #1
 8008dd0:	9111      	str	r1, [sp, #68]	@ 0x44
 8008dd2:	7852      	ldrb	r2, [r2, #1]
 8008dd4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008dd8:	2c09      	cmp	r4, #9
 8008dda:	d938      	bls.n	8008e4e <_strtod_l+0x32e>
 8008ddc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008dde:	1b0c      	subs	r4, r1, r4
 8008de0:	2c08      	cmp	r4, #8
 8008de2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008de6:	dc02      	bgt.n	8008dee <_strtod_l+0x2ce>
 8008de8:	4564      	cmp	r4, ip
 8008dea:	bfa8      	it	ge
 8008dec:	4664      	movge	r4, ip
 8008dee:	f1be 0f00 	cmp.w	lr, #0
 8008df2:	d000      	beq.n	8008df6 <_strtod_l+0x2d6>
 8008df4:	4264      	negs	r4, r4
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d14e      	bne.n	8008e98 <_strtod_l+0x378>
 8008dfa:	9b07      	ldr	r3, [sp, #28]
 8008dfc:	4318      	orrs	r0, r3
 8008dfe:	f47f aeca 	bne.w	8008b96 <_strtod_l+0x76>
 8008e02:	9b06      	ldr	r3, [sp, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f47f aee2 	bne.w	8008bce <_strtod_l+0xae>
 8008e0a:	2a69      	cmp	r2, #105	@ 0x69
 8008e0c:	d027      	beq.n	8008e5e <_strtod_l+0x33e>
 8008e0e:	dc24      	bgt.n	8008e5a <_strtod_l+0x33a>
 8008e10:	2a49      	cmp	r2, #73	@ 0x49
 8008e12:	d024      	beq.n	8008e5e <_strtod_l+0x33e>
 8008e14:	2a4e      	cmp	r2, #78	@ 0x4e
 8008e16:	f47f aeda 	bne.w	8008bce <_strtod_l+0xae>
 8008e1a:	4997      	ldr	r1, [pc, #604]	@ (8009078 <_strtod_l+0x558>)
 8008e1c:	a811      	add	r0, sp, #68	@ 0x44
 8008e1e:	f001 f99b 	bl	800a158 <__match>
 8008e22:	2800      	cmp	r0, #0
 8008e24:	f43f aed3 	beq.w	8008bce <_strtod_l+0xae>
 8008e28:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	2b28      	cmp	r3, #40	@ 0x28
 8008e2e:	d12d      	bne.n	8008e8c <_strtod_l+0x36c>
 8008e30:	4992      	ldr	r1, [pc, #584]	@ (800907c <_strtod_l+0x55c>)
 8008e32:	aa14      	add	r2, sp, #80	@ 0x50
 8008e34:	a811      	add	r0, sp, #68	@ 0x44
 8008e36:	f001 f9a3 	bl	800a180 <__hexnan>
 8008e3a:	2805      	cmp	r0, #5
 8008e3c:	d126      	bne.n	8008e8c <_strtod_l+0x36c>
 8008e3e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008e40:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008e44:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008e48:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008e4c:	e6a3      	b.n	8008b96 <_strtod_l+0x76>
 8008e4e:	240a      	movs	r4, #10
 8008e50:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008e54:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8008e58:	e7b8      	b.n	8008dcc <_strtod_l+0x2ac>
 8008e5a:	2a6e      	cmp	r2, #110	@ 0x6e
 8008e5c:	e7db      	b.n	8008e16 <_strtod_l+0x2f6>
 8008e5e:	4988      	ldr	r1, [pc, #544]	@ (8009080 <_strtod_l+0x560>)
 8008e60:	a811      	add	r0, sp, #68	@ 0x44
 8008e62:	f001 f979 	bl	800a158 <__match>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f43f aeb1 	beq.w	8008bce <_strtod_l+0xae>
 8008e6c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e6e:	4985      	ldr	r1, [pc, #532]	@ (8009084 <_strtod_l+0x564>)
 8008e70:	3b01      	subs	r3, #1
 8008e72:	a811      	add	r0, sp, #68	@ 0x44
 8008e74:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e76:	f001 f96f 	bl	800a158 <__match>
 8008e7a:	b910      	cbnz	r0, 8008e82 <_strtod_l+0x362>
 8008e7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e7e:	3301      	adds	r3, #1
 8008e80:	9311      	str	r3, [sp, #68]	@ 0x44
 8008e82:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009098 <_strtod_l+0x578>
 8008e86:	f04f 0a00 	mov.w	sl, #0
 8008e8a:	e684      	b.n	8008b96 <_strtod_l+0x76>
 8008e8c:	487e      	ldr	r0, [pc, #504]	@ (8009088 <_strtod_l+0x568>)
 8008e8e:	f000 fe9f 	bl	8009bd0 <nan>
 8008e92:	ec5b ab10 	vmov	sl, fp, d0
 8008e96:	e67e      	b.n	8008b96 <_strtod_l+0x76>
 8008e98:	ee07 9a90 	vmov	s15, r9
 8008e9c:	1be2      	subs	r2, r4, r7
 8008e9e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8008ea2:	2d00      	cmp	r5, #0
 8008ea4:	bf08      	it	eq
 8008ea6:	461d      	moveq	r5, r3
 8008ea8:	2b10      	cmp	r3, #16
 8008eaa:	9209      	str	r2, [sp, #36]	@ 0x24
 8008eac:	461a      	mov	r2, r3
 8008eae:	bfa8      	it	ge
 8008eb0:	2210      	movge	r2, #16
 8008eb2:	2b09      	cmp	r3, #9
 8008eb4:	ec5b ab17 	vmov	sl, fp, d7
 8008eb8:	dc15      	bgt.n	8008ee6 <_strtod_l+0x3c6>
 8008eba:	1be1      	subs	r1, r4, r7
 8008ebc:	2900      	cmp	r1, #0
 8008ebe:	f43f ae6a 	beq.w	8008b96 <_strtod_l+0x76>
 8008ec2:	eba4 0107 	sub.w	r1, r4, r7
 8008ec6:	dd72      	ble.n	8008fae <_strtod_l+0x48e>
 8008ec8:	2916      	cmp	r1, #22
 8008eca:	dc59      	bgt.n	8008f80 <_strtod_l+0x460>
 8008ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800908c <_strtod_l+0x56c>)
 8008ece:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ed4:	ed93 7b00 	vldr	d7, [r3]
 8008ed8:	ec4b ab16 	vmov	d6, sl, fp
 8008edc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ee0:	ec5b ab17 	vmov	sl, fp, d7
 8008ee4:	e657      	b.n	8008b96 <_strtod_l+0x76>
 8008ee6:	4969      	ldr	r1, [pc, #420]	@ (800908c <_strtod_l+0x56c>)
 8008ee8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8008eec:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8008ef0:	ee06 6a90 	vmov	s13, r6
 8008ef4:	2b0f      	cmp	r3, #15
 8008ef6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8008efa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008efe:	ec5b ab16 	vmov	sl, fp, d6
 8008f02:	ddda      	ble.n	8008eba <_strtod_l+0x39a>
 8008f04:	1a9a      	subs	r2, r3, r2
 8008f06:	1be1      	subs	r1, r4, r7
 8008f08:	440a      	add	r2, r1
 8008f0a:	2a00      	cmp	r2, #0
 8008f0c:	f340 8094 	ble.w	8009038 <_strtod_l+0x518>
 8008f10:	f012 000f 	ands.w	r0, r2, #15
 8008f14:	d00a      	beq.n	8008f2c <_strtod_l+0x40c>
 8008f16:	495d      	ldr	r1, [pc, #372]	@ (800908c <_strtod_l+0x56c>)
 8008f18:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8008f1c:	ed91 7b00 	vldr	d7, [r1]
 8008f20:	ec4b ab16 	vmov	d6, sl, fp
 8008f24:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008f28:	ec5b ab17 	vmov	sl, fp, d7
 8008f2c:	f032 020f 	bics.w	r2, r2, #15
 8008f30:	d073      	beq.n	800901a <_strtod_l+0x4fa>
 8008f32:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 8008f36:	dd47      	ble.n	8008fc8 <_strtod_l+0x4a8>
 8008f38:	2400      	movs	r4, #0
 8008f3a:	4625      	mov	r5, r4
 8008f3c:	9407      	str	r4, [sp, #28]
 8008f3e:	4626      	mov	r6, r4
 8008f40:	9a05      	ldr	r2, [sp, #20]
 8008f42:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009098 <_strtod_l+0x578>
 8008f46:	2322      	movs	r3, #34	@ 0x22
 8008f48:	6013      	str	r3, [r2, #0]
 8008f4a:	f04f 0a00 	mov.w	sl, #0
 8008f4e:	9b07      	ldr	r3, [sp, #28]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f43f ae20 	beq.w	8008b96 <_strtod_l+0x76>
 8008f56:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008f58:	9805      	ldr	r0, [sp, #20]
 8008f5a:	f7ff f957 	bl	800820c <_Bfree>
 8008f5e:	9805      	ldr	r0, [sp, #20]
 8008f60:	4631      	mov	r1, r6
 8008f62:	f7ff f953 	bl	800820c <_Bfree>
 8008f66:	9805      	ldr	r0, [sp, #20]
 8008f68:	4629      	mov	r1, r5
 8008f6a:	f7ff f94f 	bl	800820c <_Bfree>
 8008f6e:	9907      	ldr	r1, [sp, #28]
 8008f70:	9805      	ldr	r0, [sp, #20]
 8008f72:	f7ff f94b 	bl	800820c <_Bfree>
 8008f76:	9805      	ldr	r0, [sp, #20]
 8008f78:	4621      	mov	r1, r4
 8008f7a:	f7ff f947 	bl	800820c <_Bfree>
 8008f7e:	e60a      	b.n	8008b96 <_strtod_l+0x76>
 8008f80:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 8008f84:	1be0      	subs	r0, r4, r7
 8008f86:	4281      	cmp	r1, r0
 8008f88:	dbbc      	blt.n	8008f04 <_strtod_l+0x3e4>
 8008f8a:	4a40      	ldr	r2, [pc, #256]	@ (800908c <_strtod_l+0x56c>)
 8008f8c:	f1c3 030f 	rsb	r3, r3, #15
 8008f90:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 8008f94:	ed91 7b00 	vldr	d7, [r1]
 8008f98:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008f9a:	ec4b ab16 	vmov	d6, sl, fp
 8008f9e:	1acb      	subs	r3, r1, r3
 8008fa0:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8008fa4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008fa8:	ed92 6b00 	vldr	d6, [r2]
 8008fac:	e796      	b.n	8008edc <_strtod_l+0x3bc>
 8008fae:	3116      	adds	r1, #22
 8008fb0:	dba8      	blt.n	8008f04 <_strtod_l+0x3e4>
 8008fb2:	4b36      	ldr	r3, [pc, #216]	@ (800908c <_strtod_l+0x56c>)
 8008fb4:	1b3c      	subs	r4, r7, r4
 8008fb6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8008fba:	ed94 7b00 	vldr	d7, [r4]
 8008fbe:	ec4b ab16 	vmov	d6, sl, fp
 8008fc2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008fc6:	e78b      	b.n	8008ee0 <_strtod_l+0x3c0>
 8008fc8:	2000      	movs	r0, #0
 8008fca:	ec4b ab17 	vmov	d7, sl, fp
 8008fce:	4e30      	ldr	r6, [pc, #192]	@ (8009090 <_strtod_l+0x570>)
 8008fd0:	1112      	asrs	r2, r2, #4
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	2a01      	cmp	r2, #1
 8008fd6:	dc23      	bgt.n	8009020 <_strtod_l+0x500>
 8008fd8:	b108      	cbz	r0, 8008fde <_strtod_l+0x4be>
 8008fda:	ec5b ab17 	vmov	sl, fp, d7
 8008fde:	4a2c      	ldr	r2, [pc, #176]	@ (8009090 <_strtod_l+0x570>)
 8008fe0:	482c      	ldr	r0, [pc, #176]	@ (8009094 <_strtod_l+0x574>)
 8008fe2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8008fe6:	ed92 7b00 	vldr	d7, [r2]
 8008fea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008fee:	ec4b ab16 	vmov	d6, sl, fp
 8008ff2:	4a29      	ldr	r2, [pc, #164]	@ (8009098 <_strtod_l+0x578>)
 8008ff4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ff8:	ee17 1a90 	vmov	r1, s15
 8008ffc:	400a      	ands	r2, r1
 8008ffe:	4282      	cmp	r2, r0
 8009000:	ec5b ab17 	vmov	sl, fp, d7
 8009004:	d898      	bhi.n	8008f38 <_strtod_l+0x418>
 8009006:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800900a:	4282      	cmp	r2, r0
 800900c:	bf86      	itte	hi
 800900e:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800909c <_strtod_l+0x57c>
 8009012:	f04f 3aff 	movhi.w	sl, #4294967295
 8009016:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800901a:	2200      	movs	r2, #0
 800901c:	9206      	str	r2, [sp, #24]
 800901e:	e076      	b.n	800910e <_strtod_l+0x5ee>
 8009020:	f012 0f01 	tst.w	r2, #1
 8009024:	d004      	beq.n	8009030 <_strtod_l+0x510>
 8009026:	ed96 6b00 	vldr	d6, [r6]
 800902a:	2001      	movs	r0, #1
 800902c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009030:	3101      	adds	r1, #1
 8009032:	1052      	asrs	r2, r2, #1
 8009034:	3608      	adds	r6, #8
 8009036:	e7cd      	b.n	8008fd4 <_strtod_l+0x4b4>
 8009038:	d0ef      	beq.n	800901a <_strtod_l+0x4fa>
 800903a:	4252      	negs	r2, r2
 800903c:	f012 000f 	ands.w	r0, r2, #15
 8009040:	d00a      	beq.n	8009058 <_strtod_l+0x538>
 8009042:	4912      	ldr	r1, [pc, #72]	@ (800908c <_strtod_l+0x56c>)
 8009044:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009048:	ed91 7b00 	vldr	d7, [r1]
 800904c:	ec4b ab16 	vmov	d6, sl, fp
 8009050:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009054:	ec5b ab17 	vmov	sl, fp, d7
 8009058:	1112      	asrs	r2, r2, #4
 800905a:	d0de      	beq.n	800901a <_strtod_l+0x4fa>
 800905c:	2a1f      	cmp	r2, #31
 800905e:	dd1f      	ble.n	80090a0 <_strtod_l+0x580>
 8009060:	2400      	movs	r4, #0
 8009062:	4625      	mov	r5, r4
 8009064:	9407      	str	r4, [sp, #28]
 8009066:	4626      	mov	r6, r4
 8009068:	9a05      	ldr	r2, [sp, #20]
 800906a:	2322      	movs	r3, #34	@ 0x22
 800906c:	f04f 0a00 	mov.w	sl, #0
 8009070:	f04f 0b00 	mov.w	fp, #0
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	e76a      	b.n	8008f4e <_strtod_l+0x42e>
 8009078:	0800af41 	.word	0x0800af41
 800907c:	0800b154 	.word	0x0800b154
 8009080:	0800af39 	.word	0x0800af39
 8009084:	0800af70 	.word	0x0800af70
 8009088:	0800b2fd 	.word	0x0800b2fd
 800908c:	0800b088 	.word	0x0800b088
 8009090:	0800b060 	.word	0x0800b060
 8009094:	7ca00000 	.word	0x7ca00000
 8009098:	7ff00000 	.word	0x7ff00000
 800909c:	7fefffff 	.word	0x7fefffff
 80090a0:	f012 0110 	ands.w	r1, r2, #16
 80090a4:	bf18      	it	ne
 80090a6:	216a      	movne	r1, #106	@ 0x6a
 80090a8:	9106      	str	r1, [sp, #24]
 80090aa:	ec4b ab17 	vmov	d7, sl, fp
 80090ae:	49b0      	ldr	r1, [pc, #704]	@ (8009370 <_strtod_l+0x850>)
 80090b0:	2000      	movs	r0, #0
 80090b2:	07d6      	lsls	r6, r2, #31
 80090b4:	d504      	bpl.n	80090c0 <_strtod_l+0x5a0>
 80090b6:	ed91 6b00 	vldr	d6, [r1]
 80090ba:	2001      	movs	r0, #1
 80090bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090c0:	1052      	asrs	r2, r2, #1
 80090c2:	f101 0108 	add.w	r1, r1, #8
 80090c6:	d1f4      	bne.n	80090b2 <_strtod_l+0x592>
 80090c8:	b108      	cbz	r0, 80090ce <_strtod_l+0x5ae>
 80090ca:	ec5b ab17 	vmov	sl, fp, d7
 80090ce:	9a06      	ldr	r2, [sp, #24]
 80090d0:	b1b2      	cbz	r2, 8009100 <_strtod_l+0x5e0>
 80090d2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 80090d6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 80090da:	2a00      	cmp	r2, #0
 80090dc:	4658      	mov	r0, fp
 80090de:	dd0f      	ble.n	8009100 <_strtod_l+0x5e0>
 80090e0:	2a1f      	cmp	r2, #31
 80090e2:	dd55      	ble.n	8009190 <_strtod_l+0x670>
 80090e4:	2a34      	cmp	r2, #52	@ 0x34
 80090e6:	bfde      	ittt	le
 80090e8:	f04f 32ff 	movle.w	r2, #4294967295
 80090ec:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 80090f0:	408a      	lslle	r2, r1
 80090f2:	f04f 0a00 	mov.w	sl, #0
 80090f6:	bfcc      	ite	gt
 80090f8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80090fc:	ea02 0b00 	andle.w	fp, r2, r0
 8009100:	ec4b ab17 	vmov	d7, sl, fp
 8009104:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800910c:	d0a8      	beq.n	8009060 <_strtod_l+0x540>
 800910e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009110:	9805      	ldr	r0, [sp, #20]
 8009112:	f8cd 9000 	str.w	r9, [sp]
 8009116:	462a      	mov	r2, r5
 8009118:	f7ff f8e0 	bl	80082dc <__s2b>
 800911c:	9007      	str	r0, [sp, #28]
 800911e:	2800      	cmp	r0, #0
 8009120:	f43f af0a 	beq.w	8008f38 <_strtod_l+0x418>
 8009124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009126:	1b3f      	subs	r7, r7, r4
 8009128:	2b00      	cmp	r3, #0
 800912a:	bfb4      	ite	lt
 800912c:	463b      	movlt	r3, r7
 800912e:	2300      	movge	r3, #0
 8009130:	930a      	str	r3, [sp, #40]	@ 0x28
 8009132:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009134:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009360 <_strtod_l+0x840>
 8009138:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800913c:	2400      	movs	r4, #0
 800913e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009140:	4625      	mov	r5, r4
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	6859      	ldr	r1, [r3, #4]
 8009148:	f7ff f820 	bl	800818c <_Balloc>
 800914c:	4606      	mov	r6, r0
 800914e:	2800      	cmp	r0, #0
 8009150:	f43f aef6 	beq.w	8008f40 <_strtod_l+0x420>
 8009154:	9b07      	ldr	r3, [sp, #28]
 8009156:	691a      	ldr	r2, [r3, #16]
 8009158:	ec4b ab19 	vmov	d9, sl, fp
 800915c:	3202      	adds	r2, #2
 800915e:	f103 010c 	add.w	r1, r3, #12
 8009162:	0092      	lsls	r2, r2, #2
 8009164:	300c      	adds	r0, #12
 8009166:	f7fe f91c 	bl	80073a2 <memcpy>
 800916a:	eeb0 0b49 	vmov.f64	d0, d9
 800916e:	9805      	ldr	r0, [sp, #20]
 8009170:	aa14      	add	r2, sp, #80	@ 0x50
 8009172:	a913      	add	r1, sp, #76	@ 0x4c
 8009174:	f7ff fbee 	bl	8008954 <__d2b>
 8009178:	9012      	str	r0, [sp, #72]	@ 0x48
 800917a:	2800      	cmp	r0, #0
 800917c:	f43f aee0 	beq.w	8008f40 <_strtod_l+0x420>
 8009180:	9805      	ldr	r0, [sp, #20]
 8009182:	2101      	movs	r1, #1
 8009184:	f7ff f940 	bl	8008408 <__i2b>
 8009188:	4605      	mov	r5, r0
 800918a:	b940      	cbnz	r0, 800919e <_strtod_l+0x67e>
 800918c:	2500      	movs	r5, #0
 800918e:	e6d7      	b.n	8008f40 <_strtod_l+0x420>
 8009190:	f04f 31ff 	mov.w	r1, #4294967295
 8009194:	fa01 f202 	lsl.w	r2, r1, r2
 8009198:	ea02 0a0a 	and.w	sl, r2, sl
 800919c:	e7b0      	b.n	8009100 <_strtod_l+0x5e0>
 800919e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80091a0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80091a2:	2f00      	cmp	r7, #0
 80091a4:	bfab      	itete	ge
 80091a6:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80091a8:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80091aa:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80091ae:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80091b2:	bfac      	ite	ge
 80091b4:	eb07 0903 	addge.w	r9, r7, r3
 80091b8:	eba3 0807 	sublt.w	r8, r3, r7
 80091bc:	9b06      	ldr	r3, [sp, #24]
 80091be:	1aff      	subs	r7, r7, r3
 80091c0:	4417      	add	r7, r2
 80091c2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 80091c6:	4a6b      	ldr	r2, [pc, #428]	@ (8009374 <_strtod_l+0x854>)
 80091c8:	3f01      	subs	r7, #1
 80091ca:	4297      	cmp	r7, r2
 80091cc:	da51      	bge.n	8009272 <_strtod_l+0x752>
 80091ce:	1bd1      	subs	r1, r2, r7
 80091d0:	291f      	cmp	r1, #31
 80091d2:	eba3 0301 	sub.w	r3, r3, r1
 80091d6:	f04f 0201 	mov.w	r2, #1
 80091da:	dc3e      	bgt.n	800925a <_strtod_l+0x73a>
 80091dc:	408a      	lsls	r2, r1
 80091de:	920c      	str	r2, [sp, #48]	@ 0x30
 80091e0:	2200      	movs	r2, #0
 80091e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80091e4:	eb09 0703 	add.w	r7, r9, r3
 80091e8:	4498      	add	r8, r3
 80091ea:	9b06      	ldr	r3, [sp, #24]
 80091ec:	45b9      	cmp	r9, r7
 80091ee:	4498      	add	r8, r3
 80091f0:	464b      	mov	r3, r9
 80091f2:	bfa8      	it	ge
 80091f4:	463b      	movge	r3, r7
 80091f6:	4543      	cmp	r3, r8
 80091f8:	bfa8      	it	ge
 80091fa:	4643      	movge	r3, r8
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bfc2      	ittt	gt
 8009200:	1aff      	subgt	r7, r7, r3
 8009202:	eba8 0803 	subgt.w	r8, r8, r3
 8009206:	eba9 0903 	subgt.w	r9, r9, r3
 800920a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd16      	ble.n	800923e <_strtod_l+0x71e>
 8009210:	4629      	mov	r1, r5
 8009212:	9805      	ldr	r0, [sp, #20]
 8009214:	461a      	mov	r2, r3
 8009216:	f7ff f9b7 	bl	8008588 <__pow5mult>
 800921a:	4605      	mov	r5, r0
 800921c:	2800      	cmp	r0, #0
 800921e:	d0b5      	beq.n	800918c <_strtod_l+0x66c>
 8009220:	4601      	mov	r1, r0
 8009222:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009224:	9805      	ldr	r0, [sp, #20]
 8009226:	f7ff f905 	bl	8008434 <__multiply>
 800922a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800922c:	2800      	cmp	r0, #0
 800922e:	f43f ae87 	beq.w	8008f40 <_strtod_l+0x420>
 8009232:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009234:	9805      	ldr	r0, [sp, #20]
 8009236:	f7fe ffe9 	bl	800820c <_Bfree>
 800923a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800923c:	9312      	str	r3, [sp, #72]	@ 0x48
 800923e:	2f00      	cmp	r7, #0
 8009240:	dc1b      	bgt.n	800927a <_strtod_l+0x75a>
 8009242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd21      	ble.n	800928c <_strtod_l+0x76c>
 8009248:	4631      	mov	r1, r6
 800924a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800924c:	9805      	ldr	r0, [sp, #20]
 800924e:	f7ff f99b 	bl	8008588 <__pow5mult>
 8009252:	4606      	mov	r6, r0
 8009254:	b9d0      	cbnz	r0, 800928c <_strtod_l+0x76c>
 8009256:	2600      	movs	r6, #0
 8009258:	e672      	b.n	8008f40 <_strtod_l+0x420>
 800925a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800925e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 8009262:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 8009266:	37e2      	adds	r7, #226	@ 0xe2
 8009268:	fa02 f107 	lsl.w	r1, r2, r7
 800926c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800926e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009270:	e7b8      	b.n	80091e4 <_strtod_l+0x6c4>
 8009272:	2200      	movs	r2, #0
 8009274:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009276:	2201      	movs	r2, #1
 8009278:	e7f9      	b.n	800926e <_strtod_l+0x74e>
 800927a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800927c:	9805      	ldr	r0, [sp, #20]
 800927e:	463a      	mov	r2, r7
 8009280:	f7ff f9dc 	bl	800863c <__lshift>
 8009284:	9012      	str	r0, [sp, #72]	@ 0x48
 8009286:	2800      	cmp	r0, #0
 8009288:	d1db      	bne.n	8009242 <_strtod_l+0x722>
 800928a:	e659      	b.n	8008f40 <_strtod_l+0x420>
 800928c:	f1b8 0f00 	cmp.w	r8, #0
 8009290:	dd07      	ble.n	80092a2 <_strtod_l+0x782>
 8009292:	4631      	mov	r1, r6
 8009294:	9805      	ldr	r0, [sp, #20]
 8009296:	4642      	mov	r2, r8
 8009298:	f7ff f9d0 	bl	800863c <__lshift>
 800929c:	4606      	mov	r6, r0
 800929e:	2800      	cmp	r0, #0
 80092a0:	d0d9      	beq.n	8009256 <_strtod_l+0x736>
 80092a2:	f1b9 0f00 	cmp.w	r9, #0
 80092a6:	dd08      	ble.n	80092ba <_strtod_l+0x79a>
 80092a8:	4629      	mov	r1, r5
 80092aa:	9805      	ldr	r0, [sp, #20]
 80092ac:	464a      	mov	r2, r9
 80092ae:	f7ff f9c5 	bl	800863c <__lshift>
 80092b2:	4605      	mov	r5, r0
 80092b4:	2800      	cmp	r0, #0
 80092b6:	f43f ae43 	beq.w	8008f40 <_strtod_l+0x420>
 80092ba:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80092bc:	9805      	ldr	r0, [sp, #20]
 80092be:	4632      	mov	r2, r6
 80092c0:	f7ff fa44 	bl	800874c <__mdiff>
 80092c4:	4604      	mov	r4, r0
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f ae3a 	beq.w	8008f40 <_strtod_l+0x420>
 80092cc:	2300      	movs	r3, #0
 80092ce:	f8d0 800c 	ldr.w	r8, [r0, #12]
 80092d2:	60c3      	str	r3, [r0, #12]
 80092d4:	4629      	mov	r1, r5
 80092d6:	f7ff fa1d 	bl	8008714 <__mcmp>
 80092da:	2800      	cmp	r0, #0
 80092dc:	da4e      	bge.n	800937c <_strtod_l+0x85c>
 80092de:	ea58 080a 	orrs.w	r8, r8, sl
 80092e2:	d174      	bne.n	80093ce <_strtod_l+0x8ae>
 80092e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d170      	bne.n	80093ce <_strtod_l+0x8ae>
 80092ec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80092f0:	0d1b      	lsrs	r3, r3, #20
 80092f2:	051b      	lsls	r3, r3, #20
 80092f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80092f8:	d969      	bls.n	80093ce <_strtod_l+0x8ae>
 80092fa:	6963      	ldr	r3, [r4, #20]
 80092fc:	b913      	cbnz	r3, 8009304 <_strtod_l+0x7e4>
 80092fe:	6923      	ldr	r3, [r4, #16]
 8009300:	2b01      	cmp	r3, #1
 8009302:	dd64      	ble.n	80093ce <_strtod_l+0x8ae>
 8009304:	4621      	mov	r1, r4
 8009306:	2201      	movs	r2, #1
 8009308:	9805      	ldr	r0, [sp, #20]
 800930a:	f7ff f997 	bl	800863c <__lshift>
 800930e:	4629      	mov	r1, r5
 8009310:	4604      	mov	r4, r0
 8009312:	f7ff f9ff 	bl	8008714 <__mcmp>
 8009316:	2800      	cmp	r0, #0
 8009318:	dd59      	ble.n	80093ce <_strtod_l+0x8ae>
 800931a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800931e:	9a06      	ldr	r2, [sp, #24]
 8009320:	0d1b      	lsrs	r3, r3, #20
 8009322:	051b      	lsls	r3, r3, #20
 8009324:	2a00      	cmp	r2, #0
 8009326:	d070      	beq.n	800940a <_strtod_l+0x8ea>
 8009328:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800932c:	d86d      	bhi.n	800940a <_strtod_l+0x8ea>
 800932e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8009332:	f67f ae99 	bls.w	8009068 <_strtod_l+0x548>
 8009336:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009368 <_strtod_l+0x848>
 800933a:	ec4b ab16 	vmov	d6, sl, fp
 800933e:	4b0e      	ldr	r3, [pc, #56]	@ (8009378 <_strtod_l+0x858>)
 8009340:	ee26 7b07 	vmul.f64	d7, d6, d7
 8009344:	ee17 2a90 	vmov	r2, s15
 8009348:	4013      	ands	r3, r2
 800934a:	ec5b ab17 	vmov	sl, fp, d7
 800934e:	2b00      	cmp	r3, #0
 8009350:	f47f ae01 	bne.w	8008f56 <_strtod_l+0x436>
 8009354:	9a05      	ldr	r2, [sp, #20]
 8009356:	2322      	movs	r3, #34	@ 0x22
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	e5fc      	b.n	8008f56 <_strtod_l+0x436>
 800935c:	f3af 8000 	nop.w
 8009360:	ffc00000 	.word	0xffc00000
 8009364:	41dfffff 	.word	0x41dfffff
 8009368:	00000000 	.word	0x00000000
 800936c:	39500000 	.word	0x39500000
 8009370:	0800b180 	.word	0x0800b180
 8009374:	fffffc02 	.word	0xfffffc02
 8009378:	7ff00000 	.word	0x7ff00000
 800937c:	46d9      	mov	r9, fp
 800937e:	d15d      	bne.n	800943c <_strtod_l+0x91c>
 8009380:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009384:	f1b8 0f00 	cmp.w	r8, #0
 8009388:	d02a      	beq.n	80093e0 <_strtod_l+0x8c0>
 800938a:	4aab      	ldr	r2, [pc, #684]	@ (8009638 <_strtod_l+0xb18>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d12a      	bne.n	80093e6 <_strtod_l+0x8c6>
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	4652      	mov	r2, sl
 8009394:	b1fb      	cbz	r3, 80093d6 <_strtod_l+0x8b6>
 8009396:	4ba9      	ldr	r3, [pc, #676]	@ (800963c <_strtod_l+0xb1c>)
 8009398:	ea0b 0303 	and.w	r3, fp, r3
 800939c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80093a0:	f04f 31ff 	mov.w	r1, #4294967295
 80093a4:	d81a      	bhi.n	80093dc <_strtod_l+0x8bc>
 80093a6:	0d1b      	lsrs	r3, r3, #20
 80093a8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80093ac:	fa01 f303 	lsl.w	r3, r1, r3
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d118      	bne.n	80093e6 <_strtod_l+0x8c6>
 80093b4:	4ba2      	ldr	r3, [pc, #648]	@ (8009640 <_strtod_l+0xb20>)
 80093b6:	4599      	cmp	r9, r3
 80093b8:	d102      	bne.n	80093c0 <_strtod_l+0x8a0>
 80093ba:	3201      	adds	r2, #1
 80093bc:	f43f adc0 	beq.w	8008f40 <_strtod_l+0x420>
 80093c0:	4b9e      	ldr	r3, [pc, #632]	@ (800963c <_strtod_l+0xb1c>)
 80093c2:	ea09 0303 	and.w	r3, r9, r3
 80093c6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 80093ca:	f04f 0a00 	mov.w	sl, #0
 80093ce:	9b06      	ldr	r3, [sp, #24]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1b0      	bne.n	8009336 <_strtod_l+0x816>
 80093d4:	e5bf      	b.n	8008f56 <_strtod_l+0x436>
 80093d6:	f04f 33ff 	mov.w	r3, #4294967295
 80093da:	e7e9      	b.n	80093b0 <_strtod_l+0x890>
 80093dc:	460b      	mov	r3, r1
 80093de:	e7e7      	b.n	80093b0 <_strtod_l+0x890>
 80093e0:	ea53 030a 	orrs.w	r3, r3, sl
 80093e4:	d099      	beq.n	800931a <_strtod_l+0x7fa>
 80093e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80093e8:	b1c3      	cbz	r3, 800941c <_strtod_l+0x8fc>
 80093ea:	ea13 0f09 	tst.w	r3, r9
 80093ee:	d0ee      	beq.n	80093ce <_strtod_l+0x8ae>
 80093f0:	9a06      	ldr	r2, [sp, #24]
 80093f2:	4650      	mov	r0, sl
 80093f4:	4659      	mov	r1, fp
 80093f6:	f1b8 0f00 	cmp.w	r8, #0
 80093fa:	d013      	beq.n	8009424 <_strtod_l+0x904>
 80093fc:	f7ff fb75 	bl	8008aea <sulp>
 8009400:	ee39 7b00 	vadd.f64	d7, d9, d0
 8009404:	ec5b ab17 	vmov	sl, fp, d7
 8009408:	e7e1      	b.n	80093ce <_strtod_l+0x8ae>
 800940a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800940e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009412:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009416:	f04f 3aff 	mov.w	sl, #4294967295
 800941a:	e7d8      	b.n	80093ce <_strtod_l+0x8ae>
 800941c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800941e:	ea13 0f0a 	tst.w	r3, sl
 8009422:	e7e4      	b.n	80093ee <_strtod_l+0x8ce>
 8009424:	f7ff fb61 	bl	8008aea <sulp>
 8009428:	ee39 0b40 	vsub.f64	d0, d9, d0
 800942c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8009430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009434:	ec5b ab10 	vmov	sl, fp, d0
 8009438:	d1c9      	bne.n	80093ce <_strtod_l+0x8ae>
 800943a:	e615      	b.n	8009068 <_strtod_l+0x548>
 800943c:	4629      	mov	r1, r5
 800943e:	4620      	mov	r0, r4
 8009440:	f7ff fae0 	bl	8008a04 <__ratio>
 8009444:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8009448:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800944c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009450:	d85d      	bhi.n	800950e <_strtod_l+0x9ee>
 8009452:	f1b8 0f00 	cmp.w	r8, #0
 8009456:	d164      	bne.n	8009522 <_strtod_l+0xa02>
 8009458:	f1ba 0f00 	cmp.w	sl, #0
 800945c:	d14b      	bne.n	80094f6 <_strtod_l+0x9d6>
 800945e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009462:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8009466:	2b00      	cmp	r3, #0
 8009468:	d160      	bne.n	800952c <_strtod_l+0xa0c>
 800946a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800946e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009476:	d401      	bmi.n	800947c <_strtod_l+0x95c>
 8009478:	ee20 8b08 	vmul.f64	d8, d0, d8
 800947c:	eeb1 ab48 	vneg.f64	d10, d8
 8009480:	486e      	ldr	r0, [pc, #440]	@ (800963c <_strtod_l+0xb1c>)
 8009482:	4970      	ldr	r1, [pc, #448]	@ (8009644 <_strtod_l+0xb24>)
 8009484:	ea09 0700 	and.w	r7, r9, r0
 8009488:	428f      	cmp	r7, r1
 800948a:	ec53 2b1a 	vmov	r2, r3, d10
 800948e:	d17d      	bne.n	800958c <_strtod_l+0xa6c>
 8009490:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8009494:	ec4b ab1c 	vmov	d12, sl, fp
 8009498:	eeb0 0b4c 	vmov.f64	d0, d12
 800949c:	f7ff f9ea 	bl	8008874 <__ulp>
 80094a0:	4866      	ldr	r0, [pc, #408]	@ (800963c <_strtod_l+0xb1c>)
 80094a2:	eea0 cb0a 	vfma.f64	d12, d0, d10
 80094a6:	ee1c 3a90 	vmov	r3, s25
 80094aa:	4a67      	ldr	r2, [pc, #412]	@ (8009648 <_strtod_l+0xb28>)
 80094ac:	ea03 0100 	and.w	r1, r3, r0
 80094b0:	4291      	cmp	r1, r2
 80094b2:	ec5b ab1c 	vmov	sl, fp, d12
 80094b6:	d93c      	bls.n	8009532 <_strtod_l+0xa12>
 80094b8:	ee19 2a90 	vmov	r2, s19
 80094bc:	4b60      	ldr	r3, [pc, #384]	@ (8009640 <_strtod_l+0xb20>)
 80094be:	429a      	cmp	r2, r3
 80094c0:	d104      	bne.n	80094cc <_strtod_l+0x9ac>
 80094c2:	ee19 3a10 	vmov	r3, s18
 80094c6:	3301      	adds	r3, #1
 80094c8:	f43f ad3a 	beq.w	8008f40 <_strtod_l+0x420>
 80094cc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8009640 <_strtod_l+0xb20>
 80094d0:	f04f 3aff 	mov.w	sl, #4294967295
 80094d4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80094d6:	9805      	ldr	r0, [sp, #20]
 80094d8:	f7fe fe98 	bl	800820c <_Bfree>
 80094dc:	9805      	ldr	r0, [sp, #20]
 80094de:	4631      	mov	r1, r6
 80094e0:	f7fe fe94 	bl	800820c <_Bfree>
 80094e4:	9805      	ldr	r0, [sp, #20]
 80094e6:	4629      	mov	r1, r5
 80094e8:	f7fe fe90 	bl	800820c <_Bfree>
 80094ec:	9805      	ldr	r0, [sp, #20]
 80094ee:	4621      	mov	r1, r4
 80094f0:	f7fe fe8c 	bl	800820c <_Bfree>
 80094f4:	e625      	b.n	8009142 <_strtod_l+0x622>
 80094f6:	f1ba 0f01 	cmp.w	sl, #1
 80094fa:	d103      	bne.n	8009504 <_strtod_l+0x9e4>
 80094fc:	f1bb 0f00 	cmp.w	fp, #0
 8009500:	f43f adb2 	beq.w	8009068 <_strtod_l+0x548>
 8009504:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009508:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800950c:	e7b8      	b.n	8009480 <_strtod_l+0x960>
 800950e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8009512:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009516:	f1b8 0f00 	cmp.w	r8, #0
 800951a:	d0af      	beq.n	800947c <_strtod_l+0x95c>
 800951c:	eeb0 ab48 	vmov.f64	d10, d8
 8009520:	e7ae      	b.n	8009480 <_strtod_l+0x960>
 8009522:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8009526:	eeb0 8b4a 	vmov.f64	d8, d10
 800952a:	e7a9      	b.n	8009480 <_strtod_l+0x960>
 800952c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8009530:	e7a6      	b.n	8009480 <_strtod_l+0x960>
 8009532:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009536:	9b06      	ldr	r3, [sp, #24]
 8009538:	46d9      	mov	r9, fp
 800953a:	2b00      	cmp	r3, #0
 800953c:	d1ca      	bne.n	80094d4 <_strtod_l+0x9b4>
 800953e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009542:	0d1b      	lsrs	r3, r3, #20
 8009544:	051b      	lsls	r3, r3, #20
 8009546:	429f      	cmp	r7, r3
 8009548:	d1c4      	bne.n	80094d4 <_strtod_l+0x9b4>
 800954a:	ec51 0b18 	vmov	r0, r1, d8
 800954e:	f7f7 f8db 	bl	8000708 <__aeabi_d2lz>
 8009552:	f7f7 f8ab 	bl	80006ac <__aeabi_l2d>
 8009556:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800955a:	ec41 0b17 	vmov	d7, r0, r1
 800955e:	ea49 090a 	orr.w	r9, r9, sl
 8009562:	ea59 0908 	orrs.w	r9, r9, r8
 8009566:	ee38 8b47 	vsub.f64	d8, d8, d7
 800956a:	d03c      	beq.n	80095e6 <_strtod_l+0xac6>
 800956c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8009620 <_strtod_l+0xb00>
 8009570:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009578:	f53f aced 	bmi.w	8008f56 <_strtod_l+0x436>
 800957c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8009628 <_strtod_l+0xb08>
 8009580:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009588:	dda4      	ble.n	80094d4 <_strtod_l+0x9b4>
 800958a:	e4e4      	b.n	8008f56 <_strtod_l+0x436>
 800958c:	9906      	ldr	r1, [sp, #24]
 800958e:	b1e1      	cbz	r1, 80095ca <_strtod_l+0xaaa>
 8009590:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8009594:	d819      	bhi.n	80095ca <_strtod_l+0xaaa>
 8009596:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800959a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959e:	d811      	bhi.n	80095c4 <_strtod_l+0xaa4>
 80095a0:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 80095a4:	ee18 3a10 	vmov	r3, s16
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	bf38      	it	cc
 80095ac:	2301      	movcc	r3, #1
 80095ae:	ee08 3a10 	vmov	s16, r3
 80095b2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 80095b6:	f1b8 0f00 	cmp.w	r8, #0
 80095ba:	d111      	bne.n	80095e0 <_strtod_l+0xac0>
 80095bc:	eeb1 7b48 	vneg.f64	d7, d8
 80095c0:	ec53 2b17 	vmov	r2, r3, d7
 80095c4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 80095c8:	1bcb      	subs	r3, r1, r7
 80095ca:	eeb0 0b49 	vmov.f64	d0, d9
 80095ce:	ec43 2b1a 	vmov	d10, r2, r3
 80095d2:	f7ff f94f 	bl	8008874 <__ulp>
 80095d6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 80095da:	ec5b ab19 	vmov	sl, fp, d9
 80095de:	e7aa      	b.n	8009536 <_strtod_l+0xa16>
 80095e0:	eeb0 7b48 	vmov.f64	d7, d8
 80095e4:	e7ec      	b.n	80095c0 <_strtod_l+0xaa0>
 80095e6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8009630 <_strtod_l+0xb10>
 80095ea:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80095ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f2:	f57f af6f 	bpl.w	80094d4 <_strtod_l+0x9b4>
 80095f6:	e4ae      	b.n	8008f56 <_strtod_l+0x436>
 80095f8:	2300      	movs	r3, #0
 80095fa:	9308      	str	r3, [sp, #32]
 80095fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095fe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009600:	6013      	str	r3, [r2, #0]
 8009602:	f7ff bacc 	b.w	8008b9e <_strtod_l+0x7e>
 8009606:	2a65      	cmp	r2, #101	@ 0x65
 8009608:	f43f abbc 	beq.w	8008d84 <_strtod_l+0x264>
 800960c:	2a45      	cmp	r2, #69	@ 0x45
 800960e:	f43f abb9 	beq.w	8008d84 <_strtod_l+0x264>
 8009612:	2301      	movs	r3, #1
 8009614:	9306      	str	r3, [sp, #24]
 8009616:	f7ff bbf0 	b.w	8008dfa <_strtod_l+0x2da>
 800961a:	bf00      	nop
 800961c:	f3af 8000 	nop.w
 8009620:	94a03595 	.word	0x94a03595
 8009624:	3fdfffff 	.word	0x3fdfffff
 8009628:	35afe535 	.word	0x35afe535
 800962c:	3fe00000 	.word	0x3fe00000
 8009630:	94a03595 	.word	0x94a03595
 8009634:	3fcfffff 	.word	0x3fcfffff
 8009638:	000fffff 	.word	0x000fffff
 800963c:	7ff00000 	.word	0x7ff00000
 8009640:	7fefffff 	.word	0x7fefffff
 8009644:	7fe00000 	.word	0x7fe00000
 8009648:	7c9fffff 	.word	0x7c9fffff

0800964c <_strtod_r>:
 800964c:	4b01      	ldr	r3, [pc, #4]	@ (8009654 <_strtod_r+0x8>)
 800964e:	f7ff ba67 	b.w	8008b20 <_strtod_l>
 8009652:	bf00      	nop
 8009654:	2400006c 	.word	0x2400006c

08009658 <_strtol_l.constprop.0>:
 8009658:	2b24      	cmp	r3, #36	@ 0x24
 800965a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965e:	4686      	mov	lr, r0
 8009660:	4690      	mov	r8, r2
 8009662:	d801      	bhi.n	8009668 <_strtol_l.constprop.0+0x10>
 8009664:	2b01      	cmp	r3, #1
 8009666:	d106      	bne.n	8009676 <_strtol_l.constprop.0+0x1e>
 8009668:	f7fd fe6e 	bl	8007348 <__errno>
 800966c:	2316      	movs	r3, #22
 800966e:	6003      	str	r3, [r0, #0]
 8009670:	2000      	movs	r0, #0
 8009672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009676:	4834      	ldr	r0, [pc, #208]	@ (8009748 <_strtol_l.constprop.0+0xf0>)
 8009678:	460d      	mov	r5, r1
 800967a:	462a      	mov	r2, r5
 800967c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009680:	5d06      	ldrb	r6, [r0, r4]
 8009682:	f016 0608 	ands.w	r6, r6, #8
 8009686:	d1f8      	bne.n	800967a <_strtol_l.constprop.0+0x22>
 8009688:	2c2d      	cmp	r4, #45	@ 0x2d
 800968a:	d12d      	bne.n	80096e8 <_strtol_l.constprop.0+0x90>
 800968c:	782c      	ldrb	r4, [r5, #0]
 800968e:	2601      	movs	r6, #1
 8009690:	1c95      	adds	r5, r2, #2
 8009692:	f033 0210 	bics.w	r2, r3, #16
 8009696:	d109      	bne.n	80096ac <_strtol_l.constprop.0+0x54>
 8009698:	2c30      	cmp	r4, #48	@ 0x30
 800969a:	d12a      	bne.n	80096f2 <_strtol_l.constprop.0+0x9a>
 800969c:	782a      	ldrb	r2, [r5, #0]
 800969e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096a2:	2a58      	cmp	r2, #88	@ 0x58
 80096a4:	d125      	bne.n	80096f2 <_strtol_l.constprop.0+0x9a>
 80096a6:	786c      	ldrb	r4, [r5, #1]
 80096a8:	2310      	movs	r3, #16
 80096aa:	3502      	adds	r5, #2
 80096ac:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80096b0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096b4:	2200      	movs	r2, #0
 80096b6:	fbbc f9f3 	udiv	r9, ip, r3
 80096ba:	4610      	mov	r0, r2
 80096bc:	fb03 ca19 	mls	sl, r3, r9, ip
 80096c0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80096c4:	2f09      	cmp	r7, #9
 80096c6:	d81b      	bhi.n	8009700 <_strtol_l.constprop.0+0xa8>
 80096c8:	463c      	mov	r4, r7
 80096ca:	42a3      	cmp	r3, r4
 80096cc:	dd27      	ble.n	800971e <_strtol_l.constprop.0+0xc6>
 80096ce:	1c57      	adds	r7, r2, #1
 80096d0:	d007      	beq.n	80096e2 <_strtol_l.constprop.0+0x8a>
 80096d2:	4581      	cmp	r9, r0
 80096d4:	d320      	bcc.n	8009718 <_strtol_l.constprop.0+0xc0>
 80096d6:	d101      	bne.n	80096dc <_strtol_l.constprop.0+0x84>
 80096d8:	45a2      	cmp	sl, r4
 80096da:	db1d      	blt.n	8009718 <_strtol_l.constprop.0+0xc0>
 80096dc:	fb00 4003 	mla	r0, r0, r3, r4
 80096e0:	2201      	movs	r2, #1
 80096e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096e6:	e7eb      	b.n	80096c0 <_strtol_l.constprop.0+0x68>
 80096e8:	2c2b      	cmp	r4, #43	@ 0x2b
 80096ea:	bf04      	itt	eq
 80096ec:	782c      	ldrbeq	r4, [r5, #0]
 80096ee:	1c95      	addeq	r5, r2, #2
 80096f0:	e7cf      	b.n	8009692 <_strtol_l.constprop.0+0x3a>
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d1da      	bne.n	80096ac <_strtol_l.constprop.0+0x54>
 80096f6:	2c30      	cmp	r4, #48	@ 0x30
 80096f8:	bf0c      	ite	eq
 80096fa:	2308      	moveq	r3, #8
 80096fc:	230a      	movne	r3, #10
 80096fe:	e7d5      	b.n	80096ac <_strtol_l.constprop.0+0x54>
 8009700:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009704:	2f19      	cmp	r7, #25
 8009706:	d801      	bhi.n	800970c <_strtol_l.constprop.0+0xb4>
 8009708:	3c37      	subs	r4, #55	@ 0x37
 800970a:	e7de      	b.n	80096ca <_strtol_l.constprop.0+0x72>
 800970c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009710:	2f19      	cmp	r7, #25
 8009712:	d804      	bhi.n	800971e <_strtol_l.constprop.0+0xc6>
 8009714:	3c57      	subs	r4, #87	@ 0x57
 8009716:	e7d8      	b.n	80096ca <_strtol_l.constprop.0+0x72>
 8009718:	f04f 32ff 	mov.w	r2, #4294967295
 800971c:	e7e1      	b.n	80096e2 <_strtol_l.constprop.0+0x8a>
 800971e:	1c53      	adds	r3, r2, #1
 8009720:	d108      	bne.n	8009734 <_strtol_l.constprop.0+0xdc>
 8009722:	2322      	movs	r3, #34	@ 0x22
 8009724:	f8ce 3000 	str.w	r3, [lr]
 8009728:	4660      	mov	r0, ip
 800972a:	f1b8 0f00 	cmp.w	r8, #0
 800972e:	d0a0      	beq.n	8009672 <_strtol_l.constprop.0+0x1a>
 8009730:	1e69      	subs	r1, r5, #1
 8009732:	e006      	b.n	8009742 <_strtol_l.constprop.0+0xea>
 8009734:	b106      	cbz	r6, 8009738 <_strtol_l.constprop.0+0xe0>
 8009736:	4240      	negs	r0, r0
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	d099      	beq.n	8009672 <_strtol_l.constprop.0+0x1a>
 800973e:	2a00      	cmp	r2, #0
 8009740:	d1f6      	bne.n	8009730 <_strtol_l.constprop.0+0xd8>
 8009742:	f8c8 1000 	str.w	r1, [r8]
 8009746:	e794      	b.n	8009672 <_strtol_l.constprop.0+0x1a>
 8009748:	0800b1a9 	.word	0x0800b1a9

0800974c <_strtol_r>:
 800974c:	f7ff bf84 	b.w	8009658 <_strtol_l.constprop.0>

08009750 <__ssputs_r>:
 8009750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009754:	688e      	ldr	r6, [r1, #8]
 8009756:	461f      	mov	r7, r3
 8009758:	42be      	cmp	r6, r7
 800975a:	680b      	ldr	r3, [r1, #0]
 800975c:	4682      	mov	sl, r0
 800975e:	460c      	mov	r4, r1
 8009760:	4690      	mov	r8, r2
 8009762:	d82d      	bhi.n	80097c0 <__ssputs_r+0x70>
 8009764:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009768:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800976c:	d026      	beq.n	80097bc <__ssputs_r+0x6c>
 800976e:	6965      	ldr	r5, [r4, #20]
 8009770:	6909      	ldr	r1, [r1, #16]
 8009772:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009776:	eba3 0901 	sub.w	r9, r3, r1
 800977a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800977e:	1c7b      	adds	r3, r7, #1
 8009780:	444b      	add	r3, r9
 8009782:	106d      	asrs	r5, r5, #1
 8009784:	429d      	cmp	r5, r3
 8009786:	bf38      	it	cc
 8009788:	461d      	movcc	r5, r3
 800978a:	0553      	lsls	r3, r2, #21
 800978c:	d527      	bpl.n	80097de <__ssputs_r+0x8e>
 800978e:	4629      	mov	r1, r5
 8009790:	f7fe fc70 	bl	8008074 <_malloc_r>
 8009794:	4606      	mov	r6, r0
 8009796:	b360      	cbz	r0, 80097f2 <__ssputs_r+0xa2>
 8009798:	6921      	ldr	r1, [r4, #16]
 800979a:	464a      	mov	r2, r9
 800979c:	f7fd fe01 	bl	80073a2 <memcpy>
 80097a0:	89a3      	ldrh	r3, [r4, #12]
 80097a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097aa:	81a3      	strh	r3, [r4, #12]
 80097ac:	6126      	str	r6, [r4, #16]
 80097ae:	6165      	str	r5, [r4, #20]
 80097b0:	444e      	add	r6, r9
 80097b2:	eba5 0509 	sub.w	r5, r5, r9
 80097b6:	6026      	str	r6, [r4, #0]
 80097b8:	60a5      	str	r5, [r4, #8]
 80097ba:	463e      	mov	r6, r7
 80097bc:	42be      	cmp	r6, r7
 80097be:	d900      	bls.n	80097c2 <__ssputs_r+0x72>
 80097c0:	463e      	mov	r6, r7
 80097c2:	6820      	ldr	r0, [r4, #0]
 80097c4:	4632      	mov	r2, r6
 80097c6:	4641      	mov	r1, r8
 80097c8:	f000 f9c6 	bl	8009b58 <memmove>
 80097cc:	68a3      	ldr	r3, [r4, #8]
 80097ce:	1b9b      	subs	r3, r3, r6
 80097d0:	60a3      	str	r3, [r4, #8]
 80097d2:	6823      	ldr	r3, [r4, #0]
 80097d4:	4433      	add	r3, r6
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	2000      	movs	r0, #0
 80097da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097de:	462a      	mov	r2, r5
 80097e0:	f000 fd7b 	bl	800a2da <_realloc_r>
 80097e4:	4606      	mov	r6, r0
 80097e6:	2800      	cmp	r0, #0
 80097e8:	d1e0      	bne.n	80097ac <__ssputs_r+0x5c>
 80097ea:	6921      	ldr	r1, [r4, #16]
 80097ec:	4650      	mov	r0, sl
 80097ee:	f7fe fbcd 	bl	8007f8c <_free_r>
 80097f2:	230c      	movs	r3, #12
 80097f4:	f8ca 3000 	str.w	r3, [sl]
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	f04f 30ff 	mov.w	r0, #4294967295
 8009804:	e7e9      	b.n	80097da <__ssputs_r+0x8a>
	...

08009808 <_svfiprintf_r>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	4698      	mov	r8, r3
 800980e:	898b      	ldrh	r3, [r1, #12]
 8009810:	061b      	lsls	r3, r3, #24
 8009812:	b09d      	sub	sp, #116	@ 0x74
 8009814:	4607      	mov	r7, r0
 8009816:	460d      	mov	r5, r1
 8009818:	4614      	mov	r4, r2
 800981a:	d510      	bpl.n	800983e <_svfiprintf_r+0x36>
 800981c:	690b      	ldr	r3, [r1, #16]
 800981e:	b973      	cbnz	r3, 800983e <_svfiprintf_r+0x36>
 8009820:	2140      	movs	r1, #64	@ 0x40
 8009822:	f7fe fc27 	bl	8008074 <_malloc_r>
 8009826:	6028      	str	r0, [r5, #0]
 8009828:	6128      	str	r0, [r5, #16]
 800982a:	b930      	cbnz	r0, 800983a <_svfiprintf_r+0x32>
 800982c:	230c      	movs	r3, #12
 800982e:	603b      	str	r3, [r7, #0]
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	b01d      	add	sp, #116	@ 0x74
 8009836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800983a:	2340      	movs	r3, #64	@ 0x40
 800983c:	616b      	str	r3, [r5, #20]
 800983e:	2300      	movs	r3, #0
 8009840:	9309      	str	r3, [sp, #36]	@ 0x24
 8009842:	2320      	movs	r3, #32
 8009844:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009848:	f8cd 800c 	str.w	r8, [sp, #12]
 800984c:	2330      	movs	r3, #48	@ 0x30
 800984e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80099ec <_svfiprintf_r+0x1e4>
 8009852:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009856:	f04f 0901 	mov.w	r9, #1
 800985a:	4623      	mov	r3, r4
 800985c:	469a      	mov	sl, r3
 800985e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009862:	b10a      	cbz	r2, 8009868 <_svfiprintf_r+0x60>
 8009864:	2a25      	cmp	r2, #37	@ 0x25
 8009866:	d1f9      	bne.n	800985c <_svfiprintf_r+0x54>
 8009868:	ebba 0b04 	subs.w	fp, sl, r4
 800986c:	d00b      	beq.n	8009886 <_svfiprintf_r+0x7e>
 800986e:	465b      	mov	r3, fp
 8009870:	4622      	mov	r2, r4
 8009872:	4629      	mov	r1, r5
 8009874:	4638      	mov	r0, r7
 8009876:	f7ff ff6b 	bl	8009750 <__ssputs_r>
 800987a:	3001      	adds	r0, #1
 800987c:	f000 80a7 	beq.w	80099ce <_svfiprintf_r+0x1c6>
 8009880:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009882:	445a      	add	r2, fp
 8009884:	9209      	str	r2, [sp, #36]	@ 0x24
 8009886:	f89a 3000 	ldrb.w	r3, [sl]
 800988a:	2b00      	cmp	r3, #0
 800988c:	f000 809f 	beq.w	80099ce <_svfiprintf_r+0x1c6>
 8009890:	2300      	movs	r3, #0
 8009892:	f04f 32ff 	mov.w	r2, #4294967295
 8009896:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800989a:	f10a 0a01 	add.w	sl, sl, #1
 800989e:	9304      	str	r3, [sp, #16]
 80098a0:	9307      	str	r3, [sp, #28]
 80098a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80098a8:	4654      	mov	r4, sl
 80098aa:	2205      	movs	r2, #5
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	484e      	ldr	r0, [pc, #312]	@ (80099ec <_svfiprintf_r+0x1e4>)
 80098b2:	f7f6 fd15 	bl	80002e0 <memchr>
 80098b6:	9a04      	ldr	r2, [sp, #16]
 80098b8:	b9d8      	cbnz	r0, 80098f2 <_svfiprintf_r+0xea>
 80098ba:	06d0      	lsls	r0, r2, #27
 80098bc:	bf44      	itt	mi
 80098be:	2320      	movmi	r3, #32
 80098c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098c4:	0711      	lsls	r1, r2, #28
 80098c6:	bf44      	itt	mi
 80098c8:	232b      	movmi	r3, #43	@ 0x2b
 80098ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098ce:	f89a 3000 	ldrb.w	r3, [sl]
 80098d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80098d4:	d015      	beq.n	8009902 <_svfiprintf_r+0xfa>
 80098d6:	9a07      	ldr	r2, [sp, #28]
 80098d8:	4654      	mov	r4, sl
 80098da:	2000      	movs	r0, #0
 80098dc:	f04f 0c0a 	mov.w	ip, #10
 80098e0:	4621      	mov	r1, r4
 80098e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098e6:	3b30      	subs	r3, #48	@ 0x30
 80098e8:	2b09      	cmp	r3, #9
 80098ea:	d94b      	bls.n	8009984 <_svfiprintf_r+0x17c>
 80098ec:	b1b0      	cbz	r0, 800991c <_svfiprintf_r+0x114>
 80098ee:	9207      	str	r2, [sp, #28]
 80098f0:	e014      	b.n	800991c <_svfiprintf_r+0x114>
 80098f2:	eba0 0308 	sub.w	r3, r0, r8
 80098f6:	fa09 f303 	lsl.w	r3, r9, r3
 80098fa:	4313      	orrs	r3, r2
 80098fc:	9304      	str	r3, [sp, #16]
 80098fe:	46a2      	mov	sl, r4
 8009900:	e7d2      	b.n	80098a8 <_svfiprintf_r+0xa0>
 8009902:	9b03      	ldr	r3, [sp, #12]
 8009904:	1d19      	adds	r1, r3, #4
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	9103      	str	r1, [sp, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	bfbb      	ittet	lt
 800990e:	425b      	neglt	r3, r3
 8009910:	f042 0202 	orrlt.w	r2, r2, #2
 8009914:	9307      	strge	r3, [sp, #28]
 8009916:	9307      	strlt	r3, [sp, #28]
 8009918:	bfb8      	it	lt
 800991a:	9204      	strlt	r2, [sp, #16]
 800991c:	7823      	ldrb	r3, [r4, #0]
 800991e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009920:	d10a      	bne.n	8009938 <_svfiprintf_r+0x130>
 8009922:	7863      	ldrb	r3, [r4, #1]
 8009924:	2b2a      	cmp	r3, #42	@ 0x2a
 8009926:	d132      	bne.n	800998e <_svfiprintf_r+0x186>
 8009928:	9b03      	ldr	r3, [sp, #12]
 800992a:	1d1a      	adds	r2, r3, #4
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	9203      	str	r2, [sp, #12]
 8009930:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009934:	3402      	adds	r4, #2
 8009936:	9305      	str	r3, [sp, #20]
 8009938:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80099fc <_svfiprintf_r+0x1f4>
 800993c:	7821      	ldrb	r1, [r4, #0]
 800993e:	2203      	movs	r2, #3
 8009940:	4650      	mov	r0, sl
 8009942:	f7f6 fccd 	bl	80002e0 <memchr>
 8009946:	b138      	cbz	r0, 8009958 <_svfiprintf_r+0x150>
 8009948:	9b04      	ldr	r3, [sp, #16]
 800994a:	eba0 000a 	sub.w	r0, r0, sl
 800994e:	2240      	movs	r2, #64	@ 0x40
 8009950:	4082      	lsls	r2, r0
 8009952:	4313      	orrs	r3, r2
 8009954:	3401      	adds	r4, #1
 8009956:	9304      	str	r3, [sp, #16]
 8009958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995c:	4824      	ldr	r0, [pc, #144]	@ (80099f0 <_svfiprintf_r+0x1e8>)
 800995e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009962:	2206      	movs	r2, #6
 8009964:	f7f6 fcbc 	bl	80002e0 <memchr>
 8009968:	2800      	cmp	r0, #0
 800996a:	d036      	beq.n	80099da <_svfiprintf_r+0x1d2>
 800996c:	4b21      	ldr	r3, [pc, #132]	@ (80099f4 <_svfiprintf_r+0x1ec>)
 800996e:	bb1b      	cbnz	r3, 80099b8 <_svfiprintf_r+0x1b0>
 8009970:	9b03      	ldr	r3, [sp, #12]
 8009972:	3307      	adds	r3, #7
 8009974:	f023 0307 	bic.w	r3, r3, #7
 8009978:	3308      	adds	r3, #8
 800997a:	9303      	str	r3, [sp, #12]
 800997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997e:	4433      	add	r3, r6
 8009980:	9309      	str	r3, [sp, #36]	@ 0x24
 8009982:	e76a      	b.n	800985a <_svfiprintf_r+0x52>
 8009984:	fb0c 3202 	mla	r2, ip, r2, r3
 8009988:	460c      	mov	r4, r1
 800998a:	2001      	movs	r0, #1
 800998c:	e7a8      	b.n	80098e0 <_svfiprintf_r+0xd8>
 800998e:	2300      	movs	r3, #0
 8009990:	3401      	adds	r4, #1
 8009992:	9305      	str	r3, [sp, #20]
 8009994:	4619      	mov	r1, r3
 8009996:	f04f 0c0a 	mov.w	ip, #10
 800999a:	4620      	mov	r0, r4
 800999c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099a0:	3a30      	subs	r2, #48	@ 0x30
 80099a2:	2a09      	cmp	r2, #9
 80099a4:	d903      	bls.n	80099ae <_svfiprintf_r+0x1a6>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d0c6      	beq.n	8009938 <_svfiprintf_r+0x130>
 80099aa:	9105      	str	r1, [sp, #20]
 80099ac:	e7c4      	b.n	8009938 <_svfiprintf_r+0x130>
 80099ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80099b2:	4604      	mov	r4, r0
 80099b4:	2301      	movs	r3, #1
 80099b6:	e7f0      	b.n	800999a <_svfiprintf_r+0x192>
 80099b8:	ab03      	add	r3, sp, #12
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	462a      	mov	r2, r5
 80099be:	4b0e      	ldr	r3, [pc, #56]	@ (80099f8 <_svfiprintf_r+0x1f0>)
 80099c0:	a904      	add	r1, sp, #16
 80099c2:	4638      	mov	r0, r7
 80099c4:	f7fc fd84 	bl	80064d0 <_printf_float>
 80099c8:	1c42      	adds	r2, r0, #1
 80099ca:	4606      	mov	r6, r0
 80099cc:	d1d6      	bne.n	800997c <_svfiprintf_r+0x174>
 80099ce:	89ab      	ldrh	r3, [r5, #12]
 80099d0:	065b      	lsls	r3, r3, #25
 80099d2:	f53f af2d 	bmi.w	8009830 <_svfiprintf_r+0x28>
 80099d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80099d8:	e72c      	b.n	8009834 <_svfiprintf_r+0x2c>
 80099da:	ab03      	add	r3, sp, #12
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	462a      	mov	r2, r5
 80099e0:	4b05      	ldr	r3, [pc, #20]	@ (80099f8 <_svfiprintf_r+0x1f0>)
 80099e2:	a904      	add	r1, sp, #16
 80099e4:	4638      	mov	r0, r7
 80099e6:	f7fc fffb 	bl	80069e0 <_printf_i>
 80099ea:	e7ed      	b.n	80099c8 <_svfiprintf_r+0x1c0>
 80099ec:	0800b2a9 	.word	0x0800b2a9
 80099f0:	0800b2b3 	.word	0x0800b2b3
 80099f4:	080064d1 	.word	0x080064d1
 80099f8:	08009751 	.word	0x08009751
 80099fc:	0800b2af 	.word	0x0800b2af

08009a00 <__sflush_r>:
 8009a00:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009a04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a08:	0716      	lsls	r6, r2, #28
 8009a0a:	4605      	mov	r5, r0
 8009a0c:	460c      	mov	r4, r1
 8009a0e:	d454      	bmi.n	8009aba <__sflush_r+0xba>
 8009a10:	684b      	ldr	r3, [r1, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	dc02      	bgt.n	8009a1c <__sflush_r+0x1c>
 8009a16:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	dd48      	ble.n	8009aae <__sflush_r+0xae>
 8009a1c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a1e:	2e00      	cmp	r6, #0
 8009a20:	d045      	beq.n	8009aae <__sflush_r+0xae>
 8009a22:	2300      	movs	r3, #0
 8009a24:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009a28:	682f      	ldr	r7, [r5, #0]
 8009a2a:	6a21      	ldr	r1, [r4, #32]
 8009a2c:	602b      	str	r3, [r5, #0]
 8009a2e:	d030      	beq.n	8009a92 <__sflush_r+0x92>
 8009a30:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009a32:	89a3      	ldrh	r3, [r4, #12]
 8009a34:	0759      	lsls	r1, r3, #29
 8009a36:	d505      	bpl.n	8009a44 <__sflush_r+0x44>
 8009a38:	6863      	ldr	r3, [r4, #4]
 8009a3a:	1ad2      	subs	r2, r2, r3
 8009a3c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009a3e:	b10b      	cbz	r3, 8009a44 <__sflush_r+0x44>
 8009a40:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	2300      	movs	r3, #0
 8009a46:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009a48:	6a21      	ldr	r1, [r4, #32]
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	47b0      	blx	r6
 8009a4e:	1c43      	adds	r3, r0, #1
 8009a50:	89a3      	ldrh	r3, [r4, #12]
 8009a52:	d106      	bne.n	8009a62 <__sflush_r+0x62>
 8009a54:	6829      	ldr	r1, [r5, #0]
 8009a56:	291d      	cmp	r1, #29
 8009a58:	d82b      	bhi.n	8009ab2 <__sflush_r+0xb2>
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8009b04 <__sflush_r+0x104>)
 8009a5c:	410a      	asrs	r2, r1
 8009a5e:	07d6      	lsls	r6, r2, #31
 8009a60:	d427      	bmi.n	8009ab2 <__sflush_r+0xb2>
 8009a62:	2200      	movs	r2, #0
 8009a64:	6062      	str	r2, [r4, #4]
 8009a66:	04d9      	lsls	r1, r3, #19
 8009a68:	6922      	ldr	r2, [r4, #16]
 8009a6a:	6022      	str	r2, [r4, #0]
 8009a6c:	d504      	bpl.n	8009a78 <__sflush_r+0x78>
 8009a6e:	1c42      	adds	r2, r0, #1
 8009a70:	d101      	bne.n	8009a76 <__sflush_r+0x76>
 8009a72:	682b      	ldr	r3, [r5, #0]
 8009a74:	b903      	cbnz	r3, 8009a78 <__sflush_r+0x78>
 8009a76:	6560      	str	r0, [r4, #84]	@ 0x54
 8009a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009a7a:	602f      	str	r7, [r5, #0]
 8009a7c:	b1b9      	cbz	r1, 8009aae <__sflush_r+0xae>
 8009a7e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a82:	4299      	cmp	r1, r3
 8009a84:	d002      	beq.n	8009a8c <__sflush_r+0x8c>
 8009a86:	4628      	mov	r0, r5
 8009a88:	f7fe fa80 	bl	8007f8c <_free_r>
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a90:	e00d      	b.n	8009aae <__sflush_r+0xae>
 8009a92:	2301      	movs	r3, #1
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b0      	blx	r6
 8009a98:	4602      	mov	r2, r0
 8009a9a:	1c50      	adds	r0, r2, #1
 8009a9c:	d1c9      	bne.n	8009a32 <__sflush_r+0x32>
 8009a9e:	682b      	ldr	r3, [r5, #0]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d0c6      	beq.n	8009a32 <__sflush_r+0x32>
 8009aa4:	2b1d      	cmp	r3, #29
 8009aa6:	d001      	beq.n	8009aac <__sflush_r+0xac>
 8009aa8:	2b16      	cmp	r3, #22
 8009aaa:	d11e      	bne.n	8009aea <__sflush_r+0xea>
 8009aac:	602f      	str	r7, [r5, #0]
 8009aae:	2000      	movs	r0, #0
 8009ab0:	e022      	b.n	8009af8 <__sflush_r+0xf8>
 8009ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ab6:	b21b      	sxth	r3, r3
 8009ab8:	e01b      	b.n	8009af2 <__sflush_r+0xf2>
 8009aba:	690f      	ldr	r7, [r1, #16]
 8009abc:	2f00      	cmp	r7, #0
 8009abe:	d0f6      	beq.n	8009aae <__sflush_r+0xae>
 8009ac0:	0793      	lsls	r3, r2, #30
 8009ac2:	680e      	ldr	r6, [r1, #0]
 8009ac4:	bf08      	it	eq
 8009ac6:	694b      	ldreq	r3, [r1, #20]
 8009ac8:	600f      	str	r7, [r1, #0]
 8009aca:	bf18      	it	ne
 8009acc:	2300      	movne	r3, #0
 8009ace:	eba6 0807 	sub.w	r8, r6, r7
 8009ad2:	608b      	str	r3, [r1, #8]
 8009ad4:	f1b8 0f00 	cmp.w	r8, #0
 8009ad8:	dde9      	ble.n	8009aae <__sflush_r+0xae>
 8009ada:	6a21      	ldr	r1, [r4, #32]
 8009adc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009ade:	4643      	mov	r3, r8
 8009ae0:	463a      	mov	r2, r7
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b0      	blx	r6
 8009ae6:	2800      	cmp	r0, #0
 8009ae8:	dc08      	bgt.n	8009afc <__sflush_r+0xfc>
 8009aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009af2:	81a3      	strh	r3, [r4, #12]
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009afc:	4407      	add	r7, r0
 8009afe:	eba8 0800 	sub.w	r8, r8, r0
 8009b02:	e7e7      	b.n	8009ad4 <__sflush_r+0xd4>
 8009b04:	dfbffffe 	.word	0xdfbffffe

08009b08 <_fflush_r>:
 8009b08:	b538      	push	{r3, r4, r5, lr}
 8009b0a:	690b      	ldr	r3, [r1, #16]
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	460c      	mov	r4, r1
 8009b10:	b913      	cbnz	r3, 8009b18 <_fflush_r+0x10>
 8009b12:	2500      	movs	r5, #0
 8009b14:	4628      	mov	r0, r5
 8009b16:	bd38      	pop	{r3, r4, r5, pc}
 8009b18:	b118      	cbz	r0, 8009b22 <_fflush_r+0x1a>
 8009b1a:	6a03      	ldr	r3, [r0, #32]
 8009b1c:	b90b      	cbnz	r3, 8009b22 <_fflush_r+0x1a>
 8009b1e:	f7fd fb17 	bl	8007150 <__sinit>
 8009b22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d0f3      	beq.n	8009b12 <_fflush_r+0xa>
 8009b2a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009b2c:	07d0      	lsls	r0, r2, #31
 8009b2e:	d404      	bmi.n	8009b3a <_fflush_r+0x32>
 8009b30:	0599      	lsls	r1, r3, #22
 8009b32:	d402      	bmi.n	8009b3a <_fflush_r+0x32>
 8009b34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b36:	f7fd fc32 	bl	800739e <__retarget_lock_acquire_recursive>
 8009b3a:	4628      	mov	r0, r5
 8009b3c:	4621      	mov	r1, r4
 8009b3e:	f7ff ff5f 	bl	8009a00 <__sflush_r>
 8009b42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009b44:	07da      	lsls	r2, r3, #31
 8009b46:	4605      	mov	r5, r0
 8009b48:	d4e4      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b4a:	89a3      	ldrh	r3, [r4, #12]
 8009b4c:	059b      	lsls	r3, r3, #22
 8009b4e:	d4e1      	bmi.n	8009b14 <_fflush_r+0xc>
 8009b50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009b52:	f7fd fc25 	bl	80073a0 <__retarget_lock_release_recursive>
 8009b56:	e7dd      	b.n	8009b14 <_fflush_r+0xc>

08009b58 <memmove>:
 8009b58:	4288      	cmp	r0, r1
 8009b5a:	b510      	push	{r4, lr}
 8009b5c:	eb01 0402 	add.w	r4, r1, r2
 8009b60:	d902      	bls.n	8009b68 <memmove+0x10>
 8009b62:	4284      	cmp	r4, r0
 8009b64:	4623      	mov	r3, r4
 8009b66:	d807      	bhi.n	8009b78 <memmove+0x20>
 8009b68:	1e43      	subs	r3, r0, #1
 8009b6a:	42a1      	cmp	r1, r4
 8009b6c:	d008      	beq.n	8009b80 <memmove+0x28>
 8009b6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009b72:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009b76:	e7f8      	b.n	8009b6a <memmove+0x12>
 8009b78:	4402      	add	r2, r0
 8009b7a:	4601      	mov	r1, r0
 8009b7c:	428a      	cmp	r2, r1
 8009b7e:	d100      	bne.n	8009b82 <memmove+0x2a>
 8009b80:	bd10      	pop	{r4, pc}
 8009b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009b86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009b8a:	e7f7      	b.n	8009b7c <memmove+0x24>

08009b8c <strncmp>:
 8009b8c:	b510      	push	{r4, lr}
 8009b8e:	b16a      	cbz	r2, 8009bac <strncmp+0x20>
 8009b90:	3901      	subs	r1, #1
 8009b92:	1884      	adds	r4, r0, r2
 8009b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b98:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d103      	bne.n	8009ba8 <strncmp+0x1c>
 8009ba0:	42a0      	cmp	r0, r4
 8009ba2:	d001      	beq.n	8009ba8 <strncmp+0x1c>
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	d1f5      	bne.n	8009b94 <strncmp+0x8>
 8009ba8:	1ad0      	subs	r0, r2, r3
 8009baa:	bd10      	pop	{r4, pc}
 8009bac:	4610      	mov	r0, r2
 8009bae:	e7fc      	b.n	8009baa <strncmp+0x1e>

08009bb0 <_sbrk_r>:
 8009bb0:	b538      	push	{r3, r4, r5, lr}
 8009bb2:	4d06      	ldr	r5, [pc, #24]	@ (8009bcc <_sbrk_r+0x1c>)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	4608      	mov	r0, r1
 8009bba:	602b      	str	r3, [r5, #0]
 8009bbc:	f7f7 fca4 	bl	8001508 <_sbrk>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d102      	bne.n	8009bca <_sbrk_r+0x1a>
 8009bc4:	682b      	ldr	r3, [r5, #0]
 8009bc6:	b103      	cbz	r3, 8009bca <_sbrk_r+0x1a>
 8009bc8:	6023      	str	r3, [r4, #0]
 8009bca:	bd38      	pop	{r3, r4, r5, pc}
 8009bcc:	2400086c 	.word	0x2400086c

08009bd0 <nan>:
 8009bd0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009bd8 <nan+0x8>
 8009bd4:	4770      	bx	lr
 8009bd6:	bf00      	nop
 8009bd8:	00000000 	.word	0x00000000
 8009bdc:	7ff80000 	.word	0x7ff80000

08009be0 <__assert_func>:
 8009be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009be2:	4614      	mov	r4, r2
 8009be4:	461a      	mov	r2, r3
 8009be6:	4b09      	ldr	r3, [pc, #36]	@ (8009c0c <__assert_func+0x2c>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4605      	mov	r5, r0
 8009bec:	68d8      	ldr	r0, [r3, #12]
 8009bee:	b954      	cbnz	r4, 8009c06 <__assert_func+0x26>
 8009bf0:	4b07      	ldr	r3, [pc, #28]	@ (8009c10 <__assert_func+0x30>)
 8009bf2:	461c      	mov	r4, r3
 8009bf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009bf8:	9100      	str	r1, [sp, #0]
 8009bfa:	462b      	mov	r3, r5
 8009bfc:	4905      	ldr	r1, [pc, #20]	@ (8009c14 <__assert_func+0x34>)
 8009bfe:	f000 fba7 	bl	800a350 <fiprintf>
 8009c02:	f000 fbb7 	bl	800a374 <abort>
 8009c06:	4b04      	ldr	r3, [pc, #16]	@ (8009c18 <__assert_func+0x38>)
 8009c08:	e7f4      	b.n	8009bf4 <__assert_func+0x14>
 8009c0a:	bf00      	nop
 8009c0c:	2400001c 	.word	0x2400001c
 8009c10:	0800b2fd 	.word	0x0800b2fd
 8009c14:	0800b2cf 	.word	0x0800b2cf
 8009c18:	0800b2c2 	.word	0x0800b2c2

08009c1c <_calloc_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	fba1 5402 	umull	r5, r4, r1, r2
 8009c22:	b93c      	cbnz	r4, 8009c34 <_calloc_r+0x18>
 8009c24:	4629      	mov	r1, r5
 8009c26:	f7fe fa25 	bl	8008074 <_malloc_r>
 8009c2a:	4606      	mov	r6, r0
 8009c2c:	b928      	cbnz	r0, 8009c3a <_calloc_r+0x1e>
 8009c2e:	2600      	movs	r6, #0
 8009c30:	4630      	mov	r0, r6
 8009c32:	bd70      	pop	{r4, r5, r6, pc}
 8009c34:	220c      	movs	r2, #12
 8009c36:	6002      	str	r2, [r0, #0]
 8009c38:	e7f9      	b.n	8009c2e <_calloc_r+0x12>
 8009c3a:	462a      	mov	r2, r5
 8009c3c:	4621      	mov	r1, r4
 8009c3e:	f7fd fb30 	bl	80072a2 <memset>
 8009c42:	e7f5      	b.n	8009c30 <_calloc_r+0x14>

08009c44 <rshift>:
 8009c44:	6903      	ldr	r3, [r0, #16]
 8009c46:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009c4a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009c4e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009c52:	f100 0414 	add.w	r4, r0, #20
 8009c56:	dd45      	ble.n	8009ce4 <rshift+0xa0>
 8009c58:	f011 011f 	ands.w	r1, r1, #31
 8009c5c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009c60:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009c64:	d10c      	bne.n	8009c80 <rshift+0x3c>
 8009c66:	f100 0710 	add.w	r7, r0, #16
 8009c6a:	4629      	mov	r1, r5
 8009c6c:	42b1      	cmp	r1, r6
 8009c6e:	d334      	bcc.n	8009cda <rshift+0x96>
 8009c70:	1a9b      	subs	r3, r3, r2
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	1eea      	subs	r2, r5, #3
 8009c76:	4296      	cmp	r6, r2
 8009c78:	bf38      	it	cc
 8009c7a:	2300      	movcc	r3, #0
 8009c7c:	4423      	add	r3, r4
 8009c7e:	e015      	b.n	8009cac <rshift+0x68>
 8009c80:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c84:	f1c1 0820 	rsb	r8, r1, #32
 8009c88:	40cf      	lsrs	r7, r1
 8009c8a:	f105 0e04 	add.w	lr, r5, #4
 8009c8e:	46a1      	mov	r9, r4
 8009c90:	4576      	cmp	r6, lr
 8009c92:	46f4      	mov	ip, lr
 8009c94:	d815      	bhi.n	8009cc2 <rshift+0x7e>
 8009c96:	1a9a      	subs	r2, r3, r2
 8009c98:	0092      	lsls	r2, r2, #2
 8009c9a:	3a04      	subs	r2, #4
 8009c9c:	3501      	adds	r5, #1
 8009c9e:	42ae      	cmp	r6, r5
 8009ca0:	bf38      	it	cc
 8009ca2:	2200      	movcc	r2, #0
 8009ca4:	18a3      	adds	r3, r4, r2
 8009ca6:	50a7      	str	r7, [r4, r2]
 8009ca8:	b107      	cbz	r7, 8009cac <rshift+0x68>
 8009caa:	3304      	adds	r3, #4
 8009cac:	1b1a      	subs	r2, r3, r4
 8009cae:	42a3      	cmp	r3, r4
 8009cb0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009cb4:	bf08      	it	eq
 8009cb6:	2300      	moveq	r3, #0
 8009cb8:	6102      	str	r2, [r0, #16]
 8009cba:	bf08      	it	eq
 8009cbc:	6143      	streq	r3, [r0, #20]
 8009cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009cc2:	f8dc c000 	ldr.w	ip, [ip]
 8009cc6:	fa0c fc08 	lsl.w	ip, ip, r8
 8009cca:	ea4c 0707 	orr.w	r7, ip, r7
 8009cce:	f849 7b04 	str.w	r7, [r9], #4
 8009cd2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009cd6:	40cf      	lsrs	r7, r1
 8009cd8:	e7da      	b.n	8009c90 <rshift+0x4c>
 8009cda:	f851 cb04 	ldr.w	ip, [r1], #4
 8009cde:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ce2:	e7c3      	b.n	8009c6c <rshift+0x28>
 8009ce4:	4623      	mov	r3, r4
 8009ce6:	e7e1      	b.n	8009cac <rshift+0x68>

08009ce8 <__hexdig_fun>:
 8009ce8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009cec:	2b09      	cmp	r3, #9
 8009cee:	d802      	bhi.n	8009cf6 <__hexdig_fun+0xe>
 8009cf0:	3820      	subs	r0, #32
 8009cf2:	b2c0      	uxtb	r0, r0
 8009cf4:	4770      	bx	lr
 8009cf6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009cfa:	2b05      	cmp	r3, #5
 8009cfc:	d801      	bhi.n	8009d02 <__hexdig_fun+0x1a>
 8009cfe:	3847      	subs	r0, #71	@ 0x47
 8009d00:	e7f7      	b.n	8009cf2 <__hexdig_fun+0xa>
 8009d02:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009d06:	2b05      	cmp	r3, #5
 8009d08:	d801      	bhi.n	8009d0e <__hexdig_fun+0x26>
 8009d0a:	3827      	subs	r0, #39	@ 0x27
 8009d0c:	e7f1      	b.n	8009cf2 <__hexdig_fun+0xa>
 8009d0e:	2000      	movs	r0, #0
 8009d10:	4770      	bx	lr
	...

08009d14 <__gethex>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	b085      	sub	sp, #20
 8009d1a:	468a      	mov	sl, r1
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	680b      	ldr	r3, [r1, #0]
 8009d20:	9001      	str	r0, [sp, #4]
 8009d22:	4690      	mov	r8, r2
 8009d24:	1c9c      	adds	r4, r3, #2
 8009d26:	46a1      	mov	r9, r4
 8009d28:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009d2c:	2830      	cmp	r0, #48	@ 0x30
 8009d2e:	d0fa      	beq.n	8009d26 <__gethex+0x12>
 8009d30:	eba9 0303 	sub.w	r3, r9, r3
 8009d34:	f1a3 0b02 	sub.w	fp, r3, #2
 8009d38:	f7ff ffd6 	bl	8009ce8 <__hexdig_fun>
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	d168      	bne.n	8009e14 <__gethex+0x100>
 8009d42:	49a0      	ldr	r1, [pc, #640]	@ (8009fc4 <__gethex+0x2b0>)
 8009d44:	2201      	movs	r2, #1
 8009d46:	4648      	mov	r0, r9
 8009d48:	f7ff ff20 	bl	8009b8c <strncmp>
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d167      	bne.n	8009e22 <__gethex+0x10e>
 8009d52:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009d56:	4626      	mov	r6, r4
 8009d58:	f7ff ffc6 	bl	8009ce8 <__hexdig_fun>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d062      	beq.n	8009e26 <__gethex+0x112>
 8009d60:	4623      	mov	r3, r4
 8009d62:	7818      	ldrb	r0, [r3, #0]
 8009d64:	2830      	cmp	r0, #48	@ 0x30
 8009d66:	4699      	mov	r9, r3
 8009d68:	f103 0301 	add.w	r3, r3, #1
 8009d6c:	d0f9      	beq.n	8009d62 <__gethex+0x4e>
 8009d6e:	f7ff ffbb 	bl	8009ce8 <__hexdig_fun>
 8009d72:	fab0 f580 	clz	r5, r0
 8009d76:	096d      	lsrs	r5, r5, #5
 8009d78:	f04f 0b01 	mov.w	fp, #1
 8009d7c:	464a      	mov	r2, r9
 8009d7e:	4616      	mov	r6, r2
 8009d80:	3201      	adds	r2, #1
 8009d82:	7830      	ldrb	r0, [r6, #0]
 8009d84:	f7ff ffb0 	bl	8009ce8 <__hexdig_fun>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	d1f8      	bne.n	8009d7e <__gethex+0x6a>
 8009d8c:	498d      	ldr	r1, [pc, #564]	@ (8009fc4 <__gethex+0x2b0>)
 8009d8e:	2201      	movs	r2, #1
 8009d90:	4630      	mov	r0, r6
 8009d92:	f7ff fefb 	bl	8009b8c <strncmp>
 8009d96:	2800      	cmp	r0, #0
 8009d98:	d13f      	bne.n	8009e1a <__gethex+0x106>
 8009d9a:	b944      	cbnz	r4, 8009dae <__gethex+0x9a>
 8009d9c:	1c74      	adds	r4, r6, #1
 8009d9e:	4622      	mov	r2, r4
 8009da0:	4616      	mov	r6, r2
 8009da2:	3201      	adds	r2, #1
 8009da4:	7830      	ldrb	r0, [r6, #0]
 8009da6:	f7ff ff9f 	bl	8009ce8 <__hexdig_fun>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d1f8      	bne.n	8009da0 <__gethex+0x8c>
 8009dae:	1ba4      	subs	r4, r4, r6
 8009db0:	00a7      	lsls	r7, r4, #2
 8009db2:	7833      	ldrb	r3, [r6, #0]
 8009db4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009db8:	2b50      	cmp	r3, #80	@ 0x50
 8009dba:	d13e      	bne.n	8009e3a <__gethex+0x126>
 8009dbc:	7873      	ldrb	r3, [r6, #1]
 8009dbe:	2b2b      	cmp	r3, #43	@ 0x2b
 8009dc0:	d033      	beq.n	8009e2a <__gethex+0x116>
 8009dc2:	2b2d      	cmp	r3, #45	@ 0x2d
 8009dc4:	d034      	beq.n	8009e30 <__gethex+0x11c>
 8009dc6:	1c71      	adds	r1, r6, #1
 8009dc8:	2400      	movs	r4, #0
 8009dca:	7808      	ldrb	r0, [r1, #0]
 8009dcc:	f7ff ff8c 	bl	8009ce8 <__hexdig_fun>
 8009dd0:	1e43      	subs	r3, r0, #1
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	2b18      	cmp	r3, #24
 8009dd6:	d830      	bhi.n	8009e3a <__gethex+0x126>
 8009dd8:	f1a0 0210 	sub.w	r2, r0, #16
 8009ddc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009de0:	f7ff ff82 	bl	8009ce8 <__hexdig_fun>
 8009de4:	f100 3cff 	add.w	ip, r0, #4294967295
 8009de8:	fa5f fc8c 	uxtb.w	ip, ip
 8009dec:	f1bc 0f18 	cmp.w	ip, #24
 8009df0:	f04f 030a 	mov.w	r3, #10
 8009df4:	d91e      	bls.n	8009e34 <__gethex+0x120>
 8009df6:	b104      	cbz	r4, 8009dfa <__gethex+0xe6>
 8009df8:	4252      	negs	r2, r2
 8009dfa:	4417      	add	r7, r2
 8009dfc:	f8ca 1000 	str.w	r1, [sl]
 8009e00:	b1ed      	cbz	r5, 8009e3e <__gethex+0x12a>
 8009e02:	f1bb 0f00 	cmp.w	fp, #0
 8009e06:	bf0c      	ite	eq
 8009e08:	2506      	moveq	r5, #6
 8009e0a:	2500      	movne	r5, #0
 8009e0c:	4628      	mov	r0, r5
 8009e0e:	b005      	add	sp, #20
 8009e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e14:	2500      	movs	r5, #0
 8009e16:	462c      	mov	r4, r5
 8009e18:	e7b0      	b.n	8009d7c <__gethex+0x68>
 8009e1a:	2c00      	cmp	r4, #0
 8009e1c:	d1c7      	bne.n	8009dae <__gethex+0x9a>
 8009e1e:	4627      	mov	r7, r4
 8009e20:	e7c7      	b.n	8009db2 <__gethex+0x9e>
 8009e22:	464e      	mov	r6, r9
 8009e24:	462f      	mov	r7, r5
 8009e26:	2501      	movs	r5, #1
 8009e28:	e7c3      	b.n	8009db2 <__gethex+0x9e>
 8009e2a:	2400      	movs	r4, #0
 8009e2c:	1cb1      	adds	r1, r6, #2
 8009e2e:	e7cc      	b.n	8009dca <__gethex+0xb6>
 8009e30:	2401      	movs	r4, #1
 8009e32:	e7fb      	b.n	8009e2c <__gethex+0x118>
 8009e34:	fb03 0002 	mla	r0, r3, r2, r0
 8009e38:	e7ce      	b.n	8009dd8 <__gethex+0xc4>
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	e7de      	b.n	8009dfc <__gethex+0xe8>
 8009e3e:	eba6 0309 	sub.w	r3, r6, r9
 8009e42:	3b01      	subs	r3, #1
 8009e44:	4629      	mov	r1, r5
 8009e46:	2b07      	cmp	r3, #7
 8009e48:	dc0a      	bgt.n	8009e60 <__gethex+0x14c>
 8009e4a:	9801      	ldr	r0, [sp, #4]
 8009e4c:	f7fe f99e 	bl	800818c <_Balloc>
 8009e50:	4604      	mov	r4, r0
 8009e52:	b940      	cbnz	r0, 8009e66 <__gethex+0x152>
 8009e54:	4b5c      	ldr	r3, [pc, #368]	@ (8009fc8 <__gethex+0x2b4>)
 8009e56:	4602      	mov	r2, r0
 8009e58:	21e4      	movs	r1, #228	@ 0xe4
 8009e5a:	485c      	ldr	r0, [pc, #368]	@ (8009fcc <__gethex+0x2b8>)
 8009e5c:	f7ff fec0 	bl	8009be0 <__assert_func>
 8009e60:	3101      	adds	r1, #1
 8009e62:	105b      	asrs	r3, r3, #1
 8009e64:	e7ef      	b.n	8009e46 <__gethex+0x132>
 8009e66:	f100 0a14 	add.w	sl, r0, #20
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	4655      	mov	r5, sl
 8009e6e:	469b      	mov	fp, r3
 8009e70:	45b1      	cmp	r9, r6
 8009e72:	d337      	bcc.n	8009ee4 <__gethex+0x1d0>
 8009e74:	f845 bb04 	str.w	fp, [r5], #4
 8009e78:	eba5 050a 	sub.w	r5, r5, sl
 8009e7c:	10ad      	asrs	r5, r5, #2
 8009e7e:	6125      	str	r5, [r4, #16]
 8009e80:	4658      	mov	r0, fp
 8009e82:	f7fe fa75 	bl	8008370 <__hi0bits>
 8009e86:	016d      	lsls	r5, r5, #5
 8009e88:	f8d8 6000 	ldr.w	r6, [r8]
 8009e8c:	1a2d      	subs	r5, r5, r0
 8009e8e:	42b5      	cmp	r5, r6
 8009e90:	dd54      	ble.n	8009f3c <__gethex+0x228>
 8009e92:	1bad      	subs	r5, r5, r6
 8009e94:	4629      	mov	r1, r5
 8009e96:	4620      	mov	r0, r4
 8009e98:	f7fe fe06 	bl	8008aa8 <__any_on>
 8009e9c:	4681      	mov	r9, r0
 8009e9e:	b178      	cbz	r0, 8009ec0 <__gethex+0x1ac>
 8009ea0:	1e6b      	subs	r3, r5, #1
 8009ea2:	1159      	asrs	r1, r3, #5
 8009ea4:	f003 021f 	and.w	r2, r3, #31
 8009ea8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009eac:	f04f 0901 	mov.w	r9, #1
 8009eb0:	fa09 f202 	lsl.w	r2, r9, r2
 8009eb4:	420a      	tst	r2, r1
 8009eb6:	d003      	beq.n	8009ec0 <__gethex+0x1ac>
 8009eb8:	454b      	cmp	r3, r9
 8009eba:	dc36      	bgt.n	8009f2a <__gethex+0x216>
 8009ebc:	f04f 0902 	mov.w	r9, #2
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4620      	mov	r0, r4
 8009ec4:	f7ff febe 	bl	8009c44 <rshift>
 8009ec8:	442f      	add	r7, r5
 8009eca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ece:	42bb      	cmp	r3, r7
 8009ed0:	da42      	bge.n	8009f58 <__gethex+0x244>
 8009ed2:	9801      	ldr	r0, [sp, #4]
 8009ed4:	4621      	mov	r1, r4
 8009ed6:	f7fe f999 	bl	800820c <_Bfree>
 8009eda:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009edc:	2300      	movs	r3, #0
 8009ede:	6013      	str	r3, [r2, #0]
 8009ee0:	25a3      	movs	r5, #163	@ 0xa3
 8009ee2:	e793      	b.n	8009e0c <__gethex+0xf8>
 8009ee4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009ee8:	2a2e      	cmp	r2, #46	@ 0x2e
 8009eea:	d012      	beq.n	8009f12 <__gethex+0x1fe>
 8009eec:	2b20      	cmp	r3, #32
 8009eee:	d104      	bne.n	8009efa <__gethex+0x1e6>
 8009ef0:	f845 bb04 	str.w	fp, [r5], #4
 8009ef4:	f04f 0b00 	mov.w	fp, #0
 8009ef8:	465b      	mov	r3, fp
 8009efa:	7830      	ldrb	r0, [r6, #0]
 8009efc:	9303      	str	r3, [sp, #12]
 8009efe:	f7ff fef3 	bl	8009ce8 <__hexdig_fun>
 8009f02:	9b03      	ldr	r3, [sp, #12]
 8009f04:	f000 000f 	and.w	r0, r0, #15
 8009f08:	4098      	lsls	r0, r3
 8009f0a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009f0e:	3304      	adds	r3, #4
 8009f10:	e7ae      	b.n	8009e70 <__gethex+0x15c>
 8009f12:	45b1      	cmp	r9, r6
 8009f14:	d8ea      	bhi.n	8009eec <__gethex+0x1d8>
 8009f16:	492b      	ldr	r1, [pc, #172]	@ (8009fc4 <__gethex+0x2b0>)
 8009f18:	9303      	str	r3, [sp, #12]
 8009f1a:	2201      	movs	r2, #1
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	f7ff fe35 	bl	8009b8c <strncmp>
 8009f22:	9b03      	ldr	r3, [sp, #12]
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1e1      	bne.n	8009eec <__gethex+0x1d8>
 8009f28:	e7a2      	b.n	8009e70 <__gethex+0x15c>
 8009f2a:	1ea9      	subs	r1, r5, #2
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f7fe fdbb 	bl	8008aa8 <__any_on>
 8009f32:	2800      	cmp	r0, #0
 8009f34:	d0c2      	beq.n	8009ebc <__gethex+0x1a8>
 8009f36:	f04f 0903 	mov.w	r9, #3
 8009f3a:	e7c1      	b.n	8009ec0 <__gethex+0x1ac>
 8009f3c:	da09      	bge.n	8009f52 <__gethex+0x23e>
 8009f3e:	1b75      	subs	r5, r6, r5
 8009f40:	4621      	mov	r1, r4
 8009f42:	9801      	ldr	r0, [sp, #4]
 8009f44:	462a      	mov	r2, r5
 8009f46:	f7fe fb79 	bl	800863c <__lshift>
 8009f4a:	1b7f      	subs	r7, r7, r5
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	f100 0a14 	add.w	sl, r0, #20
 8009f52:	f04f 0900 	mov.w	r9, #0
 8009f56:	e7b8      	b.n	8009eca <__gethex+0x1b6>
 8009f58:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009f5c:	42bd      	cmp	r5, r7
 8009f5e:	dd6f      	ble.n	800a040 <__gethex+0x32c>
 8009f60:	1bed      	subs	r5, r5, r7
 8009f62:	42ae      	cmp	r6, r5
 8009f64:	dc34      	bgt.n	8009fd0 <__gethex+0x2bc>
 8009f66:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d022      	beq.n	8009fb4 <__gethex+0x2a0>
 8009f6e:	2b03      	cmp	r3, #3
 8009f70:	d024      	beq.n	8009fbc <__gethex+0x2a8>
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d115      	bne.n	8009fa2 <__gethex+0x28e>
 8009f76:	42ae      	cmp	r6, r5
 8009f78:	d113      	bne.n	8009fa2 <__gethex+0x28e>
 8009f7a:	2e01      	cmp	r6, #1
 8009f7c:	d10b      	bne.n	8009f96 <__gethex+0x282>
 8009f7e:	9a02      	ldr	r2, [sp, #8]
 8009f80:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	2301      	movs	r3, #1
 8009f88:	6123      	str	r3, [r4, #16]
 8009f8a:	f8ca 3000 	str.w	r3, [sl]
 8009f8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f90:	2562      	movs	r5, #98	@ 0x62
 8009f92:	601c      	str	r4, [r3, #0]
 8009f94:	e73a      	b.n	8009e0c <__gethex+0xf8>
 8009f96:	1e71      	subs	r1, r6, #1
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f7fe fd85 	bl	8008aa8 <__any_on>
 8009f9e:	2800      	cmp	r0, #0
 8009fa0:	d1ed      	bne.n	8009f7e <__gethex+0x26a>
 8009fa2:	9801      	ldr	r0, [sp, #4]
 8009fa4:	4621      	mov	r1, r4
 8009fa6:	f7fe f931 	bl	800820c <_Bfree>
 8009faa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009fac:	2300      	movs	r3, #0
 8009fae:	6013      	str	r3, [r2, #0]
 8009fb0:	2550      	movs	r5, #80	@ 0x50
 8009fb2:	e72b      	b.n	8009e0c <__gethex+0xf8>
 8009fb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d1f3      	bne.n	8009fa2 <__gethex+0x28e>
 8009fba:	e7e0      	b.n	8009f7e <__gethex+0x26a>
 8009fbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1dd      	bne.n	8009f7e <__gethex+0x26a>
 8009fc2:	e7ee      	b.n	8009fa2 <__gethex+0x28e>
 8009fc4:	0800b150 	.word	0x0800b150
 8009fc8:	0800afe9 	.word	0x0800afe9
 8009fcc:	0800b2fe 	.word	0x0800b2fe
 8009fd0:	1e6f      	subs	r7, r5, #1
 8009fd2:	f1b9 0f00 	cmp.w	r9, #0
 8009fd6:	d130      	bne.n	800a03a <__gethex+0x326>
 8009fd8:	b127      	cbz	r7, 8009fe4 <__gethex+0x2d0>
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f7fe fd63 	bl	8008aa8 <__any_on>
 8009fe2:	4681      	mov	r9, r0
 8009fe4:	117a      	asrs	r2, r7, #5
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009fec:	f007 071f 	and.w	r7, r7, #31
 8009ff0:	40bb      	lsls	r3, r7
 8009ff2:	4213      	tst	r3, r2
 8009ff4:	4629      	mov	r1, r5
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	bf18      	it	ne
 8009ffa:	f049 0902 	orrne.w	r9, r9, #2
 8009ffe:	f7ff fe21 	bl	8009c44 <rshift>
 800a002:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a006:	1b76      	subs	r6, r6, r5
 800a008:	2502      	movs	r5, #2
 800a00a:	f1b9 0f00 	cmp.w	r9, #0
 800a00e:	d047      	beq.n	800a0a0 <__gethex+0x38c>
 800a010:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a014:	2b02      	cmp	r3, #2
 800a016:	d015      	beq.n	800a044 <__gethex+0x330>
 800a018:	2b03      	cmp	r3, #3
 800a01a:	d017      	beq.n	800a04c <__gethex+0x338>
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d109      	bne.n	800a034 <__gethex+0x320>
 800a020:	f019 0f02 	tst.w	r9, #2
 800a024:	d006      	beq.n	800a034 <__gethex+0x320>
 800a026:	f8da 3000 	ldr.w	r3, [sl]
 800a02a:	ea49 0903 	orr.w	r9, r9, r3
 800a02e:	f019 0f01 	tst.w	r9, #1
 800a032:	d10e      	bne.n	800a052 <__gethex+0x33e>
 800a034:	f045 0510 	orr.w	r5, r5, #16
 800a038:	e032      	b.n	800a0a0 <__gethex+0x38c>
 800a03a:	f04f 0901 	mov.w	r9, #1
 800a03e:	e7d1      	b.n	8009fe4 <__gethex+0x2d0>
 800a040:	2501      	movs	r5, #1
 800a042:	e7e2      	b.n	800a00a <__gethex+0x2f6>
 800a044:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a046:	f1c3 0301 	rsb	r3, r3, #1
 800a04a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a04c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d0f0      	beq.n	800a034 <__gethex+0x320>
 800a052:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a056:	f104 0314 	add.w	r3, r4, #20
 800a05a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a05e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a062:	f04f 0c00 	mov.w	ip, #0
 800a066:	4618      	mov	r0, r3
 800a068:	f853 2b04 	ldr.w	r2, [r3], #4
 800a06c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a070:	d01b      	beq.n	800a0aa <__gethex+0x396>
 800a072:	3201      	adds	r2, #1
 800a074:	6002      	str	r2, [r0, #0]
 800a076:	2d02      	cmp	r5, #2
 800a078:	f104 0314 	add.w	r3, r4, #20
 800a07c:	d13c      	bne.n	800a0f8 <__gethex+0x3e4>
 800a07e:	f8d8 2000 	ldr.w	r2, [r8]
 800a082:	3a01      	subs	r2, #1
 800a084:	42b2      	cmp	r2, r6
 800a086:	d109      	bne.n	800a09c <__gethex+0x388>
 800a088:	1171      	asrs	r1, r6, #5
 800a08a:	2201      	movs	r2, #1
 800a08c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a090:	f006 061f 	and.w	r6, r6, #31
 800a094:	fa02 f606 	lsl.w	r6, r2, r6
 800a098:	421e      	tst	r6, r3
 800a09a:	d13a      	bne.n	800a112 <__gethex+0x3fe>
 800a09c:	f045 0520 	orr.w	r5, r5, #32
 800a0a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a2:	601c      	str	r4, [r3, #0]
 800a0a4:	9b02      	ldr	r3, [sp, #8]
 800a0a6:	601f      	str	r7, [r3, #0]
 800a0a8:	e6b0      	b.n	8009e0c <__gethex+0xf8>
 800a0aa:	4299      	cmp	r1, r3
 800a0ac:	f843 cc04 	str.w	ip, [r3, #-4]
 800a0b0:	d8d9      	bhi.n	800a066 <__gethex+0x352>
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	459b      	cmp	fp, r3
 800a0b6:	db17      	blt.n	800a0e8 <__gethex+0x3d4>
 800a0b8:	6861      	ldr	r1, [r4, #4]
 800a0ba:	9801      	ldr	r0, [sp, #4]
 800a0bc:	3101      	adds	r1, #1
 800a0be:	f7fe f865 	bl	800818c <_Balloc>
 800a0c2:	4681      	mov	r9, r0
 800a0c4:	b918      	cbnz	r0, 800a0ce <__gethex+0x3ba>
 800a0c6:	4b1a      	ldr	r3, [pc, #104]	@ (800a130 <__gethex+0x41c>)
 800a0c8:	4602      	mov	r2, r0
 800a0ca:	2184      	movs	r1, #132	@ 0x84
 800a0cc:	e6c5      	b.n	8009e5a <__gethex+0x146>
 800a0ce:	6922      	ldr	r2, [r4, #16]
 800a0d0:	3202      	adds	r2, #2
 800a0d2:	f104 010c 	add.w	r1, r4, #12
 800a0d6:	0092      	lsls	r2, r2, #2
 800a0d8:	300c      	adds	r0, #12
 800a0da:	f7fd f962 	bl	80073a2 <memcpy>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	9801      	ldr	r0, [sp, #4]
 800a0e2:	f7fe f893 	bl	800820c <_Bfree>
 800a0e6:	464c      	mov	r4, r9
 800a0e8:	6923      	ldr	r3, [r4, #16]
 800a0ea:	1c5a      	adds	r2, r3, #1
 800a0ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0f0:	6122      	str	r2, [r4, #16]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	615a      	str	r2, [r3, #20]
 800a0f6:	e7be      	b.n	800a076 <__gethex+0x362>
 800a0f8:	6922      	ldr	r2, [r4, #16]
 800a0fa:	455a      	cmp	r2, fp
 800a0fc:	dd0b      	ble.n	800a116 <__gethex+0x402>
 800a0fe:	2101      	movs	r1, #1
 800a100:	4620      	mov	r0, r4
 800a102:	f7ff fd9f 	bl	8009c44 <rshift>
 800a106:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a10a:	3701      	adds	r7, #1
 800a10c:	42bb      	cmp	r3, r7
 800a10e:	f6ff aee0 	blt.w	8009ed2 <__gethex+0x1be>
 800a112:	2501      	movs	r5, #1
 800a114:	e7c2      	b.n	800a09c <__gethex+0x388>
 800a116:	f016 061f 	ands.w	r6, r6, #31
 800a11a:	d0fa      	beq.n	800a112 <__gethex+0x3fe>
 800a11c:	4453      	add	r3, sl
 800a11e:	f1c6 0620 	rsb	r6, r6, #32
 800a122:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a126:	f7fe f923 	bl	8008370 <__hi0bits>
 800a12a:	42b0      	cmp	r0, r6
 800a12c:	dbe7      	blt.n	800a0fe <__gethex+0x3ea>
 800a12e:	e7f0      	b.n	800a112 <__gethex+0x3fe>
 800a130:	0800afe9 	.word	0x0800afe9

0800a134 <L_shift>:
 800a134:	f1c2 0208 	rsb	r2, r2, #8
 800a138:	0092      	lsls	r2, r2, #2
 800a13a:	b570      	push	{r4, r5, r6, lr}
 800a13c:	f1c2 0620 	rsb	r6, r2, #32
 800a140:	6843      	ldr	r3, [r0, #4]
 800a142:	6804      	ldr	r4, [r0, #0]
 800a144:	fa03 f506 	lsl.w	r5, r3, r6
 800a148:	432c      	orrs	r4, r5
 800a14a:	40d3      	lsrs	r3, r2
 800a14c:	6004      	str	r4, [r0, #0]
 800a14e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a152:	4288      	cmp	r0, r1
 800a154:	d3f4      	bcc.n	800a140 <L_shift+0xc>
 800a156:	bd70      	pop	{r4, r5, r6, pc}

0800a158 <__match>:
 800a158:	b530      	push	{r4, r5, lr}
 800a15a:	6803      	ldr	r3, [r0, #0]
 800a15c:	3301      	adds	r3, #1
 800a15e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a162:	b914      	cbnz	r4, 800a16a <__match+0x12>
 800a164:	6003      	str	r3, [r0, #0]
 800a166:	2001      	movs	r0, #1
 800a168:	bd30      	pop	{r4, r5, pc}
 800a16a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a16e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a172:	2d19      	cmp	r5, #25
 800a174:	bf98      	it	ls
 800a176:	3220      	addls	r2, #32
 800a178:	42a2      	cmp	r2, r4
 800a17a:	d0f0      	beq.n	800a15e <__match+0x6>
 800a17c:	2000      	movs	r0, #0
 800a17e:	e7f3      	b.n	800a168 <__match+0x10>

0800a180 <__hexnan>:
 800a180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a184:	680b      	ldr	r3, [r1, #0]
 800a186:	6801      	ldr	r1, [r0, #0]
 800a188:	115e      	asrs	r6, r3, #5
 800a18a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a18e:	f013 031f 	ands.w	r3, r3, #31
 800a192:	b087      	sub	sp, #28
 800a194:	bf18      	it	ne
 800a196:	3604      	addne	r6, #4
 800a198:	2500      	movs	r5, #0
 800a19a:	1f37      	subs	r7, r6, #4
 800a19c:	4682      	mov	sl, r0
 800a19e:	4690      	mov	r8, r2
 800a1a0:	9301      	str	r3, [sp, #4]
 800a1a2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a1a6:	46b9      	mov	r9, r7
 800a1a8:	463c      	mov	r4, r7
 800a1aa:	9502      	str	r5, [sp, #8]
 800a1ac:	46ab      	mov	fp, r5
 800a1ae:	784a      	ldrb	r2, [r1, #1]
 800a1b0:	1c4b      	adds	r3, r1, #1
 800a1b2:	9303      	str	r3, [sp, #12]
 800a1b4:	b342      	cbz	r2, 800a208 <__hexnan+0x88>
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	9105      	str	r1, [sp, #20]
 800a1ba:	9204      	str	r2, [sp, #16]
 800a1bc:	f7ff fd94 	bl	8009ce8 <__hexdig_fun>
 800a1c0:	2800      	cmp	r0, #0
 800a1c2:	d151      	bne.n	800a268 <__hexnan+0xe8>
 800a1c4:	9a04      	ldr	r2, [sp, #16]
 800a1c6:	9905      	ldr	r1, [sp, #20]
 800a1c8:	2a20      	cmp	r2, #32
 800a1ca:	d818      	bhi.n	800a1fe <__hexnan+0x7e>
 800a1cc:	9b02      	ldr	r3, [sp, #8]
 800a1ce:	459b      	cmp	fp, r3
 800a1d0:	dd13      	ble.n	800a1fa <__hexnan+0x7a>
 800a1d2:	454c      	cmp	r4, r9
 800a1d4:	d206      	bcs.n	800a1e4 <__hexnan+0x64>
 800a1d6:	2d07      	cmp	r5, #7
 800a1d8:	dc04      	bgt.n	800a1e4 <__hexnan+0x64>
 800a1da:	462a      	mov	r2, r5
 800a1dc:	4649      	mov	r1, r9
 800a1de:	4620      	mov	r0, r4
 800a1e0:	f7ff ffa8 	bl	800a134 <L_shift>
 800a1e4:	4544      	cmp	r4, r8
 800a1e6:	d952      	bls.n	800a28e <__hexnan+0x10e>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	f1a4 0904 	sub.w	r9, r4, #4
 800a1ee:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1f2:	f8cd b008 	str.w	fp, [sp, #8]
 800a1f6:	464c      	mov	r4, r9
 800a1f8:	461d      	mov	r5, r3
 800a1fa:	9903      	ldr	r1, [sp, #12]
 800a1fc:	e7d7      	b.n	800a1ae <__hexnan+0x2e>
 800a1fe:	2a29      	cmp	r2, #41	@ 0x29
 800a200:	d157      	bne.n	800a2b2 <__hexnan+0x132>
 800a202:	3102      	adds	r1, #2
 800a204:	f8ca 1000 	str.w	r1, [sl]
 800a208:	f1bb 0f00 	cmp.w	fp, #0
 800a20c:	d051      	beq.n	800a2b2 <__hexnan+0x132>
 800a20e:	454c      	cmp	r4, r9
 800a210:	d206      	bcs.n	800a220 <__hexnan+0xa0>
 800a212:	2d07      	cmp	r5, #7
 800a214:	dc04      	bgt.n	800a220 <__hexnan+0xa0>
 800a216:	462a      	mov	r2, r5
 800a218:	4649      	mov	r1, r9
 800a21a:	4620      	mov	r0, r4
 800a21c:	f7ff ff8a 	bl	800a134 <L_shift>
 800a220:	4544      	cmp	r4, r8
 800a222:	d936      	bls.n	800a292 <__hexnan+0x112>
 800a224:	f1a8 0204 	sub.w	r2, r8, #4
 800a228:	4623      	mov	r3, r4
 800a22a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a22e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a232:	429f      	cmp	r7, r3
 800a234:	d2f9      	bcs.n	800a22a <__hexnan+0xaa>
 800a236:	1b3b      	subs	r3, r7, r4
 800a238:	f023 0303 	bic.w	r3, r3, #3
 800a23c:	3304      	adds	r3, #4
 800a23e:	3401      	adds	r4, #1
 800a240:	3e03      	subs	r6, #3
 800a242:	42b4      	cmp	r4, r6
 800a244:	bf88      	it	hi
 800a246:	2304      	movhi	r3, #4
 800a248:	4443      	add	r3, r8
 800a24a:	2200      	movs	r2, #0
 800a24c:	f843 2b04 	str.w	r2, [r3], #4
 800a250:	429f      	cmp	r7, r3
 800a252:	d2fb      	bcs.n	800a24c <__hexnan+0xcc>
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	b91b      	cbnz	r3, 800a260 <__hexnan+0xe0>
 800a258:	4547      	cmp	r7, r8
 800a25a:	d128      	bne.n	800a2ae <__hexnan+0x12e>
 800a25c:	2301      	movs	r3, #1
 800a25e:	603b      	str	r3, [r7, #0]
 800a260:	2005      	movs	r0, #5
 800a262:	b007      	add	sp, #28
 800a264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a268:	3501      	adds	r5, #1
 800a26a:	2d08      	cmp	r5, #8
 800a26c:	f10b 0b01 	add.w	fp, fp, #1
 800a270:	dd06      	ble.n	800a280 <__hexnan+0x100>
 800a272:	4544      	cmp	r4, r8
 800a274:	d9c1      	bls.n	800a1fa <__hexnan+0x7a>
 800a276:	2300      	movs	r3, #0
 800a278:	f844 3c04 	str.w	r3, [r4, #-4]
 800a27c:	2501      	movs	r5, #1
 800a27e:	3c04      	subs	r4, #4
 800a280:	6822      	ldr	r2, [r4, #0]
 800a282:	f000 000f 	and.w	r0, r0, #15
 800a286:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a28a:	6020      	str	r0, [r4, #0]
 800a28c:	e7b5      	b.n	800a1fa <__hexnan+0x7a>
 800a28e:	2508      	movs	r5, #8
 800a290:	e7b3      	b.n	800a1fa <__hexnan+0x7a>
 800a292:	9b01      	ldr	r3, [sp, #4]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d0dd      	beq.n	800a254 <__hexnan+0xd4>
 800a298:	f1c3 0320 	rsb	r3, r3, #32
 800a29c:	f04f 32ff 	mov.w	r2, #4294967295
 800a2a0:	40da      	lsrs	r2, r3
 800a2a2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a2a6:	4013      	ands	r3, r2
 800a2a8:	f846 3c04 	str.w	r3, [r6, #-4]
 800a2ac:	e7d2      	b.n	800a254 <__hexnan+0xd4>
 800a2ae:	3f04      	subs	r7, #4
 800a2b0:	e7d0      	b.n	800a254 <__hexnan+0xd4>
 800a2b2:	2004      	movs	r0, #4
 800a2b4:	e7d5      	b.n	800a262 <__hexnan+0xe2>

0800a2b6 <__ascii_mbtowc>:
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	b901      	cbnz	r1, 800a2bc <__ascii_mbtowc+0x6>
 800a2ba:	a901      	add	r1, sp, #4
 800a2bc:	b142      	cbz	r2, 800a2d0 <__ascii_mbtowc+0x1a>
 800a2be:	b14b      	cbz	r3, 800a2d4 <__ascii_mbtowc+0x1e>
 800a2c0:	7813      	ldrb	r3, [r2, #0]
 800a2c2:	600b      	str	r3, [r1, #0]
 800a2c4:	7812      	ldrb	r2, [r2, #0]
 800a2c6:	1e10      	subs	r0, r2, #0
 800a2c8:	bf18      	it	ne
 800a2ca:	2001      	movne	r0, #1
 800a2cc:	b002      	add	sp, #8
 800a2ce:	4770      	bx	lr
 800a2d0:	4610      	mov	r0, r2
 800a2d2:	e7fb      	b.n	800a2cc <__ascii_mbtowc+0x16>
 800a2d4:	f06f 0001 	mvn.w	r0, #1
 800a2d8:	e7f8      	b.n	800a2cc <__ascii_mbtowc+0x16>

0800a2da <_realloc_r>:
 800a2da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2de:	4680      	mov	r8, r0
 800a2e0:	4615      	mov	r5, r2
 800a2e2:	460c      	mov	r4, r1
 800a2e4:	b921      	cbnz	r1, 800a2f0 <_realloc_r+0x16>
 800a2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	4611      	mov	r1, r2
 800a2ec:	f7fd bec2 	b.w	8008074 <_malloc_r>
 800a2f0:	b92a      	cbnz	r2, 800a2fe <_realloc_r+0x24>
 800a2f2:	f7fd fe4b 	bl	8007f8c <_free_r>
 800a2f6:	2400      	movs	r4, #0
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2fe:	f000 f840 	bl	800a382 <_malloc_usable_size_r>
 800a302:	4285      	cmp	r5, r0
 800a304:	4606      	mov	r6, r0
 800a306:	d802      	bhi.n	800a30e <_realloc_r+0x34>
 800a308:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a30c:	d8f4      	bhi.n	800a2f8 <_realloc_r+0x1e>
 800a30e:	4629      	mov	r1, r5
 800a310:	4640      	mov	r0, r8
 800a312:	f7fd feaf 	bl	8008074 <_malloc_r>
 800a316:	4607      	mov	r7, r0
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0ec      	beq.n	800a2f6 <_realloc_r+0x1c>
 800a31c:	42b5      	cmp	r5, r6
 800a31e:	462a      	mov	r2, r5
 800a320:	4621      	mov	r1, r4
 800a322:	bf28      	it	cs
 800a324:	4632      	movcs	r2, r6
 800a326:	f7fd f83c 	bl	80073a2 <memcpy>
 800a32a:	4621      	mov	r1, r4
 800a32c:	4640      	mov	r0, r8
 800a32e:	f7fd fe2d 	bl	8007f8c <_free_r>
 800a332:	463c      	mov	r4, r7
 800a334:	e7e0      	b.n	800a2f8 <_realloc_r+0x1e>

0800a336 <__ascii_wctomb>:
 800a336:	4603      	mov	r3, r0
 800a338:	4608      	mov	r0, r1
 800a33a:	b141      	cbz	r1, 800a34e <__ascii_wctomb+0x18>
 800a33c:	2aff      	cmp	r2, #255	@ 0xff
 800a33e:	d904      	bls.n	800a34a <__ascii_wctomb+0x14>
 800a340:	228a      	movs	r2, #138	@ 0x8a
 800a342:	601a      	str	r2, [r3, #0]
 800a344:	f04f 30ff 	mov.w	r0, #4294967295
 800a348:	4770      	bx	lr
 800a34a:	700a      	strb	r2, [r1, #0]
 800a34c:	2001      	movs	r0, #1
 800a34e:	4770      	bx	lr

0800a350 <fiprintf>:
 800a350:	b40e      	push	{r1, r2, r3}
 800a352:	b503      	push	{r0, r1, lr}
 800a354:	4601      	mov	r1, r0
 800a356:	ab03      	add	r3, sp, #12
 800a358:	4805      	ldr	r0, [pc, #20]	@ (800a370 <fiprintf+0x20>)
 800a35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a35e:	6800      	ldr	r0, [r0, #0]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	f000 f83f 	bl	800a3e4 <_vfiprintf_r>
 800a366:	b002      	add	sp, #8
 800a368:	f85d eb04 	ldr.w	lr, [sp], #4
 800a36c:	b003      	add	sp, #12
 800a36e:	4770      	bx	lr
 800a370:	2400001c 	.word	0x2400001c

0800a374 <abort>:
 800a374:	b508      	push	{r3, lr}
 800a376:	2006      	movs	r0, #6
 800a378:	f000 fa08 	bl	800a78c <raise>
 800a37c:	2001      	movs	r0, #1
 800a37e:	f7f7 f84b 	bl	8001418 <_exit>

0800a382 <_malloc_usable_size_r>:
 800a382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a386:	1f18      	subs	r0, r3, #4
 800a388:	2b00      	cmp	r3, #0
 800a38a:	bfbc      	itt	lt
 800a38c:	580b      	ldrlt	r3, [r1, r0]
 800a38e:	18c0      	addlt	r0, r0, r3
 800a390:	4770      	bx	lr

0800a392 <__sfputc_r>:
 800a392:	6893      	ldr	r3, [r2, #8]
 800a394:	3b01      	subs	r3, #1
 800a396:	2b00      	cmp	r3, #0
 800a398:	b410      	push	{r4}
 800a39a:	6093      	str	r3, [r2, #8]
 800a39c:	da08      	bge.n	800a3b0 <__sfputc_r+0x1e>
 800a39e:	6994      	ldr	r4, [r2, #24]
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	db01      	blt.n	800a3a8 <__sfputc_r+0x16>
 800a3a4:	290a      	cmp	r1, #10
 800a3a6:	d103      	bne.n	800a3b0 <__sfputc_r+0x1e>
 800a3a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3ac:	f000 b932 	b.w	800a614 <__swbuf_r>
 800a3b0:	6813      	ldr	r3, [r2, #0]
 800a3b2:	1c58      	adds	r0, r3, #1
 800a3b4:	6010      	str	r0, [r2, #0]
 800a3b6:	7019      	strb	r1, [r3, #0]
 800a3b8:	4608      	mov	r0, r1
 800a3ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3be:	4770      	bx	lr

0800a3c0 <__sfputs_r>:
 800a3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c2:	4606      	mov	r6, r0
 800a3c4:	460f      	mov	r7, r1
 800a3c6:	4614      	mov	r4, r2
 800a3c8:	18d5      	adds	r5, r2, r3
 800a3ca:	42ac      	cmp	r4, r5
 800a3cc:	d101      	bne.n	800a3d2 <__sfputs_r+0x12>
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	e007      	b.n	800a3e2 <__sfputs_r+0x22>
 800a3d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3d6:	463a      	mov	r2, r7
 800a3d8:	4630      	mov	r0, r6
 800a3da:	f7ff ffda 	bl	800a392 <__sfputc_r>
 800a3de:	1c43      	adds	r3, r0, #1
 800a3e0:	d1f3      	bne.n	800a3ca <__sfputs_r+0xa>
 800a3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a3e4 <_vfiprintf_r>:
 800a3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e8:	460d      	mov	r5, r1
 800a3ea:	b09d      	sub	sp, #116	@ 0x74
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	4698      	mov	r8, r3
 800a3f0:	4606      	mov	r6, r0
 800a3f2:	b118      	cbz	r0, 800a3fc <_vfiprintf_r+0x18>
 800a3f4:	6a03      	ldr	r3, [r0, #32]
 800a3f6:	b90b      	cbnz	r3, 800a3fc <_vfiprintf_r+0x18>
 800a3f8:	f7fc feaa 	bl	8007150 <__sinit>
 800a3fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3fe:	07d9      	lsls	r1, r3, #31
 800a400:	d405      	bmi.n	800a40e <_vfiprintf_r+0x2a>
 800a402:	89ab      	ldrh	r3, [r5, #12]
 800a404:	059a      	lsls	r2, r3, #22
 800a406:	d402      	bmi.n	800a40e <_vfiprintf_r+0x2a>
 800a408:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a40a:	f7fc ffc8 	bl	800739e <__retarget_lock_acquire_recursive>
 800a40e:	89ab      	ldrh	r3, [r5, #12]
 800a410:	071b      	lsls	r3, r3, #28
 800a412:	d501      	bpl.n	800a418 <_vfiprintf_r+0x34>
 800a414:	692b      	ldr	r3, [r5, #16]
 800a416:	b99b      	cbnz	r3, 800a440 <_vfiprintf_r+0x5c>
 800a418:	4629      	mov	r1, r5
 800a41a:	4630      	mov	r0, r6
 800a41c:	f000 f938 	bl	800a690 <__swsetup_r>
 800a420:	b170      	cbz	r0, 800a440 <_vfiprintf_r+0x5c>
 800a422:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a424:	07dc      	lsls	r4, r3, #31
 800a426:	d504      	bpl.n	800a432 <_vfiprintf_r+0x4e>
 800a428:	f04f 30ff 	mov.w	r0, #4294967295
 800a42c:	b01d      	add	sp, #116	@ 0x74
 800a42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a432:	89ab      	ldrh	r3, [r5, #12]
 800a434:	0598      	lsls	r0, r3, #22
 800a436:	d4f7      	bmi.n	800a428 <_vfiprintf_r+0x44>
 800a438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a43a:	f7fc ffb1 	bl	80073a0 <__retarget_lock_release_recursive>
 800a43e:	e7f3      	b.n	800a428 <_vfiprintf_r+0x44>
 800a440:	2300      	movs	r3, #0
 800a442:	9309      	str	r3, [sp, #36]	@ 0x24
 800a444:	2320      	movs	r3, #32
 800a446:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a44a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a44e:	2330      	movs	r3, #48	@ 0x30
 800a450:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a600 <_vfiprintf_r+0x21c>
 800a454:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a458:	f04f 0901 	mov.w	r9, #1
 800a45c:	4623      	mov	r3, r4
 800a45e:	469a      	mov	sl, r3
 800a460:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a464:	b10a      	cbz	r2, 800a46a <_vfiprintf_r+0x86>
 800a466:	2a25      	cmp	r2, #37	@ 0x25
 800a468:	d1f9      	bne.n	800a45e <_vfiprintf_r+0x7a>
 800a46a:	ebba 0b04 	subs.w	fp, sl, r4
 800a46e:	d00b      	beq.n	800a488 <_vfiprintf_r+0xa4>
 800a470:	465b      	mov	r3, fp
 800a472:	4622      	mov	r2, r4
 800a474:	4629      	mov	r1, r5
 800a476:	4630      	mov	r0, r6
 800a478:	f7ff ffa2 	bl	800a3c0 <__sfputs_r>
 800a47c:	3001      	adds	r0, #1
 800a47e:	f000 80a7 	beq.w	800a5d0 <_vfiprintf_r+0x1ec>
 800a482:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a484:	445a      	add	r2, fp
 800a486:	9209      	str	r2, [sp, #36]	@ 0x24
 800a488:	f89a 3000 	ldrb.w	r3, [sl]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	f000 809f 	beq.w	800a5d0 <_vfiprintf_r+0x1ec>
 800a492:	2300      	movs	r3, #0
 800a494:	f04f 32ff 	mov.w	r2, #4294967295
 800a498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a49c:	f10a 0a01 	add.w	sl, sl, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	9307      	str	r3, [sp, #28]
 800a4a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a4a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800a4aa:	4654      	mov	r4, sl
 800a4ac:	2205      	movs	r2, #5
 800a4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4b2:	4853      	ldr	r0, [pc, #332]	@ (800a600 <_vfiprintf_r+0x21c>)
 800a4b4:	f7f5 ff14 	bl	80002e0 <memchr>
 800a4b8:	9a04      	ldr	r2, [sp, #16]
 800a4ba:	b9d8      	cbnz	r0, 800a4f4 <_vfiprintf_r+0x110>
 800a4bc:	06d1      	lsls	r1, r2, #27
 800a4be:	bf44      	itt	mi
 800a4c0:	2320      	movmi	r3, #32
 800a4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4c6:	0713      	lsls	r3, r2, #28
 800a4c8:	bf44      	itt	mi
 800a4ca:	232b      	movmi	r3, #43	@ 0x2b
 800a4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a4d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4d6:	d015      	beq.n	800a504 <_vfiprintf_r+0x120>
 800a4d8:	9a07      	ldr	r2, [sp, #28]
 800a4da:	4654      	mov	r4, sl
 800a4dc:	2000      	movs	r0, #0
 800a4de:	f04f 0c0a 	mov.w	ip, #10
 800a4e2:	4621      	mov	r1, r4
 800a4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4e8:	3b30      	subs	r3, #48	@ 0x30
 800a4ea:	2b09      	cmp	r3, #9
 800a4ec:	d94b      	bls.n	800a586 <_vfiprintf_r+0x1a2>
 800a4ee:	b1b0      	cbz	r0, 800a51e <_vfiprintf_r+0x13a>
 800a4f0:	9207      	str	r2, [sp, #28]
 800a4f2:	e014      	b.n	800a51e <_vfiprintf_r+0x13a>
 800a4f4:	eba0 0308 	sub.w	r3, r0, r8
 800a4f8:	fa09 f303 	lsl.w	r3, r9, r3
 800a4fc:	4313      	orrs	r3, r2
 800a4fe:	9304      	str	r3, [sp, #16]
 800a500:	46a2      	mov	sl, r4
 800a502:	e7d2      	b.n	800a4aa <_vfiprintf_r+0xc6>
 800a504:	9b03      	ldr	r3, [sp, #12]
 800a506:	1d19      	adds	r1, r3, #4
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	9103      	str	r1, [sp, #12]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	bfbb      	ittet	lt
 800a510:	425b      	neglt	r3, r3
 800a512:	f042 0202 	orrlt.w	r2, r2, #2
 800a516:	9307      	strge	r3, [sp, #28]
 800a518:	9307      	strlt	r3, [sp, #28]
 800a51a:	bfb8      	it	lt
 800a51c:	9204      	strlt	r2, [sp, #16]
 800a51e:	7823      	ldrb	r3, [r4, #0]
 800a520:	2b2e      	cmp	r3, #46	@ 0x2e
 800a522:	d10a      	bne.n	800a53a <_vfiprintf_r+0x156>
 800a524:	7863      	ldrb	r3, [r4, #1]
 800a526:	2b2a      	cmp	r3, #42	@ 0x2a
 800a528:	d132      	bne.n	800a590 <_vfiprintf_r+0x1ac>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	1d1a      	adds	r2, r3, #4
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	9203      	str	r2, [sp, #12]
 800a532:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a536:	3402      	adds	r4, #2
 800a538:	9305      	str	r3, [sp, #20]
 800a53a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a610 <_vfiprintf_r+0x22c>
 800a53e:	7821      	ldrb	r1, [r4, #0]
 800a540:	2203      	movs	r2, #3
 800a542:	4650      	mov	r0, sl
 800a544:	f7f5 fecc 	bl	80002e0 <memchr>
 800a548:	b138      	cbz	r0, 800a55a <_vfiprintf_r+0x176>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	eba0 000a 	sub.w	r0, r0, sl
 800a550:	2240      	movs	r2, #64	@ 0x40
 800a552:	4082      	lsls	r2, r0
 800a554:	4313      	orrs	r3, r2
 800a556:	3401      	adds	r4, #1
 800a558:	9304      	str	r3, [sp, #16]
 800a55a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55e:	4829      	ldr	r0, [pc, #164]	@ (800a604 <_vfiprintf_r+0x220>)
 800a560:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a564:	2206      	movs	r2, #6
 800a566:	f7f5 febb 	bl	80002e0 <memchr>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d03f      	beq.n	800a5ee <_vfiprintf_r+0x20a>
 800a56e:	4b26      	ldr	r3, [pc, #152]	@ (800a608 <_vfiprintf_r+0x224>)
 800a570:	bb1b      	cbnz	r3, 800a5ba <_vfiprintf_r+0x1d6>
 800a572:	9b03      	ldr	r3, [sp, #12]
 800a574:	3307      	adds	r3, #7
 800a576:	f023 0307 	bic.w	r3, r3, #7
 800a57a:	3308      	adds	r3, #8
 800a57c:	9303      	str	r3, [sp, #12]
 800a57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a580:	443b      	add	r3, r7
 800a582:	9309      	str	r3, [sp, #36]	@ 0x24
 800a584:	e76a      	b.n	800a45c <_vfiprintf_r+0x78>
 800a586:	fb0c 3202 	mla	r2, ip, r2, r3
 800a58a:	460c      	mov	r4, r1
 800a58c:	2001      	movs	r0, #1
 800a58e:	e7a8      	b.n	800a4e2 <_vfiprintf_r+0xfe>
 800a590:	2300      	movs	r3, #0
 800a592:	3401      	adds	r4, #1
 800a594:	9305      	str	r3, [sp, #20]
 800a596:	4619      	mov	r1, r3
 800a598:	f04f 0c0a 	mov.w	ip, #10
 800a59c:	4620      	mov	r0, r4
 800a59e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5a2:	3a30      	subs	r2, #48	@ 0x30
 800a5a4:	2a09      	cmp	r2, #9
 800a5a6:	d903      	bls.n	800a5b0 <_vfiprintf_r+0x1cc>
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d0c6      	beq.n	800a53a <_vfiprintf_r+0x156>
 800a5ac:	9105      	str	r1, [sp, #20]
 800a5ae:	e7c4      	b.n	800a53a <_vfiprintf_r+0x156>
 800a5b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e7f0      	b.n	800a59c <_vfiprintf_r+0x1b8>
 800a5ba:	ab03      	add	r3, sp, #12
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	462a      	mov	r2, r5
 800a5c0:	4b12      	ldr	r3, [pc, #72]	@ (800a60c <_vfiprintf_r+0x228>)
 800a5c2:	a904      	add	r1, sp, #16
 800a5c4:	4630      	mov	r0, r6
 800a5c6:	f7fb ff83 	bl	80064d0 <_printf_float>
 800a5ca:	4607      	mov	r7, r0
 800a5cc:	1c78      	adds	r0, r7, #1
 800a5ce:	d1d6      	bne.n	800a57e <_vfiprintf_r+0x19a>
 800a5d0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5d2:	07d9      	lsls	r1, r3, #31
 800a5d4:	d405      	bmi.n	800a5e2 <_vfiprintf_r+0x1fe>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	059a      	lsls	r2, r3, #22
 800a5da:	d402      	bmi.n	800a5e2 <_vfiprintf_r+0x1fe>
 800a5dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5de:	f7fc fedf 	bl	80073a0 <__retarget_lock_release_recursive>
 800a5e2:	89ab      	ldrh	r3, [r5, #12]
 800a5e4:	065b      	lsls	r3, r3, #25
 800a5e6:	f53f af1f 	bmi.w	800a428 <_vfiprintf_r+0x44>
 800a5ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a5ec:	e71e      	b.n	800a42c <_vfiprintf_r+0x48>
 800a5ee:	ab03      	add	r3, sp, #12
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4b05      	ldr	r3, [pc, #20]	@ (800a60c <_vfiprintf_r+0x228>)
 800a5f6:	a904      	add	r1, sp, #16
 800a5f8:	4630      	mov	r0, r6
 800a5fa:	f7fc f9f1 	bl	80069e0 <_printf_i>
 800a5fe:	e7e4      	b.n	800a5ca <_vfiprintf_r+0x1e6>
 800a600:	0800b2a9 	.word	0x0800b2a9
 800a604:	0800b2b3 	.word	0x0800b2b3
 800a608:	080064d1 	.word	0x080064d1
 800a60c:	0800a3c1 	.word	0x0800a3c1
 800a610:	0800b2af 	.word	0x0800b2af

0800a614 <__swbuf_r>:
 800a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a616:	460e      	mov	r6, r1
 800a618:	4614      	mov	r4, r2
 800a61a:	4605      	mov	r5, r0
 800a61c:	b118      	cbz	r0, 800a626 <__swbuf_r+0x12>
 800a61e:	6a03      	ldr	r3, [r0, #32]
 800a620:	b90b      	cbnz	r3, 800a626 <__swbuf_r+0x12>
 800a622:	f7fc fd95 	bl	8007150 <__sinit>
 800a626:	69a3      	ldr	r3, [r4, #24]
 800a628:	60a3      	str	r3, [r4, #8]
 800a62a:	89a3      	ldrh	r3, [r4, #12]
 800a62c:	071a      	lsls	r2, r3, #28
 800a62e:	d501      	bpl.n	800a634 <__swbuf_r+0x20>
 800a630:	6923      	ldr	r3, [r4, #16]
 800a632:	b943      	cbnz	r3, 800a646 <__swbuf_r+0x32>
 800a634:	4621      	mov	r1, r4
 800a636:	4628      	mov	r0, r5
 800a638:	f000 f82a 	bl	800a690 <__swsetup_r>
 800a63c:	b118      	cbz	r0, 800a646 <__swbuf_r+0x32>
 800a63e:	f04f 37ff 	mov.w	r7, #4294967295
 800a642:	4638      	mov	r0, r7
 800a644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a646:	6823      	ldr	r3, [r4, #0]
 800a648:	6922      	ldr	r2, [r4, #16]
 800a64a:	1a98      	subs	r0, r3, r2
 800a64c:	6963      	ldr	r3, [r4, #20]
 800a64e:	b2f6      	uxtb	r6, r6
 800a650:	4283      	cmp	r3, r0
 800a652:	4637      	mov	r7, r6
 800a654:	dc05      	bgt.n	800a662 <__swbuf_r+0x4e>
 800a656:	4621      	mov	r1, r4
 800a658:	4628      	mov	r0, r5
 800a65a:	f7ff fa55 	bl	8009b08 <_fflush_r>
 800a65e:	2800      	cmp	r0, #0
 800a660:	d1ed      	bne.n	800a63e <__swbuf_r+0x2a>
 800a662:	68a3      	ldr	r3, [r4, #8]
 800a664:	3b01      	subs	r3, #1
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	1c5a      	adds	r2, r3, #1
 800a66c:	6022      	str	r2, [r4, #0]
 800a66e:	701e      	strb	r6, [r3, #0]
 800a670:	6962      	ldr	r2, [r4, #20]
 800a672:	1c43      	adds	r3, r0, #1
 800a674:	429a      	cmp	r2, r3
 800a676:	d004      	beq.n	800a682 <__swbuf_r+0x6e>
 800a678:	89a3      	ldrh	r3, [r4, #12]
 800a67a:	07db      	lsls	r3, r3, #31
 800a67c:	d5e1      	bpl.n	800a642 <__swbuf_r+0x2e>
 800a67e:	2e0a      	cmp	r6, #10
 800a680:	d1df      	bne.n	800a642 <__swbuf_r+0x2e>
 800a682:	4621      	mov	r1, r4
 800a684:	4628      	mov	r0, r5
 800a686:	f7ff fa3f 	bl	8009b08 <_fflush_r>
 800a68a:	2800      	cmp	r0, #0
 800a68c:	d0d9      	beq.n	800a642 <__swbuf_r+0x2e>
 800a68e:	e7d6      	b.n	800a63e <__swbuf_r+0x2a>

0800a690 <__swsetup_r>:
 800a690:	b538      	push	{r3, r4, r5, lr}
 800a692:	4b29      	ldr	r3, [pc, #164]	@ (800a738 <__swsetup_r+0xa8>)
 800a694:	4605      	mov	r5, r0
 800a696:	6818      	ldr	r0, [r3, #0]
 800a698:	460c      	mov	r4, r1
 800a69a:	b118      	cbz	r0, 800a6a4 <__swsetup_r+0x14>
 800a69c:	6a03      	ldr	r3, [r0, #32]
 800a69e:	b90b      	cbnz	r3, 800a6a4 <__swsetup_r+0x14>
 800a6a0:	f7fc fd56 	bl	8007150 <__sinit>
 800a6a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6a8:	0719      	lsls	r1, r3, #28
 800a6aa:	d422      	bmi.n	800a6f2 <__swsetup_r+0x62>
 800a6ac:	06da      	lsls	r2, r3, #27
 800a6ae:	d407      	bmi.n	800a6c0 <__swsetup_r+0x30>
 800a6b0:	2209      	movs	r2, #9
 800a6b2:	602a      	str	r2, [r5, #0]
 800a6b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a6be:	e033      	b.n	800a728 <__swsetup_r+0x98>
 800a6c0:	0758      	lsls	r0, r3, #29
 800a6c2:	d512      	bpl.n	800a6ea <__swsetup_r+0x5a>
 800a6c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a6c6:	b141      	cbz	r1, 800a6da <__swsetup_r+0x4a>
 800a6c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a6cc:	4299      	cmp	r1, r3
 800a6ce:	d002      	beq.n	800a6d6 <__swsetup_r+0x46>
 800a6d0:	4628      	mov	r0, r5
 800a6d2:	f7fd fc5b 	bl	8007f8c <_free_r>
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	6363      	str	r3, [r4, #52]	@ 0x34
 800a6da:	89a3      	ldrh	r3, [r4, #12]
 800a6dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a6e0:	81a3      	strh	r3, [r4, #12]
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	6063      	str	r3, [r4, #4]
 800a6e6:	6923      	ldr	r3, [r4, #16]
 800a6e8:	6023      	str	r3, [r4, #0]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	f043 0308 	orr.w	r3, r3, #8
 800a6f0:	81a3      	strh	r3, [r4, #12]
 800a6f2:	6923      	ldr	r3, [r4, #16]
 800a6f4:	b94b      	cbnz	r3, 800a70a <__swsetup_r+0x7a>
 800a6f6:	89a3      	ldrh	r3, [r4, #12]
 800a6f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a6fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a700:	d003      	beq.n	800a70a <__swsetup_r+0x7a>
 800a702:	4621      	mov	r1, r4
 800a704:	4628      	mov	r0, r5
 800a706:	f000 f883 	bl	800a810 <__smakebuf_r>
 800a70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a70e:	f013 0201 	ands.w	r2, r3, #1
 800a712:	d00a      	beq.n	800a72a <__swsetup_r+0x9a>
 800a714:	2200      	movs	r2, #0
 800a716:	60a2      	str	r2, [r4, #8]
 800a718:	6962      	ldr	r2, [r4, #20]
 800a71a:	4252      	negs	r2, r2
 800a71c:	61a2      	str	r2, [r4, #24]
 800a71e:	6922      	ldr	r2, [r4, #16]
 800a720:	b942      	cbnz	r2, 800a734 <__swsetup_r+0xa4>
 800a722:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a726:	d1c5      	bne.n	800a6b4 <__swsetup_r+0x24>
 800a728:	bd38      	pop	{r3, r4, r5, pc}
 800a72a:	0799      	lsls	r1, r3, #30
 800a72c:	bf58      	it	pl
 800a72e:	6962      	ldrpl	r2, [r4, #20]
 800a730:	60a2      	str	r2, [r4, #8]
 800a732:	e7f4      	b.n	800a71e <__swsetup_r+0x8e>
 800a734:	2000      	movs	r0, #0
 800a736:	e7f7      	b.n	800a728 <__swsetup_r+0x98>
 800a738:	2400001c 	.word	0x2400001c

0800a73c <_raise_r>:
 800a73c:	291f      	cmp	r1, #31
 800a73e:	b538      	push	{r3, r4, r5, lr}
 800a740:	4605      	mov	r5, r0
 800a742:	460c      	mov	r4, r1
 800a744:	d904      	bls.n	800a750 <_raise_r+0x14>
 800a746:	2316      	movs	r3, #22
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 30ff 	mov.w	r0, #4294967295
 800a74e:	bd38      	pop	{r3, r4, r5, pc}
 800a750:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a752:	b112      	cbz	r2, 800a75a <_raise_r+0x1e>
 800a754:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a758:	b94b      	cbnz	r3, 800a76e <_raise_r+0x32>
 800a75a:	4628      	mov	r0, r5
 800a75c:	f000 f830 	bl	800a7c0 <_getpid_r>
 800a760:	4622      	mov	r2, r4
 800a762:	4601      	mov	r1, r0
 800a764:	4628      	mov	r0, r5
 800a766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a76a:	f000 b817 	b.w	800a79c <_kill_r>
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d00a      	beq.n	800a788 <_raise_r+0x4c>
 800a772:	1c59      	adds	r1, r3, #1
 800a774:	d103      	bne.n	800a77e <_raise_r+0x42>
 800a776:	2316      	movs	r3, #22
 800a778:	6003      	str	r3, [r0, #0]
 800a77a:	2001      	movs	r0, #1
 800a77c:	e7e7      	b.n	800a74e <_raise_r+0x12>
 800a77e:	2100      	movs	r1, #0
 800a780:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a784:	4620      	mov	r0, r4
 800a786:	4798      	blx	r3
 800a788:	2000      	movs	r0, #0
 800a78a:	e7e0      	b.n	800a74e <_raise_r+0x12>

0800a78c <raise>:
 800a78c:	4b02      	ldr	r3, [pc, #8]	@ (800a798 <raise+0xc>)
 800a78e:	4601      	mov	r1, r0
 800a790:	6818      	ldr	r0, [r3, #0]
 800a792:	f7ff bfd3 	b.w	800a73c <_raise_r>
 800a796:	bf00      	nop
 800a798:	2400001c 	.word	0x2400001c

0800a79c <_kill_r>:
 800a79c:	b538      	push	{r3, r4, r5, lr}
 800a79e:	4d07      	ldr	r5, [pc, #28]	@ (800a7bc <_kill_r+0x20>)
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	4604      	mov	r4, r0
 800a7a4:	4608      	mov	r0, r1
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	f7f6 fe25 	bl	80013f8 <_kill>
 800a7ae:	1c43      	adds	r3, r0, #1
 800a7b0:	d102      	bne.n	800a7b8 <_kill_r+0x1c>
 800a7b2:	682b      	ldr	r3, [r5, #0]
 800a7b4:	b103      	cbz	r3, 800a7b8 <_kill_r+0x1c>
 800a7b6:	6023      	str	r3, [r4, #0]
 800a7b8:	bd38      	pop	{r3, r4, r5, pc}
 800a7ba:	bf00      	nop
 800a7bc:	2400086c 	.word	0x2400086c

0800a7c0 <_getpid_r>:
 800a7c0:	f7f6 be12 	b.w	80013e8 <_getpid>

0800a7c4 <__swhatbuf_r>:
 800a7c4:	b570      	push	{r4, r5, r6, lr}
 800a7c6:	460c      	mov	r4, r1
 800a7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	b096      	sub	sp, #88	@ 0x58
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	461e      	mov	r6, r3
 800a7d4:	da0d      	bge.n	800a7f2 <__swhatbuf_r+0x2e>
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a7dc:	f04f 0100 	mov.w	r1, #0
 800a7e0:	bf14      	ite	ne
 800a7e2:	2340      	movne	r3, #64	@ 0x40
 800a7e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a7e8:	2000      	movs	r0, #0
 800a7ea:	6031      	str	r1, [r6, #0]
 800a7ec:	602b      	str	r3, [r5, #0]
 800a7ee:	b016      	add	sp, #88	@ 0x58
 800a7f0:	bd70      	pop	{r4, r5, r6, pc}
 800a7f2:	466a      	mov	r2, sp
 800a7f4:	f000 f848 	bl	800a888 <_fstat_r>
 800a7f8:	2800      	cmp	r0, #0
 800a7fa:	dbec      	blt.n	800a7d6 <__swhatbuf_r+0x12>
 800a7fc:	9901      	ldr	r1, [sp, #4]
 800a7fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a802:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a806:	4259      	negs	r1, r3
 800a808:	4159      	adcs	r1, r3
 800a80a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a80e:	e7eb      	b.n	800a7e8 <__swhatbuf_r+0x24>

0800a810 <__smakebuf_r>:
 800a810:	898b      	ldrh	r3, [r1, #12]
 800a812:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a814:	079d      	lsls	r5, r3, #30
 800a816:	4606      	mov	r6, r0
 800a818:	460c      	mov	r4, r1
 800a81a:	d507      	bpl.n	800a82c <__smakebuf_r+0x1c>
 800a81c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	6123      	str	r3, [r4, #16]
 800a824:	2301      	movs	r3, #1
 800a826:	6163      	str	r3, [r4, #20]
 800a828:	b003      	add	sp, #12
 800a82a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a82c:	ab01      	add	r3, sp, #4
 800a82e:	466a      	mov	r2, sp
 800a830:	f7ff ffc8 	bl	800a7c4 <__swhatbuf_r>
 800a834:	9f00      	ldr	r7, [sp, #0]
 800a836:	4605      	mov	r5, r0
 800a838:	4639      	mov	r1, r7
 800a83a:	4630      	mov	r0, r6
 800a83c:	f7fd fc1a 	bl	8008074 <_malloc_r>
 800a840:	b948      	cbnz	r0, 800a856 <__smakebuf_r+0x46>
 800a842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a846:	059a      	lsls	r2, r3, #22
 800a848:	d4ee      	bmi.n	800a828 <__smakebuf_r+0x18>
 800a84a:	f023 0303 	bic.w	r3, r3, #3
 800a84e:	f043 0302 	orr.w	r3, r3, #2
 800a852:	81a3      	strh	r3, [r4, #12]
 800a854:	e7e2      	b.n	800a81c <__smakebuf_r+0xc>
 800a856:	89a3      	ldrh	r3, [r4, #12]
 800a858:	6020      	str	r0, [r4, #0]
 800a85a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a85e:	81a3      	strh	r3, [r4, #12]
 800a860:	9b01      	ldr	r3, [sp, #4]
 800a862:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a866:	b15b      	cbz	r3, 800a880 <__smakebuf_r+0x70>
 800a868:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a86c:	4630      	mov	r0, r6
 800a86e:	f000 f81d 	bl	800a8ac <_isatty_r>
 800a872:	b128      	cbz	r0, 800a880 <__smakebuf_r+0x70>
 800a874:	89a3      	ldrh	r3, [r4, #12]
 800a876:	f023 0303 	bic.w	r3, r3, #3
 800a87a:	f043 0301 	orr.w	r3, r3, #1
 800a87e:	81a3      	strh	r3, [r4, #12]
 800a880:	89a3      	ldrh	r3, [r4, #12]
 800a882:	431d      	orrs	r5, r3
 800a884:	81a5      	strh	r5, [r4, #12]
 800a886:	e7cf      	b.n	800a828 <__smakebuf_r+0x18>

0800a888 <_fstat_r>:
 800a888:	b538      	push	{r3, r4, r5, lr}
 800a88a:	4d07      	ldr	r5, [pc, #28]	@ (800a8a8 <_fstat_r+0x20>)
 800a88c:	2300      	movs	r3, #0
 800a88e:	4604      	mov	r4, r0
 800a890:	4608      	mov	r0, r1
 800a892:	4611      	mov	r1, r2
 800a894:	602b      	str	r3, [r5, #0]
 800a896:	f7f6 fe0f 	bl	80014b8 <_fstat>
 800a89a:	1c43      	adds	r3, r0, #1
 800a89c:	d102      	bne.n	800a8a4 <_fstat_r+0x1c>
 800a89e:	682b      	ldr	r3, [r5, #0]
 800a8a0:	b103      	cbz	r3, 800a8a4 <_fstat_r+0x1c>
 800a8a2:	6023      	str	r3, [r4, #0]
 800a8a4:	bd38      	pop	{r3, r4, r5, pc}
 800a8a6:	bf00      	nop
 800a8a8:	2400086c 	.word	0x2400086c

0800a8ac <_isatty_r>:
 800a8ac:	b538      	push	{r3, r4, r5, lr}
 800a8ae:	4d06      	ldr	r5, [pc, #24]	@ (800a8c8 <_isatty_r+0x1c>)
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	4604      	mov	r4, r0
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	602b      	str	r3, [r5, #0]
 800a8b8:	f7f6 fe0e 	bl	80014d8 <_isatty>
 800a8bc:	1c43      	adds	r3, r0, #1
 800a8be:	d102      	bne.n	800a8c6 <_isatty_r+0x1a>
 800a8c0:	682b      	ldr	r3, [r5, #0]
 800a8c2:	b103      	cbz	r3, 800a8c6 <_isatty_r+0x1a>
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	bd38      	pop	{r3, r4, r5, pc}
 800a8c8:	2400086c 	.word	0x2400086c

0800a8cc <_init>:
 800a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ce:	bf00      	nop
 800a8d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8d2:	bc08      	pop	{r3}
 800a8d4:	469e      	mov	lr, r3
 800a8d6:	4770      	bx	lr

0800a8d8 <_fini>:
 800a8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8da:	bf00      	nop
 800a8dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8de:	bc08      	pop	{r3}
 800a8e0:	469e      	mov	lr, r3
 800a8e2:	4770      	bx	lr
