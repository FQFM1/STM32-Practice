
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000818c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800842c  0800842c  0000942c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800849c  0800849c  0000949c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080084a4  080084a4  000094a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080084a8  080084a8  000094a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000060  24000000  080084ac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  24000060  0800850c  0000a060  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240002c4  0800850c  0000a2c4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011a3b  00000000  00000000  0000a08e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000202f  00000000  00000000  0001bac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c70  00000000  00000000  0001daf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000098f  00000000  00000000  0001e768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000378d3  00000000  00000000  0001f0f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010ee4  00000000  00000000  000569ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016a27d  00000000  00000000  000678ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d1b2b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000392c  00000000  00000000  001d1b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001d549c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008414 	.word	0x08008414

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	08008414 	.word	0x08008414

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000686:	f000 f9a9 	bl	80009dc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068a:	f000 fbd5 	bl	8000e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068e:	f000 f841 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000692:	f000 f96b 	bl	800096c <MX_GPIO_Init>
  MX_ADC3_Init();
 8000696:	f000 f8bb 	bl	8000810 <MX_ADC3_Init>
  MX_USART1_UART_Init();
 800069a:	f000 f91b 	bl	80008d4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  int value = 0;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]
  char message[20] = "";
 80006a2:	2300      	movs	r3, #0
 80006a4:	603b      	str	r3, [r7, #0]
 80006a6:	1d3b      	adds	r3, r7, #4
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start(&hadc3);
 80006b2:	4815      	ldr	r0, [pc, #84]	@ (8000708 <main+0x88>)
 80006b4:	f001 f86c 	bl	8001790 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY) == HAL_OK)
 80006b8:	f04f 31ff 	mov.w	r1, #4294967295
 80006bc:	4812      	ldr	r0, [pc, #72]	@ (8000708 <main+0x88>)
 80006be:	f001 f965 	bl	800198c <HAL_ADC_PollForConversion>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d104      	bne.n	80006d2 <main+0x52>
	  {
		  value = HAL_ADC_GetValue(&hadc3);
 80006c8:	480f      	ldr	r0, [pc, #60]	@ (8000708 <main+0x88>)
 80006ca:	f001 fa53 	bl	8001b74 <HAL_ADC_GetValue>
 80006ce:	4603      	mov	r3, r0
 80006d0:	617b      	str	r3, [r7, #20]
	  }
	  HAL_ADC_Stop(&hadc3);
 80006d2:	480d      	ldr	r0, [pc, #52]	@ (8000708 <main+0x88>)
 80006d4:	f001 f926 	bl	8001924 <HAL_ADC_Stop>

	  sprintf(message, "%d", value);
 80006d8:	463b      	mov	r3, r7
 80006da:	697a      	ldr	r2, [r7, #20]
 80006dc:	490b      	ldr	r1, [pc, #44]	@ (800070c <main+0x8c>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f007 f9f8 	bl	8007ad4 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 80006e4:	463b      	mov	r3, r7
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fdfa 	bl	80002e0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	4639      	mov	r1, r7
 80006f2:	f04f 33ff 	mov.w	r3, #4294967295
 80006f6:	4806      	ldr	r0, [pc, #24]	@ (8000710 <main+0x90>)
 80006f8:	f006 f8d2 	bl	80068a0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80006fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000700:	f000 fc2c 	bl	8000f5c <HAL_Delay>
	  HAL_ADC_Start(&hadc3);
 8000704:	e7d5      	b.n	80006b2 <main+0x32>
 8000706:	bf00      	nop
 8000708:	2400007c 	.word	0x2400007c
 800070c:	0800842c 	.word	0x0800842c
 8000710:	240000e0 	.word	0x240000e0

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b09c      	sub	sp, #112	@ 0x70
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800071e:	224c      	movs	r2, #76	@ 0x4c
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f007 f9f6 	bl	8007b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	2220      	movs	r2, #32
 800072c:	2100      	movs	r1, #0
 800072e:	4618      	mov	r0, r3
 8000730:	f007 f9f0 	bl	8007b14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000734:	2002      	movs	r0, #2
 8000736:	f002 fb45 	bl	8002dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b32      	ldr	r3, [pc, #200]	@ (8000808 <SystemClock_Config+0xf4>)
 8000740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000742:	4a31      	ldr	r2, [pc, #196]	@ (8000808 <SystemClock_Config+0xf4>)
 8000744:	f023 0301 	bic.w	r3, r3, #1
 8000748:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800074a:	4b2f      	ldr	r3, [pc, #188]	@ (8000808 <SystemClock_Config+0xf4>)
 800074c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	4b2d      	ldr	r3, [pc, #180]	@ (800080c <SystemClock_Config+0xf8>)
 8000756:	699b      	ldr	r3, [r3, #24]
 8000758:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800075c:	4a2b      	ldr	r2, [pc, #172]	@ (800080c <SystemClock_Config+0xf8>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b29      	ldr	r3, [pc, #164]	@ (800080c <SystemClock_Config+0xf8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000770:	bf00      	nop
 8000772:	4b26      	ldr	r3, [pc, #152]	@ (800080c <SystemClock_Config+0xf8>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800077e:	d1f8      	bne.n	8000772 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000780:	2302      	movs	r3, #2
 8000782:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000784:	2301      	movs	r3, #1
 8000786:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000788:	2340      	movs	r3, #64	@ 0x40
 800078a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000790:	2300      	movs	r3, #0
 8000792:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 8000798:	2309      	movs	r3, #9
 800079a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800079c:	2302      	movs	r3, #2
 800079e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007a8:	230c      	movs	r3, #12
 80007aa:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80007ac:	2302      	movs	r3, #2
 80007ae:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80007b0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80007b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ba:	4618      	mov	r0, r3
 80007bc:	f002 fb3c 	bl	8002e38 <HAL_RCC_OscConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80007c6:	f000 f935 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	233f      	movs	r3, #63	@ 0x3f
 80007cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2101      	movs	r1, #1
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 ff7b 	bl	80036ec <HAL_RCC_ClockConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0xec>
  {
    Error_Handler();
 80007fc:	f000 f91a 	bl	8000a34 <Error_Handler>
  }
}
 8000800:	bf00      	nop
 8000802:	3770      	adds	r7, #112	@ 0x70
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	58000400 	.word	0x58000400
 800080c:	58024800 	.word	0x58024800

08000810 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
 8000824:	615a      	str	r2, [r3, #20]
 8000826:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000828:	4b27      	ldr	r3, [pc, #156]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 800082a:	4a28      	ldr	r2, [pc, #160]	@ (80008cc <MX_ADC3_Init+0xbc>)
 800082c:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 800082e:	4b26      	ldr	r3, [pc, #152]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000830:	2200      	movs	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000834:	4b24      	ldr	r3, [pc, #144]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000836:	2200      	movs	r2, #0
 8000838:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800083a:	4b23      	ldr	r3, [pc, #140]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 800083c:	2204      	movs	r2, #4
 800083e:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000840:	4b21      	ldr	r3, [pc, #132]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000842:	2200      	movs	r2, #0
 8000844:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000846:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000848:	2200      	movs	r2, #0
 800084a:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 800084c:	4b1e      	ldr	r3, [pc, #120]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 800084e:	2201      	movs	r2, #1
 8000850:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000852:	4b1d      	ldr	r3, [pc, #116]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000854:	2200      	movs	r2, #0
 8000856:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000858:	4b1b      	ldr	r3, [pc, #108]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800085e:	4b1a      	ldr	r3, [pc, #104]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000860:	2200      	movs	r2, #0
 8000862:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000864:	4b18      	ldr	r3, [pc, #96]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000866:	2200      	movs	r2, #0
 8000868:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800086a:	4b17      	ldr	r3, [pc, #92]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 800086c:	2200      	movs	r2, #0
 800086e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000870:	4b15      	ldr	r3, [pc, #84]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000872:	2200      	movs	r2, #0
 8000874:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 8000880:	f000 fde4 	bl	800144c <HAL_ADC_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800088a:	f000 f8d3 	bl	8000a34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <MX_ADC3_Init+0xc0>)
 8000890:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000892:	2306      	movs	r3, #6
 8000894:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800089a:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 800089e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008a0:	2304      	movs	r3, #4
 80008a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4805      	ldr	r0, [pc, #20]	@ (80008c8 <MX_ADC3_Init+0xb8>)
 80008b2:	f001 f96d 	bl	8001b90 <HAL_ADC_ConfigChannel>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008bc:	f000 f8ba 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80008c0:	bf00      	nop
 80008c2:	3720      	adds	r7, #32
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	2400007c 	.word	0x2400007c
 80008cc:	58026000 	.word	0x58026000
 80008d0:	04300002 	.word	0x04300002

080008d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008d8:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	@ (8000968 <MX_USART1_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 800091e:	f005 ff6f 	bl	8006800 <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f884 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000930:	f007 f805 	bl	800793e <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f87b 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000942:	f007 f83a 	bl	80079ba <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f872 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	@ (8000964 <MX_USART1_UART_Init+0x90>)
 8000952:	f006 ffbb 	bl	80078cc <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f86a 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	240000e0 	.word	0x240000e0
 8000968:	40011000 	.word	0x40011000

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b19      	ldr	r3, [pc, #100]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a17      	ldr	r2, [pc, #92]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 800097a:	f043 0301 	orr.w	r3, r3, #1
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b15      	ldr	r3, [pc, #84]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0301 	and.w	r3, r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000990:	4b11      	ldr	r3, [pc, #68]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	4a10      	ldr	r2, [pc, #64]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 8000998:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a0:	4b0d      	ldr	r3, [pc, #52]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	4b0a      	ldr	r3, [pc, #40]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	4a08      	ldr	r2, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 80009b6:	f043 0304 	orr.w	r3, r3, #4
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009be:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <MX_GPIO_Init+0x6c>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	f003 0304 	and.w	r3, r3, #4
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	58024400 	.word	0x58024400

080009dc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80009e2:	463b      	mov	r3, r7
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80009ee:	f001 ffc1 	bl	8002974 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80009f2:	2301      	movs	r3, #1
 80009f4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80009f6:	2300      	movs	r3, #0
 80009f8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80009fe:	231f      	movs	r3, #31
 8000a00:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a02:	2387      	movs	r3, #135	@ 0x87
 8000a04:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000a12:	2301      	movs	r3, #1
 8000a14:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 ffdf 	bl	80029e4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000a26:	2004      	movs	r0, #4
 8000a28:	f001 ffbc 	bl	80029a4 <HAL_MPU_Enable>

}
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a4c:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	58024400 	.word	0x58024400

08000a74 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b0b4      	sub	sp, #208	@ 0xd0
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a7c:	f107 0310 	add.w	r3, r7, #16
 8000a80:	22c0      	movs	r2, #192	@ 0xc0
 8000a82:	2100      	movs	r1, #0
 8000a84:	4618      	mov	r0, r3
 8000a86:	f007 f845 	bl	8007b14 <memset>
  if(hadc->Instance==ADC3)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a27      	ldr	r2, [pc, #156]	@ (8000b2c <HAL_ADC_MspInit+0xb8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d147      	bne.n	8000b24 <HAL_ADC_MspInit+0xb0>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a94:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a98:	f04f 0300 	mov.w	r3, #0
 8000a9c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8000aa0:	2304      	movs	r3, #4
 8000aa2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 9;
 8000aa4:	2309      	movs	r3, #9
 8000aa6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 13;
 8000aa8:	230d      	movs	r3, #13
 8000aaa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000ab0:	2302      	movs	r3, #2
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000ab4:	23c0      	movs	r3, #192	@ 0xc0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 6144.0;
 8000abc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000ac0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ac8:	f107 0310 	add.w	r3, r7, #16
 8000acc:	4618      	mov	r0, r3
 8000ace:	f003 f999 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_ADC_MspInit+0x68>
    {
      Error_Handler();
 8000ad8:	f7ff ffac 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000adc:	4b14      	ldr	r3, [pc, #80]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000ade:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae2:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000ae4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000ae8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aec:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000af6:	60fb      	str	r3, [r7, #12]
 8000af8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b0d      	ldr	r3, [pc, #52]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b00:	4a0b      	ldr	r2, [pc, #44]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b0a:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <HAL_ADC_MspInit+0xbc>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	60bb      	str	r3, [r7, #8]
 8000b16:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC3_C     ------> ADC3_INP1
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000b18:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8000b1c:	f04f 6000 	mov.w	r0, #134217728	@ 0x8000000
 8000b20:	f000 fa4c 	bl	8000fbc <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000b24:	bf00      	nop
 8000b26:	37d0      	adds	r7, #208	@ 0xd0
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	58026000 	.word	0x58026000
 8000b30:	58024400 	.word	0x58024400

08000b34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b0ba      	sub	sp, #232	@ 0xe8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]
 8000b44:	605a      	str	r2, [r3, #4]
 8000b46:	609a      	str	r2, [r3, #8]
 8000b48:	60da      	str	r2, [r3, #12]
 8000b4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b4c:	f107 0310 	add.w	r3, r7, #16
 8000b50:	22c0      	movs	r2, #192	@ 0xc0
 8000b52:	2100      	movs	r1, #0
 8000b54:	4618      	mov	r0, r3
 8000b56:	f006 ffdd 	bl	8007b14 <memset>
  if(huart->Instance==USART1)
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a27      	ldr	r2, [pc, #156]	@ (8000bfc <HAL_UART_MspInit+0xc8>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d146      	bne.n	8000bf2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b64:	f04f 0201 	mov.w	r2, #1
 8000b68:	f04f 0300 	mov.w	r3, #0
 8000b6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 f942 	bl	8003e04 <HAL_RCCEx_PeriphCLKConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000b86:	f7ff ff55 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000b8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000b90:	4a1b      	ldr	r2, [pc, #108]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000b9a:	4b19      	ldr	r3, [pc, #100]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000b9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ba0:	f003 0310 	and.w	r3, r3, #16
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba8:	4b15      	ldr	r3, [pc, #84]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bae:	4a14      	ldr	r2, [pc, #80]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb8:	4b11      	ldr	r3, [pc, #68]	@ (8000c00 <HAL_UART_MspInit+0xcc>)
 8000bba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000bc6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be0:	2307      	movs	r3, #7
 8000be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	@ (8000c04 <HAL_UART_MspInit+0xd0>)
 8000bee:	f001 ff39 	bl	8002a64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	37e8      	adds	r7, #232	@ 0xe8
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40011000 	.word	0x40011000
 8000c00:	58024400 	.word	0x58024400
 8000c04:	58020000 	.word	0x58020000

08000c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <NMI_Handler+0x4>

08000c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <HardFault_Handler+0x4>

08000c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <MemManage_Handler+0x4>

08000c20 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	bf00      	nop
 8000c2e:	e7fd      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr

08000c4c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5e:	f000 f95d 	bl	8000f1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
	...

08000c68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c70:	4a14      	ldr	r2, [pc, #80]	@ (8000cc4 <_sbrk+0x5c>)
 8000c72:	4b15      	ldr	r3, [pc, #84]	@ (8000cc8 <_sbrk+0x60>)
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c7c:	4b13      	ldr	r3, [pc, #76]	@ (8000ccc <_sbrk+0x64>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d102      	bne.n	8000c8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c84:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <_sbrk+0x64>)
 8000c86:	4a12      	ldr	r2, [pc, #72]	@ (8000cd0 <_sbrk+0x68>)
 8000c88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <_sbrk+0x64>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d207      	bcs.n	8000ca8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c98:	f006 ff44 	bl	8007b24 <__errno>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	220c      	movs	r2, #12
 8000ca0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca6:	e009      	b.n	8000cbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <_sbrk+0x64>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cae:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <_sbrk+0x64>)
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <_sbrk+0x64>)
 8000cb8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cba:	68fb      	ldr	r3, [r7, #12]
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	24080000 	.word	0x24080000
 8000cc8:	00000400 	.word	0x00000400
 8000ccc:	24000174 	.word	0x24000174
 8000cd0:	240002c8 	.word	0x240002c8

08000cd4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd8:	4b37      	ldr	r3, [pc, #220]	@ (8000db8 <SystemInit+0xe4>)
 8000cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cde:	4a36      	ldr	r2, [pc, #216]	@ (8000db8 <SystemInit+0xe4>)
 8000ce0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce8:	4b34      	ldr	r3, [pc, #208]	@ (8000dbc <SystemInit+0xe8>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f003 030f 	and.w	r3, r3, #15
 8000cf0:	2b06      	cmp	r3, #6
 8000cf2:	d807      	bhi.n	8000d04 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf4:	4b31      	ldr	r3, [pc, #196]	@ (8000dbc <SystemInit+0xe8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f023 030f 	bic.w	r3, r3, #15
 8000cfc:	4a2f      	ldr	r2, [pc, #188]	@ (8000dbc <SystemInit+0xe8>)
 8000cfe:	f043 0307 	orr.w	r3, r3, #7
 8000d02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d04:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc0 <SystemInit+0xec>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a2d      	ldr	r2, [pc, #180]	@ (8000dc0 <SystemInit+0xec>)
 8000d0a:	f043 0301 	orr.w	r3, r3, #1
 8000d0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc0 <SystemInit+0xec>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d16:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc0 <SystemInit+0xec>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4929      	ldr	r1, [pc, #164]	@ (8000dc0 <SystemInit+0xec>)
 8000d1c:	4b29      	ldr	r3, [pc, #164]	@ (8000dc4 <SystemInit+0xf0>)
 8000d1e:	4013      	ands	r3, r2
 8000d20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d22:	4b26      	ldr	r3, [pc, #152]	@ (8000dbc <SystemInit+0xe8>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0308 	and.w	r3, r3, #8
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d007      	beq.n	8000d3e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2e:	4b23      	ldr	r3, [pc, #140]	@ (8000dbc <SystemInit+0xe8>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 030f 	bic.w	r3, r3, #15
 8000d36:	4a21      	ldr	r2, [pc, #132]	@ (8000dbc <SystemInit+0xe8>)
 8000d38:	f043 0307 	orr.w	r3, r3, #7
 8000d3c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d3e:	4b20      	ldr	r3, [pc, #128]	@ (8000dc0 <SystemInit+0xec>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d44:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc0 <SystemInit+0xec>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc0 <SystemInit+0xec>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d50:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc0 <SystemInit+0xec>)
 8000d52:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc8 <SystemInit+0xf4>)
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d56:	4b1a      	ldr	r3, [pc, #104]	@ (8000dc0 <SystemInit+0xec>)
 8000d58:	4a1c      	ldr	r2, [pc, #112]	@ (8000dcc <SystemInit+0xf8>)
 8000d5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d5c:	4b18      	ldr	r3, [pc, #96]	@ (8000dc0 <SystemInit+0xec>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <SystemInit+0xfc>)
 8000d60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d62:	4b17      	ldr	r3, [pc, #92]	@ (8000dc0 <SystemInit+0xec>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d68:	4b15      	ldr	r3, [pc, #84]	@ (8000dc0 <SystemInit+0xec>)
 8000d6a:	4a19      	ldr	r2, [pc, #100]	@ (8000dd0 <SystemInit+0xfc>)
 8000d6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d6e:	4b14      	ldr	r3, [pc, #80]	@ (8000dc0 <SystemInit+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d74:	4b12      	ldr	r3, [pc, #72]	@ (8000dc0 <SystemInit+0xec>)
 8000d76:	4a16      	ldr	r2, [pc, #88]	@ (8000dd0 <SystemInit+0xfc>)
 8000d78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	@ (8000dc0 <SystemInit+0xec>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc0 <SystemInit+0xec>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0e      	ldr	r2, [pc, #56]	@ (8000dc0 <SystemInit+0xec>)
 8000d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc0 <SystemInit+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <SystemInit+0x100>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	4b10      	ldr	r3, [pc, #64]	@ (8000dd8 <SystemInit+0x104>)
 8000d98:	4013      	ands	r3, r2
 8000d9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d9e:	d202      	bcs.n	8000da6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	@ (8000ddc <SystemInit+0x108>)
 8000da2:	2201      	movs	r2, #1
 8000da4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <SystemInit+0x10c>)
 8000da8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dac:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000ed00 	.word	0xe000ed00
 8000dbc:	52002000 	.word	0x52002000
 8000dc0:	58024400 	.word	0x58024400
 8000dc4:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dc8:	02020200 	.word	0x02020200
 8000dcc:	01ff0000 	.word	0x01ff0000
 8000dd0:	01010280 	.word	0x01010280
 8000dd4:	5c001000 	.word	0x5c001000
 8000dd8:	ffff0000 	.word	0xffff0000
 8000ddc:	51008108 	.word	0x51008108
 8000de0:	52004000 	.word	0x52004000

08000de4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e1c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000de8:	f7ff ff74 	bl	8000cd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dee:	490d      	ldr	r1, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000df2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df4:	e002      	b.n	8000dfc <LoopCopyDataInit>

08000df6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dfa:	3304      	adds	r3, #4

08000dfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e00:	d3f9      	bcc.n	8000df6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e04:	4c0a      	ldr	r4, [pc, #40]	@ (8000e30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e08:	e001      	b.n	8000e0e <LoopFillZerobss>

08000e0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e0c:	3204      	adds	r2, #4

08000e0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e10:	d3fb      	bcc.n	8000e0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e12:	f006 fe8d 	bl	8007b30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e16:	f7ff fc33 	bl	8000680 <main>
  bx  lr
 8000e1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e1c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000e20:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000e24:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000e28:	080084ac 	.word	0x080084ac
  ldr r2, =_sbss
 8000e2c:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000e30:	240002c4 	.word	0x240002c4

08000e34 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e34:	e7fe      	b.n	8000e34 <ADC3_IRQHandler>
	...

08000e38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f001 fd66 	bl	8002910 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e44:	f002 fe08 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_Init+0x68>)
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	0a1b      	lsrs	r3, r3, #8
 8000e50:	f003 030f 	and.w	r3, r3, #15
 8000e54:	4913      	ldr	r1, [pc, #76]	@ (8000ea4 <HAL_Init+0x6c>)
 8000e56:	5ccb      	ldrb	r3, [r1, r3]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ea0 <HAL_Init+0x68>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ea4 <HAL_Init+0x6c>)
 8000e6c:	5cd3      	ldrb	r3, [r2, r3]
 8000e6e:	f003 031f 	and.w	r3, r3, #31
 8000e72:	687a      	ldr	r2, [r7, #4]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ea8 <HAL_Init+0x70>)
 8000e7a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000eac <HAL_Init+0x74>)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e82:	200f      	movs	r0, #15
 8000e84:	f000 f814 	bl	8000eb0 <HAL_InitTick>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e002      	b.n	8000e98 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e92:	f7ff fdd5 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e96:	2300      	movs	r3, #0
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	08008430 	.word	0x08008430
 8000ea8:	24000004 	.word	0x24000004
 8000eac:	24000000 	.word	0x24000000

08000eb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000eb8:	4b15      	ldr	r3, [pc, #84]	@ (8000f10 <HAL_InitTick+0x60>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d101      	bne.n	8000ec4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	e021      	b.n	8000f08 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	@ (8000f14 <HAL_InitTick+0x64>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	4b11      	ldr	r3, [pc, #68]	@ (8000f10 <HAL_InitTick+0x60>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4619      	mov	r1, r3
 8000ece:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ed2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eda:	4618      	mov	r0, r3
 8000edc:	f001 fd3d 	bl	800295a <HAL_SYSTICK_Config>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e00e      	b.n	8000f08 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b0f      	cmp	r3, #15
 8000eee:	d80a      	bhi.n	8000f06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	6879      	ldr	r1, [r7, #4]
 8000ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ef8:	f001 fd15 	bl	8002926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000efc:	4a06      	ldr	r2, [pc, #24]	@ (8000f18 <HAL_InitTick+0x68>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e000      	b.n	8000f08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2400000c 	.word	0x2400000c
 8000f14:	24000000 	.word	0x24000000
 8000f18:	24000008 	.word	0x24000008

08000f1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f20:	4b06      	ldr	r3, [pc, #24]	@ (8000f3c <HAL_IncTick+0x20>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	461a      	mov	r2, r3
 8000f26:	4b06      	ldr	r3, [pc, #24]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <HAL_IncTick+0x24>)
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	2400000c 	.word	0x2400000c
 8000f40:	24000178 	.word	0x24000178

08000f44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return uwTick;
 8000f48:	4b03      	ldr	r3, [pc, #12]	@ (8000f58 <HAL_GetTick+0x14>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	24000178 	.word	0x24000178

08000f5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f64:	f7ff ffee 	bl	8000f44 <HAL_GetTick>
 8000f68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f74:	d005      	beq.n	8000f82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f76:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <HAL_Delay+0x44>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	4413      	add	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f82:	bf00      	nop
 8000f84:	f7ff ffde 	bl	8000f44 <HAL_GetTick>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	1ad3      	subs	r3, r2, r3
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d8f7      	bhi.n	8000f84 <HAL_Delay+0x28>
  {
  }
}
 8000f94:	bf00      	nop
 8000f96:	bf00      	nop
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	2400000c 	.word	0x2400000c

08000fa4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000fa8:	4b03      	ldr	r3, [pc, #12]	@ (8000fb8 <HAL_GetREVID+0x14>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	0c1b      	lsrs	r3, r3, #16
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	5c001000 	.word	0x5c001000

08000fbc <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8000fc6:	4b07      	ldr	r3, [pc, #28]	@ (8000fe4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	401a      	ands	r2, r3
 8000fd0:	4904      	ldr	r1, [pc, #16]	@ (8000fe4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	58000400 	.word	0x58000400

08000fe8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	431a      	orrs	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	609a      	str	r2, [r3, #8]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr

0800100e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800100e:	b480      	push	{r7}
 8001010:	b083      	sub	sp, #12
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
 8001016:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	431a      	orrs	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	609a      	str	r2, [r3, #8]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001044:	4618      	mov	r0, r3
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001050:	b480      	push	{r7}
 8001052:	b087      	sub	sp, #28
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3360      	adds	r3, #96	@ 0x60
 8001062:	461a      	mov	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	430b      	orrs	r3, r1
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001084:	bf00      	nop
 8001086:	371c      	adds	r7, #28
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	691b      	ldr	r3, [r3, #16]
 80010a0:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	f003 031f 	and.w	r3, r3, #31
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	fa01 f303 	lsl.w	r3, r1, r3
 80010b0:	431a      	orrs	r2, r3
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	611a      	str	r2, [r3, #16]
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b087      	sub	sp, #28
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3360      	adds	r3, #96	@ 0x60
 80010d2:	461a      	mov	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	4413      	add	r3, r2
 80010da:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	431a      	orrs	r2, r3
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	601a      	str	r2, [r3, #0]
  }
}
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001108:	2b00      	cmp	r3, #0
 800110a:	d101      	bne.n	8001110 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001110:	2300      	movs	r3, #0
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800111e:	b480      	push	{r7}
 8001120:	b087      	sub	sp, #28
 8001122:	af00      	add	r7, sp, #0
 8001124:	60f8      	str	r0, [r7, #12]
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	3330      	adds	r3, #48	@ 0x30
 800112e:	461a      	mov	r2, r3
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	f003 030c 	and.w	r3, r3, #12
 800113a:	4413      	add	r3, r2
 800113c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	f003 031f 	and.w	r3, r3, #31
 8001148:	211f      	movs	r1, #31
 800114a:	fa01 f303 	lsl.w	r3, r1, r3
 800114e:	43db      	mvns	r3, r3
 8001150:	401a      	ands	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	0e9b      	lsrs	r3, r3, #26
 8001156:	f003 011f 	and.w	r1, r3, #31
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	f003 031f 	and.w	r3, r3, #31
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	431a      	orrs	r2, r3
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800116a:	bf00      	nop
 800116c:	371c      	adds	r7, #28
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001176:	b480      	push	{r7}
 8001178:	b087      	sub	sp, #28
 800117a:	af00      	add	r7, sp, #0
 800117c:	60f8      	str	r0, [r7, #12]
 800117e:	60b9      	str	r1, [r7, #8]
 8001180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	3314      	adds	r3, #20
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	0e5b      	lsrs	r3, r3, #25
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	f003 0304 	and.w	r3, r3, #4
 8001192:	4413      	add	r3, r2
 8001194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	0d1b      	lsrs	r3, r3, #20
 800119e:	f003 031f 	and.w	r3, r3, #31
 80011a2:	2107      	movs	r1, #7
 80011a4:	fa01 f303 	lsl.w	r3, r1, r3
 80011a8:	43db      	mvns	r3, r3
 80011aa:	401a      	ands	r2, r3
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	0d1b      	lsrs	r3, r3, #20
 80011b0:	f003 031f 	and.w	r3, r3, #31
 80011b4:	6879      	ldr	r1, [r7, #4]
 80011b6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ba:	431a      	orrs	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80011c0:	bf00      	nop
 80011c2:	371c      	adds	r7, #28
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b085      	sub	sp, #20
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011e4:	43db      	mvns	r3, r3
 80011e6:	401a      	ands	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0318 	and.w	r3, r3, #24
 80011ee:	4908      	ldr	r1, [pc, #32]	@ (8001210 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011f0:	40d9      	lsrs	r1, r3
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	400b      	ands	r3, r1
 80011f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80011fa:	431a      	orrs	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	000fffff 	.word	0x000fffff

08001214 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	f003 031f 	and.w	r3, r3, #31
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8001240:	4618      	mov	r0, r3
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689a      	ldr	r2, [r3, #8]
 8001258:	4b04      	ldr	r3, [pc, #16]	@ (800126c <LL_ADC_DisableDeepPowerDown+0x20>)
 800125a:	4013      	ands	r3, r2
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6093      	str	r3, [r2, #8]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	5fffffc0 	.word	0x5fffffc0

08001270 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001280:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001284:	d101      	bne.n	800128a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	4b05      	ldr	r3, [pc, #20]	@ (80012bc <LL_ADC_EnableInternalRegulator+0x24>)
 80012a6:	4013      	ands	r3, r2
 80012a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	6fffffc0 	.word	0x6fffffc0

080012c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80012d4:	d101      	bne.n	80012da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80012da:	2300      	movs	r3, #0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	4b05      	ldr	r3, [pc, #20]	@ (800130c <LL_ADC_Enable+0x24>)
 80012f6:	4013      	ands	r3, r2
 80012f8:	f043 0201 	orr.w	r2, r3, #1
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001300:	bf00      	nop
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	7fffffc0 	.word	0x7fffffc0

08001310 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b05      	ldr	r3, [pc, #20]	@ (8001334 <LL_ADC_Disable+0x24>)
 800131e:	4013      	ands	r3, r2
 8001320:	f043 0202 	orr.w	r2, r3, #2
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	7fffffc0 	.word	0x7fffffc0

08001338 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <LL_ADC_IsEnabled+0x18>
 800134c:	2301      	movs	r3, #1
 800134e:	e000      	b.n	8001352 <LL_ADC_IsEnabled+0x1a>
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b02      	cmp	r3, #2
 8001370:	d101      	bne.n	8001376 <LL_ADC_IsDisableOngoing+0x18>
 8001372:	2301      	movs	r3, #1
 8001374:	e000      	b.n	8001378 <LL_ADC_IsDisableOngoing+0x1a>
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	4b05      	ldr	r3, [pc, #20]	@ (80013a8 <LL_ADC_REG_StartConversion+0x24>)
 8001392:	4013      	ands	r3, r2
 8001394:	f043 0204 	orr.w	r2, r3, #4
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	7fffffc0 	.word	0x7fffffc0

080013ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <LL_ADC_REG_StopConversion+0x24>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	f043 0210 	orr.w	r2, r3, #16
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	7fffffc0 	.word	0x7fffffc0

080013d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	d101      	bne.n	80013ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80013e8:	2301      	movs	r3, #1
 80013ea:	e000      	b.n	80013ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
	...

080013fc <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689a      	ldr	r2, [r3, #8]
 8001408:	4b05      	ldr	r3, [pc, #20]	@ (8001420 <LL_ADC_INJ_StopConversion+0x24>)
 800140a:	4013      	ands	r3, r2
 800140c:	f043 0220 	orr.w	r2, r3, #32
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8001414:	bf00      	nop
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	7fffffc0 	.word	0x7fffffc0

08001424 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b08      	cmp	r3, #8
 8001436:	d101      	bne.n	800143c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001438:	2301      	movs	r3, #1
 800143a:	e000      	b.n	800143e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800143c:	2300      	movs	r3, #0
}
 800143e:	4618      	mov	r0, r3
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001454:	2300      	movs	r3, #0
 8001456:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e18f      	b.n	8001786 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	68db      	ldr	r3, [r3, #12]
 800146a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001470:	2b00      	cmp	r3, #0
 8001472:	d109      	bne.n	8001488 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fafd 	bl	8000a74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2200      	movs	r2, #0
 800147e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff feef 	bl	8001270 <LL_ADC_IsDeepPowerDownEnabled>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d004      	beq.n	80014a2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff fed5 	bl	800124c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff0a 	bl	80012c0 <LL_ADC_IsInternalRegulatorEnabled>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d114      	bne.n	80014dc <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff feee 	bl	8001298 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014bc:	4b87      	ldr	r3, [pc, #540]	@ (80016dc <HAL_ADC_Init+0x290>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	099b      	lsrs	r3, r3, #6
 80014c2:	4a87      	ldr	r2, [pc, #540]	@ (80016e0 <HAL_ADC_Init+0x294>)
 80014c4:	fba2 2303 	umull	r2, r3, r2, r3
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	3301      	adds	r3, #1
 80014cc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014ce:	e002      	b.n	80014d6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	3b01      	subs	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff feed 	bl	80012c0 <LL_ADC_IsInternalRegulatorEnabled>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10d      	bne.n	8001508 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014f0:	f043 0210 	orr.w	r2, r3, #16
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff61 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 8001512:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001518:	f003 0310 	and.w	r3, r3, #16
 800151c:	2b00      	cmp	r3, #0
 800151e:	f040 8129 	bne.w	8001774 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 8125 	bne.w	8001774 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800152e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fefa 	bl	8001338 <LL_ADC_IsEnabled>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d136      	bne.n	80015b8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a65      	ldr	r2, [pc, #404]	@ (80016e4 <HAL_ADC_Init+0x298>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d004      	beq.n	800155e <HAL_ADC_Init+0x112>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a63      	ldr	r2, [pc, #396]	@ (80016e8 <HAL_ADC_Init+0x29c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d10e      	bne.n	800157c <HAL_ADC_Init+0x130>
 800155e:	4861      	ldr	r0, [pc, #388]	@ (80016e4 <HAL_ADC_Init+0x298>)
 8001560:	f7ff feea 	bl	8001338 <LL_ADC_IsEnabled>
 8001564:	4604      	mov	r4, r0
 8001566:	4860      	ldr	r0, [pc, #384]	@ (80016e8 <HAL_ADC_Init+0x29c>)
 8001568:	f7ff fee6 	bl	8001338 <LL_ADC_IsEnabled>
 800156c:	4603      	mov	r3, r0
 800156e:	4323      	orrs	r3, r4
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e008      	b.n	800158e <HAL_ADC_Init+0x142>
 800157c:	485b      	ldr	r0, [pc, #364]	@ (80016ec <HAL_ADC_Init+0x2a0>)
 800157e:	f7ff fedb 	bl	8001338 <LL_ADC_IsEnabled>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a53      	ldr	r2, [pc, #332]	@ (80016e4 <HAL_ADC_Init+0x298>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d004      	beq.n	80015a6 <HAL_ADC_Init+0x15a>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a51      	ldr	r2, [pc, #324]	@ (80016e8 <HAL_ADC_Init+0x29c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d101      	bne.n	80015aa <HAL_ADC_Init+0x15e>
 80015a6:	4a52      	ldr	r2, [pc, #328]	@ (80016f0 <HAL_ADC_Init+0x2a4>)
 80015a8:	e000      	b.n	80015ac <HAL_ADC_Init+0x160>
 80015aa:	4a52      	ldr	r2, [pc, #328]	@ (80016f4 <HAL_ADC_Init+0x2a8>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4610      	mov	r0, r2
 80015b4:	f7ff fd18 	bl	8000fe8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80015b8:	f7ff fcf4 	bl	8000fa4 <HAL_GetREVID>
 80015bc:	4603      	mov	r3, r0
 80015be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d914      	bls.n	80015f0 <HAL_ADC_Init+0x1a4>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	2b10      	cmp	r3, #16
 80015cc:	d110      	bne.n	80015f0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7d5b      	ldrb	r3, [r3, #21]
 80015d2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015d8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80015de:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	7f1b      	ldrb	r3, [r3, #28]
 80015e4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015e6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015e8:	f043 030c 	orr.w	r3, r3, #12
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	e00d      	b.n	800160c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	7d5b      	ldrb	r3, [r3, #21]
 80015f4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015fa:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001600:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7f1b      	ldrb	r3, [r3, #28]
 8001606:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001608:	4313      	orrs	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7f1b      	ldrb	r3, [r3, #28]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d106      	bne.n	8001622 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	3b01      	subs	r3, #1
 800161a:	045b      	lsls	r3, r3, #17
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001626:	2b00      	cmp	r3, #0
 8001628:	d009      	beq.n	800163e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001636:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	4313      	orrs	r3, r2
 800163c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68da      	ldr	r2, [r3, #12]
 8001644:	4b2c      	ldr	r3, [pc, #176]	@ (80016f8 <HAL_ADC_Init+0x2ac>)
 8001646:	4013      	ands	r3, r2
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	6812      	ldr	r2, [r2, #0]
 800164c:	69b9      	ldr	r1, [r7, #24]
 800164e:	430b      	orrs	r3, r1
 8001650:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff febc 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 800165c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff fede 	bl	8001424 <LL_ADC_INJ_IsConversionOngoing>
 8001668:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d15f      	bne.n	8001730 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d15c      	bne.n	8001730 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	7d1b      	ldrb	r3, [r3, #20]
 800167a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68da      	ldr	r2, [r3, #12]
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_ADC_Init+0x2b0>)
 800168c:	4013      	ands	r3, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	69b9      	ldr	r1, [r7, #24]
 8001694:	430b      	orrs	r3, r1
 8001696:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d130      	bne.n	8001704 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691a      	ldr	r2, [r3, #16]
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <HAL_ADC_Init+0x2b4>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016b6:	3a01      	subs	r2, #1
 80016b8:	0411      	lsls	r1, r2, #16
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016be:	4311      	orrs	r1, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80016c4:	4311      	orrs	r1, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80016ca:	430a      	orrs	r2, r1
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f042 0201 	orr.w	r2, r2, #1
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	e01c      	b.n	8001714 <HAL_ADC_Init+0x2c8>
 80016da:	bf00      	nop
 80016dc:	24000000 	.word	0x24000000
 80016e0:	053e2d63 	.word	0x053e2d63
 80016e4:	40022000 	.word	0x40022000
 80016e8:	40022100 	.word	0x40022100
 80016ec:	58026000 	.word	0x58026000
 80016f0:	40022300 	.word	0x40022300
 80016f4:	58026300 	.word	0x58026300
 80016f8:	fff0c003 	.word	0xfff0c003
 80016fc:	ffffbffc 	.word	0xffffbffc
 8001700:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	691a      	ldr	r2, [r3, #16]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 ff32 	bl	8002594 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d10c      	bne.n	8001752 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	f023 010f 	bic.w	r1, r3, #15
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	1e5a      	subs	r2, r3, #1
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001750:	e007      	b.n	8001762 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 020f 	bic.w	r2, r2, #15
 8001760:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001766:	f023 0303 	bic.w	r3, r3, #3
 800176a:	f043 0201 	orr.w	r2, r3, #1
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	655a      	str	r2, [r3, #84]	@ 0x54
 8001772:	e007      	b.n	8001784 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001778:	f043 0210 	orr.w	r2, r3, #16
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001784:	7ffb      	ldrb	r3, [r7, #31]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3724      	adds	r7, #36	@ 0x24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop

08001790 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a5c      	ldr	r2, [pc, #368]	@ (8001910 <HAL_ADC_Start+0x180>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d004      	beq.n	80017ac <HAL_ADC_Start+0x1c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5b      	ldr	r2, [pc, #364]	@ (8001914 <HAL_ADC_Start+0x184>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d101      	bne.n	80017b0 <HAL_ADC_Start+0x20>
 80017ac:	4b5a      	ldr	r3, [pc, #360]	@ (8001918 <HAL_ADC_Start+0x188>)
 80017ae:	e000      	b.n	80017b2 <HAL_ADC_Start+0x22>
 80017b0:	4b5a      	ldr	r3, [pc, #360]	@ (800191c <HAL_ADC_Start+0x18c>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff fd2e 	bl	8001214 <LL_ADC_GetMultimode>
 80017b8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff fe08 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	f040 809a 	bne.w	8001900 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d101      	bne.n	80017da <HAL_ADC_Start+0x4a>
 80017d6:	2302      	movs	r3, #2
 80017d8:	e095      	b.n	8001906 <HAL_ADC_Start+0x176>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2201      	movs	r2, #1
 80017de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fdec 	bl	80023c0 <ADC_Enable>
 80017e8:	4603      	mov	r3, r0
 80017ea:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017ec:	7dfb      	ldrb	r3, [r7, #23]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f040 8081 	bne.w	80018f6 <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80017f8:	4b49      	ldr	r3, [pc, #292]	@ (8001920 <HAL_ADC_Start+0x190>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a42      	ldr	r2, [pc, #264]	@ (8001914 <HAL_ADC_Start+0x184>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d002      	beq.n	8001814 <HAL_ADC_Start+0x84>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	e000      	b.n	8001816 <HAL_ADC_Start+0x86>
 8001814:	4b3e      	ldr	r3, [pc, #248]	@ (8001910 <HAL_ADC_Start+0x180>)
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	6812      	ldr	r2, [r2, #0]
 800181a:	4293      	cmp	r3, r2
 800181c:	d002      	beq.n	8001824 <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d105      	bne.n	8001830 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001828:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001834:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001838:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800183c:	d106      	bne.n	800184c <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001842:	f023 0206 	bic.w	r2, r3, #6
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	659a      	str	r2, [r3, #88]	@ 0x58
 800184a:	e002      	b.n	8001852 <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	221c      	movs	r2, #28
 8001858:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a2b      	ldr	r2, [pc, #172]	@ (8001914 <HAL_ADC_Start+0x184>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d002      	beq.n	8001872 <HAL_ADC_Start+0xe2>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	e000      	b.n	8001874 <HAL_ADC_Start+0xe4>
 8001872:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_ADC_Start+0x180>)
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	4293      	cmp	r3, r2
 800187a:	d008      	beq.n	800188e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d005      	beq.n	800188e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	2b05      	cmp	r3, #5
 8001886:	d002      	beq.n	800188e <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	2b09      	cmp	r3, #9
 800188c:	d114      	bne.n	80018b8 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4618      	mov	r0, r3
 80018b2:	f7ff fd67 	bl	8001384 <LL_ADC_REG_StartConversion>
 80018b6:	e025      	b.n	8001904 <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018bc:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a12      	ldr	r2, [pc, #72]	@ (8001914 <HAL_ADC_Start+0x184>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d002      	beq.n	80018d4 <HAL_ADC_Start+0x144>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	e000      	b.n	80018d6 <HAL_ADC_Start+0x146>
 80018d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_ADC_Start+0x180>)
 80018d6:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d00f      	beq.n	8001904 <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018ec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	655a      	str	r2, [r3, #84]	@ 0x54
 80018f4:	e006      	b.n	8001904 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80018fe:	e001      	b.n	8001904 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001900:	2302      	movs	r3, #2
 8001902:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001904:	7dfb      	ldrb	r3, [r7, #23]
}
 8001906:	4618      	mov	r0, r3
 8001908:	3718      	adds	r7, #24
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40022000 	.word	0x40022000
 8001914:	40022100 	.word	0x40022100
 8001918:	40022300 	.word	0x40022300
 800191c:	58026300 	.word	0x58026300
 8001920:	fffff0fe 	.word	0xfffff0fe

08001924 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001932:	2b01      	cmp	r3, #1
 8001934:	d101      	bne.n	800193a <HAL_ADC_Stop+0x16>
 8001936:	2302      	movs	r3, #2
 8001938:	e021      	b.n	800197e <HAL_ADC_Stop+0x5a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001942:	2103      	movs	r1, #3
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fc7f 	bl	8002248 <ADC_ConversionStop>
 800194a:	4603      	mov	r3, r0
 800194c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10f      	bne.n	8001974 <HAL_ADC_Stop+0x50>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 fdbd 	bl	80024d4 <ADC_Disable>
 800195a:	4603      	mov	r3, r0
 800195c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800195e:	7bfb      	ldrb	r3, [r7, #15]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d107      	bne.n	8001974 <HAL_ADC_Stop+0x50>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <HAL_ADC_Stop+0x64>)
 800196a:	4013      	ands	r3, r2
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2200      	movs	r2, #0
 8001978:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800197c:	7bfb      	ldrb	r3, [r7, #15]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	ffffeefe 	.word	0xffffeefe

0800198c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a72      	ldr	r2, [pc, #456]	@ (8001b64 <HAL_ADC_PollForConversion+0x1d8>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d004      	beq.n	80019aa <HAL_ADC_PollForConversion+0x1e>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a70      	ldr	r2, [pc, #448]	@ (8001b68 <HAL_ADC_PollForConversion+0x1dc>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d101      	bne.n	80019ae <HAL_ADC_PollForConversion+0x22>
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_ADC_PollForConversion+0x1e0>)
 80019ac:	e000      	b.n	80019b0 <HAL_ADC_PollForConversion+0x24>
 80019ae:	4b70      	ldr	r3, [pc, #448]	@ (8001b70 <HAL_ADC_PollForConversion+0x1e4>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7ff fc2f 	bl	8001214 <LL_ADC_GetMultimode>
 80019b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691b      	ldr	r3, [r3, #16]
 80019bc:	2b08      	cmp	r3, #8
 80019be:	d102      	bne.n	80019c6 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80019c0:	2308      	movs	r3, #8
 80019c2:	61fb      	str	r3, [r7, #28]
 80019c4:	e037      	b.n	8001a36 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	2b05      	cmp	r3, #5
 80019d0:	d002      	beq.n	80019d8 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b09      	cmp	r3, #9
 80019d6:	d111      	bne.n	80019fc <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	f043 0220 	orr.w	r2, r3, #32
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0b1      	b.n	8001b5a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80019f6:	2304      	movs	r3, #4
 80019f8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80019fa:	e01c      	b.n	8001a36 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a58      	ldr	r2, [pc, #352]	@ (8001b64 <HAL_ADC_PollForConversion+0x1d8>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_ADC_PollForConversion+0x84>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a57      	ldr	r2, [pc, #348]	@ (8001b68 <HAL_ADC_PollForConversion+0x1dc>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_ADC_PollForConversion+0x88>
 8001a10:	4b56      	ldr	r3, [pc, #344]	@ (8001b6c <HAL_ADC_PollForConversion+0x1e0>)
 8001a12:	e000      	b.n	8001a16 <HAL_ADC_PollForConversion+0x8a>
 8001a14:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <HAL_ADC_PollForConversion+0x1e4>)
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fc0a 	bl	8001230 <LL_ADC_GetMultiDMATransfer>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d007      	beq.n	8001a32 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a26:	f043 0220 	orr.w	r2, r3, #32
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e093      	b.n	8001b5a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8001a32:	2304      	movs	r3, #4
 8001a34:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001a36:	f7ff fa85 	bl	8000f44 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a3c:	e021      	b.n	8001a82 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a44:	d01d      	beq.n	8001a82 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001a46:	f7ff fa7d 	bl	8000f44 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d302      	bcc.n	8001a5c <HAL_ADC_PollForConversion+0xd0>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d112      	bne.n	8001a82 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	4013      	ands	r3, r2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10b      	bne.n	8001a82 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a6e:	f043 0204 	orr.w	r2, r3, #4
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e06b      	b.n	8001b5a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0d6      	beq.n	8001a3e <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7ff fb29 	bl	80010f8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d01c      	beq.n	8001ae6 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	7d5b      	ldrb	r3, [r3, #21]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d118      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b08      	cmp	r3, #8
 8001ac0:	d111      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ac6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d105      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ade:	f043 0201 	orr.w	r2, r3, #1
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a1f      	ldr	r2, [pc, #124]	@ (8001b68 <HAL_ADC_PollForConversion+0x1dc>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d002      	beq.n	8001af6 <HAL_ADC_PollForConversion+0x16a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	e000      	b.n	8001af8 <HAL_ADC_PollForConversion+0x16c>
 8001af6:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_ADC_PollForConversion+0x1d8>)
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d008      	beq.n	8001b12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d005      	beq.n	8001b12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d002      	beq.n	8001b12 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	2b09      	cmp	r3, #9
 8001b10:	d104      	bne.n	8001b1c <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
 8001b1a:	e00c      	b.n	8001b36 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a11      	ldr	r2, [pc, #68]	@ (8001b68 <HAL_ADC_PollForConversion+0x1dc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d002      	beq.n	8001b2c <HAL_ADC_PollForConversion+0x1a0>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	e000      	b.n	8001b2e <HAL_ADC_PollForConversion+0x1a2>
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b64 <HAL_ADC_PollForConversion+0x1d8>)
 8001b2e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d104      	bne.n	8001b46 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2208      	movs	r2, #8
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e008      	b.n	8001b58 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d103      	bne.n	8001b58 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	220c      	movs	r2, #12
 8001b56:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3720      	adds	r7, #32
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40022000 	.word	0x40022000
 8001b68:	40022100 	.word	0x40022100
 8001b6c:	40022300 	.word	0x40022300
 8001b70:	58026300 	.word	0x58026300

08001b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
	...

08001b90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b0a1      	sub	sp, #132	@ 0x84
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	4a65      	ldr	r2, [pc, #404]	@ (8001d40 <HAL_ADC_ConfigChannel+0x1b0>)
 8001baa:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d101      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x2a>
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	e32e      	b.n	8002218 <HAL_ADC_ConfigChannel+0x688>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fc04 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 8313 	bne.w	80021fa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db2c      	blt.n	8001c36 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d108      	bne.n	8001bfa <HAL_ADC_ConfigChannel+0x6a>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	0e9b      	lsrs	r3, r3, #26
 8001bee:	f003 031f 	and.w	r3, r3, #31
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	e016      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x98>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c02:	fa93 f3a3 	rbit	r3, r3
 8001c06:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c0a:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001c12:	2320      	movs	r3, #32
 8001c14:	e003      	b.n	8001c1e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001c16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2201      	movs	r2, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	69d1      	ldr	r1, [r2, #28]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6812      	ldr	r2, [r2, #0]
 8001c32:	430b      	orrs	r3, r1
 8001c34:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	6859      	ldr	r1, [r3, #4]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	f7ff fa6b 	bl	800111e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff fbc1 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 8001c52:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fbe3 	bl	8001424 <LL_ADC_INJ_IsConversionOngoing>
 8001c5e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f040 80b8 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001c68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	f040 80b4 	bne.w	8001dd8 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6819      	ldr	r1, [r3, #0]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	f7ff fa7a 	bl	8001176 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001c82:	4b30      	ldr	r3, [pc, #192]	@ (8001d44 <HAL_ADC_ConfigChannel+0x1b4>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8001c8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001c8e:	d10b      	bne.n	8001ca8 <HAL_ADC_ConfigChannel+0x118>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	695a      	ldr	r2, [r3, #20]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	089b      	lsrs	r3, r3, #2
 8001c9c:	f003 0307 	and.w	r3, r3, #7
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	e01d      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x154>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x13e>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	695a      	ldr	r2, [r3, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	e00a      	b.n	8001ce4 <HAL_ADC_ConfigChannel+0x154>
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	695a      	ldr	r2, [r3, #20]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	089b      	lsrs	r3, r3, #2
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d02c      	beq.n	8001d48 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6818      	ldr	r0, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	6919      	ldr	r1, [r3, #16]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001cfc:	f7ff f9a8 	bl	8001050 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6818      	ldr	r0, [r3, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	7e5b      	ldrb	r3, [r3, #25]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d102      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x186>
 8001d10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001d14:	e000      	b.n	8001d18 <HAL_ADC_ConfigChannel+0x188>
 8001d16:	2300      	movs	r3, #0
 8001d18:	461a      	mov	r2, r3
 8001d1a:	f7ff f9d2 	bl	80010c2 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	6919      	ldr	r1, [r3, #16]
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	7e1b      	ldrb	r3, [r3, #24]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d102      	bne.n	8001d34 <HAL_ADC_ConfigChannel+0x1a4>
 8001d2e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d32:	e000      	b.n	8001d36 <HAL_ADC_ConfigChannel+0x1a6>
 8001d34:	2300      	movs	r3, #0
 8001d36:	461a      	mov	r2, r3
 8001d38:	f7ff f9aa 	bl	8001090 <LL_ADC_SetDataRightShift>
 8001d3c:	e04c      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x248>
 8001d3e:	bf00      	nop
 8001d40:	47ff0000 	.word	0x47ff0000
 8001d44:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d4e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	069b      	lsls	r3, r3, #26
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d6a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d107      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d8e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d96:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	069b      	lsls	r3, r3, #26
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d107      	bne.n	8001db4 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001db2:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	069b      	lsls	r3, r3, #26
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dd6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff faab 	bl	8001338 <LL_ADC_IsEnabled>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 8211 	bne.w	800220c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	6819      	ldr	r1, [r3, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	461a      	mov	r2, r3
 8001df8:	f7ff f9e8 	bl	80011cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4aa1      	ldr	r2, [pc, #644]	@ (8002088 <HAL_ADC_ConfigChannel+0x4f8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	f040 812e 	bne.w	8002064 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x2a0>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	0e9b      	lsrs	r3, r3, #26
 8001e1e:	3301      	adds	r3, #1
 8001e20:	f003 031f 	and.w	r3, r3, #31
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	bf94      	ite	ls
 8001e28:	2301      	movls	r3, #1
 8001e2a:	2300      	movhi	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e019      	b.n	8001e64 <HAL_ADC_ConfigChannel+0x2d4>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e36:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8001e3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001e40:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8001e42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d101      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8001e48:	2320      	movs	r3, #32
 8001e4a:	e003      	b.n	8001e54 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8001e4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001e4e:	fab3 f383 	clz	r3, r3
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	3301      	adds	r3, #1
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	2b09      	cmp	r3, #9
 8001e5c:	bf94      	ite	ls
 8001e5e:	2301      	movls	r3, #1
 8001e60:	2300      	movhi	r3, #0
 8001e62:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d079      	beq.n	8001f5c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d107      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x2f4>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	0e9b      	lsrs	r3, r3, #26
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	069b      	lsls	r3, r3, #26
 8001e7e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001e82:	e015      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x320>
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001e8c:	fa93 f3a3 	rbit	r3, r3
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8001e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e94:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8001e96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8001e9c:	2320      	movs	r3, #32
 8001e9e:	e003      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8001ea0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ea2:	fab3 f383 	clz	r3, r3
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	069b      	lsls	r3, r3, #26
 8001eac:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x340>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	0e9b      	lsrs	r3, r3, #26
 8001ec2:	3301      	adds	r3, #1
 8001ec4:	f003 031f 	and.w	r3, r3, #31
 8001ec8:	2101      	movs	r1, #1
 8001eca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ece:	e017      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x370>
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ed8:	fa93 f3a3 	rbit	r3, r3
 8001edc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8001ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001ee0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8001ee2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d101      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8001ee8:	2320      	movs	r3, #32
 8001eea:	e003      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8001eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eee:	fab3 f383 	clz	r3, r3
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f003 031f 	and.w	r3, r3, #31
 8001efa:	2101      	movs	r1, #1
 8001efc:	fa01 f303 	lsl.w	r3, r1, r3
 8001f00:	ea42 0103 	orr.w	r1, r2, r3
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10a      	bne.n	8001f26 <HAL_ADC_ConfigChannel+0x396>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0e9b      	lsrs	r3, r3, #26
 8001f16:	3301      	adds	r3, #1
 8001f18:	f003 021f 	and.w	r2, r3, #31
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	4413      	add	r3, r2
 8001f22:	051b      	lsls	r3, r3, #20
 8001f24:	e018      	b.n	8001f58 <HAL_ADC_ConfigChannel+0x3c8>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8001f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f36:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8001f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8001f3e:	2320      	movs	r3, #32
 8001f40:	e003      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8001f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	f003 021f 	and.w	r2, r3, #31
 8001f50:	4613      	mov	r3, r2
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	4413      	add	r3, r2
 8001f56:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	e07e      	b.n	800205a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_ADC_ConfigChannel+0x3e8>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	3301      	adds	r3, #1
 8001f70:	069b      	lsls	r3, r3, #26
 8001f72:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001f76:	e015      	b.n	8001fa4 <HAL_ADC_ConfigChannel+0x414>
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8001f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d101      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8001f90:	2320      	movs	r3, #32
 8001f92:	e003      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8001f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f96:	fab3 f383 	clz	r3, r3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	069b      	lsls	r3, r3, #26
 8001fa0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d109      	bne.n	8001fc4 <HAL_ADC_ConfigChannel+0x434>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	0e9b      	lsrs	r3, r3, #26
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	f003 031f 	and.w	r3, r3, #31
 8001fbc:	2101      	movs	r1, #1
 8001fbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc2:	e017      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x464>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	fa93 f3a3 	rbit	r3, r3
 8001fd0:	61bb      	str	r3, [r7, #24]
  return result;
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8001fdc:	2320      	movs	r3, #32
 8001fde:	e003      	b.n	8001fe8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	fab3 f383 	clz	r3, r3
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2101      	movs	r1, #1
 8001ff0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff4:	ea42 0103 	orr.w	r1, r2, r3
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10d      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x490>
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	0e9b      	lsrs	r3, r3, #26
 800200a:	3301      	adds	r3, #1
 800200c:	f003 021f 	and.w	r2, r3, #31
 8002010:	4613      	mov	r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	4413      	add	r3, r2
 8002016:	3b1e      	subs	r3, #30
 8002018:	051b      	lsls	r3, r3, #20
 800201a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800201e:	e01b      	b.n	8002058 <HAL_ADC_ConfigChannel+0x4c8>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	60fb      	str	r3, [r7, #12]
  return result;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002038:	2320      	movs	r3, #32
 800203a:	e003      	b.n	8002044 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	b2db      	uxtb	r3, r3
 8002044:	3301      	adds	r3, #1
 8002046:	f003 021f 	and.w	r2, r3, #31
 800204a:	4613      	mov	r3, r2
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	4413      	add	r3, r2
 8002050:	3b1e      	subs	r3, #30
 8002052:	051b      	lsls	r3, r3, #20
 8002054:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002058:	430b      	orrs	r3, r1
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	6892      	ldr	r2, [r2, #8]
 800205e:	4619      	mov	r1, r3
 8002060:	f7ff f889 	bl	8001176 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f280 80cf 	bge.w	800220c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a06      	ldr	r2, [pc, #24]	@ (800208c <HAL_ADC_ConfigChannel+0x4fc>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_ADC_ConfigChannel+0x4f2>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a04      	ldr	r2, [pc, #16]	@ (8002090 <HAL_ADC_ConfigChannel+0x500>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d10a      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x508>
 8002082:	4b04      	ldr	r3, [pc, #16]	@ (8002094 <HAL_ADC_ConfigChannel+0x504>)
 8002084:	e009      	b.n	800209a <HAL_ADC_ConfigChannel+0x50a>
 8002086:	bf00      	nop
 8002088:	47ff0000 	.word	0x47ff0000
 800208c:	40022000 	.word	0x40022000
 8002090:	40022100 	.word	0x40022100
 8002094:	40022300 	.word	0x40022300
 8002098:	4b61      	ldr	r3, [pc, #388]	@ (8002220 <HAL_ADC_ConfigChannel+0x690>)
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe ffca 	bl	8001034 <LL_ADC_GetCommonPathInternalCh>
 80020a0:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5f      	ldr	r2, [pc, #380]	@ (8002224 <HAL_ADC_ConfigChannel+0x694>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d004      	beq.n	80020b6 <HAL_ADC_ConfigChannel+0x526>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5d      	ldr	r2, [pc, #372]	@ (8002228 <HAL_ADC_ConfigChannel+0x698>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10e      	bne.n	80020d4 <HAL_ADC_ConfigChannel+0x544>
 80020b6:	485b      	ldr	r0, [pc, #364]	@ (8002224 <HAL_ADC_ConfigChannel+0x694>)
 80020b8:	f7ff f93e 	bl	8001338 <LL_ADC_IsEnabled>
 80020bc:	4604      	mov	r4, r0
 80020be:	485a      	ldr	r0, [pc, #360]	@ (8002228 <HAL_ADC_ConfigChannel+0x698>)
 80020c0:	f7ff f93a 	bl	8001338 <LL_ADC_IsEnabled>
 80020c4:	4603      	mov	r3, r0
 80020c6:	4323      	orrs	r3, r4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	e008      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x556>
 80020d4:	4855      	ldr	r0, [pc, #340]	@ (800222c <HAL_ADC_ConfigChannel+0x69c>)
 80020d6:	f7ff f92f 	bl	8001338 <LL_ADC_IsEnabled>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf0c      	ite	eq
 80020e0:	2301      	moveq	r3, #1
 80020e2:	2300      	movne	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d07d      	beq.n	80021e6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a50      	ldr	r2, [pc, #320]	@ (8002230 <HAL_ADC_ConfigChannel+0x6a0>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d130      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x5c6>
 80020f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80020f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d12b      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a4a      	ldr	r2, [pc, #296]	@ (800222c <HAL_ADC_ConfigChannel+0x69c>)
 8002104:	4293      	cmp	r3, r2
 8002106:	f040 8081 	bne.w	800220c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a45      	ldr	r2, [pc, #276]	@ (8002224 <HAL_ADC_ConfigChannel+0x694>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d004      	beq.n	800211e <HAL_ADC_ConfigChannel+0x58e>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a43      	ldr	r2, [pc, #268]	@ (8002228 <HAL_ADC_ConfigChannel+0x698>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x592>
 800211e:	4a45      	ldr	r2, [pc, #276]	@ (8002234 <HAL_ADC_ConfigChannel+0x6a4>)
 8002120:	e000      	b.n	8002124 <HAL_ADC_ConfigChannel+0x594>
 8002122:	4a3f      	ldr	r2, [pc, #252]	@ (8002220 <HAL_ADC_ConfigChannel+0x690>)
 8002124:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002126:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800212a:	4619      	mov	r1, r3
 800212c:	4610      	mov	r0, r2
 800212e:	f7fe ff6e 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <HAL_ADC_ConfigChannel+0x6a8>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	099b      	lsrs	r3, r3, #6
 8002138:	4a40      	ldr	r2, [pc, #256]	@ (800223c <HAL_ADC_ConfigChannel+0x6ac>)
 800213a:	fba2 2303 	umull	r2, r3, r2, r3
 800213e:	099b      	lsrs	r3, r3, #6
 8002140:	3301      	adds	r3, #1
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002146:	e002      	b.n	800214e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	3b01      	subs	r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f9      	bne.n	8002148 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002154:	e05a      	b.n	800220c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a39      	ldr	r2, [pc, #228]	@ (8002240 <HAL_ADC_ConfigChannel+0x6b0>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d11e      	bne.n	800219e <HAL_ADC_ConfigChannel+0x60e>
 8002160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002162:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d119      	bne.n	800219e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2f      	ldr	r2, [pc, #188]	@ (800222c <HAL_ADC_ConfigChannel+0x69c>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d14b      	bne.n	800220c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_ADC_ConfigChannel+0x694>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d004      	beq.n	8002188 <HAL_ADC_ConfigChannel+0x5f8>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a29      	ldr	r2, [pc, #164]	@ (8002228 <HAL_ADC_ConfigChannel+0x698>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_ADC_ConfigChannel+0x5fc>
 8002188:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <HAL_ADC_ConfigChannel+0x6a4>)
 800218a:	e000      	b.n	800218e <HAL_ADC_ConfigChannel+0x5fe>
 800218c:	4a24      	ldr	r2, [pc, #144]	@ (8002220 <HAL_ADC_ConfigChannel+0x690>)
 800218e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002190:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002194:	4619      	mov	r1, r3
 8002196:	4610      	mov	r0, r2
 8002198:	f7fe ff39 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800219c:	e036      	b.n	800220c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a28      	ldr	r2, [pc, #160]	@ (8002244 <HAL_ADC_ConfigChannel+0x6b4>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d131      	bne.n	800220c <HAL_ADC_ConfigChannel+0x67c>
 80021a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d12c      	bne.n	800220c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <HAL_ADC_ConfigChannel+0x69c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d127      	bne.n	800220c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a18      	ldr	r2, [pc, #96]	@ (8002224 <HAL_ADC_ConfigChannel+0x694>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d004      	beq.n	80021d0 <HAL_ADC_ConfigChannel+0x640>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a17      	ldr	r2, [pc, #92]	@ (8002228 <HAL_ADC_ConfigChannel+0x698>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x644>
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_ADC_ConfigChannel+0x6a4>)
 80021d2:	e000      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x646>
 80021d4:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <HAL_ADC_ConfigChannel+0x690>)
 80021d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021d8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021dc:	4619      	mov	r1, r3
 80021de:	4610      	mov	r0, r2
 80021e0:	f7fe ff15 	bl	800100e <LL_ADC_SetCommonPathInternalCh>
 80021e4:	e012      	b.n	800220c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021ea:	f043 0220 	orr.w	r2, r3, #32
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80021f8:	e008      	b.n	800220c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021fe:	f043 0220 	orr.w	r2, r3, #32
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002214:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002218:	4618      	mov	r0, r3
 800221a:	3784      	adds	r7, #132	@ 0x84
 800221c:	46bd      	mov	sp, r7
 800221e:	bd90      	pop	{r4, r7, pc}
 8002220:	58026300 	.word	0x58026300
 8002224:	40022000 	.word	0x40022000
 8002228:	40022100 	.word	0x40022100
 800222c:	58026000 	.word	0x58026000
 8002230:	cb840000 	.word	0xcb840000
 8002234:	40022300 	.word	0x40022300
 8002238:	24000000 	.word	0x24000000
 800223c:	053e2d63 	.word	0x053e2d63
 8002240:	c7520000 	.word	0xc7520000
 8002244:	cfb80000 	.word	0xcfb80000

08002248 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f7ff f8b8 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 8002264:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f8da 	bl	8001424 <LL_ADC_INJ_IsConversionOngoing>
 8002270:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d103      	bne.n	8002280 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2b00      	cmp	r3, #0
 800227c:	f000 8098 	beq.w	80023b0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d02a      	beq.n	80022e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	7d5b      	ldrb	r3, [r3, #21]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d126      	bne.n	80022e4 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7d1b      	ldrb	r3, [r3, #20]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d122      	bne.n	80022e4 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800229e:	2301      	movs	r3, #1
 80022a0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022a2:	e014      	b.n	80022ce <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	4a45      	ldr	r2, [pc, #276]	@ (80023bc <ADC_ConversionStop+0x174>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d90d      	bls.n	80022c8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022b0:	f043 0210 	orr.w	r2, r3, #16
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	f043 0201 	orr.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e074      	b.n	80023b2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	3301      	adds	r3, #1
 80022cc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022d8:	2b40      	cmp	r3, #64	@ 0x40
 80022da:	d1e3      	bne.n	80022a4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2240      	movs	r2, #64	@ 0x40
 80022e2:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d014      	beq.n	8002314 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7ff f870 	bl	80013d4 <LL_ADC_REG_IsConversionOngoing>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff f82d 	bl	800135e <LL_ADC_IsDisableOngoing>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d104      	bne.n	8002314 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f84c 	bl	80013ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d014      	beq.n	8002344 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff f880 	bl	8001424 <LL_ADC_INJ_IsConversionOngoing>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00c      	beq.n	8002344 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff f815 	bl	800135e <LL_ADC_IsDisableOngoing>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d104      	bne.n	8002344 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f7ff f85c 	bl	80013fc <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b02      	cmp	r3, #2
 8002348:	d005      	beq.n	8002356 <ADC_ConversionStop+0x10e>
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	2b03      	cmp	r3, #3
 800234e:	d105      	bne.n	800235c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002350:	230c      	movs	r3, #12
 8002352:	617b      	str	r3, [r7, #20]
        break;
 8002354:	e005      	b.n	8002362 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002356:	2308      	movs	r3, #8
 8002358:	617b      	str	r3, [r7, #20]
        break;
 800235a:	e002      	b.n	8002362 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800235c:	2304      	movs	r3, #4
 800235e:	617b      	str	r3, [r7, #20]
        break;
 8002360:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002362:	f7fe fdef 	bl	8000f44 <HAL_GetTick>
 8002366:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002368:	e01b      	b.n	80023a2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800236a:	f7fe fdeb 	bl	8000f44 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b05      	cmp	r3, #5
 8002376:	d914      	bls.n	80023a2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00d      	beq.n	80023a2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800238a:	f043 0210 	orr.w	r2, r3, #16
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	f043 0201 	orr.w	r2, r3, #1
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e007      	b.n	80023b2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	689a      	ldr	r2, [r3, #8]
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4013      	ands	r3, r2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1dc      	bne.n	800236a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3720      	adds	r7, #32
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	000cdbff 	.word	0x000cdbff

080023c0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe ffb3 	bl	8001338 <LL_ADC_IsEnabled>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d16e      	bne.n	80024b6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	4b38      	ldr	r3, [pc, #224]	@ (80024c0 <ADC_Enable+0x100>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ea:	f043 0210 	orr.w	r2, r3, #16
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f6:	f043 0201 	orr.w	r2, r3, #1
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e05a      	b.n	80024b8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe ff6e 	bl	80012e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800240c:	f7fe fd9a 	bl	8000f44 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <ADC_Enable+0x104>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <ADC_Enable+0x66>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a29      	ldr	r2, [pc, #164]	@ (80024c8 <ADC_Enable+0x108>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d101      	bne.n	800242a <ADC_Enable+0x6a>
 8002426:	4b29      	ldr	r3, [pc, #164]	@ (80024cc <ADC_Enable+0x10c>)
 8002428:	e000      	b.n	800242c <ADC_Enable+0x6c>
 800242a:	4b29      	ldr	r3, [pc, #164]	@ (80024d0 <ADC_Enable+0x110>)
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fef1 	bl	8001214 <LL_ADC_GetMultimode>
 8002432:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a23      	ldr	r2, [pc, #140]	@ (80024c8 <ADC_Enable+0x108>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d002      	beq.n	8002444 <ADC_Enable+0x84>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	e000      	b.n	8002446 <ADC_Enable+0x86>
 8002444:	4b1f      	ldr	r3, [pc, #124]	@ (80024c4 <ADC_Enable+0x104>)
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	6812      	ldr	r2, [r2, #0]
 800244a:	4293      	cmp	r3, r2
 800244c:	d02c      	beq.n	80024a8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d130      	bne.n	80024b6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002454:	e028      	b.n	80024a8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe ff6c 	bl	8001338 <LL_ADC_IsEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f7fe ff3c 	bl	80012e8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002470:	f7fe fd68 	bl	8000f44 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d914      	bls.n	80024a8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0301 	and.w	r3, r3, #1
 8002488:	2b01      	cmp	r3, #1
 800248a:	d00d      	beq.n	80024a8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002490:	f043 0210 	orr.w	r2, r3, #16
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249c:	f043 0201 	orr.w	r2, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e007      	b.n	80024b8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d1cf      	bne.n	8002456 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3710      	adds	r7, #16
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	8000003f 	.word	0x8000003f
 80024c4:	40022000 	.word	0x40022000
 80024c8:	40022100 	.word	0x40022100
 80024cc:	40022300 	.word	0x40022300
 80024d0:	58026300 	.word	0x58026300

080024d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4618      	mov	r0, r3
 80024e2:	f7fe ff3c 	bl	800135e <LL_ADC_IsDisableOngoing>
 80024e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f7fe ff23 	bl	8001338 <LL_ADC_IsEnabled>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d047      	beq.n	8002588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d144      	bne.n	8002588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	689b      	ldr	r3, [r3, #8]
 8002504:	f003 030d 	and.w	r3, r3, #13
 8002508:	2b01      	cmp	r3, #1
 800250a:	d10c      	bne.n	8002526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe fefd 	bl	8001310 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2203      	movs	r2, #3
 800251c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800251e:	f7fe fd11 	bl	8000f44 <HAL_GetTick>
 8002522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002524:	e029      	b.n	800257a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800252a:	f043 0210 	orr.w	r2, r3, #16
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f043 0201 	orr.w	r2, r3, #1
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e023      	b.n	800258a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002542:	f7fe fcff 	bl	8000f44 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d914      	bls.n	800257a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002562:	f043 0210 	orr.w	r2, r3, #16
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800256e:	f043 0201 	orr.w	r2, r3, #1
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e007      	b.n	800258a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1dc      	bne.n	8002542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
	...

08002594 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a7a      	ldr	r2, [pc, #488]	@ (800278c <ADC_ConfigureBoostMode+0x1f8>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d004      	beq.n	80025b0 <ADC_ConfigureBoostMode+0x1c>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a79      	ldr	r2, [pc, #484]	@ (8002790 <ADC_ConfigureBoostMode+0x1fc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d109      	bne.n	80025c4 <ADC_ConfigureBoostMode+0x30>
 80025b0:	4b78      	ldr	r3, [pc, #480]	@ (8002794 <ADC_ConfigureBoostMode+0x200>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	bf14      	ite	ne
 80025bc:	2301      	movne	r3, #1
 80025be:	2300      	moveq	r3, #0
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	e008      	b.n	80025d6 <ADC_ConfigureBoostMode+0x42>
 80025c4:	4b74      	ldr	r3, [pc, #464]	@ (8002798 <ADC_ConfigureBoostMode+0x204>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	bf14      	ite	ne
 80025d0:	2301      	movne	r3, #1
 80025d2:	2300      	moveq	r3, #0
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d01c      	beq.n	8002614 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80025da:	f001 fbb7 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 80025de:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025e8:	d010      	beq.n	800260c <ADC_ConfigureBoostMode+0x78>
 80025ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80025ee:	d873      	bhi.n	80026d8 <ADC_ConfigureBoostMode+0x144>
 80025f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f4:	d002      	beq.n	80025fc <ADC_ConfigureBoostMode+0x68>
 80025f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80025fa:	d16d      	bne.n	80026d8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	0c1b      	lsrs	r3, r3, #16
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	60fb      	str	r3, [r7, #12]
        break;
 800260a:	e068      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	089b      	lsrs	r3, r3, #2
 8002610:	60fb      	str	r3, [r7, #12]
        break;
 8002612:	e064      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002614:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8002618:	f04f 0100 	mov.w	r1, #0
 800261c:	f002 fdfc 	bl	8005218 <HAL_RCCEx_GetPeriphCLKFreq>
 8002620:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800262a:	d051      	beq.n	80026d0 <ADC_ConfigureBoostMode+0x13c>
 800262c:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8002630:	d854      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002632:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8002636:	d047      	beq.n	80026c8 <ADC_ConfigureBoostMode+0x134>
 8002638:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800263c:	d84e      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800263e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002642:	d03d      	beq.n	80026c0 <ADC_ConfigureBoostMode+0x12c>
 8002644:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8002648:	d848      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800264a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800264e:	d033      	beq.n	80026b8 <ADC_ConfigureBoostMode+0x124>
 8002650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002654:	d842      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002656:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 800265a:	d029      	beq.n	80026b0 <ADC_ConfigureBoostMode+0x11c>
 800265c:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8002660:	d83c      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002662:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8002666:	d01a      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002668:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800266c:	d836      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800266e:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002672:	d014      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002674:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8002678:	d830      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 800267a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800267e:	d00e      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002680:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002684:	d82a      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002686:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800268a:	d008      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 800268c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002690:	d824      	bhi.n	80026dc <ADC_ConfigureBoostMode+0x148>
 8002692:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002696:	d002      	beq.n	800269e <ADC_ConfigureBoostMode+0x10a>
 8002698:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800269c:	d11e      	bne.n	80026dc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	0c9b      	lsrs	r3, r3, #18
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ac:	60fb      	str	r3, [r7, #12]
        break;
 80026ae:	e016      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	091b      	lsrs	r3, r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
        break;
 80026b6:	e012      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	095b      	lsrs	r3, r3, #5
 80026bc:	60fb      	str	r3, [r7, #12]
        break;
 80026be:	e00e      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	099b      	lsrs	r3, r3, #6
 80026c4:	60fb      	str	r3, [r7, #12]
        break;
 80026c6:	e00a      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	09db      	lsrs	r3, r3, #7
 80026cc:	60fb      	str	r3, [r7, #12]
        break;
 80026ce:	e006      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	0a1b      	lsrs	r3, r3, #8
 80026d4:	60fb      	str	r3, [r7, #12]
        break;
 80026d6:	e002      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
        break;
 80026d8:	bf00      	nop
 80026da:	e000      	b.n	80026de <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80026dc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80026de:	f7fe fc61 	bl	8000fa4 <HAL_GetREVID>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d815      	bhi.n	8002718 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a2b      	ldr	r2, [pc, #172]	@ (800279c <ADC_ConfigureBoostMode+0x208>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d908      	bls.n	8002706 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002702:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002704:	e03e      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002714:	609a      	str	r2, [r3, #8]
}
 8002716:	e035      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	085b      	lsrs	r3, r3, #1
 800271c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	4a1f      	ldr	r2, [pc, #124]	@ (80027a0 <ADC_ConfigureBoostMode+0x20c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d808      	bhi.n	8002738 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8002734:	609a      	str	r2, [r3, #8]
}
 8002736:	e025      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a1a      	ldr	r2, [pc, #104]	@ (80027a4 <ADC_ConfigureBoostMode+0x210>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d80a      	bhi.n	8002756 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002752:	609a      	str	r2, [r3, #8]
}
 8002754:	e016      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a13      	ldr	r2, [pc, #76]	@ (80027a8 <ADC_ConfigureBoostMode+0x214>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d80a      	bhi.n	8002774 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002770:	609a      	str	r2, [r3, #8]
}
 8002772:	e007      	b.n	8002784 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40022000 	.word	0x40022000
 8002790:	40022100 	.word	0x40022100
 8002794:	40022300 	.word	0x40022300
 8002798:	58026300 	.word	0x58026300
 800279c:	01312d00 	.word	0x01312d00
 80027a0:	005f5e10 	.word	0x005f5e10
 80027a4:	00bebc20 	.word	0x00bebc20
 80027a8:	017d7840 	.word	0x017d7840

080027ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f003 0307 	and.w	r3, r3, #7
 80027ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027bc:	4b0b      	ldr	r3, [pc, #44]	@ (80027ec <__NVIC_SetPriorityGrouping+0x40>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027c2:	68ba      	ldr	r2, [r7, #8]
 80027c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027c8:	4013      	ands	r3, r2
 80027ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80027d4:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <__NVIC_SetPriorityGrouping+0x44>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027da:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <__NVIC_SetPriorityGrouping+0x40>)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	60d3      	str	r3, [r2, #12]
}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	e000ed00 	.word	0xe000ed00
 80027f0:	05fa0000 	.word	0x05fa0000

080027f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027f8:	4b04      	ldr	r3, [pc, #16]	@ (800280c <__NVIC_GetPriorityGrouping+0x18>)
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	0a1b      	lsrs	r3, r3, #8
 80027fe:	f003 0307 	and.w	r3, r3, #7
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	e000ed00 	.word	0xe000ed00

08002810 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	6039      	str	r1, [r7, #0]
 800281a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800281c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002820:	2b00      	cmp	r3, #0
 8002822:	db0a      	blt.n	800283a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	b2da      	uxtb	r2, r3
 8002828:	490c      	ldr	r1, [pc, #48]	@ (800285c <__NVIC_SetPriority+0x4c>)
 800282a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800282e:	0112      	lsls	r2, r2, #4
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	440b      	add	r3, r1
 8002834:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002838:	e00a      	b.n	8002850 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	b2da      	uxtb	r2, r3
 800283e:	4908      	ldr	r1, [pc, #32]	@ (8002860 <__NVIC_SetPriority+0x50>)
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	3b04      	subs	r3, #4
 8002848:	0112      	lsls	r2, r2, #4
 800284a:	b2d2      	uxtb	r2, r2
 800284c:	440b      	add	r3, r1
 800284e:	761a      	strb	r2, [r3, #24]
}
 8002850:	bf00      	nop
 8002852:	370c      	adds	r7, #12
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000e100 	.word	0xe000e100
 8002860:	e000ed00 	.word	0xe000ed00

08002864 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002864:	b480      	push	{r7}
 8002866:	b089      	sub	sp, #36	@ 0x24
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f1c3 0307 	rsb	r3, r3, #7
 800287e:	2b04      	cmp	r3, #4
 8002880:	bf28      	it	cs
 8002882:	2304      	movcs	r3, #4
 8002884:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3304      	adds	r3, #4
 800288a:	2b06      	cmp	r3, #6
 800288c:	d902      	bls.n	8002894 <NVIC_EncodePriority+0x30>
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3b03      	subs	r3, #3
 8002892:	e000      	b.n	8002896 <NVIC_EncodePriority+0x32>
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	f04f 32ff 	mov.w	r2, #4294967295
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	fa02 f303 	lsl.w	r3, r2, r3
 80028a2:	43da      	mvns	r2, r3
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	401a      	ands	r2, r3
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	fa01 f303 	lsl.w	r3, r1, r3
 80028b6:	43d9      	mvns	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028bc:	4313      	orrs	r3, r2
         );
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
	...

080028cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028dc:	d301      	bcc.n	80028e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028de:	2301      	movs	r3, #1
 80028e0:	e00f      	b.n	8002902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028e2:	4a0a      	ldr	r2, [pc, #40]	@ (800290c <SysTick_Config+0x40>)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ea:	210f      	movs	r1, #15
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295
 80028f0:	f7ff ff8e 	bl	8002810 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <SysTick_Config+0x40>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028fa:	4b04      	ldr	r3, [pc, #16]	@ (800290c <SysTick_Config+0x40>)
 80028fc:	2207      	movs	r2, #7
 80028fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	e000e010 	.word	0xe000e010

08002910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff ff47 	bl	80027ac <__NVIC_SetPriorityGrouping>
}
 800291e:	bf00      	nop
 8002920:	3708      	adds	r7, #8
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b086      	sub	sp, #24
 800292a:	af00      	add	r7, sp, #0
 800292c:	4603      	mov	r3, r0
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002934:	f7ff ff5e 	bl	80027f4 <__NVIC_GetPriorityGrouping>
 8002938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff90 	bl	8002864 <NVIC_EncodePriority>
 8002944:	4602      	mov	r2, r0
 8002946:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff5f 	bl	8002810 <__NVIC_SetPriority>
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffb2 	bl	80028cc <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
	...

08002974 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8002978:	f3bf 8f5f 	dmb	sy
}
 800297c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800297e:	4b07      	ldr	r3, [pc, #28]	@ (800299c <HAL_MPU_Disable+0x28>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	4a06      	ldr	r2, [pc, #24]	@ (800299c <HAL_MPU_Disable+0x28>)
 8002984:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002988:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800298a:	4b05      	ldr	r3, [pc, #20]	@ (80029a0 <HAL_MPU_Disable+0x2c>)
 800298c:	2200      	movs	r2, #0
 800298e:	605a      	str	r2, [r3, #4]
}
 8002990:	bf00      	nop
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	e000ed00 	.word	0xe000ed00
 80029a0:	e000ed90 	.word	0xe000ed90

080029a4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80029ac:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_MPU_Enable+0x38>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	@ (80029e0 <HAL_MPU_Enable+0x3c>)
 80029b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_MPU_Enable+0x3c>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80029c2:	f3bf 8f4f 	dsb	sy
}
 80029c6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80029c8:	f3bf 8f6f 	isb	sy
}
 80029cc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80029ce:	bf00      	nop
 80029d0:	370c      	adds	r7, #12
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed90 	.word	0xe000ed90
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	785a      	ldrb	r2, [r3, #1]
 80029f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_MPU_ConfigRegion+0x7c>)
 80029f2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80029f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002a60 <HAL_MPU_ConfigRegion+0x7c>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4a19      	ldr	r2, [pc, #100]	@ (8002a60 <HAL_MPU_ConfigRegion+0x7c>)
 80029fa:	f023 0301 	bic.w	r3, r3, #1
 80029fe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8002a00:	4a17      	ldr	r2, [pc, #92]	@ (8002a60 <HAL_MPU_ConfigRegion+0x7c>)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	7b1b      	ldrb	r3, [r3, #12]
 8002a0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	7adb      	ldrb	r3, [r3, #11]
 8002a12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	7a9b      	ldrb	r3, [r3, #10]
 8002a1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002a1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	7b5b      	ldrb	r3, [r3, #13]
 8002a22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8002a24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7b9b      	ldrb	r3, [r3, #14]
 8002a2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002a2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	7bdb      	ldrb	r3, [r3, #15]
 8002a32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8002a34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	7a5b      	ldrb	r3, [r3, #9]
 8002a3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002a3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	7a1b      	ldrb	r3, [r3, #8]
 8002a42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8002a44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	7812      	ldrb	r2, [r2, #0]
 8002a4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a4c:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002a4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002a50:	6113      	str	r3, [r2, #16]
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	e000ed90 	.word	0xe000ed90

08002a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	@ 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a72:	4b89      	ldr	r3, [pc, #548]	@ (8002c98 <HAL_GPIO_Init+0x234>)
 8002a74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a76:	e194      	b.n	8002da2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa01 f303 	lsl.w	r3, r1, r3
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8186 	beq.w	8002d9c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d005      	beq.n	8002aa8 <HAL_GPIO_Init+0x44>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 0303 	and.w	r3, r3, #3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d130      	bne.n	8002b0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	2203      	movs	r2, #3
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	68da      	ldr	r2, [r3, #12]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ade:	2201      	movs	r2, #1
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	091b      	lsrs	r3, r3, #4
 8002af4:	f003 0201 	and.w	r2, r3, #1
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d017      	beq.n	8002b46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	2203      	movs	r2, #3
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d123      	bne.n	8002b9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	08da      	lsrs	r2, r3, #3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3208      	adds	r2, #8
 8002b5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	220f      	movs	r2, #15
 8002b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	4013      	ands	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	691a      	ldr	r2, [r3, #16]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	fa02 f303 	lsl.w	r3, r2, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	08da      	lsrs	r2, r3, #3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3208      	adds	r2, #8
 8002b94:	69b9      	ldr	r1, [r7, #24]
 8002b96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43db      	mvns	r3, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 0203 	and.w	r2, r3, #3
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 80e0 	beq.w	8002d9c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bdc:	4b2f      	ldr	r3, [pc, #188]	@ (8002c9c <HAL_GPIO_Init+0x238>)
 8002bde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002be2:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <HAL_GPIO_Init+0x238>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002bec:	4b2b      	ldr	r3, [pc, #172]	@ (8002c9c <HAL_GPIO_Init+0x238>)
 8002bee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a29      	ldr	r2, [pc, #164]	@ (8002ca0 <HAL_GPIO_Init+0x23c>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a20      	ldr	r2, [pc, #128]	@ (8002ca4 <HAL_GPIO_Init+0x240>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d052      	beq.n	8002ccc <HAL_GPIO_Init+0x268>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca8 <HAL_GPIO_Init+0x244>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d031      	beq.n	8002c92 <HAL_GPIO_Init+0x22e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a1e      	ldr	r2, [pc, #120]	@ (8002cac <HAL_GPIO_Init+0x248>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d02b      	beq.n	8002c8e <HAL_GPIO_Init+0x22a>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb0 <HAL_GPIO_Init+0x24c>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d025      	beq.n	8002c8a <HAL_GPIO_Init+0x226>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1c      	ldr	r2, [pc, #112]	@ (8002cb4 <HAL_GPIO_Init+0x250>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d01f      	beq.n	8002c86 <HAL_GPIO_Init+0x222>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1b      	ldr	r2, [pc, #108]	@ (8002cb8 <HAL_GPIO_Init+0x254>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d019      	beq.n	8002c82 <HAL_GPIO_Init+0x21e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1a      	ldr	r2, [pc, #104]	@ (8002cbc <HAL_GPIO_Init+0x258>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d013      	beq.n	8002c7e <HAL_GPIO_Init+0x21a>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a19      	ldr	r2, [pc, #100]	@ (8002cc0 <HAL_GPIO_Init+0x25c>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00d      	beq.n	8002c7a <HAL_GPIO_Init+0x216>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a18      	ldr	r2, [pc, #96]	@ (8002cc4 <HAL_GPIO_Init+0x260>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <HAL_GPIO_Init+0x212>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a17      	ldr	r2, [pc, #92]	@ (8002cc8 <HAL_GPIO_Init+0x264>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d101      	bne.n	8002c72 <HAL_GPIO_Init+0x20e>
 8002c6e:	2309      	movs	r3, #9
 8002c70:	e02d      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c72:	230a      	movs	r3, #10
 8002c74:	e02b      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e029      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c7a:	2307      	movs	r3, #7
 8002c7c:	e027      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c7e:	2306      	movs	r3, #6
 8002c80:	e025      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c82:	2305      	movs	r3, #5
 8002c84:	e023      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c86:	2304      	movs	r3, #4
 8002c88:	e021      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e01f      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e01d      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c92:	2301      	movs	r3, #1
 8002c94:	e01b      	b.n	8002cce <HAL_GPIO_Init+0x26a>
 8002c96:	bf00      	nop
 8002c98:	58000080 	.word	0x58000080
 8002c9c:	58024400 	.word	0x58024400
 8002ca0:	58000400 	.word	0x58000400
 8002ca4:	58020000 	.word	0x58020000
 8002ca8:	58020400 	.word	0x58020400
 8002cac:	58020800 	.word	0x58020800
 8002cb0:	58020c00 	.word	0x58020c00
 8002cb4:	58021000 	.word	0x58021000
 8002cb8:	58021400 	.word	0x58021400
 8002cbc:	58021800 	.word	0x58021800
 8002cc0:	58021c00 	.word	0x58021c00
 8002cc4:	58022000 	.word	0x58022000
 8002cc8:	58022400 	.word	0x58022400
 8002ccc:	2300      	movs	r3, #0
 8002cce:	69fa      	ldr	r2, [r7, #28]
 8002cd0:	f002 0203 	and.w	r2, r2, #3
 8002cd4:	0092      	lsls	r2, r2, #2
 8002cd6:	4093      	lsls	r3, r2
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cde:	4938      	ldr	r1, [pc, #224]	@ (8002dc0 <HAL_GPIO_Init+0x35c>)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	089b      	lsrs	r3, r3, #2
 8002ce4:	3302      	adds	r3, #2
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d003      	beq.n	8002d12 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002d12:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002d1a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002d40:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	43db      	mvns	r3, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d003      	beq.n	8002d96 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	69ba      	ldr	r2, [r7, #24]
 8002d9a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f47f ae63 	bne.w	8002a78 <HAL_GPIO_Init+0x14>
  }
}
 8002db2:	bf00      	nop
 8002db4:	bf00      	nop
 8002db6:	3724      	adds	r7, #36	@ 0x24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	58000400 	.word	0x58000400

08002dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dcc:	4b19      	ldr	r3, [pc, #100]	@ (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	f003 0304 	and.w	r3, r3, #4
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d00a      	beq.n	8002dee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dd8:	4b16      	ldr	r3, [pc, #88]	@ (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d001      	beq.n	8002dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e01f      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	e01d      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dee:	4b11      	ldr	r3, [pc, #68]	@ (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f023 0207 	bic.w	r2, r3, #7
 8002df6:	490f      	ldr	r1, [pc, #60]	@ (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dfe:	f7fe f8a1 	bl	8000f44 <HAL_GetTick>
 8002e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e04:	e009      	b.n	8002e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002e06:	f7fe f89d 	bl	8000f44 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e14:	d901      	bls.n	8002e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e007      	b.n	8002e2a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e1a:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_PWREx_ConfigSupply+0x70>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e26:	d1ee      	bne.n	8002e06 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	58024800 	.word	0x58024800

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b08c      	sub	sp, #48	@ 0x30
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	f000 bc48 	b.w	80036dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8088 	beq.w	8002f6a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e5a:	4b99      	ldr	r3, [pc, #612]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e64:	4b96      	ldr	r3, [pc, #600]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e6c:	2b10      	cmp	r3, #16
 8002e6e:	d007      	beq.n	8002e80 <HAL_RCC_OscConfig+0x48>
 8002e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e72:	2b18      	cmp	r3, #24
 8002e74:	d111      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d10c      	bne.n	8002e9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e80:	4b8f      	ldr	r3, [pc, #572]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d06d      	beq.n	8002f68 <HAL_RCC_OscConfig+0x130>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d169      	bne.n	8002f68 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	f000 bc21 	b.w	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x7a>
 8002ea4:	4b86      	ldr	r3, [pc, #536]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a85      	ldr	r2, [pc, #532]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e02e      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x9c>
 8002eba:	4b81      	ldr	r3, [pc, #516]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a80      	ldr	r2, [pc, #512]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4b7e      	ldr	r3, [pc, #504]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a7d      	ldr	r2, [pc, #500]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e01d      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002edc:	d10c      	bne.n	8002ef8 <HAL_RCC_OscConfig+0xc0>
 8002ede:	4b78      	ldr	r3, [pc, #480]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a77      	ldr	r2, [pc, #476]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ee8:	6013      	str	r3, [r2, #0]
 8002eea:	4b75      	ldr	r3, [pc, #468]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a74      	ldr	r2, [pc, #464]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	e00b      	b.n	8002f10 <HAL_RCC_OscConfig+0xd8>
 8002ef8:	4b71      	ldr	r3, [pc, #452]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a70      	ldr	r2, [pc, #448]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	4b6e      	ldr	r3, [pc, #440]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a6d      	ldr	r2, [pc, #436]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d013      	beq.n	8002f40 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7fe f814 	bl	8000f44 <HAL_GetTick>
 8002f1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f20:	f7fe f810 	bl	8000f44 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b64      	cmp	r3, #100	@ 0x64
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e3d4      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f32:	4b63      	ldr	r3, [pc, #396]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d0f0      	beq.n	8002f20 <HAL_RCC_OscConfig+0xe8>
 8002f3e:	e014      	b.n	8002f6a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f40:	f7fe f800 	bl	8000f44 <HAL_GetTick>
 8002f44:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f46:	e008      	b.n	8002f5a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f48:	f7fd fffc 	bl	8000f44 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b64      	cmp	r3, #100	@ 0x64
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e3c0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f5a:	4b59      	ldr	r3, [pc, #356]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1f0      	bne.n	8002f48 <HAL_RCC_OscConfig+0x110>
 8002f66:	e000      	b.n	8002f6a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f000 80ca 	beq.w	800310c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f78:	4b51      	ldr	r3, [pc, #324]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f80:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f82:	4b4f      	ldr	r3, [pc, #316]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f86:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d007      	beq.n	8002f9e <HAL_RCC_OscConfig+0x166>
 8002f8e:	6a3b      	ldr	r3, [r7, #32]
 8002f90:	2b18      	cmp	r3, #24
 8002f92:	d156      	bne.n	8003042 <HAL_RCC_OscConfig+0x20a>
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d151      	bne.n	8003042 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f9e:	4b48      	ldr	r3, [pc, #288]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d005      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d101      	bne.n	8002fb6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e392      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002fb6:	4b42      	ldr	r3, [pc, #264]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f023 0219 	bic.w	r2, r3, #25
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	493f      	ldr	r1, [pc, #252]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fc8:	f7fd ffbc 	bl	8000f44 <HAL_GetTick>
 8002fcc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fd0:	f7fd ffb8 	bl	8000f44 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e37c      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fe2:	4b37      	ldr	r3, [pc, #220]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	f7fd ffd9 	bl	8000fa4 <HAL_GetREVID>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d817      	bhi.n	800302c <HAL_RCC_OscConfig+0x1f4>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b40      	cmp	r3, #64	@ 0x40
 8003002:	d108      	bne.n	8003016 <HAL_RCC_OscConfig+0x1de>
 8003004:	4b2e      	ldr	r3, [pc, #184]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800300c:	4a2c      	ldr	r2, [pc, #176]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 800300e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003012:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e07a      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	4b2a      	ldr	r3, [pc, #168]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	4926      	ldr	r1, [pc, #152]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800302a:	e06f      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800302c:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	061b      	lsls	r3, r3, #24
 800303a:	4921      	ldr	r1, [pc, #132]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 800303c:	4313      	orrs	r3, r2
 800303e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	e064      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d047      	beq.n	80030da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800304a:	4b1d      	ldr	r3, [pc, #116]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 0219 	bic.w	r2, r3, #25
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	491a      	ldr	r1, [pc, #104]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305c:	f7fd ff72 	bl	8000f44 <HAL_GetTick>
 8003060:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003064:	f7fd ff6e 	bl	8000f44 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e332      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003076:	4b12      	ldr	r3, [pc, #72]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0304 	and.w	r3, r3, #4
 800307e:	2b00      	cmp	r3, #0
 8003080:	d0f0      	beq.n	8003064 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003082:	f7fd ff8f 	bl	8000fa4 <HAL_GetREVID>
 8003086:	4603      	mov	r3, r0
 8003088:	f241 0203 	movw	r2, #4099	@ 0x1003
 800308c:	4293      	cmp	r3, r2
 800308e:	d819      	bhi.n	80030c4 <HAL_RCC_OscConfig+0x28c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	2b40      	cmp	r3, #64	@ 0x40
 8003096:	d108      	bne.n	80030aa <HAL_RCC_OscConfig+0x272>
 8003098:	4b09      	ldr	r3, [pc, #36]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80030a0:	4a07      	ldr	r2, [pc, #28]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030a6:	6053      	str	r3, [r2, #4]
 80030a8:	e030      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	031b      	lsls	r3, r3, #12
 80030b8:	4901      	ldr	r1, [pc, #4]	@ (80030c0 <HAL_RCC_OscConfig+0x288>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	604b      	str	r3, [r1, #4]
 80030be:	e025      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
 80030c0:	58024400 	.word	0x58024400
 80030c4:	4b9a      	ldr	r3, [pc, #616]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	061b      	lsls	r3, r3, #24
 80030d2:	4997      	ldr	r1, [pc, #604]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	604b      	str	r3, [r1, #4]
 80030d8:	e018      	b.n	800310c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b95      	ldr	r3, [pc, #596]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a94      	ldr	r2, [pc, #592]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e6:	f7fd ff2d 	bl	8000f44 <HAL_GetTick>
 80030ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030ec:	e008      	b.n	8003100 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030ee:	f7fd ff29 	bl	8000f44 <HAL_GetTick>
 80030f2:	4602      	mov	r2, r0
 80030f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f6:	1ad3      	subs	r3, r2, r3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d901      	bls.n	8003100 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e2ed      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003100:	4b8b      	ldr	r3, [pc, #556]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f0      	bne.n	80030ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	f000 80a9 	beq.w	800326c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311a:	4b85      	ldr	r3, [pc, #532]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003122:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003124:	4b82      	ldr	r3, [pc, #520]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003128:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800312a:	69bb      	ldr	r3, [r7, #24]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d007      	beq.n	8003140 <HAL_RCC_OscConfig+0x308>
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b18      	cmp	r3, #24
 8003134:	d13a      	bne.n	80031ac <HAL_RCC_OscConfig+0x374>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d135      	bne.n	80031ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003140:	4b7b      	ldr	r3, [pc, #492]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_OscConfig+0x320>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	69db      	ldr	r3, [r3, #28]
 8003150:	2b80      	cmp	r3, #128	@ 0x80
 8003152:	d001      	beq.n	8003158 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e2c1      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003158:	f7fd ff24 	bl	8000fa4 <HAL_GetREVID>
 800315c:	4603      	mov	r3, r0
 800315e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003162:	4293      	cmp	r3, r2
 8003164:	d817      	bhi.n	8003196 <HAL_RCC_OscConfig+0x35e>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	2b20      	cmp	r3, #32
 800316c:	d108      	bne.n	8003180 <HAL_RCC_OscConfig+0x348>
 800316e:	4b70      	ldr	r3, [pc, #448]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003176:	4a6e      	ldr	r2, [pc, #440]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003178:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800317c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317e:	e075      	b.n	800326c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003180:	4b6b      	ldr	r3, [pc, #428]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a1b      	ldr	r3, [r3, #32]
 800318c:	069b      	lsls	r3, r3, #26
 800318e:	4968      	ldr	r1, [pc, #416]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003194:	e06a      	b.n	800326c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003196:	4b66      	ldr	r3, [pc, #408]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	061b      	lsls	r3, r3, #24
 80031a4:	4962      	ldr	r1, [pc, #392]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80031aa:	e05f      	b.n	800326c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69db      	ldr	r3, [r3, #28]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d042      	beq.n	800323a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80031b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a5d      	ldr	r2, [pc, #372]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80031be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c0:	f7fd fec0 	bl	8000f44 <HAL_GetTick>
 80031c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80031c8:	f7fd febc 	bl	8000f44 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e280      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031da:	4b55      	ldr	r3, [pc, #340]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0f0      	beq.n	80031c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031e6:	f7fd fedd 	bl	8000fa4 <HAL_GetREVID>
 80031ea:	4603      	mov	r3, r0
 80031ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d817      	bhi.n	8003224 <HAL_RCC_OscConfig+0x3ec>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a1b      	ldr	r3, [r3, #32]
 80031f8:	2b20      	cmp	r3, #32
 80031fa:	d108      	bne.n	800320e <HAL_RCC_OscConfig+0x3d6>
 80031fc:	4b4c      	ldr	r3, [pc, #304]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8003204:	4a4a      	ldr	r2, [pc, #296]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800320a:	6053      	str	r3, [r2, #4]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0x434>
 800320e:	4b48      	ldr	r3, [pc, #288]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	069b      	lsls	r3, r3, #26
 800321c:	4944      	ldr	r1, [pc, #272]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800321e:	4313      	orrs	r3, r2
 8003220:	604b      	str	r3, [r1, #4]
 8003222:	e023      	b.n	800326c <HAL_RCC_OscConfig+0x434>
 8003224:	4b42      	ldr	r3, [pc, #264]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	493f      	ldr	r1, [pc, #252]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003234:	4313      	orrs	r3, r2
 8003236:	60cb      	str	r3, [r1, #12]
 8003238:	e018      	b.n	800326c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800323a:	4b3d      	ldr	r3, [pc, #244]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a3c      	ldr	r2, [pc, #240]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003240:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003246:	f7fd fe7d 	bl	8000f44 <HAL_GetTick>
 800324a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800324c:	e008      	b.n	8003260 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800324e:	f7fd fe79 	bl	8000f44 <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	2b02      	cmp	r3, #2
 800325a:	d901      	bls.n	8003260 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e23d      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003260:	4b33      	ldr	r3, [pc, #204]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1f0      	bne.n	800324e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d036      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d019      	beq.n	80032b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003280:	4b2b      	ldr	r3, [pc, #172]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003284:	4a2a      	ldr	r2, [pc, #168]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003286:	f043 0301 	orr.w	r3, r3, #1
 800328a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800328c:	f7fd fe5a 	bl	8000f44 <HAL_GetTick>
 8003290:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003294:	f7fd fe56 	bl	8000f44 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e21a      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80032a6:	4b22      	ldr	r3, [pc, #136]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0x45c>
 80032b2:	e018      	b.n	80032e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032b4:	4b1e      	ldr	r3, [pc, #120]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032b8:	4a1d      	ldr	r2, [pc, #116]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032ba:	f023 0301 	bic.w	r3, r3, #1
 80032be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c0:	f7fd fe40 	bl	8000f44 <HAL_GetTick>
 80032c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032c8:	f7fd fe3c 	bl	8000f44 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e200      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032da:	4b15      	ldr	r3, [pc, #84]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1f0      	bne.n	80032c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d039      	beq.n	8003366 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d01c      	beq.n	8003334 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a0c      	ldr	r2, [pc, #48]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003300:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003304:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003306:	f7fd fe1d 	bl	8000f44 <HAL_GetTick>
 800330a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330e:	f7fd fe19 	bl	8000f44 <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e1dd      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003320:	4b03      	ldr	r3, [pc, #12]	@ (8003330 <HAL_RCC_OscConfig+0x4f8>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x4d6>
 800332c:	e01b      	b.n	8003366 <HAL_RCC_OscConfig+0x52e>
 800332e:	bf00      	nop
 8003330:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003334:	4b9b      	ldr	r3, [pc, #620]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a9a      	ldr	r2, [pc, #616]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800333a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800333e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003340:	f7fd fe00 	bl	8000f44 <HAL_GetTick>
 8003344:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003348:	f7fd fdfc 	bl	8000f44 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e1c0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800335a:	4b92      	ldr	r3, [pc, #584]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8081 	beq.w	8003476 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003374:	4b8c      	ldr	r3, [pc, #560]	@ (80035a8 <HAL_RCC_OscConfig+0x770>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a8b      	ldr	r2, [pc, #556]	@ (80035a8 <HAL_RCC_OscConfig+0x770>)
 800337a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003380:	f7fd fde0 	bl	8000f44 <HAL_GetTick>
 8003384:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003388:	f7fd fddc 	bl	8000f44 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	@ 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1a0      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339a:	4b83      	ldr	r3, [pc, #524]	@ (80035a8 <HAL_RCC_OscConfig+0x770>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d106      	bne.n	80033bc <HAL_RCC_OscConfig+0x584>
 80033ae:	4b7d      	ldr	r3, [pc, #500]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b2:	4a7c      	ldr	r2, [pc, #496]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80033ba:	e02d      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d10c      	bne.n	80033de <HAL_RCC_OscConfig+0x5a6>
 80033c4:	4b77      	ldr	r3, [pc, #476]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033c8:	4a76      	ldr	r2, [pc, #472]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80033d0:	4b74      	ldr	r3, [pc, #464]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033d4:	4a73      	ldr	r2, [pc, #460]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	6713      	str	r3, [r2, #112]	@ 0x70
 80033dc:	e01c      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	2b05      	cmp	r3, #5
 80033e4:	d10c      	bne.n	8003400 <HAL_RCC_OscConfig+0x5c8>
 80033e6:	4b6f      	ldr	r3, [pc, #444]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033ea:	4a6e      	ldr	r2, [pc, #440]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033ec:	f043 0304 	orr.w	r3, r3, #4
 80033f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f2:	4b6c      	ldr	r3, [pc, #432]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033f6:	4a6b      	ldr	r2, [pc, #428]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80033fe:	e00b      	b.n	8003418 <HAL_RCC_OscConfig+0x5e0>
 8003400:	4b68      	ldr	r3, [pc, #416]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003404:	4a67      	ldr	r2, [pc, #412]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6713      	str	r3, [r2, #112]	@ 0x70
 800340c:	4b65      	ldr	r3, [pc, #404]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a64      	ldr	r2, [pc, #400]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003412:	f023 0304 	bic.w	r3, r3, #4
 8003416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003420:	f7fd fd90 	bl	8000f44 <HAL_GetTick>
 8003424:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003428:	f7fd fd8c 	bl	8000f44 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003436:	4293      	cmp	r3, r2
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e14e      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800343e:	4b59      	ldr	r3, [pc, #356]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0ee      	beq.n	8003428 <HAL_RCC_OscConfig+0x5f0>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800344c:	f7fd fd7a 	bl	8000f44 <HAL_GetTick>
 8003450:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003452:	e00a      	b.n	800346a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003454:	f7fd fd76 	bl	8000f44 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003462:	4293      	cmp	r3, r2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e138      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800346a:	4b4e      	ldr	r3, [pc, #312]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1ee      	bne.n	8003454 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 812d 	beq.w	80036da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003480:	4b48      	ldr	r3, [pc, #288]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003488:	2b18      	cmp	r3, #24
 800348a:	f000 80bd 	beq.w	8003608 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	2b02      	cmp	r3, #2
 8003494:	f040 809e 	bne.w	80035d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003498:	4b42      	ldr	r3, [pc, #264]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a41      	ldr	r2, [pc, #260]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800349e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80034a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034a4:	f7fd fd4e 	bl	8000f44 <HAL_GetTick>
 80034a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ac:	f7fd fd4a 	bl	8000f44 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e10e      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80034be:	4b39      	ldr	r3, [pc, #228]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1f0      	bne.n	80034ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034ca:	4b36      	ldr	r3, [pc, #216]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034ce:	4b37      	ldr	r3, [pc, #220]	@ (80035ac <HAL_RCC_OscConfig+0x774>)
 80034d0:	4013      	ands	r3, r2
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80034da:	0112      	lsls	r2, r2, #4
 80034dc:	430a      	orrs	r2, r1
 80034de:	4931      	ldr	r1, [pc, #196]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	3b01      	subs	r3, #1
 80034ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034f2:	3b01      	subs	r3, #1
 80034f4:	025b      	lsls	r3, r3, #9
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fe:	3b01      	subs	r3, #1
 8003500:	041b      	lsls	r3, r3, #16
 8003502:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	3b01      	subs	r3, #1
 800350e:	061b      	lsls	r3, r3, #24
 8003510:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003514:	4923      	ldr	r1, [pc, #140]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800351a:	4b22      	ldr	r3, [pc, #136]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800351c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800351e:	4a21      	ldr	r2, [pc, #132]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003520:	f023 0301 	bic.w	r3, r3, #1
 8003524:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003526:	4b1f      	ldr	r3, [pc, #124]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800352a:	4b21      	ldr	r3, [pc, #132]	@ (80035b0 <HAL_RCC_OscConfig+0x778>)
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003532:	00d2      	lsls	r2, r2, #3
 8003534:	491b      	ldr	r1, [pc, #108]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800353a:	4b1a      	ldr	r3, [pc, #104]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353e:	f023 020c 	bic.w	r2, r3, #12
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003546:	4917      	ldr	r1, [pc, #92]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003548:	4313      	orrs	r3, r2
 800354a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800354c:	4b15      	ldr	r3, [pc, #84]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800354e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003550:	f023 0202 	bic.w	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003558:	4912      	ldr	r1, [pc, #72]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800355a:	4313      	orrs	r3, r2
 800355c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800355e:	4b11      	ldr	r3, [pc, #68]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	4a10      	ldr	r2, [pc, #64]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800356a:	4b0e      	ldr	r3, [pc, #56]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800356c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356e:	4a0d      	ldr	r2, [pc, #52]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003574:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003576:	4b0b      	ldr	r3, [pc, #44]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800357a:	4a0a      	ldr	r2, [pc, #40]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003580:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003582:	4b08      	ldr	r3, [pc, #32]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003586:	4a07      	ldr	r2, [pc, #28]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003588:	f043 0301 	orr.w	r3, r3, #1
 800358c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800358e:	4b05      	ldr	r3, [pc, #20]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a04      	ldr	r2, [pc, #16]	@ (80035a4 <HAL_RCC_OscConfig+0x76c>)
 8003594:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003598:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359a:	f7fd fcd3 	bl	8000f44 <HAL_GetTick>
 800359e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035a0:	e011      	b.n	80035c6 <HAL_RCC_OscConfig+0x78e>
 80035a2:	bf00      	nop
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58024800 	.word	0x58024800
 80035ac:	fffffc0c 	.word	0xfffffc0c
 80035b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b4:	f7fd fcc6 	bl	8000f44 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e08a      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80035c6:	4b47      	ldr	r3, [pc, #284]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x77c>
 80035d2:	e082      	b.n	80036da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d4:	4b43      	ldr	r3, [pc, #268]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a42      	ldr	r2, [pc, #264]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e0:	f7fd fcb0 	bl	8000f44 <HAL_GetTick>
 80035e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e8:	f7fd fcac 	bl	8000f44 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e070      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035fa:	4b3a      	ldr	r3, [pc, #232]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x7b0>
 8003606:	e068      	b.n	80036da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003608:	4b36      	ldr	r3, [pc, #216]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 800360a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800360e:	4b35      	ldr	r3, [pc, #212]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003618:	2b01      	cmp	r3, #1
 800361a:	d031      	beq.n	8003680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f003 0203 	and.w	r2, r3, #3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003626:	429a      	cmp	r2, r3
 8003628:	d12a      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	091b      	lsrs	r3, r3, #4
 800362e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003636:	429a      	cmp	r2, r3
 8003638:	d122      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003644:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003646:	429a      	cmp	r2, r3
 8003648:	d11a      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	0a5b      	lsrs	r3, r3, #9
 800364e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003656:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d111      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	0c1b      	lsrs	r3, r3, #16
 8003660:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003668:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800366a:	429a      	cmp	r2, r3
 800366c:	d108      	bne.n	8003680 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800367a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d001      	beq.n	8003684 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e02b      	b.n	80036dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003684:	4b17      	ldr	r3, [pc, #92]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 8003686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003688:	08db      	lsrs	r3, r3, #3
 800368a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800368e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	429a      	cmp	r2, r3
 8003698:	d01f      	beq.n	80036da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800369a:	4b12      	ldr	r3, [pc, #72]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 800369c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369e:	4a11      	ldr	r2, [pc, #68]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80036a6:	f7fd fc4d 	bl	8000f44 <HAL_GetTick>
 80036aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80036ac:	bf00      	nop
 80036ae:	f7fd fc49 	bl	8000f44 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d0f9      	beq.n	80036ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80036ba:	4b0a      	ldr	r3, [pc, #40]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80036be:	4b0a      	ldr	r3, [pc, #40]	@ (80036e8 <HAL_RCC_OscConfig+0x8b0>)
 80036c0:	4013      	ands	r3, r2
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80036c6:	00d2      	lsls	r2, r2, #3
 80036c8:	4906      	ldr	r1, [pc, #24]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80036ce:	4b05      	ldr	r3, [pc, #20]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	4a04      	ldr	r2, [pc, #16]	@ (80036e4 <HAL_RCC_OscConfig+0x8ac>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3730      	adds	r7, #48	@ 0x30
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	58024400 	.word	0x58024400
 80036e8:	ffff0007 	.word	0xffff0007

080036ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b086      	sub	sp, #24
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e19c      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b8a      	ldr	r3, [pc, #552]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d910      	bls.n	8003730 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b87      	ldr	r3, [pc, #540]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 020f 	bic.w	r2, r3, #15
 8003716:	4985      	ldr	r1, [pc, #532]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	4313      	orrs	r3, r2
 800371c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800371e:	4b83      	ldr	r3, [pc, #524]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 030f 	and.w	r3, r3, #15
 8003726:	683a      	ldr	r2, [r7, #0]
 8003728:	429a      	cmp	r2, r3
 800372a:	d001      	beq.n	8003730 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e184      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0304 	and.w	r3, r3, #4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d010      	beq.n	800375e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691a      	ldr	r2, [r3, #16]
 8003740:	4b7b      	ldr	r3, [pc, #492]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003748:	429a      	cmp	r2, r3
 800374a:	d908      	bls.n	800375e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800374c:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800374e:	699b      	ldr	r3, [r3, #24]
 8003750:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	4975      	ldr	r1, [pc, #468]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800375a:	4313      	orrs	r3, r2
 800375c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0308 	and.w	r3, r3, #8
 8003766:	2b00      	cmp	r3, #0
 8003768:	d010      	beq.n	800378c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	695a      	ldr	r2, [r3, #20]
 800376e:	4b70      	ldr	r3, [pc, #448]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003776:	429a      	cmp	r2, r3
 8003778:	d908      	bls.n	800378c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800377a:	4b6d      	ldr	r3, [pc, #436]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	496a      	ldr	r1, [pc, #424]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003788:	4313      	orrs	r3, r2
 800378a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b00      	cmp	r3, #0
 8003796:	d010      	beq.n	80037ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800379e:	69db      	ldr	r3, [r3, #28]
 80037a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d908      	bls.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80037a8:	4b61      	ldr	r3, [pc, #388]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	495e      	ldr	r1, [pc, #376]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0320 	and.w	r3, r3, #32
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d010      	beq.n	80037e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d908      	bls.n	80037e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80037d6:	4b56      	ldr	r3, [pc, #344]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	4953      	ldr	r1, [pc, #332]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d010      	beq.n	8003816 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	f003 030f 	and.w	r3, r3, #15
 8003800:	429a      	cmp	r2, r3
 8003802:	d908      	bls.n	8003816 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003804:	4b4a      	ldr	r3, [pc, #296]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f023 020f 	bic.w	r2, r3, #15
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	4947      	ldr	r1, [pc, #284]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003812:	4313      	orrs	r3, r2
 8003814:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	2b00      	cmp	r3, #0
 8003820:	d055      	beq.n	80038ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003822:	4b43      	ldr	r3, [pc, #268]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	4940      	ldr	r1, [pc, #256]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003830:	4313      	orrs	r3, r2
 8003832:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d107      	bne.n	800384c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800383c:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d121      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0f6      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	2b03      	cmp	r3, #3
 8003852:	d107      	bne.n	8003864 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003854:	4b36      	ldr	r3, [pc, #216]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d115      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e0ea      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800386c:	4b30      	ldr	r3, [pc, #192]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003874:	2b00      	cmp	r3, #0
 8003876:	d109      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0de      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800387c:	4b2c      	ldr	r3, [pc, #176]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d101      	bne.n	800388c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e0d6      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800388c:	4b28      	ldr	r3, [pc, #160]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f023 0207 	bic.w	r2, r3, #7
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4925      	ldr	r1, [pc, #148]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 800389a:	4313      	orrs	r3, r2
 800389c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800389e:	f7fd fb51 	bl	8000f44 <HAL_GetTick>
 80038a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a4:	e00a      	b.n	80038bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a6:	f7fd fb4d 	bl	8000f44 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e0be      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038be:	691b      	ldr	r3, [r3, #16]
 80038c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d1eb      	bne.n	80038a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d010      	beq.n	80038fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	4b14      	ldr	r3, [pc, #80]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d208      	bcs.n	80038fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ea:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f023 020f 	bic.w	r2, r3, #15
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	490e      	ldr	r1, [pc, #56]	@ (8003930 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038fc:	4b0b      	ldr	r3, [pc, #44]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 030f 	and.w	r3, r3, #15
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	429a      	cmp	r2, r3
 8003908:	d214      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	4b08      	ldr	r3, [pc, #32]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 020f 	bic.w	r2, r3, #15
 8003912:	4906      	ldr	r1, [pc, #24]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4313      	orrs	r3, r2
 8003918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b04      	ldr	r3, [pc, #16]	@ (800392c <HAL_RCC_ClockConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 030f 	and.w	r3, r3, #15
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d005      	beq.n	8003934 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e086      	b.n	8003a3a <HAL_RCC_ClockConfig+0x34e>
 800392c:	52002000 	.word	0x52002000
 8003930:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d010      	beq.n	8003962 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	691a      	ldr	r2, [r3, #16]
 8003944:	4b3f      	ldr	r3, [pc, #252]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800394c:	429a      	cmp	r2, r3
 800394e:	d208      	bcs.n	8003962 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003950:	4b3c      	ldr	r3, [pc, #240]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	4939      	ldr	r1, [pc, #228]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 800395e:	4313      	orrs	r3, r2
 8003960:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0308 	and.w	r3, r3, #8
 800396a:	2b00      	cmp	r3, #0
 800396c:	d010      	beq.n	8003990 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800397a:	429a      	cmp	r2, r3
 800397c:	d208      	bcs.n	8003990 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	492e      	ldr	r1, [pc, #184]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 800398c:	4313      	orrs	r3, r2
 800398e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0310 	and.w	r3, r3, #16
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699a      	ldr	r2, [r3, #24]
 80039a0:	4b28      	ldr	r3, [pc, #160]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d208      	bcs.n	80039be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80039ac:	4b25      	ldr	r3, [pc, #148]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039ae:	69db      	ldr	r3, [r3, #28]
 80039b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	4922      	ldr	r1, [pc, #136]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0320 	and.w	r3, r3, #32
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d010      	beq.n	80039ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	69da      	ldr	r2, [r3, #28]
 80039ce:	4b1d      	ldr	r3, [pc, #116]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80039d6:	429a      	cmp	r2, r3
 80039d8:	d208      	bcs.n	80039ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80039da:	4b1a      	ldr	r3, [pc, #104]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039dc:	6a1b      	ldr	r3, [r3, #32]
 80039de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	69db      	ldr	r3, [r3, #28]
 80039e6:	4917      	ldr	r1, [pc, #92]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039ec:	f000 f834 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 80039f0:	4602      	mov	r2, r0
 80039f2:	4b14      	ldr	r3, [pc, #80]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	0a1b      	lsrs	r3, r3, #8
 80039f8:	f003 030f 	and.w	r3, r3, #15
 80039fc:	4912      	ldr	r1, [pc, #72]	@ (8003a48 <HAL_RCC_ClockConfig+0x35c>)
 80039fe:	5ccb      	ldrb	r3, [r1, r3]
 8003a00:	f003 031f 	and.w	r3, r3, #31
 8003a04:	fa22 f303 	lsr.w	r3, r2, r3
 8003a08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <HAL_RCC_ClockConfig+0x358>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <HAL_RCC_ClockConfig+0x35c>)
 8003a14:	5cd3      	ldrb	r3, [r2, r3]
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	693a      	ldr	r2, [r7, #16]
 8003a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <HAL_RCC_ClockConfig+0x360>)
 8003a22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a24:	4a0a      	ldr	r2, [pc, #40]	@ (8003a50 <HAL_RCC_ClockConfig+0x364>)
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003a2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a54 <HAL_RCC_ClockConfig+0x368>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fd fa3e 	bl	8000eb0 <HAL_InitTick>
 8003a34:	4603      	mov	r3, r0
 8003a36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003a38:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	58024400 	.word	0x58024400
 8003a48:	08008430 	.word	0x08008430
 8003a4c:	24000004 	.word	0x24000004
 8003a50:	24000000 	.word	0x24000000
 8003a54:	24000008 	.word	0x24000008

08003a58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a5e:	4bb3      	ldr	r3, [pc, #716]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a66:	2b18      	cmp	r3, #24
 8003a68:	f200 8155 	bhi.w	8003d16 <HAL_RCC_GetSysClockFreq+0x2be>
 8003a6c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a72:	bf00      	nop
 8003a74:	08003ad9 	.word	0x08003ad9
 8003a78:	08003d17 	.word	0x08003d17
 8003a7c:	08003d17 	.word	0x08003d17
 8003a80:	08003d17 	.word	0x08003d17
 8003a84:	08003d17 	.word	0x08003d17
 8003a88:	08003d17 	.word	0x08003d17
 8003a8c:	08003d17 	.word	0x08003d17
 8003a90:	08003d17 	.word	0x08003d17
 8003a94:	08003aff 	.word	0x08003aff
 8003a98:	08003d17 	.word	0x08003d17
 8003a9c:	08003d17 	.word	0x08003d17
 8003aa0:	08003d17 	.word	0x08003d17
 8003aa4:	08003d17 	.word	0x08003d17
 8003aa8:	08003d17 	.word	0x08003d17
 8003aac:	08003d17 	.word	0x08003d17
 8003ab0:	08003d17 	.word	0x08003d17
 8003ab4:	08003b05 	.word	0x08003b05
 8003ab8:	08003d17 	.word	0x08003d17
 8003abc:	08003d17 	.word	0x08003d17
 8003ac0:	08003d17 	.word	0x08003d17
 8003ac4:	08003d17 	.word	0x08003d17
 8003ac8:	08003d17 	.word	0x08003d17
 8003acc:	08003d17 	.word	0x08003d17
 8003ad0:	08003d17 	.word	0x08003d17
 8003ad4:	08003b0b 	.word	0x08003b0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ad8:	4b94      	ldr	r3, [pc, #592]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0320 	and.w	r3, r3, #32
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ae4:	4b91      	ldr	r3, [pc, #580]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	08db      	lsrs	r3, r3, #3
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	4a90      	ldr	r2, [pc, #576]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003af0:	fa22 f303 	lsr.w	r3, r2, r3
 8003af4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003af6:	e111      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003af8:	4b8d      	ldr	r3, [pc, #564]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003afa:	61bb      	str	r3, [r7, #24]
      break;
 8003afc:	e10e      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003afe:	4b8d      	ldr	r3, [pc, #564]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003b00:	61bb      	str	r3, [r7, #24]
      break;
 8003b02:	e10b      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003b04:	4b8c      	ldr	r3, [pc, #560]	@ (8003d38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003b06:	61bb      	str	r3, [r7, #24]
      break;
 8003b08:	e108      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b0a:	4b88      	ldr	r3, [pc, #544]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003b14:	4b85      	ldr	r3, [pc, #532]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003b20:	4b82      	ldr	r3, [pc, #520]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003b2a:	4b80      	ldr	r3, [pc, #512]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b2e:	08db      	lsrs	r3, r3, #3
 8003b30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	fb02 f303 	mul.w	r3, r2, r3
 8003b3a:	ee07 3a90 	vmov	s15, r3
 8003b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80e1 	beq.w	8003d10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	f000 8083 	beq.w	8003c5c <HAL_RCC_GetSysClockFreq+0x204>
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	f200 80a1 	bhi.w	8003ca0 <HAL_RCC_GetSysClockFreq+0x248>
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <HAL_RCC_GetSysClockFreq+0x114>
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d056      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b6a:	e099      	b.n	8003ca0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 0320 	and.w	r3, r3, #32
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d02d      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b78:	4b6c      	ldr	r3, [pc, #432]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	08db      	lsrs	r3, r3, #3
 8003b7e:	f003 0303 	and.w	r3, r3, #3
 8003b82:	4a6b      	ldr	r2, [pc, #428]	@ (8003d30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	ee07 3a90 	vmov	s15, r3
 8003b90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ba2:	4b62      	ldr	r3, [pc, #392]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003baa:	ee07 3a90 	vmov	s15, r3
 8003bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003bd2:	e087      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	ee07 3a90 	vmov	s15, r3
 8003bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003d40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003be6:	4b51      	ldr	r3, [pc, #324]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c16:	e065      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	ee07 3a90 	vmov	s15, r3
 8003c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c2a:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c32:	ee07 3a90 	vmov	s15, r3
 8003c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c5a:	e043      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003d48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c76:	ee07 3a90 	vmov	s15, r3
 8003c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c9e:	e021      	b.n	8003ce4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	ee07 3a90 	vmov	s15, r3
 8003ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003caa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003d44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003d3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ce2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	0a5b      	lsrs	r3, r3, #9
 8003cea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cee:	3301      	adds	r3, #1
 8003cf0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	ee07 3a90 	vmov	s15, r3
 8003cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d08:	ee17 3a90 	vmov	r3, s15
 8003d0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003d0e:	e005      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
      break;
 8003d14:	e002      	b.n	8003d1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003d16:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003d18:	61bb      	str	r3, [r7, #24]
      break;
 8003d1a:	bf00      	nop
  }

  return sysclockfreq;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3724      	adds	r7, #36	@ 0x24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	58024400 	.word	0x58024400
 8003d30:	03d09000 	.word	0x03d09000
 8003d34:	003d0900 	.word	0x003d0900
 8003d38:	017d7840 	.word	0x017d7840
 8003d3c:	46000000 	.word	0x46000000
 8003d40:	4c742400 	.word	0x4c742400
 8003d44:	4a742400 	.word	0x4a742400
 8003d48:	4bbebc20 	.word	0x4bbebc20

08003d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d52:	f7ff fe81 	bl	8003a58 <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b10      	ldr	r3, [pc, #64]	@ (8003d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	0a1b      	lsrs	r3, r3, #8
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	490f      	ldr	r1, [pc, #60]	@ (8003da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d70:	4b0a      	ldr	r3, [pc, #40]	@ (8003d9c <HAL_RCC_GetHCLKFreq+0x50>)
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	f003 030f 	and.w	r3, r3, #15
 8003d78:	4a09      	ldr	r2, [pc, #36]	@ (8003da0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d7a:	5cd3      	ldrb	r3, [r2, r3]
 8003d7c:	f003 031f 	and.w	r3, r3, #31
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	fa22 f303 	lsr.w	r3, r2, r3
 8003d86:	4a07      	ldr	r2, [pc, #28]	@ (8003da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d8a:	4a07      	ldr	r2, [pc, #28]	@ (8003da8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d90:	4b04      	ldr	r3, [pc, #16]	@ (8003da4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d92:	681b      	ldr	r3, [r3, #0]
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	58024400 	.word	0x58024400
 8003da0:	08008430 	.word	0x08008430
 8003da4:	24000004 	.word	0x24000004
 8003da8:	24000000 	.word	0x24000000

08003dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003db0:	f7ff ffcc 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003db4:	4602      	mov	r2, r0
 8003db6:	4b06      	ldr	r3, [pc, #24]	@ (8003dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	091b      	lsrs	r3, r3, #4
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	4904      	ldr	r1, [pc, #16]	@ (8003dd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dc2:	5ccb      	ldrb	r3, [r1, r3]
 8003dc4:	f003 031f 	and.w	r3, r3, #31
 8003dc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	bd80      	pop	{r7, pc}
 8003dd0:	58024400 	.word	0x58024400
 8003dd4:	08008430 	.word	0x08008430

08003dd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ddc:	f7ff ffb6 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8003de0:	4602      	mov	r2, r0
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	0a1b      	lsrs	r3, r3, #8
 8003de8:	f003 0307 	and.w	r3, r3, #7
 8003dec:	4904      	ldr	r1, [pc, #16]	@ (8003e00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dee:	5ccb      	ldrb	r3, [r1, r3]
 8003df0:	f003 031f 	and.w	r3, r3, #31
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	58024400 	.word	0x58024400
 8003e00:	08008430 	.word	0x08008430

08003e04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e08:	b0ca      	sub	sp, #296	@ 0x128
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e10:	2300      	movs	r3, #0
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e16:	2300      	movs	r3, #0
 8003e18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003e28:	2500      	movs	r5, #0
 8003e2a:	ea54 0305 	orrs.w	r3, r4, r5
 8003e2e:	d049      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e3a:	d02f      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003e40:	d828      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e46:	d01a      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003e4c:	d822      	bhi.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e56:	d007      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e58:	e01c      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e5a:	4bb8      	ldr	r3, [pc, #736]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5e:	4ab7      	ldr	r2, [pc, #732]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e66:	e01a      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	2102      	movs	r1, #2
 8003e70:	4618      	mov	r0, r3
 8003e72:	f002 fb61 	bl	8006538 <RCCEx_PLL2_Config>
 8003e76:	4603      	mov	r3, r0
 8003e78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e7c:	e00f      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	3328      	adds	r3, #40	@ 0x28
 8003e84:	2102      	movs	r1, #2
 8003e86:	4618      	mov	r0, r3
 8003e88:	f002 fc08 	bl	800669c <RCCEx_PLL3_Config>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e92:	e004      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ea6:	4ba5      	ldr	r3, [pc, #660]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eaa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eb4:	4aa1      	ldr	r2, [pc, #644]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8003eba:	e003      	b.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ecc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003ed0:	f04f 0900 	mov.w	r9, #0
 8003ed4:	ea58 0309 	orrs.w	r3, r8, r9
 8003ed8:	d047      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee0:	2b04      	cmp	r3, #4
 8003ee2:	d82a      	bhi.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ee4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eea:	bf00      	nop
 8003eec:	08003f01 	.word	0x08003f01
 8003ef0:	08003f0f 	.word	0x08003f0f
 8003ef4:	08003f25 	.word	0x08003f25
 8003ef8:	08003f43 	.word	0x08003f43
 8003efc:	08003f43 	.word	0x08003f43
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f00:	4b8e      	ldr	r3, [pc, #568]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f04:	4a8d      	ldr	r2, [pc, #564]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f0c:	e01a      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	3308      	adds	r3, #8
 8003f14:	2100      	movs	r1, #0
 8003f16:	4618      	mov	r0, r3
 8003f18:	f002 fb0e 	bl	8006538 <RCCEx_PLL2_Config>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f22:	e00f      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	3328      	adds	r3, #40	@ 0x28
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f002 fbb5 	bl	800669c <RCCEx_PLL3_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003f38:	e004      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f42:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d10a      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003f50:	f023 0107 	bic.w	r1, r3, #7
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f5a:	4a78      	ldr	r2, [pc, #480]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003f76:	f04f 0b00 	mov.w	fp, #0
 8003f7a:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f7e:	d04c      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8a:	d030      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f90:	d829      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f92:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f94:	d02d      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f96:	2bc0      	cmp	r3, #192	@ 0xc0
 8003f98:	d825      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f9a:	2b80      	cmp	r3, #128	@ 0x80
 8003f9c:	d018      	beq.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f9e:	2b80      	cmp	r3, #128	@ 0x80
 8003fa0:	d821      	bhi.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003fa6:	2b40      	cmp	r3, #64	@ 0x40
 8003fa8:	d007      	beq.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003faa:	e01c      	b.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fac:	4b63      	ldr	r3, [pc, #396]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb0:	4a62      	ldr	r2, [pc, #392]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e01c      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f002 fab8 	bl	8006538 <RCCEx_PLL2_Config>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003fce:	e011      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	3328      	adds	r3, #40	@ 0x28
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fb5f 	bl	800669c <RCCEx_PLL3_Config>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10a      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003ffc:	4b4f      	ldr	r3, [pc, #316]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	4a4c      	ldr	r2, [pc, #304]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800400c:	430b      	orrs	r3, r1
 800400e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8004026:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8004030:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d053      	beq.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004042:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004046:	d035      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004048:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800404c:	d82e      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800404e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004052:	d031      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004054:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004058:	d828      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800405a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800405e:	d01a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004060:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004064:	d822      	bhi.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800406a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800406e:	d007      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004070:	e01c      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004072:	4b32      	ldr	r3, [pc, #200]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004076:	4a31      	ldr	r2, [pc, #196]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004078:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800407c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800407e:	e01c      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004084:	3308      	adds	r3, #8
 8004086:	2100      	movs	r1, #0
 8004088:	4618      	mov	r0, r3
 800408a:	f002 fa55 	bl	8006538 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004094:	e011      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409a:	3328      	adds	r3, #40	@ 0x28
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f002 fafc 	bl	800669c <RCCEx_PLL3_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80040aa:	e006      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040b2:	e002      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80040b4:	bf00      	nop
 80040b6:	e000      	b.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80040b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d10b      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80040c2:	4b1e      	ldr	r3, [pc, #120]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80040d2:	4a1a      	ldr	r2, [pc, #104]	@ (800413c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80040d8:	e003      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80040ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040f2:	2300      	movs	r3, #0
 80040f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80040f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d056      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800410a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800410e:	d038      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004110:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004114:	d831      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004116:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800411a:	d034      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800411c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004120:	d82b      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004122:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004126:	d01d      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004128:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800412c:	d825      	bhi.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d006      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8004132:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004138:	e01f      	b.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800413a:	bf00      	nop
 800413c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004140:	4ba2      	ldr	r3, [pc, #648]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	4aa1      	ldr	r2, [pc, #644]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800414a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800414c:	e01c      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	3308      	adds	r3, #8
 8004154:	2100      	movs	r1, #0
 8004156:	4618      	mov	r0, r3
 8004158:	f002 f9ee 	bl	8006538 <RCCEx_PLL2_Config>
 800415c:	4603      	mov	r3, r0
 800415e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004162:	e011      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	3328      	adds	r3, #40	@ 0x28
 800416a:	2100      	movs	r1, #0
 800416c:	4618      	mov	r0, r3
 800416e:	f002 fa95 	bl	800669c <RCCEx_PLL3_Config>
 8004172:	4603      	mov	r3, r0
 8004174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004178:	e006      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004180:	e002      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004186:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004190:	4b8e      	ldr	r3, [pc, #568]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004194:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8004198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80041a0:	4a8a      	ldr	r2, [pc, #552]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041a2:	430b      	orrs	r3, r1
 80041a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a6:	e003      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80041bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80041c0:	2300      	movs	r3, #0
 80041c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80041c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80041ca:	460b      	mov	r3, r1
 80041cc:	4313      	orrs	r3, r2
 80041ce:	d03a      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	2b30      	cmp	r3, #48	@ 0x30
 80041d8:	d01f      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80041da:	2b30      	cmp	r3, #48	@ 0x30
 80041dc:	d819      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80041de:	2b20      	cmp	r3, #32
 80041e0:	d00c      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80041e2:	2b20      	cmp	r3, #32
 80041e4:	d815      	bhi.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d019      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80041ea:	2b10      	cmp	r3, #16
 80041ec:	d111      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ee:	4b77      	ldr	r3, [pc, #476]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f2:	4a76      	ldr	r2, [pc, #472]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80041fa:	e011      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004200:	3308      	adds	r3, #8
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f002 f997 	bl	8006538 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004210:	e006      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004218:	e002      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800421a:	bf00      	nop
 800421c:	e000      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800421e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004220:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004228:	4b68      	ldr	r3, [pc, #416]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800422a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800422c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	4a65      	ldr	r2, [pc, #404]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004238:	430b      	orrs	r3, r1
 800423a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004252:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004256:	2300      	movs	r3, #0
 8004258:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800425c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d051      	beq.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800426c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004270:	d035      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004276:	d82e      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004278:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800427c:	d031      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800427e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004282:	d828      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004284:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004288:	d01a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800428a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428e:	d822      	bhi.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004298:	d007      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800429a:	e01c      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429c:	4b4b      	ldr	r3, [pc, #300]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	4a4a      	ldr	r2, [pc, #296]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042a8:	e01c      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ae:	3308      	adds	r3, #8
 80042b0:	2100      	movs	r1, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f002 f940 	bl	8006538 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042be:	e011      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80042c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c4:	3328      	adds	r3, #40	@ 0x28
 80042c6:	2100      	movs	r1, #0
 80042c8:	4618      	mov	r0, r3
 80042ca:	f002 f9e7 	bl	800669c <RCCEx_PLL3_Config>
 80042ce:	4603      	mov	r3, r0
 80042d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80042d4:	e006      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042dc:	e002      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80042de:	bf00      	nop
 80042e0:	e000      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80042e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10a      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042ec:	4b37      	ldr	r3, [pc, #220]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80042fa:	4a34      	ldr	r2, [pc, #208]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042fc:	430b      	orrs	r3, r1
 80042fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8004300:	e003      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800430a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004312:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004316:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8004320:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8004324:	460b      	mov	r3, r1
 8004326:	4313      	orrs	r3, r2
 8004328:	d056      	beq.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004334:	d033      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004336:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800433a:	d82c      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800433c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004340:	d02f      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004342:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004346:	d826      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004348:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800434c:	d02b      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800434e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004352:	d820      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004354:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004358:	d012      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800435a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800435e:	d81a      	bhi.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004368:	d115      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436e:	3308      	adds	r3, #8
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f002 f8e0 	bl	8006538 <RCCEx_PLL2_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800437e:	e015      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	3328      	adds	r3, #40	@ 0x28
 8004386:	2101      	movs	r1, #1
 8004388:	4618      	mov	r0, r3
 800438a:	f002 f987 	bl	800669c <RCCEx_PLL3_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004394:	e00a      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800439c:	e006      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800439e:	bf00      	nop
 80043a0:	e004      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80043a2:	bf00      	nop
 80043a4:	e002      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80043a6:	bf00      	nop
 80043a8:	e000      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80043aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10d      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043c2:	4a02      	ldr	r2, [pc, #8]	@ (80043cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80043c4:	430b      	orrs	r3, r1
 80043c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80043c8:	e006      	b.n	80043d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80043ca:	bf00      	nop
 80043cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80043d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80043e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043e8:	2300      	movs	r3, #0
 80043ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4313      	orrs	r3, r2
 80043f6:	d055      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80043f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004400:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004404:	d033      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004406:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800440a:	d82c      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800440c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004410:	d02f      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8004412:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004416:	d826      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004418:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800441c:	d02b      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800441e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004422:	d820      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004424:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004428:	d012      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800442e:	d81a      	bhi.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d022      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004438:	d115      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3308      	adds	r3, #8
 8004440:	2101      	movs	r1, #1
 8004442:	4618      	mov	r0, r3
 8004444:	f002 f878 	bl	8006538 <RCCEx_PLL2_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800444e:	e015      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	3328      	adds	r3, #40	@ 0x28
 8004456:	2101      	movs	r1, #1
 8004458:	4618      	mov	r0, r3
 800445a:	f002 f91f 	bl	800669c <RCCEx_PLL3_Config>
 800445e:	4603      	mov	r3, r0
 8004460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800446c:	e006      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800446e:	bf00      	nop
 8004470:	e004      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004472:	bf00      	nop
 8004474:	e002      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004476:	bf00      	nop
 8004478:	e000      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800447a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004484:	4ba3      	ldr	r3, [pc, #652]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004488:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800448c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004490:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004494:	4a9f      	ldr	r2, [pc, #636]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004496:	430b      	orrs	r3, r1
 8004498:	6593      	str	r3, [r2, #88]	@ 0x58
 800449a:	e003      	b.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800449c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80044b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044b4:	2300      	movs	r3, #0
 80044b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80044ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044be:	460b      	mov	r3, r1
 80044c0:	4313      	orrs	r3, r2
 80044c2:	d037      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80044c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044ce:	d00e      	beq.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80044d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d4:	d816      	bhi.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d018      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80044da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044de:	d111      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e4:	4a8b      	ldr	r2, [pc, #556]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044ec:	e00f      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044f2:	3308      	adds	r3, #8
 80044f4:	2101      	movs	r1, #1
 80044f6:	4618      	mov	r0, r3
 80044f8:	f002 f81e 	bl	8006538 <RCCEx_PLL2_Config>
 80044fc:	4603      	mov	r3, r0
 80044fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004502:	e004      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800450a:	e000      	b.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800450c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004516:	4b7f      	ldr	r3, [pc, #508]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800451a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a7b      	ldr	r2, [pc, #492]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004526:	430b      	orrs	r3, r1
 8004528:	6513      	str	r3, [r2, #80]	@ 0x50
 800452a:	e003      	b.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004540:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800454a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d039      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004554:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455a:	2b03      	cmp	r3, #3
 800455c:	d81c      	bhi.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800455e:	a201      	add	r2, pc, #4	@ (adr r2, 8004564 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004564:	080045a1 	.word	0x080045a1
 8004568:	08004575 	.word	0x08004575
 800456c:	08004583 	.word	0x08004583
 8004570:	080045a1 	.word	0x080045a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4b67      	ldr	r3, [pc, #412]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4a66      	ldr	r2, [pc, #408]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004580:	e00f      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	3308      	adds	r3, #8
 8004588:	2102      	movs	r1, #2
 800458a:	4618      	mov	r0, r3
 800458c:	f001 ffd4 	bl	8006538 <RCCEx_PLL2_Config>
 8004590:	4603      	mov	r3, r0
 8004592:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004596:	e004      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800459e:	e000      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80045a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10a      	bne.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80045aa:	4b5a      	ldr	r3, [pc, #360]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045ae:	f023 0103 	bic.w	r1, r3, #3
 80045b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045b8:	4a56      	ldr	r2, [pc, #344]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045ba:	430b      	orrs	r3, r1
 80045bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045be:	e003      	b.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80045d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045d8:	2300      	movs	r3, #0
 80045da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80045e2:	460b      	mov	r3, r1
 80045e4:	4313      	orrs	r3, r2
 80045e6:	f000 809f 	beq.w	8004728 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045f6:	f7fc fca5 	bl	8000f44 <HAL_GetTick>
 80045fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045fe:	e00b      	b.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004600:	f7fc fca0 	bl	8000f44 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b64      	cmp	r3, #100	@ 0x64
 800460e:	d903      	bls.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004616:	e005      	b.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004618:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004620:	2b00      	cmp	r3, #0
 8004622:	d0ed      	beq.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8004624:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004628:	2b00      	cmp	r3, #0
 800462a:	d179      	bne.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800462c:	4b39      	ldr	r3, [pc, #228]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004638:	4053      	eors	r3, r2
 800463a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800463e:	2b00      	cmp	r3, #0
 8004640:	d015      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004642:	4b34      	ldr	r3, [pc, #208]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800464a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800464e:	4b31      	ldr	r3, [pc, #196]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004652:	4a30      	ldr	r2, [pc, #192]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004658:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800465a:	4b2e      	ldr	r3, [pc, #184]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	4a2d      	ldr	r2, [pc, #180]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004660:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004664:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004666:	4a2b      	ldr	r2, [pc, #172]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004668:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800466c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800466e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004672:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004676:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800467a:	d118      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800467c:	f7fc fc62 	bl	8000f44 <HAL_GetTick>
 8004680:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004684:	e00d      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004686:	f7fc fc5d 	bl	8000f44 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004690:	1ad2      	subs	r2, r2, r3
 8004692:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004696:	429a      	cmp	r2, r3
 8004698:	d903      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800469a:	2303      	movs	r3, #3
 800469c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80046a0:	e005      	b.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046a2:	4b1c      	ldr	r3, [pc, #112]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a6:	f003 0302 	and.w	r3, r3, #2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0eb      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80046ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d129      	bne.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046c6:	d10e      	bne.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80046c8:	4b12      	ldr	r3, [pc, #72]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046d8:	091a      	lsrs	r2, r3, #4
 80046da:	4b10      	ldr	r3, [pc, #64]	@ (800471c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80046dc:	4013      	ands	r3, r2
 80046de:	4a0d      	ldr	r2, [pc, #52]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046e0:	430b      	orrs	r3, r1
 80046e2:	6113      	str	r3, [r2, #16]
 80046e4:	e005      	b.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046f0:	6113      	str	r3, [r2, #16]
 80046f2:	4b08      	ldr	r3, [pc, #32]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80046f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80046fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004702:	4a04      	ldr	r2, [pc, #16]	@ (8004714 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004704:	430b      	orrs	r3, r1
 8004706:	6713      	str	r3, [r2, #112]	@ 0x70
 8004708:	e00e      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800470a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800470e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8004712:	e009      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8004714:	58024400 	.word	0x58024400
 8004718:	58024800 	.word	0x58024800
 800471c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004724:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004728:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004730:	f002 0301 	and.w	r3, r2, #1
 8004734:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004738:	2300      	movs	r3, #0
 800473a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800473e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004742:	460b      	mov	r3, r1
 8004744:	4313      	orrs	r3, r2
 8004746:	f000 8089 	beq.w	800485c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800474a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004750:	2b28      	cmp	r3, #40	@ 0x28
 8004752:	d86b      	bhi.n	800482c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004754:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475a:	bf00      	nop
 800475c:	08004835 	.word	0x08004835
 8004760:	0800482d 	.word	0x0800482d
 8004764:	0800482d 	.word	0x0800482d
 8004768:	0800482d 	.word	0x0800482d
 800476c:	0800482d 	.word	0x0800482d
 8004770:	0800482d 	.word	0x0800482d
 8004774:	0800482d 	.word	0x0800482d
 8004778:	0800482d 	.word	0x0800482d
 800477c:	08004801 	.word	0x08004801
 8004780:	0800482d 	.word	0x0800482d
 8004784:	0800482d 	.word	0x0800482d
 8004788:	0800482d 	.word	0x0800482d
 800478c:	0800482d 	.word	0x0800482d
 8004790:	0800482d 	.word	0x0800482d
 8004794:	0800482d 	.word	0x0800482d
 8004798:	0800482d 	.word	0x0800482d
 800479c:	08004817 	.word	0x08004817
 80047a0:	0800482d 	.word	0x0800482d
 80047a4:	0800482d 	.word	0x0800482d
 80047a8:	0800482d 	.word	0x0800482d
 80047ac:	0800482d 	.word	0x0800482d
 80047b0:	0800482d 	.word	0x0800482d
 80047b4:	0800482d 	.word	0x0800482d
 80047b8:	0800482d 	.word	0x0800482d
 80047bc:	08004835 	.word	0x08004835
 80047c0:	0800482d 	.word	0x0800482d
 80047c4:	0800482d 	.word	0x0800482d
 80047c8:	0800482d 	.word	0x0800482d
 80047cc:	0800482d 	.word	0x0800482d
 80047d0:	0800482d 	.word	0x0800482d
 80047d4:	0800482d 	.word	0x0800482d
 80047d8:	0800482d 	.word	0x0800482d
 80047dc:	08004835 	.word	0x08004835
 80047e0:	0800482d 	.word	0x0800482d
 80047e4:	0800482d 	.word	0x0800482d
 80047e8:	0800482d 	.word	0x0800482d
 80047ec:	0800482d 	.word	0x0800482d
 80047f0:	0800482d 	.word	0x0800482d
 80047f4:	0800482d 	.word	0x0800482d
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	08004835 	.word	0x08004835
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004804:	3308      	adds	r3, #8
 8004806:	2101      	movs	r1, #1
 8004808:	4618      	mov	r0, r3
 800480a:	f001 fe95 	bl	8006538 <RCCEx_PLL2_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004814:	e00f      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	3328      	adds	r3, #40	@ 0x28
 800481c:	2101      	movs	r1, #1
 800481e:	4618      	mov	r0, r3
 8004820:	f001 ff3c 	bl	800669c <RCCEx_PLL3_Config>
 8004824:	4603      	mov	r3, r0
 8004826:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800482a:	e004      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004832:	e000      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8004834:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004836:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10a      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800483e:	4bbf      	ldr	r3, [pc, #764]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004842:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800484c:	4abb      	ldr	r2, [pc, #748]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800484e:	430b      	orrs	r3, r1
 8004850:	6553      	str	r3, [r2, #84]	@ 0x54
 8004852:	e003      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004854:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004858:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800485c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f002 0302 	and.w	r3, r2, #2
 8004868:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800486c:	2300      	movs	r3, #0
 800486e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004872:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004876:	460b      	mov	r3, r1
 8004878:	4313      	orrs	r3, r2
 800487a:	d041      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800487c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004880:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004882:	2b05      	cmp	r3, #5
 8004884:	d824      	bhi.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004886:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488c:	080048d9 	.word	0x080048d9
 8004890:	080048a5 	.word	0x080048a5
 8004894:	080048bb 	.word	0x080048bb
 8004898:	080048d9 	.word	0x080048d9
 800489c:	080048d9 	.word	0x080048d9
 80048a0:	080048d9 	.word	0x080048d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	3308      	adds	r3, #8
 80048aa:	2101      	movs	r1, #1
 80048ac:	4618      	mov	r0, r3
 80048ae:	f001 fe43 	bl	8006538 <RCCEx_PLL2_Config>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80048b8:	e00f      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048be:	3328      	adds	r3, #40	@ 0x28
 80048c0:	2101      	movs	r1, #1
 80048c2:	4618      	mov	r0, r3
 80048c4:	f001 feea 	bl	800669c <RCCEx_PLL3_Config>
 80048c8:	4603      	mov	r3, r0
 80048ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80048ce:	e004      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80048d6:	e000      	b.n	80048da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80048d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d10a      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048e2:	4b96      	ldr	r3, [pc, #600]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048e6:	f023 0107 	bic.w	r1, r3, #7
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80048f0:	4a92      	ldr	r2, [pc, #584]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048f2:	430b      	orrs	r3, r1
 80048f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80048f6:	e003      	b.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004908:	f002 0304 	and.w	r3, r2, #4
 800490c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004910:	2300      	movs	r3, #0
 8004912:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004916:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800491a:	460b      	mov	r3, r1
 800491c:	4313      	orrs	r3, r2
 800491e:	d044      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004924:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004928:	2b05      	cmp	r3, #5
 800492a:	d825      	bhi.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800492c:	a201      	add	r2, pc, #4	@ (adr r2, 8004934 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800492e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004932:	bf00      	nop
 8004934:	08004981 	.word	0x08004981
 8004938:	0800494d 	.word	0x0800494d
 800493c:	08004963 	.word	0x08004963
 8004940:	08004981 	.word	0x08004981
 8004944:	08004981 	.word	0x08004981
 8004948:	08004981 	.word	0x08004981
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800494c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004950:	3308      	adds	r3, #8
 8004952:	2101      	movs	r1, #1
 8004954:	4618      	mov	r0, r3
 8004956:	f001 fdef 	bl	8006538 <RCCEx_PLL2_Config>
 800495a:	4603      	mov	r3, r0
 800495c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004960:	e00f      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	3328      	adds	r3, #40	@ 0x28
 8004968:	2101      	movs	r1, #1
 800496a:	4618      	mov	r0, r3
 800496c:	f001 fe96 	bl	800669c <RCCEx_PLL3_Config>
 8004970:	4603      	mov	r3, r0
 8004972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004976:	e004      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800497e:	e000      	b.n	8004982 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004980:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004982:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10b      	bne.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800498a:	4b6c      	ldr	r3, [pc, #432]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	f023 0107 	bic.w	r1, r3, #7
 8004992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800499a:	4a68      	ldr	r2, [pc, #416]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800499c:	430b      	orrs	r3, r1
 800499e:	6593      	str	r3, [r2, #88]	@ 0x58
 80049a0:	e003      	b.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049b2:	f002 0320 	and.w	r3, r2, #32
 80049b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049ba:	2300      	movs	r3, #0
 80049bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049c0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80049c4:	460b      	mov	r3, r1
 80049c6:	4313      	orrs	r3, r2
 80049c8:	d055      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80049ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049d6:	d033      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80049d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049dc:	d82c      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e2:	d02f      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049e8:	d826      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049ee:	d02b      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80049f0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80049f4:	d820      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049fa:	d012      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80049fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a00:	d81a      	bhi.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d022      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004a06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a0a:	d115      	bne.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a10:	3308      	adds	r3, #8
 8004a12:	2100      	movs	r1, #0
 8004a14:	4618      	mov	r0, r3
 8004a16:	f001 fd8f 	bl	8006538 <RCCEx_PLL2_Config>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a20:	e015      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	3328      	adds	r3, #40	@ 0x28
 8004a28:	2102      	movs	r1, #2
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f001 fe36 	bl	800669c <RCCEx_PLL3_Config>
 8004a30:	4603      	mov	r3, r0
 8004a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004a36:	e00a      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004a3e:	e006      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a40:	bf00      	nop
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a44:	bf00      	nop
 8004a46:	e002      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a48:	bf00      	nop
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a56:	4b39      	ldr	r3, [pc, #228]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	4a35      	ldr	r2, [pc, #212]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a68:	430b      	orrs	r3, r1
 8004a6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8004a6c:	e003      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004a8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4313      	orrs	r3, r2
 8004a94:	d058      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004a9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004aa2:	d033      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004aa4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004aa8:	d82c      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004aaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aae:	d02f      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ab4:	d826      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ab6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004aba:	d02b      	beq.n	8004b14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004abc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ac0:	d820      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ac2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ac6:	d012      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004acc:	d81a      	bhi.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d022      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004ad2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ad6:	d115      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004adc:	3308      	adds	r3, #8
 8004ade:	2100      	movs	r1, #0
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f001 fd29 	bl	8006538 <RCCEx_PLL2_Config>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004aec:	e015      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004af2:	3328      	adds	r3, #40	@ 0x28
 8004af4:	2102      	movs	r1, #2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f001 fdd0 	bl	800669c <RCCEx_PLL3_Config>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004b02:	e00a      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004b0a:	e006      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b0c:	bf00      	nop
 8004b0e:	e004      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b10:	bf00      	nop
 8004b12:	e002      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b14:	bf00      	nop
 8004b16:	e000      	b.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10e      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b22:	4b06      	ldr	r3, [pc, #24]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004b32:	4a02      	ldr	r2, [pc, #8]	@ (8004b3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004b34:	430b      	orrs	r3, r1
 8004b36:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b38:	e006      	b.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004b3a:	bf00      	nop
 8004b3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004b54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b58:	2300      	movs	r3, #0
 8004b5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004b62:	460b      	mov	r3, r1
 8004b64:	4313      	orrs	r3, r2
 8004b66:	d055      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004b6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004b70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b74:	d033      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004b76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004b7a:	d82c      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b80:	d02f      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004b82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004b86:	d826      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b8c:	d02b      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004b8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004b92:	d820      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b98:	d012      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004b9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b9e:	d81a      	bhi.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d022      	beq.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004ba4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ba8:	d115      	bne.n	8004bd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bae:	3308      	adds	r3, #8
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f001 fcc0 	bl	8006538 <RCCEx_PLL2_Config>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004bbe:	e015      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004bc4:	3328      	adds	r3, #40	@ 0x28
 8004bc6:	2102      	movs	r1, #2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f001 fd67 	bl	800669c <RCCEx_PLL3_Config>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004bd4:	e00a      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004bdc:	e006      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004bde:	bf00      	nop
 8004be0:	e004      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004be2:	bf00      	nop
 8004be4:	e002      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004be6:	bf00      	nop
 8004be8:	e000      	b.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004bea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d10b      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004bf4:	4ba1      	ldr	r3, [pc, #644]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004c04:	4a9d      	ldr	r2, [pc, #628]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c06:	430b      	orrs	r3, r1
 8004c08:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c0a:	e003      	b.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004c10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1c:	f002 0308 	and.w	r3, r2, #8
 8004c20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c24:	2300      	movs	r3, #0
 8004c26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004c2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4313      	orrs	r3, r2
 8004c32:	d01e      	beq.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c46:	3328      	adds	r3, #40	@ 0x28
 8004c48:	2102      	movs	r1, #2
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f001 fd26 	bl	800669c <RCCEx_PLL3_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c5c:	4b87      	ldr	r3, [pc, #540]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c6c:	4a83      	ldr	r2, [pc, #524]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c6e:	430b      	orrs	r3, r1
 8004c70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c7a:	f002 0310 	and.w	r3, r2, #16
 8004c7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c82:	2300      	movs	r3, #0
 8004c84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004c88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	d01e      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004c96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c9e:	d10c      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ca4:	3328      	adds	r3, #40	@ 0x28
 8004ca6:	2102      	movs	r1, #2
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f001 fcf7 	bl	800669c <RCCEx_PLL3_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d002      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004cba:	4b70      	ldr	r3, [pc, #448]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004cca:	4a6c      	ldr	r2, [pc, #432]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004cdc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ce6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004cea:	460b      	mov	r3, r1
 8004cec:	4313      	orrs	r3, r2
 8004cee:	d03e      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004cf4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004cf8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004cfc:	d022      	beq.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004cfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d02:	d81b      	bhi.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d003      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004d08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d0c:	d00b      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004d0e:	e015      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d14:	3308      	adds	r3, #8
 8004d16:	2100      	movs	r1, #0
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fc0d 	bl	8006538 <RCCEx_PLL2_Config>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d24:	e00f      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d2a:	3328      	adds	r3, #40	@ 0x28
 8004d2c:	2102      	movs	r1, #2
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f001 fcb4 	bl	800669c <RCCEx_PLL3_Config>
 8004d34:	4603      	mov	r3, r0
 8004d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004d3a:	e004      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004d42:	e000      	b.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004d44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004d5e:	4a47      	ldr	r2, [pc, #284]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d60:	430b      	orrs	r3, r1
 8004d62:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d64:	e003      	b.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004d6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004d7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004d80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004d84:	460b      	mov	r3, r1
 8004d86:	4313      	orrs	r3, r2
 8004d88:	d03b      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d96:	d01f      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004d98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004d9c:	d818      	bhi.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d003      	beq.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004da4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004da8:	d007      	beq.n	8004dba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004daa:	e011      	b.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dac:	4b33      	ldr	r3, [pc, #204]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	4a32      	ldr	r2, [pc, #200]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004db8:	e00f      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dbe:	3328      	adds	r3, #40	@ 0x28
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f001 fc6a 	bl	800669c <RCCEx_PLL3_Config>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004dce:	e004      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004dd6:	e000      	b.n	8004dda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d10b      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004de2:	4b26      	ldr	r3, [pc, #152]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df2:	4a22      	ldr	r2, [pc, #136]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004df4:	430b      	orrs	r3, r1
 8004df6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004df8:	e003      	b.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004e0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004e10:	2300      	movs	r3, #0
 8004e12:	677b      	str	r3, [r7, #116]	@ 0x74
 8004e14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004e18:	460b      	mov	r3, r1
 8004e1a:	4313      	orrs	r3, r2
 8004e1c:	d034      	beq.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e2c:	d007      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004e2e:	e011      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e30:	4b12      	ldr	r3, [pc, #72]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e34:	4a11      	ldr	r2, [pc, #68]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e3c:	e00e      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e42:	3308      	adds	r3, #8
 8004e44:	2102      	movs	r1, #2
 8004e46:	4618      	mov	r0, r3
 8004e48:	f001 fb76 	bl	8006538 <RCCEx_PLL2_Config>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e52:	e003      	b.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004e5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e64:	4b05      	ldr	r3, [pc, #20]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e72:	4a02      	ldr	r2, [pc, #8]	@ (8004e7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e74:	430b      	orrs	r3, r1
 8004e76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004e78:	e006      	b.n	8004e88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e7a:	bf00      	nop
 8004e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004e84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e96:	2300      	movs	r3, #0
 8004e98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004e9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	d00c      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ea8:	3328      	adds	r3, #40	@ 0x28
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fbf5 	bl	800669c <RCCEx_PLL3_Config>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d002      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004eca:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ecc:	2300      	movs	r3, #0
 8004ece:	667b      	str	r3, [r7, #100]	@ 0x64
 8004ed0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	d038      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ee2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ee6:	d018      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004ee8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004eec:	d811      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004eee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef2:	d014      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ef8:	d80b      	bhi.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d011      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004efe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f02:	d106      	bne.n	8004f12 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f04:	4bc3      	ldr	r3, [pc, #780]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	4ac2      	ldr	r2, [pc, #776]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004f10:	e008      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004f18:	e004      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f1a:	bf00      	nop
 8004f1c:	e002      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f1e:	bf00      	nop
 8004f20:	e000      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004f22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10b      	bne.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f2c:	4bb9      	ldr	r3, [pc, #740]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f30:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f3c:	4ab5      	ldr	r2, [pc, #724]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f3e:	430b      	orrs	r3, r1
 8004f40:	6553      	str	r3, [r2, #84]	@ 0x54
 8004f42:	e003      	b.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004f48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f54:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004f58:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f5e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004f62:	460b      	mov	r3, r1
 8004f64:	4313      	orrs	r3, r2
 8004f66:	d009      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f68:	4baa      	ldr	r3, [pc, #680]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f6c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f76:	4aa7      	ldr	r2, [pc, #668]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f84:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004f88:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f8e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004f92:	460b      	mov	r3, r1
 8004f94:	4313      	orrs	r3, r2
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f98:	4b9e      	ldr	r3, [pc, #632]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fa4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004fa8:	4a9a      	ldr	r2, [pc, #616]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004faa:	430b      	orrs	r3, r1
 8004fac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004fba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fc0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	d009      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fca:	4b92      	ldr	r3, [pc, #584]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004fd8:	4a8e      	ldr	r2, [pc, #568]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004fea:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fec:	2300      	movs	r3, #0
 8004fee:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ff0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	d00e      	beq.n	8005018 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004ffa:	4b86      	ldr	r3, [pc, #536]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	4a85      	ldr	r2, [pc, #532]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005000:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005004:	6113      	str	r3, [r2, #16]
 8005006:	4b83      	ldr	r3, [pc, #524]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005008:	6919      	ldr	r1, [r3, #16]
 800500a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800500e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005012:	4a80      	ldr	r2, [pc, #512]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005014:	430b      	orrs	r3, r1
 8005016:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800501c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005020:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005024:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005026:	2300      	movs	r3, #0
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800502a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800502e:	460b      	mov	r3, r1
 8005030:	4313      	orrs	r3, r2
 8005032:	d009      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005034:	4b77      	ldr	r3, [pc, #476]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005036:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005038:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005042:	4a74      	ldr	r2, [pc, #464]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005044:	430b      	orrs	r3, r1
 8005046:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005054:	633b      	str	r3, [r7, #48]	@ 0x30
 8005056:	2300      	movs	r3, #0
 8005058:	637b      	str	r3, [r7, #52]	@ 0x34
 800505a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800505e:	460b      	mov	r3, r1
 8005060:	4313      	orrs	r3, r2
 8005062:	d00a      	beq.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005064:	4b6b      	ldr	r3, [pc, #428]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005068:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800506c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005070:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005074:	4a67      	ldr	r2, [pc, #412]	@ (8005214 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005076:	430b      	orrs	r3, r1
 8005078:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800507a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800507e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005082:	2100      	movs	r1, #0
 8005084:	62b9      	str	r1, [r7, #40]	@ 0x28
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800508c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005090:	460b      	mov	r3, r1
 8005092:	4313      	orrs	r3, r2
 8005094:	d011      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800509a:	3308      	adds	r3, #8
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f001 fa4a 	bl	8006538 <RCCEx_PLL2_Config>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c2:	2100      	movs	r1, #0
 80050c4:	6239      	str	r1, [r7, #32]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80050cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80050d0:	460b      	mov	r3, r1
 80050d2:	4313      	orrs	r3, r2
 80050d4:	d011      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80050d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050da:	3308      	adds	r3, #8
 80050dc:	2101      	movs	r1, #1
 80050de:	4618      	mov	r0, r3
 80050e0:	f001 fa2a 	bl	8006538 <RCCEx_PLL2_Config>
 80050e4:	4603      	mov	r3, r0
 80050e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80050ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d003      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80050fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005102:	2100      	movs	r1, #0
 8005104:	61b9      	str	r1, [r7, #24]
 8005106:	f003 0304 	and.w	r3, r3, #4
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005110:	460b      	mov	r3, r1
 8005112:	4313      	orrs	r3, r2
 8005114:	d011      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005116:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511a:	3308      	adds	r3, #8
 800511c:	2102      	movs	r1, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f001 fa0a 	bl	8006538 <RCCEx_PLL2_Config>
 8005124:	4603      	mov	r3, r0
 8005126:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800512a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800513e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005142:	2100      	movs	r1, #0
 8005144:	6139      	str	r1, [r7, #16]
 8005146:	f003 0308 	and.w	r3, r3, #8
 800514a:	617b      	str	r3, [r7, #20]
 800514c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005150:	460b      	mov	r3, r1
 8005152:	4313      	orrs	r3, r2
 8005154:	d011      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800515a:	3328      	adds	r3, #40	@ 0x28
 800515c:	2100      	movs	r1, #0
 800515e:	4618      	mov	r0, r3
 8005160:	f001 fa9c 	bl	800669c <RCCEx_PLL3_Config>
 8005164:	4603      	mov	r3, r0
 8005166:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800516a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005172:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005176:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800517a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	2100      	movs	r1, #0
 8005184:	60b9      	str	r1, [r7, #8]
 8005186:	f003 0310 	and.w	r3, r3, #16
 800518a:	60fb      	str	r3, [r7, #12]
 800518c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005190:	460b      	mov	r3, r1
 8005192:	4313      	orrs	r3, r2
 8005194:	d011      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800519a:	3328      	adds	r3, #40	@ 0x28
 800519c:	2101      	movs	r1, #1
 800519e:	4618      	mov	r0, r3
 80051a0:	f001 fa7c 	bl	800669c <RCCEx_PLL3_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80051ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c2:	2100      	movs	r1, #0
 80051c4:	6039      	str	r1, [r7, #0]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80051d0:	460b      	mov	r3, r1
 80051d2:	4313      	orrs	r3, r2
 80051d4:	d011      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80051d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051da:	3328      	adds	r3, #40	@ 0x28
 80051dc:	2102      	movs	r1, #2
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 fa5c 	bl	800669c <RCCEx_PLL3_Config>
 80051e4:	4603      	mov	r3, r0
 80051e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80051ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d003      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80051f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80051fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	e000      	b.n	8005208 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
}
 8005208:	4618      	mov	r0, r3
 800520a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800520e:	46bd      	mov	sp, r7
 8005210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005214:	58024400 	.word	0x58024400

08005218 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b090      	sub	sp, #64	@ 0x40
 800521c:	af00      	add	r7, sp, #0
 800521e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8005222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005226:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800522a:	430b      	orrs	r3, r1
 800522c:	f040 8094 	bne.w	8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8005230:	4b9e      	ldr	r3, [pc, #632]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005234:	f003 0307 	and.w	r3, r3, #7
 8005238:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800523a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800523c:	2b04      	cmp	r3, #4
 800523e:	f200 8087 	bhi.w	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005242:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	0800525d 	.word	0x0800525d
 800524c:	08005285 	.word	0x08005285
 8005250:	080052ad 	.word	0x080052ad
 8005254:	08005349 	.word	0x08005349
 8005258:	080052d5 	.word	0x080052d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800525c:	4b93      	ldr	r3, [pc, #588]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005264:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005268:	d108      	bne.n	800527c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800526a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800526e:	4618      	mov	r0, r3
 8005270:	f001 f810 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005278:	f000 bd45 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800527c:	2300      	movs	r3, #0
 800527e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005280:	f000 bd41 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005284:	4b89      	ldr	r3, [pc, #548]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800528c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005290:	d108      	bne.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005292:	f107 0318 	add.w	r3, r7, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fd54 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052a0:	f000 bd31 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a8:	f000 bd2d 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80052ac:	4b7f      	ldr	r3, [pc, #508]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052b8:	d108      	bne.n	80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80052ba:	f107 030c 	add.w	r3, r7, #12
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 fe94 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052c8:	f000 bd1d 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052d0:	f000 bd19 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80052d4:	4b75      	ldr	r3, [pc, #468]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052de:	4b73      	ldr	r3, [pc, #460]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0304 	and.w	r3, r3, #4
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d10c      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d109      	bne.n	8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052f0:	4b6e      	ldr	r3, [pc, #440]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	08db      	lsrs	r3, r3, #3
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	4a6d      	ldr	r2, [pc, #436]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005302:	e01f      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005304:	4b69      	ldr	r3, [pc, #420]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800530c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005310:	d106      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8005312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005318:	d102      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800531a:	4b66      	ldr	r3, [pc, #408]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800531c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800531e:	e011      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005320:	4b62      	ldr	r3, [pc, #392]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005328:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800532c:	d106      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800532e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005330:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005334:	d102      	bne.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005336:	4b60      	ldr	r3, [pc, #384]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800533a:	e003      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800533c:	2300      	movs	r3, #0
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005340:	f000 bce1 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005344:	f000 bcdf 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005348:	4b5c      	ldr	r3, [pc, #368]	@ (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800534c:	f000 bcdb 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005354:	f000 bcd7 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005358:	e9d7 2300 	ldrd	r2, r3, [r7]
 800535c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8005360:	430b      	orrs	r3, r1
 8005362:	f040 80ad 	bne.w	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005366:	4b51      	ldr	r3, [pc, #324]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005368:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800536a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800536e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8005370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005376:	d056      	beq.n	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800537a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800537e:	f200 8090 	bhi.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2bc0      	cmp	r3, #192	@ 0xc0
 8005386:	f000 8088 	beq.w	800549a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800538a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800538c:	2bc0      	cmp	r3, #192	@ 0xc0
 800538e:	f200 8088 	bhi.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005394:	2b80      	cmp	r3, #128	@ 0x80
 8005396:	d032      	beq.n	80053fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800539a:	2b80      	cmp	r3, #128	@ 0x80
 800539c:	f200 8081 	bhi.w	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80053a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d003      	beq.n	80053ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b40      	cmp	r3, #64	@ 0x40
 80053aa:	d014      	beq.n	80053d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80053ac:	e079      	b.n	80054a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80053ae:	4b3f      	ldr	r3, [pc, #252]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053ba:	d108      	bne.n	80053ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80053bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 ff67 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80053c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053ca:	f000 bc9c 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ce:	2300      	movs	r3, #0
 80053d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053d2:	f000 bc98 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80053d6:	4b35      	ldr	r3, [pc, #212]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80053e2:	d108      	bne.n	80053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053e4:	f107 0318 	add.w	r3, r7, #24
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fcab 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053f2:	f000 bc88 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053fa:	f000 bc84 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053fe:	4b2b      	ldr	r3, [pc, #172]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005406:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800540a:	d108      	bne.n	800541e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800540c:	f107 030c 	add.w	r3, r7, #12
 8005410:	4618      	mov	r0, r3
 8005412:	f000 fdeb 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800541a:	f000 bc74 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800541e:	2300      	movs	r3, #0
 8005420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005422:	f000 bc70 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005426:	4b21      	ldr	r3, [pc, #132]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005428:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800542a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800542e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005430:	4b1e      	ldr	r3, [pc, #120]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d10c      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	2b00      	cmp	r3, #0
 8005440:	d109      	bne.n	8005456 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005442:	4b1a      	ldr	r3, [pc, #104]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	08db      	lsrs	r3, r3, #3
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	4a18      	ldr	r2, [pc, #96]	@ (80054b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005454:	e01f      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005456:	4b15      	ldr	r3, [pc, #84]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800545e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005462:	d106      	bne.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800546a:	d102      	bne.n	8005472 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800546c:	4b11      	ldr	r3, [pc, #68]	@ (80054b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800546e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005470:	e011      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005472:	4b0e      	ldr	r3, [pc, #56]	@ (80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800547a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800547e:	d106      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005482:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005486:	d102      	bne.n	800548e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005488:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800548a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800548c:	e003      	b.n	8005496 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005492:	f000 bc38 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005496:	f000 bc36 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800549c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800549e:	f000 bc32 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054a6:	f000 bc2e 	b.w	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80054aa:	bf00      	nop
 80054ac:	58024400 	.word	0x58024400
 80054b0:	03d09000 	.word	0x03d09000
 80054b4:	003d0900 	.word	0x003d0900
 80054b8:	017d7840 	.word	0x017d7840
 80054bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 80054c8:	430b      	orrs	r3, r1
 80054ca:	f040 809c 	bne.w	8005606 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80054ce:	4b9e      	ldr	r3, [pc, #632]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80054d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80054d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054de:	d054      	beq.n	800558a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80054e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054e6:	f200 808b 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80054ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054f0:	f000 8083 	beq.w	80055fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80054fa:	f200 8081 	bhi.w	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80054fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005500:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005504:	d02f      	beq.n	8005566 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8005506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005508:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800550c:	d878      	bhi.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800550e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005510:	2b00      	cmp	r3, #0
 8005512:	d004      	beq.n	800551e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8005514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005516:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800551a:	d012      	beq.n	8005542 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800551c:	e070      	b.n	8005600 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800551e:	4b8a      	ldr	r3, [pc, #552]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005526:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800552a:	d107      	bne.n	800553c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800552c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005530:	4618      	mov	r0, r3
 8005532:	f000 feaf 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800553a:	e3e4      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800553c:	2300      	movs	r3, #0
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005540:	e3e1      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005542:	4b81      	ldr	r3, [pc, #516]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800554a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800554e:	d107      	bne.n	8005560 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005550:	f107 0318 	add.w	r3, r7, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f000 fbf5 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800555e:	e3d2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005560:	2300      	movs	r3, #0
 8005562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005564:	e3cf      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005566:	4b78      	ldr	r3, [pc, #480]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800556e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005572:	d107      	bne.n	8005584 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005574:	f107 030c 	add.w	r3, r7, #12
 8005578:	4618      	mov	r0, r3
 800557a:	f000 fd37 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005582:	e3c0      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005584:	2300      	movs	r3, #0
 8005586:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005588:	e3bd      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800558a:	4b6f      	ldr	r3, [pc, #444]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800558c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800558e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005592:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005594:	4b6c      	ldr	r3, [pc, #432]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b04      	cmp	r3, #4
 800559e:	d10c      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80055a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d109      	bne.n	80055ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055a6:	4b68      	ldr	r3, [pc, #416]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	08db      	lsrs	r3, r3, #3
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	4a66      	ldr	r2, [pc, #408]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80055b2:	fa22 f303 	lsr.w	r3, r2, r3
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b8:	e01e      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80055ba:	4b63      	ldr	r3, [pc, #396]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055c6:	d106      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80055c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80055ce:	d102      	bne.n	80055d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80055d0:	4b5f      	ldr	r3, [pc, #380]	@ (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055d4:	e010      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80055d6:	4b5c      	ldr	r3, [pc, #368]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80055e2:	d106      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055ea:	d102      	bne.n	80055f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055ec:	4b59      	ldr	r3, [pc, #356]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80055ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055f0:	e002      	b.n	80055f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80055f6:	e386      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055f8:	e385      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055fa:	4b57      	ldr	r3, [pc, #348]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055fe:	e382      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005600:	2300      	movs	r3, #0
 8005602:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005604:	e37f      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8005606:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800560e:	430b      	orrs	r3, r1
 8005610:	f040 80a7 	bne.w	8005762 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8005614:	4b4c      	ldr	r3, [pc, #304]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005618:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800561c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800561e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005620:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005624:	d055      	beq.n	80056d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800562c:	f200 8096 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005636:	f000 8084 	beq.w	8005742 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005640:	f200 808c 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005646:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800564a:	d030      	beq.n	80056ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800564c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005652:	f200 8083 	bhi.w	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	2b00      	cmp	r3, #0
 800565a:	d004      	beq.n	8005666 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800565c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800565e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005662:	d012      	beq.n	800568a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005664:	e07a      	b.n	800575c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005666:	4b38      	ldr	r3, [pc, #224]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800566e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005672:	d107      	bne.n	8005684 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005674:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fe0b 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005682:	e340      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005684:	2300      	movs	r3, #0
 8005686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005688:	e33d      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800568a:	4b2f      	ldr	r3, [pc, #188]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005692:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005696:	d107      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005698:	f107 0318 	add.w	r3, r7, #24
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fb51 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a6:	e32e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056ac:	e32b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80056ae:	4b26      	ldr	r3, [pc, #152]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80056b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056ba:	d107      	bne.n	80056cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80056bc:	f107 030c 	add.w	r3, r7, #12
 80056c0:	4618      	mov	r0, r3
 80056c2:	f000 fc93 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056ca:	e31c      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056cc:	2300      	movs	r3, #0
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80056d0:	e319      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80056da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056dc:	4b1a      	ldr	r3, [pc, #104]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0304 	and.w	r3, r3, #4
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d10c      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80056e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056ee:	4b16      	ldr	r3, [pc, #88]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	08db      	lsrs	r3, r3, #3
 80056f4:	f003 0303 	and.w	r3, r3, #3
 80056f8:	4a14      	ldr	r2, [pc, #80]	@ (800574c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80056fa:	fa22 f303 	lsr.w	r3, r2, r3
 80056fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005700:	e01e      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005702:	4b11      	ldr	r3, [pc, #68]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800570a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800570e:	d106      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005712:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005716:	d102      	bne.n	800571e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005718:	4b0d      	ldr	r3, [pc, #52]	@ (8005750 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800571c:	e010      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800571e:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800572a:	d106      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005732:	d102      	bne.n	800573a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005734:	4b07      	ldr	r3, [pc, #28]	@ (8005754 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	e002      	b.n	8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800573a:	2300      	movs	r3, #0
 800573c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800573e:	e2e2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005740:	e2e1      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005742:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005746:	e2de      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005748:	58024400 	.word	0x58024400
 800574c:	03d09000 	.word	0x03d09000
 8005750:	003d0900 	.word	0x003d0900
 8005754:	017d7840 	.word	0x017d7840
 8005758:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800575c:	2300      	movs	r3, #0
 800575e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005760:	e2d1      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005766:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800576a:	430b      	orrs	r3, r1
 800576c:	f040 809c 	bne.w	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005770:	4b93      	ldr	r3, [pc, #588]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005772:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005774:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8005778:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005780:	d054      	beq.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005788:	f200 808b 	bhi.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005792:	f000 8083 	beq.w	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800579c:	f200 8081 	bhi.w	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80057a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057a6:	d02f      	beq.n	8005808 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80057ae:	d878      	bhi.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057bc:	d012      	beq.n	80057e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80057be:	e070      	b.n	80058a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80057c0:	4b7f      	ldr	r3, [pc, #508]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80057cc:	d107      	bne.n	80057de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80057ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 fd5e 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057dc:	e293      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057e2:	e290      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057e4:	4b76      	ldr	r3, [pc, #472]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80057f0:	d107      	bne.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057f2:	f107 0318 	add.w	r3, r7, #24
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 faa4 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005800:	e281      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005806:	e27e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005808:	4b6d      	ldr	r3, [pc, #436]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005810:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005814:	d107      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005816:	f107 030c 	add.w	r3, r7, #12
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fbe6 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005824:	e26f      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005826:	2300      	movs	r3, #0
 8005828:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800582a:	e26c      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800582c:	4b64      	ldr	r3, [pc, #400]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800582e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005830:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005834:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005836:	4b62      	ldr	r3, [pc, #392]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0304 	and.w	r3, r3, #4
 800583e:	2b04      	cmp	r3, #4
 8005840:	d10c      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d109      	bne.n	800585c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005848:	4b5d      	ldr	r3, [pc, #372]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	08db      	lsrs	r3, r3, #3
 800584e:	f003 0303 	and.w	r3, r3, #3
 8005852:	4a5c      	ldr	r2, [pc, #368]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005854:	fa22 f303 	lsr.w	r3, r2, r3
 8005858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800585a:	e01e      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800585c:	4b58      	ldr	r3, [pc, #352]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005864:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005868:	d106      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800586a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800586c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005870:	d102      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005872:	4b55      	ldr	r3, [pc, #340]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005876:	e010      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005878:	4b51      	ldr	r3, [pc, #324]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005880:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005884:	d106      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800588c:	d102      	bne.n	8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800588e:	4b4f      	ldr	r3, [pc, #316]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005892:	e002      	b.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005894:	2300      	movs	r3, #0
 8005896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005898:	e235      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800589a:	e234      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800589c:	4b4c      	ldr	r3, [pc, #304]	@ (80059d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a0:	e231      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058a6:	e22e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80058a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058ac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 80058b0:	430b      	orrs	r3, r1
 80058b2:	f040 808f 	bne.w	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80058b6:	4b42      	ldr	r3, [pc, #264]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058ba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 80058be:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058c6:	d06b      	beq.n	80059a0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80058c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80058ce:	d874      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058d6:	d056      	beq.n	8005986 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80058d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80058de:	d86c      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058e6:	d03b      	beq.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80058e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058ee:	d864      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f6:	d021      	beq.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80058f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058fe:	d85c      	bhi.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800590c:	d004      	beq.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800590e:	e054      	b.n	80059ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005910:	f7fe fa4c 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 8005914:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005916:	e1f6      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005918:	4b29      	ldr	r3, [pc, #164]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005920:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005924:	d107      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005926:	f107 0318 	add.w	r3, r7, #24
 800592a:	4618      	mov	r0, r3
 800592c:	f000 fa0a 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005934:	e1e7      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005936:	2300      	movs	r3, #0
 8005938:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800593a:	e1e4      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800593c:	4b20      	ldr	r3, [pc, #128]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005944:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005948:	d107      	bne.n	800595a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	4618      	mov	r0, r3
 8005950:	f000 fb4c 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005958:	e1d5      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595a:	2300      	movs	r3, #0
 800595c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800595e:	e1d2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005960:	4b17      	ldr	r3, [pc, #92]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0304 	and.w	r3, r3, #4
 8005968:	2b04      	cmp	r3, #4
 800596a:	d109      	bne.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800596c:	4b14      	ldr	r3, [pc, #80]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	08db      	lsrs	r3, r3, #3
 8005972:	f003 0303 	and.w	r3, r3, #3
 8005976:	4a13      	ldr	r2, [pc, #76]	@ (80059c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005978:	fa22 f303 	lsr.w	r3, r2, r3
 800597c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800597e:	e1c2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005980:	2300      	movs	r3, #0
 8005982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005984:	e1bf      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005986:	4b0e      	ldr	r3, [pc, #56]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005992:	d102      	bne.n	800599a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005994:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005998:	e1b5      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800599a:	2300      	movs	r3, #0
 800599c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599e:	e1b2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80059a0:	4b07      	ldr	r3, [pc, #28]	@ (80059c0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ac:	d102      	bne.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80059ae:	4b07      	ldr	r3, [pc, #28]	@ (80059cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80059b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059b2:	e1a8      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059b4:	2300      	movs	r3, #0
 80059b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b8:	e1a5      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059be:	e1a2      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059c0:	58024400 	.word	0x58024400
 80059c4:	03d09000 	.word	0x03d09000
 80059c8:	003d0900 	.word	0x003d0900
 80059cc:	017d7840 	.word	0x017d7840
 80059d0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80059d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059d8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80059dc:	430b      	orrs	r3, r1
 80059de:	d173      	bne.n	8005ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059e0:	4b9c      	ldr	r3, [pc, #624]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80059ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f0:	d02f      	beq.n	8005a52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80059f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059f8:	d863      	bhi.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80059fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d004      	beq.n	8005a0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005a00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a06:	d012      	beq.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005a08:	e05b      	b.n	8005ac2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a0a:	4b92      	ldr	r3, [pc, #584]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a16:	d107      	bne.n	8005a28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a18:	f107 0318 	add.w	r3, r7, #24
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 f991 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a26:	e16e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a2c:	e16b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a2e:	4b89      	ldr	r3, [pc, #548]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a3c:	f107 030c 	add.w	r3, r7, #12
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 fad3 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a4a:	e15c      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a50:	e159      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a52:	4b80      	ldr	r3, [pc, #512]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005a5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a5c:	4b7d      	ldr	r3, [pc, #500]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b04      	cmp	r3, #4
 8005a66:	d10c      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6e:	4b79      	ldr	r3, [pc, #484]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	08db      	lsrs	r3, r3, #3
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	4a77      	ldr	r2, [pc, #476]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a80:	e01e      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a82:	4b74      	ldr	r3, [pc, #464]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005a90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a96:	d102      	bne.n	8005a9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a98:	4b70      	ldr	r3, [pc, #448]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a9c:	e010      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005aaa:	d106      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ab2:	d102      	bne.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005ab4:	4b6a      	ldr	r3, [pc, #424]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005ab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8005abe:	e122      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005ac0:	e121      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ac6:	e11e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ac8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005acc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	d133      	bne.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005ad4:	4b5f      	ldr	r3, [pc, #380]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ad8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005adc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d004      	beq.n	8005aee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005aea:	d012      	beq.n	8005b12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005aec:	e023      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005aee:	4b59      	ldr	r3, [pc, #356]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005af6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005afa:	d107      	bne.n	8005b0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005afc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 fbc7 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b0a:	e0fc      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b10:	e0f9      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b12:	4b50      	ldr	r3, [pc, #320]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b20:	f107 0318 	add.w	r3, r7, #24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f90d 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005b2a:	6a3b      	ldr	r3, [r7, #32]
 8005b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b2e:	e0ea      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b30:	2300      	movs	r3, #0
 8005b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b34:	e0e7      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005b36:	2300      	movs	r3, #0
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3a:	e0e4      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b40:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8005b44:	430b      	orrs	r3, r1
 8005b46:	f040 808d 	bne.w	8005c64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005b4a:	4b42      	ldr	r3, [pc, #264]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b4e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b5a:	d06b      	beq.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b62:	d874      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b6a:	d056      	beq.n	8005c1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b72:	d86c      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b7a:	d03b      	beq.n	8005bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b82:	d864      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b8a:	d021      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b92:	d85c      	bhi.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d004      	beq.n	8005ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ba0:	d004      	beq.n	8005bac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005ba2:	e054      	b.n	8005c4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005ba4:	f000 f8b8 	bl	8005d18 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ba8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005baa:	e0ac      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bac:	4b29      	ldr	r3, [pc, #164]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005bb8:	d107      	bne.n	8005bca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bba:	f107 0318 	add.w	r3, r7, #24
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 f8c0 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bc8:	e09d      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bce:	e09a      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005bd0:	4b20      	ldr	r3, [pc, #128]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005bd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bdc:	d107      	bne.n	8005bee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bde:	f107 030c 	add.w	r3, r7, #12
 8005be2:	4618      	mov	r0, r3
 8005be4:	f000 fa02 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bec:	e08b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bee:	2300      	movs	r3, #0
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf2:	e088      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bf4:	4b17      	ldr	r3, [pc, #92]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0304 	and.w	r3, r3, #4
 8005bfc:	2b04      	cmp	r3, #4
 8005bfe:	d109      	bne.n	8005c14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c00:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	08db      	lsrs	r3, r3, #3
 8005c06:	f003 0303 	and.w	r3, r3, #3
 8005c0a:	4a13      	ldr	r2, [pc, #76]	@ (8005c58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8005c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c12:	e078      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c14:	2300      	movs	r3, #0
 8005c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c18:	e075      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c26:	d102      	bne.n	8005c2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005c28:	4b0c      	ldr	r3, [pc, #48]	@ (8005c5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005c2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c2c:	e06b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c32:	e068      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c34:	4b07      	ldr	r3, [pc, #28]	@ (8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005c40:	d102      	bne.n	8005c48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005c42:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005c44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c46:	e05e      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c4c:	e05b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c52:	e058      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c54:	58024400 	.word	0x58024400
 8005c58:	03d09000 	.word	0x03d09000
 8005c5c:	003d0900 	.word	0x003d0900
 8005c60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005c64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8005c6c:	430b      	orrs	r3, r1
 8005c6e:	d148      	bne.n	8005d02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005c70:	4b27      	ldr	r3, [pc, #156]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8005c78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8005c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c80:	d02a      	beq.n	8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c88:	d838      	bhi.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d004      	beq.n	8005c9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c96:	d00d      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005c98:	e030      	b.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ca2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005ca6:	d102      	bne.n	8005cae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8005d14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cac:	e02b      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cb2:	e028      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005cb4:	4b16      	ldr	r3, [pc, #88]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005cbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005cc0:	d107      	bne.n	8005cd2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005cc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f000 fae4 	bl	8006294 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cd0:	e019      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cd6:	e016      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce4:	d107      	bne.n	8005cf6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce6:	f107 0318 	add.w	r3, r7, #24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 f82a 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cf4:	e007      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfa:	e004      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d00:	e001      	b.n	8005d06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005d06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3740      	adds	r7, #64	@ 0x40
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	58024400 	.word	0x58024400
 8005d14:	017d7840 	.word	0x017d7840

08005d18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005d1c:	f7fe f816 	bl	8003d4c <HAL_RCC_GetHCLKFreq>
 8005d20:	4602      	mov	r2, r0
 8005d22:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	091b      	lsrs	r3, r3, #4
 8005d28:	f003 0307 	and.w	r3, r3, #7
 8005d2c:	4904      	ldr	r1, [pc, #16]	@ (8005d40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005d2e:	5ccb      	ldrb	r3, [r1, r3]
 8005d30:	f003 031f 	and.w	r3, r3, #31
 8005d34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	bd80      	pop	{r7, pc}
 8005d3c:	58024400 	.word	0x58024400
 8005d40:	08008430 	.word	0x08008430

08005d44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b089      	sub	sp, #36	@ 0x24
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d4c:	4ba1      	ldr	r3, [pc, #644]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d50:	f003 0303 	and.w	r3, r3, #3
 8005d54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d56:	4b9f      	ldr	r3, [pc, #636]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d5a:	0b1b      	lsrs	r3, r3, #12
 8005d5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d62:	4b9c      	ldr	r3, [pc, #624]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	091b      	lsrs	r3, r3, #4
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d6e:	4b99      	ldr	r3, [pc, #612]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	08db      	lsrs	r3, r3, #3
 8005d74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d78:	693a      	ldr	r2, [r7, #16]
 8005d7a:	fb02 f303 	mul.w	r3, r2, r3
 8005d7e:	ee07 3a90 	vmov	s15, r3
 8005d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 8111 	beq.w	8005fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	f000 8083 	beq.w	8005ea0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	f200 80a1 	bhi.w	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d003      	beq.n	8005db0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d056      	beq.n	8005e5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005dae:	e099      	b.n	8005ee4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005db0:	4b88      	ldr	r3, [pc, #544]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d02d      	beq.n	8005e18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005dbc:	4b85      	ldr	r3, [pc, #532]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	08db      	lsrs	r3, r3, #3
 8005dc2:	f003 0303 	and.w	r3, r3, #3
 8005dc6:	4a84      	ldr	r2, [pc, #528]	@ (8005fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005dc8:	fa22 f303 	lsr.w	r3, r2, r3
 8005dcc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	ee07 3a90 	vmov	s15, r3
 8005dd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	ee07 3a90 	vmov	s15, r3
 8005dde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005de6:	4b7b      	ldr	r3, [pc, #492]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dee:	ee07 3a90 	vmov	s15, r3
 8005df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dfa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005e16:	e087      	b.n	8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	ee07 3a90 	vmov	s15, r3
 8005e1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005fe0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005e26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e2a:	4b6a      	ldr	r3, [pc, #424]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e32:	ee07 3a90 	vmov	s15, r3
 8005e36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e5a:	e065      	b.n	8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	ee07 3a90 	vmov	s15, r3
 8005e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e6e:	4b59      	ldr	r3, [pc, #356]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e76:	ee07 3a90 	vmov	s15, r3
 8005e7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005e92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e9e:	e043      	b.n	8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	ee07 3a90 	vmov	s15, r3
 8005ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005eae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eb2:	4b48      	ldr	r3, [pc, #288]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ec2:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ec6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005eca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ece:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ed2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ed6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ede:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ee2:	e021      	b.n	8005f28 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	ee07 3a90 	vmov	s15, r3
 8005eea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005fe4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005ef2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ef6:	4b37      	ldr	r3, [pc, #220]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005efe:	ee07 3a90 	vmov	s15, r3
 8005f02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f06:	ed97 6a03 	vldr	s12, [r7, #12]
 8005f0a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005fdc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005f0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005f12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005f16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005f1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005f1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005f26:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005f28:	4b2a      	ldr	r3, [pc, #168]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2c:	0a5b      	lsrs	r3, r3, #9
 8005f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f4e:	ee17 2a90 	vmov	r2, s15
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f56:	4b1f      	ldr	r3, [pc, #124]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	0c1b      	lsrs	r3, r3, #16
 8005f5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f60:	ee07 3a90 	vmov	s15, r3
 8005f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f68:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f70:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f7c:	ee17 2a90 	vmov	r2, s15
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f84:	4b13      	ldr	r3, [pc, #76]	@ (8005fd4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f88:	0e1b      	lsrs	r3, r3, #24
 8005f8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f8e:	ee07 3a90 	vmov	s15, r3
 8005f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f96:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005f9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fa2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005faa:	ee17 2a90 	vmov	r2, s15
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	609a      	str	r2, [r3, #8]
}
 8005fc6:	bf00      	nop
 8005fc8:	3724      	adds	r7, #36	@ 0x24
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	58024400 	.word	0x58024400
 8005fd8:	03d09000 	.word	0x03d09000
 8005fdc:	46000000 	.word	0x46000000
 8005fe0:	4c742400 	.word	0x4c742400
 8005fe4:	4a742400 	.word	0x4a742400
 8005fe8:	4bbebc20 	.word	0x4bbebc20

08005fec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b089      	sub	sp, #36	@ 0x24
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005ff4:	4ba1      	ldr	r3, [pc, #644]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005ffe:	4b9f      	ldr	r3, [pc, #636]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006002:	0d1b      	lsrs	r3, r3, #20
 8006004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006008:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800600a:	4b9c      	ldr	r3, [pc, #624]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800600c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800600e:	0a1b      	lsrs	r3, r3, #8
 8006010:	f003 0301 	and.w	r3, r3, #1
 8006014:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006016:	4b99      	ldr	r3, [pc, #612]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800601a:	08db      	lsrs	r3, r3, #3
 800601c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006020:	693a      	ldr	r2, [r7, #16]
 8006022:	fb02 f303 	mul.w	r3, r2, r3
 8006026:	ee07 3a90 	vmov	s15, r3
 800602a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800602e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 8111 	beq.w	800625c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b02      	cmp	r3, #2
 800603e:	f000 8083 	beq.w	8006148 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	2b02      	cmp	r3, #2
 8006046:	f200 80a1 	bhi.w	800618c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006050:	69bb      	ldr	r3, [r7, #24]
 8006052:	2b01      	cmp	r3, #1
 8006054:	d056      	beq.n	8006104 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006056:	e099      	b.n	800618c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006058:	4b88      	ldr	r3, [pc, #544]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0320 	and.w	r3, r3, #32
 8006060:	2b00      	cmp	r3, #0
 8006062:	d02d      	beq.n	80060c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006064:	4b85      	ldr	r3, [pc, #532]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	08db      	lsrs	r3, r3, #3
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	4a84      	ldr	r2, [pc, #528]	@ (8006280 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
 8006074:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	ee07 3a90 	vmov	s15, r3
 800607c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	ee07 3a90 	vmov	s15, r3
 8006086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800608e:	4b7b      	ldr	r3, [pc, #492]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006096:	ee07 3a90 	vmov	s15, r3
 800609a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800609e:	ed97 6a03 	vldr	s12, [r7, #12]
 80060a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80060be:	e087      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	ee07 3a90 	vmov	s15, r3
 80060c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006288 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80060ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d2:	4b6a      	ldr	r3, [pc, #424]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060da:	ee07 3a90 	vmov	s15, r3
 80060de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80060e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80060f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006102:	e065      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	ee07 3a90 	vmov	s15, r3
 800610a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800610e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800628c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006116:	4b59      	ldr	r3, [pc, #356]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800611e:	ee07 3a90 	vmov	s15, r3
 8006122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006126:	ed97 6a03 	vldr	s12, [r7, #12]
 800612a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800612e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800613a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800613e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006142:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006146:	e043      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006152:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006290 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615a:	4b48      	ldr	r3, [pc, #288]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800615c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800615e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006162:	ee07 3a90 	vmov	s15, r3
 8006166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616a:	ed97 6a03 	vldr	s12, [r7, #12]
 800616e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800617e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006186:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800618a:	e021      	b.n	80061d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	ee07 3a90 	vmov	s15, r3
 8006192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006196:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800628c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800619a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800619e:	4b37      	ldr	r3, [pc, #220]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a6:	ee07 3a90 	vmov	s15, r3
 80061aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80061b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006284 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80061b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80061c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80061ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80061d0:	4b2a      	ldr	r3, [pc, #168]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d4:	0a5b      	lsrs	r3, r3, #9
 80061d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061da:	ee07 3a90 	vmov	s15, r3
 80061de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80061e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80061ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061f6:	ee17 2a90 	vmov	r2, s15
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061fe:	4b1f      	ldr	r3, [pc, #124]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006202:	0c1b      	lsrs	r3, r3, #16
 8006204:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006208:	ee07 3a90 	vmov	s15, r3
 800620c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006210:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006214:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006218:	edd7 6a07 	vldr	s13, [r7, #28]
 800621c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006220:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006224:	ee17 2a90 	vmov	r2, s15
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800622c:	4b13      	ldr	r3, [pc, #76]	@ (800627c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800622e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006230:	0e1b      	lsrs	r3, r3, #24
 8006232:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006236:	ee07 3a90 	vmov	s15, r3
 800623a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800623e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006242:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006246:	edd7 6a07 	vldr	s13, [r7, #28]
 800624a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800624e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006252:	ee17 2a90 	vmov	r2, s15
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800625a:	e008      	b.n	800626e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2200      	movs	r2, #0
 8006266:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2200      	movs	r2, #0
 800626c:	609a      	str	r2, [r3, #8]
}
 800626e:	bf00      	nop
 8006270:	3724      	adds	r7, #36	@ 0x24
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop
 800627c:	58024400 	.word	0x58024400
 8006280:	03d09000 	.word	0x03d09000
 8006284:	46000000 	.word	0x46000000
 8006288:	4c742400 	.word	0x4c742400
 800628c:	4a742400 	.word	0x4a742400
 8006290:	4bbebc20 	.word	0x4bbebc20

08006294 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006294:	b480      	push	{r7}
 8006296:	b089      	sub	sp, #36	@ 0x24
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800629c:	4ba0      	ldr	r3, [pc, #640]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f003 0303 	and.w	r3, r3, #3
 80062a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80062a6:	4b9e      	ldr	r3, [pc, #632]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062aa:	091b      	lsrs	r3, r3, #4
 80062ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80062b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80062b2:	4b9b      	ldr	r3, [pc, #620]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	f003 0301 	and.w	r3, r3, #1
 80062ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80062bc:	4b98      	ldr	r3, [pc, #608]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062c0:	08db      	lsrs	r3, r3, #3
 80062c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	fb02 f303 	mul.w	r3, r2, r3
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 8111 	beq.w	8006502 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	f000 8083 	beq.w	80063ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b02      	cmp	r3, #2
 80062ec:	f200 80a1 	bhi.w	8006432 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d003      	beq.n	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d056      	beq.n	80063aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80062fc:	e099      	b.n	8006432 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062fe:	4b88      	ldr	r3, [pc, #544]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b00      	cmp	r3, #0
 8006308:	d02d      	beq.n	8006366 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800630a:	4b85      	ldr	r3, [pc, #532]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	08db      	lsrs	r3, r3, #3
 8006310:	f003 0303 	and.w	r3, r3, #3
 8006314:	4a83      	ldr	r2, [pc, #524]	@ (8006524 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8006316:	fa22 f303 	lsr.w	r3, r2, r3
 800631a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	ee07 3a90 	vmov	s15, r3
 800632c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006330:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006334:	4b7a      	ldr	r3, [pc, #488]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006344:	ed97 6a03 	vldr	s12, [r7, #12]
 8006348:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800634c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006350:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006354:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800635c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006360:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006364:	e087      	b.n	8006476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006366:	697b      	ldr	r3, [r7, #20]
 8006368:	ee07 3a90 	vmov	s15, r3
 800636c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006370:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800652c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006374:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006378:	4b69      	ldr	r3, [pc, #420]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800637a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800637c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006380:	ee07 3a90 	vmov	s15, r3
 8006384:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006388:	ed97 6a03 	vldr	s12, [r7, #12]
 800638c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006390:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006394:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006398:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800639c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063a8:	e065      	b.n	8006476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	ee07 3a90 	vmov	s15, r3
 80063b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8006530 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80063b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063bc:	4b58      	ldr	r3, [pc, #352]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063c4:	ee07 3a90 	vmov	s15, r3
 80063c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063cc:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80063e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063ec:	e043      	b.n	8006476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	ee07 3a90 	vmov	s15, r3
 80063f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006534 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80063fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006400:	4b47      	ldr	r3, [pc, #284]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006402:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006408:	ee07 3a90 	vmov	s15, r3
 800640c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006410:	ed97 6a03 	vldr	s12, [r7, #12]
 8006414:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006418:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800641c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006420:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006424:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800642c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006430:	e021      	b.n	8006476 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	ee07 3a90 	vmov	s15, r3
 8006438:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800643c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800652c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006440:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006444:	4b36      	ldr	r3, [pc, #216]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	ee07 3a90 	vmov	s15, r3
 8006450:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006454:	ed97 6a03 	vldr	s12, [r7, #12]
 8006458:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8006528 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800645c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006460:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006464:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006468:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800646c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006470:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006474:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006476:	4b2a      	ldr	r3, [pc, #168]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647a:	0a5b      	lsrs	r3, r3, #9
 800647c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800648c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006490:	edd7 6a07 	vldr	s13, [r7, #28]
 8006494:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800649c:	ee17 2a90 	vmov	r2, s15
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80064a4:	4b1e      	ldr	r3, [pc, #120]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064a8:	0c1b      	lsrs	r3, r3, #16
 80064aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ae:	ee07 3a90 	vmov	s15, r3
 80064b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064be:	edd7 6a07 	vldr	s13, [r7, #28]
 80064c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064ca:	ee17 2a90 	vmov	r2, s15
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80064d2:	4b13      	ldr	r3, [pc, #76]	@ (8006520 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	0e1b      	lsrs	r3, r3, #24
 80064d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80064e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80064f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064f8:	ee17 2a90 	vmov	r2, s15
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006500:	e008      	b.n	8006514 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2200      	movs	r2, #0
 8006506:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2200      	movs	r2, #0
 8006512:	609a      	str	r2, [r3, #8]
}
 8006514:	bf00      	nop
 8006516:	3724      	adds	r7, #36	@ 0x24
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr
 8006520:	58024400 	.word	0x58024400
 8006524:	03d09000 	.word	0x03d09000
 8006528:	46000000 	.word	0x46000000
 800652c:	4c742400 	.word	0x4c742400
 8006530:	4a742400 	.word	0x4a742400
 8006534:	4bbebc20 	.word	0x4bbebc20

08006538 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006546:	4b53      	ldr	r3, [pc, #332]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654a:	f003 0303 	and.w	r3, r3, #3
 800654e:	2b03      	cmp	r3, #3
 8006550:	d101      	bne.n	8006556 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e099      	b.n	800668a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006556:	4b4f      	ldr	r3, [pc, #316]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a4e      	ldr	r2, [pc, #312]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800655c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006560:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006562:	f7fa fcef 	bl	8000f44 <HAL_GetTick>
 8006566:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006568:	e008      	b.n	800657c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800656a:	f7fa fceb 	bl	8000f44 <HAL_GetTick>
 800656e:	4602      	mov	r2, r0
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	1ad3      	subs	r3, r2, r3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d901      	bls.n	800657c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e086      	b.n	800668a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800657c:	4b45      	ldr	r3, [pc, #276]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006584:	2b00      	cmp	r3, #0
 8006586:	d1f0      	bne.n	800656a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006588:	4b42      	ldr	r3, [pc, #264]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	031b      	lsls	r3, r3, #12
 8006596:	493f      	ldr	r1, [pc, #252]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006598:	4313      	orrs	r3, r2
 800659a:	628b      	str	r3, [r1, #40]	@ 0x28
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	3b01      	subs	r3, #1
 80065a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	3b01      	subs	r3, #1
 80065ac:	025b      	lsls	r3, r3, #9
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	431a      	orrs	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	041b      	lsls	r3, r3, #16
 80065ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	3b01      	subs	r3, #1
 80065c6:	061b      	lsls	r3, r3, #24
 80065c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80065cc:	4931      	ldr	r1, [pc, #196]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80065d2:	4b30      	ldr	r3, [pc, #192]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	695b      	ldr	r3, [r3, #20]
 80065de:	492d      	ldr	r1, [pc, #180]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	4313      	orrs	r3, r2
 80065e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e8:	f023 0220 	bic.w	r2, r3, #32
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	4928      	ldr	r1, [pc, #160]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065f2:	4313      	orrs	r3, r2
 80065f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065f6:	4b27      	ldr	r3, [pc, #156]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065fa:	4a26      	ldr	r2, [pc, #152]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 80065fc:	f023 0310 	bic.w	r3, r3, #16
 8006600:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006602:	4b24      	ldr	r3, [pc, #144]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006606:	4b24      	ldr	r3, [pc, #144]	@ (8006698 <RCCEx_PLL2_Config+0x160>)
 8006608:	4013      	ands	r3, r2
 800660a:	687a      	ldr	r2, [r7, #4]
 800660c:	69d2      	ldr	r2, [r2, #28]
 800660e:	00d2      	lsls	r2, r2, #3
 8006610:	4920      	ldr	r1, [pc, #128]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006612:	4313      	orrs	r3, r2
 8006614:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006616:	4b1f      	ldr	r3, [pc, #124]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661a:	4a1e      	ldr	r2, [pc, #120]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800661c:	f043 0310 	orr.w	r3, r3, #16
 8006620:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d106      	bne.n	8006636 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006628:	4b1a      	ldr	r3, [pc, #104]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800662a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800662c:	4a19      	ldr	r2, [pc, #100]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800662e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006632:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006634:	e00f      	b.n	8006656 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	2b01      	cmp	r3, #1
 800663a:	d106      	bne.n	800664a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800663c:	4b15      	ldr	r3, [pc, #84]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006640:	4a14      	ldr	r2, [pc, #80]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006642:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006646:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006648:	e005      	b.n	8006656 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800664a:	4b12      	ldr	r3, [pc, #72]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800664c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800664e:	4a11      	ldr	r2, [pc, #68]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006654:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006656:	4b0f      	ldr	r3, [pc, #60]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a0e      	ldr	r2, [pc, #56]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800665c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006662:	f7fa fc6f 	bl	8000f44 <HAL_GetTick>
 8006666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006668:	e008      	b.n	800667c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800666a:	f7fa fc6b 	bl	8000f44 <HAL_GetTick>
 800666e:	4602      	mov	r2, r0
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	2b02      	cmp	r3, #2
 8006676:	d901      	bls.n	800667c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006678:	2303      	movs	r3, #3
 800667a:	e006      	b.n	800668a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800667c:	4b05      	ldr	r3, [pc, #20]	@ (8006694 <RCCEx_PLL2_Config+0x15c>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006684:	2b00      	cmp	r3, #0
 8006686:	d0f0      	beq.n	800666a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	58024400 	.word	0x58024400
 8006698:	ffff0007 	.word	0xffff0007

0800669c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80066a6:	2300      	movs	r3, #0
 80066a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80066aa:	4b53      	ldr	r3, [pc, #332]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066ae:	f003 0303 	and.w	r3, r3, #3
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d101      	bne.n	80066ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80066b6:	2301      	movs	r3, #1
 80066b8:	e099      	b.n	80067ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80066ba:	4b4f      	ldr	r3, [pc, #316]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a4e      	ldr	r2, [pc, #312]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c6:	f7fa fc3d 	bl	8000f44 <HAL_GetTick>
 80066ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066cc:	e008      	b.n	80066e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80066ce:	f7fa fc39 	bl	8000f44 <HAL_GetTick>
 80066d2:	4602      	mov	r2, r0
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	1ad3      	subs	r3, r2, r3
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d901      	bls.n	80066e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e086      	b.n	80067ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066e0:	4b45      	ldr	r3, [pc, #276]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d1f0      	bne.n	80066ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066ec:	4b42      	ldr	r3, [pc, #264]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	051b      	lsls	r3, r3, #20
 80066fa:	493f      	ldr	r1, [pc, #252]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	628b      	str	r3, [r1, #40]	@ 0x28
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	3b01      	subs	r3, #1
 8006706:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	3b01      	subs	r3, #1
 8006710:	025b      	lsls	r3, r3, #9
 8006712:	b29b      	uxth	r3, r3
 8006714:	431a      	orrs	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	3b01      	subs	r3, #1
 800671c:	041b      	lsls	r3, r3, #16
 800671e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	691b      	ldr	r3, [r3, #16]
 8006728:	3b01      	subs	r3, #1
 800672a:	061b      	lsls	r3, r3, #24
 800672c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006730:	4931      	ldr	r1, [pc, #196]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006732:	4313      	orrs	r3, r2
 8006734:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006736:	4b30      	ldr	r3, [pc, #192]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800673a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	492d      	ldr	r1, [pc, #180]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006744:	4313      	orrs	r3, r2
 8006746:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006748:	4b2b      	ldr	r3, [pc, #172]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 800674a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	4928      	ldr	r1, [pc, #160]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006756:	4313      	orrs	r3, r2
 8006758:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800675a:	4b27      	ldr	r3, [pc, #156]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 800675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675e:	4a26      	ldr	r2, [pc, #152]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006760:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006764:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006766:	4b24      	ldr	r3, [pc, #144]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006768:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800676a:	4b24      	ldr	r3, [pc, #144]	@ (80067fc <RCCEx_PLL3_Config+0x160>)
 800676c:	4013      	ands	r3, r2
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	69d2      	ldr	r2, [r2, #28]
 8006772:	00d2      	lsls	r2, r2, #3
 8006774:	4920      	ldr	r1, [pc, #128]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006776:	4313      	orrs	r3, r2
 8006778:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800677a:	4b1f      	ldr	r3, [pc, #124]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 800677c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677e:	4a1e      	ldr	r2, [pc, #120]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006780:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006784:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d106      	bne.n	800679a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800678c:	4b1a      	ldr	r3, [pc, #104]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 800678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006790:	4a19      	ldr	r2, [pc, #100]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 8006792:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006796:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006798:	e00f      	b.n	80067ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d106      	bne.n	80067ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80067a0:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067a4:	4a14      	ldr	r2, [pc, #80]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80067ac:	e005      	b.n	80067ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80067ae:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067b2:	4a11      	ldr	r2, [pc, #68]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80067b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80067ba:	4b0f      	ldr	r3, [pc, #60]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a0e      	ldr	r2, [pc, #56]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067c6:	f7fa fbbd 	bl	8000f44 <HAL_GetTick>
 80067ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067cc:	e008      	b.n	80067e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80067ce:	f7fa fbb9 	bl	8000f44 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	2b02      	cmp	r3, #2
 80067da:	d901      	bls.n	80067e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067dc:	2303      	movs	r3, #3
 80067de:	e006      	b.n	80067ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067e0:	4b05      	ldr	r3, [pc, #20]	@ (80067f8 <RCCEx_PLL3_Config+0x15c>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d0f0      	beq.n	80067ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	58024400 	.word	0x58024400
 80067fc:	ffff0007 	.word	0xffff0007

08006800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d101      	bne.n	8006812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	e042      	b.n	8006898 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006818:	2b00      	cmp	r3, #0
 800681a:	d106      	bne.n	800682a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f7fa f985 	bl	8000b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2224      	movs	r2, #36	@ 0x24
 800682e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0201 	bic.w	r2, r2, #1
 8006840:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d002      	beq.n	8006850 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fe1e 	bl	800748c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 f8b3 	bl	80069bc <UART_SetConfig>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e01b      	b.n	8006898 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800686e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	689a      	ldr	r2, [r3, #8]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800687e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fe9d 	bl	80075d0 <UART_CheckIdleState>
 8006896:	4603      	mov	r3, r0
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08a      	sub	sp, #40	@ 0x28
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	60b9      	str	r1, [r7, #8]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	4613      	mov	r3, r2
 80068ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068b6:	2b20      	cmp	r3, #32
 80068b8:	d17b      	bne.n	80069b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d002      	beq.n	80068c6 <HAL_UART_Transmit+0x26>
 80068c0:	88fb      	ldrh	r3, [r7, #6]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d101      	bne.n	80068ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e074      	b.n	80069b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2221      	movs	r2, #33	@ 0x21
 80068d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068da:	f7fa fb33 	bl	8000f44 <HAL_GetTick>
 80068de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	88fa      	ldrh	r2, [r7, #6]
 80068e4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	88fa      	ldrh	r2, [r7, #6]
 80068ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068f8:	d108      	bne.n	800690c <HAL_UART_Transmit+0x6c>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d104      	bne.n	800690c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006902:	2300      	movs	r3, #0
 8006904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	61bb      	str	r3, [r7, #24]
 800690a:	e003      	b.n	8006914 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006910:	2300      	movs	r3, #0
 8006912:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006914:	e030      	b.n	8006978 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	9300      	str	r3, [sp, #0]
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	2200      	movs	r2, #0
 800691e:	2180      	movs	r1, #128	@ 0x80
 8006920:	68f8      	ldr	r0, [r7, #12]
 8006922:	f000 feff 	bl	8007724 <UART_WaitOnFlagUntilTimeout>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d005      	beq.n	8006938 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006934:	2303      	movs	r3, #3
 8006936:	e03d      	b.n	80069b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10b      	bne.n	8006956 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800694c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	3302      	adds	r3, #2
 8006952:	61bb      	str	r3, [r7, #24]
 8006954:	e007      	b.n	8006966 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	781a      	ldrb	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	3301      	adds	r3, #1
 8006964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800696c:	b29b      	uxth	r3, r3
 800696e:	3b01      	subs	r3, #1
 8006970:	b29a      	uxth	r2, r3
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1c8      	bne.n	8006916 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	2200      	movs	r2, #0
 800698c:	2140      	movs	r1, #64	@ 0x40
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fec8 	bl	8007724 <UART_WaitOnFlagUntilTimeout>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d005      	beq.n	80069a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2220      	movs	r2, #32
 800699e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e006      	b.n	80069b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80069ae:	2300      	movs	r3, #0
 80069b0:	e000      	b.n	80069b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80069b2:	2302      	movs	r3, #2
  }
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069c0:	b092      	sub	sp, #72	@ 0x48
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069c6:	2300      	movs	r3, #0
 80069c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	431a      	orrs	r2, r3
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	431a      	orrs	r2, r3
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	69db      	ldr	r3, [r3, #28]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	4bbe      	ldr	r3, [pc, #760]	@ (8006ce4 <UART_SetConfig+0x328>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	6812      	ldr	r2, [r2, #0]
 80069f2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80069f4:	430b      	orrs	r3, r1
 80069f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a02:	697b      	ldr	r3, [r7, #20]
 8006a04:	68da      	ldr	r2, [r3, #12]
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	430a      	orrs	r2, r1
 8006a0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4ab3      	ldr	r2, [pc, #716]	@ (8006ce8 <UART_SetConfig+0x32c>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d004      	beq.n	8006a28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a24:	4313      	orrs	r3, r2
 8006a26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689a      	ldr	r2, [r3, #8]
 8006a2e:	4baf      	ldr	r3, [pc, #700]	@ (8006cec <UART_SetConfig+0x330>)
 8006a30:	4013      	ands	r3, r2
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	6812      	ldr	r2, [r2, #0]
 8006a36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	f023 010f 	bic.w	r1, r3, #15
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	430a      	orrs	r2, r1
 8006a50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4aa6      	ldr	r2, [pc, #664]	@ (8006cf0 <UART_SetConfig+0x334>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d177      	bne.n	8006b4c <UART_SetConfig+0x190>
 8006a5c:	4ba5      	ldr	r3, [pc, #660]	@ (8006cf4 <UART_SetConfig+0x338>)
 8006a5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006a64:	2b28      	cmp	r3, #40	@ 0x28
 8006a66:	d86d      	bhi.n	8006b44 <UART_SetConfig+0x188>
 8006a68:	a201      	add	r2, pc, #4	@ (adr r2, 8006a70 <UART_SetConfig+0xb4>)
 8006a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a6e:	bf00      	nop
 8006a70:	08006b15 	.word	0x08006b15
 8006a74:	08006b45 	.word	0x08006b45
 8006a78:	08006b45 	.word	0x08006b45
 8006a7c:	08006b45 	.word	0x08006b45
 8006a80:	08006b45 	.word	0x08006b45
 8006a84:	08006b45 	.word	0x08006b45
 8006a88:	08006b45 	.word	0x08006b45
 8006a8c:	08006b45 	.word	0x08006b45
 8006a90:	08006b1d 	.word	0x08006b1d
 8006a94:	08006b45 	.word	0x08006b45
 8006a98:	08006b45 	.word	0x08006b45
 8006a9c:	08006b45 	.word	0x08006b45
 8006aa0:	08006b45 	.word	0x08006b45
 8006aa4:	08006b45 	.word	0x08006b45
 8006aa8:	08006b45 	.word	0x08006b45
 8006aac:	08006b45 	.word	0x08006b45
 8006ab0:	08006b25 	.word	0x08006b25
 8006ab4:	08006b45 	.word	0x08006b45
 8006ab8:	08006b45 	.word	0x08006b45
 8006abc:	08006b45 	.word	0x08006b45
 8006ac0:	08006b45 	.word	0x08006b45
 8006ac4:	08006b45 	.word	0x08006b45
 8006ac8:	08006b45 	.word	0x08006b45
 8006acc:	08006b45 	.word	0x08006b45
 8006ad0:	08006b2d 	.word	0x08006b2d
 8006ad4:	08006b45 	.word	0x08006b45
 8006ad8:	08006b45 	.word	0x08006b45
 8006adc:	08006b45 	.word	0x08006b45
 8006ae0:	08006b45 	.word	0x08006b45
 8006ae4:	08006b45 	.word	0x08006b45
 8006ae8:	08006b45 	.word	0x08006b45
 8006aec:	08006b45 	.word	0x08006b45
 8006af0:	08006b35 	.word	0x08006b35
 8006af4:	08006b45 	.word	0x08006b45
 8006af8:	08006b45 	.word	0x08006b45
 8006afc:	08006b45 	.word	0x08006b45
 8006b00:	08006b45 	.word	0x08006b45
 8006b04:	08006b45 	.word	0x08006b45
 8006b08:	08006b45 	.word	0x08006b45
 8006b0c:	08006b45 	.word	0x08006b45
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	2301      	movs	r3, #1
 8006b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b1a:	e222      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b1c:	2304      	movs	r3, #4
 8006b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b22:	e21e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b24:	2308      	movs	r3, #8
 8006b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b2a:	e21a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b32:	e216      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b34:	2320      	movs	r3, #32
 8006b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b3a:	e212      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b3c:	2340      	movs	r3, #64	@ 0x40
 8006b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b42:	e20e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b44:	2380      	movs	r3, #128	@ 0x80
 8006b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b4a:	e20a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a69      	ldr	r2, [pc, #420]	@ (8006cf8 <UART_SetConfig+0x33c>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d130      	bne.n	8006bb8 <UART_SetConfig+0x1fc>
 8006b56:	4b67      	ldr	r3, [pc, #412]	@ (8006cf4 <UART_SetConfig+0x338>)
 8006b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5a:	f003 0307 	and.w	r3, r3, #7
 8006b5e:	2b05      	cmp	r3, #5
 8006b60:	d826      	bhi.n	8006bb0 <UART_SetConfig+0x1f4>
 8006b62:	a201      	add	r2, pc, #4	@ (adr r2, 8006b68 <UART_SetConfig+0x1ac>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b81 	.word	0x08006b81
 8006b6c:	08006b89 	.word	0x08006b89
 8006b70:	08006b91 	.word	0x08006b91
 8006b74:	08006b99 	.word	0x08006b99
 8006b78:	08006ba1 	.word	0x08006ba1
 8006b7c:	08006ba9 	.word	0x08006ba9
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b86:	e1ec      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b88:	2304      	movs	r3, #4
 8006b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b8e:	e1e8      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b90:	2308      	movs	r3, #8
 8006b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b96:	e1e4      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006b98:	2310      	movs	r3, #16
 8006b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006b9e:	e1e0      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ba0:	2320      	movs	r3, #32
 8006ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ba6:	e1dc      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ba8:	2340      	movs	r3, #64	@ 0x40
 8006baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bae:	e1d8      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006bb0:	2380      	movs	r3, #128	@ 0x80
 8006bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bb6:	e1d4      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a4f      	ldr	r2, [pc, #316]	@ (8006cfc <UART_SetConfig+0x340>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d130      	bne.n	8006c24 <UART_SetConfig+0x268>
 8006bc2:	4b4c      	ldr	r3, [pc, #304]	@ (8006cf4 <UART_SetConfig+0x338>)
 8006bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	2b05      	cmp	r3, #5
 8006bcc:	d826      	bhi.n	8006c1c <UART_SetConfig+0x260>
 8006bce:	a201      	add	r2, pc, #4	@ (adr r2, 8006bd4 <UART_SetConfig+0x218>)
 8006bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bd4:	08006bed 	.word	0x08006bed
 8006bd8:	08006bf5 	.word	0x08006bf5
 8006bdc:	08006bfd 	.word	0x08006bfd
 8006be0:	08006c05 	.word	0x08006c05
 8006be4:	08006c0d 	.word	0x08006c0d
 8006be8:	08006c15 	.word	0x08006c15
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bf2:	e1b6      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006bf4:	2304      	movs	r3, #4
 8006bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006bfa:	e1b2      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006bfc:	2308      	movs	r3, #8
 8006bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c02:	e1ae      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c04:	2310      	movs	r3, #16
 8006c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c0a:	e1aa      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c0c:	2320      	movs	r3, #32
 8006c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c12:	e1a6      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c14:	2340      	movs	r3, #64	@ 0x40
 8006c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c1a:	e1a2      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c1c:	2380      	movs	r3, #128	@ 0x80
 8006c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c22:	e19e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a35      	ldr	r2, [pc, #212]	@ (8006d00 <UART_SetConfig+0x344>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d130      	bne.n	8006c90 <UART_SetConfig+0x2d4>
 8006c2e:	4b31      	ldr	r3, [pc, #196]	@ (8006cf4 <UART_SetConfig+0x338>)
 8006c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c32:	f003 0307 	and.w	r3, r3, #7
 8006c36:	2b05      	cmp	r3, #5
 8006c38:	d826      	bhi.n	8006c88 <UART_SetConfig+0x2cc>
 8006c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c40 <UART_SetConfig+0x284>)
 8006c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c40:	08006c59 	.word	0x08006c59
 8006c44:	08006c61 	.word	0x08006c61
 8006c48:	08006c69 	.word	0x08006c69
 8006c4c:	08006c71 	.word	0x08006c71
 8006c50:	08006c79 	.word	0x08006c79
 8006c54:	08006c81 	.word	0x08006c81
 8006c58:	2300      	movs	r3, #0
 8006c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c5e:	e180      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c60:	2304      	movs	r3, #4
 8006c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c66:	e17c      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c68:	2308      	movs	r3, #8
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c6e:	e178      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c76:	e174      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c78:	2320      	movs	r3, #32
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c7e:	e170      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c80:	2340      	movs	r3, #64	@ 0x40
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c86:	e16c      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c88:	2380      	movs	r3, #128	@ 0x80
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006c8e:	e168      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006c90:	697b      	ldr	r3, [r7, #20]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1b      	ldr	r2, [pc, #108]	@ (8006d04 <UART_SetConfig+0x348>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d142      	bne.n	8006d20 <UART_SetConfig+0x364>
 8006c9a:	4b16      	ldr	r3, [pc, #88]	@ (8006cf4 <UART_SetConfig+0x338>)
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b05      	cmp	r3, #5
 8006ca4:	d838      	bhi.n	8006d18 <UART_SetConfig+0x35c>
 8006ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8006cac <UART_SetConfig+0x2f0>)
 8006ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cac:	08006cc5 	.word	0x08006cc5
 8006cb0:	08006ccd 	.word	0x08006ccd
 8006cb4:	08006cd5 	.word	0x08006cd5
 8006cb8:	08006cdd 	.word	0x08006cdd
 8006cbc:	08006d09 	.word	0x08006d09
 8006cc0:	08006d11 	.word	0x08006d11
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cca:	e14a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ccc:	2304      	movs	r3, #4
 8006cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cd2:	e146      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006cd4:	2308      	movs	r3, #8
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006cda:	e142      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006cdc:	2310      	movs	r3, #16
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ce2:	e13e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ce4:	cfff69f3 	.word	0xcfff69f3
 8006ce8:	58000c00 	.word	0x58000c00
 8006cec:	11fff4ff 	.word	0x11fff4ff
 8006cf0:	40011000 	.word	0x40011000
 8006cf4:	58024400 	.word	0x58024400
 8006cf8:	40004400 	.word	0x40004400
 8006cfc:	40004800 	.word	0x40004800
 8006d00:	40004c00 	.word	0x40004c00
 8006d04:	40005000 	.word	0x40005000
 8006d08:	2320      	movs	r3, #32
 8006d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d0e:	e128      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006d10:	2340      	movs	r3, #64	@ 0x40
 8006d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d16:	e124      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006d18:	2380      	movs	r3, #128	@ 0x80
 8006d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006d1e:	e120      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4acb      	ldr	r2, [pc, #812]	@ (8007054 <UART_SetConfig+0x698>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d176      	bne.n	8006e18 <UART_SetConfig+0x45c>
 8006d2a:	4bcb      	ldr	r3, [pc, #812]	@ (8007058 <UART_SetConfig+0x69c>)
 8006d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d32:	2b28      	cmp	r3, #40	@ 0x28
 8006d34:	d86c      	bhi.n	8006e10 <UART_SetConfig+0x454>
 8006d36:	a201      	add	r2, pc, #4	@ (adr r2, 8006d3c <UART_SetConfig+0x380>)
 8006d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d3c:	08006de1 	.word	0x08006de1
 8006d40:	08006e11 	.word	0x08006e11
 8006d44:	08006e11 	.word	0x08006e11
 8006d48:	08006e11 	.word	0x08006e11
 8006d4c:	08006e11 	.word	0x08006e11
 8006d50:	08006e11 	.word	0x08006e11
 8006d54:	08006e11 	.word	0x08006e11
 8006d58:	08006e11 	.word	0x08006e11
 8006d5c:	08006de9 	.word	0x08006de9
 8006d60:	08006e11 	.word	0x08006e11
 8006d64:	08006e11 	.word	0x08006e11
 8006d68:	08006e11 	.word	0x08006e11
 8006d6c:	08006e11 	.word	0x08006e11
 8006d70:	08006e11 	.word	0x08006e11
 8006d74:	08006e11 	.word	0x08006e11
 8006d78:	08006e11 	.word	0x08006e11
 8006d7c:	08006df1 	.word	0x08006df1
 8006d80:	08006e11 	.word	0x08006e11
 8006d84:	08006e11 	.word	0x08006e11
 8006d88:	08006e11 	.word	0x08006e11
 8006d8c:	08006e11 	.word	0x08006e11
 8006d90:	08006e11 	.word	0x08006e11
 8006d94:	08006e11 	.word	0x08006e11
 8006d98:	08006e11 	.word	0x08006e11
 8006d9c:	08006df9 	.word	0x08006df9
 8006da0:	08006e11 	.word	0x08006e11
 8006da4:	08006e11 	.word	0x08006e11
 8006da8:	08006e11 	.word	0x08006e11
 8006dac:	08006e11 	.word	0x08006e11
 8006db0:	08006e11 	.word	0x08006e11
 8006db4:	08006e11 	.word	0x08006e11
 8006db8:	08006e11 	.word	0x08006e11
 8006dbc:	08006e01 	.word	0x08006e01
 8006dc0:	08006e11 	.word	0x08006e11
 8006dc4:	08006e11 	.word	0x08006e11
 8006dc8:	08006e11 	.word	0x08006e11
 8006dcc:	08006e11 	.word	0x08006e11
 8006dd0:	08006e11 	.word	0x08006e11
 8006dd4:	08006e11 	.word	0x08006e11
 8006dd8:	08006e11 	.word	0x08006e11
 8006ddc:	08006e09 	.word	0x08006e09
 8006de0:	2301      	movs	r3, #1
 8006de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006de6:	e0bc      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006de8:	2304      	movs	r3, #4
 8006dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dee:	e0b8      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006df0:	2308      	movs	r3, #8
 8006df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006df6:	e0b4      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006df8:	2310      	movs	r3, #16
 8006dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006dfe:	e0b0      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e00:	2320      	movs	r3, #32
 8006e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e06:	e0ac      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e08:	2340      	movs	r3, #64	@ 0x40
 8006e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e0e:	e0a8      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e10:	2380      	movs	r3, #128	@ 0x80
 8006e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e16:	e0a4      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a8f      	ldr	r2, [pc, #572]	@ (800705c <UART_SetConfig+0x6a0>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d130      	bne.n	8006e84 <UART_SetConfig+0x4c8>
 8006e22:	4b8d      	ldr	r3, [pc, #564]	@ (8007058 <UART_SetConfig+0x69c>)
 8006e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	d826      	bhi.n	8006e7c <UART_SetConfig+0x4c0>
 8006e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e34 <UART_SetConfig+0x478>)
 8006e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e34:	08006e4d 	.word	0x08006e4d
 8006e38:	08006e55 	.word	0x08006e55
 8006e3c:	08006e5d 	.word	0x08006e5d
 8006e40:	08006e65 	.word	0x08006e65
 8006e44:	08006e6d 	.word	0x08006e6d
 8006e48:	08006e75 	.word	0x08006e75
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e52:	e086      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e54:	2304      	movs	r3, #4
 8006e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e5a:	e082      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e5c:	2308      	movs	r3, #8
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e62:	e07e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e64:	2310      	movs	r3, #16
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e6a:	e07a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e6c:	2320      	movs	r3, #32
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e72:	e076      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e74:	2340      	movs	r3, #64	@ 0x40
 8006e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e7a:	e072      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e7c:	2380      	movs	r3, #128	@ 0x80
 8006e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006e82:	e06e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a75      	ldr	r2, [pc, #468]	@ (8007060 <UART_SetConfig+0x6a4>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d130      	bne.n	8006ef0 <UART_SetConfig+0x534>
 8006e8e:	4b72      	ldr	r3, [pc, #456]	@ (8007058 <UART_SetConfig+0x69c>)
 8006e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e92:	f003 0307 	and.w	r3, r3, #7
 8006e96:	2b05      	cmp	r3, #5
 8006e98:	d826      	bhi.n	8006ee8 <UART_SetConfig+0x52c>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x4e4>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006eb9 	.word	0x08006eb9
 8006ea4:	08006ec1 	.word	0x08006ec1
 8006ea8:	08006ec9 	.word	0x08006ec9
 8006eac:	08006ed1 	.word	0x08006ed1
 8006eb0:	08006ed9 	.word	0x08006ed9
 8006eb4:	08006ee1 	.word	0x08006ee1
 8006eb8:	2300      	movs	r3, #0
 8006eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ebe:	e050      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ec6:	e04c      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ec8:	2308      	movs	r3, #8
 8006eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ece:	e048      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ed0:	2310      	movs	r3, #16
 8006ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ed6:	e044      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ed8:	2320      	movs	r3, #32
 8006eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ede:	e040      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ee0:	2340      	movs	r3, #64	@ 0x40
 8006ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006ee6:	e03c      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ee8:	2380      	movs	r3, #128	@ 0x80
 8006eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006eee:	e038      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	4a5b      	ldr	r2, [pc, #364]	@ (8007064 <UART_SetConfig+0x6a8>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d130      	bne.n	8006f5c <UART_SetConfig+0x5a0>
 8006efa:	4b57      	ldr	r3, [pc, #348]	@ (8007058 <UART_SetConfig+0x69c>)
 8006efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006efe:	f003 0307 	and.w	r3, r3, #7
 8006f02:	2b05      	cmp	r3, #5
 8006f04:	d826      	bhi.n	8006f54 <UART_SetConfig+0x598>
 8006f06:	a201      	add	r2, pc, #4	@ (adr r2, 8006f0c <UART_SetConfig+0x550>)
 8006f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f0c:	08006f25 	.word	0x08006f25
 8006f10:	08006f2d 	.word	0x08006f2d
 8006f14:	08006f35 	.word	0x08006f35
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f45 	.word	0x08006f45
 8006f20:	08006f4d 	.word	0x08006f4d
 8006f24:	2302      	movs	r3, #2
 8006f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f2a:	e01a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f2c:	2304      	movs	r3, #4
 8006f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f32:	e016      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f34:	2308      	movs	r3, #8
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f3a:	e012      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f42:	e00e      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f44:	2320      	movs	r3, #32
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f4a:	e00a      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f4c:	2340      	movs	r3, #64	@ 0x40
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f52:	e006      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f54:	2380      	movs	r3, #128	@ 0x80
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006f5a:	e002      	b.n	8006f62 <UART_SetConfig+0x5a6>
 8006f5c:	2380      	movs	r3, #128	@ 0x80
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a3f      	ldr	r2, [pc, #252]	@ (8007064 <UART_SetConfig+0x6a8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	f040 80f8 	bne.w	800715e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f6e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006f72:	2b20      	cmp	r3, #32
 8006f74:	dc46      	bgt.n	8007004 <UART_SetConfig+0x648>
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	f2c0 8082 	blt.w	8007080 <UART_SetConfig+0x6c4>
 8006f7c:	3b02      	subs	r3, #2
 8006f7e:	2b1e      	cmp	r3, #30
 8006f80:	d87e      	bhi.n	8007080 <UART_SetConfig+0x6c4>
 8006f82:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <UART_SetConfig+0x5cc>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	0800700b 	.word	0x0800700b
 8006f8c:	08007081 	.word	0x08007081
 8006f90:	08007013 	.word	0x08007013
 8006f94:	08007081 	.word	0x08007081
 8006f98:	08007081 	.word	0x08007081
 8006f9c:	08007081 	.word	0x08007081
 8006fa0:	08007023 	.word	0x08007023
 8006fa4:	08007081 	.word	0x08007081
 8006fa8:	08007081 	.word	0x08007081
 8006fac:	08007081 	.word	0x08007081
 8006fb0:	08007081 	.word	0x08007081
 8006fb4:	08007081 	.word	0x08007081
 8006fb8:	08007081 	.word	0x08007081
 8006fbc:	08007081 	.word	0x08007081
 8006fc0:	08007033 	.word	0x08007033
 8006fc4:	08007081 	.word	0x08007081
 8006fc8:	08007081 	.word	0x08007081
 8006fcc:	08007081 	.word	0x08007081
 8006fd0:	08007081 	.word	0x08007081
 8006fd4:	08007081 	.word	0x08007081
 8006fd8:	08007081 	.word	0x08007081
 8006fdc:	08007081 	.word	0x08007081
 8006fe0:	08007081 	.word	0x08007081
 8006fe4:	08007081 	.word	0x08007081
 8006fe8:	08007081 	.word	0x08007081
 8006fec:	08007081 	.word	0x08007081
 8006ff0:	08007081 	.word	0x08007081
 8006ff4:	08007081 	.word	0x08007081
 8006ff8:	08007081 	.word	0x08007081
 8006ffc:	08007081 	.word	0x08007081
 8007000:	08007073 	.word	0x08007073
 8007004:	2b40      	cmp	r3, #64	@ 0x40
 8007006:	d037      	beq.n	8007078 <UART_SetConfig+0x6bc>
 8007008:	e03a      	b.n	8007080 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800700a:	f7fe fe85 	bl	8005d18 <HAL_RCCEx_GetD3PCLK1Freq>
 800700e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007010:	e03c      	b.n	800708c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007012:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fe94 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007020:	e034      	b.n	800708c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007022:	f107 0318 	add.w	r3, r7, #24
 8007026:	4618      	mov	r0, r3
 8007028:	f7fe ffe0 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007030:	e02c      	b.n	800708c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007032:	4b09      	ldr	r3, [pc, #36]	@ (8007058 <UART_SetConfig+0x69c>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d016      	beq.n	800706c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800703e:	4b06      	ldr	r3, [pc, #24]	@ (8007058 <UART_SetConfig+0x69c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	08db      	lsrs	r3, r3, #3
 8007044:	f003 0303 	and.w	r3, r3, #3
 8007048:	4a07      	ldr	r2, [pc, #28]	@ (8007068 <UART_SetConfig+0x6ac>)
 800704a:	fa22 f303 	lsr.w	r3, r2, r3
 800704e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007050:	e01c      	b.n	800708c <UART_SetConfig+0x6d0>
 8007052:	bf00      	nop
 8007054:	40011400 	.word	0x40011400
 8007058:	58024400 	.word	0x58024400
 800705c:	40007800 	.word	0x40007800
 8007060:	40007c00 	.word	0x40007c00
 8007064:	58000c00 	.word	0x58000c00
 8007068:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800706c:	4b9d      	ldr	r3, [pc, #628]	@ (80072e4 <UART_SetConfig+0x928>)
 800706e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007070:	e00c      	b.n	800708c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007072:	4b9d      	ldr	r3, [pc, #628]	@ (80072e8 <UART_SetConfig+0x92c>)
 8007074:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007076:	e009      	b.n	800708c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007078:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800707e:	e005      	b.n	800708c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800708a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800708c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800708e:	2b00      	cmp	r3, #0
 8007090:	f000 81de 	beq.w	8007450 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007098:	4a94      	ldr	r2, [pc, #592]	@ (80072ec <UART_SetConfig+0x930>)
 800709a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800709e:	461a      	mov	r2, r3
 80070a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80070a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a8:	697b      	ldr	r3, [r7, #20]
 80070aa:	685a      	ldr	r2, [r3, #4]
 80070ac:	4613      	mov	r3, r2
 80070ae:	005b      	lsls	r3, r3, #1
 80070b0:	4413      	add	r3, r2
 80070b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d305      	bcc.n	80070c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80070c4:	2301      	movs	r3, #1
 80070c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80070ca:	e1c1      	b.n	8007450 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070ce:	2200      	movs	r2, #0
 80070d0:	60bb      	str	r3, [r7, #8]
 80070d2:	60fa      	str	r2, [r7, #12]
 80070d4:	697b      	ldr	r3, [r7, #20]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	4a84      	ldr	r2, [pc, #528]	@ (80072ec <UART_SetConfig+0x930>)
 80070da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070de:	b29b      	uxth	r3, r3
 80070e0:	2200      	movs	r2, #0
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070ee:	f7f9 f94f 	bl	8000390 <__aeabi_uldivmod>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	4610      	mov	r0, r2
 80070f8:	4619      	mov	r1, r3
 80070fa:	f04f 0200 	mov.w	r2, #0
 80070fe:	f04f 0300 	mov.w	r3, #0
 8007102:	020b      	lsls	r3, r1, #8
 8007104:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007108:	0202      	lsls	r2, r0, #8
 800710a:	6979      	ldr	r1, [r7, #20]
 800710c:	6849      	ldr	r1, [r1, #4]
 800710e:	0849      	lsrs	r1, r1, #1
 8007110:	2000      	movs	r0, #0
 8007112:	460c      	mov	r4, r1
 8007114:	4605      	mov	r5, r0
 8007116:	eb12 0804 	adds.w	r8, r2, r4
 800711a:	eb43 0905 	adc.w	r9, r3, r5
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	469a      	mov	sl, r3
 8007126:	4693      	mov	fp, r2
 8007128:	4652      	mov	r2, sl
 800712a:	465b      	mov	r3, fp
 800712c:	4640      	mov	r0, r8
 800712e:	4649      	mov	r1, r9
 8007130:	f7f9 f92e 	bl	8000390 <__aeabi_uldivmod>
 8007134:	4602      	mov	r2, r0
 8007136:	460b      	mov	r3, r1
 8007138:	4613      	mov	r3, r2
 800713a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007142:	d308      	bcc.n	8007156 <UART_SetConfig+0x79a>
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800714a:	d204      	bcs.n	8007156 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007152:	60da      	str	r2, [r3, #12]
 8007154:	e17c      	b.n	8007450 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800715c:	e178      	b.n	8007450 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	69db      	ldr	r3, [r3, #28]
 8007162:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007166:	f040 80c5 	bne.w	80072f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800716a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800716e:	2b20      	cmp	r3, #32
 8007170:	dc48      	bgt.n	8007204 <UART_SetConfig+0x848>
 8007172:	2b00      	cmp	r3, #0
 8007174:	db7b      	blt.n	800726e <UART_SetConfig+0x8b2>
 8007176:	2b20      	cmp	r3, #32
 8007178:	d879      	bhi.n	800726e <UART_SetConfig+0x8b2>
 800717a:	a201      	add	r2, pc, #4	@ (adr r2, 8007180 <UART_SetConfig+0x7c4>)
 800717c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007180:	0800720b 	.word	0x0800720b
 8007184:	08007213 	.word	0x08007213
 8007188:	0800726f 	.word	0x0800726f
 800718c:	0800726f 	.word	0x0800726f
 8007190:	0800721b 	.word	0x0800721b
 8007194:	0800726f 	.word	0x0800726f
 8007198:	0800726f 	.word	0x0800726f
 800719c:	0800726f 	.word	0x0800726f
 80071a0:	0800722b 	.word	0x0800722b
 80071a4:	0800726f 	.word	0x0800726f
 80071a8:	0800726f 	.word	0x0800726f
 80071ac:	0800726f 	.word	0x0800726f
 80071b0:	0800726f 	.word	0x0800726f
 80071b4:	0800726f 	.word	0x0800726f
 80071b8:	0800726f 	.word	0x0800726f
 80071bc:	0800726f 	.word	0x0800726f
 80071c0:	0800723b 	.word	0x0800723b
 80071c4:	0800726f 	.word	0x0800726f
 80071c8:	0800726f 	.word	0x0800726f
 80071cc:	0800726f 	.word	0x0800726f
 80071d0:	0800726f 	.word	0x0800726f
 80071d4:	0800726f 	.word	0x0800726f
 80071d8:	0800726f 	.word	0x0800726f
 80071dc:	0800726f 	.word	0x0800726f
 80071e0:	0800726f 	.word	0x0800726f
 80071e4:	0800726f 	.word	0x0800726f
 80071e8:	0800726f 	.word	0x0800726f
 80071ec:	0800726f 	.word	0x0800726f
 80071f0:	0800726f 	.word	0x0800726f
 80071f4:	0800726f 	.word	0x0800726f
 80071f8:	0800726f 	.word	0x0800726f
 80071fc:	0800726f 	.word	0x0800726f
 8007200:	08007261 	.word	0x08007261
 8007204:	2b40      	cmp	r3, #64	@ 0x40
 8007206:	d02e      	beq.n	8007266 <UART_SetConfig+0x8aa>
 8007208:	e031      	b.n	800726e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800720a:	f7fc fdcf 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 800720e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007210:	e033      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007212:	f7fc fde1 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 8007216:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007218:	e02f      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800721a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800721e:	4618      	mov	r0, r3
 8007220:	f7fe fd90 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007228:	e027      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800722a:	f107 0318 	add.w	r3, r7, #24
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fedc 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007238:	e01f      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800723a:	4b2d      	ldr	r3, [pc, #180]	@ (80072f0 <UART_SetConfig+0x934>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f003 0320 	and.w	r3, r3, #32
 8007242:	2b00      	cmp	r3, #0
 8007244:	d009      	beq.n	800725a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007246:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <UART_SetConfig+0x934>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	08db      	lsrs	r3, r3, #3
 800724c:	f003 0303 	and.w	r3, r3, #3
 8007250:	4a24      	ldr	r2, [pc, #144]	@ (80072e4 <UART_SetConfig+0x928>)
 8007252:	fa22 f303 	lsr.w	r3, r2, r3
 8007256:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007258:	e00f      	b.n	800727a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800725a:	4b22      	ldr	r3, [pc, #136]	@ (80072e4 <UART_SetConfig+0x928>)
 800725c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800725e:	e00c      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007260:	4b21      	ldr	r3, [pc, #132]	@ (80072e8 <UART_SetConfig+0x92c>)
 8007262:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007264:	e009      	b.n	800727a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007266:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800726c:	e005      	b.n	800727a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800726e:	2300      	movs	r3, #0
 8007270:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800727a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800727c:	2b00      	cmp	r3, #0
 800727e:	f000 80e7 	beq.w	8007450 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007286:	4a19      	ldr	r2, [pc, #100]	@ (80072ec <UART_SetConfig+0x930>)
 8007288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800728c:	461a      	mov	r2, r3
 800728e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007290:	fbb3 f3f2 	udiv	r3, r3, r2
 8007294:	005a      	lsls	r2, r3, #1
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	085b      	lsrs	r3, r3, #1
 800729c:	441a      	add	r2, r3
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	d916      	bls.n	80072dc <UART_SetConfig+0x920>
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b4:	d212      	bcs.n	80072dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	f023 030f 	bic.w	r3, r3, #15
 80072be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072c2:	085b      	lsrs	r3, r3, #1
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	f003 0307 	and.w	r3, r3, #7
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80072ce:	4313      	orrs	r3, r2
 80072d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80072d8:	60da      	str	r2, [r3, #12]
 80072da:	e0b9      	b.n	8007450 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80072e2:	e0b5      	b.n	8007450 <UART_SetConfig+0xa94>
 80072e4:	03d09000 	.word	0x03d09000
 80072e8:	003d0900 	.word	0x003d0900
 80072ec:	08008440 	.word	0x08008440
 80072f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80072f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80072f8:	2b20      	cmp	r3, #32
 80072fa:	dc49      	bgt.n	8007390 <UART_SetConfig+0x9d4>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	db7c      	blt.n	80073fa <UART_SetConfig+0xa3e>
 8007300:	2b20      	cmp	r3, #32
 8007302:	d87a      	bhi.n	80073fa <UART_SetConfig+0xa3e>
 8007304:	a201      	add	r2, pc, #4	@ (adr r2, 800730c <UART_SetConfig+0x950>)
 8007306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730a:	bf00      	nop
 800730c:	08007397 	.word	0x08007397
 8007310:	0800739f 	.word	0x0800739f
 8007314:	080073fb 	.word	0x080073fb
 8007318:	080073fb 	.word	0x080073fb
 800731c:	080073a7 	.word	0x080073a7
 8007320:	080073fb 	.word	0x080073fb
 8007324:	080073fb 	.word	0x080073fb
 8007328:	080073fb 	.word	0x080073fb
 800732c:	080073b7 	.word	0x080073b7
 8007330:	080073fb 	.word	0x080073fb
 8007334:	080073fb 	.word	0x080073fb
 8007338:	080073fb 	.word	0x080073fb
 800733c:	080073fb 	.word	0x080073fb
 8007340:	080073fb 	.word	0x080073fb
 8007344:	080073fb 	.word	0x080073fb
 8007348:	080073fb 	.word	0x080073fb
 800734c:	080073c7 	.word	0x080073c7
 8007350:	080073fb 	.word	0x080073fb
 8007354:	080073fb 	.word	0x080073fb
 8007358:	080073fb 	.word	0x080073fb
 800735c:	080073fb 	.word	0x080073fb
 8007360:	080073fb 	.word	0x080073fb
 8007364:	080073fb 	.word	0x080073fb
 8007368:	080073fb 	.word	0x080073fb
 800736c:	080073fb 	.word	0x080073fb
 8007370:	080073fb 	.word	0x080073fb
 8007374:	080073fb 	.word	0x080073fb
 8007378:	080073fb 	.word	0x080073fb
 800737c:	080073fb 	.word	0x080073fb
 8007380:	080073fb 	.word	0x080073fb
 8007384:	080073fb 	.word	0x080073fb
 8007388:	080073fb 	.word	0x080073fb
 800738c:	080073ed 	.word	0x080073ed
 8007390:	2b40      	cmp	r3, #64	@ 0x40
 8007392:	d02e      	beq.n	80073f2 <UART_SetConfig+0xa36>
 8007394:	e031      	b.n	80073fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007396:	f7fc fd09 	bl	8003dac <HAL_RCC_GetPCLK1Freq>
 800739a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800739c:	e033      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800739e:	f7fc fd1b 	bl	8003dd8 <HAL_RCC_GetPCLK2Freq>
 80073a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80073a4:	e02f      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f7fe fcca 	bl	8005d44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073b4:	e027      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073b6:	f107 0318 	add.w	r3, r7, #24
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fe fe16 	bl	8005fec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073c4:	e01f      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073c6:	4b2d      	ldr	r3, [pc, #180]	@ (800747c <UART_SetConfig+0xac0>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0320 	and.w	r3, r3, #32
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d009      	beq.n	80073e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073d2:	4b2a      	ldr	r3, [pc, #168]	@ (800747c <UART_SetConfig+0xac0>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	08db      	lsrs	r3, r3, #3
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	4a28      	ldr	r2, [pc, #160]	@ (8007480 <UART_SetConfig+0xac4>)
 80073de:	fa22 f303 	lsr.w	r3, r2, r3
 80073e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073e4:	e00f      	b.n	8007406 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80073e6:	4b26      	ldr	r3, [pc, #152]	@ (8007480 <UART_SetConfig+0xac4>)
 80073e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073ea:	e00c      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073ec:	4b25      	ldr	r3, [pc, #148]	@ (8007484 <UART_SetConfig+0xac8>)
 80073ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f0:	e009      	b.n	8007406 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80073f8:	e005      	b.n	8007406 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007404:	bf00      	nop
    }

    if (pclk != 0U)
 8007406:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007408:	2b00      	cmp	r3, #0
 800740a:	d021      	beq.n	8007450 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800740c:	697b      	ldr	r3, [r7, #20]
 800740e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007410:	4a1d      	ldr	r2, [pc, #116]	@ (8007488 <UART_SetConfig+0xacc>)
 8007412:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007416:	461a      	mov	r2, r3
 8007418:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800741a:	fbb3 f2f2 	udiv	r2, r3, r2
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	085b      	lsrs	r3, r3, #1
 8007424:	441a      	add	r2, r3
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	685b      	ldr	r3, [r3, #4]
 800742a:	fbb2 f3f3 	udiv	r3, r2, r3
 800742e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007432:	2b0f      	cmp	r3, #15
 8007434:	d909      	bls.n	800744a <UART_SetConfig+0xa8e>
 8007436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800743c:	d205      	bcs.n	800744a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800743e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007440:	b29a      	uxth	r2, r3
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	60da      	str	r2, [r3, #12]
 8007448:	e002      	b.n	8007450 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800744a:	2301      	movs	r3, #1
 800744c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2201      	movs	r2, #1
 8007454:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	2201      	movs	r2, #1
 800745c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	2200      	movs	r2, #0
 8007464:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2200      	movs	r2, #0
 800746a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800746c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8007470:	4618      	mov	r0, r3
 8007472:	3748      	adds	r7, #72	@ 0x48
 8007474:	46bd      	mov	sp, r7
 8007476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800747a:	bf00      	nop
 800747c:	58024400 	.word	0x58024400
 8007480:	03d09000 	.word	0x03d09000
 8007484:	003d0900 	.word	0x003d0900
 8007488:	08008440 	.word	0x08008440

0800748c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00a      	beq.n	80074b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	430a      	orrs	r2, r1
 80074b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074dc:	f003 0302 	and.w	r3, r3, #2
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00a      	beq.n	80074fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	685b      	ldr	r3, [r3, #4]
 80074ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	430a      	orrs	r2, r1
 80074f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074fe:	f003 0304 	and.w	r3, r3, #4
 8007502:	2b00      	cmp	r3, #0
 8007504:	d00a      	beq.n	800751c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007520:	f003 0310 	and.w	r3, r3, #16
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00a      	beq.n	800753e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	689b      	ldr	r3, [r3, #8]
 800752e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	430a      	orrs	r2, r1
 800755e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b00      	cmp	r3, #0
 800756a:	d01a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007586:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800758a:	d10a      	bne.n	80075a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b098      	sub	sp, #96	@ 0x60
 80075d4:	af02      	add	r7, sp, #8
 80075d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	2200      	movs	r2, #0
 80075dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075e0:	f7f9 fcb0 	bl	8000f44 <HAL_GetTick>
 80075e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d12f      	bne.n	8007654 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075fc:	2200      	movs	r2, #0
 80075fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f88e 	bl	8007724 <UART_WaitOnFlagUntilTimeout>
 8007608:	4603      	mov	r3, r0
 800760a:	2b00      	cmp	r3, #0
 800760c:	d022      	beq.n	8007654 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	e853 3f00 	ldrex	r3, [r3]
 800761a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800761c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800761e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007622:	653b      	str	r3, [r7, #80]	@ 0x50
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	461a      	mov	r2, r3
 800762a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800762c:	647b      	str	r3, [r7, #68]	@ 0x44
 800762e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007630:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007632:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007634:	e841 2300 	strex	r3, r2, [r1]
 8007638:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800763a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d1e6      	bne.n	800760e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2220      	movs	r2, #32
 8007644:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e063      	b.n	800771c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b04      	cmp	r3, #4
 8007660:	d149      	bne.n	80076f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007662:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800766a:	2200      	movs	r2, #0
 800766c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f857 	bl	8007724 <UART_WaitOnFlagUntilTimeout>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d03c      	beq.n	80076f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007684:	e853 3f00 	ldrex	r3, [r3]
 8007688:	623b      	str	r3, [r7, #32]
   return(result);
 800768a:	6a3b      	ldr	r3, [r7, #32]
 800768c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007690:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	461a      	mov	r2, r3
 8007698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800769a:	633b      	str	r3, [r7, #48]	@ 0x30
 800769c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a2:	e841 2300 	strex	r3, r2, [r1]
 80076a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1e6      	bne.n	800767c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	3308      	adds	r3, #8
 80076b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	e853 3f00 	ldrex	r3, [r3]
 80076bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f023 0301 	bic.w	r3, r3, #1
 80076c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076ce:	61fa      	str	r2, [r7, #28]
 80076d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d2:	69b9      	ldr	r1, [r7, #24]
 80076d4:	69fa      	ldr	r2, [r7, #28]
 80076d6:	e841 2300 	strex	r3, r2, [r1]
 80076da:	617b      	str	r3, [r7, #20]
   return(result);
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d1e5      	bne.n	80076ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2220      	movs	r2, #32
 80076e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e012      	b.n	800771c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2220      	movs	r2, #32
 80076fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2200      	movs	r2, #0
 800770a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2200      	movs	r2, #0
 8007710:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3758      	adds	r7, #88	@ 0x58
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	603b      	str	r3, [r7, #0]
 8007730:	4613      	mov	r3, r2
 8007732:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007734:	e04f      	b.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800773c:	d04b      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800773e:	f7f9 fc01 	bl	8000f44 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	429a      	cmp	r2, r3
 800774c:	d302      	bcc.n	8007754 <UART_WaitOnFlagUntilTimeout+0x30>
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e04e      	b.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0304 	and.w	r3, r3, #4
 8007762:	2b00      	cmp	r3, #0
 8007764:	d037      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	2b80      	cmp	r3, #128	@ 0x80
 800776a:	d034      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b40      	cmp	r3, #64	@ 0x40
 8007770:	d031      	beq.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	69db      	ldr	r3, [r3, #28]
 8007778:	f003 0308 	and.w	r3, r3, #8
 800777c:	2b08      	cmp	r3, #8
 800777e:	d110      	bne.n	80077a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2208      	movs	r2, #8
 8007786:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 f839 	bl	8007800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2208      	movs	r2, #8
 8007792:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800779e:	2301      	movs	r3, #1
 80077a0:	e029      	b.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	69db      	ldr	r3, [r3, #28]
 80077a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80077b0:	d111      	bne.n	80077d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f81f 	bl	8007800 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2220      	movs	r2, #32
 80077c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e00f      	b.n	80077f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	69da      	ldr	r2, [r3, #28]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	4013      	ands	r3, r2
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	bf0c      	ite	eq
 80077e6:	2301      	moveq	r3, #1
 80077e8:	2300      	movne	r3, #0
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	461a      	mov	r2, r3
 80077ee:	79fb      	ldrb	r3, [r7, #7]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d0a0      	beq.n	8007736 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b095      	sub	sp, #84	@ 0x54
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007810:	e853 3f00 	ldrex	r3, [r3]
 8007814:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800781c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	461a      	mov	r2, r3
 8007824:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007826:	643b      	str	r3, [r7, #64]	@ 0x40
 8007828:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800782c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800782e:	e841 2300 	strex	r3, r2, [r1]
 8007832:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1e6      	bne.n	8007808 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3308      	adds	r3, #8
 8007840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	61fb      	str	r3, [r7, #28]
   return(result);
 800784a:	69fa      	ldr	r2, [r7, #28]
 800784c:	4b1e      	ldr	r3, [pc, #120]	@ (80078c8 <UART_EndRxTransfer+0xc8>)
 800784e:	4013      	ands	r3, r2
 8007850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800785a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800785c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007860:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007862:	e841 2300 	strex	r3, r2, [r1]
 8007866:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d1e5      	bne.n	800783a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007872:	2b01      	cmp	r3, #1
 8007874:	d118      	bne.n	80078a8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	e853 3f00 	ldrex	r3, [r3]
 8007882:	60bb      	str	r3, [r7, #8]
   return(result);
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f023 0310 	bic.w	r3, r3, #16
 800788a:	647b      	str	r3, [r7, #68]	@ 0x44
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	461a      	mov	r2, r3
 8007892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007894:	61bb      	str	r3, [r7, #24]
 8007896:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007898:	6979      	ldr	r1, [r7, #20]
 800789a:	69ba      	ldr	r2, [r7, #24]
 800789c:	e841 2300 	strex	r3, r2, [r1]
 80078a0:	613b      	str	r3, [r7, #16]
   return(result);
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d1e6      	bne.n	8007876 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2220      	movs	r2, #32
 80078ac:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80078bc:	bf00      	nop
 80078be:	3754      	adds	r7, #84	@ 0x54
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr
 80078c8:	effffffe 	.word	0xeffffffe

080078cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b085      	sub	sp, #20
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d101      	bne.n	80078e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80078de:	2302      	movs	r3, #2
 80078e0:	e027      	b.n	8007932 <HAL_UARTEx_DisableFifoMode+0x66>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2224      	movs	r2, #36	@ 0x24
 80078ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f022 0201 	bic.w	r2, r2, #1
 8007908:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68fa      	ldr	r2, [r7, #12]
 800791e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2200      	movs	r2, #0
 800792c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007930:	2300      	movs	r3, #0
}
 8007932:	4618      	mov	r0, r3
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b084      	sub	sp, #16
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
 8007946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800794e:	2b01      	cmp	r3, #1
 8007950:	d101      	bne.n	8007956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007952:	2302      	movs	r3, #2
 8007954:	e02d      	b.n	80079b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2201      	movs	r2, #1
 800795a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2224      	movs	r2, #36	@ 0x24
 8007962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f022 0201 	bic.w	r2, r2, #1
 800797c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	683a      	ldr	r2, [r7, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 f850 	bl	8007a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2220      	movs	r2, #32
 80079a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e02d      	b.n	8007a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2224      	movs	r2, #36	@ 0x24
 80079de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f022 0201 	bic.w	r2, r2, #1
 80079f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	430a      	orrs	r2, r1
 8007a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 f812 	bl	8007a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68fa      	ldr	r2, [r7, #12]
 8007a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
	...

08007a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d108      	bne.n	8007a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007a58:	e031      	b.n	8007abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007a5a:	2310      	movs	r3, #16
 8007a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007a5e:	2310      	movs	r3, #16
 8007a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	0e5b      	lsrs	r3, r3, #25
 8007a6a:	b2db      	uxtb	r3, r3
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	0f5b      	lsrs	r3, r3, #29
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0307 	and.w	r3, r3, #7
 8007a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a82:	7bbb      	ldrb	r3, [r7, #14]
 8007a84:	7b3a      	ldrb	r2, [r7, #12]
 8007a86:	4911      	ldr	r1, [pc, #68]	@ (8007acc <UARTEx_SetNbDataToProcess+0x94>)
 8007a88:	5c8a      	ldrb	r2, [r1, r2]
 8007a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007a8e:	7b3a      	ldrb	r2, [r7, #12]
 8007a90:	490f      	ldr	r1, [pc, #60]	@ (8007ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8007a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007aa0:	7bfb      	ldrb	r3, [r7, #15]
 8007aa2:	7b7a      	ldrb	r2, [r7, #13]
 8007aa4:	4909      	ldr	r1, [pc, #36]	@ (8007acc <UARTEx_SetNbDataToProcess+0x94>)
 8007aa6:	5c8a      	ldrb	r2, [r1, r2]
 8007aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007aac:	7b7a      	ldrb	r2, [r7, #13]
 8007aae:	4908      	ldr	r1, [pc, #32]	@ (8007ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8007ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007abe:	bf00      	nop
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr
 8007aca:	bf00      	nop
 8007acc:	08008458 	.word	0x08008458
 8007ad0:	08008460 	.word	0x08008460

08007ad4 <siprintf>:
 8007ad4:	b40e      	push	{r1, r2, r3}
 8007ad6:	b500      	push	{lr}
 8007ad8:	b09c      	sub	sp, #112	@ 0x70
 8007ada:	ab1d      	add	r3, sp, #116	@ 0x74
 8007adc:	9002      	str	r0, [sp, #8]
 8007ade:	9006      	str	r0, [sp, #24]
 8007ae0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ae4:	4809      	ldr	r0, [pc, #36]	@ (8007b0c <siprintf+0x38>)
 8007ae6:	9107      	str	r1, [sp, #28]
 8007ae8:	9104      	str	r1, [sp, #16]
 8007aea:	4909      	ldr	r1, [pc, #36]	@ (8007b10 <siprintf+0x3c>)
 8007aec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007af0:	9105      	str	r1, [sp, #20]
 8007af2:	6800      	ldr	r0, [r0, #0]
 8007af4:	9301      	str	r3, [sp, #4]
 8007af6:	a902      	add	r1, sp, #8
 8007af8:	f000 f994 	bl	8007e24 <_svfiprintf_r>
 8007afc:	9b02      	ldr	r3, [sp, #8]
 8007afe:	2200      	movs	r2, #0
 8007b00:	701a      	strb	r2, [r3, #0]
 8007b02:	b01c      	add	sp, #112	@ 0x70
 8007b04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b08:	b003      	add	sp, #12
 8007b0a:	4770      	bx	lr
 8007b0c:	24000010 	.word	0x24000010
 8007b10:	ffff0208 	.word	0xffff0208

08007b14 <memset>:
 8007b14:	4402      	add	r2, r0
 8007b16:	4603      	mov	r3, r0
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d100      	bne.n	8007b1e <memset+0xa>
 8007b1c:	4770      	bx	lr
 8007b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007b22:	e7f9      	b.n	8007b18 <memset+0x4>

08007b24 <__errno>:
 8007b24:	4b01      	ldr	r3, [pc, #4]	@ (8007b2c <__errno+0x8>)
 8007b26:	6818      	ldr	r0, [r3, #0]
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	24000010 	.word	0x24000010

08007b30 <__libc_init_array>:
 8007b30:	b570      	push	{r4, r5, r6, lr}
 8007b32:	4d0d      	ldr	r5, [pc, #52]	@ (8007b68 <__libc_init_array+0x38>)
 8007b34:	4c0d      	ldr	r4, [pc, #52]	@ (8007b6c <__libc_init_array+0x3c>)
 8007b36:	1b64      	subs	r4, r4, r5
 8007b38:	10a4      	asrs	r4, r4, #2
 8007b3a:	2600      	movs	r6, #0
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	d109      	bne.n	8007b54 <__libc_init_array+0x24>
 8007b40:	4d0b      	ldr	r5, [pc, #44]	@ (8007b70 <__libc_init_array+0x40>)
 8007b42:	4c0c      	ldr	r4, [pc, #48]	@ (8007b74 <__libc_init_array+0x44>)
 8007b44:	f000 fc66 	bl	8008414 <_init>
 8007b48:	1b64      	subs	r4, r4, r5
 8007b4a:	10a4      	asrs	r4, r4, #2
 8007b4c:	2600      	movs	r6, #0
 8007b4e:	42a6      	cmp	r6, r4
 8007b50:	d105      	bne.n	8007b5e <__libc_init_array+0x2e>
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b58:	4798      	blx	r3
 8007b5a:	3601      	adds	r6, #1
 8007b5c:	e7ee      	b.n	8007b3c <__libc_init_array+0xc>
 8007b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b62:	4798      	blx	r3
 8007b64:	3601      	adds	r6, #1
 8007b66:	e7f2      	b.n	8007b4e <__libc_init_array+0x1e>
 8007b68:	080084a4 	.word	0x080084a4
 8007b6c:	080084a4 	.word	0x080084a4
 8007b70:	080084a4 	.word	0x080084a4
 8007b74:	080084a8 	.word	0x080084a8

08007b78 <__retarget_lock_acquire_recursive>:
 8007b78:	4770      	bx	lr

08007b7a <__retarget_lock_release_recursive>:
 8007b7a:	4770      	bx	lr

08007b7c <_free_r>:
 8007b7c:	b538      	push	{r3, r4, r5, lr}
 8007b7e:	4605      	mov	r5, r0
 8007b80:	2900      	cmp	r1, #0
 8007b82:	d041      	beq.n	8007c08 <_free_r+0x8c>
 8007b84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b88:	1f0c      	subs	r4, r1, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	bfb8      	it	lt
 8007b8e:	18e4      	addlt	r4, r4, r3
 8007b90:	f000 f8e0 	bl	8007d54 <__malloc_lock>
 8007b94:	4a1d      	ldr	r2, [pc, #116]	@ (8007c0c <_free_r+0x90>)
 8007b96:	6813      	ldr	r3, [r2, #0]
 8007b98:	b933      	cbnz	r3, 8007ba8 <_free_r+0x2c>
 8007b9a:	6063      	str	r3, [r4, #4]
 8007b9c:	6014      	str	r4, [r2, #0]
 8007b9e:	4628      	mov	r0, r5
 8007ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ba4:	f000 b8dc 	b.w	8007d60 <__malloc_unlock>
 8007ba8:	42a3      	cmp	r3, r4
 8007baa:	d908      	bls.n	8007bbe <_free_r+0x42>
 8007bac:	6820      	ldr	r0, [r4, #0]
 8007bae:	1821      	adds	r1, r4, r0
 8007bb0:	428b      	cmp	r3, r1
 8007bb2:	bf01      	itttt	eq
 8007bb4:	6819      	ldreq	r1, [r3, #0]
 8007bb6:	685b      	ldreq	r3, [r3, #4]
 8007bb8:	1809      	addeq	r1, r1, r0
 8007bba:	6021      	streq	r1, [r4, #0]
 8007bbc:	e7ed      	b.n	8007b9a <_free_r+0x1e>
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	b10b      	cbz	r3, 8007bc8 <_free_r+0x4c>
 8007bc4:	42a3      	cmp	r3, r4
 8007bc6:	d9fa      	bls.n	8007bbe <_free_r+0x42>
 8007bc8:	6811      	ldr	r1, [r2, #0]
 8007bca:	1850      	adds	r0, r2, r1
 8007bcc:	42a0      	cmp	r0, r4
 8007bce:	d10b      	bne.n	8007be8 <_free_r+0x6c>
 8007bd0:	6820      	ldr	r0, [r4, #0]
 8007bd2:	4401      	add	r1, r0
 8007bd4:	1850      	adds	r0, r2, r1
 8007bd6:	4283      	cmp	r3, r0
 8007bd8:	6011      	str	r1, [r2, #0]
 8007bda:	d1e0      	bne.n	8007b9e <_free_r+0x22>
 8007bdc:	6818      	ldr	r0, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	6053      	str	r3, [r2, #4]
 8007be2:	4408      	add	r0, r1
 8007be4:	6010      	str	r0, [r2, #0]
 8007be6:	e7da      	b.n	8007b9e <_free_r+0x22>
 8007be8:	d902      	bls.n	8007bf0 <_free_r+0x74>
 8007bea:	230c      	movs	r3, #12
 8007bec:	602b      	str	r3, [r5, #0]
 8007bee:	e7d6      	b.n	8007b9e <_free_r+0x22>
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	1821      	adds	r1, r4, r0
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	bf04      	itt	eq
 8007bf8:	6819      	ldreq	r1, [r3, #0]
 8007bfa:	685b      	ldreq	r3, [r3, #4]
 8007bfc:	6063      	str	r3, [r4, #4]
 8007bfe:	bf04      	itt	eq
 8007c00:	1809      	addeq	r1, r1, r0
 8007c02:	6021      	streq	r1, [r4, #0]
 8007c04:	6054      	str	r4, [r2, #4]
 8007c06:	e7ca      	b.n	8007b9e <_free_r+0x22>
 8007c08:	bd38      	pop	{r3, r4, r5, pc}
 8007c0a:	bf00      	nop
 8007c0c:	240002c0 	.word	0x240002c0

08007c10 <sbrk_aligned>:
 8007c10:	b570      	push	{r4, r5, r6, lr}
 8007c12:	4e0f      	ldr	r6, [pc, #60]	@ (8007c50 <sbrk_aligned+0x40>)
 8007c14:	460c      	mov	r4, r1
 8007c16:	6831      	ldr	r1, [r6, #0]
 8007c18:	4605      	mov	r5, r0
 8007c1a:	b911      	cbnz	r1, 8007c22 <sbrk_aligned+0x12>
 8007c1c:	f000 fba6 	bl	800836c <_sbrk_r>
 8007c20:	6030      	str	r0, [r6, #0]
 8007c22:	4621      	mov	r1, r4
 8007c24:	4628      	mov	r0, r5
 8007c26:	f000 fba1 	bl	800836c <_sbrk_r>
 8007c2a:	1c43      	adds	r3, r0, #1
 8007c2c:	d103      	bne.n	8007c36 <sbrk_aligned+0x26>
 8007c2e:	f04f 34ff 	mov.w	r4, #4294967295
 8007c32:	4620      	mov	r0, r4
 8007c34:	bd70      	pop	{r4, r5, r6, pc}
 8007c36:	1cc4      	adds	r4, r0, #3
 8007c38:	f024 0403 	bic.w	r4, r4, #3
 8007c3c:	42a0      	cmp	r0, r4
 8007c3e:	d0f8      	beq.n	8007c32 <sbrk_aligned+0x22>
 8007c40:	1a21      	subs	r1, r4, r0
 8007c42:	4628      	mov	r0, r5
 8007c44:	f000 fb92 	bl	800836c <_sbrk_r>
 8007c48:	3001      	adds	r0, #1
 8007c4a:	d1f2      	bne.n	8007c32 <sbrk_aligned+0x22>
 8007c4c:	e7ef      	b.n	8007c2e <sbrk_aligned+0x1e>
 8007c4e:	bf00      	nop
 8007c50:	240002bc 	.word	0x240002bc

08007c54 <_malloc_r>:
 8007c54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c58:	1ccd      	adds	r5, r1, #3
 8007c5a:	f025 0503 	bic.w	r5, r5, #3
 8007c5e:	3508      	adds	r5, #8
 8007c60:	2d0c      	cmp	r5, #12
 8007c62:	bf38      	it	cc
 8007c64:	250c      	movcc	r5, #12
 8007c66:	2d00      	cmp	r5, #0
 8007c68:	4606      	mov	r6, r0
 8007c6a:	db01      	blt.n	8007c70 <_malloc_r+0x1c>
 8007c6c:	42a9      	cmp	r1, r5
 8007c6e:	d904      	bls.n	8007c7a <_malloc_r+0x26>
 8007c70:	230c      	movs	r3, #12
 8007c72:	6033      	str	r3, [r6, #0]
 8007c74:	2000      	movs	r0, #0
 8007c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007d50 <_malloc_r+0xfc>
 8007c7e:	f000 f869 	bl	8007d54 <__malloc_lock>
 8007c82:	f8d8 3000 	ldr.w	r3, [r8]
 8007c86:	461c      	mov	r4, r3
 8007c88:	bb44      	cbnz	r4, 8007cdc <_malloc_r+0x88>
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	4630      	mov	r0, r6
 8007c8e:	f7ff ffbf 	bl	8007c10 <sbrk_aligned>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	4604      	mov	r4, r0
 8007c96:	d158      	bne.n	8007d4a <_malloc_r+0xf6>
 8007c98:	f8d8 4000 	ldr.w	r4, [r8]
 8007c9c:	4627      	mov	r7, r4
 8007c9e:	2f00      	cmp	r7, #0
 8007ca0:	d143      	bne.n	8007d2a <_malloc_r+0xd6>
 8007ca2:	2c00      	cmp	r4, #0
 8007ca4:	d04b      	beq.n	8007d3e <_malloc_r+0xea>
 8007ca6:	6823      	ldr	r3, [r4, #0]
 8007ca8:	4639      	mov	r1, r7
 8007caa:	4630      	mov	r0, r6
 8007cac:	eb04 0903 	add.w	r9, r4, r3
 8007cb0:	f000 fb5c 	bl	800836c <_sbrk_r>
 8007cb4:	4581      	cmp	r9, r0
 8007cb6:	d142      	bne.n	8007d3e <_malloc_r+0xea>
 8007cb8:	6821      	ldr	r1, [r4, #0]
 8007cba:	1a6d      	subs	r5, r5, r1
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	4630      	mov	r0, r6
 8007cc0:	f7ff ffa6 	bl	8007c10 <sbrk_aligned>
 8007cc4:	3001      	adds	r0, #1
 8007cc6:	d03a      	beq.n	8007d3e <_malloc_r+0xea>
 8007cc8:	6823      	ldr	r3, [r4, #0]
 8007cca:	442b      	add	r3, r5
 8007ccc:	6023      	str	r3, [r4, #0]
 8007cce:	f8d8 3000 	ldr.w	r3, [r8]
 8007cd2:	685a      	ldr	r2, [r3, #4]
 8007cd4:	bb62      	cbnz	r2, 8007d30 <_malloc_r+0xdc>
 8007cd6:	f8c8 7000 	str.w	r7, [r8]
 8007cda:	e00f      	b.n	8007cfc <_malloc_r+0xa8>
 8007cdc:	6822      	ldr	r2, [r4, #0]
 8007cde:	1b52      	subs	r2, r2, r5
 8007ce0:	d420      	bmi.n	8007d24 <_malloc_r+0xd0>
 8007ce2:	2a0b      	cmp	r2, #11
 8007ce4:	d917      	bls.n	8007d16 <_malloc_r+0xc2>
 8007ce6:	1961      	adds	r1, r4, r5
 8007ce8:	42a3      	cmp	r3, r4
 8007cea:	6025      	str	r5, [r4, #0]
 8007cec:	bf18      	it	ne
 8007cee:	6059      	strne	r1, [r3, #4]
 8007cf0:	6863      	ldr	r3, [r4, #4]
 8007cf2:	bf08      	it	eq
 8007cf4:	f8c8 1000 	streq.w	r1, [r8]
 8007cf8:	5162      	str	r2, [r4, r5]
 8007cfa:	604b      	str	r3, [r1, #4]
 8007cfc:	4630      	mov	r0, r6
 8007cfe:	f000 f82f 	bl	8007d60 <__malloc_unlock>
 8007d02:	f104 000b 	add.w	r0, r4, #11
 8007d06:	1d23      	adds	r3, r4, #4
 8007d08:	f020 0007 	bic.w	r0, r0, #7
 8007d0c:	1ac2      	subs	r2, r0, r3
 8007d0e:	bf1c      	itt	ne
 8007d10:	1a1b      	subne	r3, r3, r0
 8007d12:	50a3      	strne	r3, [r4, r2]
 8007d14:	e7af      	b.n	8007c76 <_malloc_r+0x22>
 8007d16:	6862      	ldr	r2, [r4, #4]
 8007d18:	42a3      	cmp	r3, r4
 8007d1a:	bf0c      	ite	eq
 8007d1c:	f8c8 2000 	streq.w	r2, [r8]
 8007d20:	605a      	strne	r2, [r3, #4]
 8007d22:	e7eb      	b.n	8007cfc <_malloc_r+0xa8>
 8007d24:	4623      	mov	r3, r4
 8007d26:	6864      	ldr	r4, [r4, #4]
 8007d28:	e7ae      	b.n	8007c88 <_malloc_r+0x34>
 8007d2a:	463c      	mov	r4, r7
 8007d2c:	687f      	ldr	r7, [r7, #4]
 8007d2e:	e7b6      	b.n	8007c9e <_malloc_r+0x4a>
 8007d30:	461a      	mov	r2, r3
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	42a3      	cmp	r3, r4
 8007d36:	d1fb      	bne.n	8007d30 <_malloc_r+0xdc>
 8007d38:	2300      	movs	r3, #0
 8007d3a:	6053      	str	r3, [r2, #4]
 8007d3c:	e7de      	b.n	8007cfc <_malloc_r+0xa8>
 8007d3e:	230c      	movs	r3, #12
 8007d40:	6033      	str	r3, [r6, #0]
 8007d42:	4630      	mov	r0, r6
 8007d44:	f000 f80c 	bl	8007d60 <__malloc_unlock>
 8007d48:	e794      	b.n	8007c74 <_malloc_r+0x20>
 8007d4a:	6005      	str	r5, [r0, #0]
 8007d4c:	e7d6      	b.n	8007cfc <_malloc_r+0xa8>
 8007d4e:	bf00      	nop
 8007d50:	240002c0 	.word	0x240002c0

08007d54 <__malloc_lock>:
 8007d54:	4801      	ldr	r0, [pc, #4]	@ (8007d5c <__malloc_lock+0x8>)
 8007d56:	f7ff bf0f 	b.w	8007b78 <__retarget_lock_acquire_recursive>
 8007d5a:	bf00      	nop
 8007d5c:	240002b8 	.word	0x240002b8

08007d60 <__malloc_unlock>:
 8007d60:	4801      	ldr	r0, [pc, #4]	@ (8007d68 <__malloc_unlock+0x8>)
 8007d62:	f7ff bf0a 	b.w	8007b7a <__retarget_lock_release_recursive>
 8007d66:	bf00      	nop
 8007d68:	240002b8 	.word	0x240002b8

08007d6c <__ssputs_r>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	688e      	ldr	r6, [r1, #8]
 8007d72:	461f      	mov	r7, r3
 8007d74:	42be      	cmp	r6, r7
 8007d76:	680b      	ldr	r3, [r1, #0]
 8007d78:	4682      	mov	sl, r0
 8007d7a:	460c      	mov	r4, r1
 8007d7c:	4690      	mov	r8, r2
 8007d7e:	d82d      	bhi.n	8007ddc <__ssputs_r+0x70>
 8007d80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d84:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d88:	d026      	beq.n	8007dd8 <__ssputs_r+0x6c>
 8007d8a:	6965      	ldr	r5, [r4, #20]
 8007d8c:	6909      	ldr	r1, [r1, #16]
 8007d8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d92:	eba3 0901 	sub.w	r9, r3, r1
 8007d96:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d9a:	1c7b      	adds	r3, r7, #1
 8007d9c:	444b      	add	r3, r9
 8007d9e:	106d      	asrs	r5, r5, #1
 8007da0:	429d      	cmp	r5, r3
 8007da2:	bf38      	it	cc
 8007da4:	461d      	movcc	r5, r3
 8007da6:	0553      	lsls	r3, r2, #21
 8007da8:	d527      	bpl.n	8007dfa <__ssputs_r+0x8e>
 8007daa:	4629      	mov	r1, r5
 8007dac:	f7ff ff52 	bl	8007c54 <_malloc_r>
 8007db0:	4606      	mov	r6, r0
 8007db2:	b360      	cbz	r0, 8007e0e <__ssputs_r+0xa2>
 8007db4:	6921      	ldr	r1, [r4, #16]
 8007db6:	464a      	mov	r2, r9
 8007db8:	f000 fae8 	bl	800838c <memcpy>
 8007dbc:	89a3      	ldrh	r3, [r4, #12]
 8007dbe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dc6:	81a3      	strh	r3, [r4, #12]
 8007dc8:	6126      	str	r6, [r4, #16]
 8007dca:	6165      	str	r5, [r4, #20]
 8007dcc:	444e      	add	r6, r9
 8007dce:	eba5 0509 	sub.w	r5, r5, r9
 8007dd2:	6026      	str	r6, [r4, #0]
 8007dd4:	60a5      	str	r5, [r4, #8]
 8007dd6:	463e      	mov	r6, r7
 8007dd8:	42be      	cmp	r6, r7
 8007dda:	d900      	bls.n	8007dde <__ssputs_r+0x72>
 8007ddc:	463e      	mov	r6, r7
 8007dde:	6820      	ldr	r0, [r4, #0]
 8007de0:	4632      	mov	r2, r6
 8007de2:	4641      	mov	r1, r8
 8007de4:	f000 faa8 	bl	8008338 <memmove>
 8007de8:	68a3      	ldr	r3, [r4, #8]
 8007dea:	1b9b      	subs	r3, r3, r6
 8007dec:	60a3      	str	r3, [r4, #8]
 8007dee:	6823      	ldr	r3, [r4, #0]
 8007df0:	4433      	add	r3, r6
 8007df2:	6023      	str	r3, [r4, #0]
 8007df4:	2000      	movs	r0, #0
 8007df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dfa:	462a      	mov	r2, r5
 8007dfc:	f000 fad4 	bl	80083a8 <_realloc_r>
 8007e00:	4606      	mov	r6, r0
 8007e02:	2800      	cmp	r0, #0
 8007e04:	d1e0      	bne.n	8007dc8 <__ssputs_r+0x5c>
 8007e06:	6921      	ldr	r1, [r4, #16]
 8007e08:	4650      	mov	r0, sl
 8007e0a:	f7ff feb7 	bl	8007b7c <_free_r>
 8007e0e:	230c      	movs	r3, #12
 8007e10:	f8ca 3000 	str.w	r3, [sl]
 8007e14:	89a3      	ldrh	r3, [r4, #12]
 8007e16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e1a:	81a3      	strh	r3, [r4, #12]
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	e7e9      	b.n	8007df6 <__ssputs_r+0x8a>
	...

08007e24 <_svfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	4698      	mov	r8, r3
 8007e2a:	898b      	ldrh	r3, [r1, #12]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	b09d      	sub	sp, #116	@ 0x74
 8007e30:	4607      	mov	r7, r0
 8007e32:	460d      	mov	r5, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	d510      	bpl.n	8007e5a <_svfiprintf_r+0x36>
 8007e38:	690b      	ldr	r3, [r1, #16]
 8007e3a:	b973      	cbnz	r3, 8007e5a <_svfiprintf_r+0x36>
 8007e3c:	2140      	movs	r1, #64	@ 0x40
 8007e3e:	f7ff ff09 	bl	8007c54 <_malloc_r>
 8007e42:	6028      	str	r0, [r5, #0]
 8007e44:	6128      	str	r0, [r5, #16]
 8007e46:	b930      	cbnz	r0, 8007e56 <_svfiprintf_r+0x32>
 8007e48:	230c      	movs	r3, #12
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e50:	b01d      	add	sp, #116	@ 0x74
 8007e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e56:	2340      	movs	r3, #64	@ 0x40
 8007e58:	616b      	str	r3, [r5, #20]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e5e:	2320      	movs	r3, #32
 8007e60:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e64:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e68:	2330      	movs	r3, #48	@ 0x30
 8007e6a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008008 <_svfiprintf_r+0x1e4>
 8007e6e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e72:	f04f 0901 	mov.w	r9, #1
 8007e76:	4623      	mov	r3, r4
 8007e78:	469a      	mov	sl, r3
 8007e7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7e:	b10a      	cbz	r2, 8007e84 <_svfiprintf_r+0x60>
 8007e80:	2a25      	cmp	r2, #37	@ 0x25
 8007e82:	d1f9      	bne.n	8007e78 <_svfiprintf_r+0x54>
 8007e84:	ebba 0b04 	subs.w	fp, sl, r4
 8007e88:	d00b      	beq.n	8007ea2 <_svfiprintf_r+0x7e>
 8007e8a:	465b      	mov	r3, fp
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4629      	mov	r1, r5
 8007e90:	4638      	mov	r0, r7
 8007e92:	f7ff ff6b 	bl	8007d6c <__ssputs_r>
 8007e96:	3001      	adds	r0, #1
 8007e98:	f000 80a7 	beq.w	8007fea <_svfiprintf_r+0x1c6>
 8007e9c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e9e:	445a      	add	r2, fp
 8007ea0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ea2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 809f 	beq.w	8007fea <_svfiprintf_r+0x1c6>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb6:	f10a 0a01 	add.w	sl, sl, #1
 8007eba:	9304      	str	r3, [sp, #16]
 8007ebc:	9307      	str	r3, [sp, #28]
 8007ebe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ec2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ec4:	4654      	mov	r4, sl
 8007ec6:	2205      	movs	r2, #5
 8007ec8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ecc:	484e      	ldr	r0, [pc, #312]	@ (8008008 <_svfiprintf_r+0x1e4>)
 8007ece:	f7f8 fa0f 	bl	80002f0 <memchr>
 8007ed2:	9a04      	ldr	r2, [sp, #16]
 8007ed4:	b9d8      	cbnz	r0, 8007f0e <_svfiprintf_r+0xea>
 8007ed6:	06d0      	lsls	r0, r2, #27
 8007ed8:	bf44      	itt	mi
 8007eda:	2320      	movmi	r3, #32
 8007edc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ee0:	0711      	lsls	r1, r2, #28
 8007ee2:	bf44      	itt	mi
 8007ee4:	232b      	movmi	r3, #43	@ 0x2b
 8007ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eea:	f89a 3000 	ldrb.w	r3, [sl]
 8007eee:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ef0:	d015      	beq.n	8007f1e <_svfiprintf_r+0xfa>
 8007ef2:	9a07      	ldr	r2, [sp, #28]
 8007ef4:	4654      	mov	r4, sl
 8007ef6:	2000      	movs	r0, #0
 8007ef8:	f04f 0c0a 	mov.w	ip, #10
 8007efc:	4621      	mov	r1, r4
 8007efe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f02:	3b30      	subs	r3, #48	@ 0x30
 8007f04:	2b09      	cmp	r3, #9
 8007f06:	d94b      	bls.n	8007fa0 <_svfiprintf_r+0x17c>
 8007f08:	b1b0      	cbz	r0, 8007f38 <_svfiprintf_r+0x114>
 8007f0a:	9207      	str	r2, [sp, #28]
 8007f0c:	e014      	b.n	8007f38 <_svfiprintf_r+0x114>
 8007f0e:	eba0 0308 	sub.w	r3, r0, r8
 8007f12:	fa09 f303 	lsl.w	r3, r9, r3
 8007f16:	4313      	orrs	r3, r2
 8007f18:	9304      	str	r3, [sp, #16]
 8007f1a:	46a2      	mov	sl, r4
 8007f1c:	e7d2      	b.n	8007ec4 <_svfiprintf_r+0xa0>
 8007f1e:	9b03      	ldr	r3, [sp, #12]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	9103      	str	r1, [sp, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	bfbb      	ittet	lt
 8007f2a:	425b      	neglt	r3, r3
 8007f2c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f30:	9307      	strge	r3, [sp, #28]
 8007f32:	9307      	strlt	r3, [sp, #28]
 8007f34:	bfb8      	it	lt
 8007f36:	9204      	strlt	r2, [sp, #16]
 8007f38:	7823      	ldrb	r3, [r4, #0]
 8007f3a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f3c:	d10a      	bne.n	8007f54 <_svfiprintf_r+0x130>
 8007f3e:	7863      	ldrb	r3, [r4, #1]
 8007f40:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f42:	d132      	bne.n	8007faa <_svfiprintf_r+0x186>
 8007f44:	9b03      	ldr	r3, [sp, #12]
 8007f46:	1d1a      	adds	r2, r3, #4
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	9203      	str	r2, [sp, #12]
 8007f4c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f50:	3402      	adds	r4, #2
 8007f52:	9305      	str	r3, [sp, #20]
 8007f54:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008018 <_svfiprintf_r+0x1f4>
 8007f58:	7821      	ldrb	r1, [r4, #0]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	f7f8 f9c7 	bl	80002f0 <memchr>
 8007f62:	b138      	cbz	r0, 8007f74 <_svfiprintf_r+0x150>
 8007f64:	9b04      	ldr	r3, [sp, #16]
 8007f66:	eba0 000a 	sub.w	r0, r0, sl
 8007f6a:	2240      	movs	r2, #64	@ 0x40
 8007f6c:	4082      	lsls	r2, r0
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	3401      	adds	r4, #1
 8007f72:	9304      	str	r3, [sp, #16]
 8007f74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f78:	4824      	ldr	r0, [pc, #144]	@ (800800c <_svfiprintf_r+0x1e8>)
 8007f7a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f7e:	2206      	movs	r2, #6
 8007f80:	f7f8 f9b6 	bl	80002f0 <memchr>
 8007f84:	2800      	cmp	r0, #0
 8007f86:	d036      	beq.n	8007ff6 <_svfiprintf_r+0x1d2>
 8007f88:	4b21      	ldr	r3, [pc, #132]	@ (8008010 <_svfiprintf_r+0x1ec>)
 8007f8a:	bb1b      	cbnz	r3, 8007fd4 <_svfiprintf_r+0x1b0>
 8007f8c:	9b03      	ldr	r3, [sp, #12]
 8007f8e:	3307      	adds	r3, #7
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	9303      	str	r3, [sp, #12]
 8007f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f9a:	4433      	add	r3, r6
 8007f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f9e:	e76a      	b.n	8007e76 <_svfiprintf_r+0x52>
 8007fa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa4:	460c      	mov	r4, r1
 8007fa6:	2001      	movs	r0, #1
 8007fa8:	e7a8      	b.n	8007efc <_svfiprintf_r+0xd8>
 8007faa:	2300      	movs	r3, #0
 8007fac:	3401      	adds	r4, #1
 8007fae:	9305      	str	r3, [sp, #20]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	f04f 0c0a 	mov.w	ip, #10
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fbc:	3a30      	subs	r2, #48	@ 0x30
 8007fbe:	2a09      	cmp	r2, #9
 8007fc0:	d903      	bls.n	8007fca <_svfiprintf_r+0x1a6>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0c6      	beq.n	8007f54 <_svfiprintf_r+0x130>
 8007fc6:	9105      	str	r1, [sp, #20]
 8007fc8:	e7c4      	b.n	8007f54 <_svfiprintf_r+0x130>
 8007fca:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fce:	4604      	mov	r4, r0
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e7f0      	b.n	8007fb6 <_svfiprintf_r+0x192>
 8007fd4:	ab03      	add	r3, sp, #12
 8007fd6:	9300      	str	r3, [sp, #0]
 8007fd8:	462a      	mov	r2, r5
 8007fda:	4b0e      	ldr	r3, [pc, #56]	@ (8008014 <_svfiprintf_r+0x1f0>)
 8007fdc:	a904      	add	r1, sp, #16
 8007fde:	4638      	mov	r0, r7
 8007fe0:	f3af 8000 	nop.w
 8007fe4:	1c42      	adds	r2, r0, #1
 8007fe6:	4606      	mov	r6, r0
 8007fe8:	d1d6      	bne.n	8007f98 <_svfiprintf_r+0x174>
 8007fea:	89ab      	ldrh	r3, [r5, #12]
 8007fec:	065b      	lsls	r3, r3, #25
 8007fee:	f53f af2d 	bmi.w	8007e4c <_svfiprintf_r+0x28>
 8007ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ff4:	e72c      	b.n	8007e50 <_svfiprintf_r+0x2c>
 8007ff6:	ab03      	add	r3, sp, #12
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	462a      	mov	r2, r5
 8007ffc:	4b05      	ldr	r3, [pc, #20]	@ (8008014 <_svfiprintf_r+0x1f0>)
 8007ffe:	a904      	add	r1, sp, #16
 8008000:	4638      	mov	r0, r7
 8008002:	f000 f879 	bl	80080f8 <_printf_i>
 8008006:	e7ed      	b.n	8007fe4 <_svfiprintf_r+0x1c0>
 8008008:	08008468 	.word	0x08008468
 800800c:	08008472 	.word	0x08008472
 8008010:	00000000 	.word	0x00000000
 8008014:	08007d6d 	.word	0x08007d6d
 8008018:	0800846e 	.word	0x0800846e

0800801c <_printf_common>:
 800801c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008020:	4616      	mov	r6, r2
 8008022:	4698      	mov	r8, r3
 8008024:	688a      	ldr	r2, [r1, #8]
 8008026:	690b      	ldr	r3, [r1, #16]
 8008028:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800802c:	4293      	cmp	r3, r2
 800802e:	bfb8      	it	lt
 8008030:	4613      	movlt	r3, r2
 8008032:	6033      	str	r3, [r6, #0]
 8008034:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008038:	4607      	mov	r7, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b10a      	cbz	r2, 8008042 <_printf_common+0x26>
 800803e:	3301      	adds	r3, #1
 8008040:	6033      	str	r3, [r6, #0]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	0699      	lsls	r1, r3, #26
 8008046:	bf42      	ittt	mi
 8008048:	6833      	ldrmi	r3, [r6, #0]
 800804a:	3302      	addmi	r3, #2
 800804c:	6033      	strmi	r3, [r6, #0]
 800804e:	6825      	ldr	r5, [r4, #0]
 8008050:	f015 0506 	ands.w	r5, r5, #6
 8008054:	d106      	bne.n	8008064 <_printf_common+0x48>
 8008056:	f104 0a19 	add.w	sl, r4, #25
 800805a:	68e3      	ldr	r3, [r4, #12]
 800805c:	6832      	ldr	r2, [r6, #0]
 800805e:	1a9b      	subs	r3, r3, r2
 8008060:	42ab      	cmp	r3, r5
 8008062:	dc26      	bgt.n	80080b2 <_printf_common+0x96>
 8008064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008068:	6822      	ldr	r2, [r4, #0]
 800806a:	3b00      	subs	r3, #0
 800806c:	bf18      	it	ne
 800806e:	2301      	movne	r3, #1
 8008070:	0692      	lsls	r2, r2, #26
 8008072:	d42b      	bmi.n	80080cc <_printf_common+0xb0>
 8008074:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008078:	4641      	mov	r1, r8
 800807a:	4638      	mov	r0, r7
 800807c:	47c8      	blx	r9
 800807e:	3001      	adds	r0, #1
 8008080:	d01e      	beq.n	80080c0 <_printf_common+0xa4>
 8008082:	6823      	ldr	r3, [r4, #0]
 8008084:	6922      	ldr	r2, [r4, #16]
 8008086:	f003 0306 	and.w	r3, r3, #6
 800808a:	2b04      	cmp	r3, #4
 800808c:	bf02      	ittt	eq
 800808e:	68e5      	ldreq	r5, [r4, #12]
 8008090:	6833      	ldreq	r3, [r6, #0]
 8008092:	1aed      	subeq	r5, r5, r3
 8008094:	68a3      	ldr	r3, [r4, #8]
 8008096:	bf0c      	ite	eq
 8008098:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800809c:	2500      	movne	r5, #0
 800809e:	4293      	cmp	r3, r2
 80080a0:	bfc4      	itt	gt
 80080a2:	1a9b      	subgt	r3, r3, r2
 80080a4:	18ed      	addgt	r5, r5, r3
 80080a6:	2600      	movs	r6, #0
 80080a8:	341a      	adds	r4, #26
 80080aa:	42b5      	cmp	r5, r6
 80080ac:	d11a      	bne.n	80080e4 <_printf_common+0xc8>
 80080ae:	2000      	movs	r0, #0
 80080b0:	e008      	b.n	80080c4 <_printf_common+0xa8>
 80080b2:	2301      	movs	r3, #1
 80080b4:	4652      	mov	r2, sl
 80080b6:	4641      	mov	r1, r8
 80080b8:	4638      	mov	r0, r7
 80080ba:	47c8      	blx	r9
 80080bc:	3001      	adds	r0, #1
 80080be:	d103      	bne.n	80080c8 <_printf_common+0xac>
 80080c0:	f04f 30ff 	mov.w	r0, #4294967295
 80080c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c8:	3501      	adds	r5, #1
 80080ca:	e7c6      	b.n	800805a <_printf_common+0x3e>
 80080cc:	18e1      	adds	r1, r4, r3
 80080ce:	1c5a      	adds	r2, r3, #1
 80080d0:	2030      	movs	r0, #48	@ 0x30
 80080d2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080d6:	4422      	add	r2, r4
 80080d8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080dc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080e0:	3302      	adds	r3, #2
 80080e2:	e7c7      	b.n	8008074 <_printf_common+0x58>
 80080e4:	2301      	movs	r3, #1
 80080e6:	4622      	mov	r2, r4
 80080e8:	4641      	mov	r1, r8
 80080ea:	4638      	mov	r0, r7
 80080ec:	47c8      	blx	r9
 80080ee:	3001      	adds	r0, #1
 80080f0:	d0e6      	beq.n	80080c0 <_printf_common+0xa4>
 80080f2:	3601      	adds	r6, #1
 80080f4:	e7d9      	b.n	80080aa <_printf_common+0x8e>
	...

080080f8 <_printf_i>:
 80080f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080fc:	7e0f      	ldrb	r7, [r1, #24]
 80080fe:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008100:	2f78      	cmp	r7, #120	@ 0x78
 8008102:	4691      	mov	r9, r2
 8008104:	4680      	mov	r8, r0
 8008106:	460c      	mov	r4, r1
 8008108:	469a      	mov	sl, r3
 800810a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800810e:	d807      	bhi.n	8008120 <_printf_i+0x28>
 8008110:	2f62      	cmp	r7, #98	@ 0x62
 8008112:	d80a      	bhi.n	800812a <_printf_i+0x32>
 8008114:	2f00      	cmp	r7, #0
 8008116:	f000 80d2 	beq.w	80082be <_printf_i+0x1c6>
 800811a:	2f58      	cmp	r7, #88	@ 0x58
 800811c:	f000 80b9 	beq.w	8008292 <_printf_i+0x19a>
 8008120:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008124:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008128:	e03a      	b.n	80081a0 <_printf_i+0xa8>
 800812a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800812e:	2b15      	cmp	r3, #21
 8008130:	d8f6      	bhi.n	8008120 <_printf_i+0x28>
 8008132:	a101      	add	r1, pc, #4	@ (adr r1, 8008138 <_printf_i+0x40>)
 8008134:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008138:	08008191 	.word	0x08008191
 800813c:	080081a5 	.word	0x080081a5
 8008140:	08008121 	.word	0x08008121
 8008144:	08008121 	.word	0x08008121
 8008148:	08008121 	.word	0x08008121
 800814c:	08008121 	.word	0x08008121
 8008150:	080081a5 	.word	0x080081a5
 8008154:	08008121 	.word	0x08008121
 8008158:	08008121 	.word	0x08008121
 800815c:	08008121 	.word	0x08008121
 8008160:	08008121 	.word	0x08008121
 8008164:	080082a5 	.word	0x080082a5
 8008168:	080081cf 	.word	0x080081cf
 800816c:	0800825f 	.word	0x0800825f
 8008170:	08008121 	.word	0x08008121
 8008174:	08008121 	.word	0x08008121
 8008178:	080082c7 	.word	0x080082c7
 800817c:	08008121 	.word	0x08008121
 8008180:	080081cf 	.word	0x080081cf
 8008184:	08008121 	.word	0x08008121
 8008188:	08008121 	.word	0x08008121
 800818c:	08008267 	.word	0x08008267
 8008190:	6833      	ldr	r3, [r6, #0]
 8008192:	1d1a      	adds	r2, r3, #4
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6032      	str	r2, [r6, #0]
 8008198:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800819c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80081a0:	2301      	movs	r3, #1
 80081a2:	e09d      	b.n	80082e0 <_printf_i+0x1e8>
 80081a4:	6833      	ldr	r3, [r6, #0]
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	1d19      	adds	r1, r3, #4
 80081aa:	6031      	str	r1, [r6, #0]
 80081ac:	0606      	lsls	r6, r0, #24
 80081ae:	d501      	bpl.n	80081b4 <_printf_i+0xbc>
 80081b0:	681d      	ldr	r5, [r3, #0]
 80081b2:	e003      	b.n	80081bc <_printf_i+0xc4>
 80081b4:	0645      	lsls	r5, r0, #25
 80081b6:	d5fb      	bpl.n	80081b0 <_printf_i+0xb8>
 80081b8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081bc:	2d00      	cmp	r5, #0
 80081be:	da03      	bge.n	80081c8 <_printf_i+0xd0>
 80081c0:	232d      	movs	r3, #45	@ 0x2d
 80081c2:	426d      	negs	r5, r5
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081c8:	4859      	ldr	r0, [pc, #356]	@ (8008330 <_printf_i+0x238>)
 80081ca:	230a      	movs	r3, #10
 80081cc:	e011      	b.n	80081f2 <_printf_i+0xfa>
 80081ce:	6821      	ldr	r1, [r4, #0]
 80081d0:	6833      	ldr	r3, [r6, #0]
 80081d2:	0608      	lsls	r0, r1, #24
 80081d4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081d8:	d402      	bmi.n	80081e0 <_printf_i+0xe8>
 80081da:	0649      	lsls	r1, r1, #25
 80081dc:	bf48      	it	mi
 80081de:	b2ad      	uxthmi	r5, r5
 80081e0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081e2:	4853      	ldr	r0, [pc, #332]	@ (8008330 <_printf_i+0x238>)
 80081e4:	6033      	str	r3, [r6, #0]
 80081e6:	bf14      	ite	ne
 80081e8:	230a      	movne	r3, #10
 80081ea:	2308      	moveq	r3, #8
 80081ec:	2100      	movs	r1, #0
 80081ee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081f2:	6866      	ldr	r6, [r4, #4]
 80081f4:	60a6      	str	r6, [r4, #8]
 80081f6:	2e00      	cmp	r6, #0
 80081f8:	bfa2      	ittt	ge
 80081fa:	6821      	ldrge	r1, [r4, #0]
 80081fc:	f021 0104 	bicge.w	r1, r1, #4
 8008200:	6021      	strge	r1, [r4, #0]
 8008202:	b90d      	cbnz	r5, 8008208 <_printf_i+0x110>
 8008204:	2e00      	cmp	r6, #0
 8008206:	d04b      	beq.n	80082a0 <_printf_i+0x1a8>
 8008208:	4616      	mov	r6, r2
 800820a:	fbb5 f1f3 	udiv	r1, r5, r3
 800820e:	fb03 5711 	mls	r7, r3, r1, r5
 8008212:	5dc7      	ldrb	r7, [r0, r7]
 8008214:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008218:	462f      	mov	r7, r5
 800821a:	42bb      	cmp	r3, r7
 800821c:	460d      	mov	r5, r1
 800821e:	d9f4      	bls.n	800820a <_printf_i+0x112>
 8008220:	2b08      	cmp	r3, #8
 8008222:	d10b      	bne.n	800823c <_printf_i+0x144>
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	07df      	lsls	r7, r3, #31
 8008228:	d508      	bpl.n	800823c <_printf_i+0x144>
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	6861      	ldr	r1, [r4, #4]
 800822e:	4299      	cmp	r1, r3
 8008230:	bfde      	ittt	le
 8008232:	2330      	movle	r3, #48	@ 0x30
 8008234:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008238:	f106 36ff 	addle.w	r6, r6, #4294967295
 800823c:	1b92      	subs	r2, r2, r6
 800823e:	6122      	str	r2, [r4, #16]
 8008240:	f8cd a000 	str.w	sl, [sp]
 8008244:	464b      	mov	r3, r9
 8008246:	aa03      	add	r2, sp, #12
 8008248:	4621      	mov	r1, r4
 800824a:	4640      	mov	r0, r8
 800824c:	f7ff fee6 	bl	800801c <_printf_common>
 8008250:	3001      	adds	r0, #1
 8008252:	d14a      	bne.n	80082ea <_printf_i+0x1f2>
 8008254:	f04f 30ff 	mov.w	r0, #4294967295
 8008258:	b004      	add	sp, #16
 800825a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	f043 0320 	orr.w	r3, r3, #32
 8008264:	6023      	str	r3, [r4, #0]
 8008266:	4833      	ldr	r0, [pc, #204]	@ (8008334 <_printf_i+0x23c>)
 8008268:	2778      	movs	r7, #120	@ 0x78
 800826a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	6831      	ldr	r1, [r6, #0]
 8008272:	061f      	lsls	r7, r3, #24
 8008274:	f851 5b04 	ldr.w	r5, [r1], #4
 8008278:	d402      	bmi.n	8008280 <_printf_i+0x188>
 800827a:	065f      	lsls	r7, r3, #25
 800827c:	bf48      	it	mi
 800827e:	b2ad      	uxthmi	r5, r5
 8008280:	6031      	str	r1, [r6, #0]
 8008282:	07d9      	lsls	r1, r3, #31
 8008284:	bf44      	itt	mi
 8008286:	f043 0320 	orrmi.w	r3, r3, #32
 800828a:	6023      	strmi	r3, [r4, #0]
 800828c:	b11d      	cbz	r5, 8008296 <_printf_i+0x19e>
 800828e:	2310      	movs	r3, #16
 8008290:	e7ac      	b.n	80081ec <_printf_i+0xf4>
 8008292:	4827      	ldr	r0, [pc, #156]	@ (8008330 <_printf_i+0x238>)
 8008294:	e7e9      	b.n	800826a <_printf_i+0x172>
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	f023 0320 	bic.w	r3, r3, #32
 800829c:	6023      	str	r3, [r4, #0]
 800829e:	e7f6      	b.n	800828e <_printf_i+0x196>
 80082a0:	4616      	mov	r6, r2
 80082a2:	e7bd      	b.n	8008220 <_printf_i+0x128>
 80082a4:	6833      	ldr	r3, [r6, #0]
 80082a6:	6825      	ldr	r5, [r4, #0]
 80082a8:	6961      	ldr	r1, [r4, #20]
 80082aa:	1d18      	adds	r0, r3, #4
 80082ac:	6030      	str	r0, [r6, #0]
 80082ae:	062e      	lsls	r6, r5, #24
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	d501      	bpl.n	80082b8 <_printf_i+0x1c0>
 80082b4:	6019      	str	r1, [r3, #0]
 80082b6:	e002      	b.n	80082be <_printf_i+0x1c6>
 80082b8:	0668      	lsls	r0, r5, #25
 80082ba:	d5fb      	bpl.n	80082b4 <_printf_i+0x1bc>
 80082bc:	8019      	strh	r1, [r3, #0]
 80082be:	2300      	movs	r3, #0
 80082c0:	6123      	str	r3, [r4, #16]
 80082c2:	4616      	mov	r6, r2
 80082c4:	e7bc      	b.n	8008240 <_printf_i+0x148>
 80082c6:	6833      	ldr	r3, [r6, #0]
 80082c8:	1d1a      	adds	r2, r3, #4
 80082ca:	6032      	str	r2, [r6, #0]
 80082cc:	681e      	ldr	r6, [r3, #0]
 80082ce:	6862      	ldr	r2, [r4, #4]
 80082d0:	2100      	movs	r1, #0
 80082d2:	4630      	mov	r0, r6
 80082d4:	f7f8 f80c 	bl	80002f0 <memchr>
 80082d8:	b108      	cbz	r0, 80082de <_printf_i+0x1e6>
 80082da:	1b80      	subs	r0, r0, r6
 80082dc:	6060      	str	r0, [r4, #4]
 80082de:	6863      	ldr	r3, [r4, #4]
 80082e0:	6123      	str	r3, [r4, #16]
 80082e2:	2300      	movs	r3, #0
 80082e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082e8:	e7aa      	b.n	8008240 <_printf_i+0x148>
 80082ea:	6923      	ldr	r3, [r4, #16]
 80082ec:	4632      	mov	r2, r6
 80082ee:	4649      	mov	r1, r9
 80082f0:	4640      	mov	r0, r8
 80082f2:	47d0      	blx	sl
 80082f4:	3001      	adds	r0, #1
 80082f6:	d0ad      	beq.n	8008254 <_printf_i+0x15c>
 80082f8:	6823      	ldr	r3, [r4, #0]
 80082fa:	079b      	lsls	r3, r3, #30
 80082fc:	d413      	bmi.n	8008326 <_printf_i+0x22e>
 80082fe:	68e0      	ldr	r0, [r4, #12]
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	4298      	cmp	r0, r3
 8008304:	bfb8      	it	lt
 8008306:	4618      	movlt	r0, r3
 8008308:	e7a6      	b.n	8008258 <_printf_i+0x160>
 800830a:	2301      	movs	r3, #1
 800830c:	4632      	mov	r2, r6
 800830e:	4649      	mov	r1, r9
 8008310:	4640      	mov	r0, r8
 8008312:	47d0      	blx	sl
 8008314:	3001      	adds	r0, #1
 8008316:	d09d      	beq.n	8008254 <_printf_i+0x15c>
 8008318:	3501      	adds	r5, #1
 800831a:	68e3      	ldr	r3, [r4, #12]
 800831c:	9903      	ldr	r1, [sp, #12]
 800831e:	1a5b      	subs	r3, r3, r1
 8008320:	42ab      	cmp	r3, r5
 8008322:	dcf2      	bgt.n	800830a <_printf_i+0x212>
 8008324:	e7eb      	b.n	80082fe <_printf_i+0x206>
 8008326:	2500      	movs	r5, #0
 8008328:	f104 0619 	add.w	r6, r4, #25
 800832c:	e7f5      	b.n	800831a <_printf_i+0x222>
 800832e:	bf00      	nop
 8008330:	08008479 	.word	0x08008479
 8008334:	0800848a 	.word	0x0800848a

08008338 <memmove>:
 8008338:	4288      	cmp	r0, r1
 800833a:	b510      	push	{r4, lr}
 800833c:	eb01 0402 	add.w	r4, r1, r2
 8008340:	d902      	bls.n	8008348 <memmove+0x10>
 8008342:	4284      	cmp	r4, r0
 8008344:	4623      	mov	r3, r4
 8008346:	d807      	bhi.n	8008358 <memmove+0x20>
 8008348:	1e43      	subs	r3, r0, #1
 800834a:	42a1      	cmp	r1, r4
 800834c:	d008      	beq.n	8008360 <memmove+0x28>
 800834e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008352:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008356:	e7f8      	b.n	800834a <memmove+0x12>
 8008358:	4402      	add	r2, r0
 800835a:	4601      	mov	r1, r0
 800835c:	428a      	cmp	r2, r1
 800835e:	d100      	bne.n	8008362 <memmove+0x2a>
 8008360:	bd10      	pop	{r4, pc}
 8008362:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008366:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800836a:	e7f7      	b.n	800835c <memmove+0x24>

0800836c <_sbrk_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d06      	ldr	r5, [pc, #24]	@ (8008388 <_sbrk_r+0x1c>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	602b      	str	r3, [r5, #0]
 8008378:	f7f8 fc76 	bl	8000c68 <_sbrk>
 800837c:	1c43      	adds	r3, r0, #1
 800837e:	d102      	bne.n	8008386 <_sbrk_r+0x1a>
 8008380:	682b      	ldr	r3, [r5, #0]
 8008382:	b103      	cbz	r3, 8008386 <_sbrk_r+0x1a>
 8008384:	6023      	str	r3, [r4, #0]
 8008386:	bd38      	pop	{r3, r4, r5, pc}
 8008388:	240002b4 	.word	0x240002b4

0800838c <memcpy>:
 800838c:	440a      	add	r2, r1
 800838e:	4291      	cmp	r1, r2
 8008390:	f100 33ff 	add.w	r3, r0, #4294967295
 8008394:	d100      	bne.n	8008398 <memcpy+0xc>
 8008396:	4770      	bx	lr
 8008398:	b510      	push	{r4, lr}
 800839a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800839e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a2:	4291      	cmp	r1, r2
 80083a4:	d1f9      	bne.n	800839a <memcpy+0xe>
 80083a6:	bd10      	pop	{r4, pc}

080083a8 <_realloc_r>:
 80083a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ac:	4680      	mov	r8, r0
 80083ae:	4615      	mov	r5, r2
 80083b0:	460c      	mov	r4, r1
 80083b2:	b921      	cbnz	r1, 80083be <_realloc_r+0x16>
 80083b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083b8:	4611      	mov	r1, r2
 80083ba:	f7ff bc4b 	b.w	8007c54 <_malloc_r>
 80083be:	b92a      	cbnz	r2, 80083cc <_realloc_r+0x24>
 80083c0:	f7ff fbdc 	bl	8007b7c <_free_r>
 80083c4:	2400      	movs	r4, #0
 80083c6:	4620      	mov	r0, r4
 80083c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083cc:	f000 f81a 	bl	8008404 <_malloc_usable_size_r>
 80083d0:	4285      	cmp	r5, r0
 80083d2:	4606      	mov	r6, r0
 80083d4:	d802      	bhi.n	80083dc <_realloc_r+0x34>
 80083d6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083da:	d8f4      	bhi.n	80083c6 <_realloc_r+0x1e>
 80083dc:	4629      	mov	r1, r5
 80083de:	4640      	mov	r0, r8
 80083e0:	f7ff fc38 	bl	8007c54 <_malloc_r>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2800      	cmp	r0, #0
 80083e8:	d0ec      	beq.n	80083c4 <_realloc_r+0x1c>
 80083ea:	42b5      	cmp	r5, r6
 80083ec:	462a      	mov	r2, r5
 80083ee:	4621      	mov	r1, r4
 80083f0:	bf28      	it	cs
 80083f2:	4632      	movcs	r2, r6
 80083f4:	f7ff ffca 	bl	800838c <memcpy>
 80083f8:	4621      	mov	r1, r4
 80083fa:	4640      	mov	r0, r8
 80083fc:	f7ff fbbe 	bl	8007b7c <_free_r>
 8008400:	463c      	mov	r4, r7
 8008402:	e7e0      	b.n	80083c6 <_realloc_r+0x1e>

08008404 <_malloc_usable_size_r>:
 8008404:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008408:	1f18      	subs	r0, r3, #4
 800840a:	2b00      	cmp	r3, #0
 800840c:	bfbc      	itt	lt
 800840e:	580b      	ldrlt	r3, [r1, r0]
 8008410:	18c0      	addlt	r0, r0, r3
 8008412:	4770      	bx	lr

08008414 <_init>:
 8008414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008416:	bf00      	nop
 8008418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841a:	bc08      	pop	{r3}
 800841c:	469e      	mov	lr, r3
 800841e:	4770      	bx	lr

08008420 <_fini>:
 8008420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008422:	bf00      	nop
 8008424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008426:	bc08      	pop	{r3}
 8008428:	469e      	mov	lr, r3
 800842a:	4770      	bx	lr
