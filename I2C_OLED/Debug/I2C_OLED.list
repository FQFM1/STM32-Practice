
I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fa4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800423c  0800423c  0000523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800424c  0800424c  0000524c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08004250  08004250  00005250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08004254  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000474  24000010  08004264  00006010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000484  08004264  00006484  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000cde6  00000000  00000000  0000603e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001e88  00000000  00000000  00012e24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a80  00000000  00000000  00014cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 000007f1  00000000  00000000  00015730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035513  00000000  00000000  00015f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000f50c  00000000  00000000  0004b434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014f83c  00000000  00000000  0005a940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  001aa17c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000029b4  00000000  00000000  001aa1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000005a  00000000  00000000  001acb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004224 	.word	0x08004224

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004224 	.word	0x08004224

080002d8 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002de:	4b19      	ldr	r3, [pc, #100]	@ (8000344 <MX_GPIO_Init+0x6c>)
 80002e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002e4:	4a17      	ldr	r2, [pc, #92]	@ (8000344 <MX_GPIO_Init+0x6c>)
 80002e6:	f043 0304 	orr.w	r3, r3, #4
 80002ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80002ee:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <MX_GPIO_Init+0x6c>)
 80002f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80002f4:	f003 0304 	and.w	r3, r3, #4
 80002f8:	60fb      	str	r3, [r7, #12]
 80002fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_GPIO_Init+0x6c>)
 80002fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000302:	4a10      	ldr	r2, [pc, #64]	@ (8000344 <MX_GPIO_Init+0x6c>)
 8000304:	f043 0302 	orr.w	r3, r3, #2
 8000308:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800030c:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <MX_GPIO_Init+0x6c>)
 800030e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
 8000318:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800031a:	4b0a      	ldr	r3, [pc, #40]	@ (8000344 <MX_GPIO_Init+0x6c>)
 800031c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000320:	4a08      	ldr	r2, [pc, #32]	@ (8000344 <MX_GPIO_Init+0x6c>)
 8000322:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000326:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800032a:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_GPIO_Init+0x6c>)
 800032c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000334:	607b      	str	r3, [r7, #4]
 8000336:	687b      	ldr	r3, [r7, #4]

}
 8000338:	bf00      	nop
 800033a:	3714      	adds	r7, #20
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	58024400 	.word	0x58024400

08000348 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800034c:	4b1c      	ldr	r3, [pc, #112]	@ (80003c0 <MX_I2C1_Init+0x78>)
 800034e:	4a1d      	ldr	r2, [pc, #116]	@ (80003c4 <MX_I2C1_Init+0x7c>)
 8000350:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0050174F;
 8000352:	4b1b      	ldr	r3, [pc, #108]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000354:	4a1c      	ldr	r2, [pc, #112]	@ (80003c8 <MX_I2C1_Init+0x80>)
 8000356:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000358:	4b19      	ldr	r3, [pc, #100]	@ (80003c0 <MX_I2C1_Init+0x78>)
 800035a:	2200      	movs	r2, #0
 800035c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800035e:	4b18      	ldr	r3, [pc, #96]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000360:	2201      	movs	r2, #1
 8000362:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000364:	4b16      	ldr	r3, [pc, #88]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000366:	2200      	movs	r2, #0
 8000368:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800036a:	4b15      	ldr	r3, [pc, #84]	@ (80003c0 <MX_I2C1_Init+0x78>)
 800036c:	2200      	movs	r2, #0
 800036e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000370:	4b13      	ldr	r3, [pc, #76]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000372:	2200      	movs	r2, #0
 8000374:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000376:	4b12      	ldr	r3, [pc, #72]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000378:	2200      	movs	r2, #0
 800037a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800037c:	4b10      	ldr	r3, [pc, #64]	@ (80003c0 <MX_I2C1_Init+0x78>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000382:	480f      	ldr	r0, [pc, #60]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000384:	f000 ff66 	bl	8001254 <HAL_I2C_Init>
 8000388:	4603      	mov	r3, r0
 800038a:	2b00      	cmp	r3, #0
 800038c:	d001      	beq.n	8000392 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800038e:	f000 f98b 	bl	80006a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000392:	2100      	movs	r1, #0
 8000394:	480a      	ldr	r0, [pc, #40]	@ (80003c0 <MX_I2C1_Init+0x78>)
 8000396:	f001 fb2b 	bl	80019f0 <HAL_I2CEx_ConfigAnalogFilter>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80003a0:	f000 f982 	bl	80006a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80003a4:	2100      	movs	r1, #0
 80003a6:	4806      	ldr	r0, [pc, #24]	@ (80003c0 <MX_I2C1_Init+0x78>)
 80003a8:	f001 fb6d 	bl	8001a86 <HAL_I2CEx_ConfigDigitalFilter>
 80003ac:	4603      	mov	r3, r0
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d001      	beq.n	80003b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80003b2:	f000 f979 	bl	80006a8 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80003b6:	2001      	movs	r0, #1
 80003b8:	f001 fbb2 	bl	8001b20 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003bc:	bf00      	nop
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	2400002c 	.word	0x2400002c
 80003c4:	40005400 	.word	0x40005400
 80003c8:	0050174f 	.word	0x0050174f

080003cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b0ba      	sub	sp, #232	@ 0xe8
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
 80003e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80003e4:	f107 0310 	add.w	r3, r7, #16
 80003e8:	22c0      	movs	r2, #192	@ 0xc0
 80003ea:	2100      	movs	r1, #0
 80003ec:	4618      	mov	r0, r3
 80003ee:	f003 feed 	bl	80041cc <memset>
  if(i2cHandle->Instance==I2C1)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4a27      	ldr	r2, [pc, #156]	@ (8000494 <HAL_I2C_MspInit+0xc8>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d146      	bne.n	800048a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80003fc:	f04f 0208 	mov.w	r2, #8
 8000400:	f04f 0300 	mov.w	r3, #0
 8000404:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000408:	2300      	movs	r3, #0
 800040a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	4618      	mov	r0, r3
 8000414:	f002 fb6c 	bl	8002af0 <HAL_RCCEx_PeriphCLKConfig>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800041e:	f000 f943 	bl	80006a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000422:	4b1d      	ldr	r3, [pc, #116]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 8000424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000428:	4a1b      	ldr	r2, [pc, #108]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 800042a:	f043 0302 	orr.w	r3, r3, #2
 800042e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000432:	4b19      	ldr	r3, [pc, #100]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 8000434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000438:	f003 0302 	and.w	r3, r3, #2
 800043c:	60fb      	str	r3, [r7, #12]
 800043e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000440:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000444:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000448:	2312      	movs	r3, #18
 800044a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044e:	2300      	movs	r3, #0
 8000450:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000454:	2300      	movs	r3, #0
 8000456:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800045a:	2304      	movs	r3, #4
 800045c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000460:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000464:	4619      	mov	r1, r3
 8000466:	480d      	ldr	r0, [pc, #52]	@ (800049c <HAL_I2C_MspInit+0xd0>)
 8000468:	f000 fd44 	bl	8000ef4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800046c:	4b0a      	ldr	r3, [pc, #40]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 800046e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000472:	4a09      	ldr	r2, [pc, #36]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 8000474:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000478:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800047c:	4b06      	ldr	r3, [pc, #24]	@ (8000498 <HAL_I2C_MspInit+0xcc>)
 800047e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000482:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000486:	60bb      	str	r3, [r7, #8]
 8000488:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800048a:	bf00      	nop
 800048c:	37e8      	adds	r7, #232	@ 0xe8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	40005400 	.word	0x40005400
 8000498:	58024400 	.word	0x58024400
 800049c:	58020400 	.word	0x58020400

080004a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80004a6:	f000 f8d3 	bl	8000650 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004aa:	f000 fb05 	bl	8000ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ae:	f000 f81f 	bl	80004f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004b2:	f7ff ff11 	bl	80002d8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004b6:	f7ff ff47 	bl	8000348 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(20);
 80004ba:	2014      	movs	r0, #20
 80004bc:	f000 fb8e 	bl	8000bdc <HAL_Delay>
  OLED_Init();
 80004c0:	f000 f96c 	bl	800079c <OLED_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(uint8_t i = 0; i < 64; i++)
 80004c4:	2300      	movs	r3, #0
 80004c6:	71fb      	strb	r3, [r7, #7]
 80004c8:	e00e      	b.n	80004e8 <main+0x48>
	  {
		  OLED_NewFrame();
 80004ca:	f000 f90d 	bl	80006e8 <OLED_NewFrame>
		  OLED_SetPixel(2 * i, i);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	b2db      	uxtb	r3, r3
 80004d4:	79fa      	ldrb	r2, [r7, #7]
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f9bb 	bl	8000854 <OLED_SetPixel>
		  OLED_ShowFrame();
 80004de:	f000 f90f 	bl	8000700 <OLED_ShowFrame>
	  for(uint8_t i = 0; i < 64; i++)
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	3301      	adds	r3, #1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	79fb      	ldrb	r3, [r7, #7]
 80004ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80004ec:	d9ed      	bls.n	80004ca <main+0x2a>
 80004ee:	e7e9      	b.n	80004c4 <main+0x24>

080004f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b09e      	sub	sp, #120	@ 0x78
 80004f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80004fa:	224c      	movs	r2, #76	@ 0x4c
 80004fc:	2100      	movs	r1, #0
 80004fe:	4618      	mov	r0, r3
 8000500:	f003 fe64 	bl	80041cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000504:	f107 030c 	add.w	r3, r7, #12
 8000508:	2220      	movs	r2, #32
 800050a:	2100      	movs	r1, #0
 800050c:	4618      	mov	r0, r3
 800050e:	f003 fe5d 	bl	80041cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000512:	2002      	movs	r0, #2
 8000514:	f001 fb28 	bl	8001b68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b49      	ldr	r3, [pc, #292]	@ (8000644 <SystemClock_Config+0x154>)
 800051e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000520:	4a48      	ldr	r2, [pc, #288]	@ (8000644 <SystemClock_Config+0x154>)
 8000522:	f023 0301 	bic.w	r3, r3, #1
 8000526:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000528:	4b46      	ldr	r3, [pc, #280]	@ (8000644 <SystemClock_Config+0x154>)
 800052a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800052c:	f003 0301 	and.w	r3, r3, #1
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	4b45      	ldr	r3, [pc, #276]	@ (8000648 <SystemClock_Config+0x158>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	4a44      	ldr	r2, [pc, #272]	@ (8000648 <SystemClock_Config+0x158>)
 8000538:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800053c:	6193      	str	r3, [r2, #24]
 800053e:	4b42      	ldr	r3, [pc, #264]	@ (8000648 <SystemClock_Config+0x158>)
 8000540:	699b      	ldr	r3, [r3, #24]
 8000542:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000546:	60bb      	str	r3, [r7, #8]
 8000548:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800054a:	bf00      	nop
 800054c:	4b3e      	ldr	r3, [pc, #248]	@ (8000648 <SystemClock_Config+0x158>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000558:	d1f8      	bne.n	800054c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055a:	4b3c      	ldr	r3, [pc, #240]	@ (800064c <SystemClock_Config+0x15c>)
 800055c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000560:	4a3a      	ldr	r2, [pc, #232]	@ (800064c <SystemClock_Config+0x15c>)
 8000562:	f043 0302 	orr.w	r3, r3, #2
 8000566:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800056a:	4b38      	ldr	r3, [pc, #224]	@ (800064c <SystemClock_Config+0x15c>)
 800056c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000570:	f003 0302 	and.w	r3, r3, #2
 8000574:	607b      	str	r3, [r7, #4]
 8000576:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000578:	2300      	movs	r3, #0
 800057a:	603b      	str	r3, [r7, #0]
 800057c:	4b32      	ldr	r3, [pc, #200]	@ (8000648 <SystemClock_Config+0x158>)
 800057e:	699b      	ldr	r3, [r3, #24]
 8000580:	4a31      	ldr	r2, [pc, #196]	@ (8000648 <SystemClock_Config+0x158>)
 8000582:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000586:	6193      	str	r3, [r2, #24]
 8000588:	4b2f      	ldr	r3, [pc, #188]	@ (8000648 <SystemClock_Config+0x158>)
 800058a:	699b      	ldr	r3, [r3, #24]
 800058c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	4b2c      	ldr	r3, [pc, #176]	@ (8000644 <SystemClock_Config+0x154>)
 8000594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000596:	4a2b      	ldr	r2, [pc, #172]	@ (8000644 <SystemClock_Config+0x154>)
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800059e:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <SystemClock_Config+0x154>)
 80005a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005aa:	bf00      	nop
 80005ac:	4b26      	ldr	r3, [pc, #152]	@ (8000648 <SystemClock_Config+0x158>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80005b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80005b8:	d1f8      	bne.n	80005ac <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005be:	2301      	movs	r3, #1
 80005c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c2:	2340      	movs	r3, #64	@ 0x40
 80005c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c6:	2302      	movs	r3, #2
 80005c8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ca:	2300      	movs	r3, #0
 80005cc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80005d2:	233c      	movs	r3, #60	@ 0x3c
 80005d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005da:	2302      	movs	r3, #2
 80005dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005de:	2302      	movs	r3, #2
 80005e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005e2:	230c      	movs	r3, #12
 80005e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80005e6:	2300      	movs	r3, #0
 80005e8:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 faf2 	bl	8001bdc <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80005fe:	f000 f853 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	233f      	movs	r3, #63	@ 0x3f
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800060e:	2308      	movs	r3, #8
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000612:	2340      	movs	r3, #64	@ 0x40
 8000614:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000616:	2340      	movs	r3, #64	@ 0x40
 8000618:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800061a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800061e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000620:	2340      	movs	r3, #64	@ 0x40
 8000622:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2104      	movs	r1, #4
 800062a:	4618      	mov	r0, r3
 800062c:	f001 ff30 	bl	8002490 <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000636:	f000 f837 	bl	80006a8 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3778      	adds	r7, #120	@ 0x78
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	58000400 	.word	0x58000400
 8000648:	58024800 	.word	0x58024800
 800064c:	58024400 	.word	0x58024400

08000650 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000662:	f000 fbcf 	bl	8000e04 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000666:	2301      	movs	r3, #1
 8000668:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800066a:	2300      	movs	r3, #0
 800066c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000672:	231f      	movs	r3, #31
 8000674:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000676:	2387      	movs	r3, #135	@ 0x87
 8000678:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800067a:	2300      	movs	r3, #0
 800067c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800067e:	2300      	movs	r3, #0
 8000680:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000682:	2301      	movs	r3, #1
 8000684:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000686:	2301      	movs	r3, #1
 8000688:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800068a:	2300      	movs	r3, #0
 800068c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000692:	463b      	mov	r3, r7
 8000694:	4618      	mov	r0, r3
 8000696:	f000 fbed 	bl	8000e74 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800069a:	2004      	movs	r0, #4
 800069c:	f000 fbca 	bl	8000e34 <HAL_MPU_Enable>

}
 80006a0:	bf00      	nop
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	bf00      	nop
 80006b2:	e7fd      	b.n	80006b0 <Error_Handler+0x8>

080006b4 <OLED_SendCmd>:
#define OLED_ADDRESS 0x78

uint8_t GRAM[8][128];

void OLED_SendCmd(uint8_t cmd)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af02      	add	r7, sp, #8
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer[2];
	sendBuffer[0] = 0x00;
 80006be:	2300      	movs	r3, #0
 80006c0:	733b      	strb	r3, [r7, #12]
	sendBuffer[1] = cmd;
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 80006c6:	f107 020c 	add.w	r2, r7, #12
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
 80006ce:	9300      	str	r3, [sp, #0]
 80006d0:	2302      	movs	r3, #2
 80006d2:	2178      	movs	r1, #120	@ 0x78
 80006d4:	4803      	ldr	r0, [pc, #12]	@ (80006e4 <OLED_SendCmd+0x30>)
 80006d6:	f000 fe59 	bl	800138c <HAL_I2C_Master_Transmit>
}
 80006da:	bf00      	nop
 80006dc:	3710      	adds	r7, #16
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	2400002c 	.word	0x2400002c

080006e8 <OLED_NewFrame>:

void OLED_NewFrame()
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
//		for(uint8_t j = 0; j < 8; j++)
//		{
//			GRAM[i][j] = 0;
//		}
//	}
	memset(GRAM, 0, sizeof(GRAM));
 80006ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80006f0:	2100      	movs	r1, #0
 80006f2:	4802      	ldr	r0, [pc, #8]	@ (80006fc <OLED_NewFrame+0x14>)
 80006f4:	f003 fd6a 	bl	80041cc <memset>
}
 80006f8:	bf00      	nop
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	24000080 	.word	0x24000080

08000700 <OLED_ShowFrame>:

void OLED_ShowFrame()
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b0a4      	sub	sp, #144	@ 0x90
 8000704:	af02      	add	r7, sp, #8
	uint8_t sendBuffer[129];
	sendBuffer[0] = 0x40;
 8000706:	2340      	movs	r3, #64	@ 0x40
 8000708:	713b      	strb	r3, [r7, #4]
	for(uint8_t i = 0; i < 8; i++)
 800070a:	2300      	movs	r3, #0
 800070c:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000710:	e037      	b.n	8000782 <OLED_ShowFrame+0x82>
	{
		for(uint8_t j = 0; j < 128; j++)
 8000712:	2300      	movs	r3, #0
 8000714:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8000718:	e014      	b.n	8000744 <OLED_ShowFrame+0x44>
		{
			sendBuffer[j + 1] = GRAM[i][j];
 800071a:	f897 1087 	ldrb.w	r1, [r7, #135]	@ 0x87
 800071e:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 8000722:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 8000726:	3301      	adds	r3, #1
 8000728:	481a      	ldr	r0, [pc, #104]	@ (8000794 <OLED_ShowFrame+0x94>)
 800072a:	01c9      	lsls	r1, r1, #7
 800072c:	4401      	add	r1, r0
 800072e:	440a      	add	r2, r1
 8000730:	7812      	ldrb	r2, [r2, #0]
 8000732:	3388      	adds	r3, #136	@ 0x88
 8000734:	443b      	add	r3, r7
 8000736:	f803 2c84 	strb.w	r2, [r3, #-132]
		for(uint8_t j = 0; j < 128; j++)
 800073a:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800073e:	3301      	adds	r3, #1
 8000740:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 8000744:	f997 3086 	ldrsb.w	r3, [r7, #134]	@ 0x86
 8000748:	2b00      	cmp	r3, #0
 800074a:	dae6      	bge.n	800071a <OLED_ShowFrame+0x1a>
		}
		OLED_SendCmd(0xB0 + i);
 800074c:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000750:	3b50      	subs	r3, #80	@ 0x50
 8000752:	b2db      	uxtb	r3, r3
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ffad 	bl	80006b4 <OLED_SendCmd>
		OLED_SendCmd(0x00);
 800075a:	2000      	movs	r0, #0
 800075c:	f7ff ffaa 	bl	80006b4 <OLED_SendCmd>
		OLED_SendCmd(0x10);
 8000760:	2010      	movs	r0, #16
 8000762:	f7ff ffa7 	bl	80006b4 <OLED_SendCmd>
		HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
 8000766:	1d3a      	adds	r2, r7, #4
 8000768:	f04f 33ff 	mov.w	r3, #4294967295
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	2381      	movs	r3, #129	@ 0x81
 8000770:	2178      	movs	r1, #120	@ 0x78
 8000772:	4809      	ldr	r0, [pc, #36]	@ (8000798 <OLED_ShowFrame+0x98>)
 8000774:	f000 fe0a 	bl	800138c <HAL_I2C_Master_Transmit>
	for(uint8_t i = 0; i < 8; i++)
 8000778:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800077c:	3301      	adds	r3, #1
 800077e:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8000782:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 8000786:	2b07      	cmp	r3, #7
 8000788:	d9c3      	bls.n	8000712 <OLED_ShowFrame+0x12>
	}
}
 800078a:	bf00      	nop
 800078c:	bf00      	nop
 800078e:	3788      	adds	r7, #136	@ 0x88
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24000080 	.word	0x24000080
 8000798:	2400002c 	.word	0x2400002c

0800079c <OLED_Init>:

void OLED_Init()
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	OLED_SendCmd(0xAE); /*关闭显示 display off*/
 80007a0:	20ae      	movs	r0, #174	@ 0xae
 80007a2:	f7ff ff87 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x20);
 80007a6:	2020      	movs	r0, #32
 80007a8:	f7ff ff84 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x10);
 80007ac:	2010      	movs	r0, #16
 80007ae:	f7ff ff81 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xB0);
 80007b2:	20b0      	movs	r0, #176	@ 0xb0
 80007b4:	f7ff ff7e 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xC8);
 80007b8:	20c8      	movs	r0, #200	@ 0xc8
 80007ba:	f7ff ff7b 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x00);
 80007be:	2000      	movs	r0, #0
 80007c0:	f7ff ff78 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x10);
 80007c4:	2010      	movs	r0, #16
 80007c6:	f7ff ff75 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x40);
 80007ca:	2040      	movs	r0, #64	@ 0x40
 80007cc:	f7ff ff72 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x81);
 80007d0:	2081      	movs	r0, #129	@ 0x81
 80007d2:	f7ff ff6f 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xDF);
 80007d6:	20df      	movs	r0, #223	@ 0xdf
 80007d8:	f7ff ff6c 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0xA1);
 80007dc:	20a1      	movs	r0, #161	@ 0xa1
 80007de:	f7ff ff69 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xA6);
 80007e2:	20a6      	movs	r0, #166	@ 0xa6
 80007e4:	f7ff ff66 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0xA8);
 80007e8:	20a8      	movs	r0, #168	@ 0xa8
 80007ea:	f7ff ff63 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x3F);
 80007ee:	203f      	movs	r0, #63	@ 0x3f
 80007f0:	f7ff ff60 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xA4);
 80007f4:	20a4      	movs	r0, #164	@ 0xa4
 80007f6:	f7ff ff5d 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xD3);
 80007fa:	20d3      	movs	r0, #211	@ 0xd3
 80007fc:	f7ff ff5a 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x00);
 8000800:	2000      	movs	r0, #0
 8000802:	f7ff ff57 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xD5);
 8000806:	20d5      	movs	r0, #213	@ 0xd5
 8000808:	f7ff ff54 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0xF0);
 800080c:	20f0      	movs	r0, #240	@ 0xf0
 800080e:	f7ff ff51 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xD9);
 8000812:	20d9      	movs	r0, #217	@ 0xd9
 8000814:	f7ff ff4e 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x22);
 8000818:	2022      	movs	r0, #34	@ 0x22
 800081a:	f7ff ff4b 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xDA);
 800081e:	20da      	movs	r0, #218	@ 0xda
 8000820:	f7ff ff48 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x12);
 8000824:	2012      	movs	r0, #18
 8000826:	f7ff ff45 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0xDB);
 800082a:	20db      	movs	r0, #219	@ 0xdb
 800082c:	f7ff ff42 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x20);
 8000830:	2020      	movs	r0, #32
 8000832:	f7ff ff3f 	bl	80006b4 <OLED_SendCmd>

	OLED_SendCmd(0x8D);
 8000836:	208d      	movs	r0, #141	@ 0x8d
 8000838:	f7ff ff3c 	bl	80006b4 <OLED_SendCmd>
	OLED_SendCmd(0x14);
 800083c:	2014      	movs	r0, #20
 800083e:	f7ff ff39 	bl	80006b4 <OLED_SendCmd>

	OLED_NewFrame();
 8000842:	f7ff ff51 	bl	80006e8 <OLED_NewFrame>
	OLED_ShowFrame();
 8000846:	f7ff ff5b 	bl	8000700 <OLED_ShowFrame>

	OLED_SendCmd(0xAF); /*开启显示 display ON*/
 800084a:	20af      	movs	r0, #175	@ 0xaf
 800084c:	f7ff ff32 	bl	80006b4 <OLED_SendCmd>
}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}

08000854 <OLED_SetPixel>:
	uint8_t sendBuffer[] = { 0x40, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA, 0xAA };
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, sendBuffer, sizeof(sendBuffer), HAL_MAX_DELAY);
}

void OLED_SetPixel(uint8_t x, uint8_t y)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	460a      	mov	r2, r1
 800085e:	71fb      	strb	r3, [r7, #7]
 8000860:	4613      	mov	r3, r2
 8000862:	71bb      	strb	r3, [r7, #6]
	if(x >= 128 || y >= 64)
 8000864:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000868:	2b00      	cmp	r3, #0
 800086a:	db20      	blt.n	80008ae <OLED_SetPixel+0x5a>
 800086c:	79bb      	ldrb	r3, [r7, #6]
 800086e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000870:	d81d      	bhi.n	80008ae <OLED_SetPixel+0x5a>
	{
		return;
	}
	GRAM[y / 8][x] |= 0x01 << (y % 8);
 8000872:	79bb      	ldrb	r3, [r7, #6]
 8000874:	08db      	lsrs	r3, r3, #3
 8000876:	b2d8      	uxtb	r0, r3
 8000878:	4602      	mov	r2, r0
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	490f      	ldr	r1, [pc, #60]	@ (80008bc <OLED_SetPixel+0x68>)
 800087e:	01d2      	lsls	r2, r2, #7
 8000880:	440a      	add	r2, r1
 8000882:	4413      	add	r3, r2
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b25a      	sxtb	r2, r3
 8000888:	79bb      	ldrb	r3, [r7, #6]
 800088a:	f003 0307 	and.w	r3, r3, #7
 800088e:	2101      	movs	r1, #1
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	b25b      	sxtb	r3, r3
 8000896:	4313      	orrs	r3, r2
 8000898:	b259      	sxtb	r1, r3
 800089a:	4602      	mov	r2, r0
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	b2c8      	uxtb	r0, r1
 80008a0:	4906      	ldr	r1, [pc, #24]	@ (80008bc <OLED_SetPixel+0x68>)
 80008a2:	01d2      	lsls	r2, r2, #7
 80008a4:	440a      	add	r2, r1
 80008a6:	4413      	add	r3, r2
 80008a8:	4602      	mov	r2, r0
 80008aa:	701a      	strb	r2, [r3, #0]
 80008ac:	e000      	b.n	80008b0 <OLED_SetPixel+0x5c>
		return;
 80008ae:	bf00      	nop
}
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	24000080 	.word	0x24000080

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <HAL_MspInit+0x30>)
 80008c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008cc:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <HAL_MspInit+0x30>)
 80008ce:	f043 0302 	orr.w	r3, r3, #2
 80008d2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <HAL_MspInit+0x30>)
 80008d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008dc:	f003 0302 	and.w	r3, r3, #2
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	58024400 	.word	0x58024400

080008f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <NMI_Handler+0x4>

080008fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <HardFault_Handler+0x4>

08000904 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <MemManage_Handler+0x4>

0800090c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	bf00      	nop
 800091a:	e7fd      	b.n	8000918 <UsageFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr

08000946 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800094a:	f000 f927 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000958:	4b37      	ldr	r3, [pc, #220]	@ (8000a38 <SystemInit+0xe4>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800095e:	4a36      	ldr	r2, [pc, #216]	@ (8000a38 <SystemInit+0xe4>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000968:	4b34      	ldr	r3, [pc, #208]	@ (8000a3c <SystemInit+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f003 030f 	and.w	r3, r3, #15
 8000970:	2b06      	cmp	r3, #6
 8000972:	d807      	bhi.n	8000984 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000974:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <SystemInit+0xe8>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	f023 030f 	bic.w	r3, r3, #15
 800097c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a3c <SystemInit+0xe8>)
 800097e:	f043 0307 	orr.w	r3, r3, #7
 8000982:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000984:	4b2e      	ldr	r3, [pc, #184]	@ (8000a40 <SystemInit+0xec>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a2d      	ldr	r2, [pc, #180]	@ (8000a40 <SystemInit+0xec>)
 800098a:	f043 0301 	orr.w	r3, r3, #1
 800098e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000990:	4b2b      	ldr	r3, [pc, #172]	@ (8000a40 <SystemInit+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000996:	4b2a      	ldr	r3, [pc, #168]	@ (8000a40 <SystemInit+0xec>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4929      	ldr	r1, [pc, #164]	@ (8000a40 <SystemInit+0xec>)
 800099c:	4b29      	ldr	r3, [pc, #164]	@ (8000a44 <SystemInit+0xf0>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009a2:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <SystemInit+0xe8>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f003 0308 	and.w	r3, r3, #8
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d007      	beq.n	80009be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ae:	4b23      	ldr	r3, [pc, #140]	@ (8000a3c <SystemInit+0xe8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f023 030f 	bic.w	r3, r3, #15
 80009b6:	4a21      	ldr	r2, [pc, #132]	@ (8000a3c <SystemInit+0xe8>)
 80009b8:	f043 0307 	orr.w	r3, r3, #7
 80009bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009be:	4b20      	ldr	r3, [pc, #128]	@ (8000a40 <SystemInit+0xec>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a40 <SystemInit+0xec>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	@ (8000a40 <SystemInit+0xec>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a40 <SystemInit+0xec>)
 80009d2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a48 <SystemInit+0xf4>)
 80009d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a40 <SystemInit+0xec>)
 80009d8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a4c <SystemInit+0xf8>)
 80009da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009dc:	4b18      	ldr	r3, [pc, #96]	@ (8000a40 <SystemInit+0xec>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <SystemInit+0xfc>)
 80009e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80009e2:	4b17      	ldr	r3, [pc, #92]	@ (8000a40 <SystemInit+0xec>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80009e8:	4b15      	ldr	r3, [pc, #84]	@ (8000a40 <SystemInit+0xec>)
 80009ea:	4a19      	ldr	r2, [pc, #100]	@ (8000a50 <SystemInit+0xfc>)
 80009ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80009ee:	4b14      	ldr	r3, [pc, #80]	@ (8000a40 <SystemInit+0xec>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80009f4:	4b12      	ldr	r3, [pc, #72]	@ (8000a40 <SystemInit+0xec>)
 80009f6:	4a16      	ldr	r2, [pc, #88]	@ (8000a50 <SystemInit+0xfc>)
 80009f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80009fa:	4b11      	ldr	r3, [pc, #68]	@ (8000a40 <SystemInit+0xec>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a00:	4b0f      	ldr	r3, [pc, #60]	@ (8000a40 <SystemInit+0xec>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	@ (8000a40 <SystemInit+0xec>)
 8000a06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a40 <SystemInit+0xec>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a12:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <SystemInit+0x100>)
 8000a14:	681a      	ldr	r2, [r3, #0]
 8000a16:	4b10      	ldr	r3, [pc, #64]	@ (8000a58 <SystemInit+0x104>)
 8000a18:	4013      	ands	r3, r2
 8000a1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a1e:	d202      	bcs.n	8000a26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a20:	4b0e      	ldr	r3, [pc, #56]	@ (8000a5c <SystemInit+0x108>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	@ (8000a60 <SystemInit+0x10c>)
 8000a28:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a2c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a2e:	bf00      	nop
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	e000ed00 	.word	0xe000ed00
 8000a3c:	52002000 	.word	0x52002000
 8000a40:	58024400 	.word	0x58024400
 8000a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a48:	02020200 	.word	0x02020200
 8000a4c:	01ff0000 	.word	0x01ff0000
 8000a50:	01010280 	.word	0x01010280
 8000a54:	5c001000 	.word	0x5c001000
 8000a58:	ffff0000 	.word	0xffff0000
 8000a5c:	51008108 	.word	0x51008108
 8000a60:	52004000 	.word	0x52004000

08000a64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a68:	f7ff ff74 	bl	8000954 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a6c:	480c      	ldr	r0, [pc, #48]	@ (8000aa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6e:	490d      	ldr	r1, [pc, #52]	@ (8000aa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a70:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a74:	e002      	b.n	8000a7c <LoopCopyDataInit>

08000a76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7a:	3304      	adds	r3, #4

08000a7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a80:	d3f9      	bcc.n	8000a76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a84:	4c0a      	ldr	r4, [pc, #40]	@ (8000ab0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a88:	e001      	b.n	8000a8e <LoopFillZerobss>

08000a8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8c:	3204      	adds	r2, #4

08000a8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a90:	d3fb      	bcc.n	8000a8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 fba3 	bl	80041dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a96:	f7ff fd03 	bl	80004a0 <main>
  bx  lr
 8000a9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000aa0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000aa4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000aa8:	08004254 	.word	0x08004254
  ldr r2, =_sbss
 8000aac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ab0:	24000484 	.word	0x24000484

08000ab4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC3_IRQHandler>
	...

08000ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000abe:	2003      	movs	r0, #3
 8000ac0:	f000 f96e 	bl	8000da0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ac4:	f001 fe9a 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8000ac8:	4602      	mov	r2, r0
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <HAL_Init+0x68>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	0a1b      	lsrs	r3, r3, #8
 8000ad0:	f003 030f 	and.w	r3, r3, #15
 8000ad4:	4913      	ldr	r1, [pc, #76]	@ (8000b24 <HAL_Init+0x6c>)
 8000ad6:	5ccb      	ldrb	r3, [r1, r3]
 8000ad8:	f003 031f 	and.w	r3, r3, #31
 8000adc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ae0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <HAL_Init+0x68>)
 8000ae4:	699b      	ldr	r3, [r3, #24]
 8000ae6:	f003 030f 	and.w	r3, r3, #15
 8000aea:	4a0e      	ldr	r2, [pc, #56]	@ (8000b24 <HAL_Init+0x6c>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	f003 031f 	and.w	r3, r3, #31
 8000af2:	687a      	ldr	r2, [r7, #4]
 8000af4:	fa22 f303 	lsr.w	r3, r2, r3
 8000af8:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <HAL_Init+0x70>)
 8000afa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000afc:	4a0b      	ldr	r2, [pc, #44]	@ (8000b2c <HAL_Init+0x74>)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b02:	200f      	movs	r0, #15
 8000b04:	f000 f814 	bl	8000b30 <HAL_InitTick>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e002      	b.n	8000b18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b12:	f7ff fed5 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b16:	2300      	movs	r3, #0
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	58024400 	.word	0x58024400
 8000b24:	0800423c 	.word	0x0800423c
 8000b28:	24000004 	.word	0x24000004
 8000b2c:	24000000 	.word	0x24000000

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b38:	4b15      	ldr	r3, [pc, #84]	@ (8000b90 <HAL_InitTick+0x60>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d101      	bne.n	8000b44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000b40:	2301      	movs	r3, #1
 8000b42:	e021      	b.n	8000b88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000b44:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <HAL_InitTick+0x64>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b11      	ldr	r3, [pc, #68]	@ (8000b90 <HAL_InitTick+0x60>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f945 	bl	8000dea <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f91d 	bl	8000db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	@ (8000b98 <HAL_InitTick+0x68>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	2400000c 	.word	0x2400000c
 8000b94:	24000000 	.word	0x24000000
 8000b98:	24000008 	.word	0x24000008

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	@ (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	2400000c 	.word	0x2400000c
 8000bc0:	24000480 	.word	0x24000480

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	@ (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	24000480 	.word	0x24000480

08000bdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be4:	f7ff ffee 	bl	8000bc4 <HAL_GetTick>
 8000be8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf4:	d005      	beq.n	8000c02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bf6:	4b0a      	ldr	r3, [pc, #40]	@ (8000c20 <HAL_Delay+0x44>)
 8000bf8:	781b      	ldrb	r3, [r3, #0]
 8000bfa:	461a      	mov	r2, r3
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	4413      	add	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c02:	bf00      	nop
 8000c04:	f7ff ffde 	bl	8000bc4 <HAL_GetTick>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	68fa      	ldr	r2, [r7, #12]
 8000c10:	429a      	cmp	r2, r3
 8000c12:	d8f7      	bhi.n	8000c04 <HAL_Delay+0x28>
  {
  }
}
 8000c14:	bf00      	nop
 8000c16:	bf00      	nop
 8000c18:	3710      	adds	r7, #16
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2400000c 	.word	0x2400000c

08000c24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c28:	4b03      	ldr	r3, [pc, #12]	@ (8000c38 <HAL_GetREVID+0x14>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	0c1b      	lsrs	r3, r3, #16
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	5c001000 	.word	0x5c001000

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c64:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c66:	4313      	orrs	r3, r2
 8000c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6a:	4a04      	ldr	r2, [pc, #16]	@ (8000c7c <__NVIC_SetPriorityGrouping+0x40>)
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	60d3      	str	r3, [r2, #12]
}
 8000c70:	bf00      	nop
 8000c72:	3714      	adds	r7, #20
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr
 8000c7c:	e000ed00 	.word	0xe000ed00
 8000c80:	05fa0000 	.word	0x05fa0000

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	6039      	str	r1, [r7, #0]
 8000caa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	db0a      	blt.n	8000cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2da      	uxtb	r2, r3
 8000cb8:	490c      	ldr	r1, [pc, #48]	@ (8000cec <__NVIC_SetPriority+0x4c>)
 8000cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cbe:	0112      	lsls	r2, r2, #4
 8000cc0:	b2d2      	uxtb	r2, r2
 8000cc2:	440b      	add	r3, r1
 8000cc4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cc8:	e00a      	b.n	8000ce0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4908      	ldr	r1, [pc, #32]	@ (8000cf0 <__NVIC_SetPriority+0x50>)
 8000cd0:	88fb      	ldrh	r3, [r7, #6]
 8000cd2:	f003 030f 	and.w	r3, r3, #15
 8000cd6:	3b04      	subs	r3, #4
 8000cd8:	0112      	lsls	r2, r2, #4
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	440b      	add	r3, r1
 8000cde:	761a      	strb	r2, [r3, #24]
}
 8000ce0:	bf00      	nop
 8000ce2:	370c      	adds	r7, #12
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr
 8000cec:	e000e100 	.word	0xe000e100
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	@ 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f1c3 0307 	rsb	r3, r3, #7
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	bf28      	it	cs
 8000d12:	2304      	movcs	r3, #4
 8000d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	3304      	adds	r3, #4
 8000d1a:	2b06      	cmp	r3, #6
 8000d1c:	d902      	bls.n	8000d24 <NVIC_EncodePriority+0x30>
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3b03      	subs	r3, #3
 8000d22:	e000      	b.n	8000d26 <NVIC_EncodePriority+0x32>
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	f04f 32ff 	mov.w	r2, #4294967295
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	43da      	mvns	r2, r3
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	401a      	ands	r2, r3
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	43d9      	mvns	r1, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d4c:	4313      	orrs	r3, r2
         );
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3724      	adds	r7, #36	@ 0x24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d6c:	d301      	bcc.n	8000d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e00f      	b.n	8000d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <SysTick_Config+0x40>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d7a:	210f      	movs	r1, #15
 8000d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d80:	f7ff ff8e 	bl	8000ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <SysTick_Config+0x40>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d8a:	4b04      	ldr	r3, [pc, #16]	@ (8000d9c <SysTick_Config+0x40>)
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d90:	2300      	movs	r3, #0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	e000e010 	.word	0xe000e010

08000da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff ff47 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
 8000dc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc4:	f7ff ff5e 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	68b9      	ldr	r1, [r7, #8]
 8000dce:	6978      	ldr	r0, [r7, #20]
 8000dd0:	f7ff ff90 	bl	8000cf4 <NVIC_EncodePriority>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000dda:	4611      	mov	r1, r2
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff5f 	bl	8000ca0 <__NVIC_SetPriority>
}
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff ffb2 	bl	8000d5c <SysTick_Config>
 8000df8:	4603      	mov	r3, r0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
	...

08000e04 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000e08:	f3bf 8f5f 	dmb	sy
}
 8000e0c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <HAL_MPU_Disable+0x28>)
 8000e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e12:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <HAL_MPU_Disable+0x28>)
 8000e14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e18:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000e1a:	4b05      	ldr	r3, [pc, #20]	@ (8000e30 <HAL_MPU_Disable+0x2c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	605a      	str	r2, [r3, #4]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop
 8000e2c:	e000ed00 	.word	0xe000ed00
 8000e30:	e000ed90 	.word	0xe000ed90

08000e34 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e6c <HAL_MPU_Enable+0x38>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	f043 0301 	orr.w	r3, r3, #1
 8000e44:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000e46:	4b0a      	ldr	r3, [pc, #40]	@ (8000e70 <HAL_MPU_Enable+0x3c>)
 8000e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e4a:	4a09      	ldr	r2, [pc, #36]	@ (8000e70 <HAL_MPU_Enable+0x3c>)
 8000e4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e50:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000ed90 	.word	0xe000ed90
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	785a      	ldrb	r2, [r3, #1]
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e82:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000e84:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	4a19      	ldr	r2, [pc, #100]	@ (8000ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e8a:	f023 0301 	bic.w	r3, r3, #1
 8000e8e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000e90:	4a17      	ldr	r2, [pc, #92]	@ (8000ef0 <HAL_MPU_ConfigRegion+0x7c>)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	7b1b      	ldrb	r3, [r3, #12]
 8000e9c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	7adb      	ldrb	r3, [r3, #11]
 8000ea2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ea4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	7a9b      	ldrb	r3, [r3, #10]
 8000eaa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000eac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	7b5b      	ldrb	r3, [r3, #13]
 8000eb2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000eb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7b9b      	ldrb	r3, [r3, #14]
 8000eba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ebc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	7bdb      	ldrb	r3, [r3, #15]
 8000ec2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ec4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7a5b      	ldrb	r3, [r3, #9]
 8000eca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ecc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	7a1b      	ldrb	r3, [r3, #8]
 8000ed2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000ed4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000ede:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ee0:	6113      	str	r3, [r2, #16]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	e000ed90 	.word	0xe000ed90

08000ef4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b089      	sub	sp, #36	@ 0x24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000f02:	4b89      	ldr	r3, [pc, #548]	@ (8001128 <HAL_GPIO_Init+0x234>)
 8000f04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000f06:	e194      	b.n	8001232 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	681a      	ldr	r2, [r3, #0]
 8000f0c:	2101      	movs	r1, #1
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	fa01 f303 	lsl.w	r3, r1, r3
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	f000 8186 	beq.w	800122c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	f003 0303 	and.w	r3, r3, #3
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d005      	beq.n	8000f38 <HAL_GPIO_Init+0x44>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d130      	bne.n	8000f9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f6e:	2201      	movs	r2, #1
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	091b      	lsrs	r3, r3, #4
 8000f84:	f003 0201 	and.w	r2, r3, #1
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b03      	cmp	r3, #3
 8000fa4:	d017      	beq.n	8000fd6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	689a      	ldr	r2, [r3, #8]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d123      	bne.n	800102a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	08da      	lsrs	r2, r3, #3
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	3208      	adds	r2, #8
 8000fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	220f      	movs	r2, #15
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	691a      	ldr	r2, [r3, #16]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4313      	orrs	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	08da      	lsrs	r2, r3, #3
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3208      	adds	r2, #8
 8001024:	69b9      	ldr	r1, [r7, #24]
 8001026:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	2203      	movs	r2, #3
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f003 0203 	and.w	r2, r3, #3
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 80e0 	beq.w	800122c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800106c:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <HAL_GPIO_Init+0x238>)
 800106e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001072:	4a2e      	ldr	r2, [pc, #184]	@ (800112c <HAL_GPIO_Init+0x238>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800107c:	4b2b      	ldr	r3, [pc, #172]	@ (800112c <HAL_GPIO_Init+0x238>)
 800107e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001082:	f003 0302 	and.w	r3, r3, #2
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108a:	4a29      	ldr	r2, [pc, #164]	@ (8001130 <HAL_GPIO_Init+0x23c>)
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	089b      	lsrs	r3, r3, #2
 8001090:	3302      	adds	r3, #2
 8001092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f003 0303 	and.w	r3, r3, #3
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	220f      	movs	r2, #15
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a20      	ldr	r2, [pc, #128]	@ (8001134 <HAL_GPIO_Init+0x240>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d052      	beq.n	800115c <HAL_GPIO_Init+0x268>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001138 <HAL_GPIO_Init+0x244>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d031      	beq.n	8001122 <HAL_GPIO_Init+0x22e>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a1e      	ldr	r2, [pc, #120]	@ (800113c <HAL_GPIO_Init+0x248>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d02b      	beq.n	800111e <HAL_GPIO_Init+0x22a>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_GPIO_Init+0x24c>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d025      	beq.n	800111a <HAL_GPIO_Init+0x226>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <HAL_GPIO_Init+0x250>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d01f      	beq.n	8001116 <HAL_GPIO_Init+0x222>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001148 <HAL_GPIO_Init+0x254>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d019      	beq.n	8001112 <HAL_GPIO_Init+0x21e>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a1a      	ldr	r2, [pc, #104]	@ (800114c <HAL_GPIO_Init+0x258>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d013      	beq.n	800110e <HAL_GPIO_Init+0x21a>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a19      	ldr	r2, [pc, #100]	@ (8001150 <HAL_GPIO_Init+0x25c>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d00d      	beq.n	800110a <HAL_GPIO_Init+0x216>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a18      	ldr	r2, [pc, #96]	@ (8001154 <HAL_GPIO_Init+0x260>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d007      	beq.n	8001106 <HAL_GPIO_Init+0x212>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a17      	ldr	r2, [pc, #92]	@ (8001158 <HAL_GPIO_Init+0x264>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d101      	bne.n	8001102 <HAL_GPIO_Init+0x20e>
 80010fe:	2309      	movs	r3, #9
 8001100:	e02d      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001102:	230a      	movs	r3, #10
 8001104:	e02b      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001106:	2308      	movs	r3, #8
 8001108:	e029      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800110a:	2307      	movs	r3, #7
 800110c:	e027      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800110e:	2306      	movs	r3, #6
 8001110:	e025      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001112:	2305      	movs	r3, #5
 8001114:	e023      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001116:	2304      	movs	r3, #4
 8001118:	e021      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800111a:	2303      	movs	r3, #3
 800111c:	e01f      	b.n	800115e <HAL_GPIO_Init+0x26a>
 800111e:	2302      	movs	r3, #2
 8001120:	e01d      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001122:	2301      	movs	r3, #1
 8001124:	e01b      	b.n	800115e <HAL_GPIO_Init+0x26a>
 8001126:	bf00      	nop
 8001128:	58000080 	.word	0x58000080
 800112c:	58024400 	.word	0x58024400
 8001130:	58000400 	.word	0x58000400
 8001134:	58020000 	.word	0x58020000
 8001138:	58020400 	.word	0x58020400
 800113c:	58020800 	.word	0x58020800
 8001140:	58020c00 	.word	0x58020c00
 8001144:	58021000 	.word	0x58021000
 8001148:	58021400 	.word	0x58021400
 800114c:	58021800 	.word	0x58021800
 8001150:	58021c00 	.word	0x58021c00
 8001154:	58022000 	.word	0x58022000
 8001158:	58022400 	.word	0x58022400
 800115c:	2300      	movs	r3, #0
 800115e:	69fa      	ldr	r2, [r7, #28]
 8001160:	f002 0203 	and.w	r2, r2, #3
 8001164:	0092      	lsls	r2, r2, #2
 8001166:	4093      	lsls	r3, r2
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	4313      	orrs	r3, r2
 800116c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800116e:	4938      	ldr	r1, [pc, #224]	@ (8001250 <HAL_GPIO_Init+0x35c>)
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	089b      	lsrs	r3, r3, #2
 8001174:	3302      	adds	r3, #2
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80011a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011aa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	4013      	ands	r3, r2
 80011ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d003      	beq.n	80011d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80011d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	4013      	ands	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	43db      	mvns	r3, r3
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4013      	ands	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	3301      	adds	r3, #1
 8001230:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	2b00      	cmp	r3, #0
 800123e:	f47f ae63 	bne.w	8000f08 <HAL_GPIO_Init+0x14>
  }
}
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	3724      	adds	r7, #36	@ 0x24
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr
 8001250:	58000400 	.word	0x58000400

08001254 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d101      	bne.n	8001266 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e08b      	b.n	800137e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d106      	bne.n	8001280 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff f8a6 	bl	80003cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2224      	movs	r2, #36	@ 0x24
 8001284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f022 0201 	bic.w	r2, r2, #1
 8001296:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685a      	ldr	r2, [r3, #4]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689a      	ldr	r2, [r3, #8]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80012b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	68db      	ldr	r3, [r3, #12]
 80012ba:	2b01      	cmp	r3, #1
 80012bc:	d107      	bne.n	80012ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	e006      	b.n	80012dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689a      	ldr	r2, [r3, #8]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80012da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d108      	bne.n	80012f6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	685a      	ldr	r2, [r3, #4]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	e007      	b.n	8001306 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001304:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	6859      	ldr	r1, [r3, #4]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	4b1d      	ldr	r3, [pc, #116]	@ (8001388 <HAL_I2C_Init+0x134>)
 8001312:	430b      	orrs	r3, r1
 8001314:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001324:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691a      	ldr	r2, [r3, #16]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	699b      	ldr	r3, [r3, #24]
 8001336:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	430a      	orrs	r2, r1
 800133e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69d9      	ldr	r1, [r3, #28]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a1a      	ldr	r2, [r3, #32]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 0201 	orr.w	r2, r2, #1
 800135e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2220      	movs	r2, #32
 800136a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3708      	adds	r7, #8
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	02008000 	.word	0x02008000

0800138c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b088      	sub	sp, #32
 8001390:	af02      	add	r7, sp, #8
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	461a      	mov	r2, r3
 8001398:	460b      	mov	r3, r1
 800139a:	817b      	strh	r3, [r7, #10]
 800139c:	4613      	mov	r3, r2
 800139e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	f040 80fd 	bne.w	80015a8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d101      	bne.n	80013bc <HAL_I2C_Master_Transmit+0x30>
 80013b8:	2302      	movs	r3, #2
 80013ba:	e0f6      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013c4:	f7ff fbfe 	bl	8000bc4 <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2319      	movs	r3, #25
 80013d0:	2201      	movs	r2, #1
 80013d2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80013d6:	68f8      	ldr	r0, [r7, #12]
 80013d8:	f000 f914 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e0e1      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2221      	movs	r2, #33	@ 0x21
 80013ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2210      	movs	r2, #16
 80013f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2200      	movs	r2, #0
 80013fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	893a      	ldrh	r2, [r7, #8]
 8001406:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	2200      	movs	r2, #0
 800140c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001412:	b29b      	uxth	r3, r3
 8001414:	2bff      	cmp	r3, #255	@ 0xff
 8001416:	d906      	bls.n	8001426 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	22ff      	movs	r2, #255	@ 0xff
 800141c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800141e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e007      	b.n	8001436 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800142a:	b29a      	uxth	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001430:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001434:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143a:	2b00      	cmp	r3, #0
 800143c:	d024      	beq.n	8001488 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001442:	781a      	ldrb	r2, [r3, #0]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144e:	1c5a      	adds	r2, r3, #1
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001458:	b29b      	uxth	r3, r3
 800145a:	3b01      	subs	r3, #1
 800145c:	b29a      	uxth	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001466:	3b01      	subs	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001472:	b2db      	uxtb	r3, r3
 8001474:	3301      	adds	r3, #1
 8001476:	b2da      	uxtb	r2, r3
 8001478:	8979      	ldrh	r1, [r7, #10]
 800147a:	4b4e      	ldr	r3, [pc, #312]	@ (80015b4 <HAL_I2C_Master_Transmit+0x228>)
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	68f8      	ldr	r0, [r7, #12]
 8001482:	f000 fa83 	bl	800198c <I2C_TransferConfig>
 8001486:	e066      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800148c:	b2da      	uxtb	r2, r3
 800148e:	8979      	ldrh	r1, [r7, #10]
 8001490:	4b48      	ldr	r3, [pc, #288]	@ (80015b4 <HAL_I2C_Master_Transmit+0x228>)
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	f000 fa78 	bl	800198c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800149c:	e05b      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	6a39      	ldr	r1, [r7, #32]
 80014a2:	68f8      	ldr	r0, [r7, #12]
 80014a4:	f000 f907 	bl	80016b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e07b      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014b6:	781a      	ldrb	r2, [r3, #0]
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	1c5a      	adds	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	3b01      	subs	r3, #1
 80014d0:	b29a      	uxth	r2, r3
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014da:	3b01      	subs	r3, #1
 80014dc:	b29a      	uxth	r2, r3
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d034      	beq.n	8001556 <HAL_I2C_Master_Transmit+0x1ca>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d130      	bne.n	8001556 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	6a3b      	ldr	r3, [r7, #32]
 80014fa:	2200      	movs	r2, #0
 80014fc:	2180      	movs	r1, #128	@ 0x80
 80014fe:	68f8      	ldr	r0, [r7, #12]
 8001500:	f000 f880 	bl	8001604 <I2C_WaitOnFlagUntilTimeout>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800150a:	2301      	movs	r3, #1
 800150c:	e04d      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	2bff      	cmp	r3, #255	@ 0xff
 8001516:	d90e      	bls.n	8001536 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	22ff      	movs	r2, #255	@ 0xff
 800151c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001522:	b2da      	uxtb	r2, r3
 8001524:	8979      	ldrh	r1, [r7, #10]
 8001526:	2300      	movs	r3, #0
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800152e:	68f8      	ldr	r0, [r7, #12]
 8001530:	f000 fa2c 	bl	800198c <I2C_TransferConfig>
 8001534:	e00f      	b.n	8001556 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001544:	b2da      	uxtb	r2, r3
 8001546:	8979      	ldrh	r1, [r7, #10]
 8001548:	2300      	movs	r3, #0
 800154a:	9300      	str	r3, [sp, #0]
 800154c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f000 fa1b 	bl	800198c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800155a:	b29b      	uxth	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d19e      	bne.n	800149e <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	6a39      	ldr	r1, [r7, #32]
 8001564:	68f8      	ldr	r0, [r7, #12]
 8001566:	f000 f8ed 	bl	8001744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e01a      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2220      	movs	r2, #32
 800157a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6859      	ldr	r1, [r3, #4]
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <HAL_I2C_Master_Transmit+0x22c>)
 8001588:	400b      	ands	r3, r1
 800158a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e000      	b.n	80015aa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80015a8:	2302      	movs	r3, #2
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	80002000 	.word	0x80002000
 80015b8:	fe00e800 	.word	0xfe00e800

080015bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80015bc:	b480      	push	{r7}
 80015be:	b083      	sub	sp, #12
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d103      	bne.n	80015da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	699b      	ldr	r3, [r3, #24]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d007      	beq.n	80015f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	699a      	ldr	r2, [r3, #24]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 0201 	orr.w	r2, r2, #1
 80015f6:	619a      	str	r2, [r3, #24]
  }
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	4613      	mov	r3, r2
 8001612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001614:	e03b      	b.n	800168e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 f8d6 	bl	80017cc <I2C_IsErrorOccurred>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e041      	b.n	80016ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001630:	d02d      	beq.n	800168e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001632:	f7ff fac7 	bl	8000bc4 <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	429a      	cmp	r2, r3
 8001640:	d302      	bcc.n	8001648 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d122      	bne.n	800168e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	4013      	ands	r3, r2
 8001652:	68ba      	ldr	r2, [r7, #8]
 8001654:	429a      	cmp	r2, r3
 8001656:	bf0c      	ite	eq
 8001658:	2301      	moveq	r3, #1
 800165a:	2300      	movne	r3, #0
 800165c:	b2db      	uxtb	r3, r3
 800165e:	461a      	mov	r2, r3
 8001660:	79fb      	ldrb	r3, [r7, #7]
 8001662:	429a      	cmp	r2, r3
 8001664:	d113      	bne.n	800168e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166a:	f043 0220 	orr.w	r2, r3, #32
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2220      	movs	r2, #32
 8001676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e00f      	b.n	80016ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4013      	ands	r3, r2
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	429a      	cmp	r2, r3
 800169c:	bf0c      	ite	eq
 800169e:	2301      	moveq	r3, #1
 80016a0:	2300      	movne	r3, #0
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	461a      	mov	r2, r3
 80016a6:	79fb      	ldrb	r3, [r7, #7]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d0b4      	beq.n	8001616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b084      	sub	sp, #16
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	60f8      	str	r0, [r7, #12]
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80016c2:	e033      	b.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68b9      	ldr	r1, [r7, #8]
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f87f 	bl	80017cc <I2C_IsErrorOccurred>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e031      	b.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016de:	d025      	beq.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016e0:	f7ff fa70 	bl	8000bc4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	68ba      	ldr	r2, [r7, #8]
 80016ec:	429a      	cmp	r2, r3
 80016ee:	d302      	bcc.n	80016f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11a      	bne.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	2b02      	cmp	r3, #2
 8001702:	d013      	beq.n	800172c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	2220      	movs	r2, #32
 8001714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e007      	b.n	800173c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	2b02      	cmp	r3, #2
 8001738:	d1c4      	bne.n	80016c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	60f8      	str	r0, [r7, #12]
 800174c:	60b9      	str	r1, [r7, #8]
 800174e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001750:	e02f      	b.n	80017b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68b9      	ldr	r1, [r7, #8]
 8001756:	68f8      	ldr	r0, [r7, #12]
 8001758:	f000 f838 	bl	80017cc <I2C_IsErrorOccurred>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e02d      	b.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001766:	f7ff fa2d 	bl	8000bc4 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	429a      	cmp	r2, r3
 8001774:	d302      	bcc.n	800177c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d11a      	bne.n	80017b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b20      	cmp	r3, #32
 8001788:	d013      	beq.n	80017b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800178e:	f043 0220 	orr.w	r2, r3, #32
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	e007      	b.n	80017c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0320 	and.w	r3, r3, #32
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d1c8      	bne.n	8001752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	@ 0x28
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d068      	beq.n	80018ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2210      	movs	r2, #16
 80017fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001800:	e049      	b.n	8001896 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001808:	d045      	beq.n	8001896 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800180a:	f7ff f9db 	bl	8000bc4 <HAL_GetTick>
 800180e:	4602      	mov	r2, r0
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	68ba      	ldr	r2, [r7, #8]
 8001816:	429a      	cmp	r2, r3
 8001818:	d302      	bcc.n	8001820 <I2C_IsErrorOccurred+0x54>
 800181a:	68bb      	ldr	r3, [r7, #8]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d13a      	bne.n	8001896 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800182a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001832:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800183e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001842:	d121      	bne.n	8001888 <I2C_IsErrorOccurred+0xbc>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800184a:	d01d      	beq.n	8001888 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800184c:	7cfb      	ldrb	r3, [r7, #19]
 800184e:	2b20      	cmp	r3, #32
 8001850:	d01a      	beq.n	8001888 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001860:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001862:	f7ff f9af 	bl	8000bc4 <HAL_GetTick>
 8001866:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001868:	e00e      	b.n	8001888 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800186a:	f7ff f9ab 	bl	8000bc4 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b19      	cmp	r3, #25
 8001876:	d907      	bls.n	8001888 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001878:	6a3b      	ldr	r3, [r7, #32]
 800187a:	f043 0320 	orr.w	r3, r3, #32
 800187e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8001886:	e006      	b.n	8001896 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0320 	and.w	r3, r3, #32
 8001892:	2b20      	cmp	r3, #32
 8001894:	d1e9      	bne.n	800186a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	f003 0320 	and.w	r3, r3, #32
 80018a0:	2b20      	cmp	r3, #32
 80018a2:	d003      	beq.n	80018ac <I2C_IsErrorOccurred+0xe0>
 80018a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d0aa      	beq.n	8001802 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80018ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d103      	bne.n	80018bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2220      	movs	r2, #32
 80018ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80018bc:	6a3b      	ldr	r3, [r7, #32]
 80018be:	f043 0304 	orr.w	r3, r3, #4
 80018c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00b      	beq.n	80018f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80018dc:	6a3b      	ldr	r3, [r7, #32]
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00b      	beq.n	8001916 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80018fe:	6a3b      	ldr	r3, [r7, #32]
 8001900:	f043 0308 	orr.w	r3, r3, #8
 8001904:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800190e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00b      	beq.n	8001938 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001920:	6a3b      	ldr	r3, [r7, #32]
 8001922:	f043 0302 	orr.w	r3, r3, #2
 8001926:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800193c:	2b00      	cmp	r3, #0
 800193e:	d01c      	beq.n	800197a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001940:	68f8      	ldr	r0, [r7, #12]
 8001942:	f7ff fe3b 	bl	80015bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6859      	ldr	r1, [r3, #4]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4b0d      	ldr	r3, [pc, #52]	@ (8001988 <I2C_IsErrorOccurred+0x1bc>)
 8001952:	400b      	ands	r3, r1
 8001954:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	431a      	orrs	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2220      	movs	r2, #32
 8001966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800197a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800197e:	4618      	mov	r0, r3
 8001980:	3728      	adds	r7, #40	@ 0x28
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	fe00e800 	.word	0xfe00e800

0800198c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800198c:	b480      	push	{r7}
 800198e:	b087      	sub	sp, #28
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	4613      	mov	r3, r2
 800199c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800199e:	897b      	ldrh	r3, [r7, #10]
 80019a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019a4:	7a7b      	ldrb	r3, [r7, #9]
 80019a6:	041b      	lsls	r3, r3, #16
 80019a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80019b2:	6a3b      	ldr	r3, [r7, #32]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80019ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	685a      	ldr	r2, [r3, #4]
 80019c2:	6a3b      	ldr	r3, [r7, #32]
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80019ca:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <I2C_TransferConfig+0x60>)
 80019cc:	430b      	orrs	r3, r1
 80019ce:	43db      	mvns	r3, r3
 80019d0:	ea02 0103 	and.w	r1, r2, r3
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80019de:	bf00      	nop
 80019e0:	371c      	adds	r7, #28
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	03ff63ff 	.word	0x03ff63ff

080019f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a00:	b2db      	uxtb	r3, r3
 8001a02:	2b20      	cmp	r3, #32
 8001a04:	d138      	bne.n	8001a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e032      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2224      	movs	r2, #36	@ 0x24
 8001a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0201 	bic.w	r2, r2, #1
 8001a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6819      	ldr	r1, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	683a      	ldr	r2, [r7, #0]
 8001a50:	430a      	orrs	r2, r1
 8001a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f042 0201 	orr.w	r2, r2, #1
 8001a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2220      	movs	r2, #32
 8001a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	e000      	b.n	8001a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a78:	2302      	movs	r3, #2
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a86:	b480      	push	{r7}
 8001a88:	b085      	sub	sp, #20
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
 8001a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b20      	cmp	r3, #32
 8001a9a:	d139      	bne.n	8001b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d101      	bne.n	8001aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e033      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2224      	movs	r2, #36	@ 0x24
 8001ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0201 	bic.w	r2, r2, #1
 8001ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f042 0201 	orr.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2220      	movs	r2, #32
 8001b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	e000      	b.n	8001b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
  }
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b28:	4b0d      	ldr	r3, [pc, #52]	@ (8001b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8001b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b2e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b38:	4b09      	ldr	r3, [pc, #36]	@ (8001b60 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8001b3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	60fb      	str	r3, [r7, #12]
 8001b44:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8001b46:	4b07      	ldr	r3, [pc, #28]	@ (8001b64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4906      	ldr	r1, [pc, #24]	@ (8001b64 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr
 8001b5e:	bf00      	nop
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58000400 	.word	0x58000400

08001b68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001b70:	4b19      	ldr	r3, [pc, #100]	@ (8001bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f003 0304 	and.w	r3, r3, #4
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d00a      	beq.n	8001b92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001b7c:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d001      	beq.n	8001b8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e01f      	b.n	8001bce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	e01d      	b.n	8001bce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b94:	68db      	ldr	r3, [r3, #12]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	490f      	ldr	r1, [pc, #60]	@ (8001bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001ba2:	f7ff f80f 	bl	8000bc4 <HAL_GetTick>
 8001ba6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ba8:	e009      	b.n	8001bbe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001baa:	f7ff f80b 	bl	8000bc4 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001bb8:	d901      	bls.n	8001bbe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_PWREx_ConfigSupply+0x70>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001bc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001bca:	d1ee      	bne.n	8001baa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3710      	adds	r7, #16
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	58024800 	.word	0x58024800

08001bdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08c      	sub	sp, #48	@ 0x30
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d102      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	f000 bc48 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	f000 8088 	beq.w	8001d0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfe:	4b99      	ldr	r3, [pc, #612]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c00:	691b      	ldr	r3, [r3, #16]
 8001c02:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c08:	4b96      	ldr	r3, [pc, #600]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c10:	2b10      	cmp	r3, #16
 8001c12:	d007      	beq.n	8001c24 <HAL_RCC_OscConfig+0x48>
 8001c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c16:	2b18      	cmp	r3, #24
 8001c18:	d111      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
 8001c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c24:	4b8f      	ldr	r3, [pc, #572]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d06d      	beq.n	8001d0c <HAL_RCC_OscConfig+0x130>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d169      	bne.n	8001d0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	f000 bc21 	b.w	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c46:	d106      	bne.n	8001c56 <HAL_RCC_OscConfig+0x7a>
 8001c48:	4b86      	ldr	r3, [pc, #536]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a85      	ldr	r2, [pc, #532]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c52:	6013      	str	r3, [r2, #0]
 8001c54:	e02e      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0x9c>
 8001c5e:	4b81      	ldr	r3, [pc, #516]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a80      	ldr	r2, [pc, #512]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b7e      	ldr	r3, [pc, #504]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e01d      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c80:	d10c      	bne.n	8001c9c <HAL_RCC_OscConfig+0xc0>
 8001c82:	4b78      	ldr	r3, [pc, #480]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a77      	ldr	r2, [pc, #476]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	4b75      	ldr	r3, [pc, #468]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a74      	ldr	r2, [pc, #464]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c98:	6013      	str	r3, [r2, #0]
 8001c9a:	e00b      	b.n	8001cb4 <HAL_RCC_OscConfig+0xd8>
 8001c9c:	4b71      	ldr	r3, [pc, #452]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a70      	ldr	r2, [pc, #448]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001ca2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b6e      	ldr	r3, [pc, #440]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a6d      	ldr	r2, [pc, #436]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d013      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff82 	bl	8000bc4 <HAL_GetTick>
 8001cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff7e 	bl	8000bc4 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b64      	cmp	r3, #100	@ 0x64
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e3d4      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001cd6:	4b63      	ldr	r3, [pc, #396]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d0f0      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xe8>
 8001ce2:	e014      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7fe ff6e 	bl	8000bc4 <HAL_GetTick>
 8001ce8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cec:	f7fe ff6a 	bl	8000bc4 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b64      	cmp	r3, #100	@ 0x64
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e3c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001cfe:	4b59      	ldr	r3, [pc, #356]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x110>
 8001d0a:	e000      	b.n	8001d0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80ca 	beq.w	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d1c:	4b51      	ldr	r3, [pc, #324]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d24:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d26:	4b4f      	ldr	r3, [pc, #316]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d007      	beq.n	8001d42 <HAL_RCC_OscConfig+0x166>
 8001d32:	6a3b      	ldr	r3, [r7, #32]
 8001d34:	2b18      	cmp	r3, #24
 8001d36:	d156      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d151      	bne.n	8001de6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d42:	4b48      	ldr	r3, [pc, #288]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0304 	and.w	r3, r3, #4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d005      	beq.n	8001d5a <HAL_RCC_OscConfig+0x17e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d101      	bne.n	8001d5a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e392      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d5a:	4b42      	ldr	r3, [pc, #264]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f023 0219 	bic.w	r2, r3, #25
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	493f      	ldr	r1, [pc, #252]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7fe ff2a 	bl	8000bc4 <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d74:	f7fe ff26 	bl	8000bc4 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e37c      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d86:	4b37      	ldr	r3, [pc, #220]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d92:	f7fe ff47 	bl	8000c24 <HAL_GetREVID>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d817      	bhi.n	8001dd0 <HAL_RCC_OscConfig+0x1f4>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b40      	cmp	r3, #64	@ 0x40
 8001da6:	d108      	bne.n	8001dba <HAL_RCC_OscConfig+0x1de>
 8001da8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001db0:	4a2c      	ldr	r2, [pc, #176]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001db6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db8:	e07a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dba:	4b2a      	ldr	r3, [pc, #168]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	031b      	lsls	r3, r3, #12
 8001dc8:	4926      	ldr	r1, [pc, #152]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dce:	e06f      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4b24      	ldr	r3, [pc, #144]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	061b      	lsls	r3, r3, #24
 8001dde:	4921      	ldr	r1, [pc, #132]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001de0:	4313      	orrs	r3, r2
 8001de2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de4:	e064      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d047      	beq.n	8001e7e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001dee:	4b1d      	ldr	r3, [pc, #116]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f023 0219 	bic.w	r2, r3, #25
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	491a      	ldr	r1, [pc, #104]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e00:	f7fe fee0 	bl	8000bc4 <HAL_GetTick>
 8001e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e06:	e008      	b.n	8001e1a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e08:	f7fe fedc 	bl	8000bc4 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	d901      	bls.n	8001e1a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e332      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e1a:	4b12      	ldr	r3, [pc, #72]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d0f0      	beq.n	8001e08 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e26:	f7fe fefd 	bl	8000c24 <HAL_GetREVID>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d819      	bhi.n	8001e68 <HAL_RCC_OscConfig+0x28c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b40      	cmp	r3, #64	@ 0x40
 8001e3a:	d108      	bne.n	8001e4e <HAL_RCC_OscConfig+0x272>
 8001e3c:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e44:	4a07      	ldr	r2, [pc, #28]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e4a:	6053      	str	r3, [r2, #4]
 8001e4c:	e030      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e4e:	4b05      	ldr	r3, [pc, #20]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	031b      	lsls	r3, r3, #12
 8001e5c:	4901      	ldr	r1, [pc, #4]	@ (8001e64 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	604b      	str	r3, [r1, #4]
 8001e62:	e025      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
 8001e64:	58024400 	.word	0x58024400
 8001e68:	4b9a      	ldr	r3, [pc, #616]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	061b      	lsls	r3, r3, #24
 8001e76:	4997      	ldr	r1, [pc, #604]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	604b      	str	r3, [r1, #4]
 8001e7c:	e018      	b.n	8001eb0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e7e:	4b95      	ldr	r3, [pc, #596]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a94      	ldr	r2, [pc, #592]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001e84:	f023 0301 	bic.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e8a:	f7fe fe9b 	bl	8000bc4 <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e90:	e008      	b.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e92:	f7fe fe97 	bl	8000bc4 <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d901      	bls.n	8001ea4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	e2ed      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ea4:	4b8b      	ldr	r3, [pc, #556]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f0      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0310 	and.w	r3, r3, #16
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 80a9 	beq.w	8002010 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ebe:	4b85      	ldr	r3, [pc, #532]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ec6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ec8:	4b82      	ldr	r3, [pc, #520]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ecc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	2b08      	cmp	r3, #8
 8001ed2:	d007      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x308>
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	d13a      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d135      	bne.n	8001f50 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ee4:	4b7b      	ldr	r3, [pc, #492]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d005      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b80      	cmp	r3, #128	@ 0x80
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e2c1      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001efc:	f7fe fe92 	bl	8000c24 <HAL_GetREVID>
 8001f00:	4603      	mov	r3, r0
 8001f02:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d817      	bhi.n	8001f3a <HAL_RCC_OscConfig+0x35e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6a1b      	ldr	r3, [r3, #32]
 8001f0e:	2b20      	cmp	r3, #32
 8001f10:	d108      	bne.n	8001f24 <HAL_RCC_OscConfig+0x348>
 8001f12:	4b70      	ldr	r3, [pc, #448]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f1a:	4a6e      	ldr	r2, [pc, #440]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f20:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f22:	e075      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f24:	4b6b      	ldr	r3, [pc, #428]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
 8001f30:	069b      	lsls	r3, r3, #26
 8001f32:	4968      	ldr	r1, [pc, #416]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f38:	e06a      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f3a:	4b66      	ldr	r3, [pc, #408]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a1b      	ldr	r3, [r3, #32]
 8001f46:	061b      	lsls	r3, r3, #24
 8001f48:	4962      	ldr	r1, [pc, #392]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001f4e:	e05f      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d042      	beq.n	8001fde <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001f58:	4b5e      	ldr	r3, [pc, #376]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5d      	ldr	r2, [pc, #372]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7fe fe2e 	bl	8000bc4 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f6c:	f7fe fe2a 	bl	8000bc4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e280      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f7e:	4b55      	ldr	r3, [pc, #340]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f8a:	f7fe fe4b 	bl	8000c24 <HAL_GetREVID>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d817      	bhi.n	8001fc8 <HAL_RCC_OscConfig+0x3ec>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	2b20      	cmp	r3, #32
 8001f9e:	d108      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x3d6>
 8001fa0:	4b4c      	ldr	r3, [pc, #304]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001faa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001fae:	6053      	str	r3, [r2, #4]
 8001fb0:	e02e      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fb2:	4b48      	ldr	r3, [pc, #288]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	069b      	lsls	r3, r3, #26
 8001fc0:	4944      	ldr	r1, [pc, #272]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	604b      	str	r3, [r1, #4]
 8001fc6:	e023      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
 8001fc8:	4b42      	ldr	r3, [pc, #264]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a1b      	ldr	r3, [r3, #32]
 8001fd4:	061b      	lsls	r3, r3, #24
 8001fd6:	493f      	ldr	r1, [pc, #252]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
 8001fdc:	e018      	b.n	8002010 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001fde:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3c      	ldr	r2, [pc, #240]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8001fe4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fea:	f7fe fdeb 	bl	8000bc4 <HAL_GetTick>
 8001fee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001ff0:	e008      	b.n	8002004 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ff2:	f7fe fde7 	bl	8000bc4 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e23d      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002004:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1f0      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0308 	and.w	r3, r3, #8
 8002018:	2b00      	cmp	r3, #0
 800201a:	d036      	beq.n	800208a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d019      	beq.n	8002058 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002024:	4b2b      	ldr	r3, [pc, #172]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002028:	4a2a      	ldr	r2, [pc, #168]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002030:	f7fe fdc8 	bl	8000bc4 <HAL_GetTick>
 8002034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002038:	f7fe fdc4 	bl	8000bc4 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e21a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800204a:	4b22      	ldr	r3, [pc, #136]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800204c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d0f0      	beq.n	8002038 <HAL_RCC_OscConfig+0x45c>
 8002056:	e018      	b.n	800208a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002058:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002064:	f7fe fdae 	bl	8000bc4 <HAL_GetTick>
 8002068:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800206c:	f7fe fdaa 	bl	8000bc4 <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e200      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800207e:	4b15      	ldr	r3, [pc, #84]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 8002080:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002082:	f003 0302 	and.w	r3, r3, #2
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0320 	and.w	r3, r3, #32
 8002092:	2b00      	cmp	r3, #0
 8002094:	d039      	beq.n	800210a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d01c      	beq.n	80020d8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800209e:	4b0d      	ldr	r3, [pc, #52]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a0c      	ldr	r2, [pc, #48]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020a8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020aa:	f7fe fd8b 	bl	8000bc4 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7fe fd87 	bl	8000bc4 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e1dd      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80020c4:	4b03      	ldr	r3, [pc, #12]	@ (80020d4 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x4d6>
 80020d0:	e01b      	b.n	800210a <HAL_RCC_OscConfig+0x52e>
 80020d2:	bf00      	nop
 80020d4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020d8:	4b9b      	ldr	r3, [pc, #620]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a9a      	ldr	r2, [pc, #616]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80020de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80020e4:	f7fe fd6e 	bl	8000bc4 <HAL_GetTick>
 80020e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020ec:	f7fe fd6a 	bl	8000bc4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e1c0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020fe:	4b92      	ldr	r3, [pc, #584]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8081 	beq.w	800221a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002118:	4b8c      	ldr	r3, [pc, #560]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a8b      	ldr	r2, [pc, #556]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002122:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002124:	f7fe fd4e 	bl	8000bc4 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212c:	f7fe fd4a 	bl	8000bc4 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e1a0      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800213e:	4b83      	ldr	r3, [pc, #524]	@ (800234c <HAL_RCC_OscConfig+0x770>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	2b01      	cmp	r3, #1
 8002150:	d106      	bne.n	8002160 <HAL_RCC_OscConfig+0x584>
 8002152:	4b7d      	ldr	r3, [pc, #500]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002154:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002156:	4a7c      	ldr	r2, [pc, #496]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6713      	str	r3, [r2, #112]	@ 0x70
 800215e:	e02d      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d10c      	bne.n	8002182 <HAL_RCC_OscConfig+0x5a6>
 8002168:	4b77      	ldr	r3, [pc, #476]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800216c:	4a76      	ldr	r2, [pc, #472]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800216e:	f023 0301 	bic.w	r3, r3, #1
 8002172:	6713      	str	r3, [r2, #112]	@ 0x70
 8002174:	4b74      	ldr	r3, [pc, #464]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002178:	4a73      	ldr	r2, [pc, #460]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800217a:	f023 0304 	bic.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002180:	e01c      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	2b05      	cmp	r3, #5
 8002188:	d10c      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5c8>
 800218a:	4b6f      	ldr	r3, [pc, #444]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800218c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800218e:	4a6e      	ldr	r2, [pc, #440]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6713      	str	r3, [r2, #112]	@ 0x70
 8002196:	4b6c      	ldr	r3, [pc, #432]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800219a:	4a6b      	ldr	r2, [pc, #428]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80021a2:	e00b      	b.n	80021bc <HAL_RCC_OscConfig+0x5e0>
 80021a4:	4b68      	ldr	r3, [pc, #416]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a8:	4a67      	ldr	r2, [pc, #412]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80021b0:	4b65      	ldr	r3, [pc, #404]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021b4:	4a64      	ldr	r2, [pc, #400]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f023 0304 	bic.w	r3, r3, #4
 80021ba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d015      	beq.n	80021f0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c4:	f7fe fcfe 	bl	8000bc4 <HAL_GetTick>
 80021c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021ca:	e00a      	b.n	80021e2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021cc:	f7fe fcfa 	bl	8000bc4 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021da:	4293      	cmp	r3, r2
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e14e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80021e2:	4b59      	ldr	r3, [pc, #356]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80021e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0ee      	beq.n	80021cc <HAL_RCC_OscConfig+0x5f0>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021f0:	f7fe fce8 	bl	8000bc4 <HAL_GetTick>
 80021f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021f6:	e00a      	b.n	800220e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f8:	f7fe fce4 	bl	8000bc4 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e138      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1ee      	bne.n	80021f8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 812d 	beq.w	800247e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002224:	4b48      	ldr	r3, [pc, #288]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800222c:	2b18      	cmp	r3, #24
 800222e:	f000 80bd 	beq.w	80023ac <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002236:	2b02      	cmp	r3, #2
 8002238:	f040 809e 	bne.w	8002378 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b42      	ldr	r3, [pc, #264]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a41      	ldr	r2, [pc, #260]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002242:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7fe fcbc 	bl	8000bc4 <HAL_GetTick>
 800224c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fcb8 	bl	8000bc4 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e10e      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002262:	4b39      	ldr	r3, [pc, #228]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1f0      	bne.n	8002250 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800226e:	4b36      	ldr	r3, [pc, #216]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_OscConfig+0x774>)
 8002274:	4013      	ands	r3, r2
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	430a      	orrs	r2, r1
 8002282:	4931      	ldr	r1, [pc, #196]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002284:	4313      	orrs	r3, r2
 8002286:	628b      	str	r3, [r1, #40]	@ 0x28
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	3b01      	subs	r3, #1
 800228e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002296:	3b01      	subs	r3, #1
 8002298:	025b      	lsls	r3, r3, #9
 800229a:	b29b      	uxth	r3, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a2:	3b01      	subs	r3, #1
 80022a4:	041b      	lsls	r3, r3, #16
 80022a6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022b0:	3b01      	subs	r3, #1
 80022b2:	061b      	lsls	r3, r3, #24
 80022b4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80022b8:	4923      	ldr	r1, [pc, #140]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80022be:	4b22      	ldr	r3, [pc, #136]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c2:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	f023 0301 	bic.w	r3, r3, #1
 80022c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80022ca:	4b1f      	ldr	r3, [pc, #124]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80022ce:	4b21      	ldr	r3, [pc, #132]	@ (8002354 <HAL_RCC_OscConfig+0x778>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80022d6:	00d2      	lsls	r2, r2, #3
 80022d8:	491b      	ldr	r1, [pc, #108]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80022de:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e2:	f023 020c 	bic.w	r2, r3, #12
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ea:	4917      	ldr	r1, [pc, #92]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f4:	f023 0202 	bic.w	r2, r3, #2
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fc:	4912      	ldr	r1, [pc, #72]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002304:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002306:	4a10      	ldr	r2, [pc, #64]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002312:	4a0d      	ldr	r2, [pc, #52]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002318:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800231a:	4b0b      	ldr	r3, [pc, #44]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800231c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002324:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002326:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800232a:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 800232c:	f043 0301 	orr.w	r3, r3, #1
 8002330:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002332:	4b05      	ldr	r3, [pc, #20]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <HAL_RCC_OscConfig+0x76c>)
 8002338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800233c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800233e:	f7fe fc41 	bl	8000bc4 <HAL_GetTick>
 8002342:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002344:	e011      	b.n	800236a <HAL_RCC_OscConfig+0x78e>
 8002346:	bf00      	nop
 8002348:	58024400 	.word	0x58024400
 800234c:	58024800 	.word	0x58024800
 8002350:	fffffc0c 	.word	0xfffffc0c
 8002354:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002358:	f7fe fc34 	bl	8000bc4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	2b02      	cmp	r3, #2
 8002364:	d901      	bls.n	800236a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e08a      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800236a:	4b47      	ldr	r3, [pc, #284]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d0f0      	beq.n	8002358 <HAL_RCC_OscConfig+0x77c>
 8002376:	e082      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002378:	4b43      	ldr	r3, [pc, #268]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a42      	ldr	r2, [pc, #264]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800237e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002384:	f7fe fc1e 	bl	8000bc4 <HAL_GetTick>
 8002388:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800238c:	f7fe fc1a 	bl	8000bc4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e070      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800239e:	4b3a      	ldr	r3, [pc, #232]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x7b0>
 80023aa:	e068      	b.n	800247e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80023ac:	4b36      	ldr	r3, [pc, #216]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80023b2:	4b35      	ldr	r3, [pc, #212]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d031      	beq.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	f003 0203 	and.w	r2, r3, #3
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d12a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	091b      	lsrs	r3, r3, #4
 80023d2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d122      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d11a      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	0a5b      	lsrs	r3, r3, #9
 80023f2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d111      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	0c1b      	lsrs	r3, r3, #16
 8002404:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d108      	bne.n	8002424 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	0e1b      	lsrs	r3, r3, #24
 8002416:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800241e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e02b      	b.n	8002480 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002428:	4b17      	ldr	r3, [pc, #92]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800242c:	08db      	lsrs	r3, r3, #3
 800242e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002432:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d01f      	beq.n	800247e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800243e:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002442:	4a11      	ldr	r2, [pc, #68]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	f023 0301 	bic.w	r3, r3, #1
 8002448:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800244a:	f7fe fbbb 	bl	8000bc4 <HAL_GetTick>
 800244e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002450:	bf00      	nop
 8002452:	f7fe fbb7 	bl	8000bc4 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800245a:	4293      	cmp	r3, r2
 800245c:	d0f9      	beq.n	8002452 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800245e:	4b0a      	ldr	r3, [pc, #40]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002460:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002462:	4b0a      	ldr	r3, [pc, #40]	@ (800248c <HAL_RCC_OscConfig+0x8b0>)
 8002464:	4013      	ands	r3, r2
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800246a:	00d2      	lsls	r2, r2, #3
 800246c:	4906      	ldr	r1, [pc, #24]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 800246e:	4313      	orrs	r3, r2
 8002470:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002472:	4b05      	ldr	r3, [pc, #20]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002476:	4a04      	ldr	r2, [pc, #16]	@ (8002488 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
}
 8002480:	4618      	mov	r0, r3
 8002482:	3730      	adds	r7, #48	@ 0x30
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	58024400 	.word	0x58024400
 800248c:	ffff0007 	.word	0xffff0007

08002490 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d101      	bne.n	80024a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e19c      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024a4:	4b8a      	ldr	r3, [pc, #552]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d910      	bls.n	80024d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024b2:	4b87      	ldr	r3, [pc, #540]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f023 020f 	bic.w	r2, r3, #15
 80024ba:	4985      	ldr	r1, [pc, #532]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	4313      	orrs	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b83      	ldr	r3, [pc, #524]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 030f 	and.w	r3, r3, #15
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e184      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d010      	beq.n	8002502 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	4b7b      	ldr	r3, [pc, #492]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024e6:	699b      	ldr	r3, [r3, #24]
 80024e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d908      	bls.n	8002502 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80024f0:	4b78      	ldr	r3, [pc, #480]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	4975      	ldr	r1, [pc, #468]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d010      	beq.n	8002530 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	4b70      	ldr	r3, [pc, #448]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002514:	69db      	ldr	r3, [r3, #28]
 8002516:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800251a:	429a      	cmp	r2, r3
 800251c:	d908      	bls.n	8002530 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800251e:	4b6d      	ldr	r3, [pc, #436]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	496a      	ldr	r1, [pc, #424]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800252c:	4313      	orrs	r3, r2
 800252e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0310 	and.w	r3, r3, #16
 8002538:	2b00      	cmp	r3, #0
 800253a:	d010      	beq.n	800255e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699a      	ldr	r2, [r3, #24]
 8002540:	4b64      	ldr	r3, [pc, #400]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002548:	429a      	cmp	r2, r3
 800254a:	d908      	bls.n	800255e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800254c:	4b61      	ldr	r3, [pc, #388]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	699b      	ldr	r3, [r3, #24]
 8002558:	495e      	ldr	r1, [pc, #376]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800255a:	4313      	orrs	r3, r2
 800255c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0320 	and.w	r3, r3, #32
 8002566:	2b00      	cmp	r3, #0
 8002568:	d010      	beq.n	800258c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	4b59      	ldr	r3, [pc, #356]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002576:	429a      	cmp	r2, r3
 8002578:	d908      	bls.n	800258c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800257a:	4b56      	ldr	r3, [pc, #344]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800257c:	6a1b      	ldr	r3, [r3, #32]
 800257e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	4953      	ldr	r1, [pc, #332]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002588:	4313      	orrs	r3, r2
 800258a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d010      	beq.n	80025ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68da      	ldr	r2, [r3, #12]
 800259c:	4b4d      	ldr	r3, [pc, #308]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800259e:	699b      	ldr	r3, [r3, #24]
 80025a0:	f003 030f 	and.w	r3, r3, #15
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d908      	bls.n	80025ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b4a      	ldr	r3, [pc, #296]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025aa:	699b      	ldr	r3, [r3, #24]
 80025ac:	f023 020f 	bic.w	r2, r3, #15
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4947      	ldr	r1, [pc, #284]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d055      	beq.n	8002672 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80025c6:	4b43      	ldr	r3, [pc, #268]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	4940      	ldr	r1, [pc, #256]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025e0:	4b3c      	ldr	r3, [pc, #240]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d121      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0f6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80025f8:	4b36      	ldr	r3, [pc, #216]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d115      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e0ea      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002610:	4b30      	ldr	r3, [pc, #192]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002618:	2b00      	cmp	r3, #0
 800261a:	d109      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0de      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e0d6      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002630:	4b28      	ldr	r3, [pc, #160]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	f023 0207 	bic.w	r2, r3, #7
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	4925      	ldr	r1, [pc, #148]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800263e:	4313      	orrs	r3, r2
 8002640:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002642:	f7fe fabf 	bl	8000bc4 <HAL_GetTick>
 8002646:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002648:	e00a      	b.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800264a:	f7fe fabb 	bl	8000bc4 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0be      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002662:	691b      	ldr	r3, [r3, #16]
 8002664:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	429a      	cmp	r2, r3
 8002670:	d1eb      	bne.n	800264a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d010      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	4b14      	ldr	r3, [pc, #80]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002684:	699b      	ldr	r3, [r3, #24]
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	429a      	cmp	r2, r3
 800268c:	d208      	bcs.n	80026a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	f023 020f 	bic.w	r2, r3, #15
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	490e      	ldr	r1, [pc, #56]	@ (80026d4 <HAL_RCC_ClockConfig+0x244>)
 800269c:	4313      	orrs	r3, r2
 800269e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b0b      	ldr	r3, [pc, #44]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d214      	bcs.n	80026d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b08      	ldr	r3, [pc, #32]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 020f 	bic.w	r2, r3, #15
 80026b6:	4906      	ldr	r1, [pc, #24]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <HAL_RCC_ClockConfig+0x240>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e086      	b.n	80027de <HAL_RCC_ClockConfig+0x34e>
 80026d0:	52002000 	.word	0x52002000
 80026d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d010      	beq.n	8002706 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691a      	ldr	r2, [r3, #16]
 80026e8:	4b3f      	ldr	r3, [pc, #252]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d208      	bcs.n	8002706 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026f4:	4b3c      	ldr	r3, [pc, #240]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	4939      	ldr	r1, [pc, #228]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002702:	4313      	orrs	r3, r2
 8002704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d010      	beq.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	695a      	ldr	r2, [r3, #20]
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800271e:	429a      	cmp	r2, r3
 8002720:	d208      	bcs.n	8002734 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002722:	4b31      	ldr	r3, [pc, #196]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	492e      	ldr	r1, [pc, #184]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002730:	4313      	orrs	r3, r2
 8002732:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	4b28      	ldr	r3, [pc, #160]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002746:	69db      	ldr	r3, [r3, #28]
 8002748:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800274c:	429a      	cmp	r2, r3
 800274e:	d208      	bcs.n	8002762 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002750:	4b25      	ldr	r3, [pc, #148]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4922      	ldr	r1, [pc, #136]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800275e:	4313      	orrs	r3, r2
 8002760:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69da      	ldr	r2, [r3, #28]
 8002772:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002774:	6a1b      	ldr	r3, [r3, #32]
 8002776:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800277a:	429a      	cmp	r2, r3
 800277c:	d208      	bcs.n	8002790 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002780:	6a1b      	ldr	r3, [r3, #32]
 8002782:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	4917      	ldr	r1, [pc, #92]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 800278c:	4313      	orrs	r3, r2
 800278e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002790:	f000 f834 	bl	80027fc <HAL_RCC_GetSysClockFreq>
 8002794:	4602      	mov	r2, r0
 8002796:	4b14      	ldr	r3, [pc, #80]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	0a1b      	lsrs	r3, r3, #8
 800279c:	f003 030f 	and.w	r3, r3, #15
 80027a0:	4912      	ldr	r1, [pc, #72]	@ (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027a2:	5ccb      	ldrb	r3, [r1, r3]
 80027a4:	f003 031f 	and.w	r3, r3, #31
 80027a8:	fa22 f303 	lsr.w	r3, r2, r3
 80027ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80027ae:	4b0e      	ldr	r3, [pc, #56]	@ (80027e8 <HAL_RCC_ClockConfig+0x358>)
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	4a0d      	ldr	r2, [pc, #52]	@ (80027ec <HAL_RCC_ClockConfig+0x35c>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
 80027ba:	f003 031f 	and.w	r3, r3, #31
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
 80027c4:	4a0a      	ldr	r2, [pc, #40]	@ (80027f0 <HAL_RCC_ClockConfig+0x360>)
 80027c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80027c8:	4a0a      	ldr	r2, [pc, #40]	@ (80027f4 <HAL_RCC_ClockConfig+0x364>)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80027ce:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x368>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7fe f9ac 	bl	8000b30 <HAL_InitTick>
 80027d8:	4603      	mov	r3, r0
 80027da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	58024400 	.word	0x58024400
 80027ec:	0800423c 	.word	0x0800423c
 80027f0:	24000004 	.word	0x24000004
 80027f4:	24000000 	.word	0x24000000
 80027f8:	24000008 	.word	0x24000008

080027fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002802:	4bb3      	ldr	r3, [pc, #716]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800280a:	2b18      	cmp	r3, #24
 800280c:	f200 8155 	bhi.w	8002aba <HAL_RCC_GetSysClockFreq+0x2be>
 8002810:	a201      	add	r2, pc, #4	@ (adr r2, 8002818 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002816:	bf00      	nop
 8002818:	0800287d 	.word	0x0800287d
 800281c:	08002abb 	.word	0x08002abb
 8002820:	08002abb 	.word	0x08002abb
 8002824:	08002abb 	.word	0x08002abb
 8002828:	08002abb 	.word	0x08002abb
 800282c:	08002abb 	.word	0x08002abb
 8002830:	08002abb 	.word	0x08002abb
 8002834:	08002abb 	.word	0x08002abb
 8002838:	080028a3 	.word	0x080028a3
 800283c:	08002abb 	.word	0x08002abb
 8002840:	08002abb 	.word	0x08002abb
 8002844:	08002abb 	.word	0x08002abb
 8002848:	08002abb 	.word	0x08002abb
 800284c:	08002abb 	.word	0x08002abb
 8002850:	08002abb 	.word	0x08002abb
 8002854:	08002abb 	.word	0x08002abb
 8002858:	080028a9 	.word	0x080028a9
 800285c:	08002abb 	.word	0x08002abb
 8002860:	08002abb 	.word	0x08002abb
 8002864:	08002abb 	.word	0x08002abb
 8002868:	08002abb 	.word	0x08002abb
 800286c:	08002abb 	.word	0x08002abb
 8002870:	08002abb 	.word	0x08002abb
 8002874:	08002abb 	.word	0x08002abb
 8002878:	080028af 	.word	0x080028af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800287c:	4b94      	ldr	r3, [pc, #592]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d009      	beq.n	800289c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002888:	4b91      	ldr	r3, [pc, #580]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	08db      	lsrs	r3, r3, #3
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	4a90      	ldr	r2, [pc, #576]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800289a:	e111      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800289c:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800289e:	61bb      	str	r3, [r7, #24]
      break;
 80028a0:	e10e      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80028a2:	4b8d      	ldr	r3, [pc, #564]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80028a4:	61bb      	str	r3, [r7, #24]
      break;
 80028a6:	e10b      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80028a8:	4b8c      	ldr	r3, [pc, #560]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80028aa:	61bb      	str	r3, [r7, #24]
      break;
 80028ac:	e108      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028ae:	4b88      	ldr	r3, [pc, #544]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80028b8:	4b85      	ldr	r3, [pc, #532]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80028c4:	4b82      	ldr	r3, [pc, #520]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80028ce:	4b80      	ldr	r3, [pc, #512]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	08db      	lsrs	r3, r3, #3
 80028d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	fb02 f303 	mul.w	r3, r2, r3
 80028de:	ee07 3a90 	vmov	s15, r3
 80028e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80e1 	beq.w	8002ab4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	f000 8083 	beq.w	8002a00 <HAL_RCC_GetSysClockFreq+0x204>
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f200 80a1 	bhi.w	8002a44 <HAL_RCC_GetSysClockFreq+0x248>
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x114>
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d056      	beq.n	80029bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800290e:	e099      	b.n	8002a44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002910:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0320 	and.w	r3, r3, #32
 8002918:	2b00      	cmp	r3, #0
 800291a:	d02d      	beq.n	8002978 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800291c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	08db      	lsrs	r3, r3, #3
 8002922:	f003 0303 	and.w	r3, r3, #3
 8002926:	4a6b      	ldr	r2, [pc, #428]	@ (8002ad4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
 800292c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	ee07 3a90 	vmov	s15, r3
 8002934:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	ee07 3a90 	vmov	s15, r3
 800293e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b62      	ldr	r3, [pc, #392]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a02 	vldr	s12, [r7, #8]
 800295a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002976:	e087      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ae4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298a:	4b51      	ldr	r3, [pc, #324]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	ed97 6a02 	vldr	s12, [r7, #8]
 800299e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ba:	e065      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	ee07 3a90 	vmov	s15, r3
 80029c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ce:	4b40      	ldr	r3, [pc, #256]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d6:	ee07 3a90 	vmov	s15, r3
 80029da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029de:	ed97 6a02 	vldr	s12, [r7, #8]
 80029e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029fe:	e043      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	ee07 3a90 	vmov	s15, r3
 8002a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a0a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002aec <HAL_RCC_GetSysClockFreq+0x2f0>
 8002a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a12:	4b2f      	ldr	r3, [pc, #188]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a1a:	ee07 3a90 	vmov	s15, r3
 8002a1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a26:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a42:	e021      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	ee07 3a90 	vmov	s15, r3
 8002a4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ae8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a56:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5e:	ee07 3a90 	vmov	s15, r3
 8002a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a66:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a6a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002ae0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a88:	4b11      	ldr	r3, [pc, #68]	@ (8002ad0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8c:	0a5b      	lsrs	r3, r3, #9
 8002a8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a92:	3301      	adds	r3, #1
 8002a94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002aa0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002aa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aac:	ee17 3a90 	vmov	r3, s15
 8002ab0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ab2:	e005      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	61bb      	str	r3, [r7, #24]
      break;
 8002ab8:	e002      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002aba:	4b07      	ldr	r3, [pc, #28]	@ (8002ad8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002abc:	61bb      	str	r3, [r7, #24]
      break;
 8002abe:	bf00      	nop
  }

  return sysclockfreq;
 8002ac0:	69bb      	ldr	r3, [r7, #24]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3724      	adds	r7, #36	@ 0x24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	03d09000 	.word	0x03d09000
 8002ad8:	003d0900 	.word	0x003d0900
 8002adc:	017d7840 	.word	0x017d7840
 8002ae0:	46000000 	.word	0x46000000
 8002ae4:	4c742400 	.word	0x4c742400
 8002ae8:	4a742400 	.word	0x4a742400
 8002aec:	4bbebc20 	.word	0x4bbebc20

08002af0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002af4:	b0ca      	sub	sp, #296	@ 0x128
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002afc:	2300      	movs	r3, #0
 8002afe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b02:	2300      	movs	r3, #0
 8002b04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002b14:	2500      	movs	r5, #0
 8002b16:	ea54 0305 	orrs.w	r3, r4, r5
 8002b1a:	d049      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b26:	d02f      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002b28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002b2c:	d828      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b32:	d01a      	beq.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002b34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b38:	d822      	bhi.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b42:	d007      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002b44:	e01c      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b46:	4bb8      	ldr	r3, [pc, #736]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4a:	4ab7      	ldr	r2, [pc, #732]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b52:	e01a      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b58:	3308      	adds	r3, #8
 8002b5a:	2102      	movs	r1, #2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 f9d1 	bl	8003f04 <RCCEx_PLL2_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b68:	e00f      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b6e:	3328      	adds	r3, #40	@ 0x28
 8002b70:	2102      	movs	r1, #2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f001 fa78 	bl	8004068 <RCCEx_PLL3_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002b7e:	e004      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b86:	e000      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10a      	bne.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002b92:	4ba5      	ldr	r3, [pc, #660]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ba0:	4aa1      	ldr	r2, [pc, #644]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ba6:	e003      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002bbc:	f04f 0900 	mov.w	r9, #0
 8002bc0:	ea58 0309 	orrs.w	r3, r8, r9
 8002bc4:	d047      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d82a      	bhi.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002bd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bd6:	bf00      	nop
 8002bd8:	08002bed 	.word	0x08002bed
 8002bdc:	08002bfb 	.word	0x08002bfb
 8002be0:	08002c11 	.word	0x08002c11
 8002be4:	08002c2f 	.word	0x08002c2f
 8002be8:	08002c2f 	.word	0x08002c2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bec:	4b8e      	ldr	r3, [pc, #568]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf0:	4a8d      	ldr	r2, [pc, #564]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002bf2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002bf8:	e01a      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfe:	3308      	adds	r3, #8
 8002c00:	2100      	movs	r1, #0
 8002c02:	4618      	mov	r0, r3
 8002c04:	f001 f97e 	bl	8003f04 <RCCEx_PLL2_Config>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c0e:	e00f      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c14:	3328      	adds	r3, #40	@ 0x28
 8002c16:	2100      	movs	r1, #0
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f001 fa25 	bl	8004068 <RCCEx_PLL3_Config>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002c24:	e004      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c2c:	e000      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10a      	bne.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c38:	4b7b      	ldr	r3, [pc, #492]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c3c:	f023 0107 	bic.w	r1, r3, #7
 8002c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c46:	4a78      	ldr	r2, [pc, #480]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c4c:	e003      	b.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002c62:	f04f 0b00 	mov.w	fp, #0
 8002c66:	ea5a 030b 	orrs.w	r3, sl, fp
 8002c6a:	d04c      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c76:	d030      	beq.n	8002cda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002c78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c7c:	d829      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c80:	d02d      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002c82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002c84:	d825      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c86:	2b80      	cmp	r3, #128	@ 0x80
 8002c88:	d018      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d821      	bhi.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002c92:	2b40      	cmp	r3, #64	@ 0x40
 8002c94:	d007      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002c96:	e01c      	b.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c98:	4b63      	ldr	r3, [pc, #396]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c9c:	4a62      	ldr	r2, [pc, #392]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ca4:	e01c      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002caa:	3308      	adds	r3, #8
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f001 f928 	bl	8003f04 <RCCEx_PLL2_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cba:	e011      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cc0:	3328      	adds	r3, #40	@ 0x28
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f001 f9cf 	bl	8004068 <RCCEx_PLL3_Config>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002cd0:	e006      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cda:	bf00      	nop
 8002cdc:	e000      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002cde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ce0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10a      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	4a4c      	ldr	r2, [pc, #304]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf8:	430b      	orrs	r3, r1
 8002cfa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002cfc:	e003      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002d12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002d16:	2300      	movs	r3, #0
 8002d18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002d1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002d20:	460b      	mov	r3, r1
 8002d22:	4313      	orrs	r3, r2
 8002d24:	d053      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002d2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d32:	d035      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002d34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002d38:	d82e      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d3e:	d031      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002d40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002d44:	d828      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d4a:	d01a      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002d4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d50:	d822      	bhi.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002d56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d5a:	d007      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002d5c:	e01c      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d5e:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d62:	4a31      	ldr	r2, [pc, #196]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d6a:	e01c      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d70:	3308      	adds	r3, #8
 8002d72:	2100      	movs	r1, #0
 8002d74:	4618      	mov	r0, r3
 8002d76:	f001 f8c5 	bl	8003f04 <RCCEx_PLL2_Config>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002d80:	e011      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d86:	3328      	adds	r3, #40	@ 0x28
 8002d88:	2100      	movs	r1, #0
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f96c 	bl	8004068 <RCCEx_PLL3_Config>
 8002d90:	4603      	mov	r3, r0
 8002d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d96:	e006      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d9e:	e002      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d10b      	bne.n	8002dc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002dae:	4b1e      	ldr	r3, [pc, #120]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dc0:	430b      	orrs	r3, r1
 8002dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dc4:	e003      	b.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002dda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002dde:	2300      	movs	r3, #0
 8002de0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002de4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002de8:	460b      	mov	r3, r1
 8002dea:	4313      	orrs	r3, r2
 8002dec:	d056      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002df2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002df6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002dfa:	d038      	beq.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002dfc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e00:	d831      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e06:	d034      	beq.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002e08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e0c:	d82b      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e12:	d01d      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002e14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e18:	d825      	bhi.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002e1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002e24:	e01f      	b.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e2c:	4ba2      	ldr	r3, [pc, #648]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	4aa1      	ldr	r2, [pc, #644]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e38:	e01c      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e3e:	3308      	adds	r3, #8
 8002e40:	2100      	movs	r1, #0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f001 f85e 	bl	8003f04 <RCCEx_PLL2_Config>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002e4e:	e011      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e54:	3328      	adds	r3, #40	@ 0x28
 8002e56:	2100      	movs	r1, #0
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 f905 	bl	8004068 <RCCEx_PLL3_Config>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e64:	e006      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e6c:	e002      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e6e:	bf00      	nop
 8002e70:	e000      	b.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002e7c:	4b8e      	ldr	r3, [pc, #568]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002e8c:	4a8a      	ldr	r2, [pc, #552]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002e8e:	430b      	orrs	r3, r1
 8002e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e92:	e003      	b.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ea4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002ea8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002eac:	2300      	movs	r3, #0
 8002eae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002eb2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	d03a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	2b30      	cmp	r3, #48	@ 0x30
 8002ec4:	d01f      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002ec6:	2b30      	cmp	r3, #48	@ 0x30
 8002ec8:	d819      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d00c      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002ece:	2b20      	cmp	r3, #32
 8002ed0:	d815      	bhi.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d019      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002ed6:	2b10      	cmp	r3, #16
 8002ed8:	d111      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002eda:	4b77      	ldr	r3, [pc, #476]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ede:	4a76      	ldr	r2, [pc, #472]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ee0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002ee6:	e011      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eec:	3308      	adds	r3, #8
 8002eee:	2102      	movs	r1, #2
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 f807 	bl	8003f04 <RCCEx_PLL2_Config>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002efc:	e006      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002f0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f14:	4b68      	ldr	r3, [pc, #416]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f22:	4a65      	ldr	r2, [pc, #404]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f24:	430b      	orrs	r3, r1
 8002f26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f28:	e003      	b.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002f3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002f42:	2300      	movs	r3, #0
 8002f44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002f48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	d051      	beq.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f5c:	d035      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002f5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f62:	d82e      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f68:	d031      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002f6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002f6e:	d828      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f74:	d01a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002f76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002f7a:	d822      	bhi.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d003      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f84:	d007      	beq.n	8002f96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002f86:	e01c      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f88:	4b4b      	ldr	r3, [pc, #300]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8c:	4a4a      	ldr	r2, [pc, #296]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002f94:	e01c      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f9a:	3308      	adds	r3, #8
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f000 ffb0 	bl	8003f04 <RCCEx_PLL2_Config>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002faa:	e011      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fb0:	3328      	adds	r3, #40	@ 0x28
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f001 f857 	bl	8004068 <RCCEx_PLL3_Config>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002fc0:	e006      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fc8:	e002      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fca:	bf00      	nop
 8002fcc:	e000      	b.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d10a      	bne.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002fd8:	4b37      	ldr	r3, [pc, #220]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fe4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fe6:	4a34      	ldr	r2, [pc, #208]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6513      	str	r3, [r2, #80]	@ 0x50
 8002fec:	e003      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ff2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003006:	2300      	movs	r3, #0
 8003008:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800300c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003010:	460b      	mov	r3, r1
 8003012:	4313      	orrs	r3, r2
 8003014:	d056      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800301a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800301c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003020:	d033      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003022:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003026:	d82c      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003028:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800302c:	d02f      	beq.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800302e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003032:	d826      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003034:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003038:	d02b      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800303a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800303e:	d820      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003040:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003044:	d012      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003046:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800304a:	d81a      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d022      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d115      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800305a:	3308      	adds	r3, #8
 800305c:	2101      	movs	r1, #1
 800305e:	4618      	mov	r0, r3
 8003060:	f000 ff50 	bl	8003f04 <RCCEx_PLL2_Config>
 8003064:	4603      	mov	r3, r0
 8003066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800306a:	e015      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003070:	3328      	adds	r3, #40	@ 0x28
 8003072:	2101      	movs	r1, #1
 8003074:	4618      	mov	r0, r3
 8003076:	f000 fff7 	bl	8004068 <RCCEx_PLL3_Config>
 800307a:	4603      	mov	r3, r0
 800307c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003080:	e00a      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003088:	e006      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800308a:	bf00      	nop
 800308c:	e004      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800308e:	bf00      	nop
 8003090:	e002      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003092:	bf00      	nop
 8003094:	e000      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003096:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10d      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80030a0:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80030a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030ae:	4a02      	ldr	r2, [pc, #8]	@ (80030b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030b0:	430b      	orrs	r3, r1
 80030b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80030b4:	e006      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80030b6:	bf00      	nop
 80030b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80030c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80030c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80030d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030d4:	2300      	movs	r3, #0
 80030d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80030da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80030de:	460b      	mov	r3, r1
 80030e0:	4313      	orrs	r3, r2
 80030e2:	d055      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80030ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030f0:	d033      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030f6:	d82c      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80030f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030fc:	d02f      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003102:	d826      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003108:	d02b      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800310a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800310e:	d820      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003114:	d012      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003116:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800311a:	d81a      	bhi.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d022      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003120:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003124:	d115      	bne.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800312a:	3308      	adds	r3, #8
 800312c:	2101      	movs	r1, #1
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fee8 	bl	8003f04 <RCCEx_PLL2_Config>
 8003134:	4603      	mov	r3, r0
 8003136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800313a:	e015      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800313c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003140:	3328      	adds	r3, #40	@ 0x28
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 ff8f 	bl	8004068 <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003150:	e00a      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003158:	e006      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800315a:	bf00      	nop
 800315c:	e004      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800315e:	bf00      	nop
 8003160:	e002      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003166:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003168:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800316c:	2b00      	cmp	r3, #0
 800316e:	d10b      	bne.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003170:	4ba3      	ldr	r3, [pc, #652]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003174:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003178:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003180:	4a9f      	ldr	r2, [pc, #636]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003182:	430b      	orrs	r3, r1
 8003184:	6593      	str	r3, [r2, #88]	@ 0x58
 8003186:	e003      	b.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003188:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800318c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003198:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800319c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80031a0:	2300      	movs	r3, #0
 80031a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80031a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80031aa:	460b      	mov	r3, r1
 80031ac:	4313      	orrs	r3, r2
 80031ae:	d037      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031ba:	d00e      	beq.n	80031da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031c0:	d816      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d018      	beq.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80031c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031ca:	d111      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80031d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031d8:	e00f      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031de:	3308      	adds	r3, #8
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 fe8e 	bl	8003f04 <RCCEx_PLL2_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80031ee:	e004      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80031f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003202:	4b7f      	ldr	r3, [pc, #508]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003204:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003206:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003210:	4a7b      	ldr	r2, [pc, #492]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003212:	430b      	orrs	r3, r1
 8003214:	6513      	str	r3, [r2, #80]	@ 0x50
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800321c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800322c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003236:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800323a:	460b      	mov	r3, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	d039      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003246:	2b03      	cmp	r3, #3
 8003248:	d81c      	bhi.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800324a:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	0800328d 	.word	0x0800328d
 8003254:	08003261 	.word	0x08003261
 8003258:	0800326f 	.word	0x0800326f
 800325c:	0800328d 	.word	0x0800328d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4b67      	ldr	r3, [pc, #412]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003264:	4a66      	ldr	r2, [pc, #408]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003266:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800326c:	e00f      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800326e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003272:	3308      	adds	r3, #8
 8003274:	2102      	movs	r1, #2
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fe44 	bl	8003f04 <RCCEx_PLL2_Config>
 800327c:	4603      	mov	r3, r0
 800327e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003282:	e004      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800328c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10a      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003296:	4b5a      	ldr	r3, [pc, #360]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800329a:	f023 0103 	bic.w	r1, r3, #3
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032a4:	4a56      	ldr	r2, [pc, #344]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80032a6:	430b      	orrs	r3, r1
 80032a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032aa:	e003      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80032c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032c4:	2300      	movs	r3, #0
 80032c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80032ce:	460b      	mov	r3, r1
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f000 809f 	beq.w	8003414 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a4a      	ldr	r2, [pc, #296]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032e2:	f7fd fc6f 	bl	8000bc4 <HAL_GetTick>
 80032e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80032ea:	e00b      	b.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032ec:	f7fd fc6a 	bl	8000bc4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b64      	cmp	r3, #100	@ 0x64
 80032fa:	d903      	bls.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003302:	e005      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003304:	4b3f      	ldr	r3, [pc, #252]	@ (8003404 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d0ed      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003314:	2b00      	cmp	r3, #0
 8003316:	d179      	bne.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003318:	4b39      	ldr	r3, [pc, #228]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800331a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003320:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003324:	4053      	eors	r3, r2
 8003326:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800332a:	2b00      	cmp	r3, #0
 800332c:	d015      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800332e:	4b34      	ldr	r3, [pc, #208]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003332:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003336:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800333a:	4b31      	ldr	r3, [pc, #196]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	4a30      	ldr	r2, [pc, #192]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003344:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003346:	4b2e      	ldr	r3, [pc, #184]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800334a:	4a2d      	ldr	r2, [pc, #180]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800334c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003350:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003352:	4a2b      	ldr	r2, [pc, #172]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003354:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003358:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800335e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003366:	d118      	bne.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003368:	f7fd fc2c 	bl	8000bc4 <HAL_GetTick>
 800336c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003370:	e00d      	b.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003372:	f7fd fc27 	bl	8000bc4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800337c:	1ad2      	subs	r2, r2, r3
 800337e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003382:	429a      	cmp	r2, r3
 8003384:	d903      	bls.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800338c:	e005      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800338e:	4b1c      	ldr	r3, [pc, #112]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0eb      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800339a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d129      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b2:	d10e      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80033b4:	4b12      	ldr	r3, [pc, #72]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033c4:	091a      	lsrs	r2, r3, #4
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033cc:	430b      	orrs	r3, r1
 80033ce:	6113      	str	r3, [r2, #16]
 80033d0:	e005      	b.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80033d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d4:	691b      	ldr	r3, [r3, #16]
 80033d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80033dc:	6113      	str	r3, [r2, #16]
 80033de:	4b08      	ldr	r3, [pc, #32]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80033e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80033ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ee:	4a04      	ldr	r2, [pc, #16]	@ (8003400 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80033f4:	e00e      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80033f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80033fe:	e009      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003400:	58024400 	.word	0x58024400
 8003404:	58024800 	.word	0x58024800
 8003408:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800340c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800341c:	f002 0301 	and.w	r3, r2, #1
 8003420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800342a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800342e:	460b      	mov	r3, r1
 8003430:	4313      	orrs	r3, r2
 8003432:	f000 8089 	beq.w	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800343c:	2b28      	cmp	r3, #40	@ 0x28
 800343e:	d86b      	bhi.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003440:	a201      	add	r2, pc, #4	@ (adr r2, 8003448 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003446:	bf00      	nop
 8003448:	08003521 	.word	0x08003521
 800344c:	08003519 	.word	0x08003519
 8003450:	08003519 	.word	0x08003519
 8003454:	08003519 	.word	0x08003519
 8003458:	08003519 	.word	0x08003519
 800345c:	08003519 	.word	0x08003519
 8003460:	08003519 	.word	0x08003519
 8003464:	08003519 	.word	0x08003519
 8003468:	080034ed 	.word	0x080034ed
 800346c:	08003519 	.word	0x08003519
 8003470:	08003519 	.word	0x08003519
 8003474:	08003519 	.word	0x08003519
 8003478:	08003519 	.word	0x08003519
 800347c:	08003519 	.word	0x08003519
 8003480:	08003519 	.word	0x08003519
 8003484:	08003519 	.word	0x08003519
 8003488:	08003503 	.word	0x08003503
 800348c:	08003519 	.word	0x08003519
 8003490:	08003519 	.word	0x08003519
 8003494:	08003519 	.word	0x08003519
 8003498:	08003519 	.word	0x08003519
 800349c:	08003519 	.word	0x08003519
 80034a0:	08003519 	.word	0x08003519
 80034a4:	08003519 	.word	0x08003519
 80034a8:	08003521 	.word	0x08003521
 80034ac:	08003519 	.word	0x08003519
 80034b0:	08003519 	.word	0x08003519
 80034b4:	08003519 	.word	0x08003519
 80034b8:	08003519 	.word	0x08003519
 80034bc:	08003519 	.word	0x08003519
 80034c0:	08003519 	.word	0x08003519
 80034c4:	08003519 	.word	0x08003519
 80034c8:	08003521 	.word	0x08003521
 80034cc:	08003519 	.word	0x08003519
 80034d0:	08003519 	.word	0x08003519
 80034d4:	08003519 	.word	0x08003519
 80034d8:	08003519 	.word	0x08003519
 80034dc:	08003519 	.word	0x08003519
 80034e0:	08003519 	.word	0x08003519
 80034e4:	08003519 	.word	0x08003519
 80034e8:	08003521 	.word	0x08003521
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80034ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f0:	3308      	adds	r3, #8
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fd05 	bl	8003f04 <RCCEx_PLL2_Config>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003500:	e00f      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	3328      	adds	r3, #40	@ 0x28
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f000 fdac 	bl	8004068 <RCCEx_PLL3_Config>
 8003510:	4603      	mov	r3, r0
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003516:	e004      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351e:	e000      	b.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10a      	bne.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800352a:	4bbf      	ldr	r3, [pc, #764]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800352c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800352e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003538:	4abb      	ldr	r2, [pc, #748]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800353a:	430b      	orrs	r3, r1
 800353c:	6553      	str	r3, [r2, #84]	@ 0x54
 800353e:	e003      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003540:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003550:	f002 0302 	and.w	r3, r2, #2
 8003554:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003558:	2300      	movs	r3, #0
 800355a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800355e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003562:	460b      	mov	r3, r1
 8003564:	4313      	orrs	r3, r2
 8003566:	d041      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003568:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800356e:	2b05      	cmp	r3, #5
 8003570:	d824      	bhi.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003572:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003578:	080035c5 	.word	0x080035c5
 800357c:	08003591 	.word	0x08003591
 8003580:	080035a7 	.word	0x080035a7
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035c5 	.word	0x080035c5
 800358c:	080035c5 	.word	0x080035c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003594:	3308      	adds	r3, #8
 8003596:	2101      	movs	r1, #1
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fcb3 	bl	8003f04 <RCCEx_PLL2_Config>
 800359e:	4603      	mov	r3, r0
 80035a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035a4:	e00f      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035aa:	3328      	adds	r3, #40	@ 0x28
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 fd5a 	bl	8004068 <RCCEx_PLL3_Config>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80035ba:	e004      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c2:	e000      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80035c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80035ce:	4b96      	ldr	r3, [pc, #600]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035d2:	f023 0107 	bic.w	r1, r3, #7
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80035dc:	4a92      	ldr	r2, [pc, #584]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80035de:	430b      	orrs	r3, r1
 80035e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80035e2:	e003      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f4:	f002 0304 	and.w	r3, r2, #4
 80035f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80035fc:	2300      	movs	r3, #0
 80035fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003602:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003606:	460b      	mov	r3, r1
 8003608:	4313      	orrs	r3, r2
 800360a:	d044      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003614:	2b05      	cmp	r3, #5
 8003616:	d825      	bhi.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003618:	a201      	add	r2, pc, #4	@ (adr r2, 8003620 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800361a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800361e:	bf00      	nop
 8003620:	0800366d 	.word	0x0800366d
 8003624:	08003639 	.word	0x08003639
 8003628:	0800364f 	.word	0x0800364f
 800362c:	0800366d 	.word	0x0800366d
 8003630:	0800366d 	.word	0x0800366d
 8003634:	0800366d 	.word	0x0800366d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	3308      	adds	r3, #8
 800363e:	2101      	movs	r1, #1
 8003640:	4618      	mov	r0, r3
 8003642:	f000 fc5f 	bl	8003f04 <RCCEx_PLL2_Config>
 8003646:	4603      	mov	r3, r0
 8003648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800364c:	e00f      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	3328      	adds	r3, #40	@ 0x28
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fd06 	bl	8004068 <RCCEx_PLL3_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003662:	e004      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003664:	2301      	movs	r3, #1
 8003666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800366a:	e000      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800366c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800366e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10b      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003676:	4b6c      	ldr	r3, [pc, #432]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003678:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800367a:	f023 0107 	bic.w	r1, r3, #7
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003686:	4a68      	ldr	r2, [pc, #416]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003688:	430b      	orrs	r3, r1
 800368a:	6593      	str	r3, [r2, #88]	@ 0x58
 800368c:	e003      	b.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800368e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003692:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800369e:	f002 0320 	and.w	r3, r2, #32
 80036a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036a6:	2300      	movs	r3, #0
 80036a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036b0:	460b      	mov	r3, r1
 80036b2:	4313      	orrs	r3, r2
 80036b4:	d055      	beq.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c2:	d033      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80036c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036c8:	d82c      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ce:	d02f      	beq.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036d4:	d826      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036da:	d02b      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80036dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80036e0:	d820      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036e6:	d012      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80036e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036ec:	d81a      	bhi.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d022      	beq.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80036f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036f6:	d115      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	3308      	adds	r3, #8
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 fbff 	bl	8003f04 <RCCEx_PLL2_Config>
 8003706:	4603      	mov	r3, r0
 8003708:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800370c:	e015      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	3328      	adds	r3, #40	@ 0x28
 8003714:	2102      	movs	r1, #2
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fca6 	bl	8004068 <RCCEx_PLL3_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003722:	e00a      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800372a:	e006      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800372c:	bf00      	nop
 800372e:	e004      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003730:	bf00      	nop
 8003732:	e002      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003734:	bf00      	nop
 8003736:	e000      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800373a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800373e:	2b00      	cmp	r3, #0
 8003740:	d10b      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003742:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003746:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003752:	4a35      	ldr	r2, [pc, #212]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003754:	430b      	orrs	r3, r1
 8003756:	6553      	str	r3, [r2, #84]	@ 0x54
 8003758:	e003      	b.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800375e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800376e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003772:	2300      	movs	r3, #0
 8003774:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003778:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800377c:	460b      	mov	r3, r1
 800377e:	4313      	orrs	r3, r2
 8003780:	d058      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003786:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800378a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800378e:	d033      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003790:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003794:	d82c      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800379a:	d02f      	beq.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	d826      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037a6:	d02b      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80037a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80037ac:	d820      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037b2:	d012      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80037b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037b8:	d81a      	bhi.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d022      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80037be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037c2:	d115      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	3308      	adds	r3, #8
 80037ca:	2100      	movs	r1, #0
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fb99 	bl	8003f04 <RCCEx_PLL2_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037d8:	e015      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	3328      	adds	r3, #40	@ 0x28
 80037e0:	2102      	movs	r1, #2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f000 fc40 	bl	8004068 <RCCEx_PLL3_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80037ee:	e00a      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f6:	e006      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037f8:	bf00      	nop
 80037fa:	e004      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80037fc:	bf00      	nop
 80037fe:	e002      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003800:	bf00      	nop
 8003802:	e000      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003804:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380a:	2b00      	cmp	r3, #0
 800380c:	d10e      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800380e:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003812:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800381e:	4a02      	ldr	r2, [pc, #8]	@ (8003828 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003820:	430b      	orrs	r3, r1
 8003822:	6593      	str	r3, [r2, #88]	@ 0x58
 8003824:	e006      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003826:	bf00      	nop
 8003828:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003840:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800384a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	d055      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800385c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003860:	d033      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003862:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003866:	d82c      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003868:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800386c:	d02f      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800386e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003872:	d826      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003874:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003878:	d02b      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800387a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800387e:	d820      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003880:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003884:	d012      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003886:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800388a:	d81a      	bhi.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d022      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003890:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003894:	d115      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	3308      	adds	r3, #8
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 fb30 	bl	8003f04 <RCCEx_PLL2_Config>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038aa:	e015      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	3328      	adds	r3, #40	@ 0x28
 80038b2:	2102      	movs	r1, #2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 fbd7 	bl	8004068 <RCCEx_PLL3_Config>
 80038ba:	4603      	mov	r3, r0
 80038bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80038c0:	e00a      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038c8:	e006      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ca:	bf00      	nop
 80038cc:	e004      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038ce:	bf00      	nop
 80038d0:	e002      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038d2:	bf00      	nop
 80038d4:	e000      	b.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80038d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10b      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80038e0:	4ba1      	ldr	r3, [pc, #644]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038f0:	4a9d      	ldr	r2, [pc, #628]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 0308 	and.w	r3, r2, #8
 800390c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003916:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d01e      	beq.n	800395e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800392c:	d10c      	bne.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	3328      	adds	r3, #40	@ 0x28
 8003934:	2102      	movs	r1, #2
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fb96 	bl	8004068 <RCCEx_PLL3_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003948:	4b87      	ldr	r3, [pc, #540]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800394a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003958:	4a83      	ldr	r2, [pc, #524]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800395a:	430b      	orrs	r3, r1
 800395c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800395e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003966:	f002 0310 	and.w	r3, r2, #16
 800396a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800396e:	2300      	movs	r3, #0
 8003970:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003974:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003978:	460b      	mov	r3, r1
 800397a:	4313      	orrs	r3, r2
 800397c:	d01e      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003986:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800398a:	d10c      	bne.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003990:	3328      	adds	r3, #40	@ 0x28
 8003992:	2102      	movs	r1, #2
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fb67 	bl	8004068 <RCCEx_PLL3_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d002      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80039a6:	4b70      	ldr	r3, [pc, #448]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80039ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80039b6:	4a6c      	ldr	r2, [pc, #432]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80039b8:	430b      	orrs	r3, r1
 80039ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80039c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80039d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80039d6:	460b      	mov	r3, r1
 80039d8:	4313      	orrs	r3, r2
 80039da:	d03e      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80039dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039e8:	d022      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80039ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ee:	d81b      	bhi.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f8:	d00b      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80039fa:	e015      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	3308      	adds	r3, #8
 8003a02:	2100      	movs	r1, #0
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa7d 	bl	8003f04 <RCCEx_PLL2_Config>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a10:	e00f      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	2102      	movs	r1, #2
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 fb24 	bl	8004068 <RCCEx_PLL3_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003a30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10b      	bne.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003a4a:	4a47      	ldr	r2, [pc, #284]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a4c:	430b      	orrs	r3, r1
 8003a4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a50:	e003      	b.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003a66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003a68:	2300      	movs	r3, #0
 8003a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003a6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d03b      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a82:	d01f      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003a84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003a88:	d818      	bhi.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003a8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a8e:	d003      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003a90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003a94:	d007      	beq.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003a96:	e011      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a98:	4b33      	ldr	r3, [pc, #204]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a9c:	4a32      	ldr	r2, [pc, #200]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aa4:	e00f      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aaa:	3328      	adds	r3, #40	@ 0x28
 8003aac:	2101      	movs	r1, #1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f000 fada 	bl	8004068 <RCCEx_PLL3_Config>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003aba:	e004      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac2:	e000      	b.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003ac4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10b      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ace:	4b26      	ldr	r3, [pc, #152]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	4a22      	ldr	r2, [pc, #136]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ae4:	e003      	b.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003afa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003afc:	2300      	movs	r3, #0
 8003afe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003b04:	460b      	mov	r3, r1
 8003b06:	4313      	orrs	r3, r2
 8003b08:	d034      	beq.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003b14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b18:	d007      	beq.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003b1a:	e011      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1c:	4b12      	ldr	r3, [pc, #72]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b28:	e00e      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	3308      	adds	r3, #8
 8003b30:	2102      	movs	r1, #2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f9e6 	bl	8003f04 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003b3e:	e003      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003b50:	4b05      	ldr	r3, [pc, #20]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b5e:	4a02      	ldr	r2, [pc, #8]	@ (8003b68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b60:	430b      	orrs	r3, r1
 8003b62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b64:	e006      	b.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003b66:	bf00      	nop
 8003b68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b82:	2300      	movs	r3, #0
 8003b84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	d00c      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b94:	3328      	adds	r3, #40	@ 0x28
 8003b96:	2102      	movs	r1, #2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fa65 	bl	8004068 <RCCEx_PLL3_Config>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003baa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003bb6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bb8:	2300      	movs	r3, #0
 8003bba:	667b      	str	r3, [r7, #100]	@ 0x64
 8003bbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	d038      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd2:	d018      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003bd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bd8:	d811      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003bda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bde:	d014      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003be4:	d80b      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d011      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003bea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bee:	d106      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bf0:	4bc3      	ldr	r3, [pc, #780]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf4:	4ac2      	ldr	r2, [pc, #776]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003bf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003bfc:	e008      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c04:	e004      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c06:	bf00      	nop
 8003c08:	e002      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e000      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003c0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c18:	4bb9      	ldr	r3, [pc, #740]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c28:	4ab5      	ldr	r2, [pc, #724]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c2e:	e003      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003c44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003c46:	2300      	movs	r3, #0
 8003c48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003c4e:	460b      	mov	r3, r1
 8003c50:	4313      	orrs	r3, r2
 8003c52:	d009      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003c54:	4baa      	ldr	r3, [pc, #680]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c62:	4aa7      	ldr	r2, [pc, #668]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c64:	430b      	orrs	r3, r1
 8003c66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003c74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003c76:	2300      	movs	r3, #0
 8003c78:	657b      	str	r3, [r7, #84]	@ 0x54
 8003c7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d00a      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003c84:	4b9e      	ldr	r3, [pc, #632]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003c94:	4a9a      	ldr	r2, [pc, #616]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003c9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	d009      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003cb6:	4b92      	ldr	r3, [pc, #584]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003cba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cc4:	4a8e      	ldr	r2, [pc, #568]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003cd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cd8:	2300      	movs	r3, #0
 8003cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cdc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	d00e      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ce6:	4b86      	ldr	r3, [pc, #536]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	4a85      	ldr	r2, [pc, #532]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cf0:	6113      	str	r3, [r2, #16]
 8003cf2:	4b83      	ldr	r3, [pc, #524]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003cf4:	6919      	ldr	r1, [r3, #16]
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003cfe:	4a80      	ldr	r2, [pc, #512]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d00:	430b      	orrs	r3, r1
 8003d02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003d10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d12:	2300      	movs	r3, #0
 8003d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003d20:	4b77      	ldr	r3, [pc, #476]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2e:	4a74      	ldr	r2, [pc, #464]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d30:	430b      	orrs	r3, r1
 8003d32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003d46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	d00a      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d50:	4b6b      	ldr	r3, [pc, #428]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d60:	4a67      	ldr	r2, [pc, #412]	@ (8003f00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d62:	430b      	orrs	r3, r1
 8003d64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6e:	2100      	movs	r1, #0
 8003d70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	d011      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d86:	3308      	adds	r3, #8
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 f8ba 	bl	8003f04 <RCCEx_PLL2_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d003      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dae:	2100      	movs	r1, #0
 8003db0:	6239      	str	r1, [r7, #32]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003db8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	d011      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	3308      	adds	r3, #8
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f89a 	bl	8003f04 <RCCEx_PLL2_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d003      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	2100      	movs	r1, #0
 8003df0:	61b9      	str	r1, [r7, #24]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	61fb      	str	r3, [r7, #28]
 8003df8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	d011      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e06:	3308      	adds	r3, #8
 8003e08:	2102      	movs	r1, #2
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f87a 	bl	8003f04 <RCCEx_PLL2_Config>
 8003e10:	4603      	mov	r3, r0
 8003e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d003      	beq.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e2e:	2100      	movs	r1, #0
 8003e30:	6139      	str	r1, [r7, #16]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	617b      	str	r3, [r7, #20]
 8003e38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	d011      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	3328      	adds	r3, #40	@ 0x28
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 f90c 	bl	8004068 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d003      	beq.n	8003e66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	2100      	movs	r1, #0
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	f003 0310 	and.w	r3, r3, #16
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	d011      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e86:	3328      	adds	r3, #40	@ 0x28
 8003e88:	2101      	movs	r1, #1
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f8ec 	bl	8004068 <RCCEx_PLL3_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003e96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ea2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	6039      	str	r1, [r7, #0]
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	607b      	str	r3, [r7, #4]
 8003eb8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	d011      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	3328      	adds	r3, #40	@ 0x28
 8003ec8:	2102      	movs	r1, #2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f8cc 	bl	8004068 <RCCEx_PLL3_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003ed6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d003      	beq.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8003ee6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d101      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	e000      	b.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8003efa:	46bd      	mov	sp, r7
 8003efc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f00:	58024400 	.word	0x58024400

08003f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003f12:	4b53      	ldr	r3, [pc, #332]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f16:	f003 0303 	and.w	r3, r3, #3
 8003f1a:	2b03      	cmp	r3, #3
 8003f1c:	d101      	bne.n	8003f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e099      	b.n	8004056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003f22:	4b4f      	ldr	r3, [pc, #316]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a4e      	ldr	r2, [pc, #312]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f28:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f2e:	f7fc fe49 	bl	8000bc4 <HAL_GetTick>
 8003f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f34:	e008      	b.n	8003f48 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f36:	f7fc fe45 	bl	8000bc4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e086      	b.n	8004056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003f48:	4b45      	ldr	r3, [pc, #276]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d1f0      	bne.n	8003f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003f54:	4b42      	ldr	r3, [pc, #264]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f58:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	493f      	ldr	r1, [pc, #252]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	628b      	str	r3, [r1, #40]	@ 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	3b01      	subs	r3, #1
 8003f78:	025b      	lsls	r3, r3, #9
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	3b01      	subs	r3, #1
 8003f92:	061b      	lsls	r3, r3, #24
 8003f94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f98:	4931      	ldr	r1, [pc, #196]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f9e:	4b30      	ldr	r3, [pc, #192]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	492d      	ldr	r1, [pc, #180]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb4:	f023 0220 	bic.w	r2, r3, #32
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4928      	ldr	r1, [pc, #160]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003fc2:	4b27      	ldr	r3, [pc, #156]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fc6:	4a26      	ldr	r2, [pc, #152]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fc8:	f023 0310 	bic.w	r3, r3, #16
 8003fcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003fce:	4b24      	ldr	r3, [pc, #144]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003fd2:	4b24      	ldr	r3, [pc, #144]	@ (8004064 <RCCEx_PLL2_Config+0x160>)
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	69d2      	ldr	r2, [r2, #28]
 8003fda:	00d2      	lsls	r2, r2, #3
 8003fdc:	4920      	ldr	r1, [pc, #128]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003fe2:	4b1f      	ldr	r3, [pc, #124]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003fe8:	f043 0310 	orr.w	r3, r3, #16
 8003fec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d106      	bne.n	8004002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	4a19      	ldr	r2, [pc, #100]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8003ffa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003ffe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004000:	e00f      	b.n	8004022 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d106      	bne.n	8004016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004008:	4b15      	ldr	r3, [pc, #84]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 800400a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800400c:	4a14      	ldr	r2, [pc, #80]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 800400e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004014:	e005      	b.n	8004022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004016:	4b12      	ldr	r3, [pc, #72]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8004018:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401a:	4a11      	ldr	r2, [pc, #68]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 800401c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004020:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004022:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a0e      	ldr	r2, [pc, #56]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 8004028:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800402c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402e:	f7fc fdc9 	bl	8000bc4 <HAL_GetTick>
 8004032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004034:	e008      	b.n	8004048 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004036:	f7fc fdc5 	bl	8000bc4 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e006      	b.n	8004056 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004048:	4b05      	ldr	r3, [pc, #20]	@ (8004060 <RCCEx_PLL2_Config+0x15c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004054:	7bfb      	ldrb	r3, [r7, #15]
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	58024400 	.word	0x58024400
 8004064:	ffff0007 	.word	0xffff0007

08004068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004076:	4b53      	ldr	r3, [pc, #332]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	2b03      	cmp	r3, #3
 8004080:	d101      	bne.n	8004086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e099      	b.n	80041ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004086:	4b4f      	ldr	r3, [pc, #316]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a4e      	ldr	r2, [pc, #312]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800408c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004092:	f7fc fd97 	bl	8000bc4 <HAL_GetTick>
 8004096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004098:	e008      	b.n	80040ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800409a:	f7fc fd93 	bl	8000bc4 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e086      	b.n	80041ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80040ac:	4b45      	ldr	r3, [pc, #276]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1f0      	bne.n	800409a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80040b8:	4b42      	ldr	r3, [pc, #264]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	051b      	lsls	r3, r3, #20
 80040c6:	493f      	ldr	r1, [pc, #252]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	3b01      	subs	r3, #1
 80040dc:	025b      	lsls	r3, r3, #9
 80040de:	b29b      	uxth	r3, r3
 80040e0:	431a      	orrs	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	041b      	lsls	r3, r3, #16
 80040ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	3b01      	subs	r3, #1
 80040f6:	061b      	lsls	r3, r3, #24
 80040f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80040fc:	4931      	ldr	r1, [pc, #196]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 80040fe:	4313      	orrs	r3, r2
 8004100:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004102:	4b30      	ldr	r3, [pc, #192]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004106:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	492d      	ldr	r1, [pc, #180]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004110:	4313      	orrs	r3, r2
 8004112:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004114:	4b2b      	ldr	r3, [pc, #172]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	4928      	ldr	r1, [pc, #160]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004122:	4313      	orrs	r3, r2
 8004124:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004126:	4b27      	ldr	r3, [pc, #156]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004128:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412a:	4a26      	ldr	r2, [pc, #152]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800412c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004130:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004132:	4b24      	ldr	r3, [pc, #144]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004136:	4b24      	ldr	r3, [pc, #144]	@ (80041c8 <RCCEx_PLL3_Config+0x160>)
 8004138:	4013      	ands	r3, r2
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	69d2      	ldr	r2, [r2, #28]
 800413e:	00d2      	lsls	r2, r2, #3
 8004140:	4920      	ldr	r1, [pc, #128]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004142:	4313      	orrs	r3, r2
 8004144:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004146:	4b1f      	ldr	r3, [pc, #124]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800414a:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004150:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004158:	4b1a      	ldr	r3, [pc, #104]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800415a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415c:	4a19      	ldr	r2, [pc, #100]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800415e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004162:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004164:	e00f      	b.n	8004186 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d106      	bne.n	800417a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800416c:	4b15      	ldr	r3, [pc, #84]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800416e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004170:	4a14      	ldr	r2, [pc, #80]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004172:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004178:	e005      	b.n	8004186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800417a:	4b12      	ldr	r3, [pc, #72]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800417c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417e:	4a11      	ldr	r2, [pc, #68]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004180:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004184:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004186:	4b0f      	ldr	r3, [pc, #60]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a0e      	ldr	r2, [pc, #56]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004192:	f7fc fd17 	bl	8000bc4 <HAL_GetTick>
 8004196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004198:	e008      	b.n	80041ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800419a:	f7fc fd13 	bl	8000bc4 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e006      	b.n	80041ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80041ac:	4b05      	ldr	r3, [pc, #20]	@ (80041c4 <RCCEx_PLL3_Config+0x15c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	58024400 	.word	0x58024400
 80041c8:	ffff0007 	.word	0xffff0007

080041cc <memset>:
 80041cc:	4402      	add	r2, r0
 80041ce:	4603      	mov	r3, r0
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d100      	bne.n	80041d6 <memset+0xa>
 80041d4:	4770      	bx	lr
 80041d6:	f803 1b01 	strb.w	r1, [r3], #1
 80041da:	e7f9      	b.n	80041d0 <memset+0x4>

080041dc <__libc_init_array>:
 80041dc:	b570      	push	{r4, r5, r6, lr}
 80041de:	4d0d      	ldr	r5, [pc, #52]	@ (8004214 <__libc_init_array+0x38>)
 80041e0:	4c0d      	ldr	r4, [pc, #52]	@ (8004218 <__libc_init_array+0x3c>)
 80041e2:	1b64      	subs	r4, r4, r5
 80041e4:	10a4      	asrs	r4, r4, #2
 80041e6:	2600      	movs	r6, #0
 80041e8:	42a6      	cmp	r6, r4
 80041ea:	d109      	bne.n	8004200 <__libc_init_array+0x24>
 80041ec:	4d0b      	ldr	r5, [pc, #44]	@ (800421c <__libc_init_array+0x40>)
 80041ee:	4c0c      	ldr	r4, [pc, #48]	@ (8004220 <__libc_init_array+0x44>)
 80041f0:	f000 f818 	bl	8004224 <_init>
 80041f4:	1b64      	subs	r4, r4, r5
 80041f6:	10a4      	asrs	r4, r4, #2
 80041f8:	2600      	movs	r6, #0
 80041fa:	42a6      	cmp	r6, r4
 80041fc:	d105      	bne.n	800420a <__libc_init_array+0x2e>
 80041fe:	bd70      	pop	{r4, r5, r6, pc}
 8004200:	f855 3b04 	ldr.w	r3, [r5], #4
 8004204:	4798      	blx	r3
 8004206:	3601      	adds	r6, #1
 8004208:	e7ee      	b.n	80041e8 <__libc_init_array+0xc>
 800420a:	f855 3b04 	ldr.w	r3, [r5], #4
 800420e:	4798      	blx	r3
 8004210:	3601      	adds	r6, #1
 8004212:	e7f2      	b.n	80041fa <__libc_init_array+0x1e>
 8004214:	0800424c 	.word	0x0800424c
 8004218:	0800424c 	.word	0x0800424c
 800421c:	0800424c 	.word	0x0800424c
 8004220:	08004250 	.word	0x08004250

08004224 <_init>:
 8004224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004226:	bf00      	nop
 8004228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800422a:	bc08      	pop	{r3}
 800422c:	469e      	mov	lr, r3
 800422e:	4770      	bx	lr

08004230 <_fini>:
 8004230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004232:	bf00      	nop
 8004234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004236:	bc08      	pop	{r3}
 8004238:	469e      	mov	lr, r3
 800423a:	4770      	bx	lr
