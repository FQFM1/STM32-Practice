
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ee0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009178  08009178  0000a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080091b8  080091b8  0000a1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080091c0  080091c0  0000a1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080091c4  080091c4  0000a1c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080091c8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  24000010  080091d8  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e8  080091d8  0000b1e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010dbb  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001fe5  00000000  00000000  0001bdf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  0001dde0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000861  00000000  00000000  0001e8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035741  00000000  00000000  0001f119  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010a60  00000000  00000000  0005485a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155e84  00000000  00000000  000652ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bb13e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c70  00000000  00000000  001bb184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000056  00000000  00000000  001bddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009160 	.word	0x08009160

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009160 	.word	0x08009160

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <HAL_UARTEx_RxEventCallback>:
////	HAL_UART_Receive_IT(&huart1, receiveData, 2);	// 为了节省 CPU 资源，不将接收函数放在 while(1) 循环中
//	HAL_UART_Receive_DMA(&huart1, receiveData, 2);
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	// 接收不定长数据
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a39      	ldr	r2, [pc, #228]	@ (80006bc <HAL_UARTEx_RxEventCallback+0xf4>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d16b      	bne.n	80006b4 <HAL_UARTEx_RxEventCallback+0xec>
	{
		HAL_UART_Transmit_DMA(&huart1, receiveData, Size);
 80005dc:	887b      	ldrh	r3, [r7, #2]
 80005de:	461a      	mov	r2, r3
 80005e0:	4937      	ldr	r1, [pc, #220]	@ (80006c0 <HAL_UARTEx_RxEventCallback+0xf8>)
 80005e2:	4836      	ldr	r0, [pc, #216]	@ (80006bc <HAL_UARTEx_RxEventCallback+0xf4>)
 80005e4:	f006 fdb2 	bl	800714c <HAL_UART_Transmit_DMA>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));	// 开启下一轮数据接收
 80005e8:	2232      	movs	r2, #50	@ 0x32
 80005ea:	4935      	ldr	r1, [pc, #212]	@ (80006c0 <HAL_UARTEx_RxEventCallback+0xf8>)
 80005ec:	4833      	ldr	r0, [pc, #204]	@ (80006bc <HAL_UARTEx_RxEventCallback+0xf4>)
 80005ee:	f008 fce9 	bl	8008fc4 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);							// 关闭传输过半中断
 80005f2:	4b34      	ldr	r3, [pc, #208]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <HAL_UARTEx_RxEventCallback+0x100>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d04a      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 80005fc:	4b31      	ldr	r3, [pc, #196]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a32      	ldr	r2, [pc, #200]	@ (80006cc <HAL_UARTEx_RxEventCallback+0x104>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d045      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000606:	4b2f      	ldr	r3, [pc, #188]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	4a31      	ldr	r2, [pc, #196]	@ (80006d0 <HAL_UARTEx_RxEventCallback+0x108>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d040      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000610:	4b2c      	ldr	r3, [pc, #176]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a2f      	ldr	r2, [pc, #188]	@ (80006d4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000616:	4293      	cmp	r3, r2
 8000618:	d03b      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 800061a:	4b2a      	ldr	r3, [pc, #168]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a2e      	ldr	r2, [pc, #184]	@ (80006d8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000620:	4293      	cmp	r3, r2
 8000622:	d036      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000624:	4b27      	ldr	r3, [pc, #156]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a2c      	ldr	r2, [pc, #176]	@ (80006dc <HAL_UARTEx_RxEventCallback+0x114>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d031      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 800062e:	4b25      	ldr	r3, [pc, #148]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a2b      	ldr	r2, [pc, #172]	@ (80006e0 <HAL_UARTEx_RxEventCallback+0x118>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d02c      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000638:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a29      	ldr	r2, [pc, #164]	@ (80006e4 <HAL_UARTEx_RxEventCallback+0x11c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d027      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000642:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <HAL_UARTEx_RxEventCallback+0x120>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d022      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 800064c:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a26      	ldr	r2, [pc, #152]	@ (80006ec <HAL_UARTEx_RxEventCallback+0x124>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d01d      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000656:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <HAL_UARTEx_RxEventCallback+0x128>)
 800065c:	4293      	cmp	r3, r2
 800065e:	d018      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a23      	ldr	r2, [pc, #140]	@ (80006f4 <HAL_UARTEx_RxEventCallback+0x12c>)
 8000666:	4293      	cmp	r3, r2
 8000668:	d013      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 800066a:	4b16      	ldr	r3, [pc, #88]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a22      	ldr	r2, [pc, #136]	@ (80006f8 <HAL_UARTEx_RxEventCallback+0x130>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d00e      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000674:	4b13      	ldr	r3, [pc, #76]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a20      	ldr	r2, [pc, #128]	@ (80006fc <HAL_UARTEx_RxEventCallback+0x134>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d009      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1f      	ldr	r2, [pc, #124]	@ (8000700 <HAL_UARTEx_RxEventCallback+0x138>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d004      	beq.n	8000692 <HAL_UARTEx_RxEventCallback+0xca>
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1d      	ldr	r2, [pc, #116]	@ (8000704 <HAL_UARTEx_RxEventCallback+0x13c>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d108      	bne.n	80006a4 <HAL_UARTEx_RxEventCallback+0xdc>
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681a      	ldr	r2, [r3, #0]
 8000698:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 0208 	bic.w	r2, r2, #8
 80006a0:	601a      	str	r2, [r3, #0]
	}
}
 80006a2:	e007      	b.n	80006b4 <HAL_UARTEx_RxEventCallback+0xec>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);							// 关闭传输过半中断
 80006a4:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	681a      	ldr	r2, [r3, #0]
 80006aa:	4b06      	ldr	r3, [pc, #24]	@ (80006c4 <HAL_UARTEx_RxEventCallback+0xfc>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f022 0204 	bic.w	r2, r2, #4
 80006b2:	601a      	str	r2, [r3, #0]
}
 80006b4:	bf00      	nop
 80006b6:	3708      	adds	r7, #8
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2400002c 	.word	0x2400002c
 80006c0:	240001b0 	.word	0x240001b0
 80006c4:	240000c0 	.word	0x240000c0
 80006c8:	40020010 	.word	0x40020010
 80006cc:	40020028 	.word	0x40020028
 80006d0:	40020040 	.word	0x40020040
 80006d4:	40020058 	.word	0x40020058
 80006d8:	40020070 	.word	0x40020070
 80006dc:	40020088 	.word	0x40020088
 80006e0:	400200a0 	.word	0x400200a0
 80006e4:	400200b8 	.word	0x400200b8
 80006e8:	40020410 	.word	0x40020410
 80006ec:	40020428 	.word	0x40020428
 80006f0:	40020440 	.word	0x40020440
 80006f4:	40020458 	.word	0x40020458
 80006f8:	40020470 	.word	0x40020470
 80006fc:	40020488 	.word	0x40020488
 8000700:	400204a0 	.word	0x400204a0
 8000704:	400204b8 	.word	0x400204b8

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800070c:	f000 fa34 	bl	8000b78 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000710:	f000 fc54 	bl	8000fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000714:	f000 f894 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000718:	f000 f9b6 	bl	8000a88 <MX_GPIO_Init>
  MX_DMA_Init();
 800071c:	f000 f98c 	bl	8000a38 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000720:	f000 f93e 	bl	80009a0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_UART_Receive_IT(&huart1, receiveData, 2);							// 中断模式接收
//  HAL_UART_Receive_DMA(&huart1, receiveData, 2);							// DMA模式接收
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));	// DMA模式不定长数据接收
 8000724:	2232      	movs	r2, #50	@ 0x32
 8000726:	4933      	ldr	r1, [pc, #204]	@ (80007f4 <main+0xec>)
 8000728:	4833      	ldr	r0, [pc, #204]	@ (80007f8 <main+0xf0>)
 800072a:	f008 fc4b 	bl	8008fc4 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);							// 关闭传输过半中断，防止数据没接收到就开始处理
 800072e:	4b33      	ldr	r3, [pc, #204]	@ (80007fc <main+0xf4>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4a33      	ldr	r2, [pc, #204]	@ (8000800 <main+0xf8>)
 8000734:	4293      	cmp	r3, r2
 8000736:	d04a      	beq.n	80007ce <main+0xc6>
 8000738:	4b30      	ldr	r3, [pc, #192]	@ (80007fc <main+0xf4>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <main+0xfc>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d045      	beq.n	80007ce <main+0xc6>
 8000742:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <main+0xf4>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a30      	ldr	r2, [pc, #192]	@ (8000808 <main+0x100>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d040      	beq.n	80007ce <main+0xc6>
 800074c:	4b2b      	ldr	r3, [pc, #172]	@ (80007fc <main+0xf4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a2e      	ldr	r2, [pc, #184]	@ (800080c <main+0x104>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d03b      	beq.n	80007ce <main+0xc6>
 8000756:	4b29      	ldr	r3, [pc, #164]	@ (80007fc <main+0xf4>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <main+0x108>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d036      	beq.n	80007ce <main+0xc6>
 8000760:	4b26      	ldr	r3, [pc, #152]	@ (80007fc <main+0xf4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a2b      	ldr	r2, [pc, #172]	@ (8000814 <main+0x10c>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d031      	beq.n	80007ce <main+0xc6>
 800076a:	4b24      	ldr	r3, [pc, #144]	@ (80007fc <main+0xf4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a2a      	ldr	r2, [pc, #168]	@ (8000818 <main+0x110>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d02c      	beq.n	80007ce <main+0xc6>
 8000774:	4b21      	ldr	r3, [pc, #132]	@ (80007fc <main+0xf4>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a28      	ldr	r2, [pc, #160]	@ (800081c <main+0x114>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d027      	beq.n	80007ce <main+0xc6>
 800077e:	4b1f      	ldr	r3, [pc, #124]	@ (80007fc <main+0xf4>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a27      	ldr	r2, [pc, #156]	@ (8000820 <main+0x118>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d022      	beq.n	80007ce <main+0xc6>
 8000788:	4b1c      	ldr	r3, [pc, #112]	@ (80007fc <main+0xf4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a25      	ldr	r2, [pc, #148]	@ (8000824 <main+0x11c>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d01d      	beq.n	80007ce <main+0xc6>
 8000792:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <main+0xf4>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a24      	ldr	r2, [pc, #144]	@ (8000828 <main+0x120>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d018      	beq.n	80007ce <main+0xc6>
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <main+0xf4>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a22      	ldr	r2, [pc, #136]	@ (800082c <main+0x124>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d013      	beq.n	80007ce <main+0xc6>
 80007a6:	4b15      	ldr	r3, [pc, #84]	@ (80007fc <main+0xf4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a21      	ldr	r2, [pc, #132]	@ (8000830 <main+0x128>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d00e      	beq.n	80007ce <main+0xc6>
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <main+0xf4>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a1f      	ldr	r2, [pc, #124]	@ (8000834 <main+0x12c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d009      	beq.n	80007ce <main+0xc6>
 80007ba:	4b10      	ldr	r3, [pc, #64]	@ (80007fc <main+0xf4>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a1e      	ldr	r2, [pc, #120]	@ (8000838 <main+0x130>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d004      	beq.n	80007ce <main+0xc6>
 80007c4:	4b0d      	ldr	r3, [pc, #52]	@ (80007fc <main+0xf4>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a1c      	ldr	r2, [pc, #112]	@ (800083c <main+0x134>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d108      	bne.n	80007e0 <main+0xd8>
 80007ce:	4b0b      	ldr	r3, [pc, #44]	@ (80007fc <main+0xf4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	681a      	ldr	r2, [r3, #0]
 80007d4:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <main+0xf4>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	f022 0208 	bic.w	r2, r2, #8
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	e007      	b.n	80007f0 <main+0xe8>
 80007e0:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <main+0xf4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	4b05      	ldr	r3, [pc, #20]	@ (80007fc <main+0xf4>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0204 	bic.w	r2, r2, #4
 80007ee:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007f0:	bf00      	nop
 80007f2:	e7fd      	b.n	80007f0 <main+0xe8>
 80007f4:	240001b0 	.word	0x240001b0
 80007f8:	2400002c 	.word	0x2400002c
 80007fc:	240000c0 	.word	0x240000c0
 8000800:	40020010 	.word	0x40020010
 8000804:	40020028 	.word	0x40020028
 8000808:	40020040 	.word	0x40020040
 800080c:	40020058 	.word	0x40020058
 8000810:	40020070 	.word	0x40020070
 8000814:	40020088 	.word	0x40020088
 8000818:	400200a0 	.word	0x400200a0
 800081c:	400200b8 	.word	0x400200b8
 8000820:	40020410 	.word	0x40020410
 8000824:	40020428 	.word	0x40020428
 8000828:	40020440 	.word	0x40020440
 800082c:	40020458 	.word	0x40020458
 8000830:	40020470 	.word	0x40020470
 8000834:	40020488 	.word	0x40020488
 8000838:	400204a0 	.word	0x400204a0
 800083c:	400204b8 	.word	0x400204b8

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09e      	sub	sp, #120	@ 0x78
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f008 fc5a 	bl	8009108 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2220      	movs	r2, #32
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f008 fc53 	bl	8009108 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000862:	2002      	movs	r0, #2
 8000864:	f003 fdd6 	bl	8004414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
 800086c:	4b49      	ldr	r3, [pc, #292]	@ (8000994 <SystemClock_Config+0x154>)
 800086e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000870:	4a48      	ldr	r2, [pc, #288]	@ (8000994 <SystemClock_Config+0x154>)
 8000872:	f023 0301 	bic.w	r3, r3, #1
 8000876:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000878:	4b46      	ldr	r3, [pc, #280]	@ (8000994 <SystemClock_Config+0x154>)
 800087a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	4b45      	ldr	r3, [pc, #276]	@ (8000998 <SystemClock_Config+0x158>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a44      	ldr	r2, [pc, #272]	@ (8000998 <SystemClock_Config+0x158>)
 8000888:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088c:	6193      	str	r3, [r2, #24]
 800088e:	4b42      	ldr	r3, [pc, #264]	@ (8000998 <SystemClock_Config+0x158>)
 8000890:	699b      	ldr	r3, [r3, #24]
 8000892:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089a:	bf00      	nop
 800089c:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <SystemClock_Config+0x158>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a8:	d1f8      	bne.n	800089c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b3c      	ldr	r3, [pc, #240]	@ (800099c <SystemClock_Config+0x15c>)
 80008ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008b0:	4a3a      	ldr	r2, [pc, #232]	@ (800099c <SystemClock_Config+0x15c>)
 80008b2:	f043 0302 	orr.w	r3, r3, #2
 80008b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008ba:	4b38      	ldr	r3, [pc, #224]	@ (800099c <SystemClock_Config+0x15c>)
 80008bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008c0:	f003 0302 	and.w	r3, r3, #2
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80008c8:	2300      	movs	r3, #0
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	4b32      	ldr	r3, [pc, #200]	@ (8000998 <SystemClock_Config+0x158>)
 80008ce:	699b      	ldr	r3, [r3, #24]
 80008d0:	4a31      	ldr	r2, [pc, #196]	@ (8000998 <SystemClock_Config+0x158>)
 80008d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80008d6:	6193      	str	r3, [r2, #24]
 80008d8:	4b2f      	ldr	r3, [pc, #188]	@ (8000998 <SystemClock_Config+0x158>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b2c      	ldr	r3, [pc, #176]	@ (8000994 <SystemClock_Config+0x154>)
 80008e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e6:	4a2b      	ldr	r2, [pc, #172]	@ (8000994 <SystemClock_Config+0x154>)
 80008e8:	f043 0301 	orr.w	r3, r3, #1
 80008ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80008ee:	4b29      	ldr	r3, [pc, #164]	@ (8000994 <SystemClock_Config+0x154>)
 80008f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008f2:	f003 0301 	and.w	r3, r3, #1
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008fa:	bf00      	nop
 80008fc:	4b26      	ldr	r3, [pc, #152]	@ (8000998 <SystemClock_Config+0x158>)
 80008fe:	699b      	ldr	r3, [r3, #24]
 8000900:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000904:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000908:	d1f8      	bne.n	80008fc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800090a:	2302      	movs	r3, #2
 800090c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800090e:	2301      	movs	r3, #1
 8000910:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000912:	2340      	movs	r3, #64	@ 0x40
 8000914:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800091a:	2300      	movs	r3, #0
 800091c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 800091e:	2304      	movs	r3, #4
 8000920:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000922:	233c      	movs	r3, #60	@ 0x3c
 8000924:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000926:	2302      	movs	r3, #2
 8000928:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800092a:	2302      	movs	r3, #2
 800092c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 800092e:	2302      	movs	r3, #2
 8000930:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000932:	230c      	movs	r3, #12
 8000934:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000936:	2300      	movs	r3, #0
 8000938:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800093e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fda0 	bl	8004488 <HAL_RCC_OscConfig>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <SystemClock_Config+0x112>
  {
    Error_Handler();
 800094e:	f000 f93f 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000952:	233f      	movs	r3, #63	@ 0x3f
 8000954:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000956:	2303      	movs	r3, #3
 8000958:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800095e:	2308      	movs	r3, #8
 8000960:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000962:	2340      	movs	r3, #64	@ 0x40
 8000964:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000966:	2340      	movs	r3, #64	@ 0x40
 8000968:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800096a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000970:	2340      	movs	r3, #64	@ 0x40
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2104      	movs	r1, #4
 800097a:	4618      	mov	r0, r3
 800097c:	f004 f9de 	bl	8004d3c <HAL_RCC_ClockConfig>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000986:	f000 f923 	bl	8000bd0 <Error_Handler>
  }
}
 800098a:	bf00      	nop
 800098c:	3778      	adds	r7, #120	@ 0x78
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	58000400 	.word	0x58000400
 8000998:	58024800 	.word	0x58024800
 800099c:	58024400 	.word	0x58024400

080009a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009a4:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	@ (8000a34 <MX_USART1_UART_Init+0x94>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009aa:	4b21      	ldr	r3, [pc, #132]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b17      	ldr	r3, [pc, #92]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009ea:	f006 fb5f 	bl	80070ac <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 f8ec 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 80009fc:	f008 fa66 	bl	8008ecc <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 f8e3 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 8000a0e:	f008 fa9b 	bl	8008f48 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 f8da 	bl	8000bd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <MX_USART1_UART_Init+0x90>)
 8000a1e:	f008 fa1c 	bl	8008e5a <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 f8d2 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2400002c 	.word	0x2400002c
 8000a34:	40011000 	.word	0x40011000

08000a38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <MX_DMA_Init+0x4c>)
 8000a40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a44:	4a0f      	ldr	r2, [pc, #60]	@ (8000a84 <MX_DMA_Init+0x4c>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a84 <MX_DMA_Init+0x4c>)
 8000a50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	607b      	str	r3, [r7, #4]
 8000a5a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	200b      	movs	r0, #11
 8000a62:	f000 fc24 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000a66:	200b      	movs	r0, #11
 8000a68:	f000 fc3b 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	200c      	movs	r0, #12
 8000a72:	f000 fc1c 	bl	80012ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000a76:	200c      	movs	r0, #12
 8000a78:	f000 fc33 	bl	80012e2 <HAL_NVIC_EnableIRQ>

}
 8000a7c:	bf00      	nop
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	58024400 	.word	0x58024400

08000a88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	@ 0x28
 8000a8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa4:	4a31      	ldr	r2, [pc, #196]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000aa6:	f043 0304 	orr.w	r3, r3, #4
 8000aaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aae:	4b2f      	ldr	r3, [pc, #188]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000ab0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab4:	f003 0304 	and.w	r3, r3, #4
 8000ab8:	613b      	str	r3, [r7, #16]
 8000aba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b2b      	ldr	r3, [pc, #172]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac2:	4a2a      	ldr	r2, [pc, #168]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000acc:	4b27      	ldr	r3, [pc, #156]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ada:	4b24      	ldr	r3, [pc, #144]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	4a22      	ldr	r2, [pc, #136]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	4a1b      	ldr	r2, [pc, #108]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000b00:	f043 0302 	orr.w	r3, r3, #2
 8000b04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <MX_GPIO_Init+0xe4>)
 8000b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000b16:	2201      	movs	r2, #1
 8000b18:	2103      	movs	r1, #3
 8000b1a:	4815      	ldr	r0, [pc, #84]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000b1c:	f003 fc60 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000b20:	2201      	movs	r2, #1
 8000b22:	2108      	movs	r1, #8
 8000b24:	4813      	ldr	r0, [pc, #76]	@ (8000b74 <MX_GPIO_Init+0xec>)
 8000b26:	f003 fc5b 	bl	80043e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b36:	2300      	movs	r3, #0
 8000b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	@ (8000b70 <MX_GPIO_Init+0xe8>)
 8000b42:	f003 fa9d 	bl	8004080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000b46:	2308      	movs	r3, #8
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <MX_GPIO_Init+0xec>)
 8000b5e:	f003 fa8f 	bl	8004080 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	58020400 	.word	0x58020400
 8000b74:	58020000 	.word	0x58020000

08000b78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b7e:	463b      	mov	r3, r7
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
 8000b84:	605a      	str	r2, [r3, #4]
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b8a:	f000 fbc5 	bl	8001318 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b9a:	231f      	movs	r3, #31
 8000b9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b9e:	2387      	movs	r3, #135	@ 0x87
 8000ba0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bba:	463b      	mov	r3, r7
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f000 fbe3 	bl	8001388 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bc2:	2004      	movs	r0, #4
 8000bc4:	f000 fbc0 	bl	8001348 <HAL_MPU_Enable>

}
 8000bc8:	bf00      	nop
 8000bca:	3710      	adds	r7, #16
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b0a      	ldr	r3, [pc, #40]	@ (8000c0c <HAL_MspInit+0x30>)
 8000be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000be8:	4a08      	ldr	r2, [pc, #32]	@ (8000c0c <HAL_MspInit+0x30>)
 8000bea:	f043 0302 	orr.w	r3, r3, #2
 8000bee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000bf2:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_MspInit+0x30>)
 8000bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000bf8:	f003 0302 	and.w	r3, r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	58024400 	.word	0x58024400

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ba      	sub	sp, #232	@ 0xe8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	22c0      	movs	r2, #192	@ 0xc0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f008 fa69 	bl	8009108 <memset>
  if(huart->Instance==USART1)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a59      	ldr	r2, [pc, #356]	@ (8000da0 <HAL_UART_MspInit+0x190>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	f040 80aa 	bne.w	8000d96 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c42:	f04f 0201 	mov.w	r2, #1
 8000c46:	f04f 0300 	mov.w	r3, #0
 8000c4a:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c54:	f107 0310 	add.w	r3, r7, #16
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f004 fbfb 	bl	8005454 <HAL_RCCEx_PeriphCLKConfig>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000c64:	f7ff ffb4 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c68:	4b4e      	ldr	r3, [pc, #312]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c6e:	4a4d      	ldr	r2, [pc, #308]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c70:	f043 0310 	orr.w	r3, r3, #16
 8000c74:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c78:	4b4a      	ldr	r3, [pc, #296]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c7a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c7e:	f003 0310 	and.w	r3, r3, #16
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	4b47      	ldr	r3, [pc, #284]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8c:	4a45      	ldr	r2, [pc, #276]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c96:	4b43      	ldr	r3, [pc, #268]	@ (8000da4 <HAL_UART_MspInit+0x194>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9c:	f003 0301 	and.w	r3, r3, #1
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000ca4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ca8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cac:	2302      	movs	r3, #2
 8000cae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cbe:	2307      	movs	r3, #7
 8000cc0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4837      	ldr	r0, [pc, #220]	@ (8000da8 <HAL_UART_MspInit+0x198>)
 8000ccc:	f003 f9d8 	bl	8004080 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000cd0:	4b36      	ldr	r3, [pc, #216]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cd2:	4a37      	ldr	r2, [pc, #220]	@ (8000db0 <HAL_UART_MspInit+0x1a0>)
 8000cd4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000cd6:	4b35      	ldr	r3, [pc, #212]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cd8:	2229      	movs	r2, #41	@ 0x29
 8000cda:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000cdc:	4b33      	ldr	r3, [pc, #204]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ce2:	4b32      	ldr	r3, [pc, #200]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce8:	4b30      	ldr	r3, [pc, #192]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cee:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d02:	4b2a      	ldr	r3, [pc, #168]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d08:	4b28      	ldr	r3, [pc, #160]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000d0e:	4827      	ldr	r0, [pc, #156]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000d10:	f000 fb7a 	bl	8001408 <HAL_DMA_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000d1a:	f7ff ff59 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a22      	ldr	r2, [pc, #136]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000d22:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000d26:	4a21      	ldr	r2, [pc, #132]	@ (8000dac <HAL_UART_MspInit+0x19c>)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8000d2c:	4b21      	ldr	r3, [pc, #132]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d2e:	4a22      	ldr	r2, [pc, #136]	@ (8000db8 <HAL_UART_MspInit+0x1a8>)
 8000d30:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d34:	222a      	movs	r2, #42	@ 0x2a
 8000d36:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d38:	4b1e      	ldr	r3, [pc, #120]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d3a:	2240      	movs	r2, #64	@ 0x40
 8000d3c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d44:	4b1b      	ldr	r3, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d4c:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d58:	4b16      	ldr	r3, [pc, #88]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d64:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d6a:	4812      	ldr	r0, [pc, #72]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d6c:	f000 fb4c 	bl	8001408 <HAL_DMA_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000d76:	f7ff ff2b 	bl	8000bd0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d7e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d80:	4a0c      	ldr	r2, [pc, #48]	@ (8000db4 <HAL_UART_MspInit+0x1a4>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d86:	2200      	movs	r2, #0
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2025      	movs	r0, #37	@ 0x25
 8000d8c:	f000 fa8f 	bl	80012ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d90:	2025      	movs	r0, #37	@ 0x25
 8000d92:	f000 faa6 	bl	80012e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	37e8      	adds	r7, #232	@ 0xe8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40011000 	.word	0x40011000
 8000da4:	58024400 	.word	0x58024400
 8000da8:	58020000 	.word	0x58020000
 8000dac:	240000c0 	.word	0x240000c0
 8000db0:	40020010 	.word	0x40020010
 8000db4:	24000138 	.word	0x24000138
 8000db8:	40020028 	.word	0x40020028

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc0:	bf00      	nop
 8000dc2:	e7fd      	b.n	8000dc0 <NMI_Handler+0x4>

08000dc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <HardFault_Handler+0x4>

08000dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <MemManage_Handler+0x4>

08000dd4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr

08000df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f945 	bl	80010a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000e20:	4802      	ldr	r0, [pc, #8]	@ (8000e2c <DMA1_Stream0_IRQHandler+0x10>)
 8000e22:	f001 fe1b 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	240000c0 	.word	0x240000c0

08000e30 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000e34:	4802      	ldr	r0, [pc, #8]	@ (8000e40 <DMA1_Stream1_IRQHandler+0x10>)
 8000e36:	f001 fe11 	bl	8002a5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	24000138 	.word	0x24000138

08000e44 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e48:	4802      	ldr	r0, [pc, #8]	@ (8000e54 <USART1_IRQHandler+0x10>)
 8000e4a:	f006 f9ff 	bl	800724c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400002c 	.word	0x2400002c

08000e58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e5c:	4b37      	ldr	r3, [pc, #220]	@ (8000f3c <SystemInit+0xe4>)
 8000e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e62:	4a36      	ldr	r2, [pc, #216]	@ (8000f3c <SystemInit+0xe4>)
 8000e64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e6c:	4b34      	ldr	r3, [pc, #208]	@ (8000f40 <SystemInit+0xe8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f003 030f 	and.w	r3, r3, #15
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	d807      	bhi.n	8000e88 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e78:	4b31      	ldr	r3, [pc, #196]	@ (8000f40 <SystemInit+0xe8>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f023 030f 	bic.w	r3, r3, #15
 8000e80:	4a2f      	ldr	r2, [pc, #188]	@ (8000f40 <SystemInit+0xe8>)
 8000e82:	f043 0307 	orr.w	r3, r3, #7
 8000e86:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	@ (8000f44 <SystemInit+0xec>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a2d      	ldr	r2, [pc, #180]	@ (8000f44 <SystemInit+0xec>)
 8000e8e:	f043 0301 	orr.w	r3, r3, #1
 8000e92:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <SystemInit+0xec>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <SystemInit+0xec>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	4929      	ldr	r1, [pc, #164]	@ (8000f44 <SystemInit+0xec>)
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <SystemInit+0xf0>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <SystemInit+0xe8>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0308 	and.w	r3, r3, #8
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d007      	beq.n	8000ec2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eb2:	4b23      	ldr	r3, [pc, #140]	@ (8000f40 <SystemInit+0xe8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f023 030f 	bic.w	r3, r3, #15
 8000eba:	4a21      	ldr	r2, [pc, #132]	@ (8000f40 <SystemInit+0xe8>)
 8000ebc:	f043 0307 	orr.w	r3, r3, #7
 8000ec0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <SystemInit+0xec>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <SystemInit+0xec>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <SystemInit+0xec>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <SystemInit+0xec>)
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <SystemInit+0xf4>)
 8000ed8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eda:	4b1a      	ldr	r3, [pc, #104]	@ (8000f44 <SystemInit+0xec>)
 8000edc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <SystemInit+0xf8>)
 8000ede:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ee0:	4b18      	ldr	r3, [pc, #96]	@ (8000f44 <SystemInit+0xec>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	@ (8000f54 <SystemInit+0xfc>)
 8000ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000eec:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <SystemInit+0xec>)
 8000eee:	4a19      	ldr	r2, [pc, #100]	@ (8000f54 <SystemInit+0xfc>)
 8000ef0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ef2:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <SystemInit+0xec>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <SystemInit+0xec>)
 8000efa:	4a16      	ldr	r2, [pc, #88]	@ (8000f54 <SystemInit+0xfc>)
 8000efc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <SystemInit+0xec>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <SystemInit+0xec>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <SystemInit+0xec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f16:	4b10      	ldr	r3, [pc, #64]	@ (8000f58 <SystemInit+0x100>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	@ (8000f5c <SystemInit+0x104>)
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f22:	d202      	bcs.n	8000f2a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f24:	4b0e      	ldr	r3, [pc, #56]	@ (8000f60 <SystemInit+0x108>)
 8000f26:	2201      	movs	r2, #1
 8000f28:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f64 <SystemInit+0x10c>)
 8000f2c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f32:	bf00      	nop
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	52002000 	.word	0x52002000
 8000f44:	58024400 	.word	0x58024400
 8000f48:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f4c:	02020200 	.word	0x02020200
 8000f50:	01ff0000 	.word	0x01ff0000
 8000f54:	01010280 	.word	0x01010280
 8000f58:	5c001000 	.word	0x5c001000
 8000f5c:	ffff0000 	.word	0xffff0000
 8000f60:	51008108 	.word	0x51008108
 8000f64:	52004000 	.word	0x52004000

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fa0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f6c:	f7ff ff74 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f70:	480c      	ldr	r0, [pc, #48]	@ (8000fa4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f72:	490d      	ldr	r1, [pc, #52]	@ (8000fa8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f74:	4a0d      	ldr	r2, [pc, #52]	@ (8000fac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f78:	e002      	b.n	8000f80 <LoopCopyDataInit>

08000f7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7e:	3304      	adds	r3, #4

08000f80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f84:	d3f9      	bcc.n	8000f7a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f86:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f88:	4c0a      	ldr	r4, [pc, #40]	@ (8000fb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f8c:	e001      	b.n	8000f92 <LoopFillZerobss>

08000f8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f90:	3204      	adds	r2, #4

08000f92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f94:	d3fb      	bcc.n	8000f8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f96:	f008 f8bf 	bl	8009118 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fbb5 	bl	8000708 <main>
  bx  lr
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fa4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fa8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fac:	080091c8 	.word	0x080091c8
  ldr r2, =_sbss
 8000fb0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000fb4:	240001e8 	.word	0x240001e8

08000fb8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC3_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f968 	bl	8001298 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fc8:	f004 f86e 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	4b15      	ldr	r3, [pc, #84]	@ (8001024 <HAL_Init+0x68>)
 8000fd0:	699b      	ldr	r3, [r3, #24]
 8000fd2:	0a1b      	lsrs	r3, r3, #8
 8000fd4:	f003 030f 	and.w	r3, r3, #15
 8000fd8:	4913      	ldr	r1, [pc, #76]	@ (8001028 <HAL_Init+0x6c>)
 8000fda:	5ccb      	ldrb	r3, [r1, r3]
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8001024 <HAL_Init+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	4a0e      	ldr	r2, [pc, #56]	@ (8001028 <HAL_Init+0x6c>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	4a0b      	ldr	r2, [pc, #44]	@ (800102c <HAL_Init+0x70>)
 8000ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001000:	4a0b      	ldr	r2, [pc, #44]	@ (8001030 <HAL_Init+0x74>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001006:	200f      	movs	r0, #15
 8001008:	f000 f814 	bl	8001034 <HAL_InitTick>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	e002      	b.n	800101c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001016:	f7ff fde1 	bl	8000bdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	58024400 	.word	0x58024400
 8001028:	08009178 	.word	0x08009178
 800102c:	24000004 	.word	0x24000004
 8001030:	24000000 	.word	0x24000000

08001034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <HAL_InitTick+0x60>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d101      	bne.n	8001048 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001044:	2301      	movs	r3, #1
 8001046:	e021      	b.n	800108c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001048:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <HAL_InitTick+0x64>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <HAL_InitTick+0x60>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	4619      	mov	r1, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001056:	fbb3 f3f1 	udiv	r3, r3, r1
 800105a:	fbb2 f3f3 	udiv	r3, r2, r3
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f94d 	bl	80012fe <HAL_SYSTICK_Config>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e00e      	b.n	800108c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b0f      	cmp	r3, #15
 8001072:	d80a      	bhi.n	800108a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001074:	2200      	movs	r2, #0
 8001076:	6879      	ldr	r1, [r7, #4]
 8001078:	f04f 30ff 	mov.w	r0, #4294967295
 800107c:	f000 f917 	bl	80012ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001080:	4a06      	ldr	r2, [pc, #24]	@ (800109c <HAL_InitTick+0x68>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
 8001088:	e000      	b.n	800108c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	2400000c 	.word	0x2400000c
 8001098:	24000000 	.word	0x24000000
 800109c:	24000008 	.word	0x24000008

080010a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <HAL_IncTick+0x20>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b06      	ldr	r3, [pc, #24]	@ (80010c4 <HAL_IncTick+0x24>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	4a04      	ldr	r2, [pc, #16]	@ (80010c4 <HAL_IncTick+0x24>)
 80010b2:	6013      	str	r3, [r2, #0]
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	2400000c 	.word	0x2400000c
 80010c4:	240001e4 	.word	0x240001e4

080010c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  return uwTick;
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <HAL_GetTick+0x14>)
 80010ce:	681b      	ldr	r3, [r3, #0]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	240001e4 	.word	0x240001e4

080010e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_GetREVID+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	0c1b      	lsrs	r3, r3, #16
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr
 80010f4:	5c001000 	.word	0x5c001000

080010f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001114:	4013      	ands	r3, r2
 8001116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <__NVIC_SetPriorityGrouping+0x44>)
 8001122:	4313      	orrs	r3, r2
 8001124:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001126:	4a04      	ldr	r2, [pc, #16]	@ (8001138 <__NVIC_SetPriorityGrouping+0x40>)
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	60d3      	str	r3, [r2, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	05fa0000 	.word	0x05fa0000

08001140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001144:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <__NVIC_GetPriorityGrouping+0x18>)
 8001146:	68db      	ldr	r3, [r3, #12]
 8001148:	0a1b      	lsrs	r3, r3, #8
 800114a:	f003 0307 	and.w	r3, r3, #7
}
 800114e:	4618      	mov	r0, r3
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001166:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116a:	2b00      	cmp	r3, #0
 800116c:	db0b      	blt.n	8001186 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800116e:	88fb      	ldrh	r3, [r7, #6]
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	4907      	ldr	r1, [pc, #28]	@ (8001194 <__NVIC_EnableIRQ+0x38>)
 8001176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117a:	095b      	lsrs	r3, r3, #5
 800117c:	2001      	movs	r0, #1
 800117e:	fa00 f202 	lsl.w	r2, r0, r2
 8001182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	e000e100 	.word	0xe000e100

08001198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	6039      	str	r1, [r7, #0]
 80011a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	db0a      	blt.n	80011c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <__NVIC_SetPriority+0x4c>)
 80011b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b6:	0112      	lsls	r2, r2, #4
 80011b8:	b2d2      	uxtb	r2, r2
 80011ba:	440b      	add	r3, r1
 80011bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c0:	e00a      	b.n	80011d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	4908      	ldr	r1, [pc, #32]	@ (80011e8 <__NVIC_SetPriority+0x50>)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	f003 030f 	and.w	r3, r3, #15
 80011ce:	3b04      	subs	r3, #4
 80011d0:	0112      	lsls	r2, r2, #4
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	440b      	add	r3, r1
 80011d6:	761a      	strb	r2, [r3, #24]
}
 80011d8:	bf00      	nop
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b089      	sub	sp, #36	@ 0x24
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	f1c3 0307 	rsb	r3, r3, #7
 8001206:	2b04      	cmp	r3, #4
 8001208:	bf28      	it	cs
 800120a:	2304      	movcs	r3, #4
 800120c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	3304      	adds	r3, #4
 8001212:	2b06      	cmp	r3, #6
 8001214:	d902      	bls.n	800121c <NVIC_EncodePriority+0x30>
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3b03      	subs	r3, #3
 800121a:	e000      	b.n	800121e <NVIC_EncodePriority+0x32>
 800121c:	2300      	movs	r3, #0
 800121e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	f04f 32ff 	mov.w	r2, #4294967295
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43da      	mvns	r2, r3
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	401a      	ands	r2, r3
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001234:	f04f 31ff 	mov.w	r1, #4294967295
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43d9      	mvns	r1, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001244:	4313      	orrs	r3, r2
         );
}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	@ 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3b01      	subs	r3, #1
 8001260:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001264:	d301      	bcc.n	800126a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001266:	2301      	movs	r3, #1
 8001268:	e00f      	b.n	800128a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <SysTick_Config+0x40>)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001272:	210f      	movs	r1, #15
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f7ff ff8e 	bl	8001198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800127c:	4b05      	ldr	r3, [pc, #20]	@ (8001294 <SysTick_Config+0x40>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001282:	4b04      	ldr	r3, [pc, #16]	@ (8001294 <SysTick_Config+0x40>)
 8001284:	2207      	movs	r2, #7
 8001286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001288:	2300      	movs	r3, #0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	e000e010 	.word	0xe000e010

08001298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012a0:	6878      	ldr	r0, [r7, #4]
 80012a2:	f7ff ff29 	bl	80010f8 <__NVIC_SetPriorityGrouping>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	4603      	mov	r3, r0
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
 80012ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012bc:	f7ff ff40 	bl	8001140 <__NVIC_GetPriorityGrouping>
 80012c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68b9      	ldr	r1, [r7, #8]
 80012c6:	6978      	ldr	r0, [r7, #20]
 80012c8:	f7ff ff90 	bl	80011ec <NVIC_EncodePriority>
 80012cc:	4602      	mov	r2, r0
 80012ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff5f 	bl	8001198 <__NVIC_SetPriority>
}
 80012da:	bf00      	nop
 80012dc:	3718      	adds	r7, #24
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	4603      	mov	r3, r0
 80012ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f7ff ff33 	bl	800115c <__NVIC_EnableIRQ>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b082      	sub	sp, #8
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ffa4 	bl	8001254 <SysTick_Config>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
	...

08001318 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800131c:	f3bf 8f5f 	dmb	sy
}
 8001320:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <HAL_MPU_Disable+0x28>)
 8001324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001326:	4a06      	ldr	r2, [pc, #24]	@ (8001340 <HAL_MPU_Disable+0x28>)
 8001328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_MPU_Disable+0x2c>)
 8001330:	2200      	movs	r2, #0
 8001332:	605a      	str	r2, [r3, #4]
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	e000ed90 	.word	0xe000ed90

08001348 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <HAL_MPU_Enable+0x38>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800135a:	4b0a      	ldr	r3, [pc, #40]	@ (8001384 <HAL_MPU_Enable+0x3c>)
 800135c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135e:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_MPU_Enable+0x3c>)
 8001360:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001364:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed90 	.word	0xe000ed90
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001388:	b480      	push	{r7}
 800138a:	b083      	sub	sp, #12
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	785a      	ldrb	r2, [r3, #1]
 8001394:	4b1b      	ldr	r3, [pc, #108]	@ (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 8001396:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001398:	4b1a      	ldr	r3, [pc, #104]	@ (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	4a19      	ldr	r2, [pc, #100]	@ (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 800139e:	f023 0301 	bic.w	r3, r3, #1
 80013a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013a4:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <HAL_MPU_ConfigRegion+0x7c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7b1b      	ldrb	r3, [r3, #12]
 80013b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	7adb      	ldrb	r3, [r3, #11]
 80013b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	7a9b      	ldrb	r3, [r3, #10]
 80013be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	7b5b      	ldrb	r3, [r3, #13]
 80013c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80013c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7b9b      	ldrb	r3, [r3, #14]
 80013ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80013d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	7bdb      	ldrb	r3, [r3, #15]
 80013d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80013d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	7a5b      	ldrb	r3, [r3, #9]
 80013de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80013e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	7a1b      	ldrb	r3, [r3, #8]
 80013e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80013e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	7812      	ldrb	r2, [r2, #0]
 80013ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f0:	4a04      	ldr	r2, [pc, #16]	@ (8001404 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80013f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	6113      	str	r3, [r2, #16]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed90 	.word	0xe000ed90

08001408 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff fe5a 	bl	80010c8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
 800141e:	e316      	b.n	8001a4e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a66      	ldr	r2, [pc, #408]	@ (80015c0 <HAL_DMA_Init+0x1b8>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d04a      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a65      	ldr	r2, [pc, #404]	@ (80015c4 <HAL_DMA_Init+0x1bc>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d045      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a63      	ldr	r2, [pc, #396]	@ (80015c8 <HAL_DMA_Init+0x1c0>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d040      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a62      	ldr	r2, [pc, #392]	@ (80015cc <HAL_DMA_Init+0x1c4>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d03b      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a60      	ldr	r2, [pc, #384]	@ (80015d0 <HAL_DMA_Init+0x1c8>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d036      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a5f      	ldr	r2, [pc, #380]	@ (80015d4 <HAL_DMA_Init+0x1cc>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d031      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a5d      	ldr	r2, [pc, #372]	@ (80015d8 <HAL_DMA_Init+0x1d0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d02c      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a5c      	ldr	r2, [pc, #368]	@ (80015dc <HAL_DMA_Init+0x1d4>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d027      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a5a      	ldr	r2, [pc, #360]	@ (80015e0 <HAL_DMA_Init+0x1d8>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d022      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a59      	ldr	r2, [pc, #356]	@ (80015e4 <HAL_DMA_Init+0x1dc>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d01d      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a57      	ldr	r2, [pc, #348]	@ (80015e8 <HAL_DMA_Init+0x1e0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d018      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a56      	ldr	r2, [pc, #344]	@ (80015ec <HAL_DMA_Init+0x1e4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d013      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a54      	ldr	r2, [pc, #336]	@ (80015f0 <HAL_DMA_Init+0x1e8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d00e      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a53      	ldr	r2, [pc, #332]	@ (80015f4 <HAL_DMA_Init+0x1ec>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d009      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a51      	ldr	r2, [pc, #324]	@ (80015f8 <HAL_DMA_Init+0x1f0>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d004      	beq.n	80014c0 <HAL_DMA_Init+0xb8>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a50      	ldr	r2, [pc, #320]	@ (80015fc <HAL_DMA_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d101      	bne.n	80014c4 <HAL_DMA_Init+0xbc>
 80014c0:	2301      	movs	r3, #1
 80014c2:	e000      	b.n	80014c6 <HAL_DMA_Init+0xbe>
 80014c4:	2300      	movs	r3, #0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 813b 	beq.w	8001742 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a37      	ldr	r2, [pc, #220]	@ (80015c0 <HAL_DMA_Init+0x1b8>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d04a      	beq.n	800157c <HAL_DMA_Init+0x174>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a36      	ldr	r2, [pc, #216]	@ (80015c4 <HAL_DMA_Init+0x1bc>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d045      	beq.n	800157c <HAL_DMA_Init+0x174>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a34      	ldr	r2, [pc, #208]	@ (80015c8 <HAL_DMA_Init+0x1c0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d040      	beq.n	800157c <HAL_DMA_Init+0x174>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a33      	ldr	r2, [pc, #204]	@ (80015cc <HAL_DMA_Init+0x1c4>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d03b      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a31      	ldr	r2, [pc, #196]	@ (80015d0 <HAL_DMA_Init+0x1c8>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d036      	beq.n	800157c <HAL_DMA_Init+0x174>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a30      	ldr	r2, [pc, #192]	@ (80015d4 <HAL_DMA_Init+0x1cc>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d031      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2e      	ldr	r2, [pc, #184]	@ (80015d8 <HAL_DMA_Init+0x1d0>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d02c      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a2d      	ldr	r2, [pc, #180]	@ (80015dc <HAL_DMA_Init+0x1d4>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d027      	beq.n	800157c <HAL_DMA_Init+0x174>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a2b      	ldr	r2, [pc, #172]	@ (80015e0 <HAL_DMA_Init+0x1d8>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d022      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a2a      	ldr	r2, [pc, #168]	@ (80015e4 <HAL_DMA_Init+0x1dc>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d01d      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a28      	ldr	r2, [pc, #160]	@ (80015e8 <HAL_DMA_Init+0x1e0>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d018      	beq.n	800157c <HAL_DMA_Init+0x174>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a27      	ldr	r2, [pc, #156]	@ (80015ec <HAL_DMA_Init+0x1e4>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d013      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a25      	ldr	r2, [pc, #148]	@ (80015f0 <HAL_DMA_Init+0x1e8>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d00e      	beq.n	800157c <HAL_DMA_Init+0x174>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a24      	ldr	r2, [pc, #144]	@ (80015f4 <HAL_DMA_Init+0x1ec>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d009      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a22      	ldr	r2, [pc, #136]	@ (80015f8 <HAL_DMA_Init+0x1f0>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d004      	beq.n	800157c <HAL_DMA_Init+0x174>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a21      	ldr	r2, [pc, #132]	@ (80015fc <HAL_DMA_Init+0x1f4>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d108      	bne.n	800158e <HAL_DMA_Init+0x186>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f022 0201 	bic.w	r2, r2, #1
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	e007      	b.n	800159e <HAL_DMA_Init+0x196>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0201 	bic.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800159e:	e02f      	b.n	8001600 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015a0:	f7ff fd92 	bl	80010c8 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d928      	bls.n	8001600 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2203      	movs	r2, #3
 80015b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e246      	b.n	8001a4e <HAL_DMA_Init+0x646>
 80015c0:	40020010 	.word	0x40020010
 80015c4:	40020028 	.word	0x40020028
 80015c8:	40020040 	.word	0x40020040
 80015cc:	40020058 	.word	0x40020058
 80015d0:	40020070 	.word	0x40020070
 80015d4:	40020088 	.word	0x40020088
 80015d8:	400200a0 	.word	0x400200a0
 80015dc:	400200b8 	.word	0x400200b8
 80015e0:	40020410 	.word	0x40020410
 80015e4:	40020428 	.word	0x40020428
 80015e8:	40020440 	.word	0x40020440
 80015ec:	40020458 	.word	0x40020458
 80015f0:	40020470 	.word	0x40020470
 80015f4:	40020488 	.word	0x40020488
 80015f8:	400204a0 	.word	0x400204a0
 80015fc:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1c8      	bne.n	80015a0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001616:	697a      	ldr	r2, [r7, #20]
 8001618:	4b83      	ldr	r3, [pc, #524]	@ (8001828 <HAL_DMA_Init+0x420>)
 800161a:	4013      	ands	r3, r2
 800161c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001626:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	691b      	ldr	r3, [r3, #16]
 800162c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001632:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800163e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001646:	697a      	ldr	r2, [r7, #20]
 8001648:	4313      	orrs	r3, r2
 800164a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	2b04      	cmp	r3, #4
 8001652:	d107      	bne.n	8001664 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165c:	4313      	orrs	r3, r2
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4313      	orrs	r3, r2
 8001662:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001664:	4b71      	ldr	r3, [pc, #452]	@ (800182c <HAL_DMA_Init+0x424>)
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	4b71      	ldr	r3, [pc, #452]	@ (8001830 <HAL_DMA_Init+0x428>)
 800166a:	4013      	ands	r3, r2
 800166c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001670:	d328      	bcc.n	80016c4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	2b28      	cmp	r3, #40	@ 0x28
 8001678:	d903      	bls.n	8001682 <HAL_DMA_Init+0x27a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b2e      	cmp	r3, #46	@ 0x2e
 8001680:	d917      	bls.n	80016b2 <HAL_DMA_Init+0x2aa>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b3e      	cmp	r3, #62	@ 0x3e
 8001688:	d903      	bls.n	8001692 <HAL_DMA_Init+0x28a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b42      	cmp	r3, #66	@ 0x42
 8001690:	d90f      	bls.n	80016b2 <HAL_DMA_Init+0x2aa>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b46      	cmp	r3, #70	@ 0x46
 8001698:	d903      	bls.n	80016a2 <HAL_DMA_Init+0x29a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b48      	cmp	r3, #72	@ 0x48
 80016a0:	d907      	bls.n	80016b2 <HAL_DMA_Init+0x2aa>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b4e      	cmp	r3, #78	@ 0x4e
 80016a8:	d905      	bls.n	80016b6 <HAL_DMA_Init+0x2ae>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b52      	cmp	r3, #82	@ 0x52
 80016b0:	d801      	bhi.n	80016b6 <HAL_DMA_Init+0x2ae>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_DMA_Init+0x2b0>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80016c2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	697a      	ldr	r2, [r7, #20]
 80016ca:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	f023 0307 	bic.w	r3, r3, #7
 80016da:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d117      	bne.n	800171e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d00e      	beq.n	800171e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f002 fb33 	bl	8003d6c <DMA_CheckFifoParam>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2240      	movs	r2, #64	@ 0x40
 8001710:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2201      	movs	r2, #1
 8001716:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e197      	b.n	8001a4e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f002 fa6e 	bl	8003c08 <DMA_CalcBaseAndBitshift>
 800172c:	4603      	mov	r3, r0
 800172e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001734:	f003 031f 	and.w	r3, r3, #31
 8001738:	223f      	movs	r2, #63	@ 0x3f
 800173a:	409a      	lsls	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	e0cd      	b.n	80018de <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a3b      	ldr	r2, [pc, #236]	@ (8001834 <HAL_DMA_Init+0x42c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a39      	ldr	r2, [pc, #228]	@ (8001838 <HAL_DMA_Init+0x430>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01d      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_DMA_Init+0x434>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d018      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <HAL_DMA_Init+0x438>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a35      	ldr	r2, [pc, #212]	@ (8001844 <HAL_DMA_Init+0x43c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a33      	ldr	r2, [pc, #204]	@ (8001848 <HAL_DMA_Init+0x440>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a32      	ldr	r2, [pc, #200]	@ (800184c <HAL_DMA_Init+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_DMA_Init+0x38a>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <HAL_DMA_Init+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d101      	bne.n	8001796 <HAL_DMA_Init+0x38e>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_DMA_Init+0x390>
 8001796:	2300      	movs	r3, #0
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8097 	beq.w	80018cc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a24      	ldr	r2, [pc, #144]	@ (8001834 <HAL_DMA_Init+0x42c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d021      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_DMA_Init+0x430>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01c      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a21      	ldr	r2, [pc, #132]	@ (800183c <HAL_DMA_Init+0x434>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d017      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001840 <HAL_DMA_Init+0x438>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d012      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001844 <HAL_DMA_Init+0x43c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00d      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a1c      	ldr	r2, [pc, #112]	@ (8001848 <HAL_DMA_Init+0x440>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d008      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a1b      	ldr	r2, [pc, #108]	@ (800184c <HAL_DMA_Init+0x444>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d003      	beq.n	80017ec <HAL_DMA_Init+0x3e4>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a19      	ldr	r2, [pc, #100]	@ (8001850 <HAL_DMA_Init+0x448>)
 80017ea:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2202      	movs	r2, #2
 80017f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_DMA_Init+0x44c>)
 8001808:	4013      	ands	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	2b40      	cmp	r3, #64	@ 0x40
 8001812:	d021      	beq.n	8001858 <HAL_DMA_Init+0x450>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	2b80      	cmp	r3, #128	@ 0x80
 800181a:	d102      	bne.n	8001822 <HAL_DMA_Init+0x41a>
 800181c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001820:	e01b      	b.n	800185a <HAL_DMA_Init+0x452>
 8001822:	2300      	movs	r3, #0
 8001824:	e019      	b.n	800185a <HAL_DMA_Init+0x452>
 8001826:	bf00      	nop
 8001828:	fe10803f 	.word	0xfe10803f
 800182c:	5c001000 	.word	0x5c001000
 8001830:	ffff0000 	.word	0xffff0000
 8001834:	58025408 	.word	0x58025408
 8001838:	5802541c 	.word	0x5802541c
 800183c:	58025430 	.word	0x58025430
 8001840:	58025444 	.word	0x58025444
 8001844:	58025458 	.word	0x58025458
 8001848:	5802546c 	.word	0x5802546c
 800184c:	58025480 	.word	0x58025480
 8001850:	58025494 	.word	0x58025494
 8001854:	fffe000f 	.word	0xfffe000f
 8001858:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	68d2      	ldr	r2, [r2, #12]
 800185e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001860:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001868:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001870:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001878:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001880:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001888:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <HAL_DMA_Init+0x650>)
 80018a0:	4413      	add	r3, r2
 80018a2:	4a6e      	ldr	r2, [pc, #440]	@ (8001a5c <HAL_DMA_Init+0x654>)
 80018a4:	fba2 2303 	umull	r2, r3, r2, r3
 80018a8:	091b      	lsrs	r3, r3, #4
 80018aa:	009a      	lsls	r2, r3, #2
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f002 f9a9 	bl	8003c08 <DMA_CalcBaseAndBitshift>
 80018b6:	4603      	mov	r3, r0
 80018b8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018be:	f003 031f 	and.w	r3, r3, #31
 80018c2:	2201      	movs	r2, #1
 80018c4:	409a      	lsls	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	e008      	b.n	80018de <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2240      	movs	r2, #64	@ 0x40
 80018d0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2203      	movs	r2, #3
 80018d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e0b7      	b.n	8001a4e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a60 <HAL_DMA_Init+0x658>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d072      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a5d      	ldr	r2, [pc, #372]	@ (8001a64 <HAL_DMA_Init+0x65c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d06d      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a5c      	ldr	r2, [pc, #368]	@ (8001a68 <HAL_DMA_Init+0x660>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d068      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a5a      	ldr	r2, [pc, #360]	@ (8001a6c <HAL_DMA_Init+0x664>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d063      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a59      	ldr	r2, [pc, #356]	@ (8001a70 <HAL_DMA_Init+0x668>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d05e      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a57      	ldr	r2, [pc, #348]	@ (8001a74 <HAL_DMA_Init+0x66c>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d059      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a56      	ldr	r2, [pc, #344]	@ (8001a78 <HAL_DMA_Init+0x670>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d054      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a54      	ldr	r2, [pc, #336]	@ (8001a7c <HAL_DMA_Init+0x674>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d04f      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a53      	ldr	r2, [pc, #332]	@ (8001a80 <HAL_DMA_Init+0x678>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04a      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a51      	ldr	r2, [pc, #324]	@ (8001a84 <HAL_DMA_Init+0x67c>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d045      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a50      	ldr	r2, [pc, #320]	@ (8001a88 <HAL_DMA_Init+0x680>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a4e      	ldr	r2, [pc, #312]	@ (8001a8c <HAL_DMA_Init+0x684>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a4d      	ldr	r2, [pc, #308]	@ (8001a90 <HAL_DMA_Init+0x688>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d036      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4b      	ldr	r2, [pc, #300]	@ (8001a94 <HAL_DMA_Init+0x68c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4a      	ldr	r2, [pc, #296]	@ (8001a98 <HAL_DMA_Init+0x690>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a48      	ldr	r2, [pc, #288]	@ (8001a9c <HAL_DMA_Init+0x694>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a47      	ldr	r2, [pc, #284]	@ (8001aa0 <HAL_DMA_Init+0x698>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a45      	ldr	r2, [pc, #276]	@ (8001aa4 <HAL_DMA_Init+0x69c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a44      	ldr	r2, [pc, #272]	@ (8001aa8 <HAL_DMA_Init+0x6a0>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d018      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a42      	ldr	r2, [pc, #264]	@ (8001aac <HAL_DMA_Init+0x6a4>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a41      	ldr	r2, [pc, #260]	@ (8001ab0 <HAL_DMA_Init+0x6a8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a3f      	ldr	r2, [pc, #252]	@ (8001ab4 <HAL_DMA_Init+0x6ac>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a3e      	ldr	r2, [pc, #248]	@ (8001ab8 <HAL_DMA_Init+0x6b0>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Init+0x5c6>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a3c      	ldr	r2, [pc, #240]	@ (8001abc <HAL_DMA_Init+0x6b4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d101      	bne.n	80019d2 <HAL_DMA_Init+0x5ca>
 80019ce:	2301      	movs	r3, #1
 80019d0:	e000      	b.n	80019d4 <HAL_DMA_Init+0x5cc>
 80019d2:	2300      	movs	r3, #0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d032      	beq.n	8001a3e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f002 fa43 	bl	8003e64 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b80      	cmp	r3, #128	@ 0x80
 80019e4:	d102      	bne.n	80019ec <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685a      	ldr	r2, [r3, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d010      	beq.n	8001a2c <HAL_DMA_Init+0x624>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d80c      	bhi.n	8001a2c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f002 fac0 	bl	8003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	e008      	b.n	8001a3e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2201      	movs	r2, #1
 8001a48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	a7fdabf8 	.word	0xa7fdabf8
 8001a5c:	cccccccd 	.word	0xcccccccd
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
 8001aa0:	58025408 	.word	0x58025408
 8001aa4:	5802541c 	.word	0x5802541c
 8001aa8:	58025430 	.word	0x58025430
 8001aac:	58025444 	.word	0x58025444
 8001ab0:	58025458 	.word	0x58025458
 8001ab4:	5802546c 	.word	0x5802546c
 8001ab8:	58025480 	.word	0x58025480
 8001abc:	58025494 	.word	0x58025494

08001ac0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
 8001acc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e226      	b.n	8001f2a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_DMA_Start_IT+0x2a>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e21f      	b.n	8001f2a <HAL_DMA_Start_IT+0x46a>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 820a 	bne.w	8001f14 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2202      	movs	r2, #2
 8001b04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a68      	ldr	r2, [pc, #416]	@ (8001cb4 <HAL_DMA_Start_IT+0x1f4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d04a      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a66      	ldr	r2, [pc, #408]	@ (8001cb8 <HAL_DMA_Start_IT+0x1f8>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d045      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a65      	ldr	r2, [pc, #404]	@ (8001cbc <HAL_DMA_Start_IT+0x1fc>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d040      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a63      	ldr	r2, [pc, #396]	@ (8001cc0 <HAL_DMA_Start_IT+0x200>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d03b      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a62      	ldr	r2, [pc, #392]	@ (8001cc4 <HAL_DMA_Start_IT+0x204>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d036      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a60      	ldr	r2, [pc, #384]	@ (8001cc8 <HAL_DMA_Start_IT+0x208>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d031      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ccc <HAL_DMA_Start_IT+0x20c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d02c      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd0 <HAL_DMA_Start_IT+0x210>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d027      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd4 <HAL_DMA_Start_IT+0x214>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd8 <HAL_DMA_Start_IT+0x218>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01d      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a59      	ldr	r2, [pc, #356]	@ (8001cdc <HAL_DMA_Start_IT+0x21c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d018      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a57      	ldr	r2, [pc, #348]	@ (8001ce0 <HAL_DMA_Start_IT+0x220>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a56      	ldr	r2, [pc, #344]	@ (8001ce4 <HAL_DMA_Start_IT+0x224>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00e      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a54      	ldr	r2, [pc, #336]	@ (8001ce8 <HAL_DMA_Start_IT+0x228>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d009      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a53      	ldr	r2, [pc, #332]	@ (8001cec <HAL_DMA_Start_IT+0x22c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d004      	beq.n	8001bae <HAL_DMA_Start_IT+0xee>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a51      	ldr	r2, [pc, #324]	@ (8001cf0 <HAL_DMA_Start_IT+0x230>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d108      	bne.n	8001bc0 <HAL_DMA_Start_IT+0x100>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	e007      	b.n	8001bd0 <HAL_DMA_Start_IT+0x110>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	687a      	ldr	r2, [r7, #4]
 8001bd4:	68b9      	ldr	r1, [r7, #8]
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	f001 fe6a 	bl	80038b0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a34      	ldr	r2, [pc, #208]	@ (8001cb4 <HAL_DMA_Start_IT+0x1f4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d04a      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a33      	ldr	r2, [pc, #204]	@ (8001cb8 <HAL_DMA_Start_IT+0x1f8>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d045      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a31      	ldr	r2, [pc, #196]	@ (8001cbc <HAL_DMA_Start_IT+0x1fc>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a30      	ldr	r2, [pc, #192]	@ (8001cc0 <HAL_DMA_Start_IT+0x200>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d03b      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2e      	ldr	r2, [pc, #184]	@ (8001cc4 <HAL_DMA_Start_IT+0x204>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a2d      	ldr	r2, [pc, #180]	@ (8001cc8 <HAL_DMA_Start_IT+0x208>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d031      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001ccc <HAL_DMA_Start_IT+0x20c>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02c      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a2a      	ldr	r2, [pc, #168]	@ (8001cd0 <HAL_DMA_Start_IT+0x210>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d027      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a28      	ldr	r2, [pc, #160]	@ (8001cd4 <HAL_DMA_Start_IT+0x214>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a27      	ldr	r2, [pc, #156]	@ (8001cd8 <HAL_DMA_Start_IT+0x218>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01d      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a25      	ldr	r2, [pc, #148]	@ (8001cdc <HAL_DMA_Start_IT+0x21c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a24      	ldr	r2, [pc, #144]	@ (8001ce0 <HAL_DMA_Start_IT+0x220>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a22      	ldr	r2, [pc, #136]	@ (8001ce4 <HAL_DMA_Start_IT+0x224>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_DMA_Start_IT+0x228>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cec <HAL_DMA_Start_IT+0x22c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_Start_IT+0x1bc>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a1e      	ldr	r2, [pc, #120]	@ (8001cf0 <HAL_DMA_Start_IT+0x230>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_Start_IT+0x1c0>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_Start_IT+0x1c2>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d036      	beq.n	8001cf4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 021e 	bic.w	r2, r3, #30
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f042 0216 	orr.w	r2, r2, #22
 8001c98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d03e      	beq.n	8001d20 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0208 	orr.w	r2, r2, #8
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	e035      	b.n	8001d20 <HAL_DMA_Start_IT+0x260>
 8001cb4:	40020010 	.word	0x40020010
 8001cb8:	40020028 	.word	0x40020028
 8001cbc:	40020040 	.word	0x40020040
 8001cc0:	40020058 	.word	0x40020058
 8001cc4:	40020070 	.word	0x40020070
 8001cc8:	40020088 	.word	0x40020088
 8001ccc:	400200a0 	.word	0x400200a0
 8001cd0:	400200b8 	.word	0x400200b8
 8001cd4:	40020410 	.word	0x40020410
 8001cd8:	40020428 	.word	0x40020428
 8001cdc:	40020440 	.word	0x40020440
 8001ce0:	40020458 	.word	0x40020458
 8001ce4:	40020470 	.word	0x40020470
 8001ce8:	40020488 	.word	0x40020488
 8001cec:	400204a0 	.word	0x400204a0
 8001cf0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 020e 	bic.w	r2, r3, #14
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 020a 	orr.w	r2, r2, #10
 8001d06:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d007      	beq.n	8001d20 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0204 	orr.w	r2, r2, #4
 8001d1e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a83      	ldr	r2, [pc, #524]	@ (8001f34 <HAL_DMA_Start_IT+0x474>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d072      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a82      	ldr	r2, [pc, #520]	@ (8001f38 <HAL_DMA_Start_IT+0x478>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d06d      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_DMA_Start_IT+0x47c>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d068      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a7f      	ldr	r2, [pc, #508]	@ (8001f40 <HAL_DMA_Start_IT+0x480>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d063      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a7d      	ldr	r2, [pc, #500]	@ (8001f44 <HAL_DMA_Start_IT+0x484>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d05e      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a7c      	ldr	r2, [pc, #496]	@ (8001f48 <HAL_DMA_Start_IT+0x488>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d059      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a7a      	ldr	r2, [pc, #488]	@ (8001f4c <HAL_DMA_Start_IT+0x48c>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d054      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a79      	ldr	r2, [pc, #484]	@ (8001f50 <HAL_DMA_Start_IT+0x490>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d04f      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a77      	ldr	r2, [pc, #476]	@ (8001f54 <HAL_DMA_Start_IT+0x494>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d04a      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a76      	ldr	r2, [pc, #472]	@ (8001f58 <HAL_DMA_Start_IT+0x498>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d045      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a74      	ldr	r2, [pc, #464]	@ (8001f5c <HAL_DMA_Start_IT+0x49c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d040      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a73      	ldr	r2, [pc, #460]	@ (8001f60 <HAL_DMA_Start_IT+0x4a0>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d03b      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a71      	ldr	r2, [pc, #452]	@ (8001f64 <HAL_DMA_Start_IT+0x4a4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d036      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a70      	ldr	r2, [pc, #448]	@ (8001f68 <HAL_DMA_Start_IT+0x4a8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d031      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a6e      	ldr	r2, [pc, #440]	@ (8001f6c <HAL_DMA_Start_IT+0x4ac>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d02c      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a6d      	ldr	r2, [pc, #436]	@ (8001f70 <HAL_DMA_Start_IT+0x4b0>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d027      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6b      	ldr	r2, [pc, #428]	@ (8001f74 <HAL_DMA_Start_IT+0x4b4>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d022      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a6a      	ldr	r2, [pc, #424]	@ (8001f78 <HAL_DMA_Start_IT+0x4b8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d01d      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a68      	ldr	r2, [pc, #416]	@ (8001f7c <HAL_DMA_Start_IT+0x4bc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d018      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a67      	ldr	r2, [pc, #412]	@ (8001f80 <HAL_DMA_Start_IT+0x4c0>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a65      	ldr	r2, [pc, #404]	@ (8001f84 <HAL_DMA_Start_IT+0x4c4>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d00e      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a64      	ldr	r2, [pc, #400]	@ (8001f88 <HAL_DMA_Start_IT+0x4c8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d009      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a62      	ldr	r2, [pc, #392]	@ (8001f8c <HAL_DMA_Start_IT+0x4cc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d004      	beq.n	8001e10 <HAL_DMA_Start_IT+0x350>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a61      	ldr	r2, [pc, #388]	@ (8001f90 <HAL_DMA_Start_IT+0x4d0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d101      	bne.n	8001e14 <HAL_DMA_Start_IT+0x354>
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <HAL_DMA_Start_IT+0x356>
 8001e14:	2300      	movs	r3, #0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d01a      	beq.n	8001e50 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e32:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e36:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d007      	beq.n	8001e50 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e4a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001e4e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a37      	ldr	r2, [pc, #220]	@ (8001f34 <HAL_DMA_Start_IT+0x474>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04a      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a36      	ldr	r2, [pc, #216]	@ (8001f38 <HAL_DMA_Start_IT+0x478>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d045      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a34      	ldr	r2, [pc, #208]	@ (8001f3c <HAL_DMA_Start_IT+0x47c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a33      	ldr	r2, [pc, #204]	@ (8001f40 <HAL_DMA_Start_IT+0x480>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d03b      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a31      	ldr	r2, [pc, #196]	@ (8001f44 <HAL_DMA_Start_IT+0x484>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d036      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a30      	ldr	r2, [pc, #192]	@ (8001f48 <HAL_DMA_Start_IT+0x488>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d031      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_DMA_Start_IT+0x48c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02c      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f50 <HAL_DMA_Start_IT+0x490>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d027      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f54 <HAL_DMA_Start_IT+0x494>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d022      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a2a      	ldr	r2, [pc, #168]	@ (8001f58 <HAL_DMA_Start_IT+0x498>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01d      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a28      	ldr	r2, [pc, #160]	@ (8001f5c <HAL_DMA_Start_IT+0x49c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d018      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a27      	ldr	r2, [pc, #156]	@ (8001f60 <HAL_DMA_Start_IT+0x4a0>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a25      	ldr	r2, [pc, #148]	@ (8001f64 <HAL_DMA_Start_IT+0x4a4>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a24      	ldr	r2, [pc, #144]	@ (8001f68 <HAL_DMA_Start_IT+0x4a8>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a22      	ldr	r2, [pc, #136]	@ (8001f6c <HAL_DMA_Start_IT+0x4ac>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x430>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a21      	ldr	r2, [pc, #132]	@ (8001f70 <HAL_DMA_Start_IT+0x4b0>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d108      	bne.n	8001f02 <HAL_DMA_Start_IT+0x442>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 0201 	orr.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]
 8001f00:	e012      	b.n	8001f28 <HAL_DMA_Start_IT+0x468>
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f042 0201 	orr.w	r2, r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	e009      	b.n	8001f28 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40020010 	.word	0x40020010
 8001f38:	40020028 	.word	0x40020028
 8001f3c:	40020040 	.word	0x40020040
 8001f40:	40020058 	.word	0x40020058
 8001f44:	40020070 	.word	0x40020070
 8001f48:	40020088 	.word	0x40020088
 8001f4c:	400200a0 	.word	0x400200a0
 8001f50:	400200b8 	.word	0x400200b8
 8001f54:	40020410 	.word	0x40020410
 8001f58:	40020428 	.word	0x40020428
 8001f5c:	40020440 	.word	0x40020440
 8001f60:	40020458 	.word	0x40020458
 8001f64:	40020470 	.word	0x40020470
 8001f68:	40020488 	.word	0x40020488
 8001f6c:	400204a0 	.word	0x400204a0
 8001f70:	400204b8 	.word	0x400204b8
 8001f74:	58025408 	.word	0x58025408
 8001f78:	5802541c 	.word	0x5802541c
 8001f7c:	58025430 	.word	0x58025430
 8001f80:	58025444 	.word	0x58025444
 8001f84:	58025458 	.word	0x58025458
 8001f88:	5802546c 	.word	0x5802546c
 8001f8c:	58025480 	.word	0x58025480
 8001f90:	58025494 	.word	0x58025494

08001f94 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001f9c:	f7ff f894 	bl	80010c8 <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e2dc      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fb2:	b2db      	uxtb	r3, r3
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d008      	beq.n	8001fca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2280      	movs	r2, #128	@ 0x80
 8001fbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e2cd      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a76      	ldr	r2, [pc, #472]	@ (80021a8 <HAL_DMA_Abort+0x214>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04a      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a74      	ldr	r2, [pc, #464]	@ (80021ac <HAL_DMA_Abort+0x218>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d045      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a73      	ldr	r2, [pc, #460]	@ (80021b0 <HAL_DMA_Abort+0x21c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d040      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a71      	ldr	r2, [pc, #452]	@ (80021b4 <HAL_DMA_Abort+0x220>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d03b      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a70      	ldr	r2, [pc, #448]	@ (80021b8 <HAL_DMA_Abort+0x224>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a6e      	ldr	r2, [pc, #440]	@ (80021bc <HAL_DMA_Abort+0x228>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a6d      	ldr	r2, [pc, #436]	@ (80021c0 <HAL_DMA_Abort+0x22c>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a6b      	ldr	r2, [pc, #428]	@ (80021c4 <HAL_DMA_Abort+0x230>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d027      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a6a      	ldr	r2, [pc, #424]	@ (80021c8 <HAL_DMA_Abort+0x234>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a68      	ldr	r2, [pc, #416]	@ (80021cc <HAL_DMA_Abort+0x238>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01d      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a67      	ldr	r2, [pc, #412]	@ (80021d0 <HAL_DMA_Abort+0x23c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d018      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a65      	ldr	r2, [pc, #404]	@ (80021d4 <HAL_DMA_Abort+0x240>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a64      	ldr	r2, [pc, #400]	@ (80021d8 <HAL_DMA_Abort+0x244>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a62      	ldr	r2, [pc, #392]	@ (80021dc <HAL_DMA_Abort+0x248>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a61      	ldr	r2, [pc, #388]	@ (80021e0 <HAL_DMA_Abort+0x24c>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Abort+0xd6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a5f      	ldr	r2, [pc, #380]	@ (80021e4 <HAL_DMA_Abort+0x250>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_DMA_Abort+0xda>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_DMA_Abort+0xdc>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d013      	beq.n	800209c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 021e 	bic.w	r2, r2, #30
 8002082:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	695a      	ldr	r2, [r3, #20]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002092:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 020e 	bic.w	r2, r2, #14
 80020aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a3c      	ldr	r2, [pc, #240]	@ (80021a8 <HAL_DMA_Abort+0x214>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d072      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a3a      	ldr	r2, [pc, #232]	@ (80021ac <HAL_DMA_Abort+0x218>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d06d      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a39      	ldr	r2, [pc, #228]	@ (80021b0 <HAL_DMA_Abort+0x21c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d068      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a37      	ldr	r2, [pc, #220]	@ (80021b4 <HAL_DMA_Abort+0x220>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d063      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a36      	ldr	r2, [pc, #216]	@ (80021b8 <HAL_DMA_Abort+0x224>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d05e      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a34      	ldr	r2, [pc, #208]	@ (80021bc <HAL_DMA_Abort+0x228>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d059      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a33      	ldr	r2, [pc, #204]	@ (80021c0 <HAL_DMA_Abort+0x22c>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d054      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a31      	ldr	r2, [pc, #196]	@ (80021c4 <HAL_DMA_Abort+0x230>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d04f      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a30      	ldr	r2, [pc, #192]	@ (80021c8 <HAL_DMA_Abort+0x234>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d04a      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <HAL_DMA_Abort+0x238>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d045      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a2d      	ldr	r2, [pc, #180]	@ (80021d0 <HAL_DMA_Abort+0x23c>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d040      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a2b      	ldr	r2, [pc, #172]	@ (80021d4 <HAL_DMA_Abort+0x240>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03b      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a2a      	ldr	r2, [pc, #168]	@ (80021d8 <HAL_DMA_Abort+0x244>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d036      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a28      	ldr	r2, [pc, #160]	@ (80021dc <HAL_DMA_Abort+0x248>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a27      	ldr	r2, [pc, #156]	@ (80021e0 <HAL_DMA_Abort+0x24c>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d02c      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a25      	ldr	r2, [pc, #148]	@ (80021e4 <HAL_DMA_Abort+0x250>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d027      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a24      	ldr	r2, [pc, #144]	@ (80021e8 <HAL_DMA_Abort+0x254>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d022      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <HAL_DMA_Abort+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d01d      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a21      	ldr	r2, [pc, #132]	@ (80021f0 <HAL_DMA_Abort+0x25c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d018      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a1f      	ldr	r2, [pc, #124]	@ (80021f4 <HAL_DMA_Abort+0x260>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d013      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a1e      	ldr	r2, [pc, #120]	@ (80021f8 <HAL_DMA_Abort+0x264>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00e      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a1c      	ldr	r2, [pc, #112]	@ (80021fc <HAL_DMA_Abort+0x268>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d009      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a1b      	ldr	r2, [pc, #108]	@ (8002200 <HAL_DMA_Abort+0x26c>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d004      	beq.n	80021a2 <HAL_DMA_Abort+0x20e>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a19      	ldr	r2, [pc, #100]	@ (8002204 <HAL_DMA_Abort+0x270>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d132      	bne.n	8002208 <HAL_DMA_Abort+0x274>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e031      	b.n	800220a <HAL_DMA_Abort+0x276>
 80021a6:	bf00      	nop
 80021a8:	40020010 	.word	0x40020010
 80021ac:	40020028 	.word	0x40020028
 80021b0:	40020040 	.word	0x40020040
 80021b4:	40020058 	.word	0x40020058
 80021b8:	40020070 	.word	0x40020070
 80021bc:	40020088 	.word	0x40020088
 80021c0:	400200a0 	.word	0x400200a0
 80021c4:	400200b8 	.word	0x400200b8
 80021c8:	40020410 	.word	0x40020410
 80021cc:	40020428 	.word	0x40020428
 80021d0:	40020440 	.word	0x40020440
 80021d4:	40020458 	.word	0x40020458
 80021d8:	40020470 	.word	0x40020470
 80021dc:	40020488 	.word	0x40020488
 80021e0:	400204a0 	.word	0x400204a0
 80021e4:	400204b8 	.word	0x400204b8
 80021e8:	58025408 	.word	0x58025408
 80021ec:	5802541c 	.word	0x5802541c
 80021f0:	58025430 	.word	0x58025430
 80021f4:	58025444 	.word	0x58025444
 80021f8:	58025458 	.word	0x58025458
 80021fc:	5802546c 	.word	0x5802546c
 8002200:	58025480 	.word	0x58025480
 8002204:	58025494 	.word	0x58025494
 8002208:	2300      	movs	r3, #0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d007      	beq.n	800221e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002218:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800221c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a6d      	ldr	r2, [pc, #436]	@ (80023d8 <HAL_DMA_Abort+0x444>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d04a      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6b      	ldr	r2, [pc, #428]	@ (80023dc <HAL_DMA_Abort+0x448>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d045      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a6a      	ldr	r2, [pc, #424]	@ (80023e0 <HAL_DMA_Abort+0x44c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d040      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a68      	ldr	r2, [pc, #416]	@ (80023e4 <HAL_DMA_Abort+0x450>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d03b      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a67      	ldr	r2, [pc, #412]	@ (80023e8 <HAL_DMA_Abort+0x454>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d036      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a65      	ldr	r2, [pc, #404]	@ (80023ec <HAL_DMA_Abort+0x458>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d031      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a64      	ldr	r2, [pc, #400]	@ (80023f0 <HAL_DMA_Abort+0x45c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d02c      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a62      	ldr	r2, [pc, #392]	@ (80023f4 <HAL_DMA_Abort+0x460>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d027      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a61      	ldr	r2, [pc, #388]	@ (80023f8 <HAL_DMA_Abort+0x464>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a5f      	ldr	r2, [pc, #380]	@ (80023fc <HAL_DMA_Abort+0x468>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01d      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a5e      	ldr	r2, [pc, #376]	@ (8002400 <HAL_DMA_Abort+0x46c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a5c      	ldr	r2, [pc, #368]	@ (8002404 <HAL_DMA_Abort+0x470>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a5b      	ldr	r2, [pc, #364]	@ (8002408 <HAL_DMA_Abort+0x474>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a59      	ldr	r2, [pc, #356]	@ (800240c <HAL_DMA_Abort+0x478>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a58      	ldr	r2, [pc, #352]	@ (8002410 <HAL_DMA_Abort+0x47c>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <HAL_DMA_Abort+0x32a>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a56      	ldr	r2, [pc, #344]	@ (8002414 <HAL_DMA_Abort+0x480>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d108      	bne.n	80022d0 <HAL_DMA_Abort+0x33c>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f022 0201 	bic.w	r2, r2, #1
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	e007      	b.n	80022e0 <HAL_DMA_Abort+0x34c>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 0201 	bic.w	r2, r2, #1
 80022de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80022e0:	e013      	b.n	800230a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e2:	f7fe fef1 	bl	80010c8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b05      	cmp	r3, #5
 80022ee:	d90c      	bls.n	800230a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2220      	movs	r2, #32
 80022f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2203      	movs	r2, #3
 80022fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e12d      	b.n	8002566 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1e5      	bne.n	80022e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a2f      	ldr	r2, [pc, #188]	@ (80023d8 <HAL_DMA_Abort+0x444>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d04a      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2d      	ldr	r2, [pc, #180]	@ (80023dc <HAL_DMA_Abort+0x448>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d045      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2c      	ldr	r2, [pc, #176]	@ (80023e0 <HAL_DMA_Abort+0x44c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d040      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2a      	ldr	r2, [pc, #168]	@ (80023e4 <HAL_DMA_Abort+0x450>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d03b      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a29      	ldr	r2, [pc, #164]	@ (80023e8 <HAL_DMA_Abort+0x454>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d036      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a27      	ldr	r2, [pc, #156]	@ (80023ec <HAL_DMA_Abort+0x458>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d031      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a26      	ldr	r2, [pc, #152]	@ (80023f0 <HAL_DMA_Abort+0x45c>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d02c      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a24      	ldr	r2, [pc, #144]	@ (80023f4 <HAL_DMA_Abort+0x460>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d027      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a23      	ldr	r2, [pc, #140]	@ (80023f8 <HAL_DMA_Abort+0x464>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a21      	ldr	r2, [pc, #132]	@ (80023fc <HAL_DMA_Abort+0x468>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d01d      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a20      	ldr	r2, [pc, #128]	@ (8002400 <HAL_DMA_Abort+0x46c>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d018      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1e      	ldr	r2, [pc, #120]	@ (8002404 <HAL_DMA_Abort+0x470>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d013      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <HAL_DMA_Abort+0x474>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d00e      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a1b      	ldr	r2, [pc, #108]	@ (800240c <HAL_DMA_Abort+0x478>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d009      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002410 <HAL_DMA_Abort+0x47c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_DMA_Abort+0x422>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a18      	ldr	r2, [pc, #96]	@ (8002414 <HAL_DMA_Abort+0x480>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_DMA_Abort+0x426>
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_DMA_Abort+0x428>
 80023ba:	2300      	movs	r3, #0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d02b      	beq.n	8002418 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023ca:	f003 031f 	and.w	r3, r3, #31
 80023ce:	223f      	movs	r2, #63	@ 0x3f
 80023d0:	409a      	lsls	r2, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	609a      	str	r2, [r3, #8]
 80023d6:	e02a      	b.n	800242e <HAL_DMA_Abort+0x49a>
 80023d8:	40020010 	.word	0x40020010
 80023dc:	40020028 	.word	0x40020028
 80023e0:	40020040 	.word	0x40020040
 80023e4:	40020058 	.word	0x40020058
 80023e8:	40020070 	.word	0x40020070
 80023ec:	40020088 	.word	0x40020088
 80023f0:	400200a0 	.word	0x400200a0
 80023f4:	400200b8 	.word	0x400200b8
 80023f8:	40020410 	.word	0x40020410
 80023fc:	40020428 	.word	0x40020428
 8002400:	40020440 	.word	0x40020440
 8002404:	40020458 	.word	0x40020458
 8002408:	40020470 	.word	0x40020470
 800240c:	40020488 	.word	0x40020488
 8002410:	400204a0 	.word	0x400204a0
 8002414:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002422:	f003 031f 	and.w	r3, r3, #31
 8002426:	2201      	movs	r2, #1
 8002428:	409a      	lsls	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a4f      	ldr	r2, [pc, #316]	@ (8002570 <HAL_DMA_Abort+0x5dc>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d072      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a4d      	ldr	r2, [pc, #308]	@ (8002574 <HAL_DMA_Abort+0x5e0>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d06d      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a4c      	ldr	r2, [pc, #304]	@ (8002578 <HAL_DMA_Abort+0x5e4>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d068      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a4a      	ldr	r2, [pc, #296]	@ (800257c <HAL_DMA_Abort+0x5e8>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d063      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a49      	ldr	r2, [pc, #292]	@ (8002580 <HAL_DMA_Abort+0x5ec>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d05e      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a47      	ldr	r2, [pc, #284]	@ (8002584 <HAL_DMA_Abort+0x5f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d059      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a46      	ldr	r2, [pc, #280]	@ (8002588 <HAL_DMA_Abort+0x5f4>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d054      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a44      	ldr	r2, [pc, #272]	@ (800258c <HAL_DMA_Abort+0x5f8>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d04f      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a43      	ldr	r2, [pc, #268]	@ (8002590 <HAL_DMA_Abort+0x5fc>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d04a      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a41      	ldr	r2, [pc, #260]	@ (8002594 <HAL_DMA_Abort+0x600>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d045      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a40      	ldr	r2, [pc, #256]	@ (8002598 <HAL_DMA_Abort+0x604>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d040      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3e      	ldr	r2, [pc, #248]	@ (800259c <HAL_DMA_Abort+0x608>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d03b      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3d      	ldr	r2, [pc, #244]	@ (80025a0 <HAL_DMA_Abort+0x60c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d036      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a3b      	ldr	r2, [pc, #236]	@ (80025a4 <HAL_DMA_Abort+0x610>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d031      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a3a      	ldr	r2, [pc, #232]	@ (80025a8 <HAL_DMA_Abort+0x614>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d02c      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a38      	ldr	r2, [pc, #224]	@ (80025ac <HAL_DMA_Abort+0x618>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d027      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a37      	ldr	r2, [pc, #220]	@ (80025b0 <HAL_DMA_Abort+0x61c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d022      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a35      	ldr	r2, [pc, #212]	@ (80025b4 <HAL_DMA_Abort+0x620>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d01d      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a34      	ldr	r2, [pc, #208]	@ (80025b8 <HAL_DMA_Abort+0x624>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d018      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a32      	ldr	r2, [pc, #200]	@ (80025bc <HAL_DMA_Abort+0x628>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d013      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a31      	ldr	r2, [pc, #196]	@ (80025c0 <HAL_DMA_Abort+0x62c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d00e      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a2f      	ldr	r2, [pc, #188]	@ (80025c4 <HAL_DMA_Abort+0x630>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d009      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a2e      	ldr	r2, [pc, #184]	@ (80025c8 <HAL_DMA_Abort+0x634>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d004      	beq.n	800251e <HAL_DMA_Abort+0x58a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a2c      	ldr	r2, [pc, #176]	@ (80025cc <HAL_DMA_Abort+0x638>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d101      	bne.n	8002522 <HAL_DMA_Abort+0x58e>
 800251e:	2301      	movs	r3, #1
 8002520:	e000      	b.n	8002524 <HAL_DMA_Abort+0x590>
 8002522:	2300      	movs	r3, #0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d015      	beq.n	8002554 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002530:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00c      	beq.n	8002554 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002544:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002548:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002552:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2200      	movs	r2, #0
 8002560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002564:	2300      	movs	r3, #0
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40020010 	.word	0x40020010
 8002574:	40020028 	.word	0x40020028
 8002578:	40020040 	.word	0x40020040
 800257c:	40020058 	.word	0x40020058
 8002580:	40020070 	.word	0x40020070
 8002584:	40020088 	.word	0x40020088
 8002588:	400200a0 	.word	0x400200a0
 800258c:	400200b8 	.word	0x400200b8
 8002590:	40020410 	.word	0x40020410
 8002594:	40020428 	.word	0x40020428
 8002598:	40020440 	.word	0x40020440
 800259c:	40020458 	.word	0x40020458
 80025a0:	40020470 	.word	0x40020470
 80025a4:	40020488 	.word	0x40020488
 80025a8:	400204a0 	.word	0x400204a0
 80025ac:	400204b8 	.word	0x400204b8
 80025b0:	58025408 	.word	0x58025408
 80025b4:	5802541c 	.word	0x5802541c
 80025b8:	58025430 	.word	0x58025430
 80025bc:	58025444 	.word	0x58025444
 80025c0:	58025458 	.word	0x58025458
 80025c4:	5802546c 	.word	0x5802546c
 80025c8:	58025480 	.word	0x58025480
 80025cc:	58025494 	.word	0x58025494

080025d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e237      	b.n	8002a52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2280      	movs	r2, #128	@ 0x80
 80025f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e22c      	b.n	8002a52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002770 <HAL_DMA_Abort_IT+0x1a0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d04a      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a5b      	ldr	r2, [pc, #364]	@ (8002774 <HAL_DMA_Abort_IT+0x1a4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d045      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a59      	ldr	r2, [pc, #356]	@ (8002778 <HAL_DMA_Abort_IT+0x1a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d040      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a58      	ldr	r2, [pc, #352]	@ (800277c <HAL_DMA_Abort_IT+0x1ac>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d03b      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a56      	ldr	r2, [pc, #344]	@ (8002780 <HAL_DMA_Abort_IT+0x1b0>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d036      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a55      	ldr	r2, [pc, #340]	@ (8002784 <HAL_DMA_Abort_IT+0x1b4>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d031      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a53      	ldr	r2, [pc, #332]	@ (8002788 <HAL_DMA_Abort_IT+0x1b8>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d02c      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a52      	ldr	r2, [pc, #328]	@ (800278c <HAL_DMA_Abort_IT+0x1bc>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d027      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a50      	ldr	r2, [pc, #320]	@ (8002790 <HAL_DMA_Abort_IT+0x1c0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d022      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a4f      	ldr	r2, [pc, #316]	@ (8002794 <HAL_DMA_Abort_IT+0x1c4>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d01d      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a4d      	ldr	r2, [pc, #308]	@ (8002798 <HAL_DMA_Abort_IT+0x1c8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d018      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a4c      	ldr	r2, [pc, #304]	@ (800279c <HAL_DMA_Abort_IT+0x1cc>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d013      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a4a      	ldr	r2, [pc, #296]	@ (80027a0 <HAL_DMA_Abort_IT+0x1d0>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d00e      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a49      	ldr	r2, [pc, #292]	@ (80027a4 <HAL_DMA_Abort_IT+0x1d4>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d009      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a47      	ldr	r2, [pc, #284]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d8>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d004      	beq.n	8002698 <HAL_DMA_Abort_IT+0xc8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a46      	ldr	r2, [pc, #280]	@ (80027ac <HAL_DMA_Abort_IT+0x1dc>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d101      	bne.n	800269c <HAL_DMA_Abort_IT+0xcc>
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_DMA_Abort_IT+0xce>
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 8086 	beq.w	80027b0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2204      	movs	r2, #4
 80026a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002770 <HAL_DMA_Abort_IT+0x1a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d04a      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002774 <HAL_DMA_Abort_IT+0x1a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d045      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002778 <HAL_DMA_Abort_IT+0x1a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d040      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a2b      	ldr	r2, [pc, #172]	@ (800277c <HAL_DMA_Abort_IT+0x1ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d03b      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a29      	ldr	r2, [pc, #164]	@ (8002780 <HAL_DMA_Abort_IT+0x1b0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d036      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a28      	ldr	r2, [pc, #160]	@ (8002784 <HAL_DMA_Abort_IT+0x1b4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d031      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a26      	ldr	r2, [pc, #152]	@ (8002788 <HAL_DMA_Abort_IT+0x1b8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d02c      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a25      	ldr	r2, [pc, #148]	@ (800278c <HAL_DMA_Abort_IT+0x1bc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d027      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a23      	ldr	r2, [pc, #140]	@ (8002790 <HAL_DMA_Abort_IT+0x1c0>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d022      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a22      	ldr	r2, [pc, #136]	@ (8002794 <HAL_DMA_Abort_IT+0x1c4>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d01d      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a20      	ldr	r2, [pc, #128]	@ (8002798 <HAL_DMA_Abort_IT+0x1c8>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d018      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a1f      	ldr	r2, [pc, #124]	@ (800279c <HAL_DMA_Abort_IT+0x1cc>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d013      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1d      	ldr	r2, [pc, #116]	@ (80027a0 <HAL_DMA_Abort_IT+0x1d0>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d00e      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1c      	ldr	r2, [pc, #112]	@ (80027a4 <HAL_DMA_Abort_IT+0x1d4>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d009      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1a      	ldr	r2, [pc, #104]	@ (80027a8 <HAL_DMA_Abort_IT+0x1d8>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d004      	beq.n	800274c <HAL_DMA_Abort_IT+0x17c>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a19      	ldr	r2, [pc, #100]	@ (80027ac <HAL_DMA_Abort_IT+0x1dc>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d108      	bne.n	800275e <HAL_DMA_Abort_IT+0x18e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	e178      	b.n	8002a50 <HAL_DMA_Abort_IT+0x480>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0201 	bic.w	r2, r2, #1
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	e16f      	b.n	8002a50 <HAL_DMA_Abort_IT+0x480>
 8002770:	40020010 	.word	0x40020010
 8002774:	40020028 	.word	0x40020028
 8002778:	40020040 	.word	0x40020040
 800277c:	40020058 	.word	0x40020058
 8002780:	40020070 	.word	0x40020070
 8002784:	40020088 	.word	0x40020088
 8002788:	400200a0 	.word	0x400200a0
 800278c:	400200b8 	.word	0x400200b8
 8002790:	40020410 	.word	0x40020410
 8002794:	40020428 	.word	0x40020428
 8002798:	40020440 	.word	0x40020440
 800279c:	40020458 	.word	0x40020458
 80027a0:	40020470 	.word	0x40020470
 80027a4:	40020488 	.word	0x40020488
 80027a8:	400204a0 	.word	0x400204a0
 80027ac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f022 020e 	bic.w	r2, r2, #14
 80027be:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a6c      	ldr	r2, [pc, #432]	@ (8002978 <HAL_DMA_Abort_IT+0x3a8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d04a      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a6b      	ldr	r2, [pc, #428]	@ (800297c <HAL_DMA_Abort_IT+0x3ac>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d045      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a69      	ldr	r2, [pc, #420]	@ (8002980 <HAL_DMA_Abort_IT+0x3b0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d040      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a68      	ldr	r2, [pc, #416]	@ (8002984 <HAL_DMA_Abort_IT+0x3b4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03b      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a66      	ldr	r2, [pc, #408]	@ (8002988 <HAL_DMA_Abort_IT+0x3b8>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d036      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a65      	ldr	r2, [pc, #404]	@ (800298c <HAL_DMA_Abort_IT+0x3bc>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d031      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a63      	ldr	r2, [pc, #396]	@ (8002990 <HAL_DMA_Abort_IT+0x3c0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d02c      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a62      	ldr	r2, [pc, #392]	@ (8002994 <HAL_DMA_Abort_IT+0x3c4>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d027      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a60      	ldr	r2, [pc, #384]	@ (8002998 <HAL_DMA_Abort_IT+0x3c8>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d022      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a5f      	ldr	r2, [pc, #380]	@ (800299c <HAL_DMA_Abort_IT+0x3cc>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d01d      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5d      	ldr	r2, [pc, #372]	@ (80029a0 <HAL_DMA_Abort_IT+0x3d0>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d018      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a5c      	ldr	r2, [pc, #368]	@ (80029a4 <HAL_DMA_Abort_IT+0x3d4>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d013      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a5a      	ldr	r2, [pc, #360]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d8>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00e      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a59      	ldr	r2, [pc, #356]	@ (80029ac <HAL_DMA_Abort_IT+0x3dc>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d009      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a57      	ldr	r2, [pc, #348]	@ (80029b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_DMA_Abort_IT+0x290>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a56      	ldr	r2, [pc, #344]	@ (80029b4 <HAL_DMA_Abort_IT+0x3e4>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d108      	bne.n	8002872 <HAL_DMA_Abort_IT+0x2a2>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0201 	bic.w	r2, r2, #1
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	e007      	b.n	8002882 <HAL_DMA_Abort_IT+0x2b2>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a3c      	ldr	r2, [pc, #240]	@ (8002978 <HAL_DMA_Abort_IT+0x3a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d072      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a3a      	ldr	r2, [pc, #232]	@ (800297c <HAL_DMA_Abort_IT+0x3ac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d06d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a39      	ldr	r2, [pc, #228]	@ (8002980 <HAL_DMA_Abort_IT+0x3b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d068      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a37      	ldr	r2, [pc, #220]	@ (8002984 <HAL_DMA_Abort_IT+0x3b4>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d063      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a36      	ldr	r2, [pc, #216]	@ (8002988 <HAL_DMA_Abort_IT+0x3b8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d05e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a34      	ldr	r2, [pc, #208]	@ (800298c <HAL_DMA_Abort_IT+0x3bc>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d059      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a33      	ldr	r2, [pc, #204]	@ (8002990 <HAL_DMA_Abort_IT+0x3c0>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d054      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a31      	ldr	r2, [pc, #196]	@ (8002994 <HAL_DMA_Abort_IT+0x3c4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d04f      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a30      	ldr	r2, [pc, #192]	@ (8002998 <HAL_DMA_Abort_IT+0x3c8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d04a      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2e      	ldr	r2, [pc, #184]	@ (800299c <HAL_DMA_Abort_IT+0x3cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d045      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a2d      	ldr	r2, [pc, #180]	@ (80029a0 <HAL_DMA_Abort_IT+0x3d0>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d040      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a2b      	ldr	r2, [pc, #172]	@ (80029a4 <HAL_DMA_Abort_IT+0x3d4>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d03b      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4a2a      	ldr	r2, [pc, #168]	@ (80029a8 <HAL_DMA_Abort_IT+0x3d8>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d036      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_DMA_Abort_IT+0x3dc>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d031      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_DMA_Abort_IT+0x3e0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d02c      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a25      	ldr	r2, [pc, #148]	@ (80029b4 <HAL_DMA_Abort_IT+0x3e4>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d027      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4a24      	ldr	r2, [pc, #144]	@ (80029b8 <HAL_DMA_Abort_IT+0x3e8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a22      	ldr	r2, [pc, #136]	@ (80029bc <HAL_DMA_Abort_IT+0x3ec>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d01d      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a21      	ldr	r2, [pc, #132]	@ (80029c0 <HAL_DMA_Abort_IT+0x3f0>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d018      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <HAL_DMA_Abort_IT+0x3f4>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_DMA_Abort_IT+0x3f8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d00e      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a1c      	ldr	r2, [pc, #112]	@ (80029cc <HAL_DMA_Abort_IT+0x3fc>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d009      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a1b      	ldr	r2, [pc, #108]	@ (80029d0 <HAL_DMA_Abort_IT+0x400>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d004      	beq.n	8002972 <HAL_DMA_Abort_IT+0x3a2>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a19      	ldr	r2, [pc, #100]	@ (80029d4 <HAL_DMA_Abort_IT+0x404>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d132      	bne.n	80029d8 <HAL_DMA_Abort_IT+0x408>
 8002972:	2301      	movs	r3, #1
 8002974:	e031      	b.n	80029da <HAL_DMA_Abort_IT+0x40a>
 8002976:	bf00      	nop
 8002978:	40020010 	.word	0x40020010
 800297c:	40020028 	.word	0x40020028
 8002980:	40020040 	.word	0x40020040
 8002984:	40020058 	.word	0x40020058
 8002988:	40020070 	.word	0x40020070
 800298c:	40020088 	.word	0x40020088
 8002990:	400200a0 	.word	0x400200a0
 8002994:	400200b8 	.word	0x400200b8
 8002998:	40020410 	.word	0x40020410
 800299c:	40020428 	.word	0x40020428
 80029a0:	40020440 	.word	0x40020440
 80029a4:	40020458 	.word	0x40020458
 80029a8:	40020470 	.word	0x40020470
 80029ac:	40020488 	.word	0x40020488
 80029b0:	400204a0 	.word	0x400204a0
 80029b4:	400204b8 	.word	0x400204b8
 80029b8:	58025408 	.word	0x58025408
 80029bc:	5802541c 	.word	0x5802541c
 80029c0:	58025430 	.word	0x58025430
 80029c4:	58025444 	.word	0x58025444
 80029c8:	58025458 	.word	0x58025458
 80029cc:	5802546c 	.word	0x5802546c
 80029d0:	58025480 	.word	0x58025480
 80029d4:	58025494 	.word	0x58025494
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d028      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029ec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2201      	movs	r2, #1
 80029fe:	409a      	lsls	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00c      	beq.n	8002a30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002a2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop

08002a5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a68:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <HAL_DMA_IRQHandler+0x1ac>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a67      	ldr	r2, [pc, #412]	@ (8002c0c <HAL_DMA_IRQHandler+0x1b0>)
 8002a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a72:	0a9b      	lsrs	r3, r3, #10
 8002a74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a82:	6a3b      	ldr	r3, [r7, #32]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <HAL_DMA_IRQHandler+0x1b4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d04a      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <HAL_DMA_IRQHandler+0x1b8>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d045      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c18 <HAL_DMA_IRQHandler+0x1bc>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d040      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c1c <HAL_DMA_IRQHandler+0x1c0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d03b      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_DMA_IRQHandler+0x1c4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d036      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_DMA_IRQHandler+0x1c8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d031      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_DMA_IRQHandler+0x1cc>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d02c      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a54      	ldr	r2, [pc, #336]	@ (8002c2c <HAL_DMA_IRQHandler+0x1d0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d027      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a53      	ldr	r2, [pc, #332]	@ (8002c30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d022      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a51      	ldr	r2, [pc, #324]	@ (8002c34 <HAL_DMA_IRQHandler+0x1d8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d01d      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a50      	ldr	r2, [pc, #320]	@ (8002c38 <HAL_DMA_IRQHandler+0x1dc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d018      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a4e      	ldr	r2, [pc, #312]	@ (8002c3c <HAL_DMA_IRQHandler+0x1e0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d013      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002c40 <HAL_DMA_IRQHandler+0x1e4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d00e      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4b      	ldr	r2, [pc, #300]	@ (8002c44 <HAL_DMA_IRQHandler+0x1e8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d009      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002c48 <HAL_DMA_IRQHandler+0x1ec>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d004      	beq.n	8002b2e <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a48      	ldr	r2, [pc, #288]	@ (8002c4c <HAL_DMA_IRQHandler+0x1f0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d101      	bne.n	8002b32 <HAL_DMA_IRQHandler+0xd6>
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <HAL_DMA_IRQHandler+0xd8>
 8002b32:	2300      	movs	r3, #0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	f000 842b 	beq.w	8003390 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b3e:	f003 031f 	and.w	r3, r3, #31
 8002b42:	2208      	movs	r2, #8
 8002b44:	409a      	lsls	r2, r3
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	f000 80a2 	beq.w	8002c94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	@ (8002c10 <HAL_DMA_IRQHandler+0x1b4>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d04a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_DMA_IRQHandler+0x1b8>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d045      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <HAL_DMA_IRQHandler+0x1bc>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d040      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_DMA_IRQHandler+0x1c0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d03b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_DMA_IRQHandler+0x1c4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d036      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <HAL_DMA_IRQHandler+0x1c8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d031      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	@ (8002c28 <HAL_DMA_IRQHandler+0x1cc>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d02c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_DMA_IRQHandler+0x1d0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d027      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d022      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_DMA_IRQHandler+0x1d8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d01d      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_DMA_IRQHandler+0x1dc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d018      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_DMA_IRQHandler+0x1e0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d013      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_DMA_IRQHandler+0x1e4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d00e      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_DMA_IRQHandler+0x1e8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d009      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	@ (8002c48 <HAL_DMA_IRQHandler+0x1ec>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d004      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <HAL_DMA_IRQHandler+0x1f0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d12f      	bne.n	8002c50 <HAL_DMA_IRQHandler+0x1f4>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0304 	and.w	r3, r3, #4
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf14      	ite	ne
 8002bfe:	2301      	movne	r3, #1
 8002c00:	2300      	moveq	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	e02e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x208>
 8002c06:	bf00      	nop
 8002c08:	24000000 	.word	0x24000000
 8002c0c:	1b4e81b5 	.word	0x1b4e81b5
 8002c10:	40020010 	.word	0x40020010
 8002c14:	40020028 	.word	0x40020028
 8002c18:	40020040 	.word	0x40020040
 8002c1c:	40020058 	.word	0x40020058
 8002c20:	40020070 	.word	0x40020070
 8002c24:	40020088 	.word	0x40020088
 8002c28:	400200a0 	.word	0x400200a0
 8002c2c:	400200b8 	.word	0x400200b8
 8002c30:	40020410 	.word	0x40020410
 8002c34:	40020428 	.word	0x40020428
 8002c38:	40020440 	.word	0x40020440
 8002c3c:	40020458 	.word	0x40020458
 8002c40:	40020470 	.word	0x40020470
 8002c44:	40020488 	.word	0x40020488
 8002c48:	400204a0 	.word	0x400204a0
 8002c4c:	400204b8 	.word	0x400204b8
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d015      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0204 	bic.w	r2, r2, #4
 8002c76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c7c:	f003 031f 	and.w	r3, r3, #31
 8002c80:	2208      	movs	r2, #8
 8002c82:	409a      	lsls	r2, r3
 8002c84:	6a3b      	ldr	r3, [r7, #32]
 8002c86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c8c:	f043 0201 	orr.w	r2, r3, #1
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d06e      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a69      	ldr	r2, [pc, #420]	@ (8002e54 <HAL_DMA_IRQHandler+0x3f8>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d04a      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a67      	ldr	r2, [pc, #412]	@ (8002e58 <HAL_DMA_IRQHandler+0x3fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d045      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a66      	ldr	r2, [pc, #408]	@ (8002e5c <HAL_DMA_IRQHandler+0x400>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d040      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a64      	ldr	r2, [pc, #400]	@ (8002e60 <HAL_DMA_IRQHandler+0x404>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d03b      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a63      	ldr	r2, [pc, #396]	@ (8002e64 <HAL_DMA_IRQHandler+0x408>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d036      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a61      	ldr	r2, [pc, #388]	@ (8002e68 <HAL_DMA_IRQHandler+0x40c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d031      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a60      	ldr	r2, [pc, #384]	@ (8002e6c <HAL_DMA_IRQHandler+0x410>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d02c      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a5e      	ldr	r2, [pc, #376]	@ (8002e70 <HAL_DMA_IRQHandler+0x414>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d027      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a5d      	ldr	r2, [pc, #372]	@ (8002e74 <HAL_DMA_IRQHandler+0x418>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5b      	ldr	r2, [pc, #364]	@ (8002e78 <HAL_DMA_IRQHandler+0x41c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5a      	ldr	r2, [pc, #360]	@ (8002e7c <HAL_DMA_IRQHandler+0x420>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d018      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a58      	ldr	r2, [pc, #352]	@ (8002e80 <HAL_DMA_IRQHandler+0x424>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d013      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a57      	ldr	r2, [pc, #348]	@ (8002e84 <HAL_DMA_IRQHandler+0x428>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d00e      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a55      	ldr	r2, [pc, #340]	@ (8002e88 <HAL_DMA_IRQHandler+0x42c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d009      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a54      	ldr	r2, [pc, #336]	@ (8002e8c <HAL_DMA_IRQHandler+0x430>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d004      	beq.n	8002d4a <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a52      	ldr	r2, [pc, #328]	@ (8002e90 <HAL_DMA_IRQHandler+0x434>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d10a      	bne.n	8002d60 <HAL_DMA_IRQHandler+0x304>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	bf14      	ite	ne
 8002d58:	2301      	movne	r3, #1
 8002d5a:	2300      	moveq	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	e003      	b.n	8002d68 <HAL_DMA_IRQHandler+0x30c>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2300      	movs	r3, #0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d00d      	beq.n	8002d88 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d70:	f003 031f 	and.w	r3, r3, #31
 8002d74:	2201      	movs	r2, #1
 8002d76:	409a      	lsls	r2, r3
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	f043 0202 	orr.w	r2, r3, #2
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d8c:	f003 031f 	and.w	r3, r3, #31
 8002d90:	2204      	movs	r2, #4
 8002d92:	409a      	lsls	r2, r3
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4013      	ands	r3, r2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	f000 808f 	beq.w	8002ebc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a2c      	ldr	r2, [pc, #176]	@ (8002e54 <HAL_DMA_IRQHandler+0x3f8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d04a      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a2a      	ldr	r2, [pc, #168]	@ (8002e58 <HAL_DMA_IRQHandler+0x3fc>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d045      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a29      	ldr	r2, [pc, #164]	@ (8002e5c <HAL_DMA_IRQHandler+0x400>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d040      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a27      	ldr	r2, [pc, #156]	@ (8002e60 <HAL_DMA_IRQHandler+0x404>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d03b      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a26      	ldr	r2, [pc, #152]	@ (8002e64 <HAL_DMA_IRQHandler+0x408>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d036      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a24      	ldr	r2, [pc, #144]	@ (8002e68 <HAL_DMA_IRQHandler+0x40c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d031      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a23      	ldr	r2, [pc, #140]	@ (8002e6c <HAL_DMA_IRQHandler+0x410>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d02c      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a21      	ldr	r2, [pc, #132]	@ (8002e70 <HAL_DMA_IRQHandler+0x414>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d027      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a20      	ldr	r2, [pc, #128]	@ (8002e74 <HAL_DMA_IRQHandler+0x418>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d022      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e78 <HAL_DMA_IRQHandler+0x41c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d01d      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a1d      	ldr	r2, [pc, #116]	@ (8002e7c <HAL_DMA_IRQHandler+0x420>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d018      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1b      	ldr	r2, [pc, #108]	@ (8002e80 <HAL_DMA_IRQHandler+0x424>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d013      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002e84 <HAL_DMA_IRQHandler+0x428>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d00e      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a18      	ldr	r2, [pc, #96]	@ (8002e88 <HAL_DMA_IRQHandler+0x42c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d009      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a17      	ldr	r2, [pc, #92]	@ (8002e8c <HAL_DMA_IRQHandler+0x430>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d004      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a15      	ldr	r2, [pc, #84]	@ (8002e90 <HAL_DMA_IRQHandler+0x434>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d12a      	bne.n	8002e94 <HAL_DMA_IRQHandler+0x438>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	bf14      	ite	ne
 8002e4c:	2301      	movne	r3, #1
 8002e4e:	2300      	moveq	r3, #0
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	e023      	b.n	8002e9c <HAL_DMA_IRQHandler+0x440>
 8002e54:	40020010 	.word	0x40020010
 8002e58:	40020028 	.word	0x40020028
 8002e5c:	40020040 	.word	0x40020040
 8002e60:	40020058 	.word	0x40020058
 8002e64:	40020070 	.word	0x40020070
 8002e68:	40020088 	.word	0x40020088
 8002e6c:	400200a0 	.word	0x400200a0
 8002e70:	400200b8 	.word	0x400200b8
 8002e74:	40020410 	.word	0x40020410
 8002e78:	40020428 	.word	0x40020428
 8002e7c:	40020440 	.word	0x40020440
 8002e80:	40020458 	.word	0x40020458
 8002e84:	40020470 	.word	0x40020470
 8002e88:	40020488 	.word	0x40020488
 8002e8c:	400204a0 	.word	0x400204a0
 8002e90:	400204b8 	.word	0x400204b8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00d      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb4:	f043 0204 	orr.w	r2, r3, #4
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	2210      	movs	r2, #16
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a6 	beq.w	800301e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a85      	ldr	r2, [pc, #532]	@ (80030ec <HAL_DMA_IRQHandler+0x690>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d04a      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a83      	ldr	r2, [pc, #524]	@ (80030f0 <HAL_DMA_IRQHandler+0x694>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d045      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a82      	ldr	r2, [pc, #520]	@ (80030f4 <HAL_DMA_IRQHandler+0x698>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d040      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a80      	ldr	r2, [pc, #512]	@ (80030f8 <HAL_DMA_IRQHandler+0x69c>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d03b      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a7f      	ldr	r2, [pc, #508]	@ (80030fc <HAL_DMA_IRQHandler+0x6a0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d036      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a7d      	ldr	r2, [pc, #500]	@ (8003100 <HAL_DMA_IRQHandler+0x6a4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d031      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7c      	ldr	r2, [pc, #496]	@ (8003104 <HAL_DMA_IRQHandler+0x6a8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d02c      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7a      	ldr	r2, [pc, #488]	@ (8003108 <HAL_DMA_IRQHandler+0x6ac>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d027      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a79      	ldr	r2, [pc, #484]	@ (800310c <HAL_DMA_IRQHandler+0x6b0>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a77      	ldr	r2, [pc, #476]	@ (8003110 <HAL_DMA_IRQHandler+0x6b4>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a76      	ldr	r2, [pc, #472]	@ (8003114 <HAL_DMA_IRQHandler+0x6b8>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a74      	ldr	r2, [pc, #464]	@ (8003118 <HAL_DMA_IRQHandler+0x6bc>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a73      	ldr	r2, [pc, #460]	@ (800311c <HAL_DMA_IRQHandler+0x6c0>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a71      	ldr	r2, [pc, #452]	@ (8003120 <HAL_DMA_IRQHandler+0x6c4>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a70      	ldr	r2, [pc, #448]	@ (8003124 <HAL_DMA_IRQHandler+0x6c8>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a6e      	ldr	r2, [pc, #440]	@ (8003128 <HAL_DMA_IRQHandler+0x6cc>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d10a      	bne.n	8002f88 <HAL_DMA_IRQHandler+0x52c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	bf14      	ite	ne
 8002f80:	2301      	movne	r3, #1
 8002f82:	2300      	moveq	r3, #0
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	e009      	b.n	8002f9c <HAL_DMA_IRQHandler+0x540>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0304 	and.w	r3, r3, #4
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d03e      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2210      	movs	r2, #16
 8002faa:	409a      	lsls	r2, r3
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d018      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d108      	bne.n	8002fde <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d024      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
 8002fdc:	e01f      	b.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d01b      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e016      	b.n	800301e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d107      	bne.n	800300e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003022:	f003 031f 	and.w	r3, r3, #31
 8003026:	2220      	movs	r2, #32
 8003028:	409a      	lsls	r2, r3
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	2b00      	cmp	r3, #0
 8003030:	f000 8110 	beq.w	8003254 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a2c      	ldr	r2, [pc, #176]	@ (80030ec <HAL_DMA_IRQHandler+0x690>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d04a      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a2b      	ldr	r2, [pc, #172]	@ (80030f0 <HAL_DMA_IRQHandler+0x694>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d045      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a29      	ldr	r2, [pc, #164]	@ (80030f4 <HAL_DMA_IRQHandler+0x698>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d040      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a28      	ldr	r2, [pc, #160]	@ (80030f8 <HAL_DMA_IRQHandler+0x69c>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d03b      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a26      	ldr	r2, [pc, #152]	@ (80030fc <HAL_DMA_IRQHandler+0x6a0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d036      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a25      	ldr	r2, [pc, #148]	@ (8003100 <HAL_DMA_IRQHandler+0x6a4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d031      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a23      	ldr	r2, [pc, #140]	@ (8003104 <HAL_DMA_IRQHandler+0x6a8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d02c      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a22      	ldr	r2, [pc, #136]	@ (8003108 <HAL_DMA_IRQHandler+0x6ac>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d027      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a20      	ldr	r2, [pc, #128]	@ (800310c <HAL_DMA_IRQHandler+0x6b0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d022      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_DMA_IRQHandler+0x6b4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d01d      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a1d      	ldr	r2, [pc, #116]	@ (8003114 <HAL_DMA_IRQHandler+0x6b8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d018      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003118 <HAL_DMA_IRQHandler+0x6bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1a      	ldr	r2, [pc, #104]	@ (800311c <HAL_DMA_IRQHandler+0x6c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00e      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a19      	ldr	r2, [pc, #100]	@ (8003120 <HAL_DMA_IRQHandler+0x6c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d009      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a17      	ldr	r2, [pc, #92]	@ (8003124 <HAL_DMA_IRQHandler+0x6c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a16      	ldr	r2, [pc, #88]	@ (8003128 <HAL_DMA_IRQHandler+0x6cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d12b      	bne.n	800312c <HAL_DMA_IRQHandler+0x6d0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0310 	and.w	r3, r3, #16
 80030de:	2b00      	cmp	r3, #0
 80030e0:	bf14      	ite	ne
 80030e2:	2301      	movne	r3, #1
 80030e4:	2300      	moveq	r3, #0
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e02a      	b.n	8003140 <HAL_DMA_IRQHandler+0x6e4>
 80030ea:	bf00      	nop
 80030ec:	40020010 	.word	0x40020010
 80030f0:	40020028 	.word	0x40020028
 80030f4:	40020040 	.word	0x40020040
 80030f8:	40020058 	.word	0x40020058
 80030fc:	40020070 	.word	0x40020070
 8003100:	40020088 	.word	0x40020088
 8003104:	400200a0 	.word	0x400200a0
 8003108:	400200b8 	.word	0x400200b8
 800310c:	40020410 	.word	0x40020410
 8003110:	40020428 	.word	0x40020428
 8003114:	40020440 	.word	0x40020440
 8003118:	40020458 	.word	0x40020458
 800311c:	40020470 	.word	0x40020470
 8003120:	40020488 	.word	0x40020488
 8003124:	400204a0 	.word	0x400204a0
 8003128:	400204b8 	.word	0x400204b8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	bf14      	ite	ne
 800313a:	2301      	movne	r3, #1
 800313c:	2300      	moveq	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8087 	beq.w	8003254 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	2220      	movs	r2, #32
 8003150:	409a      	lsls	r2, r3
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b04      	cmp	r3, #4
 8003160:	d139      	bne.n	80031d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0216 	bic.w	r2, r2, #22
 8003170:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	695a      	ldr	r2, [r3, #20]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003180:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	2b00      	cmp	r3, #0
 8003188:	d103      	bne.n	8003192 <HAL_DMA_IRQHandler+0x736>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318e:	2b00      	cmp	r3, #0
 8003190:	d007      	beq.n	80031a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0208 	bic.w	r2, r2, #8
 80031a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a6:	f003 031f 	and.w	r3, r3, #31
 80031aa:	223f      	movs	r2, #63	@ 0x3f
 80031ac:	409a      	lsls	r2, r3
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 834a 	beq.w	8003860 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	4798      	blx	r3
          }
          return;
 80031d4:	e344      	b.n	8003860 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d018      	beq.n	8003216 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d108      	bne.n	8003204 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d02c      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	4798      	blx	r3
 8003202:	e027      	b.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	4798      	blx	r3
 8003214:	e01e      	b.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10f      	bne.n	8003244 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0210 	bic.w	r2, r2, #16
 8003232:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003248:	2b00      	cmp	r3, #0
 800324a:	d003      	beq.n	8003254 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003258:	2b00      	cmp	r3, #0
 800325a:	f000 8306 	beq.w	800386a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	f000 8088 	beq.w	800337c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2204      	movs	r2, #4
 8003270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a7a      	ldr	r2, [pc, #488]	@ (8003464 <HAL_DMA_IRQHandler+0xa08>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d04a      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a79      	ldr	r2, [pc, #484]	@ (8003468 <HAL_DMA_IRQHandler+0xa0c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d045      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a77      	ldr	r2, [pc, #476]	@ (800346c <HAL_DMA_IRQHandler+0xa10>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d040      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a76      	ldr	r2, [pc, #472]	@ (8003470 <HAL_DMA_IRQHandler+0xa14>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d03b      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a74      	ldr	r2, [pc, #464]	@ (8003474 <HAL_DMA_IRQHandler+0xa18>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d036      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a73      	ldr	r2, [pc, #460]	@ (8003478 <HAL_DMA_IRQHandler+0xa1c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d031      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a71      	ldr	r2, [pc, #452]	@ (800347c <HAL_DMA_IRQHandler+0xa20>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d02c      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a70      	ldr	r2, [pc, #448]	@ (8003480 <HAL_DMA_IRQHandler+0xa24>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d027      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003484 <HAL_DMA_IRQHandler+0xa28>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d022      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003488 <HAL_DMA_IRQHandler+0xa2c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d01d      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6b      	ldr	r2, [pc, #428]	@ (800348c <HAL_DMA_IRQHandler+0xa30>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d018      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003490 <HAL_DMA_IRQHandler+0xa34>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d013      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a68      	ldr	r2, [pc, #416]	@ (8003494 <HAL_DMA_IRQHandler+0xa38>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d00e      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a67      	ldr	r2, [pc, #412]	@ (8003498 <HAL_DMA_IRQHandler+0xa3c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a65      	ldr	r2, [pc, #404]	@ (800349c <HAL_DMA_IRQHandler+0xa40>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d004      	beq.n	8003314 <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a64      	ldr	r2, [pc, #400]	@ (80034a0 <HAL_DMA_IRQHandler+0xa44>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d108      	bne.n	8003326 <HAL_DMA_IRQHandler+0x8ca>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 0201 	bic.w	r2, r2, #1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	e007      	b.n	8003336 <HAL_DMA_IRQHandler+0x8da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0201 	bic.w	r2, r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	3301      	adds	r3, #1
 800333a:	60fb      	str	r3, [r7, #12]
 800333c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800333e:	429a      	cmp	r2, r3
 8003340:	d307      	bcc.n	8003352 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1f2      	bne.n	8003336 <HAL_DMA_IRQHandler+0x8da>
 8003350:	e000      	b.n	8003354 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003352:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d004      	beq.n	800336c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800336a:	e003      	b.n	8003374 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2200      	movs	r2, #0
 8003378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003380:	2b00      	cmp	r3, #0
 8003382:	f000 8272 	beq.w	800386a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	4798      	blx	r3
 800338e:	e26c      	b.n	800386a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a43      	ldr	r2, [pc, #268]	@ (80034a4 <HAL_DMA_IRQHandler+0xa48>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d022      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a42      	ldr	r2, [pc, #264]	@ (80034a8 <HAL_DMA_IRQHandler+0xa4c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d01d      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a40      	ldr	r2, [pc, #256]	@ (80034ac <HAL_DMA_IRQHandler+0xa50>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d018      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a3f      	ldr	r2, [pc, #252]	@ (80034b0 <HAL_DMA_IRQHandler+0xa54>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a3d      	ldr	r2, [pc, #244]	@ (80034b4 <HAL_DMA_IRQHandler+0xa58>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3c      	ldr	r2, [pc, #240]	@ (80034b8 <HAL_DMA_IRQHandler+0xa5c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d009      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3a      	ldr	r2, [pc, #232]	@ (80034bc <HAL_DMA_IRQHandler+0xa60>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x984>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a39      	ldr	r2, [pc, #228]	@ (80034c0 <HAL_DMA_IRQHandler+0xa64>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d101      	bne.n	80033e4 <HAL_DMA_IRQHandler+0x988>
 80033e0:	2301      	movs	r3, #1
 80033e2:	e000      	b.n	80033e6 <HAL_DMA_IRQHandler+0x98a>
 80033e4:	2300      	movs	r3, #0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	f000 823f 	beq.w	800386a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2204      	movs	r2, #4
 80033fe:	409a      	lsls	r2, r3
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	4013      	ands	r3, r2
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80cd 	beq.w	80035a4 <HAL_DMA_IRQHandler+0xb48>
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	f000 80c7 	beq.w	80035a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	2204      	movs	r2, #4
 8003420:	409a      	lsls	r2, r3
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d049      	beq.n	80034c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d109      	bne.n	800344e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 8210 	beq.w	8003864 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800344c:	e20a      	b.n	8003864 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8206 	beq.w	8003864 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003460:	e200      	b.n	8003864 <HAL_DMA_IRQHandler+0xe08>
 8003462:	bf00      	nop
 8003464:	40020010 	.word	0x40020010
 8003468:	40020028 	.word	0x40020028
 800346c:	40020040 	.word	0x40020040
 8003470:	40020058 	.word	0x40020058
 8003474:	40020070 	.word	0x40020070
 8003478:	40020088 	.word	0x40020088
 800347c:	400200a0 	.word	0x400200a0
 8003480:	400200b8 	.word	0x400200b8
 8003484:	40020410 	.word	0x40020410
 8003488:	40020428 	.word	0x40020428
 800348c:	40020440 	.word	0x40020440
 8003490:	40020458 	.word	0x40020458
 8003494:	40020470 	.word	0x40020470
 8003498:	40020488 	.word	0x40020488
 800349c:	400204a0 	.word	0x400204a0
 80034a0:	400204b8 	.word	0x400204b8
 80034a4:	58025408 	.word	0x58025408
 80034a8:	5802541c 	.word	0x5802541c
 80034ac:	58025430 	.word	0x58025430
 80034b0:	58025444 	.word	0x58025444
 80034b4:	58025458 	.word	0x58025458
 80034b8:	5802546c 	.word	0x5802546c
 80034bc:	58025480 	.word	0x58025480
 80034c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d160      	bne.n	8003590 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7f      	ldr	r2, [pc, #508]	@ (80036d0 <HAL_DMA_IRQHandler+0xc74>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d04a      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a7d      	ldr	r2, [pc, #500]	@ (80036d4 <HAL_DMA_IRQHandler+0xc78>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d045      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7c      	ldr	r2, [pc, #496]	@ (80036d8 <HAL_DMA_IRQHandler+0xc7c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d040      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7a      	ldr	r2, [pc, #488]	@ (80036dc <HAL_DMA_IRQHandler+0xc80>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d03b      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a79      	ldr	r2, [pc, #484]	@ (80036e0 <HAL_DMA_IRQHandler+0xc84>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d036      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a77      	ldr	r2, [pc, #476]	@ (80036e4 <HAL_DMA_IRQHandler+0xc88>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d031      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a76      	ldr	r2, [pc, #472]	@ (80036e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d02c      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a74      	ldr	r2, [pc, #464]	@ (80036ec <HAL_DMA_IRQHandler+0xc90>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d027      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a73      	ldr	r2, [pc, #460]	@ (80036f0 <HAL_DMA_IRQHandler+0xc94>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d022      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a71      	ldr	r2, [pc, #452]	@ (80036f4 <HAL_DMA_IRQHandler+0xc98>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d01d      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a70      	ldr	r2, [pc, #448]	@ (80036f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d018      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6e      	ldr	r2, [pc, #440]	@ (80036fc <HAL_DMA_IRQHandler+0xca0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d013      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6d      	ldr	r2, [pc, #436]	@ (8003700 <HAL_DMA_IRQHandler+0xca4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00e      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6b      	ldr	r2, [pc, #428]	@ (8003704 <HAL_DMA_IRQHandler+0xca8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d009      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6a      	ldr	r2, [pc, #424]	@ (8003708 <HAL_DMA_IRQHandler+0xcac>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d004      	beq.n	800356e <HAL_DMA_IRQHandler+0xb12>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a68      	ldr	r2, [pc, #416]	@ (800370c <HAL_DMA_IRQHandler+0xcb0>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d108      	bne.n	8003580 <HAL_DMA_IRQHandler+0xb24>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0208 	bic.w	r2, r2, #8
 800357c:	601a      	str	r2, [r3, #0]
 800357e:	e007      	b.n	8003590 <HAL_DMA_IRQHandler+0xb34>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0204 	bic.w	r2, r2, #4
 800358e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 8165 	beq.w	8003864 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035a2:	e15f      	b.n	8003864 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2202      	movs	r2, #2
 80035ae:	409a      	lsls	r2, r3
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f000 80c5 	beq.w	8003744 <HAL_DMA_IRQHandler+0xce8>
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 80bf 	beq.w	8003744 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035ca:	f003 031f 	and.w	r3, r3, #31
 80035ce:	2202      	movs	r2, #2
 80035d0:	409a      	lsls	r2, r3
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d018      	beq.n	8003612 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 813a 	beq.w	8003868 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035fc:	e134      	b.n	8003868 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 8130 	beq.w	8003868 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003610:	e12a      	b.n	8003868 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b00      	cmp	r3, #0
 800361a:	f040 8089 	bne.w	8003730 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a2b      	ldr	r2, [pc, #172]	@ (80036d0 <HAL_DMA_IRQHandler+0xc74>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d04a      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a29      	ldr	r2, [pc, #164]	@ (80036d4 <HAL_DMA_IRQHandler+0xc78>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d045      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a28      	ldr	r2, [pc, #160]	@ (80036d8 <HAL_DMA_IRQHandler+0xc7c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d040      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a26      	ldr	r2, [pc, #152]	@ (80036dc <HAL_DMA_IRQHandler+0xc80>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d03b      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a25      	ldr	r2, [pc, #148]	@ (80036e0 <HAL_DMA_IRQHandler+0xc84>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d036      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a23      	ldr	r2, [pc, #140]	@ (80036e4 <HAL_DMA_IRQHandler+0xc88>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d031      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a22      	ldr	r2, [pc, #136]	@ (80036e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d02c      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a20      	ldr	r2, [pc, #128]	@ (80036ec <HAL_DMA_IRQHandler+0xc90>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d027      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a1f      	ldr	r2, [pc, #124]	@ (80036f0 <HAL_DMA_IRQHandler+0xc94>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d022      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a1d      	ldr	r2, [pc, #116]	@ (80036f4 <HAL_DMA_IRQHandler+0xc98>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d01d      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1c      	ldr	r2, [pc, #112]	@ (80036f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d018      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1a      	ldr	r2, [pc, #104]	@ (80036fc <HAL_DMA_IRQHandler+0xca0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a19      	ldr	r2, [pc, #100]	@ (8003700 <HAL_DMA_IRQHandler+0xca4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d00e      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a17      	ldr	r2, [pc, #92]	@ (8003704 <HAL_DMA_IRQHandler+0xca8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d009      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a16      	ldr	r2, [pc, #88]	@ (8003708 <HAL_DMA_IRQHandler+0xcac>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_DMA_IRQHandler+0xc62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a14      	ldr	r2, [pc, #80]	@ (800370c <HAL_DMA_IRQHandler+0xcb0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d128      	bne.n	8003710 <HAL_DMA_IRQHandler+0xcb4>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 0214 	bic.w	r2, r2, #20
 80036cc:	601a      	str	r2, [r3, #0]
 80036ce:	e027      	b.n	8003720 <HAL_DMA_IRQHandler+0xcc4>
 80036d0:	40020010 	.word	0x40020010
 80036d4:	40020028 	.word	0x40020028
 80036d8:	40020040 	.word	0x40020040
 80036dc:	40020058 	.word	0x40020058
 80036e0:	40020070 	.word	0x40020070
 80036e4:	40020088 	.word	0x40020088
 80036e8:	400200a0 	.word	0x400200a0
 80036ec:	400200b8 	.word	0x400200b8
 80036f0:	40020410 	.word	0x40020410
 80036f4:	40020428 	.word	0x40020428
 80036f8:	40020440 	.word	0x40020440
 80036fc:	40020458 	.word	0x40020458
 8003700:	40020470 	.word	0x40020470
 8003704:	40020488 	.word	0x40020488
 8003708:	400204a0 	.word	0x400204a0
 800370c:	400204b8 	.word	0x400204b8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 020a 	bic.w	r2, r2, #10
 800371e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 8097 	beq.w	8003868 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003742:	e091      	b.n	8003868 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003748:	f003 031f 	and.w	r3, r3, #31
 800374c:	2208      	movs	r2, #8
 800374e:	409a      	lsls	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 8088 	beq.w	800386a <HAL_DMA_IRQHandler+0xe0e>
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f003 0308 	and.w	r3, r3, #8
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 8082 	beq.w	800386a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a41      	ldr	r2, [pc, #260]	@ (8003870 <HAL_DMA_IRQHandler+0xe14>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d04a      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3f      	ldr	r2, [pc, #252]	@ (8003874 <HAL_DMA_IRQHandler+0xe18>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d045      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3e      	ldr	r2, [pc, #248]	@ (8003878 <HAL_DMA_IRQHandler+0xe1c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d040      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3c      	ldr	r2, [pc, #240]	@ (800387c <HAL_DMA_IRQHandler+0xe20>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d03b      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3b      	ldr	r2, [pc, #236]	@ (8003880 <HAL_DMA_IRQHandler+0xe24>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d036      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a39      	ldr	r2, [pc, #228]	@ (8003884 <HAL_DMA_IRQHandler+0xe28>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d031      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a38      	ldr	r2, [pc, #224]	@ (8003888 <HAL_DMA_IRQHandler+0xe2c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d02c      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a36      	ldr	r2, [pc, #216]	@ (800388c <HAL_DMA_IRQHandler+0xe30>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d027      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a35      	ldr	r2, [pc, #212]	@ (8003890 <HAL_DMA_IRQHandler+0xe34>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d022      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a33      	ldr	r2, [pc, #204]	@ (8003894 <HAL_DMA_IRQHandler+0xe38>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d01d      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a32      	ldr	r2, [pc, #200]	@ (8003898 <HAL_DMA_IRQHandler+0xe3c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d018      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a30      	ldr	r2, [pc, #192]	@ (800389c <HAL_DMA_IRQHandler+0xe40>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d013      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2f      	ldr	r2, [pc, #188]	@ (80038a0 <HAL_DMA_IRQHandler+0xe44>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d00e      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2d      	ldr	r2, [pc, #180]	@ (80038a4 <HAL_DMA_IRQHandler+0xe48>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d009      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2c      	ldr	r2, [pc, #176]	@ (80038a8 <HAL_DMA_IRQHandler+0xe4c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d004      	beq.n	8003806 <HAL_DMA_IRQHandler+0xdaa>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2a      	ldr	r2, [pc, #168]	@ (80038ac <HAL_DMA_IRQHandler+0xe50>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d108      	bne.n	8003818 <HAL_DMA_IRQHandler+0xdbc>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 021c 	bic.w	r2, r2, #28
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	e007      	b.n	8003828 <HAL_DMA_IRQHandler+0xdcc>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f022 020e 	bic.w	r2, r2, #14
 8003826:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800382c:	f003 031f 	and.w	r3, r3, #31
 8003830:	2201      	movs	r2, #1
 8003832:	409a      	lsls	r2, r3
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	4798      	blx	r3
 800385e:	e004      	b.n	800386a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003860:	bf00      	nop
 8003862:	e002      	b.n	800386a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003864:	bf00      	nop
 8003866:	e000      	b.n	800386a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003868:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800386a:	3728      	adds	r7, #40	@ 0x28
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	40020010 	.word	0x40020010
 8003874:	40020028 	.word	0x40020028
 8003878:	40020040 	.word	0x40020040
 800387c:	40020058 	.word	0x40020058
 8003880:	40020070 	.word	0x40020070
 8003884:	40020088 	.word	0x40020088
 8003888:	400200a0 	.word	0x400200a0
 800388c:	400200b8 	.word	0x400200b8
 8003890:	40020410 	.word	0x40020410
 8003894:	40020428 	.word	0x40020428
 8003898:	40020440 	.word	0x40020440
 800389c:	40020458 	.word	0x40020458
 80038a0:	40020470 	.word	0x40020470
 80038a4:	40020488 	.word	0x40020488
 80038a8:	400204a0 	.word	0x400204a0
 80038ac:	400204b8 	.word	0x400204b8

080038b0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a7f      	ldr	r2, [pc, #508]	@ (8003acc <DMA_SetConfig+0x21c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d072      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a7d      	ldr	r2, [pc, #500]	@ (8003ad0 <DMA_SetConfig+0x220>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d06d      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ad4 <DMA_SetConfig+0x224>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d068      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7a      	ldr	r2, [pc, #488]	@ (8003ad8 <DMA_SetConfig+0x228>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d063      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a79      	ldr	r2, [pc, #484]	@ (8003adc <DMA_SetConfig+0x22c>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d05e      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a77      	ldr	r2, [pc, #476]	@ (8003ae0 <DMA_SetConfig+0x230>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d059      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a76      	ldr	r2, [pc, #472]	@ (8003ae4 <DMA_SetConfig+0x234>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d054      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a74      	ldr	r2, [pc, #464]	@ (8003ae8 <DMA_SetConfig+0x238>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d04f      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a73      	ldr	r2, [pc, #460]	@ (8003aec <DMA_SetConfig+0x23c>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d04a      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a71      	ldr	r2, [pc, #452]	@ (8003af0 <DMA_SetConfig+0x240>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d045      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a70      	ldr	r2, [pc, #448]	@ (8003af4 <DMA_SetConfig+0x244>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d040      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a6e      	ldr	r2, [pc, #440]	@ (8003af8 <DMA_SetConfig+0x248>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d03b      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6d      	ldr	r2, [pc, #436]	@ (8003afc <DMA_SetConfig+0x24c>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d036      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6b      	ldr	r2, [pc, #428]	@ (8003b00 <DMA_SetConfig+0x250>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d031      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6a      	ldr	r2, [pc, #424]	@ (8003b04 <DMA_SetConfig+0x254>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d02c      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a68      	ldr	r2, [pc, #416]	@ (8003b08 <DMA_SetConfig+0x258>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d027      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a67      	ldr	r2, [pc, #412]	@ (8003b0c <DMA_SetConfig+0x25c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d022      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a65      	ldr	r2, [pc, #404]	@ (8003b10 <DMA_SetConfig+0x260>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d01d      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a64      	ldr	r2, [pc, #400]	@ (8003b14 <DMA_SetConfig+0x264>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d018      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a62      	ldr	r2, [pc, #392]	@ (8003b18 <DMA_SetConfig+0x268>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d013      	beq.n	80039ba <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a61      	ldr	r2, [pc, #388]	@ (8003b1c <DMA_SetConfig+0x26c>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d00e      	beq.n	80039ba <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5f      	ldr	r2, [pc, #380]	@ (8003b20 <DMA_SetConfig+0x270>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d009      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a5e      	ldr	r2, [pc, #376]	@ (8003b24 <DMA_SetConfig+0x274>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d004      	beq.n	80039ba <DMA_SetConfig+0x10a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003b28 <DMA_SetConfig+0x278>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <DMA_SetConfig+0x10e>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <DMA_SetConfig+0x110>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00d      	beq.n	80039e0 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039cc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039de:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a39      	ldr	r2, [pc, #228]	@ (8003acc <DMA_SetConfig+0x21c>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d04a      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a38      	ldr	r2, [pc, #224]	@ (8003ad0 <DMA_SetConfig+0x220>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d045      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a36      	ldr	r2, [pc, #216]	@ (8003ad4 <DMA_SetConfig+0x224>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d040      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a35      	ldr	r2, [pc, #212]	@ (8003ad8 <DMA_SetConfig+0x228>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d03b      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a33      	ldr	r2, [pc, #204]	@ (8003adc <DMA_SetConfig+0x22c>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d036      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a32      	ldr	r2, [pc, #200]	@ (8003ae0 <DMA_SetConfig+0x230>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d031      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a30      	ldr	r2, [pc, #192]	@ (8003ae4 <DMA_SetConfig+0x234>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d02c      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ae8 <DMA_SetConfig+0x238>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d027      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a2d      	ldr	r2, [pc, #180]	@ (8003aec <DMA_SetConfig+0x23c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d022      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003af0 <DMA_SetConfig+0x240>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d01d      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2a      	ldr	r2, [pc, #168]	@ (8003af4 <DMA_SetConfig+0x244>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d018      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a29      	ldr	r2, [pc, #164]	@ (8003af8 <DMA_SetConfig+0x248>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d013      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a27      	ldr	r2, [pc, #156]	@ (8003afc <DMA_SetConfig+0x24c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00e      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a26      	ldr	r2, [pc, #152]	@ (8003b00 <DMA_SetConfig+0x250>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d009      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a24      	ldr	r2, [pc, #144]	@ (8003b04 <DMA_SetConfig+0x254>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <DMA_SetConfig+0x1d0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <DMA_SetConfig+0x258>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <DMA_SetConfig+0x1d4>
 8003a80:	2301      	movs	r3, #1
 8003a82:	e000      	b.n	8003a86 <DMA_SetConfig+0x1d6>
 8003a84:	2300      	movs	r3, #0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d059      	beq.n	8003b3e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	223f      	movs	r2, #63	@ 0x3f
 8003a94:	409a      	lsls	r2, r3
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003aa8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	d138      	bne.n	8003b2c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003aca:	e086      	b.n	8003bda <DMA_SetConfig+0x32a>
 8003acc:	40020010 	.word	0x40020010
 8003ad0:	40020028 	.word	0x40020028
 8003ad4:	40020040 	.word	0x40020040
 8003ad8:	40020058 	.word	0x40020058
 8003adc:	40020070 	.word	0x40020070
 8003ae0:	40020088 	.word	0x40020088
 8003ae4:	400200a0 	.word	0x400200a0
 8003ae8:	400200b8 	.word	0x400200b8
 8003aec:	40020410 	.word	0x40020410
 8003af0:	40020428 	.word	0x40020428
 8003af4:	40020440 	.word	0x40020440
 8003af8:	40020458 	.word	0x40020458
 8003afc:	40020470 	.word	0x40020470
 8003b00:	40020488 	.word	0x40020488
 8003b04:	400204a0 	.word	0x400204a0
 8003b08:	400204b8 	.word	0x400204b8
 8003b0c:	58025408 	.word	0x58025408
 8003b10:	5802541c 	.word	0x5802541c
 8003b14:	58025430 	.word	0x58025430
 8003b18:	58025444 	.word	0x58025444
 8003b1c:	58025458 	.word	0x58025458
 8003b20:	5802546c 	.word	0x5802546c
 8003b24:	58025480 	.word	0x58025480
 8003b28:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	60da      	str	r2, [r3, #12]
}
 8003b3c:	e04d      	b.n	8003bda <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a29      	ldr	r2, [pc, #164]	@ (8003be8 <DMA_SetConfig+0x338>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d022      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	@ (8003bec <DMA_SetConfig+0x33c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d01d      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a26      	ldr	r2, [pc, #152]	@ (8003bf0 <DMA_SetConfig+0x340>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d018      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a24      	ldr	r2, [pc, #144]	@ (8003bf4 <DMA_SetConfig+0x344>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d013      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a23      	ldr	r2, [pc, #140]	@ (8003bf8 <DMA_SetConfig+0x348>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d00e      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a21      	ldr	r2, [pc, #132]	@ (8003bfc <DMA_SetConfig+0x34c>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d009      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a20      	ldr	r2, [pc, #128]	@ (8003c00 <DMA_SetConfig+0x350>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d004      	beq.n	8003b8e <DMA_SetConfig+0x2de>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a1e      	ldr	r2, [pc, #120]	@ (8003c04 <DMA_SetConfig+0x354>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d101      	bne.n	8003b92 <DMA_SetConfig+0x2e2>
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <DMA_SetConfig+0x2e4>
 8003b92:	2300      	movs	r3, #0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f003 031f 	and.w	r3, r3, #31
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	2b40      	cmp	r3, #64	@ 0x40
 8003bb6:	d108      	bne.n	8003bca <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	68ba      	ldr	r2, [r7, #8]
 8003bc6:	60da      	str	r2, [r3, #12]
}
 8003bc8:	e007      	b.n	8003bda <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	60da      	str	r2, [r3, #12]
}
 8003bda:	bf00      	nop
 8003bdc:	371c      	adds	r7, #28
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	58025408 	.word	0x58025408
 8003bec:	5802541c 	.word	0x5802541c
 8003bf0:	58025430 	.word	0x58025430
 8003bf4:	58025444 	.word	0x58025444
 8003bf8:	58025458 	.word	0x58025458
 8003bfc:	5802546c 	.word	0x5802546c
 8003c00:	58025480 	.word	0x58025480
 8003c04:	58025494 	.word	0x58025494

08003c08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a42      	ldr	r2, [pc, #264]	@ (8003d20 <DMA_CalcBaseAndBitshift+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d04a      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a41      	ldr	r2, [pc, #260]	@ (8003d24 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d045      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a3f      	ldr	r2, [pc, #252]	@ (8003d28 <DMA_CalcBaseAndBitshift+0x120>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d040      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a3e      	ldr	r2, [pc, #248]	@ (8003d2c <DMA_CalcBaseAndBitshift+0x124>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d03b      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d30 <DMA_CalcBaseAndBitshift+0x128>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d036      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3b      	ldr	r2, [pc, #236]	@ (8003d34 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d031      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a39      	ldr	r2, [pc, #228]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x130>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d02c      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a38      	ldr	r2, [pc, #224]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x134>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d027      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a36      	ldr	r2, [pc, #216]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x138>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d022      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a35      	ldr	r2, [pc, #212]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d01d      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a33      	ldr	r2, [pc, #204]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x140>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d018      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a32      	ldr	r2, [pc, #200]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x144>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a30      	ldr	r2, [pc, #192]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x148>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00e      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x14c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d009      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x150>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x154>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d101      	bne.n	8003cb4 <DMA_CalcBaseAndBitshift+0xac>
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e000      	b.n	8003cb6 <DMA_CalcBaseAndBitshift+0xae>
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d024      	beq.n	8003d04 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	3b10      	subs	r3, #16
 8003cc2:	4a27      	ldr	r2, [pc, #156]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x158>)
 8003cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc8:	091b      	lsrs	r3, r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	4a24      	ldr	r2, [pc, #144]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x15c>)
 8003cd4:	5cd3      	ldrb	r3, [r2, r3]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d908      	bls.n	8003cf4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x160>)
 8003cea:	4013      	ands	r3, r2
 8003cec:	1d1a      	adds	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	659a      	str	r2, [r3, #88]	@ 0x58
 8003cf2:	e00d      	b.n	8003d10 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x160>)
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d02:	e005      	b.n	8003d10 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr
 8003d20:	40020010 	.word	0x40020010
 8003d24:	40020028 	.word	0x40020028
 8003d28:	40020040 	.word	0x40020040
 8003d2c:	40020058 	.word	0x40020058
 8003d30:	40020070 	.word	0x40020070
 8003d34:	40020088 	.word	0x40020088
 8003d38:	400200a0 	.word	0x400200a0
 8003d3c:	400200b8 	.word	0x400200b8
 8003d40:	40020410 	.word	0x40020410
 8003d44:	40020428 	.word	0x40020428
 8003d48:	40020440 	.word	0x40020440
 8003d4c:	40020458 	.word	0x40020458
 8003d50:	40020470 	.word	0x40020470
 8003d54:	40020488 	.word	0x40020488
 8003d58:	400204a0 	.word	0x400204a0
 8003d5c:	400204b8 	.word	0x400204b8
 8003d60:	aaaaaaab 	.word	0xaaaaaaab
 8003d64:	08009188 	.word	0x08009188
 8003d68:	fffffc00 	.word	0xfffffc00

08003d6c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d74:	2300      	movs	r3, #0
 8003d76:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d120      	bne.n	8003dc2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d84:	2b03      	cmp	r3, #3
 8003d86:	d858      	bhi.n	8003e3a <DMA_CheckFifoParam+0xce>
 8003d88:	a201      	add	r2, pc, #4	@ (adr r2, 8003d90 <DMA_CheckFifoParam+0x24>)
 8003d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8e:	bf00      	nop
 8003d90:	08003da1 	.word	0x08003da1
 8003d94:	08003db3 	.word	0x08003db3
 8003d98:	08003da1 	.word	0x08003da1
 8003d9c:	08003e3b 	.word	0x08003e3b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d048      	beq.n	8003e3e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003db0:	e045      	b.n	8003e3e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dba:	d142      	bne.n	8003e42 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dc0:	e03f      	b.n	8003e42 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dca:	d123      	bne.n	8003e14 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d838      	bhi.n	8003e46 <DMA_CheckFifoParam+0xda>
 8003dd4:	a201      	add	r2, pc, #4	@ (adr r2, 8003ddc <DMA_CheckFifoParam+0x70>)
 8003dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dda:	bf00      	nop
 8003ddc:	08003ded 	.word	0x08003ded
 8003de0:	08003df3 	.word	0x08003df3
 8003de4:	08003ded 	.word	0x08003ded
 8003de8:	08003e05 	.word	0x08003e05
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
        break;
 8003df0:	e030      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d025      	beq.n	8003e4a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e02:	e022      	b.n	8003e4a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e08:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e0c:	d11f      	bne.n	8003e4e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e12:	e01c      	b.n	8003e4e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d902      	bls.n	8003e22 <DMA_CheckFifoParam+0xb6>
 8003e1c:	2b03      	cmp	r3, #3
 8003e1e:	d003      	beq.n	8003e28 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e20:	e018      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
        break;
 8003e26:	e015      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e2c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00e      	beq.n	8003e52 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
    break;
 8003e38:	e00b      	b.n	8003e52 <DMA_CheckFifoParam+0xe6>
        break;
 8003e3a:	bf00      	nop
 8003e3c:	e00a      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        break;
 8003e3e:	bf00      	nop
 8003e40:	e008      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        break;
 8003e42:	bf00      	nop
 8003e44:	e006      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        break;
 8003e46:	bf00      	nop
 8003e48:	e004      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e002      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e000      	b.n	8003e54 <DMA_CheckFifoParam+0xe8>
    break;
 8003e52:	bf00      	nop
    }
  }

  return status;
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3714      	adds	r7, #20
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop

08003e64 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a38      	ldr	r2, [pc, #224]	@ (8003f58 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d022      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a36      	ldr	r2, [pc, #216]	@ (8003f5c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d01d      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a35      	ldr	r2, [pc, #212]	@ (8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d018      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a33      	ldr	r2, [pc, #204]	@ (8003f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d013      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a32      	ldr	r2, [pc, #200]	@ (8003f68 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d00e      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a30      	ldr	r2, [pc, #192]	@ (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d009      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2f      	ldr	r2, [pc, #188]	@ (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d004      	beq.n	8003ec2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d101      	bne.n	8003ec6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d01a      	beq.n	8003f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	3b08      	subs	r3, #8
 8003ed4:	4a28      	ldr	r2, [pc, #160]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	4b26      	ldr	r3, [pc, #152]	@ (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a24      	ldr	r2, [pc, #144]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003ef0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f003 031f 	and.w	r3, r3, #31
 8003ef8:	2201      	movs	r2, #1
 8003efa:	409a      	lsls	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f00:	e024      	b.n	8003f4c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	3b10      	subs	r3, #16
 8003f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d806      	bhi.n	8003f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d902      	bls.n	8003f2a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3308      	adds	r3, #8
 8003f28:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f2a:	68fa      	ldr	r2, [r7, #12]
 8003f2c:	4b18      	ldr	r3, [pc, #96]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a16      	ldr	r2, [pc, #88]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f3c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2201      	movs	r2, #1
 8003f46:	409a      	lsls	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f4c:	bf00      	nop
 8003f4e:	3714      	adds	r7, #20
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr
 8003f58:	58025408 	.word	0x58025408
 8003f5c:	5802541c 	.word	0x5802541c
 8003f60:	58025430 	.word	0x58025430
 8003f64:	58025444 	.word	0x58025444
 8003f68:	58025458 	.word	0x58025458
 8003f6c:	5802546c 	.word	0x5802546c
 8003f70:	58025480 	.word	0x58025480
 8003f74:	58025494 	.word	0x58025494
 8003f78:	cccccccd 	.word	0xcccccccd
 8003f7c:	16009600 	.word	0x16009600
 8003f80:	58025880 	.word	0x58025880
 8003f84:	aaaaaaab 	.word	0xaaaaaaab
 8003f88:	400204b8 	.word	0x400204b8
 8003f8c:	4002040f 	.word	0x4002040f
 8003f90:	10008200 	.word	0x10008200
 8003f94:	40020880 	.word	0x40020880

08003f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d04a      	beq.n	8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d847      	bhi.n	8004044 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a25      	ldr	r2, [pc, #148]	@ (8004050 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a24      	ldr	r2, [pc, #144]	@ (8004054 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01d      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a22      	ldr	r2, [pc, #136]	@ (8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a21      	ldr	r2, [pc, #132]	@ (800405c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8004060 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1e      	ldr	r2, [pc, #120]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d101      	bne.n	8004008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004004:	2301      	movs	r3, #1
 8004006:	e000      	b.n	800400a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004008:	2300      	movs	r3, #0
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	4b17      	ldr	r3, [pc, #92]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004012:	4413      	add	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	461a      	mov	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a15      	ldr	r2, [pc, #84]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004020:	671a      	str	r2, [r3, #112]	@ 0x70
 8004022:	e009      	b.n	8004038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004024:	68fa      	ldr	r2, [r7, #12]
 8004026:	4b14      	ldr	r3, [pc, #80]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	461a      	mov	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a11      	ldr	r2, [pc, #68]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8004036:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	3b01      	subs	r3, #1
 800403c:	2201      	movs	r2, #1
 800403e:	409a      	lsls	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004044:	bf00      	nop
 8004046:	3714      	adds	r7, #20
 8004048:	46bd      	mov	sp, r7
 800404a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404e:	4770      	bx	lr
 8004050:	58025408 	.word	0x58025408
 8004054:	5802541c 	.word	0x5802541c
 8004058:	58025430 	.word	0x58025430
 800405c:	58025444 	.word	0x58025444
 8004060:	58025458 	.word	0x58025458
 8004064:	5802546c 	.word	0x5802546c
 8004068:	58025480 	.word	0x58025480
 800406c:	58025494 	.word	0x58025494
 8004070:	1600963f 	.word	0x1600963f
 8004074:	58025940 	.word	0x58025940
 8004078:	1000823f 	.word	0x1000823f
 800407c:	40020940 	.word	0x40020940

08004080 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004080:	b480      	push	{r7}
 8004082:	b089      	sub	sp, #36	@ 0x24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800408a:	2300      	movs	r3, #0
 800408c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800408e:	4b89      	ldr	r3, [pc, #548]	@ (80042b4 <HAL_GPIO_Init+0x234>)
 8004090:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004092:	e194      	b.n	80043be <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	2101      	movs	r1, #1
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	fa01 f303 	lsl.w	r3, r1, r3
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f000 8186 	beq.w	80043b8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0303 	and.w	r3, r3, #3
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d005      	beq.n	80040c4 <HAL_GPIO_Init+0x44>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 0303 	and.w	r3, r3, #3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d130      	bne.n	8004126 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	2203      	movs	r2, #3
 80040d0:	fa02 f303 	lsl.w	r3, r2, r3
 80040d4:	43db      	mvns	r3, r3
 80040d6:	69ba      	ldr	r2, [r7, #24]
 80040d8:	4013      	ands	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	fa02 f303 	lsl.w	r3, r2, r3
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80040fa:	2201      	movs	r2, #1
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	091b      	lsrs	r3, r3, #4
 8004110:	f003 0201 	and.w	r2, r3, #1
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	fa02 f303 	lsl.w	r3, r2, r3
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	2b03      	cmp	r3, #3
 8004130:	d017      	beq.n	8004162 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	2203      	movs	r2, #3
 800413e:	fa02 f303 	lsl.w	r3, r2, r3
 8004142:	43db      	mvns	r3, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4013      	ands	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	fa02 f303 	lsl.w	r3, r2, r3
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	4313      	orrs	r3, r2
 800415a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d123      	bne.n	80041b6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	08da      	lsrs	r2, r3, #3
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3208      	adds	r2, #8
 8004176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800417a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	220f      	movs	r2, #15
 8004186:	fa02 f303 	lsl.w	r3, r2, r3
 800418a:	43db      	mvns	r3, r3
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	4013      	ands	r3, r2
 8004190:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	691a      	ldr	r2, [r3, #16]
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0307 	and.w	r3, r3, #7
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	fa02 f303 	lsl.w	r3, r2, r3
 80041a2:	69ba      	ldr	r2, [r7, #24]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	08da      	lsrs	r2, r3, #3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3208      	adds	r2, #8
 80041b0:	69b9      	ldr	r1, [r7, #24]
 80041b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	2203      	movs	r2, #3
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f003 0203 	and.w	r2, r3, #3
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	005b      	lsls	r3, r3, #1
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 80e0 	beq.w	80043b8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041f8:	4b2f      	ldr	r3, [pc, #188]	@ (80042b8 <HAL_GPIO_Init+0x238>)
 80041fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80041fe:	4a2e      	ldr	r2, [pc, #184]	@ (80042b8 <HAL_GPIO_Init+0x238>)
 8004200:	f043 0302 	orr.w	r3, r3, #2
 8004204:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004208:	4b2b      	ldr	r3, [pc, #172]	@ (80042b8 <HAL_GPIO_Init+0x238>)
 800420a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	60fb      	str	r3, [r7, #12]
 8004214:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004216:	4a29      	ldr	r2, [pc, #164]	@ (80042bc <HAL_GPIO_Init+0x23c>)
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	3302      	adds	r3, #2
 800421e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004222:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f003 0303 	and.w	r3, r3, #3
 800422a:	009b      	lsls	r3, r3, #2
 800422c:	220f      	movs	r2, #15
 800422e:	fa02 f303 	lsl.w	r3, r2, r3
 8004232:	43db      	mvns	r3, r3
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	4013      	ands	r3, r2
 8004238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a20      	ldr	r2, [pc, #128]	@ (80042c0 <HAL_GPIO_Init+0x240>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d052      	beq.n	80042e8 <HAL_GPIO_Init+0x268>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a1f      	ldr	r2, [pc, #124]	@ (80042c4 <HAL_GPIO_Init+0x244>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d031      	beq.n	80042ae <HAL_GPIO_Init+0x22e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a1e      	ldr	r2, [pc, #120]	@ (80042c8 <HAL_GPIO_Init+0x248>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d02b      	beq.n	80042aa <HAL_GPIO_Init+0x22a>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a1d      	ldr	r2, [pc, #116]	@ (80042cc <HAL_GPIO_Init+0x24c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d025      	beq.n	80042a6 <HAL_GPIO_Init+0x226>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a1c      	ldr	r2, [pc, #112]	@ (80042d0 <HAL_GPIO_Init+0x250>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d01f      	beq.n	80042a2 <HAL_GPIO_Init+0x222>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1b      	ldr	r2, [pc, #108]	@ (80042d4 <HAL_GPIO_Init+0x254>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d019      	beq.n	800429e <HAL_GPIO_Init+0x21e>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1a      	ldr	r2, [pc, #104]	@ (80042d8 <HAL_GPIO_Init+0x258>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_GPIO_Init+0x21a>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	4a19      	ldr	r2, [pc, #100]	@ (80042dc <HAL_GPIO_Init+0x25c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d00d      	beq.n	8004296 <HAL_GPIO_Init+0x216>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a18      	ldr	r2, [pc, #96]	@ (80042e0 <HAL_GPIO_Init+0x260>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d007      	beq.n	8004292 <HAL_GPIO_Init+0x212>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a17      	ldr	r2, [pc, #92]	@ (80042e4 <HAL_GPIO_Init+0x264>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d101      	bne.n	800428e <HAL_GPIO_Init+0x20e>
 800428a:	2309      	movs	r3, #9
 800428c:	e02d      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 800428e:	230a      	movs	r3, #10
 8004290:	e02b      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 8004292:	2308      	movs	r3, #8
 8004294:	e029      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 8004296:	2307      	movs	r3, #7
 8004298:	e027      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 800429a:	2306      	movs	r3, #6
 800429c:	e025      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 800429e:	2305      	movs	r3, #5
 80042a0:	e023      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 80042a2:	2304      	movs	r3, #4
 80042a4:	e021      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 80042a6:	2303      	movs	r3, #3
 80042a8:	e01f      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e01d      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e01b      	b.n	80042ea <HAL_GPIO_Init+0x26a>
 80042b2:	bf00      	nop
 80042b4:	58000080 	.word	0x58000080
 80042b8:	58024400 	.word	0x58024400
 80042bc:	58000400 	.word	0x58000400
 80042c0:	58020000 	.word	0x58020000
 80042c4:	58020400 	.word	0x58020400
 80042c8:	58020800 	.word	0x58020800
 80042cc:	58020c00 	.word	0x58020c00
 80042d0:	58021000 	.word	0x58021000
 80042d4:	58021400 	.word	0x58021400
 80042d8:	58021800 	.word	0x58021800
 80042dc:	58021c00 	.word	0x58021c00
 80042e0:	58022000 	.word	0x58022000
 80042e4:	58022400 	.word	0x58022400
 80042e8:	2300      	movs	r3, #0
 80042ea:	69fa      	ldr	r2, [r7, #28]
 80042ec:	f002 0203 	and.w	r2, r2, #3
 80042f0:	0092      	lsls	r2, r2, #2
 80042f2:	4093      	lsls	r3, r2
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042fa:	4938      	ldr	r1, [pc, #224]	@ (80043dc <HAL_GPIO_Init+0x35c>)
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	089b      	lsrs	r3, r3, #2
 8004300:	3302      	adds	r3, #2
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004308:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800432e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004336:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	43db      	mvns	r3, r3
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	4013      	ands	r3, r2
 8004346:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	4313      	orrs	r3, r2
 800435a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800435c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	43db      	mvns	r3, r3
 800436e:	69ba      	ldr	r2, [r7, #24]
 8004370:	4013      	ands	r3, r2
 8004372:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	69ba      	ldr	r2, [r7, #24]
 800438c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	43db      	mvns	r3, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4013      	ands	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d003      	beq.n	80043b2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	3301      	adds	r3, #1
 80043bc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	fa22 f303 	lsr.w	r3, r2, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f47f ae63 	bne.w	8004094 <HAL_GPIO_Init+0x14>
  }
}
 80043ce:	bf00      	nop
 80043d0:	bf00      	nop
 80043d2:	3724      	adds	r7, #36	@ 0x24
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	58000400 	.word	0x58000400

080043e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
 80043ec:	4613      	mov	r3, r2
 80043ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80043f0:	787b      	ldrb	r3, [r7, #1]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80043f6:	887a      	ldrh	r2, [r7, #2]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80043fc:	e003      	b.n	8004406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80043fe:	887b      	ldrh	r3, [r7, #2]
 8004400:	041a      	lsls	r2, r3, #16
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800441c:	4b19      	ldr	r3, [pc, #100]	@ (8004484 <HAL_PWREx_ConfigSupply+0x70>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f003 0304 	and.w	r3, r3, #4
 8004424:	2b04      	cmp	r3, #4
 8004426:	d00a      	beq.n	800443e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004428:	4b16      	ldr	r3, [pc, #88]	@ (8004484 <HAL_PWREx_ConfigSupply+0x70>)
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d001      	beq.n	800443a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	e01f      	b.n	800447a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e01d      	b.n	800447a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_PWREx_ConfigSupply+0x70>)
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f023 0207 	bic.w	r2, r3, #7
 8004446:	490f      	ldr	r1, [pc, #60]	@ (8004484 <HAL_PWREx_ConfigSupply+0x70>)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4313      	orrs	r3, r2
 800444c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800444e:	f7fc fe3b 	bl	80010c8 <HAL_GetTick>
 8004452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004454:	e009      	b.n	800446a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004456:	f7fc fe37 	bl	80010c8 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004464:	d901      	bls.n	800446a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e007      	b.n	800447a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_PWREx_ConfigSupply+0x70>)
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004476:	d1ee      	bne.n	8004456 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	58024800 	.word	0x58024800

08004488 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b08c      	sub	sp, #48	@ 0x30
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d102      	bne.n	800449c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f000 bc48 	b.w	8004d2c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0301 	and.w	r3, r3, #1
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8088 	beq.w	80045ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044aa:	4b99      	ldr	r3, [pc, #612]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80044b4:	4b96      	ldr	r3, [pc, #600]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80044b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80044ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044bc:	2b10      	cmp	r3, #16
 80044be:	d007      	beq.n	80044d0 <HAL_RCC_OscConfig+0x48>
 80044c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c2:	2b18      	cmp	r3, #24
 80044c4:	d111      	bne.n	80044ea <HAL_RCC_OscConfig+0x62>
 80044c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c8:	f003 0303 	and.w	r3, r3, #3
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d10c      	bne.n	80044ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d06d      	beq.n	80045b8 <HAL_RCC_OscConfig+0x130>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d169      	bne.n	80045b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f000 bc21 	b.w	8004d2c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80044f2:	d106      	bne.n	8004502 <HAL_RCC_OscConfig+0x7a>
 80044f4:	4b86      	ldr	r3, [pc, #536]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a85      	ldr	r2, [pc, #532]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80044fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fe:	6013      	str	r3, [r2, #0]
 8004500:	e02e      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10c      	bne.n	8004524 <HAL_RCC_OscConfig+0x9c>
 800450a:	4b81      	ldr	r3, [pc, #516]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a80      	ldr	r2, [pc, #512]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004510:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004514:	6013      	str	r3, [r2, #0]
 8004516:	4b7e      	ldr	r3, [pc, #504]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7d      	ldr	r2, [pc, #500]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800451c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004520:	6013      	str	r3, [r2, #0]
 8004522:	e01d      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800452c:	d10c      	bne.n	8004548 <HAL_RCC_OscConfig+0xc0>
 800452e:	4b78      	ldr	r3, [pc, #480]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a77      	ldr	r2, [pc, #476]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004534:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004538:	6013      	str	r3, [r2, #0]
 800453a:	4b75      	ldr	r3, [pc, #468]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a74      	ldr	r2, [pc, #464]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e00b      	b.n	8004560 <HAL_RCC_OscConfig+0xd8>
 8004548:	4b71      	ldr	r3, [pc, #452]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a70      	ldr	r2, [pc, #448]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800454e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004552:	6013      	str	r3, [r2, #0]
 8004554:	4b6e      	ldr	r3, [pc, #440]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a6d      	ldr	r2, [pc, #436]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800455a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800455e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d013      	beq.n	8004590 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004568:	f7fc fdae 	bl	80010c8 <HAL_GetTick>
 800456c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004570:	f7fc fdaa 	bl	80010c8 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b64      	cmp	r3, #100	@ 0x64
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e3d4      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004582:	4b63      	ldr	r3, [pc, #396]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0xe8>
 800458e:	e014      	b.n	80045ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004590:	f7fc fd9a 	bl	80010c8 <HAL_GetTick>
 8004594:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004598:	f7fc fd96 	bl	80010c8 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b64      	cmp	r3, #100	@ 0x64
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e3c0      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80045aa:	4b59      	ldr	r3, [pc, #356]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x110>
 80045b6:	e000      	b.n	80045ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80ca 	beq.w	800475c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045c8:	4b51      	ldr	r3, [pc, #324]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045d0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80045d2:	4b4f      	ldr	r3, [pc, #316]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80045d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045d6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80045d8:	6a3b      	ldr	r3, [r7, #32]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d007      	beq.n	80045ee <HAL_RCC_OscConfig+0x166>
 80045de:	6a3b      	ldr	r3, [r7, #32]
 80045e0:	2b18      	cmp	r3, #24
 80045e2:	d156      	bne.n	8004692 <HAL_RCC_OscConfig+0x20a>
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d151      	bne.n	8004692 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045ee:	4b48      	ldr	r3, [pc, #288]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0304 	and.w	r3, r3, #4
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x17e>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e392      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004606:	4b42      	ldr	r3, [pc, #264]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 0219 	bic.w	r2, r3, #25
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	493f      	ldr	r1, [pc, #252]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004614:	4313      	orrs	r3, r2
 8004616:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004618:	f7fc fd56 	bl	80010c8 <HAL_GetTick>
 800461c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004620:	f7fc fd52 	bl	80010c8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e37c      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004632:	4b37      	ldr	r3, [pc, #220]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0f0      	beq.n	8004620 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800463e:	f7fc fd4f 	bl	80010e0 <HAL_GetREVID>
 8004642:	4603      	mov	r3, r0
 8004644:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004648:	4293      	cmp	r3, r2
 800464a:	d817      	bhi.n	800467c <HAL_RCC_OscConfig+0x1f4>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	2b40      	cmp	r3, #64	@ 0x40
 8004652:	d108      	bne.n	8004666 <HAL_RCC_OscConfig+0x1de>
 8004654:	4b2e      	ldr	r3, [pc, #184]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800465c:	4a2c      	ldr	r2, [pc, #176]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004662:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004664:	e07a      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004666:	4b2a      	ldr	r3, [pc, #168]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	031b      	lsls	r3, r3, #12
 8004674:	4926      	ldr	r1, [pc, #152]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 8004676:	4313      	orrs	r3, r2
 8004678:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800467a:	e06f      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467c:	4b24      	ldr	r3, [pc, #144]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	061b      	lsls	r3, r3, #24
 800468a:	4921      	ldr	r1, [pc, #132]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004690:	e064      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d047      	beq.n	800472a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800469a:	4b1d      	ldr	r3, [pc, #116]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f023 0219 	bic.w	r2, r3, #25
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	491a      	ldr	r1, [pc, #104]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ac:	f7fc fd0c 	bl	80010c8 <HAL_GetTick>
 80046b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046b4:	f7fc fd08 	bl	80010c8 <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e332      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046c6:	4b12      	ldr	r3, [pc, #72]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0304 	and.w	r3, r3, #4
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046d2:	f7fc fd05 	bl	80010e0 <HAL_GetREVID>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80046dc:	4293      	cmp	r3, r2
 80046de:	d819      	bhi.n	8004714 <HAL_RCC_OscConfig+0x28c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2b40      	cmp	r3, #64	@ 0x40
 80046e6:	d108      	bne.n	80046fa <HAL_RCC_OscConfig+0x272>
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80046f0:	4a07      	ldr	r2, [pc, #28]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80046f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046f6:	6053      	str	r3, [r2, #4]
 80046f8:	e030      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
 80046fa:	4b05      	ldr	r3, [pc, #20]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	031b      	lsls	r3, r3, #12
 8004708:	4901      	ldr	r1, [pc, #4]	@ (8004710 <HAL_RCC_OscConfig+0x288>)
 800470a:	4313      	orrs	r3, r2
 800470c:	604b      	str	r3, [r1, #4]
 800470e:	e025      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
 8004710:	58024400 	.word	0x58024400
 8004714:	4b9a      	ldr	r3, [pc, #616]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	061b      	lsls	r3, r3, #24
 8004722:	4997      	ldr	r1, [pc, #604]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004724:	4313      	orrs	r3, r2
 8004726:	604b      	str	r3, [r1, #4]
 8004728:	e018      	b.n	800475c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800472a:	4b95      	ldr	r3, [pc, #596]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a94      	ldr	r2, [pc, #592]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004730:	f023 0301 	bic.w	r3, r3, #1
 8004734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004736:	f7fc fcc7 	bl	80010c8 <HAL_GetTick>
 800473a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800473c:	e008      	b.n	8004750 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800473e:	f7fc fcc3 	bl	80010c8 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e2ed      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004750:	4b8b      	ldr	r3, [pc, #556]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
 8004758:	2b00      	cmp	r3, #0
 800475a:	d1f0      	bne.n	800473e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 80a9 	beq.w	80048bc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476a:	4b85      	ldr	r3, [pc, #532]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004772:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004774:	4b82      	ldr	r3, [pc, #520]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004776:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004778:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d007      	beq.n	8004790 <HAL_RCC_OscConfig+0x308>
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b18      	cmp	r3, #24
 8004784:	d13a      	bne.n	80047fc <HAL_RCC_OscConfig+0x374>
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b01      	cmp	r3, #1
 800478e:	d135      	bne.n	80047fc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004790:	4b7b      	ldr	r3, [pc, #492]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004798:	2b00      	cmp	r3, #0
 800479a:	d005      	beq.n	80047a8 <HAL_RCC_OscConfig+0x320>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	2b80      	cmp	r3, #128	@ 0x80
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e2c1      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047a8:	f7fc fc9a 	bl	80010e0 <HAL_GetREVID>
 80047ac:	4603      	mov	r3, r0
 80047ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d817      	bhi.n	80047e6 <HAL_RCC_OscConfig+0x35e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6a1b      	ldr	r3, [r3, #32]
 80047ba:	2b20      	cmp	r3, #32
 80047bc:	d108      	bne.n	80047d0 <HAL_RCC_OscConfig+0x348>
 80047be:	4b70      	ldr	r3, [pc, #448]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80047c6:	4a6e      	ldr	r2, [pc, #440]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047c8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80047cc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047ce:	e075      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	069b      	lsls	r3, r3, #26
 80047de:	4968      	ldr	r1, [pc, #416]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047e4:	e06a      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80047e6:	4b66      	ldr	r3, [pc, #408]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	4962      	ldr	r1, [pc, #392]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80047fa:	e05f      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d042      	beq.n	800488a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004804:	4b5e      	ldr	r3, [pc, #376]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a5d      	ldr	r2, [pc, #372]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800480a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800480e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004810:	f7fc fc5a 	bl	80010c8 <HAL_GetTick>
 8004814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004816:	e008      	b.n	800482a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004818:	f7fc fc56 	bl	80010c8 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b02      	cmp	r3, #2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e280      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800482a:	4b55      	ldr	r3, [pc, #340]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004832:	2b00      	cmp	r3, #0
 8004834:	d0f0      	beq.n	8004818 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004836:	f7fc fc53 	bl	80010e0 <HAL_GetREVID>
 800483a:	4603      	mov	r3, r0
 800483c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004840:	4293      	cmp	r3, r2
 8004842:	d817      	bhi.n	8004874 <HAL_RCC_OscConfig+0x3ec>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	2b20      	cmp	r3, #32
 800484a:	d108      	bne.n	800485e <HAL_RCC_OscConfig+0x3d6>
 800484c:	4b4c      	ldr	r3, [pc, #304]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004854:	4a4a      	ldr	r2, [pc, #296]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800485a:	6053      	str	r3, [r2, #4]
 800485c:	e02e      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
 800485e:	4b48      	ldr	r3, [pc, #288]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a1b      	ldr	r3, [r3, #32]
 800486a:	069b      	lsls	r3, r3, #26
 800486c:	4944      	ldr	r1, [pc, #272]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
 8004872:	e023      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
 8004874:	4b42      	ldr	r3, [pc, #264]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	061b      	lsls	r3, r3, #24
 8004882:	493f      	ldr	r1, [pc, #252]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	60cb      	str	r3, [r1, #12]
 8004888:	e018      	b.n	80048bc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800488a:	4b3d      	ldr	r3, [pc, #244]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a3c      	ldr	r2, [pc, #240]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004890:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fc fc17 	bl	80010c8 <HAL_GetTick>
 800489a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800489e:	f7fc fc13 	bl	80010c8 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e23d      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80048b0:	4b33      	ldr	r3, [pc, #204]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d036      	beq.n	8004936 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	695b      	ldr	r3, [r3, #20]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d019      	beq.n	8004904 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d0:	4b2b      	ldr	r3, [pc, #172]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80048d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048dc:	f7fc fbf4 	bl	80010c8 <HAL_GetTick>
 80048e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e4:	f7fc fbf0 	bl	80010c8 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e21a      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80048f6:	4b22      	ldr	r3, [pc, #136]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 80048f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048fa:	f003 0302 	and.w	r3, r3, #2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d0f0      	beq.n	80048e4 <HAL_RCC_OscConfig+0x45c>
 8004902:	e018      	b.n	8004936 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004904:	4b1e      	ldr	r3, [pc, #120]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004906:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004908:	4a1d      	ldr	r2, [pc, #116]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800490a:	f023 0301 	bic.w	r3, r3, #1
 800490e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004910:	f7fc fbda 	bl	80010c8 <HAL_GetTick>
 8004914:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004916:	e008      	b.n	800492a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004918:	f7fc fbd6 	bl	80010c8 <HAL_GetTick>
 800491c:	4602      	mov	r2, r0
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	1ad3      	subs	r3, r2, r3
 8004922:	2b02      	cmp	r3, #2
 8004924:	d901      	bls.n	800492a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e200      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800492a:	4b15      	ldr	r3, [pc, #84]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800492c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	2b00      	cmp	r3, #0
 8004934:	d1f0      	bne.n	8004918 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0320 	and.w	r3, r3, #32
 800493e:	2b00      	cmp	r3, #0
 8004940:	d039      	beq.n	80049b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d01c      	beq.n	8004984 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a0c      	ldr	r2, [pc, #48]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004950:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004954:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004956:	f7fc fbb7 	bl	80010c8 <HAL_GetTick>
 800495a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800495c:	e008      	b.n	8004970 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800495e:	f7fc fbb3 	bl	80010c8 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b02      	cmp	r3, #2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e1dd      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_OscConfig+0x4f8>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0f0      	beq.n	800495e <HAL_RCC_OscConfig+0x4d6>
 800497c:	e01b      	b.n	80049b6 <HAL_RCC_OscConfig+0x52e>
 800497e:	bf00      	nop
 8004980:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004984:	4b9b      	ldr	r3, [pc, #620]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a9a      	ldr	r2, [pc, #616]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 800498a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800498e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004990:	f7fc fb9a 	bl	80010c8 <HAL_GetTick>
 8004994:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004998:	f7fc fb96 	bl	80010c8 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1c0      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80049aa:	4b92      	ldr	r3, [pc, #584]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0304 	and.w	r3, r3, #4
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8081 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80049c4:	4b8c      	ldr	r3, [pc, #560]	@ (8004bf8 <HAL_RCC_OscConfig+0x770>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a8b      	ldr	r2, [pc, #556]	@ (8004bf8 <HAL_RCC_OscConfig+0x770>)
 80049ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049d0:	f7fc fb7a 	bl	80010c8 <HAL_GetTick>
 80049d4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d6:	e008      	b.n	80049ea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d8:	f7fc fb76 	bl	80010c8 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	2b64      	cmp	r3, #100	@ 0x64
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e1a0      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ea:	4b83      	ldr	r3, [pc, #524]	@ (8004bf8 <HAL_RCC_OscConfig+0x770>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d0f0      	beq.n	80049d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d106      	bne.n	8004a0c <HAL_RCC_OscConfig+0x584>
 80049fe:	4b7d      	ldr	r3, [pc, #500]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	4a7c      	ldr	r2, [pc, #496]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a0a:	e02d      	b.n	8004a68 <HAL_RCC_OscConfig+0x5e0>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_OscConfig+0x5a6>
 8004a14:	4b77      	ldr	r3, [pc, #476]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a18:	4a76      	ldr	r2, [pc, #472]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a20:	4b74      	ldr	r3, [pc, #464]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a24:	4a73      	ldr	r2, [pc, #460]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a26:	f023 0304 	bic.w	r3, r3, #4
 8004a2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a2c:	e01c      	b.n	8004a68 <HAL_RCC_OscConfig+0x5e0>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	2b05      	cmp	r3, #5
 8004a34:	d10c      	bne.n	8004a50 <HAL_RCC_OscConfig+0x5c8>
 8004a36:	4b6f      	ldr	r3, [pc, #444]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a3a:	4a6e      	ldr	r2, [pc, #440]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a3c:	f043 0304 	orr.w	r3, r3, #4
 8004a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a42:	4b6c      	ldr	r3, [pc, #432]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a46:	4a6b      	ldr	r2, [pc, #428]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a48:	f043 0301 	orr.w	r3, r3, #1
 8004a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCC_OscConfig+0x5e0>
 8004a50:	4b68      	ldr	r3, [pc, #416]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a54:	4a67      	ldr	r2, [pc, #412]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a5c:	4b65      	ldr	r3, [pc, #404]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	4a64      	ldr	r2, [pc, #400]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a62:	f023 0304 	bic.w	r3, r3, #4
 8004a66:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d015      	beq.n	8004a9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a70:	f7fc fb2a 	bl	80010c8 <HAL_GetTick>
 8004a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a76:	e00a      	b.n	8004a8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a78:	f7fc fb26 	bl	80010c8 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e14e      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a8e:	4b59      	ldr	r3, [pc, #356]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0ee      	beq.n	8004a78 <HAL_RCC_OscConfig+0x5f0>
 8004a9a:	e014      	b.n	8004ac6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9c:	f7fc fb14 	bl	80010c8 <HAL_GetTick>
 8004aa0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aa2:	e00a      	b.n	8004aba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aa4:	f7fc fb10 	bl	80010c8 <HAL_GetTick>
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e138      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004aba:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1ee      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f000 812d 	beq.w	8004d2a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004ad0:	4b48      	ldr	r3, [pc, #288]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004ad2:	691b      	ldr	r3, [r3, #16]
 8004ad4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ad8:	2b18      	cmp	r3, #24
 8004ada:	f000 80bd 	beq.w	8004c58 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae2:	2b02      	cmp	r3, #2
 8004ae4:	f040 809e 	bne.w	8004c24 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae8:	4b42      	ldr	r3, [pc, #264]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a41      	ldr	r2, [pc, #260]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004aee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004af2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fc fae8 	bl	80010c8 <HAL_GetTick>
 8004af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004afc:	f7fc fae4 	bl	80010c8 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e10e      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004b0e:	4b39      	ldr	r3, [pc, #228]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b1a:	4b36      	ldr	r3, [pc, #216]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b1e:	4b37      	ldr	r3, [pc, #220]	@ (8004bfc <HAL_RCC_OscConfig+0x774>)
 8004b20:	4013      	ands	r3, r2
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004b2a:	0112      	lsls	r2, r2, #4
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	4931      	ldr	r1, [pc, #196]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	628b      	str	r3, [r1, #40]	@ 0x28
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b42:	3b01      	subs	r3, #1
 8004b44:	025b      	lsls	r3, r3, #9
 8004b46:	b29b      	uxth	r3, r3
 8004b48:	431a      	orrs	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	3b01      	subs	r3, #1
 8004b50:	041b      	lsls	r3, r3, #16
 8004b52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004b56:	431a      	orrs	r2, r3
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b64:	4923      	ldr	r1, [pc, #140]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b66:	4313      	orrs	r3, r2
 8004b68:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004b6a:	4b22      	ldr	r3, [pc, #136]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6e:	4a21      	ldr	r2, [pc, #132]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b70:	f023 0301 	bic.w	r3, r3, #1
 8004b74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004b76:	4b1f      	ldr	r3, [pc, #124]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b7a:	4b21      	ldr	r3, [pc, #132]	@ (8004c00 <HAL_RCC_OscConfig+0x778>)
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b82:	00d2      	lsls	r2, r2, #3
 8004b84:	491b      	ldr	r1, [pc, #108]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	f023 020c 	bic.w	r2, r3, #12
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b96:	4917      	ldr	r1, [pc, #92]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004b9c:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ba0:	f023 0202 	bic.w	r2, r3, #2
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ba8:	4912      	ldr	r1, [pc, #72]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004bae:	4b11      	ldr	r3, [pc, #68]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb2:	4a10      	ldr	r2, [pc, #64]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004bba:	4b0e      	ldr	r3, [pc, #56]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bca:	4a0a      	ldr	r2, [pc, #40]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004bd2:	4b08      	ldr	r3, [pc, #32]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd6:	4a07      	ldr	r2, [pc, #28]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004bde:	4b05      	ldr	r3, [pc, #20]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a04      	ldr	r2, [pc, #16]	@ (8004bf4 <HAL_RCC_OscConfig+0x76c>)
 8004be4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004be8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fc fa6d 	bl	80010c8 <HAL_GetTick>
 8004bee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004bf0:	e011      	b.n	8004c16 <HAL_RCC_OscConfig+0x78e>
 8004bf2:	bf00      	nop
 8004bf4:	58024400 	.word	0x58024400
 8004bf8:	58024800 	.word	0x58024800
 8004bfc:	fffffc0c 	.word	0xfffffc0c
 8004c00:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c04:	f7fc fa60 	bl	80010c8 <HAL_GetTick>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	2b02      	cmp	r3, #2
 8004c10:	d901      	bls.n	8004c16 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e08a      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c16:	4b47      	ldr	r3, [pc, #284]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d0f0      	beq.n	8004c04 <HAL_RCC_OscConfig+0x77c>
 8004c22:	e082      	b.n	8004d2a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c24:	4b43      	ldr	r3, [pc, #268]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a42      	ldr	r2, [pc, #264]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fa4a 	bl	80010c8 <HAL_GetTick>
 8004c34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fc fa46 	bl	80010c8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e070      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c4a:	4b3a      	ldr	r3, [pc, #232]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x7b0>
 8004c56:	e068      	b.n	8004d2a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004c58:	4b36      	ldr	r3, [pc, #216]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c5c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004c5e:	4b35      	ldr	r3, [pc, #212]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c62:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d031      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f003 0203 	and.w	r2, r3, #3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d12a      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	091b      	lsrs	r3, r3, #4
 8004c7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d122      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d11a      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d111      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	0c1b      	lsrs	r3, r3, #16
 8004cb0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d108      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	0e1b      	lsrs	r3, r3, #24
 8004cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d001      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e02b      	b.n	8004d2c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004cd4:	4b17      	ldr	r3, [pc, #92]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004cde:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d01f      	beq.n	8004d2a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004cea:	4b12      	ldr	r3, [pc, #72]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	4a11      	ldr	r2, [pc, #68]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004cf0:	f023 0301 	bic.w	r3, r3, #1
 8004cf4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004cf6:	f7fc f9e7 	bl	80010c8 <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004cfc:	bf00      	nop
 8004cfe:	f7fc f9e3 	bl	80010c8 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d0f9      	beq.n	8004cfe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004d0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004d38 <HAL_RCC_OscConfig+0x8b0>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d16:	00d2      	lsls	r2, r2, #3
 8004d18:	4906      	ldr	r1, [pc, #24]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	4a04      	ldr	r2, [pc, #16]	@ (8004d34 <HAL_RCC_OscConfig+0x8ac>)
 8004d24:	f043 0301 	orr.w	r3, r3, #1
 8004d28:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004d2a:	2300      	movs	r3, #0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3730      	adds	r7, #48	@ 0x30
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	58024400 	.word	0x58024400
 8004d38:	ffff0007 	.word	0xffff0007

08004d3c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e19c      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d50:	4b8a      	ldr	r3, [pc, #552]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f003 030f 	and.w	r3, r3, #15
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d910      	bls.n	8004d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d5e:	4b87      	ldr	r3, [pc, #540]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f023 020f 	bic.w	r2, r3, #15
 8004d66:	4985      	ldr	r1, [pc, #532]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d6e:	4b83      	ldr	r3, [pc, #524]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 030f 	and.w	r3, r3, #15
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d001      	beq.n	8004d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e184      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0304 	and.w	r3, r3, #4
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d010      	beq.n	8004dae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691a      	ldr	r2, [r3, #16]
 8004d90:	4b7b      	ldr	r3, [pc, #492]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d908      	bls.n	8004dae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d9c:	4b78      	ldr	r3, [pc, #480]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	691b      	ldr	r3, [r3, #16]
 8004da8:	4975      	ldr	r1, [pc, #468]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 0308 	and.w	r3, r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d010      	beq.n	8004ddc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	4b70      	ldr	r3, [pc, #448]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d908      	bls.n	8004ddc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dca:	4b6d      	ldr	r3, [pc, #436]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004dcc:	69db      	ldr	r3, [r3, #28]
 8004dce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	496a      	ldr	r1, [pc, #424]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0310 	and.w	r3, r3, #16
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d010      	beq.n	8004e0a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	699a      	ldr	r2, [r3, #24]
 8004dec:	4b64      	ldr	r3, [pc, #400]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d908      	bls.n	8004e0a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004df8:	4b61      	ldr	r3, [pc, #388]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	495e      	ldr	r1, [pc, #376]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0320 	and.w	r3, r3, #32
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d010      	beq.n	8004e38 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	4b59      	ldr	r3, [pc, #356]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d908      	bls.n	8004e38 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e26:	4b56      	ldr	r3, [pc, #344]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	69db      	ldr	r3, [r3, #28]
 8004e32:	4953      	ldr	r1, [pc, #332]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d010      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68da      	ldr	r2, [r3, #12]
 8004e48:	4b4d      	ldr	r3, [pc, #308]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	f003 030f 	and.w	r3, r3, #15
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d908      	bls.n	8004e66 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e54:	4b4a      	ldr	r3, [pc, #296]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f023 020f 	bic.w	r2, r3, #15
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4947      	ldr	r1, [pc, #284]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d055      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004e72:	4b43      	ldr	r3, [pc, #268]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	4940      	ldr	r1, [pc, #256]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d107      	bne.n	8004e9c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004e8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d121      	bne.n	8004edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e0f6      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d107      	bne.n	8004eb4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ea4:	4b36      	ldr	r3, [pc, #216]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d115      	bne.n	8004edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0ea      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ebc:	4b30      	ldr	r3, [pc, #192]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d109      	bne.n	8004edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0de      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0304 	and.w	r3, r3, #4
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e0d6      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004edc:	4b28      	ldr	r3, [pc, #160]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f023 0207 	bic.w	r2, r3, #7
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	4925      	ldr	r1, [pc, #148]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004eee:	f7fc f8eb 	bl	80010c8 <HAL_GetTick>
 8004ef2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ef4:	e00a      	b.n	8004f0c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ef6:	f7fc f8e7 	bl	80010c8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0be      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d1eb      	bne.n	8004ef6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d010      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	4b14      	ldr	r3, [pc, #80]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d208      	bcs.n	8004f4c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f3a:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	f023 020f 	bic.w	r2, r3, #15
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	490e      	ldr	r1, [pc, #56]	@ (8004f80 <HAL_RCC_ClockConfig+0x244>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d214      	bcs.n	8004f84 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b08      	ldr	r3, [pc, #32]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f023 020f 	bic.w	r2, r3, #15
 8004f62:	4906      	ldr	r1, [pc, #24]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6a:	4b04      	ldr	r3, [pc, #16]	@ (8004f7c <HAL_RCC_ClockConfig+0x240>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	683a      	ldr	r2, [r7, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d005      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e086      	b.n	800508a <HAL_RCC_ClockConfig+0x34e>
 8004f7c:	52002000 	.word	0x52002000
 8004f80:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0304 	and.w	r3, r3, #4
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	691a      	ldr	r2, [r3, #16]
 8004f94:	4b3f      	ldr	r3, [pc, #252]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d208      	bcs.n	8004fb2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fa0:	4b3c      	ldr	r3, [pc, #240]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	691b      	ldr	r3, [r3, #16]
 8004fac:	4939      	ldr	r1, [pc, #228]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d010      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	4b34      	ldr	r3, [pc, #208]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d208      	bcs.n	8004fe0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fce:	4b31      	ldr	r3, [pc, #196]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	492e      	ldr	r1, [pc, #184]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d010      	beq.n	800500e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699a      	ldr	r2, [r3, #24]
 8004ff0:	4b28      	ldr	r3, [pc, #160]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ff8:	429a      	cmp	r2, r3
 8004ffa:	d208      	bcs.n	800500e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ffc:	4b25      	ldr	r3, [pc, #148]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	699b      	ldr	r3, [r3, #24]
 8005008:	4922      	ldr	r1, [pc, #136]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 800500a:	4313      	orrs	r3, r2
 800500c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f003 0320 	and.w	r3, r3, #32
 8005016:	2b00      	cmp	r3, #0
 8005018:	d010      	beq.n	800503c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	69da      	ldr	r2, [r3, #28]
 800501e:	4b1d      	ldr	r3, [pc, #116]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005026:	429a      	cmp	r2, r3
 8005028:	d208      	bcs.n	800503c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800502a:	4b1a      	ldr	r3, [pc, #104]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	69db      	ldr	r3, [r3, #28]
 8005036:	4917      	ldr	r1, [pc, #92]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8005038:	4313      	orrs	r3, r2
 800503a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800503c:	f000 f834 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 8005040:	4602      	mov	r2, r0
 8005042:	4b14      	ldr	r3, [pc, #80]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	0a1b      	lsrs	r3, r3, #8
 8005048:	f003 030f 	and.w	r3, r3, #15
 800504c:	4912      	ldr	r1, [pc, #72]	@ (8005098 <HAL_RCC_ClockConfig+0x35c>)
 800504e:	5ccb      	ldrb	r3, [r1, r3]
 8005050:	f003 031f 	and.w	r3, r3, #31
 8005054:	fa22 f303 	lsr.w	r3, r2, r3
 8005058:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800505a:	4b0e      	ldr	r3, [pc, #56]	@ (8005094 <HAL_RCC_ClockConfig+0x358>)
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	4a0d      	ldr	r2, [pc, #52]	@ (8005098 <HAL_RCC_ClockConfig+0x35c>)
 8005064:	5cd3      	ldrb	r3, [r2, r3]
 8005066:	f003 031f 	and.w	r3, r3, #31
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	fa22 f303 	lsr.w	r3, r2, r3
 8005070:	4a0a      	ldr	r2, [pc, #40]	@ (800509c <HAL_RCC_ClockConfig+0x360>)
 8005072:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005074:	4a0a      	ldr	r2, [pc, #40]	@ (80050a0 <HAL_RCC_ClockConfig+0x364>)
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800507a:	4b0a      	ldr	r3, [pc, #40]	@ (80050a4 <HAL_RCC_ClockConfig+0x368>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4618      	mov	r0, r3
 8005080:	f7fb ffd8 	bl	8001034 <HAL_InitTick>
 8005084:	4603      	mov	r3, r0
 8005086:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005088:	7bfb      	ldrb	r3, [r7, #15]
}
 800508a:	4618      	mov	r0, r3
 800508c:	3718      	adds	r7, #24
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	58024400 	.word	0x58024400
 8005098:	08009178 	.word	0x08009178
 800509c:	24000004 	.word	0x24000004
 80050a0:	24000000 	.word	0x24000000
 80050a4:	24000008 	.word	0x24000008

080050a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	@ 0x24
 80050ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050ae:	4bb3      	ldr	r3, [pc, #716]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050b6:	2b18      	cmp	r3, #24
 80050b8:	f200 8155 	bhi.w	8005366 <HAL_RCC_GetSysClockFreq+0x2be>
 80050bc:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80050be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c2:	bf00      	nop
 80050c4:	08005129 	.word	0x08005129
 80050c8:	08005367 	.word	0x08005367
 80050cc:	08005367 	.word	0x08005367
 80050d0:	08005367 	.word	0x08005367
 80050d4:	08005367 	.word	0x08005367
 80050d8:	08005367 	.word	0x08005367
 80050dc:	08005367 	.word	0x08005367
 80050e0:	08005367 	.word	0x08005367
 80050e4:	0800514f 	.word	0x0800514f
 80050e8:	08005367 	.word	0x08005367
 80050ec:	08005367 	.word	0x08005367
 80050f0:	08005367 	.word	0x08005367
 80050f4:	08005367 	.word	0x08005367
 80050f8:	08005367 	.word	0x08005367
 80050fc:	08005367 	.word	0x08005367
 8005100:	08005367 	.word	0x08005367
 8005104:	08005155 	.word	0x08005155
 8005108:	08005367 	.word	0x08005367
 800510c:	08005367 	.word	0x08005367
 8005110:	08005367 	.word	0x08005367
 8005114:	08005367 	.word	0x08005367
 8005118:	08005367 	.word	0x08005367
 800511c:	08005367 	.word	0x08005367
 8005120:	08005367 	.word	0x08005367
 8005124:	0800515b 	.word	0x0800515b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005128:	4b94      	ldr	r3, [pc, #592]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d009      	beq.n	8005148 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005134:	4b91      	ldr	r3, [pc, #580]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	08db      	lsrs	r3, r3, #3
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	4a90      	ldr	r2, [pc, #576]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005140:	fa22 f303 	lsr.w	r3, r2, r3
 8005144:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8005146:	e111      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005148:	4b8d      	ldr	r3, [pc, #564]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800514a:	61bb      	str	r3, [r7, #24]
      break;
 800514c:	e10e      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800514e:	4b8d      	ldr	r3, [pc, #564]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005150:	61bb      	str	r3, [r7, #24]
      break;
 8005152:	e10b      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005154:	4b8c      	ldr	r3, [pc, #560]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8005156:	61bb      	str	r3, [r7, #24]
      break;
 8005158:	e108      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800515a:	4b88      	ldr	r3, [pc, #544]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800515c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005164:	4b85      	ldr	r3, [pc, #532]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005168:	091b      	lsrs	r3, r3, #4
 800516a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800516e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005170:	4b82      	ldr	r3, [pc, #520]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800517a:	4b80      	ldr	r3, [pc, #512]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	08db      	lsrs	r3, r3, #3
 8005180:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	fb02 f303 	mul.w	r3, r2, r3
 800518a:	ee07 3a90 	vmov	s15, r3
 800518e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005192:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80e1 	beq.w	8005360 <HAL_RCC_GetSysClockFreq+0x2b8>
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	f000 8083 	beq.w	80052ac <HAL_RCC_GetSysClockFreq+0x204>
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	f200 80a1 	bhi.w	80052f0 <HAL_RCC_GetSysClockFreq+0x248>
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d003      	beq.n	80051bc <HAL_RCC_GetSysClockFreq+0x114>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b01      	cmp	r3, #1
 80051b8:	d056      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0x1c0>
 80051ba:	e099      	b.n	80052f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051bc:	4b6f      	ldr	r3, [pc, #444]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d02d      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051c8:	4b6c      	ldr	r3, [pc, #432]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	08db      	lsrs	r3, r3, #3
 80051ce:	f003 0303 	and.w	r3, r3, #3
 80051d2:	4a6b      	ldr	r2, [pc, #428]	@ (8005380 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
 80051d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	ee07 3a90 	vmov	s15, r3
 80051e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	ee07 3a90 	vmov	s15, r3
 80051ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051f2:	4b62      	ldr	r3, [pc, #392]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051fa:	ee07 3a90 	vmov	s15, r3
 80051fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005202:	ed97 6a02 	vldr	s12, [r7, #8]
 8005206:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e4>
 800520a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800520e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005212:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800521a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800521e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8005222:	e087      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	ee07 3a90 	vmov	s15, r3
 800522a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800522e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005390 <HAL_RCC_GetSysClockFreq+0x2e8>
 8005232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005236:	4b51      	ldr	r3, [pc, #324]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800523a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800523e:	ee07 3a90 	vmov	s15, r3
 8005242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005246:	ed97 6a02 	vldr	s12, [r7, #8]
 800524a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e4>
 800524e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005256:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800525a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800525e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005262:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005266:	e065      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005394 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800527a:	4b40      	ldr	r3, [pc, #256]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800527e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005282:	ee07 3a90 	vmov	s15, r3
 8005286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800528a:	ed97 6a02 	vldr	s12, [r7, #8]
 800528e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e4>
 8005292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800529a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800529e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052aa:	e043      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	ee07 3a90 	vmov	s15, r3
 80052b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005398 <HAL_RCC_GetSysClockFreq+0x2f0>
 80052ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052be:	4b2f      	ldr	r3, [pc, #188]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c6:	ee07 3a90 	vmov	s15, r3
 80052ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80052d2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e4>
 80052d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80052ee:	e021      	b.n	8005334 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005394 <HAL_RCC_GetSysClockFreq+0x2ec>
 80052fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005302:	4b1e      	ldr	r3, [pc, #120]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800530a:	ee07 3a90 	vmov	s15, r3
 800530e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005312:	ed97 6a02 	vldr	s12, [r7, #8]
 8005316:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800538c <HAL_RCC_GetSysClockFreq+0x2e4>
 800531a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800531e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800532a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800532e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005332:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005334:	4b11      	ldr	r3, [pc, #68]	@ (800537c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	0a5b      	lsrs	r3, r3, #9
 800533a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533e:	3301      	adds	r3, #1
 8005340:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	ee07 3a90 	vmov	s15, r3
 8005348:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800534c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005358:	ee17 3a90 	vmov	r3, s15
 800535c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800535e:	e005      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005360:	2300      	movs	r3, #0
 8005362:	61bb      	str	r3, [r7, #24]
      break;
 8005364:	e002      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005366:	4b07      	ldr	r3, [pc, #28]	@ (8005384 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005368:	61bb      	str	r3, [r7, #24]
      break;
 800536a:	bf00      	nop
  }

  return sysclockfreq;
 800536c:	69bb      	ldr	r3, [r7, #24]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3724      	adds	r7, #36	@ 0x24
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	58024400 	.word	0x58024400
 8005380:	03d09000 	.word	0x03d09000
 8005384:	003d0900 	.word	0x003d0900
 8005388:	017d7840 	.word	0x017d7840
 800538c:	46000000 	.word	0x46000000
 8005390:	4c742400 	.word	0x4c742400
 8005394:	4a742400 	.word	0x4a742400
 8005398:	4bbebc20 	.word	0x4bbebc20

0800539c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80053a2:	f7ff fe81 	bl	80050a8 <HAL_RCC_GetSysClockFreq>
 80053a6:	4602      	mov	r2, r0
 80053a8:	4b10      	ldr	r3, [pc, #64]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x50>)
 80053aa:	699b      	ldr	r3, [r3, #24]
 80053ac:	0a1b      	lsrs	r3, r3, #8
 80053ae:	f003 030f 	and.w	r3, r3, #15
 80053b2:	490f      	ldr	r1, [pc, #60]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80053b4:	5ccb      	ldrb	r3, [r1, r3]
 80053b6:	f003 031f 	and.w	r3, r3, #31
 80053ba:	fa22 f303 	lsr.w	r3, r2, r3
 80053be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80053c0:	4b0a      	ldr	r3, [pc, #40]	@ (80053ec <HAL_RCC_GetHCLKFreq+0x50>)
 80053c2:	699b      	ldr	r3, [r3, #24]
 80053c4:	f003 030f 	and.w	r3, r3, #15
 80053c8:	4a09      	ldr	r2, [pc, #36]	@ (80053f0 <HAL_RCC_GetHCLKFreq+0x54>)
 80053ca:	5cd3      	ldrb	r3, [r2, r3]
 80053cc:	f003 031f 	and.w	r3, r3, #31
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	4a07      	ldr	r2, [pc, #28]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80053d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80053da:	4a07      	ldr	r2, [pc, #28]	@ (80053f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80053e0:	4b04      	ldr	r3, [pc, #16]	@ (80053f4 <HAL_RCC_GetHCLKFreq+0x58>)
 80053e2:	681b      	ldr	r3, [r3, #0]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3708      	adds	r7, #8
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	58024400 	.word	0x58024400
 80053f0:	08009178 	.word	0x08009178
 80053f4:	24000004 	.word	0x24000004
 80053f8:	24000000 	.word	0x24000000

080053fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005400:	f7ff ffcc 	bl	800539c <HAL_RCC_GetHCLKFreq>
 8005404:	4602      	mov	r2, r0
 8005406:	4b06      	ldr	r3, [pc, #24]	@ (8005420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	4904      	ldr	r1, [pc, #16]	@ (8005424 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005412:	5ccb      	ldrb	r3, [r1, r3]
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800541c:	4618      	mov	r0, r3
 800541e:	bd80      	pop	{r7, pc}
 8005420:	58024400 	.word	0x58024400
 8005424:	08009178 	.word	0x08009178

08005428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800542c:	f7ff ffb6 	bl	800539c <HAL_RCC_GetHCLKFreq>
 8005430:	4602      	mov	r2, r0
 8005432:	4b06      	ldr	r3, [pc, #24]	@ (800544c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	0a1b      	lsrs	r3, r3, #8
 8005438:	f003 0307 	and.w	r3, r3, #7
 800543c:	4904      	ldr	r1, [pc, #16]	@ (8005450 <HAL_RCC_GetPCLK2Freq+0x28>)
 800543e:	5ccb      	ldrb	r3, [r1, r3]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005448:	4618      	mov	r0, r3
 800544a:	bd80      	pop	{r7, pc}
 800544c:	58024400 	.word	0x58024400
 8005450:	08009178 	.word	0x08009178

08005454 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b0ca      	sub	sp, #296	@ 0x128
 800545a:	af00      	add	r7, sp, #0
 800545c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005466:	2300      	movs	r3, #0
 8005468:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800546c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005474:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005478:	2500      	movs	r5, #0
 800547a:	ea54 0305 	orrs.w	r3, r4, r5
 800547e:	d049      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005484:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005486:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800548a:	d02f      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 800548c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005490:	d828      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005492:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005496:	d01a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005498:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800549c:	d822      	bhi.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054a6:	d007      	beq.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80054a8:	e01c      	b.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054aa:	4bb8      	ldr	r3, [pc, #736]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ae:	4ab7      	ldr	r2, [pc, #732]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054b6:	e01a      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054bc:	3308      	adds	r3, #8
 80054be:	2102      	movs	r1, #2
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 fc8f 	bl	8006de4 <RCCEx_PLL2_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054cc:	e00f      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d2:	3328      	adds	r3, #40	@ 0x28
 80054d4:	2102      	movs	r1, #2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f001 fd36 	bl	8006f48 <RCCEx_PLL3_Config>
 80054dc:	4603      	mov	r3, r0
 80054de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80054e2:	e004      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ea:	e000      	b.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80054ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80054f6:	4ba5      	ldr	r3, [pc, #660]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80054fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005502:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005504:	4aa1      	ldr	r2, [pc, #644]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005506:	430b      	orrs	r3, r1
 8005508:	6513      	str	r3, [r2, #80]	@ 0x50
 800550a:	e003      	b.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005510:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005520:	f04f 0900 	mov.w	r9, #0
 8005524:	ea58 0309 	orrs.w	r3, r8, r9
 8005528:	d047      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800552a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800552e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005530:	2b04      	cmp	r3, #4
 8005532:	d82a      	bhi.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005534:	a201      	add	r2, pc, #4	@ (adr r2, 800553c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553a:	bf00      	nop
 800553c:	08005551 	.word	0x08005551
 8005540:	0800555f 	.word	0x0800555f
 8005544:	08005575 	.word	0x08005575
 8005548:	08005593 	.word	0x08005593
 800554c:	08005593 	.word	0x08005593
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005550:	4b8e      	ldr	r3, [pc, #568]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	4a8d      	ldr	r2, [pc, #564]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005556:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800555a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800555c:	e01a      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800555e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005562:	3308      	adds	r3, #8
 8005564:	2100      	movs	r1, #0
 8005566:	4618      	mov	r0, r3
 8005568:	f001 fc3c 	bl	8006de4 <RCCEx_PLL2_Config>
 800556c:	4603      	mov	r3, r0
 800556e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005572:	e00f      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005574:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005578:	3328      	adds	r3, #40	@ 0x28
 800557a:	2100      	movs	r1, #0
 800557c:	4618      	mov	r0, r3
 800557e:	f001 fce3 	bl	8006f48 <RCCEx_PLL3_Config>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005588:	e004      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005590:	e000      	b.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005598:	2b00      	cmp	r3, #0
 800559a:	d10a      	bne.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800559c:	4b7b      	ldr	r3, [pc, #492]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800559e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055a0:	f023 0107 	bic.w	r1, r3, #7
 80055a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055aa:	4a78      	ldr	r2, [pc, #480]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ac:	430b      	orrs	r3, r1
 80055ae:	6513      	str	r3, [r2, #80]	@ 0x50
 80055b0:	e003      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80055ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80055c6:	f04f 0b00 	mov.w	fp, #0
 80055ca:	ea5a 030b 	orrs.w	r3, sl, fp
 80055ce:	d04c      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80055d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055da:	d030      	beq.n	800563e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80055dc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055e0:	d829      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e4:	d02d      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80055e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055e8:	d825      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055ea:	2b80      	cmp	r3, #128	@ 0x80
 80055ec:	d018      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80055ee:	2b80      	cmp	r3, #128	@ 0x80
 80055f0:	d821      	bhi.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80055f6:	2b40      	cmp	r3, #64	@ 0x40
 80055f8:	d007      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80055fa:	e01c      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80055fc:	4b63      	ldr	r3, [pc, #396]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005600:	4a62      	ldr	r2, [pc, #392]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005602:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005606:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005608:	e01c      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800560a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800560e:	3308      	adds	r3, #8
 8005610:	2100      	movs	r1, #0
 8005612:	4618      	mov	r0, r3
 8005614:	f001 fbe6 	bl	8006de4 <RCCEx_PLL2_Config>
 8005618:	4603      	mov	r3, r0
 800561a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800561e:	e011      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005620:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005624:	3328      	adds	r3, #40	@ 0x28
 8005626:	2100      	movs	r1, #0
 8005628:	4618      	mov	r0, r3
 800562a:	f001 fc8d 	bl	8006f48 <RCCEx_PLL3_Config>
 800562e:	4603      	mov	r3, r0
 8005630:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005634:	e006      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800563c:	e002      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800563e:	bf00      	nop
 8005640:	e000      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005642:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005644:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800564c:	4b4f      	ldr	r3, [pc, #316]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800564e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005650:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565a:	4a4c      	ldr	r2, [pc, #304]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800565c:	430b      	orrs	r3, r1
 800565e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005660:	e003      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800566a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005676:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800567a:	2300      	movs	r3, #0
 800567c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005680:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005684:	460b      	mov	r3, r1
 8005686:	4313      	orrs	r3, r2
 8005688:	d053      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800568a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800568e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005692:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005696:	d035      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005698:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800569c:	d82e      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800569e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056a2:	d031      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80056a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80056a8:	d828      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056ae:	d01a      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80056b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80056b4:	d822      	bhi.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80056ba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056be:	d007      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80056c0:	e01c      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c2:	4b32      	ldr	r3, [pc, #200]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c6:	4a31      	ldr	r2, [pc, #196]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ce:	e01c      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d4:	3308      	adds	r3, #8
 80056d6:	2100      	movs	r1, #0
 80056d8:	4618      	mov	r0, r3
 80056da:	f001 fb83 	bl	8006de4 <RCCEx_PLL2_Config>
 80056de:	4603      	mov	r3, r0
 80056e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80056e4:	e011      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	3328      	adds	r3, #40	@ 0x28
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fc2a 	bl	8006f48 <RCCEx_PLL3_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056fa:	e006      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005702:	e002      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8005708:	bf00      	nop
    }

    if (ret == HAL_OK)
 800570a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10b      	bne.n	800572a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005712:	4b1e      	ldr	r3, [pc, #120]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005716:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800571a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005722:	4a1a      	ldr	r2, [pc, #104]	@ (800578c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005724:	430b      	orrs	r3, r1
 8005726:	6593      	str	r3, [r2, #88]	@ 0x58
 8005728:	e003      	b.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800573e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005742:	2300      	movs	r3, #0
 8005744:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005748:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800574c:	460b      	mov	r3, r1
 800574e:	4313      	orrs	r3, r2
 8005750:	d056      	beq.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005756:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800575a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800575e:	d038      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005760:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005764:	d831      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005766:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800576a:	d034      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800576c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005770:	d82b      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005772:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005776:	d01d      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005778:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800577c:	d825      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800577e:	2b00      	cmp	r3, #0
 8005780:	d006      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005782:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005786:	d00a      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005788:	e01f      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 800578a:	bf00      	nop
 800578c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005790:	4ba2      	ldr	r3, [pc, #648]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	4aa1      	ldr	r2, [pc, #644]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800579c:	e01c      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800579e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057a2:	3308      	adds	r3, #8
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fb1c 	bl	8006de4 <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057b2:	e011      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057b8:	3328      	adds	r3, #40	@ 0x28
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fbc3 	bl	8006f48 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057c8:	e006      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d0:	e002      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057d2:	bf00      	nop
 80057d4:	e000      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80057d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d10b      	bne.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80057e0:	4b8e      	ldr	r3, [pc, #568]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80057e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80057f0:	4a8a      	ldr	r2, [pc, #552]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f2:	430b      	orrs	r3, r1
 80057f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80057f6:	e003      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005808:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800580c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005810:	2300      	movs	r3, #0
 8005812:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005816:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800581a:	460b      	mov	r3, r1
 800581c:	4313      	orrs	r3, r2
 800581e:	d03a      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8005820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005824:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005826:	2b30      	cmp	r3, #48	@ 0x30
 8005828:	d01f      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800582a:	2b30      	cmp	r3, #48	@ 0x30
 800582c:	d819      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800582e:	2b20      	cmp	r3, #32
 8005830:	d00c      	beq.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8005832:	2b20      	cmp	r3, #32
 8005834:	d815      	bhi.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005836:	2b00      	cmp	r3, #0
 8005838:	d019      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800583a:	2b10      	cmp	r3, #16
 800583c:	d111      	bne.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800583e:	4b77      	ldr	r3, [pc, #476]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005842:	4a76      	ldr	r2, [pc, #472]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005848:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800584a:	e011      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800584c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005850:	3308      	adds	r3, #8
 8005852:	2102      	movs	r1, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f001 fac5 	bl	8006de4 <RCCEx_PLL2_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005860:	e006      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005868:	e002      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800586a:	bf00      	nop
 800586c:	e000      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800586e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005870:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10a      	bne.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005878:	4b68      	ldr	r3, [pc, #416]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800587a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800587c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005886:	4a65      	ldr	r2, [pc, #404]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005888:	430b      	orrs	r3, r1
 800588a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800588c:	e003      	b.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800588e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800589a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800589e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80058a2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058a6:	2300      	movs	r3, #0
 80058a8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4313      	orrs	r3, r2
 80058b4:	d051      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80058b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80058bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c0:	d035      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80058c2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80058c6:	d82e      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058c8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058cc:	d031      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80058ce:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80058d2:	d828      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d8:	d01a      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80058da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058de:	d822      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 80058e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058e8:	d007      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80058ea:	e01c      	b.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058ec:	4b4b      	ldr	r3, [pc, #300]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f0:	4a4a      	ldr	r2, [pc, #296]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80058f8:	e01c      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058fe:	3308      	adds	r3, #8
 8005900:	2100      	movs	r1, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f001 fa6e 	bl	8006de4 <RCCEx_PLL2_Config>
 8005908:	4603      	mov	r3, r0
 800590a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800590e:	e011      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	3328      	adds	r3, #40	@ 0x28
 8005916:	2100      	movs	r1, #0
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fb15 	bl	8006f48 <RCCEx_PLL3_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592c:	e002      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8005932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800593c:	4b37      	ldr	r3, [pc, #220]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005940:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800594a:	4a34      	ldr	r2, [pc, #208]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594c:	430b      	orrs	r3, r1
 800594e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005966:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005970:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d056      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005980:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005984:	d033      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005986:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800598a:	d82c      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800598c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005990:	d02f      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005992:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005996:	d826      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005998:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800599c:	d02b      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800599e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80059a2:	d820      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059a4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059a8:	d012      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80059aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80059ae:	d81a      	bhi.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d022      	beq.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80059b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059b8:	d115      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80059ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059be:	3308      	adds	r3, #8
 80059c0:	2101      	movs	r1, #1
 80059c2:	4618      	mov	r0, r3
 80059c4:	f001 fa0e 	bl	8006de4 <RCCEx_PLL2_Config>
 80059c8:	4603      	mov	r3, r0
 80059ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059ce:	e015      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80059d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d4:	3328      	adds	r3, #40	@ 0x28
 80059d6:	2101      	movs	r1, #1
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 fab5 	bl	8006f48 <RCCEx_PLL3_Config>
 80059de:	4603      	mov	r3, r0
 80059e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80059e4:	e00a      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059ec:	e006      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059ee:	bf00      	nop
 80059f0:	e004      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059f2:	bf00      	nop
 80059f4:	e002      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059f6:	bf00      	nop
 80059f8:	e000      	b.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80059fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10d      	bne.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a08:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a12:	4a02      	ldr	r2, [pc, #8]	@ (8005a1c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a14:	430b      	orrs	r3, r1
 8005a16:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a18:	e006      	b.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005a1a:	bf00      	nop
 8005a1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a30:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a3e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4313      	orrs	r3, r2
 8005a46:	d055      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005a50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a54:	d033      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005a56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005a5a:	d82c      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a60:	d02f      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a66:	d826      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a68:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a6c:	d02b      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005a6e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005a72:	d820      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a78:	d012      	beq.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005a7a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a7e:	d81a      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d022      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005a84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005a88:	d115      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8e:	3308      	adds	r3, #8
 8005a90:	2101      	movs	r1, #1
 8005a92:	4618      	mov	r0, r3
 8005a94:	f001 f9a6 	bl	8006de4 <RCCEx_PLL2_Config>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005a9e:	e015      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aa4:	3328      	adds	r3, #40	@ 0x28
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 fa4d 	bl	8006f48 <RCCEx_PLL3_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005ab4:	e00a      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005abc:	e006      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005abe:	bf00      	nop
 8005ac0:	e004      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ac2:	bf00      	nop
 8005ac4:	e002      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005ac6:	bf00      	nop
 8005ac8:	e000      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ad4:	4ba3      	ldr	r3, [pc, #652]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ad8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ae0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ae4:	4a9f      	ldr	r2, [pc, #636]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae6:	430b      	orrs	r3, r1
 8005ae8:	6593      	str	r3, [r2, #88]	@ 0x58
 8005aea:	e003      	b.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005b00:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b04:	2300      	movs	r3, #0
 8005b06:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b0e:	460b      	mov	r3, r1
 8005b10:	4313      	orrs	r3, r2
 8005b12:	d037      	beq.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b1e:	d00e      	beq.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005b20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b24:	d816      	bhi.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d018      	beq.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005b2a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b2e:	d111      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b30:	4b8c      	ldr	r3, [pc, #560]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b34:	4a8b      	ldr	r2, [pc, #556]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b3c:	e00f      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b42:	3308      	adds	r3, #8
 8005b44:	2101      	movs	r1, #1
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 f94c 	bl	8006de4 <RCCEx_PLL2_Config>
 8005b4c:	4603      	mov	r3, r0
 8005b4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005b52:	e004      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b5a:	e000      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005b66:	4b7f      	ldr	r3, [pc, #508]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b6a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b74:	4a7b      	ldr	r2, [pc, #492]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b76:	430b      	orrs	r3, r1
 8005b78:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b7a:	e003      	b.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b8c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005b90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b94:	2300      	movs	r3, #0
 8005b96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005b9a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d039      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	d81c      	bhi.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005bae:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bf1 	.word	0x08005bf1
 8005bb8:	08005bc5 	.word	0x08005bc5
 8005bbc:	08005bd3 	.word	0x08005bd3
 8005bc0:	08005bf1 	.word	0x08005bf1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc4:	4b67      	ldr	r3, [pc, #412]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc8:	4a66      	ldr	r2, [pc, #408]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005bd0:	e00f      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	2102      	movs	r1, #2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f902 	bl	8006de4 <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005be6:	e004      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005bee:	e000      	b.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005bf0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005bf2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d10a      	bne.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005bfa:	4b5a      	ldr	r3, [pc, #360]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfe:	f023 0103 	bic.w	r1, r3, #3
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c08:	4a56      	ldr	r2, [pc, #344]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c0a:	430b      	orrs	r3, r1
 8005c0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005c0e:	e003      	b.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c20:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005c24:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c2e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c32:	460b      	mov	r3, r1
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f000 809f 	beq.w	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c46:	f7fb fa3f 	bl	80010c8 <HAL_GetTick>
 8005c4a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c4e:	e00b      	b.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c50:	f7fb fa3a 	bl	80010c8 <HAL_GetTick>
 8005c54:	4602      	mov	r2, r0
 8005c56:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	2b64      	cmp	r3, #100	@ 0x64
 8005c5e:	d903      	bls.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c66:	e005      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c68:	4b3f      	ldr	r3, [pc, #252]	@ (8005d68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d0ed      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d179      	bne.n	8005d70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005c7c:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c7e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005c80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c84:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005c88:	4053      	eors	r3, r2
 8005c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d015      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c92:	4b34      	ldr	r3, [pc, #208]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c9a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005c9e:	4b31      	ldr	r3, [pc, #196]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ca2:	4a30      	ldr	r2, [pc, #192]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ca4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ca8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005caa:	4b2e      	ldr	r3, [pc, #184]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cae:	4a2d      	ldr	r2, [pc, #180]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005cb4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005cb6:	4a2b      	ldr	r2, [pc, #172]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005cbc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005cbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cc2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005cc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cca:	d118      	bne.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ccc:	f7fb f9fc 	bl	80010c8 <HAL_GetTick>
 8005cd0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cd4:	e00d      	b.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cd6:	f7fb f9f7 	bl	80010c8 <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005ce0:	1ad2      	subs	r2, r2, r3
 8005ce2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d903      	bls.n	8005cf2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005cf0:	e005      	b.n	8005cfe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cf6:	f003 0302 	and.w	r3, r3, #2
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d0eb      	beq.n	8005cd6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005cfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d129      	bne.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d16:	d10e      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005d18:	4b12      	ldr	r3, [pc, #72]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d28:	091a      	lsrs	r2, r3, #4
 8005d2a:	4b10      	ldr	r3, [pc, #64]	@ (8005d6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d30:	430b      	orrs	r3, r1
 8005d32:	6113      	str	r3, [r2, #16]
 8005d34:	e005      	b.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005d36:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d3c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005d40:	6113      	str	r3, [r2, #16]
 8005d42:	4b08      	ldr	r3, [pc, #32]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d44:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d52:	4a04      	ldr	r2, [pc, #16]	@ (8005d64 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d54:	430b      	orrs	r3, r1
 8005d56:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d58:	e00e      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005d62:	e009      	b.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005d64:	58024400 	.word	0x58024400
 8005d68:	58024800 	.word	0x58024800
 8005d6c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d80:	f002 0301 	and.w	r3, r2, #1
 8005d84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d88:	2300      	movs	r3, #0
 8005d8a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4313      	orrs	r3, r2
 8005d96:	f000 8089 	beq.w	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005da0:	2b28      	cmp	r3, #40	@ 0x28
 8005da2:	d86b      	bhi.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005da4:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005daa:	bf00      	nop
 8005dac:	08005e85 	.word	0x08005e85
 8005db0:	08005e7d 	.word	0x08005e7d
 8005db4:	08005e7d 	.word	0x08005e7d
 8005db8:	08005e7d 	.word	0x08005e7d
 8005dbc:	08005e7d 	.word	0x08005e7d
 8005dc0:	08005e7d 	.word	0x08005e7d
 8005dc4:	08005e7d 	.word	0x08005e7d
 8005dc8:	08005e7d 	.word	0x08005e7d
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e7d 	.word	0x08005e7d
 8005dd4:	08005e7d 	.word	0x08005e7d
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005e7d 	.word	0x08005e7d
 8005de0:	08005e7d 	.word	0x08005e7d
 8005de4:	08005e7d 	.word	0x08005e7d
 8005de8:	08005e7d 	.word	0x08005e7d
 8005dec:	08005e67 	.word	0x08005e67
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005e7d 	.word	0x08005e7d
 8005df8:	08005e7d 	.word	0x08005e7d
 8005dfc:	08005e7d 	.word	0x08005e7d
 8005e00:	08005e7d 	.word	0x08005e7d
 8005e04:	08005e7d 	.word	0x08005e7d
 8005e08:	08005e7d 	.word	0x08005e7d
 8005e0c:	08005e85 	.word	0x08005e85
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005e7d 	.word	0x08005e7d
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e7d 	.word	0x08005e7d
 8005e20:	08005e7d 	.word	0x08005e7d
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e7d 	.word	0x08005e7d
 8005e2c:	08005e85 	.word	0x08005e85
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e7d 	.word	0x08005e7d
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005e7d 	.word	0x08005e7d
 8005e4c:	08005e85 	.word	0x08005e85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e54:	3308      	adds	r3, #8
 8005e56:	2101      	movs	r1, #1
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 ffc3 	bl	8006de4 <RCCEx_PLL2_Config>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e64:	e00f      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e6a:	3328      	adds	r3, #40	@ 0x28
 8005e6c:	2101      	movs	r1, #1
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f001 f86a 	bl	8006f48 <RCCEx_PLL3_Config>
 8005e74:	4603      	mov	r3, r0
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005e7a:	e004      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005e84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10a      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005e8e:	4bbf      	ldr	r3, [pc, #764]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e9c:	4abb      	ldr	r2, [pc, #748]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e9e:	430b      	orrs	r3, r1
 8005ea0:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea2:	e003      	b.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb4:	f002 0302 	and.w	r3, r2, #2
 8005eb8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005ec2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	4313      	orrs	r3, r2
 8005eca:	d041      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ed2:	2b05      	cmp	r3, #5
 8005ed4:	d824      	bhi.n	8005f20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8005edc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005ef5 	.word	0x08005ef5
 8005ee4:	08005f0b 	.word	0x08005f0b
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f29 	.word	0x08005f29
 8005ef0:	08005f29 	.word	0x08005f29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ef8:	3308      	adds	r3, #8
 8005efa:	2101      	movs	r1, #1
 8005efc:	4618      	mov	r0, r3
 8005efe:	f000 ff71 	bl	8006de4 <RCCEx_PLL2_Config>
 8005f02:	4603      	mov	r3, r0
 8005f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f08:	e00f      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f0e:	3328      	adds	r3, #40	@ 0x28
 8005f10:	2101      	movs	r1, #1
 8005f12:	4618      	mov	r0, r3
 8005f14:	f001 f818 	bl	8006f48 <RCCEx_PLL3_Config>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005f1e:	e004      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f26:	e000      	b.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005f28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10a      	bne.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005f32:	4b96      	ldr	r3, [pc, #600]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f36:	f023 0107 	bic.w	r1, r3, #7
 8005f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f40:	4a92      	ldr	r2, [pc, #584]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f42:	430b      	orrs	r3, r1
 8005f44:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f46:	e003      	b.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f58:	f002 0304 	and.w	r3, r2, #4
 8005f5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f60:	2300      	movs	r3, #0
 8005f62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	d044      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005f78:	2b05      	cmp	r3, #5
 8005f7a:	d825      	bhi.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f82:	bf00      	nop
 8005f84:	08005fd1 	.word	0x08005fd1
 8005f88:	08005f9d 	.word	0x08005f9d
 8005f8c:	08005fb3 	.word	0x08005fb3
 8005f90:	08005fd1 	.word	0x08005fd1
 8005f94:	08005fd1 	.word	0x08005fd1
 8005f98:	08005fd1 	.word	0x08005fd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 ff1d 	bl	8006de4 <RCCEx_PLL2_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fb0:	e00f      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fb6:	3328      	adds	r3, #40	@ 0x28
 8005fb8:	2101      	movs	r1, #1
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f000 ffc4 	bl	8006f48 <RCCEx_PLL3_Config>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005fc6:	e004      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fce:	e000      	b.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005fd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005fda:	4b6c      	ldr	r3, [pc, #432]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005fde:	f023 0107 	bic.w	r1, r3, #7
 8005fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fe6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005fea:	4a68      	ldr	r2, [pc, #416]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ff0:	e003      	b.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006002:	f002 0320 	and.w	r3, r2, #32
 8006006:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800600a:	2300      	movs	r3, #0
 800600c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006010:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006014:	460b      	mov	r3, r1
 8006016:	4313      	orrs	r3, r2
 8006018:	d055      	beq.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800601a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006022:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006026:	d033      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8006028:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800602c:	d82c      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d02f      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006038:	d826      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800603a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800603e:	d02b      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006040:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006044:	d820      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006046:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800604a:	d012      	beq.n	8006072 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800604c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006050:	d81a      	bhi.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006052:	2b00      	cmp	r3, #0
 8006054:	d022      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8006056:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800605a:	d115      	bne.n	8006088 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800605c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006060:	3308      	adds	r3, #8
 8006062:	2100      	movs	r1, #0
 8006064:	4618      	mov	r0, r3
 8006066:	f000 febd 	bl	8006de4 <RCCEx_PLL2_Config>
 800606a:	4603      	mov	r3, r0
 800606c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006070:	e015      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006076:	3328      	adds	r3, #40	@ 0x28
 8006078:	2102      	movs	r1, #2
 800607a:	4618      	mov	r0, r3
 800607c:	f000 ff64 	bl	8006f48 <RCCEx_PLL3_Config>
 8006080:	4603      	mov	r3, r0
 8006082:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006086:	e00a      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006088:	2301      	movs	r3, #1
 800608a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800608e:	e006      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006090:	bf00      	nop
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006094:	bf00      	nop
 8006096:	e002      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10b      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b39      	ldr	r3, [pc, #228]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060b6:	4a35      	ldr	r2, [pc, #212]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b8:	430b      	orrs	r3, r1
 80060ba:	6553      	str	r3, [r2, #84]	@ 0x54
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80060c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ce:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80060d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060d6:	2300      	movs	r3, #0
 80060d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060dc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d058      	beq.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80060ee:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f2:	d033      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80060f4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80060f8:	d82c      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80060fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060fe:	d02f      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006104:	d826      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006106:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800610a:	d02b      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800610c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006110:	d820      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8006112:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006116:	d012      	beq.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800611c:	d81a      	bhi.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d022      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8006122:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006126:	d115      	bne.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800612c:	3308      	adds	r3, #8
 800612e:	2100      	movs	r1, #0
 8006130:	4618      	mov	r0, r3
 8006132:	f000 fe57 	bl	8006de4 <RCCEx_PLL2_Config>
 8006136:	4603      	mov	r3, r0
 8006138:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800613c:	e015      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800613e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006142:	3328      	adds	r3, #40	@ 0x28
 8006144:	2102      	movs	r1, #2
 8006146:	4618      	mov	r0, r3
 8006148:	f000 fefe 	bl	8006f48 <RCCEx_PLL3_Config>
 800614c:	4603      	mov	r3, r0
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006152:	e00a      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800615a:	e006      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800615c:	bf00      	nop
 800615e:	e004      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006160:	bf00      	nop
 8006162:	e002      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006164:	bf00      	nop
 8006166:	e000      	b.n	800616a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006168:	bf00      	nop
    }

    if (ret == HAL_OK)
 800616a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10e      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006172:	4b06      	ldr	r3, [pc, #24]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006176:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800617a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800617e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006182:	4a02      	ldr	r2, [pc, #8]	@ (800618c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6593      	str	r3, [r2, #88]	@ 0x58
 8006188:	e006      	b.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800618a:	bf00      	nop
 800618c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006194:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006198:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800619c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80061a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061a8:	2300      	movs	r3, #0
 80061aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061ae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061b2:	460b      	mov	r3, r1
 80061b4:	4313      	orrs	r3, r2
 80061b6:	d055      	beq.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80061b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061bc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80061c0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061c4:	d033      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80061c6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80061ca:	d82c      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d0:	d02f      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80061d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d6:	d826      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061d8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061dc:	d02b      	beq.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80061de:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80061e2:	d820      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061e8:	d012      	beq.n	8006210 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80061ea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061ee:	d81a      	bhi.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d022      	beq.n	800623a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80061f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061f8:	d115      	bne.n	8006226 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fe:	3308      	adds	r3, #8
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f000 fdee 	bl	8006de4 <RCCEx_PLL2_Config>
 8006208:	4603      	mov	r3, r0
 800620a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800620e:	e015      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006214:	3328      	adds	r3, #40	@ 0x28
 8006216:	2102      	movs	r1, #2
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fe95 	bl	8006f48 <RCCEx_PLL3_Config>
 800621e:	4603      	mov	r3, r0
 8006220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006224:	e00a      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800622c:	e006      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800622e:	bf00      	nop
 8006230:	e004      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006232:	bf00      	nop
 8006234:	e002      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006236:	bf00      	nop
 8006238:	e000      	b.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800623a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800623c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006244:	4ba1      	ldr	r3, [pc, #644]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006246:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006248:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800624c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006250:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006254:	4a9d      	ldr	r2, [pc, #628]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006256:	430b      	orrs	r3, r1
 8006258:	6593      	str	r3, [r2, #88]	@ 0x58
 800625a:	e003      	b.n	8006264 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800625c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006260:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800626c:	f002 0308 	and.w	r3, r2, #8
 8006270:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006274:	2300      	movs	r3, #0
 8006276:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800627a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800627e:	460b      	mov	r3, r1
 8006280:	4313      	orrs	r3, r2
 8006282:	d01e      	beq.n	80062c2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800628c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006290:	d10c      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006296:	3328      	adds	r3, #40	@ 0x28
 8006298:	2102      	movs	r1, #2
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fe54 	bl	8006f48 <RCCEx_PLL3_Config>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80062ac:	4b87      	ldr	r3, [pc, #540]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80062b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80062bc:	4a83      	ldr	r2, [pc, #524]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062be:	430b      	orrs	r3, r1
 80062c0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80062c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ca:	f002 0310 	and.w	r3, r2, #16
 80062ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80062d2:	2300      	movs	r3, #0
 80062d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80062d8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d01e      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062ee:	d10c      	bne.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062f4:	3328      	adds	r3, #40	@ 0x28
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fe25 	bl	8006f48 <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800630a:	4b70      	ldr	r3, [pc, #448]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006316:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800631a:	4a6c      	ldr	r2, [pc, #432]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800631c:	430b      	orrs	r3, r1
 800631e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800632c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006330:	2300      	movs	r3, #0
 8006332:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006336:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800633a:	460b      	mov	r3, r1
 800633c:	4313      	orrs	r3, r2
 800633e:	d03e      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006344:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006348:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800634c:	d022      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800634e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006352:	d81b      	bhi.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800635c:	d00b      	beq.n	8006376 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800635e:	e015      	b.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006364:	3308      	adds	r3, #8
 8006366:	2100      	movs	r1, #0
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fd3b 	bl	8006de4 <RCCEx_PLL2_Config>
 800636e:	4603      	mov	r3, r0
 8006370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006374:	e00f      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637a:	3328      	adds	r3, #40	@ 0x28
 800637c:	2102      	movs	r1, #2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 fde2 	bl	8006f48 <RCCEx_PLL3_Config>
 8006384:	4603      	mov	r3, r0
 8006386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800638a:	e004      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006392:	e000      	b.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006394:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800639e:	4b4b      	ldr	r3, [pc, #300]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063a2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80063ae:	4a47      	ldr	r2, [pc, #284]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063b0:	430b      	orrs	r3, r1
 80063b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80063b4:	e003      	b.n	80063be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80063be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80063ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063cc:	2300      	movs	r3, #0
 80063ce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80063d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80063d4:	460b      	mov	r3, r1
 80063d6:	4313      	orrs	r3, r2
 80063d8:	d03b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80063da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063e6:	d01f      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80063e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063ec:	d818      	bhi.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80063ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80063f2:	d003      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80063f4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063f8:	d007      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80063fa:	e011      	b.n	8006420 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063fc:	4b33      	ldr	r3, [pc, #204]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006400:	4a32      	ldr	r2, [pc, #200]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006402:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006406:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006408:	e00f      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800640a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800640e:	3328      	adds	r3, #40	@ 0x28
 8006410:	2101      	movs	r1, #1
 8006412:	4618      	mov	r0, r3
 8006414:	f000 fd98 	bl	8006f48 <RCCEx_PLL3_Config>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800641e:	e004      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006426:	e000      	b.n	800642a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006428:	bf00      	nop
    }

    if (ret == HAL_OK)
 800642a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006432:	4b26      	ldr	r3, [pc, #152]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006436:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006442:	4a22      	ldr	r2, [pc, #136]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006444:	430b      	orrs	r3, r1
 8006446:	6553      	str	r3, [r2, #84]	@ 0x54
 8006448:	e003      	b.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800644a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800644e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800645e:	673b      	str	r3, [r7, #112]	@ 0x70
 8006460:	2300      	movs	r3, #0
 8006462:	677b      	str	r3, [r7, #116]	@ 0x74
 8006464:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006468:	460b      	mov	r3, r1
 800646a:	4313      	orrs	r3, r2
 800646c:	d034      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800646e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006472:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006474:	2b00      	cmp	r3, #0
 8006476:	d003      	beq.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647c:	d007      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800647e:	e011      	b.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006480:	4b12      	ldr	r3, [pc, #72]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	4a11      	ldr	r2, [pc, #68]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006486:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800648a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800648c:	e00e      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800648e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006492:	3308      	adds	r3, #8
 8006494:	2102      	movs	r1, #2
 8006496:	4618      	mov	r0, r3
 8006498:	f000 fca4 	bl	8006de4 <RCCEx_PLL2_Config>
 800649c:	4603      	mov	r3, r0
 800649e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80064a2:	e003      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d10d      	bne.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80064b4:	4b05      	ldr	r3, [pc, #20]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80064b8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80064bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064c2:	4a02      	ldr	r2, [pc, #8]	@ (80064cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c4:	430b      	orrs	r3, r1
 80064c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80064c8:	e006      	b.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80064ca:	bf00      	nop
 80064cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80064d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80064e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80064e6:	2300      	movs	r3, #0
 80064e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80064ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80064ee:	460b      	mov	r3, r1
 80064f0:	4313      	orrs	r3, r2
 80064f2:	d00c      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064f8:	3328      	adds	r3, #40	@ 0x28
 80064fa:	2102      	movs	r1, #2
 80064fc:	4618      	mov	r0, r3
 80064fe:	f000 fd23 	bl	8006f48 <RCCEx_PLL3_Config>
 8006502:	4603      	mov	r3, r0
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800650e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006516:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800651a:	663b      	str	r3, [r7, #96]	@ 0x60
 800651c:	2300      	movs	r3, #0
 800651e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006520:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006524:	460b      	mov	r3, r1
 8006526:	4313      	orrs	r3, r2
 8006528:	d038      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800652a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800652e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006532:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006536:	d018      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006538:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800653c:	d811      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800653e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006542:	d014      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006544:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006548:	d80b      	bhi.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d011      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800654e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006552:	d106      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006554:	4bc3      	ldr	r3, [pc, #780]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006558:	4ac2      	ldr	r2, [pc, #776]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800655a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800655e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006560:	e008      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006568:	e004      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006578:	2b00      	cmp	r3, #0
 800657a:	d10b      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800657c:	4bb9      	ldr	r3, [pc, #740]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800657e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006580:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800658c:	4ab5      	ldr	r2, [pc, #724]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800658e:	430b      	orrs	r3, r1
 8006590:	6553      	str	r3, [r2, #84]	@ 0x54
 8006592:	e003      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80065a8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065aa:	2300      	movs	r3, #0
 80065ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d009      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80065b8:	4baa      	ldr	r3, [pc, #680]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065bc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80065c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065c6:	4aa7      	ldr	r2, [pc, #668]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065c8:	430b      	orrs	r3, r1
 80065ca:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80065cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065d4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80065d8:	653b      	str	r3, [r7, #80]	@ 0x50
 80065da:	2300      	movs	r3, #0
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80065de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80065e2:	460b      	mov	r3, r1
 80065e4:	4313      	orrs	r3, r2
 80065e6:	d00a      	beq.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80065e8:	4b9e      	ldr	r3, [pc, #632]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065ea:	691b      	ldr	r3, [r3, #16]
 80065ec:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80065f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80065f8:	4a9a      	ldr	r2, [pc, #616]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80065fa:	430b      	orrs	r3, r1
 80065fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80065fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006606:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800660a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800660c:	2300      	movs	r3, #0
 800660e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006610:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006614:	460b      	mov	r3, r1
 8006616:	4313      	orrs	r3, r2
 8006618:	d009      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800661a:	4b92      	ldr	r3, [pc, #584]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006626:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006628:	4a8e      	ldr	r2, [pc, #568]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800662a:	430b      	orrs	r3, r1
 800662c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800662e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006636:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800663a:	643b      	str	r3, [r7, #64]	@ 0x40
 800663c:	2300      	movs	r3, #0
 800663e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006640:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006644:	460b      	mov	r3, r1
 8006646:	4313      	orrs	r3, r2
 8006648:	d00e      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800664a:	4b86      	ldr	r3, [pc, #536]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	4a85      	ldr	r2, [pc, #532]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006650:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006654:	6113      	str	r3, [r2, #16]
 8006656:	4b83      	ldr	r3, [pc, #524]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006658:	6919      	ldr	r1, [r3, #16]
 800665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800665e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006662:	4a80      	ldr	r2, [pc, #512]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006664:	430b      	orrs	r3, r1
 8006666:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800666c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006670:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006674:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006676:	2300      	movs	r3, #0
 8006678:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800667a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800667e:	460b      	mov	r3, r1
 8006680:	4313      	orrs	r3, r2
 8006682:	d009      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006684:	4b77      	ldr	r3, [pc, #476]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006688:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800668c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006692:	4a74      	ldr	r2, [pc, #464]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006694:	430b      	orrs	r3, r1
 8006696:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800669c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80066a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066a6:	2300      	movs	r3, #0
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80066ae:	460b      	mov	r3, r1
 80066b0:	4313      	orrs	r3, r2
 80066b2:	d00a      	beq.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80066b4:	4b6b      	ldr	r3, [pc, #428]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80066bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80066c4:	4a67      	ldr	r2, [pc, #412]	@ (8006864 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066c6:	430b      	orrs	r3, r1
 80066c8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80066ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	2100      	movs	r1, #0
 80066d4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80066e0:	460b      	mov	r3, r1
 80066e2:	4313      	orrs	r3, r2
 80066e4:	d011      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	3308      	adds	r3, #8
 80066ec:	2100      	movs	r1, #0
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 fb78 	bl	8006de4 <RCCEx_PLL2_Config>
 80066f4:	4603      	mov	r3, r0
 80066f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80066fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800670a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006712:	2100      	movs	r1, #0
 8006714:	6239      	str	r1, [r7, #32]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	627b      	str	r3, [r7, #36]	@ 0x24
 800671c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006720:	460b      	mov	r3, r1
 8006722:	4313      	orrs	r3, r2
 8006724:	d011      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800672a:	3308      	adds	r3, #8
 800672c:	2101      	movs	r1, #1
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fb58 	bl	8006de4 <RCCEx_PLL2_Config>
 8006734:	4603      	mov	r3, r0
 8006736:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800673a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800673e:	2b00      	cmp	r3, #0
 8006740:	d003      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006742:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006746:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	2100      	movs	r1, #0
 8006754:	61b9      	str	r1, [r7, #24]
 8006756:	f003 0304 	and.w	r3, r3, #4
 800675a:	61fb      	str	r3, [r7, #28]
 800675c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006760:	460b      	mov	r3, r1
 8006762:	4313      	orrs	r3, r2
 8006764:	d011      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676a:	3308      	adds	r3, #8
 800676c:	2102      	movs	r1, #2
 800676e:	4618      	mov	r0, r3
 8006770:	f000 fb38 	bl	8006de4 <RCCEx_PLL2_Config>
 8006774:	4603      	mov	r3, r0
 8006776:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800677a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800678a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800678e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006792:	2100      	movs	r1, #0
 8006794:	6139      	str	r1, [r7, #16]
 8006796:	f003 0308 	and.w	r3, r3, #8
 800679a:	617b      	str	r3, [r7, #20]
 800679c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80067a0:	460b      	mov	r3, r1
 80067a2:	4313      	orrs	r3, r2
 80067a4:	d011      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	3328      	adds	r3, #40	@ 0x28
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 fbca 	bl	8006f48 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80067ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d003      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80067ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	2100      	movs	r1, #0
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	f003 0310 	and.w	r3, r3, #16
 80067da:	60fb      	str	r3, [r7, #12]
 80067dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80067e0:	460b      	mov	r3, r1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	d011      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80067e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ea:	3328      	adds	r3, #40	@ 0x28
 80067ec:	2101      	movs	r1, #1
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbaa 	bl	8006f48 <RCCEx_PLL3_Config>
 80067f4:	4603      	mov	r3, r0
 80067f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006806:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800680a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800680e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006812:	2100      	movs	r1, #0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	f003 0320 	and.w	r3, r3, #32
 800681a:	607b      	str	r3, [r7, #4]
 800681c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006820:	460b      	mov	r3, r1
 8006822:	4313      	orrs	r3, r2
 8006824:	d011      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682a:	3328      	adds	r3, #40	@ 0x28
 800682c:	2102      	movs	r1, #2
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fb8a 	bl	8006f48 <RCCEx_PLL3_Config>
 8006834:	4603      	mov	r3, r0
 8006836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800683a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006846:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800684a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006852:	2300      	movs	r3, #0
 8006854:	e000      	b.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
}
 8006858:	4618      	mov	r0, r3
 800685a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800685e:	46bd      	mov	sp, r7
 8006860:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006864:	58024400 	.word	0x58024400

08006868 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800686c:	f7fe fd96 	bl	800539c <HAL_RCC_GetHCLKFreq>
 8006870:	4602      	mov	r2, r0
 8006872:	4b06      	ldr	r3, [pc, #24]	@ (800688c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006874:	6a1b      	ldr	r3, [r3, #32]
 8006876:	091b      	lsrs	r3, r3, #4
 8006878:	f003 0307 	and.w	r3, r3, #7
 800687c:	4904      	ldr	r1, [pc, #16]	@ (8006890 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800687e:	5ccb      	ldrb	r3, [r1, r3]
 8006880:	f003 031f 	and.w	r3, r3, #31
 8006884:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006888:	4618      	mov	r0, r3
 800688a:	bd80      	pop	{r7, pc}
 800688c:	58024400 	.word	0x58024400
 8006890:	08009178 	.word	0x08009178

08006894 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006894:	b480      	push	{r7}
 8006896:	b089      	sub	sp, #36	@ 0x24
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800689c:	4ba1      	ldr	r3, [pc, #644]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800689e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80068a6:	4b9f      	ldr	r3, [pc, #636]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	0b1b      	lsrs	r3, r3, #12
 80068ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80068b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80068b2:	4b9c      	ldr	r3, [pc, #624]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	091b      	lsrs	r3, r3, #4
 80068b8:	f003 0301 	and.w	r3, r3, #1
 80068bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80068be:	4b99      	ldr	r3, [pc, #612]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068c2:	08db      	lsrs	r3, r3, #3
 80068c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068c8:	693a      	ldr	r2, [r7, #16]
 80068ca:	fb02 f303 	mul.w	r3, r2, r3
 80068ce:	ee07 3a90 	vmov	s15, r3
 80068d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	f000 8111 	beq.w	8006b04 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	f000 8083 	beq.w	80069f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	f200 80a1 	bhi.w	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d003      	beq.n	8006900 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d056      	beq.n	80069ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80068fe:	e099      	b.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006900:	4b88      	ldr	r3, [pc, #544]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0320 	and.w	r3, r3, #32
 8006908:	2b00      	cmp	r3, #0
 800690a:	d02d      	beq.n	8006968 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800690c:	4b85      	ldr	r3, [pc, #532]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	08db      	lsrs	r3, r3, #3
 8006912:	f003 0303 	and.w	r3, r3, #3
 8006916:	4a84      	ldr	r2, [pc, #528]	@ (8006b28 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006918:	fa22 f303 	lsr.w	r3, r2, r3
 800691c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	ee07 3a90 	vmov	s15, r3
 8006924:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	ee07 3a90 	vmov	s15, r3
 800692e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006932:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006936:	4b7b      	ldr	r3, [pc, #492]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800693a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693e:	ee07 3a90 	vmov	s15, r3
 8006942:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006946:	ed97 6a03 	vldr	s12, [r7, #12]
 800694a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800694e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006952:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006956:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800695a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800695e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006962:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006966:	e087      	b.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	ee07 3a90 	vmov	s15, r3
 800696e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006972:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006b30 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006976:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800697a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800697c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800697e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006982:	ee07 3a90 	vmov	s15, r3
 8006986:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800698a:	ed97 6a03 	vldr	s12, [r7, #12]
 800698e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006992:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006996:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800699a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800699e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069aa:	e065      	b.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	ee07 3a90 	vmov	s15, r3
 80069b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069b6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80069ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069be:	4b59      	ldr	r3, [pc, #356]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069c6:	ee07 3a90 	vmov	s15, r3
 80069ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80069d2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80069ee:	e043      	b.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	ee07 3a90 	vmov	s15, r3
 80069f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069fa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006b38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80069fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a02:	4b48      	ldr	r3, [pc, #288]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a0a:	ee07 3a90 	vmov	s15, r3
 8006a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a16:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a32:	e021      	b.n	8006a78 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	ee07 3a90 	vmov	s15, r3
 8006a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a3e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006b34 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a46:	4b37      	ldr	r3, [pc, #220]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a4e:	ee07 3a90 	vmov	s15, r3
 8006a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a5a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006b2c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a76:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006a78:	4b2a      	ldr	r3, [pc, #168]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a7c:	0a5b      	lsrs	r3, r3, #9
 8006a7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a82:	ee07 3a90 	vmov	s15, r3
 8006a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a9e:	ee17 2a90 	vmov	r2, s15
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aaa:	0c1b      	lsrs	r3, r3, #16
 8006aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ab0:	ee07 3a90 	vmov	s15, r3
 8006ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006acc:	ee17 2a90 	vmov	r2, s15
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006ad4:	4b13      	ldr	r3, [pc, #76]	@ (8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	0e1b      	lsrs	r3, r3, #24
 8006ada:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006aea:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006aee:	edd7 6a07 	vldr	s13, [r7, #28]
 8006af2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006af6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006afa:	ee17 2a90 	vmov	r2, s15
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006b02:	e008      	b.n	8006b16 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	609a      	str	r2, [r3, #8]
}
 8006b16:	bf00      	nop
 8006b18:	3724      	adds	r7, #36	@ 0x24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop
 8006b24:	58024400 	.word	0x58024400
 8006b28:	03d09000 	.word	0x03d09000
 8006b2c:	46000000 	.word	0x46000000
 8006b30:	4c742400 	.word	0x4c742400
 8006b34:	4a742400 	.word	0x4a742400
 8006b38:	4bbebc20 	.word	0x4bbebc20

08006b3c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b089      	sub	sp, #36	@ 0x24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b44:	4ba1      	ldr	r3, [pc, #644]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006b4e:	4b9f      	ldr	r3, [pc, #636]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	0d1b      	lsrs	r3, r3, #20
 8006b54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b58:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006b5a:	4b9c      	ldr	r3, [pc, #624]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	f003 0301 	and.w	r3, r3, #1
 8006b64:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006b66:	4b99      	ldr	r3, [pc, #612]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b6a:	08db      	lsrs	r3, r3, #3
 8006b6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	f000 8111 	beq.w	8006dac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	f000 8083 	beq.w	8006c98 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	f200 80a1 	bhi.w	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d003      	beq.n	8006ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006ba0:	69bb      	ldr	r3, [r7, #24]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d056      	beq.n	8006c54 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006ba6:	e099      	b.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ba8:	4b88      	ldr	r3, [pc, #544]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0320 	and.w	r3, r3, #32
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02d      	beq.n	8006c10 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bb4:	4b85      	ldr	r3, [pc, #532]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	08db      	lsrs	r3, r3, #3
 8006bba:	f003 0303 	and.w	r3, r3, #3
 8006bbe:	4a84      	ldr	r2, [pc, #528]	@ (8006dd0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8006bc4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	ee07 3a90 	vmov	s15, r3
 8006bcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bde:	4b7b      	ldr	r3, [pc, #492]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006be2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006bf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006c0e:	e087      	b.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006dd8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006c1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c22:	4b6a      	ldr	r3, [pc, #424]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2a:	ee07 3a90 	vmov	s15, r3
 8006c2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c52:	e065      	b.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	ee07 3a90 	vmov	s15, r3
 8006c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c66:	4b59      	ldr	r3, [pc, #356]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6e:	ee07 3a90 	vmov	s15, r3
 8006c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c96:	e043      	b.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	ee07 3a90 	vmov	s15, r3
 8006c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ca2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006de0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006caa:	4b48      	ldr	r3, [pc, #288]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cb2:	ee07 3a90 	vmov	s15, r3
 8006cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cbe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cda:	e021      	b.n	8006d20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	ee07 3a90 	vmov	s15, r3
 8006ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ce6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ddc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cee:	4b37      	ldr	r3, [pc, #220]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006d20:	4b2a      	ldr	r3, [pc, #168]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d24:	0a5b      	lsrs	r3, r3, #9
 8006d26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d2a:	ee07 3a90 	vmov	s15, r3
 8006d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d46:	ee17 2a90 	vmov	r2, s15
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d52:	0c1b      	lsrs	r3, r3, #16
 8006d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d58:	ee07 3a90 	vmov	s15, r3
 8006d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d74:	ee17 2a90 	vmov	r2, s15
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006d7c:	4b13      	ldr	r3, [pc, #76]	@ (8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d80:	0e1b      	lsrs	r3, r3, #24
 8006d82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006da2:	ee17 2a90 	vmov	r2, s15
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006daa:	e008      	b.n	8006dbe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	609a      	str	r2, [r3, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	3724      	adds	r7, #36	@ 0x24
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr
 8006dca:	bf00      	nop
 8006dcc:	58024400 	.word	0x58024400
 8006dd0:	03d09000 	.word	0x03d09000
 8006dd4:	46000000 	.word	0x46000000
 8006dd8:	4c742400 	.word	0x4c742400
 8006ddc:	4a742400 	.word	0x4a742400
 8006de0:	4bbebc20 	.word	0x4bbebc20

08006de4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006df2:	4b53      	ldr	r3, [pc, #332]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df6:	f003 0303 	and.w	r3, r3, #3
 8006dfa:	2b03      	cmp	r3, #3
 8006dfc:	d101      	bne.n	8006e02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e099      	b.n	8006f36 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006e02:	4b4f      	ldr	r3, [pc, #316]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a4e      	ldr	r2, [pc, #312]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e08:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e0e:	f7fa f95b 	bl	80010c8 <HAL_GetTick>
 8006e12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e14:	e008      	b.n	8006e28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006e16:	f7fa f957 	bl	80010c8 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	2b02      	cmp	r3, #2
 8006e22:	d901      	bls.n	8006e28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e086      	b.n	8006f36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006e28:	4b45      	ldr	r3, [pc, #276]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1f0      	bne.n	8006e16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006e34:	4b42      	ldr	r3, [pc, #264]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e38:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	031b      	lsls	r3, r3, #12
 8006e42:	493f      	ldr	r1, [pc, #252]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	628b      	str	r3, [r1, #40]	@ 0x28
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	025b      	lsls	r3, r3, #9
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	431a      	orrs	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	3b01      	subs	r3, #1
 8006e64:	041b      	lsls	r3, r3, #16
 8006e66:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006e6a:	431a      	orrs	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	691b      	ldr	r3, [r3, #16]
 8006e70:	3b01      	subs	r3, #1
 8006e72:	061b      	lsls	r3, r3, #24
 8006e74:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006e78:	4931      	ldr	r1, [pc, #196]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006e7e:	4b30      	ldr	r3, [pc, #192]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e82:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	492d      	ldr	r1, [pc, #180]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006e90:	4b2b      	ldr	r3, [pc, #172]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e94:	f023 0220 	bic.w	r2, r3, #32
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	699b      	ldr	r3, [r3, #24]
 8006e9c:	4928      	ldr	r1, [pc, #160]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006ea2:	4b27      	ldr	r3, [pc, #156]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea6:	4a26      	ldr	r2, [pc, #152]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ea8:	f023 0310 	bic.w	r3, r3, #16
 8006eac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006eae:	4b24      	ldr	r3, [pc, #144]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006eb2:	4b24      	ldr	r3, [pc, #144]	@ (8006f44 <RCCEx_PLL2_Config+0x160>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	69d2      	ldr	r2, [r2, #28]
 8006eba:	00d2      	lsls	r2, r2, #3
 8006ebc:	4920      	ldr	r1, [pc, #128]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ec2:	4b1f      	ldr	r3, [pc, #124]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	f043 0310 	orr.w	r3, r3, #16
 8006ecc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d106      	bne.n	8006ee2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ed4:	4b1a      	ldr	r3, [pc, #104]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ed8:	4a19      	ldr	r2, [pc, #100]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006eda:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006ede:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ee0:	e00f      	b.n	8006f02 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d106      	bne.n	8006ef6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006ee8:	4b15      	ldr	r3, [pc, #84]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a14      	ldr	r2, [pc, #80]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006ef2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ef4:	e005      	b.n	8006f02 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ef6:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efa:	4a11      	ldr	r2, [pc, #68]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006efc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006f00:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006f02:	4b0f      	ldr	r3, [pc, #60]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a0e      	ldr	r2, [pc, #56]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f0e:	f7fa f8db 	bl	80010c8 <HAL_GetTick>
 8006f12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f14:	e008      	b.n	8006f28 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f16:	f7fa f8d7 	bl	80010c8 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e006      	b.n	8006f36 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006f28:	4b05      	ldr	r3, [pc, #20]	@ (8006f40 <RCCEx_PLL2_Config+0x15c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3710      	adds	r7, #16
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	58024400 	.word	0x58024400
 8006f44:	ffff0007 	.word	0xffff0007

08006f48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b084      	sub	sp, #16
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
 8006f50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f52:	2300      	movs	r3, #0
 8006f54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f56:	4b53      	ldr	r3, [pc, #332]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	2b03      	cmp	r3, #3
 8006f60:	d101      	bne.n	8006f66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e099      	b.n	800709a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006f66:	4b4f      	ldr	r3, [pc, #316]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a4e      	ldr	r2, [pc, #312]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006f6c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f72:	f7fa f8a9 	bl	80010c8 <HAL_GetTick>
 8006f76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f78:	e008      	b.n	8006f8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006f7a:	f7fa f8a5 	bl	80010c8 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	2b02      	cmp	r3, #2
 8006f86:	d901      	bls.n	8006f8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f88:	2303      	movs	r3, #3
 8006f8a:	e086      	b.n	800709a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006f8c:	4b45      	ldr	r3, [pc, #276]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1f0      	bne.n	8006f7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006f98:	4b42      	ldr	r3, [pc, #264]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f9c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	051b      	lsls	r3, r3, #20
 8006fa6:	493f      	ldr	r1, [pc, #252]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	628b      	str	r3, [r1, #40]	@ 0x28
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	689b      	ldr	r3, [r3, #8]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	025b      	lsls	r3, r3, #9
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	691b      	ldr	r3, [r3, #16]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	061b      	lsls	r3, r3, #24
 8006fd8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fdc:	4931      	ldr	r1, [pc, #196]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006fe2:	4b30      	ldr	r3, [pc, #192]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	492d      	ldr	r1, [pc, #180]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006ff0:	4313      	orrs	r3, r2
 8006ff2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006ff4:	4b2b      	ldr	r3, [pc, #172]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	699b      	ldr	r3, [r3, #24]
 8007000:	4928      	ldr	r1, [pc, #160]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007002:	4313      	orrs	r3, r2
 8007004:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007006:	4b27      	ldr	r3, [pc, #156]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700a:	4a26      	ldr	r2, [pc, #152]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800700c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007010:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007012:	4b24      	ldr	r3, [pc, #144]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007014:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007016:	4b24      	ldr	r3, [pc, #144]	@ (80070a8 <RCCEx_PLL3_Config+0x160>)
 8007018:	4013      	ands	r3, r2
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	69d2      	ldr	r2, [r2, #28]
 800701e:	00d2      	lsls	r2, r2, #3
 8007020:	4920      	ldr	r1, [pc, #128]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007022:	4313      	orrs	r3, r2
 8007024:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007026:	4b1f      	ldr	r3, [pc, #124]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702a:	4a1e      	ldr	r2, [pc, #120]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800702c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007030:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d106      	bne.n	8007046 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007038:	4b1a      	ldr	r3, [pc, #104]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800703a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703c:	4a19      	ldr	r2, [pc, #100]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800703e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007042:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007044:	e00f      	b.n	8007066 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d106      	bne.n	800705a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800704c:	4b15      	ldr	r3, [pc, #84]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800704e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007050:	4a14      	ldr	r2, [pc, #80]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007052:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007056:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007058:	e005      	b.n	8007066 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800705a:	4b12      	ldr	r3, [pc, #72]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800705c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705e:	4a11      	ldr	r2, [pc, #68]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007060:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007064:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007066:	4b0f      	ldr	r3, [pc, #60]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a0e      	ldr	r2, [pc, #56]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800706c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007070:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007072:	f7fa f829 	bl	80010c8 <HAL_GetTick>
 8007076:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007078:	e008      	b.n	800708c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800707a:	f7fa f825 	bl	80010c8 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e006      	b.n	800709a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800708c:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <RCCEx_PLL3_Config+0x15c>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007098:	7bfb      	ldrb	r3, [r7, #15]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	58024400 	.word	0x58024400
 80070a8:	ffff0007 	.word	0xffff0007

080070ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e042      	b.n	8007144 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d106      	bne.n	80070d6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f7f9 fd9d 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2224      	movs	r2, #36	@ 0x24
 80070da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	681a      	ldr	r2, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f022 0201 	bic.w	r2, r2, #1
 80070ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d002      	beq.n	80070fc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f001 f9fc 	bl	80084f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 fc91 	bl	8007a24 <UART_SetConfig>
 8007102:	4603      	mov	r3, r0
 8007104:	2b01      	cmp	r3, #1
 8007106:	d101      	bne.n	800710c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	e01b      	b.n	8007144 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800711a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	689a      	ldr	r2, [r3, #8]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800712a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	681a      	ldr	r2, [r3, #0]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f042 0201 	orr.w	r2, r2, #1
 800713a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fa7b 	bl	8008638 <UART_CheckIdleState>
 8007142:	4603      	mov	r3, r0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b08a      	sub	sp, #40	@ 0x28
 8007150:	af00      	add	r7, sp, #0
 8007152:	60f8      	str	r0, [r7, #12]
 8007154:	60b9      	str	r1, [r7, #8]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007160:	2b20      	cmp	r3, #32
 8007162:	d167      	bne.n	8007234 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_UART_Transmit_DMA+0x24>
 800716a:	88fb      	ldrh	r3, [r7, #6]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d101      	bne.n	8007174 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e060      	b.n	8007236 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	68ba      	ldr	r2, [r7, #8]
 8007178:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	88fa      	ldrh	r2, [r7, #6]
 800717e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	88fa      	ldrh	r2, [r7, #6]
 8007186:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2221      	movs	r2, #33	@ 0x21
 8007196:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d028      	beq.n	80071f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071a6:	4a26      	ldr	r2, [pc, #152]	@ (8007240 <HAL_UART_Transmit_DMA+0xf4>)
 80071a8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071ae:	4a25      	ldr	r2, [pc, #148]	@ (8007244 <HAL_UART_Transmit_DMA+0xf8>)
 80071b0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071b6:	4a24      	ldr	r2, [pc, #144]	@ (8007248 <HAL_UART_Transmit_DMA+0xfc>)
 80071b8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071be:	2200      	movs	r2, #0
 80071c0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071ca:	4619      	mov	r1, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3328      	adds	r3, #40	@ 0x28
 80071d2:	461a      	mov	r2, r3
 80071d4:	88fb      	ldrh	r3, [r7, #6]
 80071d6:	f7fa fc73 	bl	8001ac0 <HAL_DMA_Start_IT>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d009      	beq.n	80071f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2210      	movs	r2, #16
 80071e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2220      	movs	r2, #32
 80071ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80071f0:	2301      	movs	r3, #1
 80071f2:	e020      	b.n	8007236 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	2240      	movs	r2, #64	@ 0x40
 80071fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3308      	adds	r3, #8
 8007202:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	e853 3f00 	ldrex	r3, [r3]
 800720a:	613b      	str	r3, [r7, #16]
   return(result);
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007212:	627b      	str	r3, [r7, #36]	@ 0x24
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	3308      	adds	r3, #8
 800721a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800721c:	623a      	str	r2, [r7, #32]
 800721e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007220:	69f9      	ldr	r1, [r7, #28]
 8007222:	6a3a      	ldr	r2, [r7, #32]
 8007224:	e841 2300 	strex	r3, r2, [r1]
 8007228:	61bb      	str	r3, [r7, #24]
   return(result);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d1e5      	bne.n	80071fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007230:	2300      	movs	r3, #0
 8007232:	e000      	b.n	8007236 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007234:	2302      	movs	r3, #2
  }
}
 8007236:	4618      	mov	r0, r3
 8007238:	3728      	adds	r7, #40	@ 0x28
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	08008b05 	.word	0x08008b05
 8007244:	08008b9b 	.word	0x08008b9b
 8007248:	08008d1d 	.word	0x08008d1d

0800724c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b0ba      	sub	sp, #232	@ 0xe8
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	69db      	ldr	r3, [r3, #28]
 800725a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007272:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007276:	f640 030f 	movw	r3, #2063	@ 0x80f
 800727a:	4013      	ands	r3, r2
 800727c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007284:	2b00      	cmp	r3, #0
 8007286:	d11b      	bne.n	80072c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800728c:	f003 0320 	and.w	r3, r3, #32
 8007290:	2b00      	cmp	r3, #0
 8007292:	d015      	beq.n	80072c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007298:	f003 0320 	and.w	r3, r3, #32
 800729c:	2b00      	cmp	r3, #0
 800729e:	d105      	bne.n	80072ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80072a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	f000 8377 	beq.w	80079a4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	4798      	blx	r3
      }
      return;
 80072be:	e371      	b.n	80079a4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80072c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 8123 	beq.w	8007510 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80072ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80072ce:	4b8d      	ldr	r3, [pc, #564]	@ (8007504 <HAL_UART_IRQHandler+0x2b8>)
 80072d0:	4013      	ands	r3, r2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80072d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80072da:	4b8b      	ldr	r3, [pc, #556]	@ (8007508 <HAL_UART_IRQHandler+0x2bc>)
 80072dc:	4013      	ands	r3, r2
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f000 8116 	beq.w	8007510 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d011      	beq.n	8007314 <HAL_UART_IRQHandler+0xc8>
 80072f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00b      	beq.n	8007314 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2201      	movs	r2, #1
 8007302:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800730a:	f043 0201 	orr.w	r2, r3, #1
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007318:	f003 0302 	and.w	r3, r3, #2
 800731c:	2b00      	cmp	r3, #0
 800731e:	d011      	beq.n	8007344 <HAL_UART_IRQHandler+0xf8>
 8007320:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007324:	f003 0301 	and.w	r3, r3, #1
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00b      	beq.n	8007344 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2202      	movs	r2, #2
 8007332:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800733a:	f043 0204 	orr.w	r2, r3, #4
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007348:	f003 0304 	and.w	r3, r3, #4
 800734c:	2b00      	cmp	r3, #0
 800734e:	d011      	beq.n	8007374 <HAL_UART_IRQHandler+0x128>
 8007350:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00b      	beq.n	8007374 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	2204      	movs	r2, #4
 8007362:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800736a:	f043 0202 	orr.w	r2, r3, #2
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007378:	f003 0308 	and.w	r3, r3, #8
 800737c:	2b00      	cmp	r3, #0
 800737e:	d017      	beq.n	80073b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d105      	bne.n	8007398 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800738c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007390:	4b5c      	ldr	r3, [pc, #368]	@ (8007504 <HAL_UART_IRQHandler+0x2b8>)
 8007392:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007394:	2b00      	cmp	r3, #0
 8007396:	d00b      	beq.n	80073b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	2208      	movs	r2, #8
 800739e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073a6:	f043 0208 	orr.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80073b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d012      	beq.n	80073e2 <HAL_UART_IRQHandler+0x196>
 80073bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00c      	beq.n	80073e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80073d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073d8:	f043 0220 	orr.w	r2, r3, #32
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 82dd 	beq.w	80079a8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80073ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073f2:	f003 0320 	and.w	r3, r3, #32
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d013      	beq.n	8007422 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80073fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d105      	bne.n	8007412 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800740a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800740e:	2b00      	cmp	r3, #0
 8007410:	d007      	beq.n	8007422 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007416:	2b00      	cmp	r3, #0
 8007418:	d003      	beq.n	8007422 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007428:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007436:	2b40      	cmp	r3, #64	@ 0x40
 8007438:	d005      	beq.n	8007446 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800743a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800743e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007442:	2b00      	cmp	r3, #0
 8007444:	d054      	beq.n	80074f0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f001 faf6 	bl	8008a38 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007456:	2b40      	cmp	r3, #64	@ 0x40
 8007458:	d146      	bne.n	80074e8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	3308      	adds	r3, #8
 8007460:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007468:	e853 3f00 	ldrex	r3, [r3]
 800746c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007470:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007474:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007478:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007486:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800748a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007496:	e841 2300 	strex	r3, r2, [r1]
 800749a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800749e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1d9      	bne.n	800745a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d017      	beq.n	80074e0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074b6:	4a15      	ldr	r2, [pc, #84]	@ (800750c <HAL_UART_IRQHandler+0x2c0>)
 80074b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074c0:	4618      	mov	r0, r3
 80074c2:	f7fb f885 	bl	80025d0 <HAL_DMA_Abort_IT>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d019      	beq.n	8007500 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80074da:	4610      	mov	r0, r2
 80074dc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074de:	e00f      	b.n	8007500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fa95 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074e6:	e00b      	b.n	8007500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 fa91 	bl	8007a10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80074ee:	e007      	b.n	8007500 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa8d 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80074fe:	e253      	b.n	80079a8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007500:	bf00      	nop
    return;
 8007502:	e251      	b.n	80079a8 <HAL_UART_IRQHandler+0x75c>
 8007504:	10000001 	.word	0x10000001
 8007508:	04000120 	.word	0x04000120
 800750c:	08008d9d 	.word	0x08008d9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007514:	2b01      	cmp	r3, #1
 8007516:	f040 81e7 	bne.w	80078e8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800751a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800751e:	f003 0310 	and.w	r3, r3, #16
 8007522:	2b00      	cmp	r3, #0
 8007524:	f000 81e0 	beq.w	80078e8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007528:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800752c:	f003 0310 	and.w	r3, r3, #16
 8007530:	2b00      	cmp	r3, #0
 8007532:	f000 81d9 	beq.w	80078e8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2210      	movs	r2, #16
 800753c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007548:	2b40      	cmp	r3, #64	@ 0x40
 800754a:	f040 8151 	bne.w	80077f0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a96      	ldr	r2, [pc, #600]	@ (80077b0 <HAL_UART_IRQHandler+0x564>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d068      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a93      	ldr	r2, [pc, #588]	@ (80077b4 <HAL_UART_IRQHandler+0x568>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d061      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a91      	ldr	r2, [pc, #580]	@ (80077b8 <HAL_UART_IRQHandler+0x56c>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d05a      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a8e      	ldr	r2, [pc, #568]	@ (80077bc <HAL_UART_IRQHandler+0x570>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d053      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a8c      	ldr	r2, [pc, #560]	@ (80077c0 <HAL_UART_IRQHandler+0x574>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d04c      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	4a89      	ldr	r2, [pc, #548]	@ (80077c4 <HAL_UART_IRQHandler+0x578>)
 800759e:	4293      	cmp	r3, r2
 80075a0:	d045      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a87      	ldr	r2, [pc, #540]	@ (80077c8 <HAL_UART_IRQHandler+0x57c>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d03e      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a84      	ldr	r2, [pc, #528]	@ (80077cc <HAL_UART_IRQHandler+0x580>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d037      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a82      	ldr	r2, [pc, #520]	@ (80077d0 <HAL_UART_IRQHandler+0x584>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d030      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a7f      	ldr	r2, [pc, #508]	@ (80077d4 <HAL_UART_IRQHandler+0x588>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d029      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a7d      	ldr	r2, [pc, #500]	@ (80077d8 <HAL_UART_IRQHandler+0x58c>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d022      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a7a      	ldr	r2, [pc, #488]	@ (80077dc <HAL_UART_IRQHandler+0x590>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d01b      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a78      	ldr	r2, [pc, #480]	@ (80077e0 <HAL_UART_IRQHandler+0x594>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d014      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	4a75      	ldr	r2, [pc, #468]	@ (80077e4 <HAL_UART_IRQHandler+0x598>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d00d      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a73      	ldr	r2, [pc, #460]	@ (80077e8 <HAL_UART_IRQHandler+0x59c>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d006      	beq.n	800762e <HAL_UART_IRQHandler+0x3e2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a70      	ldr	r2, [pc, #448]	@ (80077ec <HAL_UART_IRQHandler+0x5a0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d106      	bne.n	800763c <HAL_UART_IRQHandler+0x3f0>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	b29b      	uxth	r3, r3
 800763a:	e005      	b.n	8007648 <HAL_UART_IRQHandler+0x3fc>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	b29b      	uxth	r3, r3
 8007648:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800764c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 81ab 	beq.w	80079ac <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800765c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007660:	429a      	cmp	r2, r3
 8007662:	f080 81a3 	bcs.w	80079ac <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800766c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800767c:	f000 8087 	beq.w	800778e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007688:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800768c:	e853 3f00 	ldrex	r3, [r3]
 8007690:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007694:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007698:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800769c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	461a      	mov	r2, r3
 80076a6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80076aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80076ae:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ba:	e841 2300 	strex	r3, r2, [r1]
 80076be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1da      	bne.n	8007680 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	3308      	adds	r3, #8
 80076d0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80076d4:	e853 3f00 	ldrex	r3, [r3]
 80076d8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80076da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80076dc:	f023 0301 	bic.w	r3, r3, #1
 80076e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	3308      	adds	r3, #8
 80076ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80076ee:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80076f2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80076f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007700:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007702:	2b00      	cmp	r3, #0
 8007704:	d1e1      	bne.n	80076ca <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3308      	adds	r3, #8
 800770c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007718:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800771c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800772a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800772c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007730:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007732:	e841 2300 	strex	r3, r2, [r1]
 8007736:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007738:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800773a:	2b00      	cmp	r3, #0
 800773c:	d1e3      	bne.n	8007706 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2220      	movs	r2, #32
 8007742:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800775a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800775c:	f023 0310 	bic.w	r3, r3, #16
 8007760:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800776e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007770:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007772:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007774:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007776:	e841 2300 	strex	r3, r2, [r1]
 800777a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800777c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800777e:	2b00      	cmp	r3, #0
 8007780:	d1e4      	bne.n	800774c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007788:	4618      	mov	r0, r3
 800778a:	f7fa fc03 	bl	8001f94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f7f8 ff0d 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077ae:	e0fd      	b.n	80079ac <HAL_UART_IRQHandler+0x760>
 80077b0:	40020010 	.word	0x40020010
 80077b4:	40020028 	.word	0x40020028
 80077b8:	40020040 	.word	0x40020040
 80077bc:	40020058 	.word	0x40020058
 80077c0:	40020070 	.word	0x40020070
 80077c4:	40020088 	.word	0x40020088
 80077c8:	400200a0 	.word	0x400200a0
 80077cc:	400200b8 	.word	0x400200b8
 80077d0:	40020410 	.word	0x40020410
 80077d4:	40020428 	.word	0x40020428
 80077d8:	40020440 	.word	0x40020440
 80077dc:	40020458 	.word	0x40020458
 80077e0:	40020470 	.word	0x40020470
 80077e4:	40020488 	.word	0x40020488
 80077e8:	400204a0 	.word	0x400204a0
 80077ec:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	1ad3      	subs	r3, r2, r3
 8007800:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800780a:	b29b      	uxth	r3, r3
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80cf 	beq.w	80079b0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80ca 	beq.w	80079b0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007824:	e853 3f00 	ldrex	r3, [r3]
 8007828:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800782a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800782c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007830:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	461a      	mov	r2, r3
 800783a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800783e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007840:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007842:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007844:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007846:	e841 2300 	strex	r3, r2, [r1]
 800784a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800784c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800784e:	2b00      	cmp	r3, #0
 8007850:	d1e4      	bne.n	800781c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3308      	adds	r3, #8
 8007858:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	e853 3f00 	ldrex	r3, [r3]
 8007860:	623b      	str	r3, [r7, #32]
   return(result);
 8007862:	6a3a      	ldr	r2, [r7, #32]
 8007864:	4b55      	ldr	r3, [pc, #340]	@ (80079bc <HAL_UART_IRQHandler+0x770>)
 8007866:	4013      	ands	r3, r2
 8007868:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007876:	633a      	str	r2, [r7, #48]	@ 0x30
 8007878:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800787c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800787e:	e841 2300 	strex	r3, r2, [r1]
 8007882:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007886:	2b00      	cmp	r3, #0
 8007888:	d1e3      	bne.n	8007852 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2220      	movs	r2, #32
 800788e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	f023 0310 	bic.w	r3, r3, #16
 80078b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	461a      	mov	r2, r3
 80078bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80078c0:	61fb      	str	r3, [r7, #28]
 80078c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c4:	69b9      	ldr	r1, [r7, #24]
 80078c6:	69fa      	ldr	r2, [r7, #28]
 80078c8:	e841 2300 	strex	r3, r2, [r1]
 80078cc:	617b      	str	r3, [r7, #20]
   return(result);
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1e4      	bne.n	800789e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2202      	movs	r2, #2
 80078d8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078de:	4619      	mov	r1, r3
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f7f8 fe71 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078e6:	e063      	b.n	80079b0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80078e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00e      	beq.n	8007912 <HAL_UART_IRQHandler+0x6c6>
 80078f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80078f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d008      	beq.n	8007912 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007908:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f001 fa87 	bl	8008e1e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007910:	e051      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007916:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800791a:	2b00      	cmp	r3, #0
 800791c:	d014      	beq.n	8007948 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800791e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007926:	2b00      	cmp	r3, #0
 8007928:	d105      	bne.n	8007936 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800792a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800792e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d008      	beq.n	8007948 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800793a:	2b00      	cmp	r3, #0
 800793c:	d03a      	beq.n	80079b4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	4798      	blx	r3
    }
    return;
 8007946:	e035      	b.n	80079b4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800794c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007950:	2b00      	cmp	r3, #0
 8007952:	d009      	beq.n	8007968 <HAL_UART_IRQHandler+0x71c>
 8007954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d003      	beq.n	8007968 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f001 fa31 	bl	8008dc8 <UART_EndTransmit_IT>
    return;
 8007966:	e026      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007968:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800796c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007970:	2b00      	cmp	r3, #0
 8007972:	d009      	beq.n	8007988 <HAL_UART_IRQHandler+0x73c>
 8007974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007978:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800797c:	2b00      	cmp	r3, #0
 800797e:	d003      	beq.n	8007988 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 fa60 	bl	8008e46 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007986:	e016      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d010      	beq.n	80079b6 <HAL_UART_IRQHandler+0x76a>
 8007994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007998:	2b00      	cmp	r3, #0
 800799a:	da0c      	bge.n	80079b6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f001 fa48 	bl	8008e32 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079a2:	e008      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80079a4:	bf00      	nop
 80079a6:	e006      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
    return;
 80079a8:	bf00      	nop
 80079aa:	e004      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80079ac:	bf00      	nop
 80079ae:	e002      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
      return;
 80079b0:	bf00      	nop
 80079b2:	e000      	b.n	80079b6 <HAL_UART_IRQHandler+0x76a>
    return;
 80079b4:	bf00      	nop
  }
}
 80079b6:	37e8      	adds	r7, #232	@ 0xe8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	effffffe 	.word	0xeffffffe

080079c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80079c0:	b480      	push	{r7}
 80079c2:	b083      	sub	sp, #12
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80079c8:	bf00      	nop
 80079ca:	370c      	adds	r7, #12
 80079cc:	46bd      	mov	sp, r7
 80079ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d2:	4770      	bx	lr

080079d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079d4:	b480      	push	{r7}
 80079d6:	b083      	sub	sp, #12
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80079dc:	bf00      	nop
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80079e8:	b480      	push	{r7}
 80079ea:	b083      	sub	sp, #12
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80079f0:	bf00      	nop
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80079fc:	b480      	push	{r7}
 80079fe:	b083      	sub	sp, #12
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007a18:	bf00      	nop
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a28:	b092      	sub	sp, #72	@ 0x48
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	689a      	ldr	r2, [r3, #8]
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	431a      	orrs	r2, r3
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	695b      	ldr	r3, [r3, #20]
 8007a42:	431a      	orrs	r2, r3
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	69db      	ldr	r3, [r3, #28]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a4c:	697b      	ldr	r3, [r7, #20]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	681a      	ldr	r2, [r3, #0]
 8007a52:	4bbe      	ldr	r3, [pc, #760]	@ (8007d4c <UART_SetConfig+0x328>)
 8007a54:	4013      	ands	r3, r2
 8007a56:	697a      	ldr	r2, [r7, #20]
 8007a58:	6812      	ldr	r2, [r2, #0]
 8007a5a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007a5c:	430b      	orrs	r3, r1
 8007a5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	699b      	ldr	r3, [r3, #24]
 8007a7a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4ab3      	ldr	r2, [pc, #716]	@ (8007d50 <UART_SetConfig+0x32c>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d004      	beq.n	8007a90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	6a1b      	ldr	r3, [r3, #32]
 8007a8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	689a      	ldr	r2, [r3, #8]
 8007a96:	4baf      	ldr	r3, [pc, #700]	@ (8007d54 <UART_SetConfig+0x330>)
 8007a98:	4013      	ands	r3, r2
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007aa0:	430b      	orrs	r3, r1
 8007aa2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007aa4:	697b      	ldr	r3, [r7, #20]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aaa:	f023 010f 	bic.w	r1, r3, #15
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	430a      	orrs	r2, r1
 8007ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4aa6      	ldr	r2, [pc, #664]	@ (8007d58 <UART_SetConfig+0x334>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d177      	bne.n	8007bb4 <UART_SetConfig+0x190>
 8007ac4:	4ba5      	ldr	r3, [pc, #660]	@ (8007d5c <UART_SetConfig+0x338>)
 8007ac6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007acc:	2b28      	cmp	r3, #40	@ 0x28
 8007ace:	d86d      	bhi.n	8007bac <UART_SetConfig+0x188>
 8007ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <UART_SetConfig+0xb4>)
 8007ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad6:	bf00      	nop
 8007ad8:	08007b7d 	.word	0x08007b7d
 8007adc:	08007bad 	.word	0x08007bad
 8007ae0:	08007bad 	.word	0x08007bad
 8007ae4:	08007bad 	.word	0x08007bad
 8007ae8:	08007bad 	.word	0x08007bad
 8007aec:	08007bad 	.word	0x08007bad
 8007af0:	08007bad 	.word	0x08007bad
 8007af4:	08007bad 	.word	0x08007bad
 8007af8:	08007b85 	.word	0x08007b85
 8007afc:	08007bad 	.word	0x08007bad
 8007b00:	08007bad 	.word	0x08007bad
 8007b04:	08007bad 	.word	0x08007bad
 8007b08:	08007bad 	.word	0x08007bad
 8007b0c:	08007bad 	.word	0x08007bad
 8007b10:	08007bad 	.word	0x08007bad
 8007b14:	08007bad 	.word	0x08007bad
 8007b18:	08007b8d 	.word	0x08007b8d
 8007b1c:	08007bad 	.word	0x08007bad
 8007b20:	08007bad 	.word	0x08007bad
 8007b24:	08007bad 	.word	0x08007bad
 8007b28:	08007bad 	.word	0x08007bad
 8007b2c:	08007bad 	.word	0x08007bad
 8007b30:	08007bad 	.word	0x08007bad
 8007b34:	08007bad 	.word	0x08007bad
 8007b38:	08007b95 	.word	0x08007b95
 8007b3c:	08007bad 	.word	0x08007bad
 8007b40:	08007bad 	.word	0x08007bad
 8007b44:	08007bad 	.word	0x08007bad
 8007b48:	08007bad 	.word	0x08007bad
 8007b4c:	08007bad 	.word	0x08007bad
 8007b50:	08007bad 	.word	0x08007bad
 8007b54:	08007bad 	.word	0x08007bad
 8007b58:	08007b9d 	.word	0x08007b9d
 8007b5c:	08007bad 	.word	0x08007bad
 8007b60:	08007bad 	.word	0x08007bad
 8007b64:	08007bad 	.word	0x08007bad
 8007b68:	08007bad 	.word	0x08007bad
 8007b6c:	08007bad 	.word	0x08007bad
 8007b70:	08007bad 	.word	0x08007bad
 8007b74:	08007bad 	.word	0x08007bad
 8007b78:	08007ba5 	.word	0x08007ba5
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e222      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007b84:	2304      	movs	r3, #4
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e21e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e21a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007b94:	2310      	movs	r3, #16
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e216      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007b9c:	2320      	movs	r3, #32
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba2:	e212      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ba4:	2340      	movs	r3, #64	@ 0x40
 8007ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007baa:	e20e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007bac:	2380      	movs	r3, #128	@ 0x80
 8007bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	e20a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	4a69      	ldr	r2, [pc, #420]	@ (8007d60 <UART_SetConfig+0x33c>)
 8007bba:	4293      	cmp	r3, r2
 8007bbc:	d130      	bne.n	8007c20 <UART_SetConfig+0x1fc>
 8007bbe:	4b67      	ldr	r3, [pc, #412]	@ (8007d5c <UART_SetConfig+0x338>)
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc2:	f003 0307 	and.w	r3, r3, #7
 8007bc6:	2b05      	cmp	r3, #5
 8007bc8:	d826      	bhi.n	8007c18 <UART_SetConfig+0x1f4>
 8007bca:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd0 <UART_SetConfig+0x1ac>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007be9 	.word	0x08007be9
 8007bd4:	08007bf1 	.word	0x08007bf1
 8007bd8:	08007bf9 	.word	0x08007bf9
 8007bdc:	08007c01 	.word	0x08007c01
 8007be0:	08007c09 	.word	0x08007c09
 8007be4:	08007c11 	.word	0x08007c11
 8007be8:	2300      	movs	r3, #0
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bee:	e1ec      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf6:	e1e8      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	e1e4      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c00:	2310      	movs	r3, #16
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c06:	e1e0      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c08:	2320      	movs	r3, #32
 8007c0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0e:	e1dc      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c10:	2340      	movs	r3, #64	@ 0x40
 8007c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c16:	e1d8      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c18:	2380      	movs	r3, #128	@ 0x80
 8007c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1e:	e1d4      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	4a4f      	ldr	r2, [pc, #316]	@ (8007d64 <UART_SetConfig+0x340>)
 8007c26:	4293      	cmp	r3, r2
 8007c28:	d130      	bne.n	8007c8c <UART_SetConfig+0x268>
 8007c2a:	4b4c      	ldr	r3, [pc, #304]	@ (8007d5c <UART_SetConfig+0x338>)
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	2b05      	cmp	r3, #5
 8007c34:	d826      	bhi.n	8007c84 <UART_SetConfig+0x260>
 8007c36:	a201      	add	r2, pc, #4	@ (adr r2, 8007c3c <UART_SetConfig+0x218>)
 8007c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3c:	08007c55 	.word	0x08007c55
 8007c40:	08007c5d 	.word	0x08007c5d
 8007c44:	08007c65 	.word	0x08007c65
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c75 	.word	0x08007c75
 8007c50:	08007c7d 	.word	0x08007c7d
 8007c54:	2300      	movs	r3, #0
 8007c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5a:	e1b6      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c5c:	2304      	movs	r3, #4
 8007c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c62:	e1b2      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c64:	2308      	movs	r3, #8
 8007c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6a:	e1ae      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c6c:	2310      	movs	r3, #16
 8007c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c72:	e1aa      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c74:	2320      	movs	r3, #32
 8007c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7a:	e1a6      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c7c:	2340      	movs	r3, #64	@ 0x40
 8007c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c82:	e1a2      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c84:	2380      	movs	r3, #128	@ 0x80
 8007c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8a:	e19e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a35      	ldr	r2, [pc, #212]	@ (8007d68 <UART_SetConfig+0x344>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d130      	bne.n	8007cf8 <UART_SetConfig+0x2d4>
 8007c96:	4b31      	ldr	r3, [pc, #196]	@ (8007d5c <UART_SetConfig+0x338>)
 8007c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9a:	f003 0307 	and.w	r3, r3, #7
 8007c9e:	2b05      	cmp	r3, #5
 8007ca0:	d826      	bhi.n	8007cf0 <UART_SetConfig+0x2cc>
 8007ca2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ca8 <UART_SetConfig+0x284>)
 8007ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ca8:	08007cc1 	.word	0x08007cc1
 8007cac:	08007cc9 	.word	0x08007cc9
 8007cb0:	08007cd1 	.word	0x08007cd1
 8007cb4:	08007cd9 	.word	0x08007cd9
 8007cb8:	08007ce1 	.word	0x08007ce1
 8007cbc:	08007ce9 	.word	0x08007ce9
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc6:	e180      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007cc8:	2304      	movs	r3, #4
 8007cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cce:	e17c      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007cd0:	2308      	movs	r3, #8
 8007cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd6:	e178      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007cd8:	2310      	movs	r3, #16
 8007cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cde:	e174      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ce0:	2320      	movs	r3, #32
 8007ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce6:	e170      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ce8:	2340      	movs	r3, #64	@ 0x40
 8007cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cee:	e16c      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007cf0:	2380      	movs	r3, #128	@ 0x80
 8007cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf6:	e168      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1b      	ldr	r2, [pc, #108]	@ (8007d6c <UART_SetConfig+0x348>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d142      	bne.n	8007d88 <UART_SetConfig+0x364>
 8007d02:	4b16      	ldr	r3, [pc, #88]	@ (8007d5c <UART_SetConfig+0x338>)
 8007d04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d06:	f003 0307 	and.w	r3, r3, #7
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d838      	bhi.n	8007d80 <UART_SetConfig+0x35c>
 8007d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d14 <UART_SetConfig+0x2f0>)
 8007d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d14:	08007d2d 	.word	0x08007d2d
 8007d18:	08007d35 	.word	0x08007d35
 8007d1c:	08007d3d 	.word	0x08007d3d
 8007d20:	08007d45 	.word	0x08007d45
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d79 	.word	0x08007d79
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d32:	e14a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d34:	2304      	movs	r3, #4
 8007d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3a:	e146      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d3c:	2308      	movs	r3, #8
 8007d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d42:	e142      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d44:	2310      	movs	r3, #16
 8007d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4a:	e13e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d4c:	cfff69f3 	.word	0xcfff69f3
 8007d50:	58000c00 	.word	0x58000c00
 8007d54:	11fff4ff 	.word	0x11fff4ff
 8007d58:	40011000 	.word	0x40011000
 8007d5c:	58024400 	.word	0x58024400
 8007d60:	40004400 	.word	0x40004400
 8007d64:	40004800 	.word	0x40004800
 8007d68:	40004c00 	.word	0x40004c00
 8007d6c:	40005000 	.word	0x40005000
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e128      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d78:	2340      	movs	r3, #64	@ 0x40
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e124      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e120      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4acb      	ldr	r2, [pc, #812]	@ (80080bc <UART_SetConfig+0x698>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d176      	bne.n	8007e80 <UART_SetConfig+0x45c>
 8007d92:	4bcb      	ldr	r3, [pc, #812]	@ (80080c0 <UART_SetConfig+0x69c>)
 8007d94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d9a:	2b28      	cmp	r3, #40	@ 0x28
 8007d9c:	d86c      	bhi.n	8007e78 <UART_SetConfig+0x454>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0x380>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007e49 	.word	0x08007e49
 8007da8:	08007e79 	.word	0x08007e79
 8007dac:	08007e79 	.word	0x08007e79
 8007db0:	08007e79 	.word	0x08007e79
 8007db4:	08007e79 	.word	0x08007e79
 8007db8:	08007e79 	.word	0x08007e79
 8007dbc:	08007e79 	.word	0x08007e79
 8007dc0:	08007e79 	.word	0x08007e79
 8007dc4:	08007e51 	.word	0x08007e51
 8007dc8:	08007e79 	.word	0x08007e79
 8007dcc:	08007e79 	.word	0x08007e79
 8007dd0:	08007e79 	.word	0x08007e79
 8007dd4:	08007e79 	.word	0x08007e79
 8007dd8:	08007e79 	.word	0x08007e79
 8007ddc:	08007e79 	.word	0x08007e79
 8007de0:	08007e79 	.word	0x08007e79
 8007de4:	08007e59 	.word	0x08007e59
 8007de8:	08007e79 	.word	0x08007e79
 8007dec:	08007e79 	.word	0x08007e79
 8007df0:	08007e79 	.word	0x08007e79
 8007df4:	08007e79 	.word	0x08007e79
 8007df8:	08007e79 	.word	0x08007e79
 8007dfc:	08007e79 	.word	0x08007e79
 8007e00:	08007e79 	.word	0x08007e79
 8007e04:	08007e61 	.word	0x08007e61
 8007e08:	08007e79 	.word	0x08007e79
 8007e0c:	08007e79 	.word	0x08007e79
 8007e10:	08007e79 	.word	0x08007e79
 8007e14:	08007e79 	.word	0x08007e79
 8007e18:	08007e79 	.word	0x08007e79
 8007e1c:	08007e79 	.word	0x08007e79
 8007e20:	08007e79 	.word	0x08007e79
 8007e24:	08007e69 	.word	0x08007e69
 8007e28:	08007e79 	.word	0x08007e79
 8007e2c:	08007e79 	.word	0x08007e79
 8007e30:	08007e79 	.word	0x08007e79
 8007e34:	08007e79 	.word	0x08007e79
 8007e38:	08007e79 	.word	0x08007e79
 8007e3c:	08007e79 	.word	0x08007e79
 8007e40:	08007e79 	.word	0x08007e79
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4e:	e0bc      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e50:	2304      	movs	r3, #4
 8007e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e56:	e0b8      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e58:	2308      	movs	r3, #8
 8007e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5e:	e0b4      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e60:	2310      	movs	r3, #16
 8007e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e66:	e0b0      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e68:	2320      	movs	r3, #32
 8007e6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6e:	e0ac      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e70:	2340      	movs	r3, #64	@ 0x40
 8007e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e76:	e0a8      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e78:	2380      	movs	r3, #128	@ 0x80
 8007e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7e:	e0a4      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a8f      	ldr	r2, [pc, #572]	@ (80080c4 <UART_SetConfig+0x6a0>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d130      	bne.n	8007eec <UART_SetConfig+0x4c8>
 8007e8a:	4b8d      	ldr	r3, [pc, #564]	@ (80080c0 <UART_SetConfig+0x69c>)
 8007e8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	d826      	bhi.n	8007ee4 <UART_SetConfig+0x4c0>
 8007e96:	a201      	add	r2, pc, #4	@ (adr r2, 8007e9c <UART_SetConfig+0x478>)
 8007e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9c:	08007eb5 	.word	0x08007eb5
 8007ea0:	08007ebd 	.word	0x08007ebd
 8007ea4:	08007ec5 	.word	0x08007ec5
 8007ea8:	08007ecd 	.word	0x08007ecd
 8007eac:	08007ed5 	.word	0x08007ed5
 8007eb0:	08007edd 	.word	0x08007edd
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eba:	e086      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ebc:	2304      	movs	r3, #4
 8007ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec2:	e082      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ec4:	2308      	movs	r3, #8
 8007ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eca:	e07e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed2:	e07a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ed4:	2320      	movs	r3, #32
 8007ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eda:	e076      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007edc:	2340      	movs	r3, #64	@ 0x40
 8007ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee2:	e072      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007ee4:	2380      	movs	r3, #128	@ 0x80
 8007ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eea:	e06e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a75      	ldr	r2, [pc, #468]	@ (80080c8 <UART_SetConfig+0x6a4>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d130      	bne.n	8007f58 <UART_SetConfig+0x534>
 8007ef6:	4b72      	ldr	r3, [pc, #456]	@ (80080c0 <UART_SetConfig+0x69c>)
 8007ef8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	2b05      	cmp	r3, #5
 8007f00:	d826      	bhi.n	8007f50 <UART_SetConfig+0x52c>
 8007f02:	a201      	add	r2, pc, #4	@ (adr r2, 8007f08 <UART_SetConfig+0x4e4>)
 8007f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f08:	08007f21 	.word	0x08007f21
 8007f0c:	08007f29 	.word	0x08007f29
 8007f10:	08007f31 	.word	0x08007f31
 8007f14:	08007f39 	.word	0x08007f39
 8007f18:	08007f41 	.word	0x08007f41
 8007f1c:	08007f49 	.word	0x08007f49
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f26:	e050      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f28:	2304      	movs	r3, #4
 8007f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2e:	e04c      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f30:	2308      	movs	r3, #8
 8007f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f36:	e048      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f38:	2310      	movs	r3, #16
 8007f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3e:	e044      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f40:	2320      	movs	r3, #32
 8007f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f46:	e040      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f48:	2340      	movs	r3, #64	@ 0x40
 8007f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4e:	e03c      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f50:	2380      	movs	r3, #128	@ 0x80
 8007f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f56:	e038      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a5b      	ldr	r2, [pc, #364]	@ (80080cc <UART_SetConfig+0x6a8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d130      	bne.n	8007fc4 <UART_SetConfig+0x5a0>
 8007f62:	4b57      	ldr	r3, [pc, #348]	@ (80080c0 <UART_SetConfig+0x69c>)
 8007f64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d826      	bhi.n	8007fbc <UART_SetConfig+0x598>
 8007f6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f74 <UART_SetConfig+0x550>)
 8007f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f74:	08007f8d 	.word	0x08007f8d
 8007f78:	08007f95 	.word	0x08007f95
 8007f7c:	08007f9d 	.word	0x08007f9d
 8007f80:	08007fa5 	.word	0x08007fa5
 8007f84:	08007fad 	.word	0x08007fad
 8007f88:	08007fb5 	.word	0x08007fb5
 8007f8c:	2302      	movs	r3, #2
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e01a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f94:	2304      	movs	r3, #4
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e016      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007f9c:	2308      	movs	r3, #8
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e012      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007fa4:	2310      	movs	r3, #16
 8007fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007faa:	e00e      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007fac:	2320      	movs	r3, #32
 8007fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fb2:	e00a      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007fb4:	2340      	movs	r3, #64	@ 0x40
 8007fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fba:	e006      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007fbc:	2380      	movs	r3, #128	@ 0x80
 8007fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fc2:	e002      	b.n	8007fca <UART_SetConfig+0x5a6>
 8007fc4:	2380      	movs	r3, #128	@ 0x80
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a3f      	ldr	r2, [pc, #252]	@ (80080cc <UART_SetConfig+0x6a8>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	f040 80f8 	bne.w	80081c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fd6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	dc46      	bgt.n	800806c <UART_SetConfig+0x648>
 8007fde:	2b02      	cmp	r3, #2
 8007fe0:	f2c0 8082 	blt.w	80080e8 <UART_SetConfig+0x6c4>
 8007fe4:	3b02      	subs	r3, #2
 8007fe6:	2b1e      	cmp	r3, #30
 8007fe8:	d87e      	bhi.n	80080e8 <UART_SetConfig+0x6c4>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <UART_SetConfig+0x5cc>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008073 	.word	0x08008073
 8007ff4:	080080e9 	.word	0x080080e9
 8007ff8:	0800807b 	.word	0x0800807b
 8007ffc:	080080e9 	.word	0x080080e9
 8008000:	080080e9 	.word	0x080080e9
 8008004:	080080e9 	.word	0x080080e9
 8008008:	0800808b 	.word	0x0800808b
 800800c:	080080e9 	.word	0x080080e9
 8008010:	080080e9 	.word	0x080080e9
 8008014:	080080e9 	.word	0x080080e9
 8008018:	080080e9 	.word	0x080080e9
 800801c:	080080e9 	.word	0x080080e9
 8008020:	080080e9 	.word	0x080080e9
 8008024:	080080e9 	.word	0x080080e9
 8008028:	0800809b 	.word	0x0800809b
 800802c:	080080e9 	.word	0x080080e9
 8008030:	080080e9 	.word	0x080080e9
 8008034:	080080e9 	.word	0x080080e9
 8008038:	080080e9 	.word	0x080080e9
 800803c:	080080e9 	.word	0x080080e9
 8008040:	080080e9 	.word	0x080080e9
 8008044:	080080e9 	.word	0x080080e9
 8008048:	080080e9 	.word	0x080080e9
 800804c:	080080e9 	.word	0x080080e9
 8008050:	080080e9 	.word	0x080080e9
 8008054:	080080e9 	.word	0x080080e9
 8008058:	080080e9 	.word	0x080080e9
 800805c:	080080e9 	.word	0x080080e9
 8008060:	080080e9 	.word	0x080080e9
 8008064:	080080e9 	.word	0x080080e9
 8008068:	080080db 	.word	0x080080db
 800806c:	2b40      	cmp	r3, #64	@ 0x40
 800806e:	d037      	beq.n	80080e0 <UART_SetConfig+0x6bc>
 8008070:	e03a      	b.n	80080e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008072:	f7fe fbf9 	bl	8006868 <HAL_RCCEx_GetD3PCLK1Freq>
 8008076:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008078:	e03c      	b.n	80080f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800807a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800807e:	4618      	mov	r0, r3
 8008080:	f7fe fc08 	bl	8006894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e034      	b.n	80080f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800808a:	f107 0318 	add.w	r3, r7, #24
 800808e:	4618      	mov	r0, r3
 8008090:	f7fe fd54 	bl	8006b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008098:	e02c      	b.n	80080f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800809a:	4b09      	ldr	r3, [pc, #36]	@ (80080c0 <UART_SetConfig+0x69c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0320 	and.w	r3, r3, #32
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080a6:	4b06      	ldr	r3, [pc, #24]	@ (80080c0 <UART_SetConfig+0x69c>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	08db      	lsrs	r3, r3, #3
 80080ac:	f003 0303 	and.w	r3, r3, #3
 80080b0:	4a07      	ldr	r2, [pc, #28]	@ (80080d0 <UART_SetConfig+0x6ac>)
 80080b2:	fa22 f303 	lsr.w	r3, r2, r3
 80080b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080b8:	e01c      	b.n	80080f4 <UART_SetConfig+0x6d0>
 80080ba:	bf00      	nop
 80080bc:	40011400 	.word	0x40011400
 80080c0:	58024400 	.word	0x58024400
 80080c4:	40007800 	.word	0x40007800
 80080c8:	40007c00 	.word	0x40007c00
 80080cc:	58000c00 	.word	0x58000c00
 80080d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80080d4:	4b9d      	ldr	r3, [pc, #628]	@ (800834c <UART_SetConfig+0x928>)
 80080d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d8:	e00c      	b.n	80080f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080da:	4b9d      	ldr	r3, [pc, #628]	@ (8008350 <UART_SetConfig+0x92c>)
 80080dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080de:	e009      	b.n	80080f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80080e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080e6:	e005      	b.n	80080f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80080f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 81de 	beq.w	80084b8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008100:	4a94      	ldr	r2, [pc, #592]	@ (8008354 <UART_SetConfig+0x930>)
 8008102:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008106:	461a      	mov	r2, r3
 8008108:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800810a:	fbb3 f3f2 	udiv	r3, r3, r2
 800810e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	685a      	ldr	r2, [r3, #4]
 8008114:	4613      	mov	r3, r2
 8008116:	005b      	lsls	r3, r3, #1
 8008118:	4413      	add	r3, r2
 800811a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811c:	429a      	cmp	r2, r3
 800811e:	d305      	bcc.n	800812c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	685b      	ldr	r3, [r3, #4]
 8008124:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008126:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008128:	429a      	cmp	r2, r3
 800812a:	d903      	bls.n	8008134 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008132:	e1c1      	b.n	80084b8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008136:	2200      	movs	r2, #0
 8008138:	60bb      	str	r3, [r7, #8]
 800813a:	60fa      	str	r2, [r7, #12]
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008140:	4a84      	ldr	r2, [pc, #528]	@ (8008354 <UART_SetConfig+0x930>)
 8008142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008146:	b29b      	uxth	r3, r3
 8008148:	2200      	movs	r2, #0
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	607a      	str	r2, [r7, #4]
 800814e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008156:	f7f8 f8bf 	bl	80002d8 <__aeabi_uldivmod>
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4610      	mov	r0, r2
 8008160:	4619      	mov	r1, r3
 8008162:	f04f 0200 	mov.w	r2, #0
 8008166:	f04f 0300 	mov.w	r3, #0
 800816a:	020b      	lsls	r3, r1, #8
 800816c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008170:	0202      	lsls	r2, r0, #8
 8008172:	6979      	ldr	r1, [r7, #20]
 8008174:	6849      	ldr	r1, [r1, #4]
 8008176:	0849      	lsrs	r1, r1, #1
 8008178:	2000      	movs	r0, #0
 800817a:	460c      	mov	r4, r1
 800817c:	4605      	mov	r5, r0
 800817e:	eb12 0804 	adds.w	r8, r2, r4
 8008182:	eb43 0905 	adc.w	r9, r3, r5
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	469a      	mov	sl, r3
 800818e:	4693      	mov	fp, r2
 8008190:	4652      	mov	r2, sl
 8008192:	465b      	mov	r3, fp
 8008194:	4640      	mov	r0, r8
 8008196:	4649      	mov	r1, r9
 8008198:	f7f8 f89e 	bl	80002d8 <__aeabi_uldivmod>
 800819c:	4602      	mov	r2, r0
 800819e:	460b      	mov	r3, r1
 80081a0:	4613      	mov	r3, r2
 80081a2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081aa:	d308      	bcc.n	80081be <UART_SetConfig+0x79a>
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081b2:	d204      	bcs.n	80081be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081ba:	60da      	str	r2, [r3, #12]
 80081bc:	e17c      	b.n	80084b8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081c4:	e178      	b.n	80084b8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081ce:	f040 80c5 	bne.w	800835c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80081d2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80081d6:	2b20      	cmp	r3, #32
 80081d8:	dc48      	bgt.n	800826c <UART_SetConfig+0x848>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	db7b      	blt.n	80082d6 <UART_SetConfig+0x8b2>
 80081de:	2b20      	cmp	r3, #32
 80081e0:	d879      	bhi.n	80082d6 <UART_SetConfig+0x8b2>
 80081e2:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <UART_SetConfig+0x7c4>)
 80081e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e8:	08008273 	.word	0x08008273
 80081ec:	0800827b 	.word	0x0800827b
 80081f0:	080082d7 	.word	0x080082d7
 80081f4:	080082d7 	.word	0x080082d7
 80081f8:	08008283 	.word	0x08008283
 80081fc:	080082d7 	.word	0x080082d7
 8008200:	080082d7 	.word	0x080082d7
 8008204:	080082d7 	.word	0x080082d7
 8008208:	08008293 	.word	0x08008293
 800820c:	080082d7 	.word	0x080082d7
 8008210:	080082d7 	.word	0x080082d7
 8008214:	080082d7 	.word	0x080082d7
 8008218:	080082d7 	.word	0x080082d7
 800821c:	080082d7 	.word	0x080082d7
 8008220:	080082d7 	.word	0x080082d7
 8008224:	080082d7 	.word	0x080082d7
 8008228:	080082a3 	.word	0x080082a3
 800822c:	080082d7 	.word	0x080082d7
 8008230:	080082d7 	.word	0x080082d7
 8008234:	080082d7 	.word	0x080082d7
 8008238:	080082d7 	.word	0x080082d7
 800823c:	080082d7 	.word	0x080082d7
 8008240:	080082d7 	.word	0x080082d7
 8008244:	080082d7 	.word	0x080082d7
 8008248:	080082d7 	.word	0x080082d7
 800824c:	080082d7 	.word	0x080082d7
 8008250:	080082d7 	.word	0x080082d7
 8008254:	080082d7 	.word	0x080082d7
 8008258:	080082d7 	.word	0x080082d7
 800825c:	080082d7 	.word	0x080082d7
 8008260:	080082d7 	.word	0x080082d7
 8008264:	080082d7 	.word	0x080082d7
 8008268:	080082c9 	.word	0x080082c9
 800826c:	2b40      	cmp	r3, #64	@ 0x40
 800826e:	d02e      	beq.n	80082ce <UART_SetConfig+0x8aa>
 8008270:	e031      	b.n	80082d6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008272:	f7fd f8c3 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8008276:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008278:	e033      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800827a:	f7fd f8d5 	bl	8005428 <HAL_RCC_GetPCLK2Freq>
 800827e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008280:	e02f      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008282:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fb04 	bl	8006894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800828c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800828e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008290:	e027      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008292:	f107 0318 	add.w	r3, r7, #24
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fc50 	bl	8006b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082a0:	e01f      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a2:	4b2d      	ldr	r3, [pc, #180]	@ (8008358 <UART_SetConfig+0x934>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d009      	beq.n	80082c2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008358 <UART_SetConfig+0x934>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	08db      	lsrs	r3, r3, #3
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	4a24      	ldr	r2, [pc, #144]	@ (800834c <UART_SetConfig+0x928>)
 80082ba:	fa22 f303 	lsr.w	r3, r2, r3
 80082be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082c0:	e00f      	b.n	80082e2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80082c2:	4b22      	ldr	r3, [pc, #136]	@ (800834c <UART_SetConfig+0x928>)
 80082c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c6:	e00c      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082c8:	4b21      	ldr	r3, [pc, #132]	@ (8008350 <UART_SetConfig+0x92c>)
 80082ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082cc:	e009      	b.n	80082e2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d4:	e005      	b.n	80082e2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80082d6:	2300      	movs	r3, #0
 80082d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80082e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f000 80e7 	beq.w	80084b8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082ee:	4a19      	ldr	r2, [pc, #100]	@ (8008354 <UART_SetConfig+0x930>)
 80082f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082f4:	461a      	mov	r2, r3
 80082f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80082fc:	005a      	lsls	r2, r3, #1
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	685b      	ldr	r3, [r3, #4]
 8008302:	085b      	lsrs	r3, r3, #1
 8008304:	441a      	add	r2, r3
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	fbb2 f3f3 	udiv	r3, r2, r3
 800830e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008312:	2b0f      	cmp	r3, #15
 8008314:	d916      	bls.n	8008344 <UART_SetConfig+0x920>
 8008316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800831c:	d212      	bcs.n	8008344 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	b29b      	uxth	r3, r3
 8008322:	f023 030f 	bic.w	r3, r3, #15
 8008326:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800832a:	085b      	lsrs	r3, r3, #1
 800832c:	b29b      	uxth	r3, r3
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	b29a      	uxth	r2, r3
 8008334:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008336:	4313      	orrs	r3, r2
 8008338:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	e0b9      	b.n	80084b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800834a:	e0b5      	b.n	80084b8 <UART_SetConfig+0xa94>
 800834c:	03d09000 	.word	0x03d09000
 8008350:	003d0900 	.word	0x003d0900
 8008354:	08009190 	.word	0x08009190
 8008358:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800835c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008360:	2b20      	cmp	r3, #32
 8008362:	dc49      	bgt.n	80083f8 <UART_SetConfig+0x9d4>
 8008364:	2b00      	cmp	r3, #0
 8008366:	db7c      	blt.n	8008462 <UART_SetConfig+0xa3e>
 8008368:	2b20      	cmp	r3, #32
 800836a:	d87a      	bhi.n	8008462 <UART_SetConfig+0xa3e>
 800836c:	a201      	add	r2, pc, #4	@ (adr r2, 8008374 <UART_SetConfig+0x950>)
 800836e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008372:	bf00      	nop
 8008374:	080083ff 	.word	0x080083ff
 8008378:	08008407 	.word	0x08008407
 800837c:	08008463 	.word	0x08008463
 8008380:	08008463 	.word	0x08008463
 8008384:	0800840f 	.word	0x0800840f
 8008388:	08008463 	.word	0x08008463
 800838c:	08008463 	.word	0x08008463
 8008390:	08008463 	.word	0x08008463
 8008394:	0800841f 	.word	0x0800841f
 8008398:	08008463 	.word	0x08008463
 800839c:	08008463 	.word	0x08008463
 80083a0:	08008463 	.word	0x08008463
 80083a4:	08008463 	.word	0x08008463
 80083a8:	08008463 	.word	0x08008463
 80083ac:	08008463 	.word	0x08008463
 80083b0:	08008463 	.word	0x08008463
 80083b4:	0800842f 	.word	0x0800842f
 80083b8:	08008463 	.word	0x08008463
 80083bc:	08008463 	.word	0x08008463
 80083c0:	08008463 	.word	0x08008463
 80083c4:	08008463 	.word	0x08008463
 80083c8:	08008463 	.word	0x08008463
 80083cc:	08008463 	.word	0x08008463
 80083d0:	08008463 	.word	0x08008463
 80083d4:	08008463 	.word	0x08008463
 80083d8:	08008463 	.word	0x08008463
 80083dc:	08008463 	.word	0x08008463
 80083e0:	08008463 	.word	0x08008463
 80083e4:	08008463 	.word	0x08008463
 80083e8:	08008463 	.word	0x08008463
 80083ec:	08008463 	.word	0x08008463
 80083f0:	08008463 	.word	0x08008463
 80083f4:	08008455 	.word	0x08008455
 80083f8:	2b40      	cmp	r3, #64	@ 0x40
 80083fa:	d02e      	beq.n	800845a <UART_SetConfig+0xa36>
 80083fc:	e031      	b.n	8008462 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083fe:	f7fc fffd 	bl	80053fc <HAL_RCC_GetPCLK1Freq>
 8008402:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008404:	e033      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008406:	f7fd f80f 	bl	8005428 <HAL_RCC_GetPCLK2Freq>
 800840a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800840c:	e02f      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800840e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008412:	4618      	mov	r0, r3
 8008414:	f7fe fa3e 	bl	8006894 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800841a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800841c:	e027      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800841e:	f107 0318 	add.w	r3, r7, #24
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fb8a 	bl	8006b3c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800842c:	e01f      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800842e:	4b2d      	ldr	r3, [pc, #180]	@ (80084e4 <UART_SetConfig+0xac0>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0320 	and.w	r3, r3, #32
 8008436:	2b00      	cmp	r3, #0
 8008438:	d009      	beq.n	800844e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800843a:	4b2a      	ldr	r3, [pc, #168]	@ (80084e4 <UART_SetConfig+0xac0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	08db      	lsrs	r3, r3, #3
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	4a28      	ldr	r2, [pc, #160]	@ (80084e8 <UART_SetConfig+0xac4>)
 8008446:	fa22 f303 	lsr.w	r3, r2, r3
 800844a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800844c:	e00f      	b.n	800846e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800844e:	4b26      	ldr	r3, [pc, #152]	@ (80084e8 <UART_SetConfig+0xac4>)
 8008450:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008452:	e00c      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008454:	4b25      	ldr	r3, [pc, #148]	@ (80084ec <UART_SetConfig+0xac8>)
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e009      	b.n	800846e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800845a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008460:	e005      	b.n	800846e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008462:	2300      	movs	r3, #0
 8008464:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800846c:	bf00      	nop
    }

    if (pclk != 0U)
 800846e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008470:	2b00      	cmp	r3, #0
 8008472:	d021      	beq.n	80084b8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008474:	697b      	ldr	r3, [r7, #20]
 8008476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008478:	4a1d      	ldr	r2, [pc, #116]	@ (80084f0 <UART_SetConfig+0xacc>)
 800847a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800847e:	461a      	mov	r2, r3
 8008480:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008482:	fbb3 f2f2 	udiv	r2, r3, r2
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	085b      	lsrs	r3, r3, #1
 800848c:	441a      	add	r2, r3
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	685b      	ldr	r3, [r3, #4]
 8008492:	fbb2 f3f3 	udiv	r3, r2, r3
 8008496:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	2b0f      	cmp	r3, #15
 800849c:	d909      	bls.n	80084b2 <UART_SetConfig+0xa8e>
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a4:	d205      	bcs.n	80084b2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a8:	b29a      	uxth	r2, r3
 80084aa:	697b      	ldr	r3, [r7, #20]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	60da      	str	r2, [r3, #12]
 80084b0:	e002      	b.n	80084b8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80084b2:	2301      	movs	r3, #1
 80084b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	2201      	movs	r2, #1
 80084bc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	2200      	movs	r2, #0
 80084cc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80084ce:	697b      	ldr	r3, [r7, #20]
 80084d0:	2200      	movs	r2, #0
 80084d2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80084d4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3748      	adds	r7, #72	@ 0x48
 80084dc:	46bd      	mov	sp, r7
 80084de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084e2:	bf00      	nop
 80084e4:	58024400 	.word	0x58024400
 80084e8:	03d09000 	.word	0x03d09000
 80084ec:	003d0900 	.word	0x003d0900
 80084f0:	08009190 	.word	0x08009190

080084f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084f4:	b480      	push	{r7}
 80084f6:	b083      	sub	sp, #12
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008500:	f003 0308 	and.w	r3, r3, #8
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	430a      	orrs	r2, r1
 800851c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008522:	f003 0301 	and.w	r3, r3, #1
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	430a      	orrs	r2, r1
 800853e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008544:	f003 0302 	and.w	r3, r3, #2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	430a      	orrs	r2, r1
 8008560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008566:	f003 0304 	and.w	r3, r3, #4
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	430a      	orrs	r2, r1
 8008582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085aa:	f003 0320 	and.w	r3, r3, #32
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00a      	beq.n	80085c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d01a      	beq.n	800860a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	430a      	orrs	r2, r1
 80085e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085f2:	d10a      	bne.n	800860a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800860e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	430a      	orrs	r2, r1
 800862a:	605a      	str	r2, [r3, #4]
  }
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b098      	sub	sp, #96	@ 0x60
 800863c:	af02      	add	r7, sp, #8
 800863e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008648:	f7f8 fd3e 	bl	80010c8 <HAL_GetTick>
 800864c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 0308 	and.w	r3, r3, #8
 8008658:	2b08      	cmp	r3, #8
 800865a:	d12f      	bne.n	80086bc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800865c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008660:	9300      	str	r3, [sp, #0]
 8008662:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008664:	2200      	movs	r2, #0
 8008666:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f88e 	bl	800878c <UART_WaitOnFlagUntilTimeout>
 8008670:	4603      	mov	r3, r0
 8008672:	2b00      	cmp	r3, #0
 8008674:	d022      	beq.n	80086bc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800867c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867e:	e853 3f00 	ldrex	r3, [r3]
 8008682:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008686:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800868a:	653b      	str	r3, [r7, #80]	@ 0x50
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	461a      	mov	r2, r3
 8008692:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008694:	647b      	str	r3, [r7, #68]	@ 0x44
 8008696:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008698:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800869a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800869c:	e841 2300 	strex	r3, r2, [r1]
 80086a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d1e6      	bne.n	8008676 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2220      	movs	r2, #32
 80086ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e063      	b.n	8008784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0304 	and.w	r3, r3, #4
 80086c6:	2b04      	cmp	r3, #4
 80086c8:	d149      	bne.n	800875e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086ca:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086ce:	9300      	str	r3, [sp, #0]
 80086d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086d2:	2200      	movs	r2, #0
 80086d4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f857 	bl	800878c <UART_WaitOnFlagUntilTimeout>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d03c      	beq.n	800875e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ec:	e853 3f00 	ldrex	r3, [r3]
 80086f0:	623b      	str	r3, [r7, #32]
   return(result);
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	461a      	mov	r2, r3
 8008700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008702:	633b      	str	r3, [r7, #48]	@ 0x30
 8008704:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008706:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800870a:	e841 2300 	strex	r3, r2, [r1]
 800870e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1e6      	bne.n	80086e4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	3308      	adds	r3, #8
 800871c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	60fb      	str	r3, [r7, #12]
   return(result);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 0301 	bic.w	r3, r3, #1
 800872c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	3308      	adds	r3, #8
 8008734:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008736:	61fa      	str	r2, [r7, #28]
 8008738:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	69b9      	ldr	r1, [r7, #24]
 800873c:	69fa      	ldr	r2, [r7, #28]
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	617b      	str	r3, [r7, #20]
   return(result);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e5      	bne.n	8008716 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e012      	b.n	8008784 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2220      	movs	r2, #32
 8008762:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	2220      	movs	r2, #32
 800876a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2200      	movs	r2, #0
 8008772:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3758      	adds	r7, #88	@ 0x58
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	60f8      	str	r0, [r7, #12]
 8008794:	60b9      	str	r1, [r7, #8]
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	4613      	mov	r3, r2
 800879a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800879c:	e04f      	b.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800879e:	69bb      	ldr	r3, [r7, #24]
 80087a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a4:	d04b      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087a6:	f7f8 fc8f 	bl	80010c8 <HAL_GetTick>
 80087aa:	4602      	mov	r2, r0
 80087ac:	683b      	ldr	r3, [r7, #0]
 80087ae:	1ad3      	subs	r3, r2, r3
 80087b0:	69ba      	ldr	r2, [r7, #24]
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d302      	bcc.n	80087bc <UART_WaitOnFlagUntilTimeout+0x30>
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087bc:	2303      	movs	r3, #3
 80087be:	e04e      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f003 0304 	and.w	r3, r3, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d037      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2b80      	cmp	r3, #128	@ 0x80
 80087d2:	d034      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	2b40      	cmp	r3, #64	@ 0x40
 80087d8:	d031      	beq.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	69db      	ldr	r3, [r3, #28]
 80087e0:	f003 0308 	and.w	r3, r3, #8
 80087e4:	2b08      	cmp	r3, #8
 80087e6:	d110      	bne.n	800880a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2208      	movs	r2, #8
 80087ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087f0:	68f8      	ldr	r0, [r7, #12]
 80087f2:	f000 f921 	bl	8008a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2208      	movs	r2, #8
 80087fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e029      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	69db      	ldr	r3, [r3, #28]
 8008810:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008818:	d111      	bne.n	800883e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008822:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 f907 	bl	8008a38 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800883a:	2303      	movs	r3, #3
 800883c:	e00f      	b.n	800885e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	69da      	ldr	r2, [r3, #28]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	4013      	ands	r3, r2
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	429a      	cmp	r2, r3
 800884c:	bf0c      	ite	eq
 800884e:	2301      	moveq	r3, #1
 8008850:	2300      	movne	r3, #0
 8008852:	b2db      	uxtb	r3, r3
 8008854:	461a      	mov	r2, r3
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	429a      	cmp	r2, r3
 800885a:	d0a0      	beq.n	800879e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800885c:	2300      	movs	r3, #0
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
	...

08008868 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b096      	sub	sp, #88	@ 0x58
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	4613      	mov	r3, r2
 8008874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	68ba      	ldr	r2, [r7, #8]
 800887a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	88fa      	ldrh	r2, [r7, #6]
 8008880:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2222      	movs	r2, #34	@ 0x22
 8008890:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800889a:	2b00      	cmp	r3, #0
 800889c:	d02d      	beq.n	80088fa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088a4:	4a40      	ldr	r2, [pc, #256]	@ (80089a8 <UART_Start_Receive_DMA+0x140>)
 80088a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088ae:	4a3f      	ldr	r2, [pc, #252]	@ (80089ac <UART_Start_Receive_DMA+0x144>)
 80088b0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088b8:	4a3d      	ldr	r2, [pc, #244]	@ (80089b0 <UART_Start_Receive_DMA+0x148>)
 80088ba:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80088c2:	2200      	movs	r2, #0
 80088c4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3324      	adds	r3, #36	@ 0x24
 80088d2:	4619      	mov	r1, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088d8:	461a      	mov	r2, r3
 80088da:	88fb      	ldrh	r3, [r7, #6]
 80088dc:	f7f9 f8f0 	bl	8001ac0 <HAL_DMA_Start_IT>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d009      	beq.n	80088fa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2210      	movs	r2, #16
 80088ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80088f6:	2301      	movs	r3, #1
 80088f8:	e051      	b.n	800899e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d018      	beq.n	8008934 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008908:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800890a:	e853 3f00 	ldrex	r3, [r3]
 800890e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008916:	657b      	str	r3, [r7, #84]	@ 0x54
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	461a      	mov	r2, r3
 800891e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008920:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008922:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008924:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008928:	e841 2300 	strex	r3, r2, [r1]
 800892c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800892e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008930:	2b00      	cmp	r3, #0
 8008932:	d1e6      	bne.n	8008902 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	3308      	adds	r3, #8
 800893a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893e:	e853 3f00 	ldrex	r3, [r3]
 8008942:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	653b      	str	r3, [r7, #80]	@ 0x50
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	3308      	adds	r3, #8
 8008952:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008954:	637a      	str	r2, [r7, #52]	@ 0x34
 8008956:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800895a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e5      	bne.n	8008934 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	613b      	str	r3, [r7, #16]
   return(result);
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800897e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	3308      	adds	r3, #8
 8008986:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008988:	623a      	str	r2, [r7, #32]
 800898a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	69f9      	ldr	r1, [r7, #28]
 800898e:	6a3a      	ldr	r2, [r7, #32]
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	61bb      	str	r3, [r7, #24]
   return(result);
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e5      	bne.n	8008968 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800899c:	2300      	movs	r3, #0
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3758      	adds	r7, #88	@ 0x58
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	08008bb7 	.word	0x08008bb7
 80089ac:	08008cdf 	.word	0x08008cdf
 80089b0:	08008d1d 	.word	0x08008d1d

080089b4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80089b4:	b480      	push	{r7}
 80089b6:	b08f      	sub	sp, #60	@ 0x3c
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c2:	6a3b      	ldr	r3, [r7, #32]
 80089c4:	e853 3f00 	ldrex	r3, [r3]
 80089c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80089d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	461a      	mov	r2, r3
 80089d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80089dc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e2:	e841 2300 	strex	r3, r2, [r1]
 80089e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d1e6      	bne.n	80089bc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3308      	adds	r3, #8
 80089f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	3308      	adds	r3, #8
 8008a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a0e:	61ba      	str	r2, [r7, #24]
 8008a10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6979      	ldr	r1, [r7, #20]
 8008a14:	69ba      	ldr	r2, [r7, #24]
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e5      	bne.n	80089ee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2220      	movs	r2, #32
 8008a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008a2a:	bf00      	nop
 8008a2c:	373c      	adds	r7, #60	@ 0x3c
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
	...

08008a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b095      	sub	sp, #84	@ 0x54
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a48:	e853 3f00 	ldrex	r3, [r3]
 8008a4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a5e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a60:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d1e6      	bne.n	8008a40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3308      	adds	r3, #8
 8008a78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	e853 3f00 	ldrex	r3, [r3]
 8008a80:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	4b1e      	ldr	r3, [pc, #120]	@ (8008b00 <UART_EndRxTransfer+0xc8>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	3308      	adds	r3, #8
 8008a90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a94:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a9a:	e841 2300 	strex	r3, r2, [r1]
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d1e5      	bne.n	8008a72 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d118      	bne.n	8008ae0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	e853 3f00 	ldrex	r3, [r3]
 8008aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f023 0310 	bic.w	r3, r3, #16
 8008ac2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	461a      	mov	r2, r3
 8008aca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008acc:	61bb      	str	r3, [r7, #24]
 8008ace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad0:	6979      	ldr	r1, [r7, #20]
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	e841 2300 	strex	r3, r2, [r1]
 8008ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d1e6      	bne.n	8008aae <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2220      	movs	r2, #32
 8008ae4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008af4:	bf00      	nop
 8008af6:	3754      	adds	r7, #84	@ 0x54
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr
 8008b00:	effffffe 	.word	0xeffffffe

08008b04 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b090      	sub	sp, #64	@ 0x40
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b10:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b1a:	d037      	beq.n	8008b8c <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	3308      	adds	r3, #8
 8008b2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b2e:	e853 3f00 	ldrex	r3, [r3]
 8008b32:	623b      	str	r3, [r7, #32]
   return(result);
 8008b34:	6a3b      	ldr	r3, [r7, #32]
 8008b36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	3308      	adds	r3, #8
 8008b42:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b44:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b4c:	e841 2300 	strex	r3, r2, [r1]
 8008b50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d1e5      	bne.n	8008b24 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	461a      	mov	r2, r3
 8008b74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b76:	61fb      	str	r3, [r7, #28]
 8008b78:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7a:	69b9      	ldr	r1, [r7, #24]
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	e841 2300 	strex	r3, r2, [r1]
 8008b82:	617b      	str	r3, [r7, #20]
   return(result);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d1e6      	bne.n	8008b58 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b8a:	e002      	b.n	8008b92 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008b8c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008b8e:	f7fe ff17 	bl	80079c0 <HAL_UART_TxCpltCallback>
}
 8008b92:	bf00      	nop
 8008b94:	3740      	adds	r7, #64	@ 0x40
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b084      	sub	sp, #16
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ba8:	68f8      	ldr	r0, [r7, #12]
 8008baa:	f7fe ff13 	bl	80079d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bae:	bf00      	nop
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b09c      	sub	sp, #112	@ 0x70
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	69db      	ldr	r3, [r3, #28]
 8008bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bcc:	d071      	beq.n	8008cb2 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008be6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008bea:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bf6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008bfa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008c02:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c12:	e853 3f00 	ldrex	r3, [r3]
 8008c16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c1a:	f023 0301 	bic.w	r3, r3, #1
 8008c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8008c20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3308      	adds	r3, #8
 8008c26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008c28:	647a      	str	r2, [r7, #68]	@ 0x44
 8008c2a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c30:	e841 2300 	strex	r3, r2, [r1]
 8008c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d1e5      	bne.n	8008c08 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	3308      	adds	r3, #8
 8008c42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	623b      	str	r3, [r7, #32]
   return(result);
 8008c4c:	6a3b      	ldr	r3, [r7, #32]
 8008c4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c52:	663b      	str	r3, [r7, #96]	@ 0x60
 8008c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3308      	adds	r3, #8
 8008c5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008c5c:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c60:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c64:	e841 2300 	strex	r3, r2, [r1]
 8008c68:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d1e5      	bne.n	8008c3c <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c72:	2220      	movs	r2, #32
 8008c74:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	d118      	bne.n	8008cb2 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	e853 3f00 	ldrex	r3, [r3]
 8008c8c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f023 0310 	bic.w	r3, r3, #16
 8008c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008c96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	461a      	mov	r2, r3
 8008c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ca2:	69b9      	ldr	r1, [r7, #24]
 8008ca4:	69fa      	ldr	r2, [r7, #28]
 8008ca6:	e841 2300 	strex	r3, r2, [r1]
 8008caa:	617b      	str	r3, [r7, #20]
   return(result);
 8008cac:	697b      	ldr	r3, [r7, #20]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1e6      	bne.n	8008c80 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d107      	bne.n	8008cd0 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008cca:	f7f7 fc7d 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008cce:	e002      	b.n	8008cd6 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008cd0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008cd2:	f7fe fe89 	bl	80079e8 <HAL_UART_RxCpltCallback>
}
 8008cd6:	bf00      	nop
 8008cd8:	3770      	adds	r7, #112	@ 0x70
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b084      	sub	sp, #16
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008cf6:	2b01      	cmp	r3, #1
 8008cf8:	d109      	bne.n	8008d0e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d00:	085b      	lsrs	r3, r3, #1
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	4619      	mov	r1, r3
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7f7 fc5e 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d0c:	e002      	b.n	8008d14 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f7fe fe74 	bl	80079fc <HAL_UART_RxHalfCpltCallback>
}
 8008d14:	bf00      	nop
 8008d16:	3710      	adds	r7, #16
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	bd80      	pop	{r7, pc}

08008d1c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d28:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d30:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008d38:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d44:	2b80      	cmp	r3, #128	@ 0x80
 8008d46:	d109      	bne.n	8008d5c <UART_DMAError+0x40>
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	2b21      	cmp	r3, #33	@ 0x21
 8008d4c:	d106      	bne.n	8008d5c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	2200      	movs	r2, #0
 8008d52:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008d56:	6978      	ldr	r0, [r7, #20]
 8008d58:	f7ff fe2c 	bl	80089b4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	689b      	ldr	r3, [r3, #8]
 8008d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d66:	2b40      	cmp	r3, #64	@ 0x40
 8008d68:	d109      	bne.n	8008d7e <UART_DMAError+0x62>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	2b22      	cmp	r3, #34	@ 0x22
 8008d6e:	d106      	bne.n	8008d7e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2200      	movs	r2, #0
 8008d74:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008d78:	6978      	ldr	r0, [r7, #20]
 8008d7a:	f7ff fe5d 	bl	8008a38 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d84:	f043 0210 	orr.w	r2, r3, #16
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d8e:	6978      	ldr	r0, [r7, #20]
 8008d90:	f7fe fe3e 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d94:	bf00      	nop
 8008d96:	3718      	adds	r7, #24
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008da8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2200      	movs	r2, #0
 8008dae:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2200      	movs	r2, #0
 8008db6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dba:	68f8      	ldr	r0, [r7, #12]
 8008dbc:	f7fe fe28 	bl	8007a10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dc0:	bf00      	nop
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	e853 3f00 	ldrex	r3, [r3]
 8008ddc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008de4:	61fb      	str	r3, [r7, #28]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	461a      	mov	r2, r3
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
 8008df0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df2:	6979      	ldr	r1, [r7, #20]
 8008df4:	69ba      	ldr	r2, [r7, #24]
 8008df6:	e841 2300 	strex	r3, r2, [r1]
 8008dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d1e6      	bne.n	8008dd0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2220      	movs	r2, #32
 8008e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7fe fdd5 	bl	80079c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e16:	bf00      	nop
 8008e18:	3720      	adds	r7, #32
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008e1e:	b480      	push	{r7}
 8008e20:	b083      	sub	sp, #12
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008e3a:	bf00      	nop
 8008e3c:	370c      	adds	r7, #12
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008e46:	b480      	push	{r7}
 8008e48:	b083      	sub	sp, #12
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008e4e:	bf00      	nop
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008e5a:	b480      	push	{r7}
 8008e5c:	b085      	sub	sp, #20
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_UARTEx_DisableFifoMode+0x16>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e027      	b.n	8008ec0 <HAL_UARTEx_DisableFifoMode+0x66>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2224      	movs	r2, #36	@ 0x24
 8008e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	681a      	ldr	r2, [r3, #0]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f022 0201 	bic.w	r2, r2, #1
 8008e96:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e9e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2220      	movs	r2, #32
 8008eb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	2200      	movs	r2, #0
 8008eba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3714      	adds	r7, #20
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d101      	bne.n	8008ee4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008ee0:	2302      	movs	r3, #2
 8008ee2:	e02d      	b.n	8008f40 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2224      	movs	r2, #36	@ 0x24
 8008ef0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f022 0201 	bic.w	r2, r2, #1
 8008f0a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	683a      	ldr	r2, [r7, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f20:	6878      	ldr	r0, [r7, #4]
 8008f22:	f000 f8a3 	bl	800906c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	68fa      	ldr	r2, [r7, #12]
 8008f2c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2220      	movs	r2, #32
 8008f32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3710      	adds	r7, #16
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
 8008f50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d101      	bne.n	8008f60 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008f5c:	2302      	movs	r3, #2
 8008f5e:	e02d      	b.n	8008fbc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2201      	movs	r2, #1
 8008f64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2224      	movs	r2, #36	@ 0x24
 8008f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	681a      	ldr	r2, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	689b      	ldr	r3, [r3, #8]
 8008f8e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	430a      	orrs	r2, r1
 8008f9a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f000 f865 	bl	800906c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008fba:	2300      	movs	r3, #0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b08c      	sub	sp, #48	@ 0x30
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	4613      	mov	r3, r2
 8008fd0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd8:	2b20      	cmp	r3, #32
 8008fda:	d142      	bne.n	8009062 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d002      	beq.n	8008fe8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 8008fe2:	88fb      	ldrh	r3, [r7, #6]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d101      	bne.n	8008fec <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e03b      	b.n	8009064 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008ff8:	88fb      	ldrh	r3, [r7, #6]
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	68b9      	ldr	r1, [r7, #8]
 8008ffe:	68f8      	ldr	r0, [r7, #12]
 8009000:	f7ff fc32 	bl	8008868 <UART_Start_Receive_DMA>
 8009004:	4603      	mov	r3, r0
 8009006:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800900a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800900e:	2b00      	cmp	r3, #0
 8009010:	d124      	bne.n	800905c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009016:	2b01      	cmp	r3, #1
 8009018:	d11d      	bne.n	8009056 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2210      	movs	r2, #16
 8009020:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009028:	69bb      	ldr	r3, [r7, #24]
 800902a:	e853 3f00 	ldrex	r3, [r3]
 800902e:	617b      	str	r3, [r7, #20]
   return(result);
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	f043 0310 	orr.w	r3, r3, #16
 8009036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	461a      	mov	r2, r3
 800903e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009040:	627b      	str	r3, [r7, #36]	@ 0x24
 8009042:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6a39      	ldr	r1, [r7, #32]
 8009046:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009048:	e841 2300 	strex	r3, r2, [r1]
 800904c:	61fb      	str	r3, [r7, #28]
   return(result);
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1e6      	bne.n	8009022 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009054:	e002      	b.n	800905c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800905c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009060:	e000      	b.n	8009064 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009062:	2302      	movs	r3, #2
  }
}
 8009064:	4618      	mov	r0, r3
 8009066:	3730      	adds	r7, #48	@ 0x30
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800906c:	b480      	push	{r7}
 800906e:	b085      	sub	sp, #20
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009078:	2b00      	cmp	r3, #0
 800907a:	d108      	bne.n	800908e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2201      	movs	r2, #1
 8009088:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800908c:	e031      	b.n	80090f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800908e:	2310      	movs	r3, #16
 8009090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009092:	2310      	movs	r3, #16
 8009094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	0e5b      	lsrs	r3, r3, #25
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	f003 0307 	and.w	r3, r3, #7
 80090a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	0f5b      	lsrs	r3, r3, #29
 80090ae:	b2db      	uxtb	r3, r3
 80090b0:	f003 0307 	and.w	r3, r3, #7
 80090b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090b6:	7bbb      	ldrb	r3, [r7, #14]
 80090b8:	7b3a      	ldrb	r2, [r7, #12]
 80090ba:	4911      	ldr	r1, [pc, #68]	@ (8009100 <UARTEx_SetNbDataToProcess+0x94>)
 80090bc:	5c8a      	ldrb	r2, [r1, r2]
 80090be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80090c2:	7b3a      	ldrb	r2, [r7, #12]
 80090c4:	490f      	ldr	r1, [pc, #60]	@ (8009104 <UARTEx_SetNbDataToProcess+0x98>)
 80090c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80090c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80090cc:	b29a      	uxth	r2, r3
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	7b7a      	ldrb	r2, [r7, #13]
 80090d8:	4909      	ldr	r1, [pc, #36]	@ (8009100 <UARTEx_SetNbDataToProcess+0x94>)
 80090da:	5c8a      	ldrb	r2, [r1, r2]
 80090dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80090e0:	7b7a      	ldrb	r2, [r7, #13]
 80090e2:	4908      	ldr	r1, [pc, #32]	@ (8009104 <UARTEx_SetNbDataToProcess+0x98>)
 80090e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80090e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr
 80090fe:	bf00      	nop
 8009100:	080091a8 	.word	0x080091a8
 8009104:	080091b0 	.word	0x080091b0

08009108 <memset>:
 8009108:	4402      	add	r2, r0
 800910a:	4603      	mov	r3, r0
 800910c:	4293      	cmp	r3, r2
 800910e:	d100      	bne.n	8009112 <memset+0xa>
 8009110:	4770      	bx	lr
 8009112:	f803 1b01 	strb.w	r1, [r3], #1
 8009116:	e7f9      	b.n	800910c <memset+0x4>

08009118 <__libc_init_array>:
 8009118:	b570      	push	{r4, r5, r6, lr}
 800911a:	4d0d      	ldr	r5, [pc, #52]	@ (8009150 <__libc_init_array+0x38>)
 800911c:	4c0d      	ldr	r4, [pc, #52]	@ (8009154 <__libc_init_array+0x3c>)
 800911e:	1b64      	subs	r4, r4, r5
 8009120:	10a4      	asrs	r4, r4, #2
 8009122:	2600      	movs	r6, #0
 8009124:	42a6      	cmp	r6, r4
 8009126:	d109      	bne.n	800913c <__libc_init_array+0x24>
 8009128:	4d0b      	ldr	r5, [pc, #44]	@ (8009158 <__libc_init_array+0x40>)
 800912a:	4c0c      	ldr	r4, [pc, #48]	@ (800915c <__libc_init_array+0x44>)
 800912c:	f000 f818 	bl	8009160 <_init>
 8009130:	1b64      	subs	r4, r4, r5
 8009132:	10a4      	asrs	r4, r4, #2
 8009134:	2600      	movs	r6, #0
 8009136:	42a6      	cmp	r6, r4
 8009138:	d105      	bne.n	8009146 <__libc_init_array+0x2e>
 800913a:	bd70      	pop	{r4, r5, r6, pc}
 800913c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009140:	4798      	blx	r3
 8009142:	3601      	adds	r6, #1
 8009144:	e7ee      	b.n	8009124 <__libc_init_array+0xc>
 8009146:	f855 3b04 	ldr.w	r3, [r5], #4
 800914a:	4798      	blx	r3
 800914c:	3601      	adds	r6, #1
 800914e:	e7f2      	b.n	8009136 <__libc_init_array+0x1e>
 8009150:	080091c0 	.word	0x080091c0
 8009154:	080091c0 	.word	0x080091c0
 8009158:	080091c0 	.word	0x080091c0
 800915c:	080091c4 	.word	0x080091c4

08009160 <_init>:
 8009160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009162:	bf00      	nop
 8009164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009166:	bc08      	pop	{r3}
 8009168:	469e      	mov	lr, r3
 800916a:	4770      	bx	lr

0800916c <_fini>:
 800916c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916e:	bf00      	nop
 8009170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009172:	bc08      	pop	{r3}
 8009174:	469e      	mov	lr, r3
 8009176:	4770      	bx	lr
