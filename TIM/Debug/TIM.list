
TIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009004  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800929c  0800929c  0000a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080092dc  080092dc  0000a2dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080092e4  080092e4  0000a2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080092e8  080092e8  0000a2e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000050  24000000  080092ec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001f0  24000050  0800933c  0000b050  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000240  0800933c  0000b240  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b050  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017329  00000000  00000000  0000b07e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a13  00000000  00000000  000223a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000010c0  00000000  00000000  00024dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000d11  00000000  00000000  00025e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037614  00000000  00000000  00026b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00018e54  00000000  00000000  0005e1a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00162128  00000000  00000000  00076ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d9121  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004630  00000000  00000000  001d9164  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001dd794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000050 	.word	0x24000050
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009284 	.word	0x08009284

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000054 	.word	0x24000054
 80002d4:	08009284 	.word	0x08009284

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ce:	4b11      	ldr	r3, [pc, #68]	@ (8000614 <MX_DMA_Init+0x4c>)
 80005d0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005d4:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <MX_DMA_Init+0x4c>)
 80005d6:	f043 0301 	orr.w	r3, r3, #1
 80005da:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80005de:	4b0d      	ldr	r3, [pc, #52]	@ (8000614 <MX_DMA_Init+0x4c>)
 80005e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80005e4:	f003 0301 	and.w	r3, r3, #1
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2100      	movs	r1, #0
 80005f0:	200b      	movs	r0, #11
 80005f2:	f000 fd6c 	bl	80010ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005f6:	200b      	movs	r0, #11
 80005f8:	f000 fd83 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	200c      	movs	r0, #12
 8000602:	f000 fd64 	bl	80010ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000606:	200c      	movs	r0, #12
 8000608:	f000 fd7b 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 800060c:	bf00      	nop
 800060e:	3708      	adds	r7, #8
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	58024400 	.word	0x58024400

08000618 <MX_GPIO_Init>:
/** Configure pins
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b12      	ldr	r3, [pc, #72]	@ (8000668 <MX_GPIO_Init+0x50>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000624:	4a10      	ldr	r2, [pc, #64]	@ (8000668 <MX_GPIO_Init+0x50>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800062e:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_GPIO_Init+0x50>)
 8000630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063c:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_GPIO_Init+0x50>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000642:	4a09      	ldr	r2, [pc, #36]	@ (8000668 <MX_GPIO_Init+0x50>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000648:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064c:	4b06      	ldr	r3, [pc, #24]	@ (8000668 <MX_GPIO_Init+0x50>)
 800064e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000656:	603b      	str	r3, [r7, #0]
 8000658:	683b      	ldr	r3, [r7, #0]

}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	58024400 	.word	0x58024400

0800066c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE BEGIN 0 */

char message[] = "🤞✌️🤷‍♂️🤷‍♀️🤦‍♀️🤦‍♂️";

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d104      	bne.n	8000686 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		HAL_UART_Transmit_DMA(&huart1, (uint8_t*)message, sizeof(message));
 800067c:	223f      	movs	r2, #63	@ 0x3f
 800067e:	4905      	ldr	r1, [pc, #20]	@ (8000694 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000680:	4805      	ldr	r0, [pc, #20]	@ (8000698 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000682:	f006 ffab 	bl	80075dc <HAL_UART_Transmit_DMA>
	}
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2400006c 	.word	0x2400006c
 8000694:	24000000 	.word	0x24000000
 8000698:	240000b8 	.word	0x240000b8

0800069c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a0:	f000 f8c4 	bl	800082c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006a4:	f000 fb9a 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006a8:	f000 f810 	bl	80006cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ac:	f7ff ffb4 	bl	8000618 <MX_GPIO_Init>
  MX_DMA_Init();
 80006b0:	f7ff ff8a 	bl	80005c8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006b4:	f000 fa46 	bl	8000b44 <MX_USART1_UART_Init>
  MX_TIM6_Init();
 80006b8:	f000 f9e4 	bl	8000a84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 80006bc:	4802      	ldr	r0, [pc, #8]	@ (80006c8 <main+0x2c>)
 80006be:	f006 fc43 	bl	8006f48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006c2:	bf00      	nop
 80006c4:	e7fd      	b.n	80006c2 <main+0x26>
 80006c6:	bf00      	nop
 80006c8:	2400006c 	.word	0x2400006c

080006cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b09e      	sub	sp, #120	@ 0x78
 80006d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006d2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80006d6:	224c      	movs	r2, #76	@ 0x4c
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f008 fda6 	bl	800922c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 fd9f 	bl	800922c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80006ee:	2002      	movs	r0, #2
 80006f0:	f003 fd86 	bl	8004200 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	4b49      	ldr	r3, [pc, #292]	@ (8000820 <SystemClock_Config+0x154>)
 80006fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80006fc:	4a48      	ldr	r2, [pc, #288]	@ (8000820 <SystemClock_Config+0x154>)
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000704:	4b46      	ldr	r3, [pc, #280]	@ (8000820 <SystemClock_Config+0x154>)
 8000706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000708:	f003 0301 	and.w	r3, r3, #1
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b45      	ldr	r3, [pc, #276]	@ (8000824 <SystemClock_Config+0x158>)
 8000710:	699b      	ldr	r3, [r3, #24]
 8000712:	4a44      	ldr	r2, [pc, #272]	@ (8000824 <SystemClock_Config+0x158>)
 8000714:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000718:	6193      	str	r3, [r2, #24]
 800071a:	4b42      	ldr	r3, [pc, #264]	@ (8000824 <SystemClock_Config+0x158>)
 800071c:	699b      	ldr	r3, [r3, #24]
 800071e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000726:	bf00      	nop
 8000728:	4b3e      	ldr	r3, [pc, #248]	@ (8000824 <SystemClock_Config+0x158>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000730:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000734:	d1f8      	bne.n	8000728 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b3c      	ldr	r3, [pc, #240]	@ (8000828 <SystemClock_Config+0x15c>)
 8000738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800073c:	4a3a      	ldr	r2, [pc, #232]	@ (8000828 <SystemClock_Config+0x15c>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000746:	4b38      	ldr	r3, [pc, #224]	@ (8000828 <SystemClock_Config+0x15c>)
 8000748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000754:	2300      	movs	r3, #0
 8000756:	603b      	str	r3, [r7, #0]
 8000758:	4b32      	ldr	r3, [pc, #200]	@ (8000824 <SystemClock_Config+0x158>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	4a31      	ldr	r2, [pc, #196]	@ (8000824 <SystemClock_Config+0x158>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000762:	6193      	str	r3, [r2, #24]
 8000764:	4b2f      	ldr	r3, [pc, #188]	@ (8000824 <SystemClock_Config+0x158>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800076c:	603b      	str	r3, [r7, #0]
 800076e:	4b2c      	ldr	r3, [pc, #176]	@ (8000820 <SystemClock_Config+0x154>)
 8000770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000772:	4a2b      	ldr	r2, [pc, #172]	@ (8000820 <SystemClock_Config+0x154>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800077a:	4b29      	ldr	r3, [pc, #164]	@ (8000820 <SystemClock_Config+0x154>)
 800077c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000786:	bf00      	nop
 8000788:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <SystemClock_Config+0x158>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000790:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000794:	d1f8      	bne.n	8000788 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000796:	2302      	movs	r3, #2
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800079a:	2301      	movs	r3, #1
 800079c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079e:	2340      	movs	r3, #64	@ 0x40
 80007a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a6:	2300      	movs	r3, #0
 80007a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007aa:	2304      	movs	r3, #4
 80007ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80007ae:	233c      	movs	r3, #60	@ 0x3c
 80007b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007b2:	2302      	movs	r3, #2
 80007b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b6:	2302      	movs	r3, #2
 80007b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007ba:	2302      	movs	r3, #2
 80007bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80007be:	230c      	movs	r3, #12
 80007c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007c2:	2300      	movs	r3, #0
 80007c4:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007ce:	4618      	mov	r0, r3
 80007d0:	f003 fd50 	bl	8004274 <HAL_RCC_OscConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x112>
  {
    Error_Handler();
 80007da:	f000 f853 	bl	8000884 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007de:	233f      	movs	r3, #63	@ 0x3f
 80007e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e2:	2303      	movs	r3, #3
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007ee:	2340      	movs	r3, #64	@ 0x40
 80007f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007f2:	2340      	movs	r3, #64	@ 0x40
 80007f4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007fc:	2340      	movs	r3, #64	@ 0x40
 80007fe:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2104      	movs	r1, #4
 8000806:	4618      	mov	r0, r3
 8000808:	f004 f98e 	bl	8004b28 <HAL_RCC_ClockConfig>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000812:	f000 f837 	bl	8000884 <Error_Handler>
  }
}
 8000816:	bf00      	nop
 8000818:	3778      	adds	r7, #120	@ 0x78
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	58000400 	.word	0x58000400
 8000824:	58024800 	.word	0x58024800
 8000828:	58024400 	.word	0x58024400

0800082c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b084      	sub	sp, #16
 8000830:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800083e:	f000 fc7b 	bl	8001138 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000842:	2301      	movs	r3, #1
 8000844:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000846:	2300      	movs	r3, #0
 8000848:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800084e:	231f      	movs	r3, #31
 8000850:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000852:	2387      	movs	r3, #135	@ 0x87
 8000854:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000856:	2300      	movs	r3, #0
 8000858:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800085a:	2300      	movs	r3, #0
 800085c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085e:	2301      	movs	r3, #1
 8000860:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000862:	2301      	movs	r3, #1
 8000864:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086e:	463b      	mov	r3, r7
 8000870:	4618      	mov	r0, r3
 8000872:	f000 fc99 	bl	80011a8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000876:	2004      	movs	r0, #4
 8000878:	f000 fc76 	bl	8001168 <HAL_MPU_Enable>

}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000888:	b672      	cpsid	i
}
 800088a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800088c:	bf00      	nop
 800088e:	e7fd      	b.n	800088c <Error_Handler+0x8>

08000890 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000896:	4b0a      	ldr	r3, [pc, #40]	@ (80008c0 <HAL_MspInit+0x30>)
 8000898:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800089c:	4a08      	ldr	r2, [pc, #32]	@ (80008c0 <HAL_MspInit+0x30>)
 800089e:	f043 0302 	orr.w	r3, r3, #2
 80008a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008a6:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <HAL_MspInit+0x30>)
 80008a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008ac:	f003 0302 	and.w	r3, r3, #2
 80008b0:	607b      	str	r3, [r7, #4]
 80008b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b4:	bf00      	nop
 80008b6:	370c      	adds	r7, #12
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	58024400 	.word	0x58024400

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800091a:	f000 fad1 	bl	8000ec0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <DMA1_Stream0_IRQHandler+0x10>)
 800092a:	f001 ffa7 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	2400014c 	.word	0x2400014c

08000938 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800093c:	4802      	ldr	r0, [pc, #8]	@ (8000948 <DMA1_Stream1_IRQHandler+0x10>)
 800093e:	f001 ff9d 	bl	800287c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	240001c4 	.word	0x240001c4

0800094c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000950:	4802      	ldr	r0, [pc, #8]	@ (800095c <USART1_IRQHandler+0x10>)
 8000952:	f006 fec3 	bl	80076dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	240000b8 	.word	0x240000b8

08000960 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <TIM6_DAC_IRQHandler+0x10>)
 8000966:	f006 fb67 	bl	8007038 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	2400006c 	.word	0x2400006c

08000974 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000978:	4b37      	ldr	r3, [pc, #220]	@ (8000a58 <SystemInit+0xe4>)
 800097a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800097e:	4a36      	ldr	r2, [pc, #216]	@ (8000a58 <SystemInit+0xe4>)
 8000980:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000984:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000988:	4b34      	ldr	r3, [pc, #208]	@ (8000a5c <SystemInit+0xe8>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f003 030f 	and.w	r3, r3, #15
 8000990:	2b06      	cmp	r3, #6
 8000992:	d807      	bhi.n	80009a4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000994:	4b31      	ldr	r3, [pc, #196]	@ (8000a5c <SystemInit+0xe8>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f023 030f 	bic.w	r3, r3, #15
 800099c:	4a2f      	ldr	r2, [pc, #188]	@ (8000a5c <SystemInit+0xe8>)
 800099e:	f043 0307 	orr.w	r3, r3, #7
 80009a2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a60 <SystemInit+0xec>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a60 <SystemInit+0xec>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <SystemInit+0xec>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009b6:	4b2a      	ldr	r3, [pc, #168]	@ (8000a60 <SystemInit+0xec>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	4929      	ldr	r1, [pc, #164]	@ (8000a60 <SystemInit+0xec>)
 80009bc:	4b29      	ldr	r3, [pc, #164]	@ (8000a64 <SystemInit+0xf0>)
 80009be:	4013      	ands	r3, r2
 80009c0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009c2:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemInit+0xe8>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f003 0308 	and.w	r3, r3, #8
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d007      	beq.n	80009de <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009ce:	4b23      	ldr	r3, [pc, #140]	@ (8000a5c <SystemInit+0xe8>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f023 030f 	bic.w	r3, r3, #15
 80009d6:	4a21      	ldr	r2, [pc, #132]	@ (8000a5c <SystemInit+0xe8>)
 80009d8:	f043 0307 	orr.w	r3, r3, #7
 80009dc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80009de:	4b20      	ldr	r3, [pc, #128]	@ (8000a60 <SystemInit+0xec>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000a60 <SystemInit+0xec>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <SystemInit+0xec>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <SystemInit+0xec>)
 80009f2:	4a1d      	ldr	r2, [pc, #116]	@ (8000a68 <SystemInit+0xf4>)
 80009f4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a60 <SystemInit+0xec>)
 80009f8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <SystemInit+0xf8>)
 80009fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80009fc:	4b18      	ldr	r3, [pc, #96]	@ (8000a60 <SystemInit+0xec>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <SystemInit+0xfc>)
 8000a00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a02:	4b17      	ldr	r3, [pc, #92]	@ (8000a60 <SystemInit+0xec>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a08:	4b15      	ldr	r3, [pc, #84]	@ (8000a60 <SystemInit+0xec>)
 8000a0a:	4a19      	ldr	r2, [pc, #100]	@ (8000a70 <SystemInit+0xfc>)
 8000a0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a0e:	4b14      	ldr	r3, [pc, #80]	@ (8000a60 <SystemInit+0xec>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a14:	4b12      	ldr	r3, [pc, #72]	@ (8000a60 <SystemInit+0xec>)
 8000a16:	4a16      	ldr	r2, [pc, #88]	@ (8000a70 <SystemInit+0xfc>)
 8000a18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a1a:	4b11      	ldr	r3, [pc, #68]	@ (8000a60 <SystemInit+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	@ (8000a60 <SystemInit+0xec>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0e      	ldr	r2, [pc, #56]	@ (8000a60 <SystemInit+0xec>)
 8000a26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a60 <SystemInit+0xec>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <SystemInit+0x100>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	4b10      	ldr	r3, [pc, #64]	@ (8000a78 <SystemInit+0x104>)
 8000a38:	4013      	ands	r3, r2
 8000a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000a3e:	d202      	bcs.n	8000a46 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a40:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <SystemInit+0x108>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a46:	4b0e      	ldr	r3, [pc, #56]	@ (8000a80 <SystemInit+0x10c>)
 8000a48:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000a4c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr
 8000a58:	e000ed00 	.word	0xe000ed00
 8000a5c:	52002000 	.word	0x52002000
 8000a60:	58024400 	.word	0x58024400
 8000a64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000a68:	02020200 	.word	0x02020200
 8000a6c:	01ff0000 	.word	0x01ff0000
 8000a70:	01010280 	.word	0x01010280
 8000a74:	5c001000 	.word	0x5c001000
 8000a78:	ffff0000 	.word	0xffff0000
 8000a7c:	51008108 	.word	0x51008108
 8000a80:	52004000 	.word	0x52004000

08000a84 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a94:	4b15      	ldr	r3, [pc, #84]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000a96:	4a16      	ldr	r2, [pc, #88]	@ (8000af0 <MX_TIM6_Init+0x6c>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24000-1;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000a9c:	f645 52bf 	movw	r2, #23999	@ 0x5dbf
 8000aa0:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa2:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8000aa8:	4b10      	ldr	r3, [pc, #64]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000aaa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000aae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab0:	4b0e      	ldr	r3, [pc, #56]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000ab6:	480d      	ldr	r0, [pc, #52]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000ab8:	f006 f9ee 	bl	8006e98 <HAL_TIM_Base_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000ac2:	f7ff fedf 	bl	8000884 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4806      	ldr	r0, [pc, #24]	@ (8000aec <MX_TIM6_Init+0x68>)
 8000ad4:	f006 fc86 	bl	80073e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000ade:	f7ff fed1 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	3710      	adds	r7, #16
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2400006c 	.word	0x2400006c
 8000af0:	40001000 	.word	0x40001000

08000af4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a0e      	ldr	r2, [pc, #56]	@ (8000b3c <HAL_TIM_Base_MspInit+0x48>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d116      	bne.n	8000b34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <HAL_TIM_Base_MspInit+0x4c>)
 8000b08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b40 <HAL_TIM_Base_MspInit+0x4c>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000b16:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <HAL_TIM_Base_MspInit+0x4c>)
 8000b18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000b1c:	f003 0310 	and.w	r3, r3, #16
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2036      	movs	r0, #54	@ 0x36
 8000b2a:	f000 fad0 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b2e:	2036      	movs	r0, #54	@ 0x36
 8000b30:	f000 fae7 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	3710      	adds	r7, #16
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40001000 	.word	0x40001000
 8000b40:	58024400 	.word	0x58024400

08000b44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b48:	4b22      	ldr	r3, [pc, #136]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b4a:	4a23      	ldr	r2, [pc, #140]	@ (8000bd8 <MX_USART1_UART_Init+0x94>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b17      	ldr	r3, [pc, #92]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b16      	ldr	r3, [pc, #88]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b80:	4b14      	ldr	r3, [pc, #80]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b86:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8c:	4811      	ldr	r0, [pc, #68]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000b8e:	f006 fcd5 	bl	800753c <HAL_UART_Init>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b98:	f7ff fe74 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	480d      	ldr	r0, [pc, #52]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000ba0:	f008 fa79 	bl	8009096 <HAL_UARTEx_SetTxFifoThreshold>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000baa:	f7ff fe6b 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4808      	ldr	r0, [pc, #32]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bb2:	f008 faae 	bl	8009112 <HAL_UARTEx_SetRxFifoThreshold>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000bbc:	f7ff fe62 	bl	8000884 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	@ (8000bd4 <MX_USART1_UART_Init+0x90>)
 8000bc2:	f008 fa2f 	bl	8009024 <HAL_UARTEx_DisableFifoMode>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000bcc:	f7ff fe5a 	bl	8000884 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	240000b8 	.word	0x240000b8
 8000bd8:	40011000 	.word	0x40011000

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0ba      	sub	sp, #232	@ 0xe8
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000be8:	2200      	movs	r2, #0
 8000bea:	601a      	str	r2, [r3, #0]
 8000bec:	605a      	str	r2, [r3, #4]
 8000bee:	609a      	str	r2, [r3, #8]
 8000bf0:	60da      	str	r2, [r3, #12]
 8000bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf4:	f107 0310 	add.w	r3, r7, #16
 8000bf8:	22c0      	movs	r2, #192	@ 0xc0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f008 fb15 	bl	800922c <memset>
  if(uartHandle->Instance==USART1)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a59      	ldr	r2, [pc, #356]	@ (8000d6c <HAL_UART_MspInit+0x190>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	f040 80aa 	bne.w	8000d62 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c0e:	f04f 0201 	mov.w	r2, #1
 8000c12:	f04f 0300 	mov.w	r3, #0
 8000c16:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c20:	f107 0310 	add.w	r3, r7, #16
 8000c24:	4618      	mov	r0, r3
 8000c26:	f004 fb0b 	bl	8005240 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000c30:	f7ff fe28 	bl	8000884 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c34:	4b4e      	ldr	r3, [pc, #312]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c3a:	4a4d      	ldr	r2, [pc, #308]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c3c:	f043 0310 	orr.w	r3, r3, #16
 8000c40:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000c44:	4b4a      	ldr	r3, [pc, #296]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000c4a:	f003 0310 	and.w	r3, r3, #16
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b47      	ldr	r3, [pc, #284]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c58:	4a45      	ldr	r2, [pc, #276]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c5a:	f043 0301 	orr.w	r3, r3, #1
 8000c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c62:	4b43      	ldr	r3, [pc, #268]	@ (8000d70 <HAL_UART_MspInit+0x194>)
 8000c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c68:	f003 0301 	and.w	r3, r3, #1
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8000c70:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000c74:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c8a:	2307      	movs	r3, #7
 8000c8c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c94:	4619      	mov	r1, r3
 8000c96:	4837      	ldr	r0, [pc, #220]	@ (8000d74 <HAL_UART_MspInit+0x198>)
 8000c98:	f003 f902 	bl	8003ea0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8000c9c:	4b36      	ldr	r3, [pc, #216]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000c9e:	4a37      	ldr	r2, [pc, #220]	@ (8000d7c <HAL_UART_MspInit+0x1a0>)
 8000ca0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000ca2:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000ca4:	2229      	movs	r2, #41	@ 0x29
 8000ca6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca8:	4b33      	ldr	r3, [pc, #204]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cae:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb4:	4b30      	ldr	r3, [pc, #192]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000cba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000cda:	4827      	ldr	r0, [pc, #156]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cdc:	f000 faa4 	bl	8001228 <HAL_DMA_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8000ce6:	f7ff fdcd 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a22      	ldr	r2, [pc, #136]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000cf2:	4a21      	ldr	r2, [pc, #132]	@ (8000d78 <HAL_UART_MspInit+0x19c>)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 8000cf8:	4b21      	ldr	r3, [pc, #132]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000cfa:	4a22      	ldr	r2, [pc, #136]	@ (8000d84 <HAL_UART_MspInit+0x1a8>)
 8000cfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d00:	222a      	movs	r2, #42	@ 0x2a
 8000d02:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d06:	2240      	movs	r2, #64	@ 0x40
 8000d08:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d10:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000d24:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d2a:	4b15      	ldr	r3, [pc, #84]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d30:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000d36:	4812      	ldr	r0, [pc, #72]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d38:	f000 fa76 	bl	8001228 <HAL_DMA_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8000d42:	f7ff fd9f 	bl	8000884 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a0d      	ldr	r2, [pc, #52]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d4a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000d4c:	4a0c      	ldr	r2, [pc, #48]	@ (8000d80 <HAL_UART_MspInit+0x1a4>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2025      	movs	r0, #37	@ 0x25
 8000d58:	f000 f9b9 	bl	80010ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5c:	2025      	movs	r0, #37	@ 0x25
 8000d5e:	f000 f9d0 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d62:	bf00      	nop
 8000d64:	37e8      	adds	r7, #232	@ 0xe8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020000 	.word	0x58020000
 8000d78:	2400014c 	.word	0x2400014c
 8000d7c:	40020010 	.word	0x40020010
 8000d80:	240001c4 	.word	0x240001c4
 8000d84:	40020028 	.word	0x40020028

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d8c:	f7ff fdf2 	bl	8000974 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f008 fa41 	bl	800923c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc6f 	bl	800069c <main>
  bx  lr
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000dc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dc8:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8000dcc:	080092ec 	.word	0x080092ec
  ldr r2, =_sbss
 8000dd0:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8000dd4:	24000240 	.word	0x24000240

08000dd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC3_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de2:	2003      	movs	r0, #3
 8000de4:	f000 f968 	bl	80010b8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000de8:	f004 f854 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8000dec:	4602      	mov	r2, r0
 8000dee:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <HAL_Init+0x68>)
 8000df0:	699b      	ldr	r3, [r3, #24]
 8000df2:	0a1b      	lsrs	r3, r3, #8
 8000df4:	f003 030f 	and.w	r3, r3, #15
 8000df8:	4913      	ldr	r1, [pc, #76]	@ (8000e48 <HAL_Init+0x6c>)
 8000dfa:	5ccb      	ldrb	r3, [r1, r3]
 8000dfc:	f003 031f 	and.w	r3, r3, #31
 8000e00:	fa22 f303 	lsr.w	r3, r2, r3
 8000e04:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e06:	4b0f      	ldr	r3, [pc, #60]	@ (8000e44 <HAL_Init+0x68>)
 8000e08:	699b      	ldr	r3, [r3, #24]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e48 <HAL_Init+0x6c>)
 8000e10:	5cd3      	ldrb	r3, [r2, r3]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	fa22 f303 	lsr.w	r3, r2, r3
 8000e1c:	4a0b      	ldr	r2, [pc, #44]	@ (8000e4c <HAL_Init+0x70>)
 8000e1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e20:	4a0b      	ldr	r2, [pc, #44]	@ (8000e50 <HAL_Init+0x74>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e26:	200f      	movs	r0, #15
 8000e28:	f000 f814 	bl	8000e54 <HAL_InitTick>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e32:	2301      	movs	r3, #1
 8000e34:	e002      	b.n	8000e3c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e36:	f7ff fd2b 	bl	8000890 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3a:	2300      	movs	r3, #0
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	58024400 	.word	0x58024400
 8000e48:	0800929c 	.word	0x0800929c
 8000e4c:	24000044 	.word	0x24000044
 8000e50:	24000040 	.word	0x24000040

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e5c:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_InitTick+0x60>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d101      	bne.n	8000e68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e021      	b.n	8000eac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <HAL_InitTick+0x64>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_InitTick+0x60>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	4619      	mov	r1, r3
 8000e72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f000 f94d 	bl	800111e <HAL_SYSTICK_Config>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00e      	b.n	8000eac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b0f      	cmp	r3, #15
 8000e92:	d80a      	bhi.n	8000eaa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e94:	2200      	movs	r2, #0
 8000e96:	6879      	ldr	r1, [r7, #4]
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f000 f917 	bl	80010ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ea0:	4a06      	ldr	r2, [pc, #24]	@ (8000ebc <HAL_InitTick+0x68>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	e000      	b.n	8000eac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2400004c 	.word	0x2400004c
 8000eb8:	24000040 	.word	0x24000040
 8000ebc:	24000048 	.word	0x24000048

08000ec0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec4:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x20>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4413      	add	r3, r2
 8000ed0:	4a04      	ldr	r2, [pc, #16]	@ (8000ee4 <HAL_IncTick+0x24>)
 8000ed2:	6013      	str	r3, [r2, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2400004c 	.word	0x2400004c
 8000ee4:	2400023c 	.word	0x2400023c

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	@ (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	2400023c 	.word	0x2400023c

08000f00 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f04:	4b03      	ldr	r3, [pc, #12]	@ (8000f14 <HAL_GetREVID+0x14>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	0c1b      	lsrs	r3, r3, #16
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	5c001000 	.word	0x5c001000

08000f18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0b      	ldr	r3, [pc, #44]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f42:	4313      	orrs	r3, r2
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x40>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00
 8000f5c:	05fa0000 	.word	0x05fa0000

08000f60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	@ (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	db0b      	blt.n	8000fa6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8e:	88fb      	ldrh	r3, [r7, #6]
 8000f90:	f003 021f 	and.w	r2, r3, #31
 8000f94:	4907      	ldr	r1, [pc, #28]	@ (8000fb4 <__NVIC_EnableIRQ+0x38>)
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	095b      	lsrs	r3, r3, #5
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	fa00 f202 	lsl.w	r2, r0, r2
 8000fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000e100 	.word	0xe000e100

08000fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	6039      	str	r1, [r7, #0]
 8000fc2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	db0a      	blt.n	8000fe2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2da      	uxtb	r2, r3
 8000fd0:	490c      	ldr	r1, [pc, #48]	@ (8001004 <__NVIC_SetPriority+0x4c>)
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	0112      	lsls	r2, r2, #4
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	440b      	add	r3, r1
 8000fdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fe0:	e00a      	b.n	8000ff8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	4908      	ldr	r1, [pc, #32]	@ (8001008 <__NVIC_SetPriority+0x50>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	3b04      	subs	r3, #4
 8000ff0:	0112      	lsls	r2, r2, #4
 8000ff2:	b2d2      	uxtb	r2, r2
 8000ff4:	440b      	add	r3, r1
 8000ff6:	761a      	strb	r2, [r3, #24]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000e100 	.word	0xe000e100
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800100c:	b480      	push	{r7}
 800100e:	b089      	sub	sp, #36	@ 0x24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	f1c3 0307 	rsb	r3, r3, #7
 8001026:	2b04      	cmp	r3, #4
 8001028:	bf28      	it	cs
 800102a:	2304      	movcs	r3, #4
 800102c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102e:	69fb      	ldr	r3, [r7, #28]
 8001030:	3304      	adds	r3, #4
 8001032:	2b06      	cmp	r3, #6
 8001034:	d902      	bls.n	800103c <NVIC_EncodePriority+0x30>
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	3b03      	subs	r3, #3
 800103a:	e000      	b.n	800103e <NVIC_EncodePriority+0x32>
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001040:	f04f 32ff 	mov.w	r2, #4294967295
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43da      	mvns	r2, r3
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	401a      	ands	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001054:	f04f 31ff 	mov.w	r1, #4294967295
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa01 f303 	lsl.w	r3, r1, r3
 800105e:	43d9      	mvns	r1, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4313      	orrs	r3, r2
         );
}
 8001066:	4618      	mov	r0, r3
 8001068:	3724      	adds	r7, #36	@ 0x24
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
	...

08001074 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001084:	d301      	bcc.n	800108a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001086:	2301      	movs	r3, #1
 8001088:	e00f      	b.n	80010aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800108a:	4a0a      	ldr	r2, [pc, #40]	@ (80010b4 <SysTick_Config+0x40>)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001092:	210f      	movs	r1, #15
 8001094:	f04f 30ff 	mov.w	r0, #4294967295
 8001098:	f7ff ff8e 	bl	8000fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800109c:	4b05      	ldr	r3, [pc, #20]	@ (80010b4 <SysTick_Config+0x40>)
 800109e:	2200      	movs	r2, #0
 80010a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010a2:	4b04      	ldr	r3, [pc, #16]	@ (80010b4 <SysTick_Config+0x40>)
 80010a4:	2207      	movs	r2, #7
 80010a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	e000e010 	.word	0xe000e010

080010b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010c0:	6878      	ldr	r0, [r7, #4]
 80010c2:	f7ff ff29 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b086      	sub	sp, #24
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	60b9      	str	r1, [r7, #8]
 80010d8:	607a      	str	r2, [r7, #4]
 80010da:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff40 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff90 	bl	800100c <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5f 	bl	8000fb8 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff33 	bl	8000f7c <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa4 	bl	8001074 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800113c:	f3bf 8f5f 	dmb	sy
}
 8001140:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001142:	4b07      	ldr	r3, [pc, #28]	@ (8001160 <HAL_MPU_Disable+0x28>)
 8001144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001146:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_MPU_Disable+0x28>)
 8001148:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800114c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800114e:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_MPU_Disable+0x2c>)
 8001150:	2200      	movs	r2, #0
 8001152:	605a      	str	r2, [r3, #4]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00
 8001164:	e000ed90 	.word	0xe000ed90

08001168 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001170:	4a0b      	ldr	r2, [pc, #44]	@ (80011a0 <HAL_MPU_Enable+0x38>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800117a:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <HAL_MPU_Enable+0x3c>)
 800117c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800117e:	4a09      	ldr	r2, [pc, #36]	@ (80011a4 <HAL_MPU_Enable+0x3c>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001184:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001186:	f3bf 8f4f 	dsb	sy
}
 800118a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800118c:	f3bf 8f6f 	isb	sy
}
 8001190:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed90 	.word	0xe000ed90
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	785a      	ldrb	r2, [r3, #1]
 80011b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001224 <HAL_MPU_ConfigRegion+0x7c>)
 80011b6:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001224 <HAL_MPU_ConfigRegion+0x7c>)
 80011ba:	691b      	ldr	r3, [r3, #16]
 80011bc:	4a19      	ldr	r2, [pc, #100]	@ (8001224 <HAL_MPU_ConfigRegion+0x7c>)
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011c4:	4a17      	ldr	r2, [pc, #92]	@ (8001224 <HAL_MPU_ConfigRegion+0x7c>)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	7b1b      	ldrb	r3, [r3, #12]
 80011d0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7adb      	ldrb	r3, [r3, #11]
 80011d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	7a9b      	ldrb	r3, [r3, #10]
 80011de:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	7b5b      	ldrb	r3, [r3, #13]
 80011e6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	7b9b      	ldrb	r3, [r3, #14]
 80011ee:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80011f0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	7bdb      	ldrb	r3, [r3, #15]
 80011f6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011f8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	7a5b      	ldrb	r3, [r3, #9]
 80011fe:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001200:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7a1b      	ldrb	r3, [r3, #8]
 8001206:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001208:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	7812      	ldrb	r2, [r2, #0]
 800120e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001210:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001212:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001214:	6113      	str	r3, [r2, #16]
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000ed90 	.word	0xe000ed90

08001228 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff fe5a 	bl	8000ee8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d101      	bne.n	8001240 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e316      	b.n	800186e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a66      	ldr	r2, [pc, #408]	@ (80013e0 <HAL_DMA_Init+0x1b8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d04a      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a65      	ldr	r2, [pc, #404]	@ (80013e4 <HAL_DMA_Init+0x1bc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d045      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a63      	ldr	r2, [pc, #396]	@ (80013e8 <HAL_DMA_Init+0x1c0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d040      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a62      	ldr	r2, [pc, #392]	@ (80013ec <HAL_DMA_Init+0x1c4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d03b      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a60      	ldr	r2, [pc, #384]	@ (80013f0 <HAL_DMA_Init+0x1c8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d036      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a5f      	ldr	r2, [pc, #380]	@ (80013f4 <HAL_DMA_Init+0x1cc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d031      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a5d      	ldr	r2, [pc, #372]	@ (80013f8 <HAL_DMA_Init+0x1d0>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d02c      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a5c      	ldr	r2, [pc, #368]	@ (80013fc <HAL_DMA_Init+0x1d4>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d027      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a5a      	ldr	r2, [pc, #360]	@ (8001400 <HAL_DMA_Init+0x1d8>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d022      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a59      	ldr	r2, [pc, #356]	@ (8001404 <HAL_DMA_Init+0x1dc>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d01d      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a57      	ldr	r2, [pc, #348]	@ (8001408 <HAL_DMA_Init+0x1e0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d018      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	4a56      	ldr	r2, [pc, #344]	@ (800140c <HAL_DMA_Init+0x1e4>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d013      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a54      	ldr	r2, [pc, #336]	@ (8001410 <HAL_DMA_Init+0x1e8>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00e      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a53      	ldr	r2, [pc, #332]	@ (8001414 <HAL_DMA_Init+0x1ec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d009      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a51      	ldr	r2, [pc, #324]	@ (8001418 <HAL_DMA_Init+0x1f0>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d004      	beq.n	80012e0 <HAL_DMA_Init+0xb8>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a50      	ldr	r2, [pc, #320]	@ (800141c <HAL_DMA_Init+0x1f4>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d101      	bne.n	80012e4 <HAL_DMA_Init+0xbc>
 80012e0:	2301      	movs	r3, #1
 80012e2:	e000      	b.n	80012e6 <HAL_DMA_Init+0xbe>
 80012e4:	2300      	movs	r3, #0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 813b 	beq.w	8001562 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2202      	movs	r2, #2
 80012f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2200      	movs	r2, #0
 80012f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a37      	ldr	r2, [pc, #220]	@ (80013e0 <HAL_DMA_Init+0x1b8>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d04a      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a36      	ldr	r2, [pc, #216]	@ (80013e4 <HAL_DMA_Init+0x1bc>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d045      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a34      	ldr	r2, [pc, #208]	@ (80013e8 <HAL_DMA_Init+0x1c0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d040      	beq.n	800139c <HAL_DMA_Init+0x174>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a33      	ldr	r2, [pc, #204]	@ (80013ec <HAL_DMA_Init+0x1c4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d03b      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a31      	ldr	r2, [pc, #196]	@ (80013f0 <HAL_DMA_Init+0x1c8>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d036      	beq.n	800139c <HAL_DMA_Init+0x174>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a30      	ldr	r2, [pc, #192]	@ (80013f4 <HAL_DMA_Init+0x1cc>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d031      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a2e      	ldr	r2, [pc, #184]	@ (80013f8 <HAL_DMA_Init+0x1d0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d02c      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a2d      	ldr	r2, [pc, #180]	@ (80013fc <HAL_DMA_Init+0x1d4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d027      	beq.n	800139c <HAL_DMA_Init+0x174>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <HAL_DMA_Init+0x1d8>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d022      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2a      	ldr	r2, [pc, #168]	@ (8001404 <HAL_DMA_Init+0x1dc>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d01d      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a28      	ldr	r2, [pc, #160]	@ (8001408 <HAL_DMA_Init+0x1e0>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d018      	beq.n	800139c <HAL_DMA_Init+0x174>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a27      	ldr	r2, [pc, #156]	@ (800140c <HAL_DMA_Init+0x1e4>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d013      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a25      	ldr	r2, [pc, #148]	@ (8001410 <HAL_DMA_Init+0x1e8>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d00e      	beq.n	800139c <HAL_DMA_Init+0x174>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a24      	ldr	r2, [pc, #144]	@ (8001414 <HAL_DMA_Init+0x1ec>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d009      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a22      	ldr	r2, [pc, #136]	@ (8001418 <HAL_DMA_Init+0x1f0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d004      	beq.n	800139c <HAL_DMA_Init+0x174>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a21      	ldr	r2, [pc, #132]	@ (800141c <HAL_DMA_Init+0x1f4>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d108      	bne.n	80013ae <HAL_DMA_Init+0x186>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_DMA_Init+0x196>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0201 	bic.w	r2, r2, #1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80013be:	e02f      	b.n	8001420 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c0:	f7ff fd92 	bl	8000ee8 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b05      	cmp	r3, #5
 80013cc:	d928      	bls.n	8001420 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2220      	movs	r2, #32
 80013d2:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2203      	movs	r2, #3
 80013d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e246      	b.n	800186e <HAL_DMA_Init+0x646>
 80013e0:	40020010 	.word	0x40020010
 80013e4:	40020028 	.word	0x40020028
 80013e8:	40020040 	.word	0x40020040
 80013ec:	40020058 	.word	0x40020058
 80013f0:	40020070 	.word	0x40020070
 80013f4:	40020088 	.word	0x40020088
 80013f8:	400200a0 	.word	0x400200a0
 80013fc:	400200b8 	.word	0x400200b8
 8001400:	40020410 	.word	0x40020410
 8001404:	40020428 	.word	0x40020428
 8001408:	40020440 	.word	0x40020440
 800140c:	40020458 	.word	0x40020458
 8001410:	40020470 	.word	0x40020470
 8001414:	40020488 	.word	0x40020488
 8001418:	400204a0 	.word	0x400204a0
 800141c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1c8      	bne.n	80013c0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001436:	697a      	ldr	r2, [r7, #20]
 8001438:	4b83      	ldr	r3, [pc, #524]	@ (8001648 <HAL_DMA_Init+0x420>)
 800143a:	4013      	ands	r3, r2
 800143c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001446:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001452:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	699b      	ldr	r3, [r3, #24]
 8001458:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800145e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a1b      	ldr	r3, [r3, #32]
 8001464:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001466:	697a      	ldr	r2, [r7, #20]
 8001468:	4313      	orrs	r3, r2
 800146a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	2b04      	cmp	r3, #4
 8001472:	d107      	bne.n	8001484 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147c:	4313      	orrs	r3, r2
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4313      	orrs	r3, r2
 8001482:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001484:	4b71      	ldr	r3, [pc, #452]	@ (800164c <HAL_DMA_Init+0x424>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4b71      	ldr	r3, [pc, #452]	@ (8001650 <HAL_DMA_Init+0x428>)
 800148a:	4013      	ands	r3, r2
 800148c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001490:	d328      	bcc.n	80014e4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b28      	cmp	r3, #40	@ 0x28
 8001498:	d903      	bls.n	80014a2 <HAL_DMA_Init+0x27a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b2e      	cmp	r3, #46	@ 0x2e
 80014a0:	d917      	bls.n	80014d2 <HAL_DMA_Init+0x2aa>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b3e      	cmp	r3, #62	@ 0x3e
 80014a8:	d903      	bls.n	80014b2 <HAL_DMA_Init+0x28a>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b42      	cmp	r3, #66	@ 0x42
 80014b0:	d90f      	bls.n	80014d2 <HAL_DMA_Init+0x2aa>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b46      	cmp	r3, #70	@ 0x46
 80014b8:	d903      	bls.n	80014c2 <HAL_DMA_Init+0x29a>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	2b48      	cmp	r3, #72	@ 0x48
 80014c0:	d907      	bls.n	80014d2 <HAL_DMA_Init+0x2aa>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b4e      	cmp	r3, #78	@ 0x4e
 80014c8:	d905      	bls.n	80014d6 <HAL_DMA_Init+0x2ae>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b52      	cmp	r3, #82	@ 0x52
 80014d0:	d801      	bhi.n	80014d6 <HAL_DMA_Init+0x2ae>
 80014d2:	2301      	movs	r3, #1
 80014d4:	e000      	b.n	80014d8 <HAL_DMA_Init+0x2b0>
 80014d6:	2300      	movs	r3, #0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80014e2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	f023 0307 	bic.w	r3, r3, #7
 80014fa:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4313      	orrs	r3, r2
 8001504:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800150a:	2b04      	cmp	r3, #4
 800150c:	d117      	bne.n	800153e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	4313      	orrs	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f002 fb33 	bl	8003b8c <DMA_CheckFifoParam>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2240      	movs	r2, #64	@ 0x40
 8001530:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e197      	b.n	800186e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f002 fa6e 	bl	8003a28 <DMA_CalcBaseAndBitshift>
 800154c:	4603      	mov	r3, r0
 800154e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	f003 031f 	and.w	r3, r3, #31
 8001558:	223f      	movs	r2, #63	@ 0x3f
 800155a:	409a      	lsls	r2, r3
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	609a      	str	r2, [r3, #8]
 8001560:	e0cd      	b.n	80016fe <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <HAL_DMA_Init+0x42c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d022      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a39      	ldr	r2, [pc, #228]	@ (8001658 <HAL_DMA_Init+0x430>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d01d      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a38      	ldr	r2, [pc, #224]	@ (800165c <HAL_DMA_Init+0x434>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d018      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a36      	ldr	r2, [pc, #216]	@ (8001660 <HAL_DMA_Init+0x438>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d013      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a35      	ldr	r2, [pc, #212]	@ (8001664 <HAL_DMA_Init+0x43c>)
 8001590:	4293      	cmp	r3, r2
 8001592:	d00e      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a33      	ldr	r2, [pc, #204]	@ (8001668 <HAL_DMA_Init+0x440>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d009      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a32      	ldr	r2, [pc, #200]	@ (800166c <HAL_DMA_Init+0x444>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d004      	beq.n	80015b2 <HAL_DMA_Init+0x38a>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a30      	ldr	r2, [pc, #192]	@ (8001670 <HAL_DMA_Init+0x448>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_DMA_Init+0x38e>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <HAL_DMA_Init+0x390>
 80015b6:	2300      	movs	r3, #0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <HAL_DMA_Init+0x42c>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d021      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a22      	ldr	r2, [pc, #136]	@ (8001658 <HAL_DMA_Init+0x430>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d01c      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a21      	ldr	r2, [pc, #132]	@ (800165c <HAL_DMA_Init+0x434>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d017      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <HAL_DMA_Init+0x438>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d012      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <HAL_DMA_Init+0x43c>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d00d      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001668 <HAL_DMA_Init+0x440>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d008      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a1b      	ldr	r2, [pc, #108]	@ (800166c <HAL_DMA_Init+0x444>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d003      	beq.n	800160c <HAL_DMA_Init+0x3e4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a19      	ldr	r2, [pc, #100]	@ (8001670 <HAL_DMA_Init+0x448>)
 800160a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2202      	movs	r2, #2
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2200      	movs	r2, #0
 8001618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	4b13      	ldr	r3, [pc, #76]	@ (8001674 <HAL_DMA_Init+0x44c>)
 8001628:	4013      	ands	r3, r2
 800162a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b40      	cmp	r3, #64	@ 0x40
 8001632:	d021      	beq.n	8001678 <HAL_DMA_Init+0x450>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b80      	cmp	r3, #128	@ 0x80
 800163a:	d102      	bne.n	8001642 <HAL_DMA_Init+0x41a>
 800163c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001640:	e01b      	b.n	800167a <HAL_DMA_Init+0x452>
 8001642:	2300      	movs	r3, #0
 8001644:	e019      	b.n	800167a <HAL_DMA_Init+0x452>
 8001646:	bf00      	nop
 8001648:	fe10803f 	.word	0xfe10803f
 800164c:	5c001000 	.word	0x5c001000
 8001650:	ffff0000 	.word	0xffff0000
 8001654:	58025408 	.word	0x58025408
 8001658:	5802541c 	.word	0x5802541c
 800165c:	58025430 	.word	0x58025430
 8001660:	58025444 	.word	0x58025444
 8001664:	58025458 	.word	0x58025458
 8001668:	5802546c 	.word	0x5802546c
 800166c:	58025480 	.word	0x58025480
 8001670:	58025494 	.word	0x58025494
 8001674:	fffe000f 	.word	0xfffe000f
 8001678:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	68d2      	ldr	r2, [r2, #12]
 800167e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001680:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001688:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	695b      	ldr	r3, [r3, #20]
 800168e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001690:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001698:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69db      	ldr	r3, [r3, #28]
 800169e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80016a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80016a8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80016aa:	697a      	ldr	r2, [r7, #20]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	4b6e      	ldr	r3, [pc, #440]	@ (8001878 <HAL_DMA_Init+0x650>)
 80016c0:	4413      	add	r3, r2
 80016c2:	4a6e      	ldr	r2, [pc, #440]	@ (800187c <HAL_DMA_Init+0x654>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	009a      	lsls	r2, r3, #2
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f002 f9a9 	bl	8003a28 <DMA_CalcBaseAndBitshift>
 80016d6:	4603      	mov	r3, r0
 80016d8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016de:	f003 031f 	and.w	r3, r3, #31
 80016e2:	2201      	movs	r2, #1
 80016e4:	409a      	lsls	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	e008      	b.n	80016fe <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2240      	movs	r2, #64	@ 0x40
 80016f0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2203      	movs	r2, #3
 80016f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e0b7      	b.n	800186e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a5f      	ldr	r2, [pc, #380]	@ (8001880 <HAL_DMA_Init+0x658>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d072      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a5d      	ldr	r2, [pc, #372]	@ (8001884 <HAL_DMA_Init+0x65c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d06d      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a5c      	ldr	r2, [pc, #368]	@ (8001888 <HAL_DMA_Init+0x660>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d068      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a5a      	ldr	r2, [pc, #360]	@ (800188c <HAL_DMA_Init+0x664>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d063      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a59      	ldr	r2, [pc, #356]	@ (8001890 <HAL_DMA_Init+0x668>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d05e      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a57      	ldr	r2, [pc, #348]	@ (8001894 <HAL_DMA_Init+0x66c>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d059      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a56      	ldr	r2, [pc, #344]	@ (8001898 <HAL_DMA_Init+0x670>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d054      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a54      	ldr	r2, [pc, #336]	@ (800189c <HAL_DMA_Init+0x674>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d04f      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a53      	ldr	r2, [pc, #332]	@ (80018a0 <HAL_DMA_Init+0x678>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d04a      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a51      	ldr	r2, [pc, #324]	@ (80018a4 <HAL_DMA_Init+0x67c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d045      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a50      	ldr	r2, [pc, #320]	@ (80018a8 <HAL_DMA_Init+0x680>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d040      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a4e      	ldr	r2, [pc, #312]	@ (80018ac <HAL_DMA_Init+0x684>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d03b      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a4d      	ldr	r2, [pc, #308]	@ (80018b0 <HAL_DMA_Init+0x688>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d036      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a4b      	ldr	r2, [pc, #300]	@ (80018b4 <HAL_DMA_Init+0x68c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d031      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a4a      	ldr	r2, [pc, #296]	@ (80018b8 <HAL_DMA_Init+0x690>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d02c      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a48      	ldr	r2, [pc, #288]	@ (80018bc <HAL_DMA_Init+0x694>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d027      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a47      	ldr	r2, [pc, #284]	@ (80018c0 <HAL_DMA_Init+0x698>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d022      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a45      	ldr	r2, [pc, #276]	@ (80018c4 <HAL_DMA_Init+0x69c>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01d      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a44      	ldr	r2, [pc, #272]	@ (80018c8 <HAL_DMA_Init+0x6a0>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d018      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a42      	ldr	r2, [pc, #264]	@ (80018cc <HAL_DMA_Init+0x6a4>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d013      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a41      	ldr	r2, [pc, #260]	@ (80018d0 <HAL_DMA_Init+0x6a8>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d00e      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3f      	ldr	r2, [pc, #252]	@ (80018d4 <HAL_DMA_Init+0x6ac>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d009      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a3e      	ldr	r2, [pc, #248]	@ (80018d8 <HAL_DMA_Init+0x6b0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d004      	beq.n	80017ee <HAL_DMA_Init+0x5c6>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a3c      	ldr	r2, [pc, #240]	@ (80018dc <HAL_DMA_Init+0x6b4>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d101      	bne.n	80017f2 <HAL_DMA_Init+0x5ca>
 80017ee:	2301      	movs	r3, #1
 80017f0:	e000      	b.n	80017f4 <HAL_DMA_Init+0x5cc>
 80017f2:	2300      	movs	r3, #0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d032      	beq.n	800185e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f002 fa43 	bl	8003c84 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	689b      	ldr	r3, [r3, #8]
 8001802:	2b80      	cmp	r3, #128	@ 0x80
 8001804:	d102      	bne.n	800180c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001814:	b2d2      	uxtb	r2, r2
 8001816:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001820:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d010      	beq.n	800184c <HAL_DMA_Init+0x624>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b08      	cmp	r3, #8
 8001830:	d80c      	bhi.n	800184c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f002 fac0 	bl	8003db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001844:	687a      	ldr	r2, [r7, #4]
 8001846:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e008      	b.n	800185e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2201      	movs	r2, #1
 8001868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	a7fdabf8 	.word	0xa7fdabf8
 800187c:	cccccccd 	.word	0xcccccccd
 8001880:	40020010 	.word	0x40020010
 8001884:	40020028 	.word	0x40020028
 8001888:	40020040 	.word	0x40020040
 800188c:	40020058 	.word	0x40020058
 8001890:	40020070 	.word	0x40020070
 8001894:	40020088 	.word	0x40020088
 8001898:	400200a0 	.word	0x400200a0
 800189c:	400200b8 	.word	0x400200b8
 80018a0:	40020410 	.word	0x40020410
 80018a4:	40020428 	.word	0x40020428
 80018a8:	40020440 	.word	0x40020440
 80018ac:	40020458 	.word	0x40020458
 80018b0:	40020470 	.word	0x40020470
 80018b4:	40020488 	.word	0x40020488
 80018b8:	400204a0 	.word	0x400204a0
 80018bc:	400204b8 	.word	0x400204b8
 80018c0:	58025408 	.word	0x58025408
 80018c4:	5802541c 	.word	0x5802541c
 80018c8:	58025430 	.word	0x58025430
 80018cc:	58025444 	.word	0x58025444
 80018d0:	58025458 	.word	0x58025458
 80018d4:	5802546c 	.word	0x5802546c
 80018d8:	58025480 	.word	0x58025480
 80018dc:	58025494 	.word	0x58025494

080018e0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ee:	2300      	movs	r3, #0
 80018f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e226      	b.n	8001d4a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001902:	2b01      	cmp	r3, #1
 8001904:	d101      	bne.n	800190a <HAL_DMA_Start_IT+0x2a>
 8001906:	2302      	movs	r3, #2
 8001908:	e21f      	b.n	8001d4a <HAL_DMA_Start_IT+0x46a>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2201      	movs	r2, #1
 800190e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b01      	cmp	r3, #1
 800191c:	f040 820a 	bne.w	8001d34 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2202      	movs	r2, #2
 8001924:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	2200      	movs	r2, #0
 800192c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a68      	ldr	r2, [pc, #416]	@ (8001ad4 <HAL_DMA_Start_IT+0x1f4>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d04a      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a66      	ldr	r2, [pc, #408]	@ (8001ad8 <HAL_DMA_Start_IT+0x1f8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d045      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a65      	ldr	r2, [pc, #404]	@ (8001adc <HAL_DMA_Start_IT+0x1fc>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d040      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a63      	ldr	r2, [pc, #396]	@ (8001ae0 <HAL_DMA_Start_IT+0x200>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d03b      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a62      	ldr	r2, [pc, #392]	@ (8001ae4 <HAL_DMA_Start_IT+0x204>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d036      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a60      	ldr	r2, [pc, #384]	@ (8001ae8 <HAL_DMA_Start_IT+0x208>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d031      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5f      	ldr	r2, [pc, #380]	@ (8001aec <HAL_DMA_Start_IT+0x20c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d02c      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a5d      	ldr	r2, [pc, #372]	@ (8001af0 <HAL_DMA_Start_IT+0x210>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d027      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a5c      	ldr	r2, [pc, #368]	@ (8001af4 <HAL_DMA_Start_IT+0x214>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d022      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5a      	ldr	r2, [pc, #360]	@ (8001af8 <HAL_DMA_Start_IT+0x218>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d01d      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a59      	ldr	r2, [pc, #356]	@ (8001afc <HAL_DMA_Start_IT+0x21c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d018      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a57      	ldr	r2, [pc, #348]	@ (8001b00 <HAL_DMA_Start_IT+0x220>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d013      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a56      	ldr	r2, [pc, #344]	@ (8001b04 <HAL_DMA_Start_IT+0x224>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a54      	ldr	r2, [pc, #336]	@ (8001b08 <HAL_DMA_Start_IT+0x228>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d009      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a53      	ldr	r2, [pc, #332]	@ (8001b0c <HAL_DMA_Start_IT+0x22c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d004      	beq.n	80019ce <HAL_DMA_Start_IT+0xee>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a51      	ldr	r2, [pc, #324]	@ (8001b10 <HAL_DMA_Start_IT+0x230>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d108      	bne.n	80019e0 <HAL_DMA_Start_IT+0x100>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0201 	bic.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	e007      	b.n	80019f0 <HAL_DMA_Start_IT+0x110>
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	68b9      	ldr	r1, [r7, #8]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f001 fe6a 	bl	80036d0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a34      	ldr	r2, [pc, #208]	@ (8001ad4 <HAL_DMA_Start_IT+0x1f4>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d04a      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a33      	ldr	r2, [pc, #204]	@ (8001ad8 <HAL_DMA_Start_IT+0x1f8>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d045      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a31      	ldr	r2, [pc, #196]	@ (8001adc <HAL_DMA_Start_IT+0x1fc>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d040      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a30      	ldr	r2, [pc, #192]	@ (8001ae0 <HAL_DMA_Start_IT+0x200>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d03b      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_DMA_Start_IT+0x204>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d036      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a2d      	ldr	r2, [pc, #180]	@ (8001ae8 <HAL_DMA_Start_IT+0x208>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d031      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a2b      	ldr	r2, [pc, #172]	@ (8001aec <HAL_DMA_Start_IT+0x20c>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d02c      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a2a      	ldr	r2, [pc, #168]	@ (8001af0 <HAL_DMA_Start_IT+0x210>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d027      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a28      	ldr	r2, [pc, #160]	@ (8001af4 <HAL_DMA_Start_IT+0x214>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a27      	ldr	r2, [pc, #156]	@ (8001af8 <HAL_DMA_Start_IT+0x218>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01d      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a25      	ldr	r2, [pc, #148]	@ (8001afc <HAL_DMA_Start_IT+0x21c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d018      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a24      	ldr	r2, [pc, #144]	@ (8001b00 <HAL_DMA_Start_IT+0x220>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a22      	ldr	r2, [pc, #136]	@ (8001b04 <HAL_DMA_Start_IT+0x224>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00e      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a21      	ldr	r2, [pc, #132]	@ (8001b08 <HAL_DMA_Start_IT+0x228>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b0c <HAL_DMA_Start_IT+0x22c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Start_IT+0x1bc>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <HAL_DMA_Start_IT+0x230>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Start_IT+0x1c0>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_DMA_Start_IT+0x1c2>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d036      	beq.n	8001b14 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f023 021e 	bic.w	r2, r3, #30
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f042 0216 	orr.w	r2, r2, #22
 8001ab8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d03e      	beq.n	8001b40 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f042 0208 	orr.w	r2, r2, #8
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	e035      	b.n	8001b40 <HAL_DMA_Start_IT+0x260>
 8001ad4:	40020010 	.word	0x40020010
 8001ad8:	40020028 	.word	0x40020028
 8001adc:	40020040 	.word	0x40020040
 8001ae0:	40020058 	.word	0x40020058
 8001ae4:	40020070 	.word	0x40020070
 8001ae8:	40020088 	.word	0x40020088
 8001aec:	400200a0 	.word	0x400200a0
 8001af0:	400200b8 	.word	0x400200b8
 8001af4:	40020410 	.word	0x40020410
 8001af8:	40020428 	.word	0x40020428
 8001afc:	40020440 	.word	0x40020440
 8001b00:	40020458 	.word	0x40020458
 8001b04:	40020470 	.word	0x40020470
 8001b08:	40020488 	.word	0x40020488
 8001b0c:	400204a0 	.word	0x400204a0
 8001b10:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f023 020e 	bic.w	r2, r3, #14
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 020a 	orr.w	r2, r2, #10
 8001b26:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d007      	beq.n	8001b40 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0204 	orr.w	r2, r2, #4
 8001b3e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a83      	ldr	r2, [pc, #524]	@ (8001d54 <HAL_DMA_Start_IT+0x474>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d072      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a82      	ldr	r2, [pc, #520]	@ (8001d58 <HAL_DMA_Start_IT+0x478>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d06d      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a80      	ldr	r2, [pc, #512]	@ (8001d5c <HAL_DMA_Start_IT+0x47c>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d068      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a7f      	ldr	r2, [pc, #508]	@ (8001d60 <HAL_DMA_Start_IT+0x480>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d063      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a7d      	ldr	r2, [pc, #500]	@ (8001d64 <HAL_DMA_Start_IT+0x484>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d05e      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a7c      	ldr	r2, [pc, #496]	@ (8001d68 <HAL_DMA_Start_IT+0x488>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d059      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a7a      	ldr	r2, [pc, #488]	@ (8001d6c <HAL_DMA_Start_IT+0x48c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d054      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a79      	ldr	r2, [pc, #484]	@ (8001d70 <HAL_DMA_Start_IT+0x490>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d04f      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a77      	ldr	r2, [pc, #476]	@ (8001d74 <HAL_DMA_Start_IT+0x494>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d04a      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a76      	ldr	r2, [pc, #472]	@ (8001d78 <HAL_DMA_Start_IT+0x498>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d045      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a74      	ldr	r2, [pc, #464]	@ (8001d7c <HAL_DMA_Start_IT+0x49c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d040      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a73      	ldr	r2, [pc, #460]	@ (8001d80 <HAL_DMA_Start_IT+0x4a0>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d03b      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a71      	ldr	r2, [pc, #452]	@ (8001d84 <HAL_DMA_Start_IT+0x4a4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d036      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a70      	ldr	r2, [pc, #448]	@ (8001d88 <HAL_DMA_Start_IT+0x4a8>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d031      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d8c <HAL_DMA_Start_IT+0x4ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d02c      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a6d      	ldr	r2, [pc, #436]	@ (8001d90 <HAL_DMA_Start_IT+0x4b0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d027      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d94 <HAL_DMA_Start_IT+0x4b4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d022      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a6a      	ldr	r2, [pc, #424]	@ (8001d98 <HAL_DMA_Start_IT+0x4b8>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d01d      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a68      	ldr	r2, [pc, #416]	@ (8001d9c <HAL_DMA_Start_IT+0x4bc>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d018      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a67      	ldr	r2, [pc, #412]	@ (8001da0 <HAL_DMA_Start_IT+0x4c0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d013      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a65      	ldr	r2, [pc, #404]	@ (8001da4 <HAL_DMA_Start_IT+0x4c4>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d00e      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a64      	ldr	r2, [pc, #400]	@ (8001da8 <HAL_DMA_Start_IT+0x4c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d009      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a62      	ldr	r2, [pc, #392]	@ (8001dac <HAL_DMA_Start_IT+0x4cc>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d004      	beq.n	8001c30 <HAL_DMA_Start_IT+0x350>
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a61      	ldr	r2, [pc, #388]	@ (8001db0 <HAL_DMA_Start_IT+0x4d0>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d101      	bne.n	8001c34 <HAL_DMA_Start_IT+0x354>
 8001c30:	2301      	movs	r3, #1
 8001c32:	e000      	b.n	8001c36 <HAL_DMA_Start_IT+0x356>
 8001c34:	2300      	movs	r3, #0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d01a      	beq.n	8001c70 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d007      	beq.n	8001c58 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c56:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d007      	beq.n	8001c70 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001c6e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a37      	ldr	r2, [pc, #220]	@ (8001d54 <HAL_DMA_Start_IT+0x474>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d04a      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a36      	ldr	r2, [pc, #216]	@ (8001d58 <HAL_DMA_Start_IT+0x478>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d045      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a34      	ldr	r2, [pc, #208]	@ (8001d5c <HAL_DMA_Start_IT+0x47c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d040      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a33      	ldr	r2, [pc, #204]	@ (8001d60 <HAL_DMA_Start_IT+0x480>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d03b      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a31      	ldr	r2, [pc, #196]	@ (8001d64 <HAL_DMA_Start_IT+0x484>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d036      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a30      	ldr	r2, [pc, #192]	@ (8001d68 <HAL_DMA_Start_IT+0x488>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d031      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001d6c <HAL_DMA_Start_IT+0x48c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d02c      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a2d      	ldr	r2, [pc, #180]	@ (8001d70 <HAL_DMA_Start_IT+0x490>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d027      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8001d74 <HAL_DMA_Start_IT+0x494>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d022      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a2a      	ldr	r2, [pc, #168]	@ (8001d78 <HAL_DMA_Start_IT+0x498>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d01d      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <HAL_DMA_Start_IT+0x49c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d018      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a27      	ldr	r2, [pc, #156]	@ (8001d80 <HAL_DMA_Start_IT+0x4a0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a25      	ldr	r2, [pc, #148]	@ (8001d84 <HAL_DMA_Start_IT+0x4a4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00e      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a24      	ldr	r2, [pc, #144]	@ (8001d88 <HAL_DMA_Start_IT+0x4a8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d009      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a22      	ldr	r2, [pc, #136]	@ (8001d8c <HAL_DMA_Start_IT+0x4ac>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d004      	beq.n	8001d10 <HAL_DMA_Start_IT+0x430>
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a21      	ldr	r2, [pc, #132]	@ (8001d90 <HAL_DMA_Start_IT+0x4b0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d108      	bne.n	8001d22 <HAL_DMA_Start_IT+0x442>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e012      	b.n	8001d48 <HAL_DMA_Start_IT+0x468>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f042 0201 	orr.w	r2, r2, #1
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	e009      	b.n	8001d48 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d3a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020010 	.word	0x40020010
 8001d58:	40020028 	.word	0x40020028
 8001d5c:	40020040 	.word	0x40020040
 8001d60:	40020058 	.word	0x40020058
 8001d64:	40020070 	.word	0x40020070
 8001d68:	40020088 	.word	0x40020088
 8001d6c:	400200a0 	.word	0x400200a0
 8001d70:	400200b8 	.word	0x400200b8
 8001d74:	40020410 	.word	0x40020410
 8001d78:	40020428 	.word	0x40020428
 8001d7c:	40020440 	.word	0x40020440
 8001d80:	40020458 	.word	0x40020458
 8001d84:	40020470 	.word	0x40020470
 8001d88:	40020488 	.word	0x40020488
 8001d8c:	400204a0 	.word	0x400204a0
 8001d90:	400204b8 	.word	0x400204b8
 8001d94:	58025408 	.word	0x58025408
 8001d98:	5802541c 	.word	0x5802541c
 8001d9c:	58025430 	.word	0x58025430
 8001da0:	58025444 	.word	0x58025444
 8001da4:	58025458 	.word	0x58025458
 8001da8:	5802546c 	.word	0x5802546c
 8001dac:	58025480 	.word	0x58025480
 8001db0:	58025494 	.word	0x58025494

08001db4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001dbc:	f7ff f894 	bl	8000ee8 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e2dc      	b.n	8002386 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d008      	beq.n	8001dea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2280      	movs	r2, #128	@ 0x80
 8001ddc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e2cd      	b.n	8002386 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a76      	ldr	r2, [pc, #472]	@ (8001fc8 <HAL_DMA_Abort+0x214>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d04a      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a74      	ldr	r2, [pc, #464]	@ (8001fcc <HAL_DMA_Abort+0x218>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d045      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a73      	ldr	r2, [pc, #460]	@ (8001fd0 <HAL_DMA_Abort+0x21c>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d040      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a71      	ldr	r2, [pc, #452]	@ (8001fd4 <HAL_DMA_Abort+0x220>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d03b      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a70      	ldr	r2, [pc, #448]	@ (8001fd8 <HAL_DMA_Abort+0x224>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d036      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a6e      	ldr	r2, [pc, #440]	@ (8001fdc <HAL_DMA_Abort+0x228>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d031      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a6d      	ldr	r2, [pc, #436]	@ (8001fe0 <HAL_DMA_Abort+0x22c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d02c      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a6b      	ldr	r2, [pc, #428]	@ (8001fe4 <HAL_DMA_Abort+0x230>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d027      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a6a      	ldr	r2, [pc, #424]	@ (8001fe8 <HAL_DMA_Abort+0x234>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a68      	ldr	r2, [pc, #416]	@ (8001fec <HAL_DMA_Abort+0x238>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01d      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a67      	ldr	r2, [pc, #412]	@ (8001ff0 <HAL_DMA_Abort+0x23c>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d018      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a65      	ldr	r2, [pc, #404]	@ (8001ff4 <HAL_DMA_Abort+0x240>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d013      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a64      	ldr	r2, [pc, #400]	@ (8001ff8 <HAL_DMA_Abort+0x244>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00e      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a62      	ldr	r2, [pc, #392]	@ (8001ffc <HAL_DMA_Abort+0x248>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d009      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a61      	ldr	r2, [pc, #388]	@ (8002000 <HAL_DMA_Abort+0x24c>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d004      	beq.n	8001e8a <HAL_DMA_Abort+0xd6>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a5f      	ldr	r2, [pc, #380]	@ (8002004 <HAL_DMA_Abort+0x250>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d101      	bne.n	8001e8e <HAL_DMA_Abort+0xda>
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e000      	b.n	8001e90 <HAL_DMA_Abort+0xdc>
 8001e8e:	2300      	movs	r3, #0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f022 021e 	bic.w	r2, r2, #30
 8001ea2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695a      	ldr	r2, [r3, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001eb2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	e00a      	b.n	8001ed2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 020e 	bic.w	r2, r2, #14
 8001eca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a3c      	ldr	r2, [pc, #240]	@ (8001fc8 <HAL_DMA_Abort+0x214>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d072      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a3a      	ldr	r2, [pc, #232]	@ (8001fcc <HAL_DMA_Abort+0x218>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d06d      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a39      	ldr	r2, [pc, #228]	@ (8001fd0 <HAL_DMA_Abort+0x21c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d068      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a37      	ldr	r2, [pc, #220]	@ (8001fd4 <HAL_DMA_Abort+0x220>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d063      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a36      	ldr	r2, [pc, #216]	@ (8001fd8 <HAL_DMA_Abort+0x224>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d05e      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a34      	ldr	r2, [pc, #208]	@ (8001fdc <HAL_DMA_Abort+0x228>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d059      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a33      	ldr	r2, [pc, #204]	@ (8001fe0 <HAL_DMA_Abort+0x22c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d054      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a31      	ldr	r2, [pc, #196]	@ (8001fe4 <HAL_DMA_Abort+0x230>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d04f      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a30      	ldr	r2, [pc, #192]	@ (8001fe8 <HAL_DMA_Abort+0x234>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04a      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a2e      	ldr	r2, [pc, #184]	@ (8001fec <HAL_DMA_Abort+0x238>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d045      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <HAL_DMA_Abort+0x23c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d040      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a2b      	ldr	r2, [pc, #172]	@ (8001ff4 <HAL_DMA_Abort+0x240>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d03b      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8001ff8 <HAL_DMA_Abort+0x244>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d036      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a28      	ldr	r2, [pc, #160]	@ (8001ffc <HAL_DMA_Abort+0x248>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d031      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a27      	ldr	r2, [pc, #156]	@ (8002000 <HAL_DMA_Abort+0x24c>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d02c      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a25      	ldr	r2, [pc, #148]	@ (8002004 <HAL_DMA_Abort+0x250>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d027      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a24      	ldr	r2, [pc, #144]	@ (8002008 <HAL_DMA_Abort+0x254>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a22      	ldr	r2, [pc, #136]	@ (800200c <HAL_DMA_Abort+0x258>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01d      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a21      	ldr	r2, [pc, #132]	@ (8002010 <HAL_DMA_Abort+0x25c>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d018      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	4a1f      	ldr	r2, [pc, #124]	@ (8002014 <HAL_DMA_Abort+0x260>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d013      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8002018 <HAL_DMA_Abort+0x264>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a1c      	ldr	r2, [pc, #112]	@ (800201c <HAL_DMA_Abort+0x268>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d009      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a1b      	ldr	r2, [pc, #108]	@ (8002020 <HAL_DMA_Abort+0x26c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_DMA_Abort+0x20e>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	@ (8002024 <HAL_DMA_Abort+0x270>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d132      	bne.n	8002028 <HAL_DMA_Abort+0x274>
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e031      	b.n	800202a <HAL_DMA_Abort+0x276>
 8001fc6:	bf00      	nop
 8001fc8:	40020010 	.word	0x40020010
 8001fcc:	40020028 	.word	0x40020028
 8001fd0:	40020040 	.word	0x40020040
 8001fd4:	40020058 	.word	0x40020058
 8001fd8:	40020070 	.word	0x40020070
 8001fdc:	40020088 	.word	0x40020088
 8001fe0:	400200a0 	.word	0x400200a0
 8001fe4:	400200b8 	.word	0x400200b8
 8001fe8:	40020410 	.word	0x40020410
 8001fec:	40020428 	.word	0x40020428
 8001ff0:	40020440 	.word	0x40020440
 8001ff4:	40020458 	.word	0x40020458
 8001ff8:	40020470 	.word	0x40020470
 8001ffc:	40020488 	.word	0x40020488
 8002000:	400204a0 	.word	0x400204a0
 8002004:	400204b8 	.word	0x400204b8
 8002008:	58025408 	.word	0x58025408
 800200c:	5802541c 	.word	0x5802541c
 8002010:	58025430 	.word	0x58025430
 8002014:	58025444 	.word	0x58025444
 8002018:	58025458 	.word	0x58025458
 800201c:	5802546c 	.word	0x5802546c
 8002020:	58025480 	.word	0x58025480
 8002024:	58025494 	.word	0x58025494
 8002028:	2300      	movs	r3, #0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002038:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800203c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6d      	ldr	r2, [pc, #436]	@ (80021f8 <HAL_DMA_Abort+0x444>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d04a      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a6b      	ldr	r2, [pc, #428]	@ (80021fc <HAL_DMA_Abort+0x448>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d045      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a6a      	ldr	r2, [pc, #424]	@ (8002200 <HAL_DMA_Abort+0x44c>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d040      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a68      	ldr	r2, [pc, #416]	@ (8002204 <HAL_DMA_Abort+0x450>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d03b      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a67      	ldr	r2, [pc, #412]	@ (8002208 <HAL_DMA_Abort+0x454>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d036      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a65      	ldr	r2, [pc, #404]	@ (800220c <HAL_DMA_Abort+0x458>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d031      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a64      	ldr	r2, [pc, #400]	@ (8002210 <HAL_DMA_Abort+0x45c>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d02c      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a62      	ldr	r2, [pc, #392]	@ (8002214 <HAL_DMA_Abort+0x460>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d027      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a61      	ldr	r2, [pc, #388]	@ (8002218 <HAL_DMA_Abort+0x464>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a5f      	ldr	r2, [pc, #380]	@ (800221c <HAL_DMA_Abort+0x468>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01d      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a5e      	ldr	r2, [pc, #376]	@ (8002220 <HAL_DMA_Abort+0x46c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d018      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a5c      	ldr	r2, [pc, #368]	@ (8002224 <HAL_DMA_Abort+0x470>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a5b      	ldr	r2, [pc, #364]	@ (8002228 <HAL_DMA_Abort+0x474>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d00e      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a59      	ldr	r2, [pc, #356]	@ (800222c <HAL_DMA_Abort+0x478>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <HAL_DMA_Abort+0x47c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d004      	beq.n	80020de <HAL_DMA_Abort+0x32a>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a56      	ldr	r2, [pc, #344]	@ (8002234 <HAL_DMA_Abort+0x480>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <HAL_DMA_Abort+0x33c>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	e007      	b.n	8002100 <HAL_DMA_Abort+0x34c>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f022 0201 	bic.w	r2, r2, #1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002100:	e013      	b.n	800212a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002102:	f7fe fef1 	bl	8000ee8 <HAL_GetTick>
 8002106:	4602      	mov	r2, r0
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b05      	cmp	r3, #5
 800210e:	d90c      	bls.n	800212a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2220      	movs	r2, #32
 8002114:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2203      	movs	r2, #3
 800211a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e12d      	b.n	8002386 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1e5      	bne.n	8002102 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a2f      	ldr	r2, [pc, #188]	@ (80021f8 <HAL_DMA_Abort+0x444>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d04a      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a2d      	ldr	r2, [pc, #180]	@ (80021fc <HAL_DMA_Abort+0x448>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d045      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a2c      	ldr	r2, [pc, #176]	@ (8002200 <HAL_DMA_Abort+0x44c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d040      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a2a      	ldr	r2, [pc, #168]	@ (8002204 <HAL_DMA_Abort+0x450>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d03b      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a29      	ldr	r2, [pc, #164]	@ (8002208 <HAL_DMA_Abort+0x454>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d036      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a27      	ldr	r2, [pc, #156]	@ (800220c <HAL_DMA_Abort+0x458>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a26      	ldr	r2, [pc, #152]	@ (8002210 <HAL_DMA_Abort+0x45c>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d02c      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a24      	ldr	r2, [pc, #144]	@ (8002214 <HAL_DMA_Abort+0x460>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d027      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a23      	ldr	r2, [pc, #140]	@ (8002218 <HAL_DMA_Abort+0x464>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d022      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a21      	ldr	r2, [pc, #132]	@ (800221c <HAL_DMA_Abort+0x468>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01d      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a20      	ldr	r2, [pc, #128]	@ (8002220 <HAL_DMA_Abort+0x46c>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d018      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002224 <HAL_DMA_Abort+0x470>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a1d      	ldr	r2, [pc, #116]	@ (8002228 <HAL_DMA_Abort+0x474>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d00e      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <HAL_DMA_Abort+0x478>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d009      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a1a      	ldr	r2, [pc, #104]	@ (8002230 <HAL_DMA_Abort+0x47c>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d004      	beq.n	80021d6 <HAL_DMA_Abort+0x422>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a18      	ldr	r2, [pc, #96]	@ (8002234 <HAL_DMA_Abort+0x480>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Abort+0x426>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_DMA_Abort+0x428>
 80021da:	2300      	movs	r3, #0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d02b      	beq.n	8002238 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021e4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	223f      	movs	r2, #63	@ 0x3f
 80021f0:	409a      	lsls	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	e02a      	b.n	800224e <HAL_DMA_Abort+0x49a>
 80021f8:	40020010 	.word	0x40020010
 80021fc:	40020028 	.word	0x40020028
 8002200:	40020040 	.word	0x40020040
 8002204:	40020058 	.word	0x40020058
 8002208:	40020070 	.word	0x40020070
 800220c:	40020088 	.word	0x40020088
 8002210:	400200a0 	.word	0x400200a0
 8002214:	400200b8 	.word	0x400200b8
 8002218:	40020410 	.word	0x40020410
 800221c:	40020428 	.word	0x40020428
 8002220:	40020440 	.word	0x40020440
 8002224:	40020458 	.word	0x40020458
 8002228:	40020470 	.word	0x40020470
 800222c:	40020488 	.word	0x40020488
 8002230:	400204a0 	.word	0x400204a0
 8002234:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800223c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002242:	f003 031f 	and.w	r3, r3, #31
 8002246:	2201      	movs	r2, #1
 8002248:	409a      	lsls	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4f      	ldr	r2, [pc, #316]	@ (8002390 <HAL_DMA_Abort+0x5dc>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d072      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a4d      	ldr	r2, [pc, #308]	@ (8002394 <HAL_DMA_Abort+0x5e0>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d06d      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a4c      	ldr	r2, [pc, #304]	@ (8002398 <HAL_DMA_Abort+0x5e4>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d068      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a4a      	ldr	r2, [pc, #296]	@ (800239c <HAL_DMA_Abort+0x5e8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d063      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a49      	ldr	r2, [pc, #292]	@ (80023a0 <HAL_DMA_Abort+0x5ec>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d05e      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a47      	ldr	r2, [pc, #284]	@ (80023a4 <HAL_DMA_Abort+0x5f0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d059      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a46      	ldr	r2, [pc, #280]	@ (80023a8 <HAL_DMA_Abort+0x5f4>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d054      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a44      	ldr	r2, [pc, #272]	@ (80023ac <HAL_DMA_Abort+0x5f8>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d04f      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a43      	ldr	r2, [pc, #268]	@ (80023b0 <HAL_DMA_Abort+0x5fc>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d04a      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a41      	ldr	r2, [pc, #260]	@ (80023b4 <HAL_DMA_Abort+0x600>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d045      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a40      	ldr	r2, [pc, #256]	@ (80023b8 <HAL_DMA_Abort+0x604>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d040      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3e      	ldr	r2, [pc, #248]	@ (80023bc <HAL_DMA_Abort+0x608>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d03b      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a3d      	ldr	r2, [pc, #244]	@ (80023c0 <HAL_DMA_Abort+0x60c>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d036      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a3b      	ldr	r2, [pc, #236]	@ (80023c4 <HAL_DMA_Abort+0x610>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d031      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a3a      	ldr	r2, [pc, #232]	@ (80023c8 <HAL_DMA_Abort+0x614>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d02c      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a38      	ldr	r2, [pc, #224]	@ (80023cc <HAL_DMA_Abort+0x618>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d027      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a37      	ldr	r2, [pc, #220]	@ (80023d0 <HAL_DMA_Abort+0x61c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a35      	ldr	r2, [pc, #212]	@ (80023d4 <HAL_DMA_Abort+0x620>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01d      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a34      	ldr	r2, [pc, #208]	@ (80023d8 <HAL_DMA_Abort+0x624>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d018      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a32      	ldr	r2, [pc, #200]	@ (80023dc <HAL_DMA_Abort+0x628>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a31      	ldr	r2, [pc, #196]	@ (80023e0 <HAL_DMA_Abort+0x62c>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d00e      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a2f      	ldr	r2, [pc, #188]	@ (80023e4 <HAL_DMA_Abort+0x630>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d009      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <HAL_DMA_Abort+0x634>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d004      	beq.n	800233e <HAL_DMA_Abort+0x58a>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a2c      	ldr	r2, [pc, #176]	@ (80023ec <HAL_DMA_Abort+0x638>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_DMA_Abort+0x58e>
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_DMA_Abort+0x590>
 8002342:	2300      	movs	r3, #0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d015      	beq.n	8002374 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002350:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00c      	beq.n	8002374 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002364:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002368:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002372:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40020010 	.word	0x40020010
 8002394:	40020028 	.word	0x40020028
 8002398:	40020040 	.word	0x40020040
 800239c:	40020058 	.word	0x40020058
 80023a0:	40020070 	.word	0x40020070
 80023a4:	40020088 	.word	0x40020088
 80023a8:	400200a0 	.word	0x400200a0
 80023ac:	400200b8 	.word	0x400200b8
 80023b0:	40020410 	.word	0x40020410
 80023b4:	40020428 	.word	0x40020428
 80023b8:	40020440 	.word	0x40020440
 80023bc:	40020458 	.word	0x40020458
 80023c0:	40020470 	.word	0x40020470
 80023c4:	40020488 	.word	0x40020488
 80023c8:	400204a0 	.word	0x400204a0
 80023cc:	400204b8 	.word	0x400204b8
 80023d0:	58025408 	.word	0x58025408
 80023d4:	5802541c 	.word	0x5802541c
 80023d8:	58025430 	.word	0x58025430
 80023dc:	58025444 	.word	0x58025444
 80023e0:	58025458 	.word	0x58025458
 80023e4:	5802546c 	.word	0x5802546c
 80023e8:	58025480 	.word	0x58025480
 80023ec:	58025494 	.word	0x58025494

080023f0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b084      	sub	sp, #16
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e237      	b.n	8002872 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d004      	beq.n	8002418 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2280      	movs	r2, #128	@ 0x80
 8002412:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e22c      	b.n	8002872 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a5c      	ldr	r2, [pc, #368]	@ (8002590 <HAL_DMA_Abort_IT+0x1a0>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d04a      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a5b      	ldr	r2, [pc, #364]	@ (8002594 <HAL_DMA_Abort_IT+0x1a4>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d045      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a59      	ldr	r2, [pc, #356]	@ (8002598 <HAL_DMA_Abort_IT+0x1a8>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d040      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a58      	ldr	r2, [pc, #352]	@ (800259c <HAL_DMA_Abort_IT+0x1ac>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d03b      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a56      	ldr	r2, [pc, #344]	@ (80025a0 <HAL_DMA_Abort_IT+0x1b0>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d036      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a55      	ldr	r2, [pc, #340]	@ (80025a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d031      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a53      	ldr	r2, [pc, #332]	@ (80025a8 <HAL_DMA_Abort_IT+0x1b8>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d02c      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a52      	ldr	r2, [pc, #328]	@ (80025ac <HAL_DMA_Abort_IT+0x1bc>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d027      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a50      	ldr	r2, [pc, #320]	@ (80025b0 <HAL_DMA_Abort_IT+0x1c0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d022      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a4f      	ldr	r2, [pc, #316]	@ (80025b4 <HAL_DMA_Abort_IT+0x1c4>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d01d      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a4d      	ldr	r2, [pc, #308]	@ (80025b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d018      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a4c      	ldr	r2, [pc, #304]	@ (80025bc <HAL_DMA_Abort_IT+0x1cc>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d013      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a4a      	ldr	r2, [pc, #296]	@ (80025c0 <HAL_DMA_Abort_IT+0x1d0>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d00e      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a49      	ldr	r2, [pc, #292]	@ (80025c4 <HAL_DMA_Abort_IT+0x1d4>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d009      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a47      	ldr	r2, [pc, #284]	@ (80025c8 <HAL_DMA_Abort_IT+0x1d8>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d004      	beq.n	80024b8 <HAL_DMA_Abort_IT+0xc8>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a46      	ldr	r2, [pc, #280]	@ (80025cc <HAL_DMA_Abort_IT+0x1dc>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Abort_IT+0xcc>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_DMA_Abort_IT+0xce>
 80024bc:	2300      	movs	r3, #0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	f000 8086 	beq.w	80025d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2204      	movs	r2, #4
 80024c8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2f      	ldr	r2, [pc, #188]	@ (8002590 <HAL_DMA_Abort_IT+0x1a0>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d04a      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2e      	ldr	r2, [pc, #184]	@ (8002594 <HAL_DMA_Abort_IT+0x1a4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d045      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002598 <HAL_DMA_Abort_IT+0x1a8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d040      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a2b      	ldr	r2, [pc, #172]	@ (800259c <HAL_DMA_Abort_IT+0x1ac>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d03b      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a29      	ldr	r2, [pc, #164]	@ (80025a0 <HAL_DMA_Abort_IT+0x1b0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d036      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a28      	ldr	r2, [pc, #160]	@ (80025a4 <HAL_DMA_Abort_IT+0x1b4>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d031      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a26      	ldr	r2, [pc, #152]	@ (80025a8 <HAL_DMA_Abort_IT+0x1b8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d02c      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a25      	ldr	r2, [pc, #148]	@ (80025ac <HAL_DMA_Abort_IT+0x1bc>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d027      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a23      	ldr	r2, [pc, #140]	@ (80025b0 <HAL_DMA_Abort_IT+0x1c0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d022      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a22      	ldr	r2, [pc, #136]	@ (80025b4 <HAL_DMA_Abort_IT+0x1c4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d01d      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <HAL_DMA_Abort_IT+0x1c8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d018      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1f      	ldr	r2, [pc, #124]	@ (80025bc <HAL_DMA_Abort_IT+0x1cc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d013      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1d      	ldr	r2, [pc, #116]	@ (80025c0 <HAL_DMA_Abort_IT+0x1d0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d00e      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	@ (80025c4 <HAL_DMA_Abort_IT+0x1d4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d009      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a1a      	ldr	r2, [pc, #104]	@ (80025c8 <HAL_DMA_Abort_IT+0x1d8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d004      	beq.n	800256c <HAL_DMA_Abort_IT+0x17c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a19      	ldr	r2, [pc, #100]	@ (80025cc <HAL_DMA_Abort_IT+0x1dc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d108      	bne.n	800257e <HAL_DMA_Abort_IT+0x18e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0201 	bic.w	r2, r2, #1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	e178      	b.n	8002870 <HAL_DMA_Abort_IT+0x480>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	e16f      	b.n	8002870 <HAL_DMA_Abort_IT+0x480>
 8002590:	40020010 	.word	0x40020010
 8002594:	40020028 	.word	0x40020028
 8002598:	40020040 	.word	0x40020040
 800259c:	40020058 	.word	0x40020058
 80025a0:	40020070 	.word	0x40020070
 80025a4:	40020088 	.word	0x40020088
 80025a8:	400200a0 	.word	0x400200a0
 80025ac:	400200b8 	.word	0x400200b8
 80025b0:	40020410 	.word	0x40020410
 80025b4:	40020428 	.word	0x40020428
 80025b8:	40020440 	.word	0x40020440
 80025bc:	40020458 	.word	0x40020458
 80025c0:	40020470 	.word	0x40020470
 80025c4:	40020488 	.word	0x40020488
 80025c8:	400204a0 	.word	0x400204a0
 80025cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 020e 	bic.w	r2, r2, #14
 80025de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6c      	ldr	r2, [pc, #432]	@ (8002798 <HAL_DMA_Abort_IT+0x3a8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d04a      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a6b      	ldr	r2, [pc, #428]	@ (800279c <HAL_DMA_Abort_IT+0x3ac>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d045      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a69      	ldr	r2, [pc, #420]	@ (80027a0 <HAL_DMA_Abort_IT+0x3b0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d040      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a68      	ldr	r2, [pc, #416]	@ (80027a4 <HAL_DMA_Abort_IT+0x3b4>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03b      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a66      	ldr	r2, [pc, #408]	@ (80027a8 <HAL_DMA_Abort_IT+0x3b8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d036      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a65      	ldr	r2, [pc, #404]	@ (80027ac <HAL_DMA_Abort_IT+0x3bc>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d031      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a63      	ldr	r2, [pc, #396]	@ (80027b0 <HAL_DMA_Abort_IT+0x3c0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d02c      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a62      	ldr	r2, [pc, #392]	@ (80027b4 <HAL_DMA_Abort_IT+0x3c4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d027      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_DMA_Abort_IT+0x3c8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d022      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5f      	ldr	r2, [pc, #380]	@ (80027bc <HAL_DMA_Abort_IT+0x3cc>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d01d      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5d      	ldr	r2, [pc, #372]	@ (80027c0 <HAL_DMA_Abort_IT+0x3d0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d018      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a5c      	ldr	r2, [pc, #368]	@ (80027c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d013      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a5a      	ldr	r2, [pc, #360]	@ (80027c8 <HAL_DMA_Abort_IT+0x3d8>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d00e      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a59      	ldr	r2, [pc, #356]	@ (80027cc <HAL_DMA_Abort_IT+0x3dc>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d009      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a57      	ldr	r2, [pc, #348]	@ (80027d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d004      	beq.n	8002680 <HAL_DMA_Abort_IT+0x290>
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a56      	ldr	r2, [pc, #344]	@ (80027d4 <HAL_DMA_Abort_IT+0x3e4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d108      	bne.n	8002692 <HAL_DMA_Abort_IT+0x2a2>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0201 	bic.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e007      	b.n	80026a2 <HAL_DMA_Abort_IT+0x2b2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a3c      	ldr	r2, [pc, #240]	@ (8002798 <HAL_DMA_Abort_IT+0x3a8>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a3a      	ldr	r2, [pc, #232]	@ (800279c <HAL_DMA_Abort_IT+0x3ac>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a39      	ldr	r2, [pc, #228]	@ (80027a0 <HAL_DMA_Abort_IT+0x3b0>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a37      	ldr	r2, [pc, #220]	@ (80027a4 <HAL_DMA_Abort_IT+0x3b4>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a36      	ldr	r2, [pc, #216]	@ (80027a8 <HAL_DMA_Abort_IT+0x3b8>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a34      	ldr	r2, [pc, #208]	@ (80027ac <HAL_DMA_Abort_IT+0x3bc>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a33      	ldr	r2, [pc, #204]	@ (80027b0 <HAL_DMA_Abort_IT+0x3c0>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a31      	ldr	r2, [pc, #196]	@ (80027b4 <HAL_DMA_Abort_IT+0x3c4>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a30      	ldr	r2, [pc, #192]	@ (80027b8 <HAL_DMA_Abort_IT+0x3c8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a2e      	ldr	r2, [pc, #184]	@ (80027bc <HAL_DMA_Abort_IT+0x3cc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a2d      	ldr	r2, [pc, #180]	@ (80027c0 <HAL_DMA_Abort_IT+0x3d0>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a2b      	ldr	r2, [pc, #172]	@ (80027c4 <HAL_DMA_Abort_IT+0x3d4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a2a      	ldr	r2, [pc, #168]	@ (80027c8 <HAL_DMA_Abort_IT+0x3d8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a28      	ldr	r2, [pc, #160]	@ (80027cc <HAL_DMA_Abort_IT+0x3dc>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a27      	ldr	r2, [pc, #156]	@ (80027d0 <HAL_DMA_Abort_IT+0x3e0>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a25      	ldr	r2, [pc, #148]	@ (80027d4 <HAL_DMA_Abort_IT+0x3e4>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a24      	ldr	r2, [pc, #144]	@ (80027d8 <HAL_DMA_Abort_IT+0x3e8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a22      	ldr	r2, [pc, #136]	@ (80027dc <HAL_DMA_Abort_IT+0x3ec>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a21      	ldr	r2, [pc, #132]	@ (80027e0 <HAL_DMA_Abort_IT+0x3f0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a1f      	ldr	r2, [pc, #124]	@ (80027e4 <HAL_DMA_Abort_IT+0x3f4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a1e      	ldr	r2, [pc, #120]	@ (80027e8 <HAL_DMA_Abort_IT+0x3f8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a1c      	ldr	r2, [pc, #112]	@ (80027ec <HAL_DMA_Abort_IT+0x3fc>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a1b      	ldr	r2, [pc, #108]	@ (80027f0 <HAL_DMA_Abort_IT+0x400>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort_IT+0x3a2>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a19      	ldr	r2, [pc, #100]	@ (80027f4 <HAL_DMA_Abort_IT+0x404>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d132      	bne.n	80027f8 <HAL_DMA_Abort_IT+0x408>
 8002792:	2301      	movs	r3, #1
 8002794:	e031      	b.n	80027fa <HAL_DMA_Abort_IT+0x40a>
 8002796:	bf00      	nop
 8002798:	40020010 	.word	0x40020010
 800279c:	40020028 	.word	0x40020028
 80027a0:	40020040 	.word	0x40020040
 80027a4:	40020058 	.word	0x40020058
 80027a8:	40020070 	.word	0x40020070
 80027ac:	40020088 	.word	0x40020088
 80027b0:	400200a0 	.word	0x400200a0
 80027b4:	400200b8 	.word	0x400200b8
 80027b8:	40020410 	.word	0x40020410
 80027bc:	40020428 	.word	0x40020428
 80027c0:	40020440 	.word	0x40020440
 80027c4:	40020458 	.word	0x40020458
 80027c8:	40020470 	.word	0x40020470
 80027cc:	40020488 	.word	0x40020488
 80027d0:	400204a0 	.word	0x400204a0
 80027d4:	400204b8 	.word	0x400204b8
 80027d8:	58025408 	.word	0x58025408
 80027dc:	5802541c 	.word	0x5802541c
 80027e0:	58025430 	.word	0x58025430
 80027e4:	58025444 	.word	0x58025444
 80027e8:	58025458 	.word	0x58025458
 80027ec:	5802546c 	.word	0x5802546c
 80027f0:	58025480 	.word	0x58025480
 80027f4:	58025494 	.word	0x58025494
 80027f8:	2300      	movs	r3, #0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d028      	beq.n	8002850 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002808:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002812:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002818:	f003 031f 	and.w	r3, r3, #31
 800281c:	2201      	movs	r2, #1
 800281e:	409a      	lsls	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800282c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00c      	beq.n	8002850 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002844:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800284e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop

0800287c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002888:	4b67      	ldr	r3, [pc, #412]	@ (8002a28 <HAL_DMA_IRQHandler+0x1ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a67      	ldr	r2, [pc, #412]	@ (8002a2c <HAL_DMA_IRQHandler+0x1b0>)
 800288e:	fba2 2303 	umull	r2, r3, r2, r3
 8002892:	0a9b      	lsrs	r3, r3, #10
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80028a2:	6a3b      	ldr	r3, [r7, #32]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a30 <HAL_DMA_IRQHandler+0x1b4>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d04a      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5d      	ldr	r2, [pc, #372]	@ (8002a34 <HAL_DMA_IRQHandler+0x1b8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d045      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a38 <HAL_DMA_IRQHandler+0x1bc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d040      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a5a      	ldr	r2, [pc, #360]	@ (8002a3c <HAL_DMA_IRQHandler+0x1c0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d03b      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a59      	ldr	r2, [pc, #356]	@ (8002a40 <HAL_DMA_IRQHandler+0x1c4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d036      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a57      	ldr	r2, [pc, #348]	@ (8002a44 <HAL_DMA_IRQHandler+0x1c8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d031      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a56      	ldr	r2, [pc, #344]	@ (8002a48 <HAL_DMA_IRQHandler+0x1cc>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d02c      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a54      	ldr	r2, [pc, #336]	@ (8002a4c <HAL_DMA_IRQHandler+0x1d0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d027      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a53      	ldr	r2, [pc, #332]	@ (8002a50 <HAL_DMA_IRQHandler+0x1d4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d022      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a51      	ldr	r2, [pc, #324]	@ (8002a54 <HAL_DMA_IRQHandler+0x1d8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01d      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a50      	ldr	r2, [pc, #320]	@ (8002a58 <HAL_DMA_IRQHandler+0x1dc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d018      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a4e      	ldr	r2, [pc, #312]	@ (8002a5c <HAL_DMA_IRQHandler+0x1e0>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a4d      	ldr	r2, [pc, #308]	@ (8002a60 <HAL_DMA_IRQHandler+0x1e4>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d00e      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_DMA_IRQHandler+0x1e8>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d009      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a68 <HAL_DMA_IRQHandler+0x1ec>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d004      	beq.n	800294e <HAL_DMA_IRQHandler+0xd2>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a48      	ldr	r2, [pc, #288]	@ (8002a6c <HAL_DMA_IRQHandler+0x1f0>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d101      	bne.n	8002952 <HAL_DMA_IRQHandler+0xd6>
 800294e:	2301      	movs	r3, #1
 8002950:	e000      	b.n	8002954 <HAL_DMA_IRQHandler+0xd8>
 8002952:	2300      	movs	r3, #0
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 842b 	beq.w	80031b0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295e:	f003 031f 	and.w	r3, r3, #31
 8002962:	2208      	movs	r2, #8
 8002964:	409a      	lsls	r2, r3
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	4013      	ands	r3, r2
 800296a:	2b00      	cmp	r3, #0
 800296c:	f000 80a2 	beq.w	8002ab4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a2e      	ldr	r2, [pc, #184]	@ (8002a30 <HAL_DMA_IRQHandler+0x1b4>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d04a      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a2d      	ldr	r2, [pc, #180]	@ (8002a34 <HAL_DMA_IRQHandler+0x1b8>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d045      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a2b      	ldr	r2, [pc, #172]	@ (8002a38 <HAL_DMA_IRQHandler+0x1bc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d040      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a2a      	ldr	r2, [pc, #168]	@ (8002a3c <HAL_DMA_IRQHandler+0x1c0>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d03b      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a28      	ldr	r2, [pc, #160]	@ (8002a40 <HAL_DMA_IRQHandler+0x1c4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d036      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a27      	ldr	r2, [pc, #156]	@ (8002a44 <HAL_DMA_IRQHandler+0x1c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d031      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a25      	ldr	r2, [pc, #148]	@ (8002a48 <HAL_DMA_IRQHandler+0x1cc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d02c      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a24      	ldr	r2, [pc, #144]	@ (8002a4c <HAL_DMA_IRQHandler+0x1d0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d027      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a22      	ldr	r2, [pc, #136]	@ (8002a50 <HAL_DMA_IRQHandler+0x1d4>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d022      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a21      	ldr	r2, [pc, #132]	@ (8002a54 <HAL_DMA_IRQHandler+0x1d8>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d01d      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1f      	ldr	r2, [pc, #124]	@ (8002a58 <HAL_DMA_IRQHandler+0x1dc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d018      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a5c <HAL_DMA_IRQHandler+0x1e0>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d013      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a1c      	ldr	r2, [pc, #112]	@ (8002a60 <HAL_DMA_IRQHandler+0x1e4>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d00e      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a1b      	ldr	r2, [pc, #108]	@ (8002a64 <HAL_DMA_IRQHandler+0x1e8>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a19      	ldr	r2, [pc, #100]	@ (8002a68 <HAL_DMA_IRQHandler+0x1ec>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d004      	beq.n	8002a10 <HAL_DMA_IRQHandler+0x194>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a18      	ldr	r2, [pc, #96]	@ (8002a6c <HAL_DMA_IRQHandler+0x1f0>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d12f      	bne.n	8002a70 <HAL_DMA_IRQHandler+0x1f4>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	bf14      	ite	ne
 8002a1e:	2301      	movne	r3, #1
 8002a20:	2300      	moveq	r3, #0
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	e02e      	b.n	8002a84 <HAL_DMA_IRQHandler+0x208>
 8002a26:	bf00      	nop
 8002a28:	24000040 	.word	0x24000040
 8002a2c:	1b4e81b5 	.word	0x1b4e81b5
 8002a30:	40020010 	.word	0x40020010
 8002a34:	40020028 	.word	0x40020028
 8002a38:	40020040 	.word	0x40020040
 8002a3c:	40020058 	.word	0x40020058
 8002a40:	40020070 	.word	0x40020070
 8002a44:	40020088 	.word	0x40020088
 8002a48:	400200a0 	.word	0x400200a0
 8002a4c:	400200b8 	.word	0x400200b8
 8002a50:	40020410 	.word	0x40020410
 8002a54:	40020428 	.word	0x40020428
 8002a58:	40020440 	.word	0x40020440
 8002a5c:	40020458 	.word	0x40020458
 8002a60:	40020470 	.word	0x40020470
 8002a64:	40020488 	.word	0x40020488
 8002a68:	400204a0 	.word	0x400204a0
 8002a6c:	400204b8 	.word	0x400204b8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	bf14      	ite	ne
 8002a7e:	2301      	movne	r3, #1
 8002a80:	2300      	moveq	r3, #0
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d015      	beq.n	8002ab4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	2208      	movs	r2, #8
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aac:	f043 0201 	orr.w	r2, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab8:	f003 031f 	and.w	r3, r3, #31
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d06e      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a69      	ldr	r2, [pc, #420]	@ (8002c74 <HAL_DMA_IRQHandler+0x3f8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d04a      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a67      	ldr	r2, [pc, #412]	@ (8002c78 <HAL_DMA_IRQHandler+0x3fc>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d045      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a66      	ldr	r2, [pc, #408]	@ (8002c7c <HAL_DMA_IRQHandler+0x400>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d040      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a64      	ldr	r2, [pc, #400]	@ (8002c80 <HAL_DMA_IRQHandler+0x404>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d03b      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a63      	ldr	r2, [pc, #396]	@ (8002c84 <HAL_DMA_IRQHandler+0x408>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d036      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a61      	ldr	r2, [pc, #388]	@ (8002c88 <HAL_DMA_IRQHandler+0x40c>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d031      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a60      	ldr	r2, [pc, #384]	@ (8002c8c <HAL_DMA_IRQHandler+0x410>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d02c      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a5e      	ldr	r2, [pc, #376]	@ (8002c90 <HAL_DMA_IRQHandler+0x414>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d027      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8002c94 <HAL_DMA_IRQHandler+0x418>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d022      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5b      	ldr	r2, [pc, #364]	@ (8002c98 <HAL_DMA_IRQHandler+0x41c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d01d      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5a      	ldr	r2, [pc, #360]	@ (8002c9c <HAL_DMA_IRQHandler+0x420>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d018      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a58      	ldr	r2, [pc, #352]	@ (8002ca0 <HAL_DMA_IRQHandler+0x424>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d013      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a57      	ldr	r2, [pc, #348]	@ (8002ca4 <HAL_DMA_IRQHandler+0x428>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00e      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a55      	ldr	r2, [pc, #340]	@ (8002ca8 <HAL_DMA_IRQHandler+0x42c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d009      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a54      	ldr	r2, [pc, #336]	@ (8002cac <HAL_DMA_IRQHandler+0x430>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d004      	beq.n	8002b6a <HAL_DMA_IRQHandler+0x2ee>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a52      	ldr	r2, [pc, #328]	@ (8002cb0 <HAL_DMA_IRQHandler+0x434>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d10a      	bne.n	8002b80 <HAL_DMA_IRQHandler+0x304>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	e003      	b.n	8002b88 <HAL_DMA_IRQHandler+0x30c>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00d      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b90:	f003 031f 	and.w	r3, r3, #31
 8002b94:	2201      	movs	r2, #1
 8002b96:	409a      	lsls	r2, r3
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba0:	f043 0202 	orr.w	r2, r3, #2
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bac:	f003 031f 	and.w	r3, r3, #31
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 808f 	beq.w	8002cdc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8002c74 <HAL_DMA_IRQHandler+0x3f8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d04a      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a2a      	ldr	r2, [pc, #168]	@ (8002c78 <HAL_DMA_IRQHandler+0x3fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d045      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a29      	ldr	r2, [pc, #164]	@ (8002c7c <HAL_DMA_IRQHandler+0x400>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d040      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a27      	ldr	r2, [pc, #156]	@ (8002c80 <HAL_DMA_IRQHandler+0x404>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d03b      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a26      	ldr	r2, [pc, #152]	@ (8002c84 <HAL_DMA_IRQHandler+0x408>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d036      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a24      	ldr	r2, [pc, #144]	@ (8002c88 <HAL_DMA_IRQHandler+0x40c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d031      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a23      	ldr	r2, [pc, #140]	@ (8002c8c <HAL_DMA_IRQHandler+0x410>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d02c      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a21      	ldr	r2, [pc, #132]	@ (8002c90 <HAL_DMA_IRQHandler+0x414>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d027      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a20      	ldr	r2, [pc, #128]	@ (8002c94 <HAL_DMA_IRQHandler+0x418>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d022      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1e      	ldr	r2, [pc, #120]	@ (8002c98 <HAL_DMA_IRQHandler+0x41c>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d01d      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1d      	ldr	r2, [pc, #116]	@ (8002c9c <HAL_DMA_IRQHandler+0x420>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d018      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ca0 <HAL_DMA_IRQHandler+0x424>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d013      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a1a      	ldr	r2, [pc, #104]	@ (8002ca4 <HAL_DMA_IRQHandler+0x428>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d00e      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_DMA_IRQHandler+0x42c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d009      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a17      	ldr	r2, [pc, #92]	@ (8002cac <HAL_DMA_IRQHandler+0x430>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d004      	beq.n	8002c5e <HAL_DMA_IRQHandler+0x3e2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <HAL_DMA_IRQHandler+0x434>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d12a      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x438>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	bf14      	ite	ne
 8002c6c:	2301      	movne	r3, #1
 8002c6e:	2300      	moveq	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	e023      	b.n	8002cbc <HAL_DMA_IRQHandler+0x440>
 8002c74:	40020010 	.word	0x40020010
 8002c78:	40020028 	.word	0x40020028
 8002c7c:	40020040 	.word	0x40020040
 8002c80:	40020058 	.word	0x40020058
 8002c84:	40020070 	.word	0x40020070
 8002c88:	40020088 	.word	0x40020088
 8002c8c:	400200a0 	.word	0x400200a0
 8002c90:	400200b8 	.word	0x400200b8
 8002c94:	40020410 	.word	0x40020410
 8002c98:	40020428 	.word	0x40020428
 8002c9c:	40020440 	.word	0x40020440
 8002ca0:	40020458 	.word	0x40020458
 8002ca4:	40020470 	.word	0x40020470
 8002ca8:	40020488 	.word	0x40020488
 8002cac:	400204a0 	.word	0x400204a0
 8002cb0:	400204b8 	.word	0x400204b8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00d      	beq.n	8002cdc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cc4:	f003 031f 	and.w	r3, r3, #31
 8002cc8:	2204      	movs	r2, #4
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ce0:	f003 031f 	and.w	r3, r3, #31
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	4013      	ands	r3, r2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 80a6 	beq.w	8002e3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a85      	ldr	r2, [pc, #532]	@ (8002f0c <HAL_DMA_IRQHandler+0x690>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d04a      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a83      	ldr	r2, [pc, #524]	@ (8002f10 <HAL_DMA_IRQHandler+0x694>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d045      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a82      	ldr	r2, [pc, #520]	@ (8002f14 <HAL_DMA_IRQHandler+0x698>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d040      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a80      	ldr	r2, [pc, #512]	@ (8002f18 <HAL_DMA_IRQHandler+0x69c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d03b      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a7f      	ldr	r2, [pc, #508]	@ (8002f1c <HAL_DMA_IRQHandler+0x6a0>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d036      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a7d      	ldr	r2, [pc, #500]	@ (8002f20 <HAL_DMA_IRQHandler+0x6a4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d031      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7c      	ldr	r2, [pc, #496]	@ (8002f24 <HAL_DMA_IRQHandler+0x6a8>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d02c      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a7a      	ldr	r2, [pc, #488]	@ (8002f28 <HAL_DMA_IRQHandler+0x6ac>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d027      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a79      	ldr	r2, [pc, #484]	@ (8002f2c <HAL_DMA_IRQHandler+0x6b0>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d022      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a77      	ldr	r2, [pc, #476]	@ (8002f30 <HAL_DMA_IRQHandler+0x6b4>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01d      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a76      	ldr	r2, [pc, #472]	@ (8002f34 <HAL_DMA_IRQHandler+0x6b8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d018      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a74      	ldr	r2, [pc, #464]	@ (8002f38 <HAL_DMA_IRQHandler+0x6bc>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a73      	ldr	r2, [pc, #460]	@ (8002f3c <HAL_DMA_IRQHandler+0x6c0>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d00e      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a71      	ldr	r2, [pc, #452]	@ (8002f40 <HAL_DMA_IRQHandler+0x6c4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a70      	ldr	r2, [pc, #448]	@ (8002f44 <HAL_DMA_IRQHandler+0x6c8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d004      	beq.n	8002d92 <HAL_DMA_IRQHandler+0x516>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a6e      	ldr	r2, [pc, #440]	@ (8002f48 <HAL_DMA_IRQHandler+0x6cc>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d10a      	bne.n	8002da8 <HAL_DMA_IRQHandler+0x52c>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0308 	and.w	r3, r3, #8
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	bf14      	ite	ne
 8002da0:	2301      	movne	r3, #1
 8002da2:	2300      	moveq	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	e009      	b.n	8002dbc <HAL_DMA_IRQHandler+0x540>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf14      	ite	ne
 8002db6:	2301      	movne	r3, #1
 8002db8:	2300      	moveq	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d03e      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	f003 031f 	and.w	r3, r3, #31
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d018      	beq.n	8002e10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d108      	bne.n	8002dfe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d024      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
 8002dfc:	e01f      	b.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d01b      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	4798      	blx	r3
 8002e0e:	e016      	b.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d107      	bne.n	8002e2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0208 	bic.w	r2, r2, #8
 8002e2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2220      	movs	r2, #32
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 8110 	beq.w	8003074 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	@ (8002f0c <HAL_DMA_IRQHandler+0x690>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2b      	ldr	r2, [pc, #172]	@ (8002f10 <HAL_DMA_IRQHandler+0x694>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	@ (8002f14 <HAL_DMA_IRQHandler+0x698>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a28      	ldr	r2, [pc, #160]	@ (8002f18 <HAL_DMA_IRQHandler+0x69c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a26      	ldr	r2, [pc, #152]	@ (8002f1c <HAL_DMA_IRQHandler+0x6a0>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a25      	ldr	r2, [pc, #148]	@ (8002f20 <HAL_DMA_IRQHandler+0x6a4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a23      	ldr	r2, [pc, #140]	@ (8002f24 <HAL_DMA_IRQHandler+0x6a8>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a22      	ldr	r2, [pc, #136]	@ (8002f28 <HAL_DMA_IRQHandler+0x6ac>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a20      	ldr	r2, [pc, #128]	@ (8002f2c <HAL_DMA_IRQHandler+0x6b0>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002f30 <HAL_DMA_IRQHandler+0x6b4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8002f34 <HAL_DMA_IRQHandler+0x6b8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8002f38 <HAL_DMA_IRQHandler+0x6bc>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1a      	ldr	r2, [pc, #104]	@ (8002f3c <HAL_DMA_IRQHandler+0x6c0>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a19      	ldr	r2, [pc, #100]	@ (8002f40 <HAL_DMA_IRQHandler+0x6c4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a17      	ldr	r2, [pc, #92]	@ (8002f44 <HAL_DMA_IRQHandler+0x6c8>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x678>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a16      	ldr	r2, [pc, #88]	@ (8002f48 <HAL_DMA_IRQHandler+0x6cc>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d12b      	bne.n	8002f4c <HAL_DMA_IRQHandler+0x6d0>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0310 	and.w	r3, r3, #16
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e02a      	b.n	8002f60 <HAL_DMA_IRQHandler+0x6e4>
 8002f0a:	bf00      	nop
 8002f0c:	40020010 	.word	0x40020010
 8002f10:	40020028 	.word	0x40020028
 8002f14:	40020040 	.word	0x40020040
 8002f18:	40020058 	.word	0x40020058
 8002f1c:	40020070 	.word	0x40020070
 8002f20:	40020088 	.word	0x40020088
 8002f24:	400200a0 	.word	0x400200a0
 8002f28:	400200b8 	.word	0x400200b8
 8002f2c:	40020410 	.word	0x40020410
 8002f30:	40020428 	.word	0x40020428
 8002f34:	40020440 	.word	0x40020440
 8002f38:	40020458 	.word	0x40020458
 8002f3c:	40020470 	.word	0x40020470
 8002f40:	40020488 	.word	0x40020488
 8002f44:	400204a0 	.word	0x400204a0
 8002f48:	400204b8 	.word	0x400204b8
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	bf14      	ite	ne
 8002f5a:	2301      	movne	r3, #1
 8002f5c:	2300      	moveq	r3, #0
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 8087 	beq.w	8003074 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f6a:	f003 031f 	and.w	r3, r3, #31
 8002f6e:	2220      	movs	r2, #32
 8002f70:	409a      	lsls	r2, r3
 8002f72:	6a3b      	ldr	r3, [r7, #32]
 8002f74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d139      	bne.n	8002ff6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 0216 	bic.w	r2, r2, #22
 8002f90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695a      	ldr	r2, [r3, #20]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002fa0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d103      	bne.n	8002fb2 <HAL_DMA_IRQHandler+0x736>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d007      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0208 	bic.w	r2, r2, #8
 8002fc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc6:	f003 031f 	and.w	r3, r3, #31
 8002fca:	223f      	movs	r2, #63	@ 0x3f
 8002fcc:	409a      	lsls	r2, r3
 8002fce:	6a3b      	ldr	r3, [r7, #32]
 8002fd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 834a 	beq.w	8003680 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
          }
          return;
 8002ff4:	e344      	b.n	8003680 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d108      	bne.n	8003024 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	2b00      	cmp	r3, #0
 8003018:	d02c      	beq.n	8003074 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	4798      	blx	r3
 8003022:	e027      	b.n	8003074 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d023      	beq.n	8003074 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4798      	blx	r3
 8003034:	e01e      	b.n	8003074 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10f      	bne.n	8003064 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0210 	bic.w	r2, r2, #16
 8003052:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d003      	beq.n	8003074 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 8306 	beq.w	800368a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 8088 	beq.w	800319c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2204      	movs	r2, #4
 8003090:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a7a      	ldr	r2, [pc, #488]	@ (8003284 <HAL_DMA_IRQHandler+0xa08>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d04a      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a79      	ldr	r2, [pc, #484]	@ (8003288 <HAL_DMA_IRQHandler+0xa0c>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d045      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a77      	ldr	r2, [pc, #476]	@ (800328c <HAL_DMA_IRQHandler+0xa10>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d040      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a76      	ldr	r2, [pc, #472]	@ (8003290 <HAL_DMA_IRQHandler+0xa14>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d03b      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a74      	ldr	r2, [pc, #464]	@ (8003294 <HAL_DMA_IRQHandler+0xa18>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d036      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	@ (8003298 <HAL_DMA_IRQHandler+0xa1c>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d031      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a71      	ldr	r2, [pc, #452]	@ (800329c <HAL_DMA_IRQHandler+0xa20>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d02c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a70      	ldr	r2, [pc, #448]	@ (80032a0 <HAL_DMA_IRQHandler+0xa24>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d027      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a6e      	ldr	r2, [pc, #440]	@ (80032a4 <HAL_DMA_IRQHandler+0xa28>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d022      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a6d      	ldr	r2, [pc, #436]	@ (80032a8 <HAL_DMA_IRQHandler+0xa2c>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d01d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a6b      	ldr	r2, [pc, #428]	@ (80032ac <HAL_DMA_IRQHandler+0xa30>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d018      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a6a      	ldr	r2, [pc, #424]	@ (80032b0 <HAL_DMA_IRQHandler+0xa34>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d013      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a68      	ldr	r2, [pc, #416]	@ (80032b4 <HAL_DMA_IRQHandler+0xa38>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a67      	ldr	r2, [pc, #412]	@ (80032b8 <HAL_DMA_IRQHandler+0xa3c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d009      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a65      	ldr	r2, [pc, #404]	@ (80032bc <HAL_DMA_IRQHandler+0xa40>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d004      	beq.n	8003134 <HAL_DMA_IRQHandler+0x8b8>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a64      	ldr	r2, [pc, #400]	@ (80032c0 <HAL_DMA_IRQHandler+0xa44>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d108      	bne.n	8003146 <HAL_DMA_IRQHandler+0x8ca>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 0201 	bic.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
 8003144:	e007      	b.n	8003156 <HAL_DMA_IRQHandler+0x8da>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0201 	bic.w	r2, r2, #1
 8003154:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	3301      	adds	r3, #1
 800315a:	60fb      	str	r3, [r7, #12]
 800315c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800315e:	429a      	cmp	r2, r3
 8003160:	d307      	bcc.n	8003172 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0301 	and.w	r3, r3, #1
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1f2      	bne.n	8003156 <HAL_DMA_IRQHandler+0x8da>
 8003170:	e000      	b.n	8003174 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003172:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d004      	beq.n	800318c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2203      	movs	r2, #3
 8003186:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800318a:	e003      	b.n	8003194 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8272 	beq.w	800368a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	4798      	blx	r3
 80031ae:	e26c      	b.n	800368a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a43      	ldr	r2, [pc, #268]	@ (80032c4 <HAL_DMA_IRQHandler+0xa48>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d022      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a42      	ldr	r2, [pc, #264]	@ (80032c8 <HAL_DMA_IRQHandler+0xa4c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d01d      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a40      	ldr	r2, [pc, #256]	@ (80032cc <HAL_DMA_IRQHandler+0xa50>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d018      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a3f      	ldr	r2, [pc, #252]	@ (80032d0 <HAL_DMA_IRQHandler+0xa54>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d013      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3d      	ldr	r2, [pc, #244]	@ (80032d4 <HAL_DMA_IRQHandler+0xa58>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d00e      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a3c      	ldr	r2, [pc, #240]	@ (80032d8 <HAL_DMA_IRQHandler+0xa5c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d009      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a3a      	ldr	r2, [pc, #232]	@ (80032dc <HAL_DMA_IRQHandler+0xa60>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d004      	beq.n	8003200 <HAL_DMA_IRQHandler+0x984>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a39      	ldr	r2, [pc, #228]	@ (80032e0 <HAL_DMA_IRQHandler+0xa64>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d101      	bne.n	8003204 <HAL_DMA_IRQHandler+0x988>
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <HAL_DMA_IRQHandler+0x98a>
 8003204:	2300      	movs	r3, #0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 823f 	beq.w	800368a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2204      	movs	r2, #4
 800321e:	409a      	lsls	r2, r3
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	4013      	ands	r3, r2
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80cd 	beq.w	80033c4 <HAL_DMA_IRQHandler+0xb48>
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	f000 80c7 	beq.w	80033c4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2204      	movs	r2, #4
 8003240:	409a      	lsls	r2, r3
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d049      	beq.n	80032e4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d109      	bne.n	800326e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 8210 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800326c:	e20a      	b.n	8003684 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003272:	2b00      	cmp	r3, #0
 8003274:	f000 8206 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003280:	e200      	b.n	8003684 <HAL_DMA_IRQHandler+0xe08>
 8003282:	bf00      	nop
 8003284:	40020010 	.word	0x40020010
 8003288:	40020028 	.word	0x40020028
 800328c:	40020040 	.word	0x40020040
 8003290:	40020058 	.word	0x40020058
 8003294:	40020070 	.word	0x40020070
 8003298:	40020088 	.word	0x40020088
 800329c:	400200a0 	.word	0x400200a0
 80032a0:	400200b8 	.word	0x400200b8
 80032a4:	40020410 	.word	0x40020410
 80032a8:	40020428 	.word	0x40020428
 80032ac:	40020440 	.word	0x40020440
 80032b0:	40020458 	.word	0x40020458
 80032b4:	40020470 	.word	0x40020470
 80032b8:	40020488 	.word	0x40020488
 80032bc:	400204a0 	.word	0x400204a0
 80032c0:	400204b8 	.word	0x400204b8
 80032c4:	58025408 	.word	0x58025408
 80032c8:	5802541c 	.word	0x5802541c
 80032cc:	58025430 	.word	0x58025430
 80032d0:	58025444 	.word	0x58025444
 80032d4:	58025458 	.word	0x58025458
 80032d8:	5802546c 	.word	0x5802546c
 80032dc:	58025480 	.word	0x58025480
 80032e0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f003 0320 	and.w	r3, r3, #32
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d160      	bne.n	80033b0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7f      	ldr	r2, [pc, #508]	@ (80034f0 <HAL_DMA_IRQHandler+0xc74>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d04a      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7d      	ldr	r2, [pc, #500]	@ (80034f4 <HAL_DMA_IRQHandler+0xc78>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d045      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7c      	ldr	r2, [pc, #496]	@ (80034f8 <HAL_DMA_IRQHandler+0xc7c>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d040      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a7a      	ldr	r2, [pc, #488]	@ (80034fc <HAL_DMA_IRQHandler+0xc80>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d03b      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a79      	ldr	r2, [pc, #484]	@ (8003500 <HAL_DMA_IRQHandler+0xc84>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d036      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a77      	ldr	r2, [pc, #476]	@ (8003504 <HAL_DMA_IRQHandler+0xc88>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d031      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a76      	ldr	r2, [pc, #472]	@ (8003508 <HAL_DMA_IRQHandler+0xc8c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d02c      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a74      	ldr	r2, [pc, #464]	@ (800350c <HAL_DMA_IRQHandler+0xc90>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d027      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a73      	ldr	r2, [pc, #460]	@ (8003510 <HAL_DMA_IRQHandler+0xc94>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d022      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a71      	ldr	r2, [pc, #452]	@ (8003514 <HAL_DMA_IRQHandler+0xc98>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d01d      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a70      	ldr	r2, [pc, #448]	@ (8003518 <HAL_DMA_IRQHandler+0xc9c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d018      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a6e      	ldr	r2, [pc, #440]	@ (800351c <HAL_DMA_IRQHandler+0xca0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d013      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a6d      	ldr	r2, [pc, #436]	@ (8003520 <HAL_DMA_IRQHandler+0xca4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d00e      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a6b      	ldr	r2, [pc, #428]	@ (8003524 <HAL_DMA_IRQHandler+0xca8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a6a      	ldr	r2, [pc, #424]	@ (8003528 <HAL_DMA_IRQHandler+0xcac>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d004      	beq.n	800338e <HAL_DMA_IRQHandler+0xb12>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a68      	ldr	r2, [pc, #416]	@ (800352c <HAL_DMA_IRQHandler+0xcb0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d108      	bne.n	80033a0 <HAL_DMA_IRQHandler+0xb24>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f022 0208 	bic.w	r2, r2, #8
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	e007      	b.n	80033b0 <HAL_DMA_IRQHandler+0xb34>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0204 	bic.w	r2, r2, #4
 80033ae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8165 	beq.w	8003684 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033c2:	e15f      	b.n	8003684 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	2202      	movs	r2, #2
 80033ce:	409a      	lsls	r2, r3
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	4013      	ands	r3, r2
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80c5 	beq.w	8003564 <HAL_DMA_IRQHandler+0xce8>
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 80bf 	beq.w	8003564 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ea:	f003 031f 	and.w	r3, r3, #31
 80033ee:	2202      	movs	r2, #2
 80033f0:	409a      	lsls	r2, r3
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d109      	bne.n	800341e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	2b00      	cmp	r3, #0
 8003410:	f000 813a 	beq.w	8003688 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800341c:	e134      	b.n	8003688 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003422:	2b00      	cmp	r3, #0
 8003424:	f000 8130 	beq.w	8003688 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003430:	e12a      	b.n	8003688 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	f040 8089 	bne.w	8003550 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2b      	ldr	r2, [pc, #172]	@ (80034f0 <HAL_DMA_IRQHandler+0xc74>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a29      	ldr	r2, [pc, #164]	@ (80034f4 <HAL_DMA_IRQHandler+0xc78>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a28      	ldr	r2, [pc, #160]	@ (80034f8 <HAL_DMA_IRQHandler+0xc7c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a26      	ldr	r2, [pc, #152]	@ (80034fc <HAL_DMA_IRQHandler+0xc80>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a25      	ldr	r2, [pc, #148]	@ (8003500 <HAL_DMA_IRQHandler+0xc84>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a23      	ldr	r2, [pc, #140]	@ (8003504 <HAL_DMA_IRQHandler+0xc88>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a22      	ldr	r2, [pc, #136]	@ (8003508 <HAL_DMA_IRQHandler+0xc8c>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a20      	ldr	r2, [pc, #128]	@ (800350c <HAL_DMA_IRQHandler+0xc90>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a1f      	ldr	r2, [pc, #124]	@ (8003510 <HAL_DMA_IRQHandler+0xc94>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1d      	ldr	r2, [pc, #116]	@ (8003514 <HAL_DMA_IRQHandler+0xc98>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003518 <HAL_DMA_IRQHandler+0xc9c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1a      	ldr	r2, [pc, #104]	@ (800351c <HAL_DMA_IRQHandler+0xca0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a19      	ldr	r2, [pc, #100]	@ (8003520 <HAL_DMA_IRQHandler+0xca4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <HAL_DMA_IRQHandler+0xca8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a16      	ldr	r2, [pc, #88]	@ (8003528 <HAL_DMA_IRQHandler+0xcac>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_IRQHandler+0xc62>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a14      	ldr	r2, [pc, #80]	@ (800352c <HAL_DMA_IRQHandler+0xcb0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d128      	bne.n	8003530 <HAL_DMA_IRQHandler+0xcb4>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 0214 	bic.w	r2, r2, #20
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e027      	b.n	8003540 <HAL_DMA_IRQHandler+0xcc4>
 80034f0:	40020010 	.word	0x40020010
 80034f4:	40020028 	.word	0x40020028
 80034f8:	40020040 	.word	0x40020040
 80034fc:	40020058 	.word	0x40020058
 8003500:	40020070 	.word	0x40020070
 8003504:	40020088 	.word	0x40020088
 8003508:	400200a0 	.word	0x400200a0
 800350c:	400200b8 	.word	0x400200b8
 8003510:	40020410 	.word	0x40020410
 8003514:	40020428 	.word	0x40020428
 8003518:	40020440 	.word	0x40020440
 800351c:	40020458 	.word	0x40020458
 8003520:	40020470 	.word	0x40020470
 8003524:	40020488 	.word	0x40020488
 8003528:	400204a0 	.word	0x400204a0
 800352c:	400204b8 	.word	0x400204b8
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	681a      	ldr	r2, [r3, #0]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 020a 	bic.w	r2, r2, #10
 800353e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 8097 	beq.w	8003688 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003562:	e091      	b.n	8003688 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2208      	movs	r2, #8
 800356e:	409a      	lsls	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	f000 8088 	beq.w	800368a <HAL_DMA_IRQHandler+0xe0e>
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f003 0308 	and.w	r3, r3, #8
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 8082 	beq.w	800368a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a41      	ldr	r2, [pc, #260]	@ (8003690 <HAL_DMA_IRQHandler+0xe14>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d04a      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a3f      	ldr	r2, [pc, #252]	@ (8003694 <HAL_DMA_IRQHandler+0xe18>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d045      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a3e      	ldr	r2, [pc, #248]	@ (8003698 <HAL_DMA_IRQHandler+0xe1c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d040      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a3c      	ldr	r2, [pc, #240]	@ (800369c <HAL_DMA_IRQHandler+0xe20>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d03b      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a3b      	ldr	r2, [pc, #236]	@ (80036a0 <HAL_DMA_IRQHandler+0xe24>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d036      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a39      	ldr	r2, [pc, #228]	@ (80036a4 <HAL_DMA_IRQHandler+0xe28>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d031      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a38      	ldr	r2, [pc, #224]	@ (80036a8 <HAL_DMA_IRQHandler+0xe2c>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d02c      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a36      	ldr	r2, [pc, #216]	@ (80036ac <HAL_DMA_IRQHandler+0xe30>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d027      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a35      	ldr	r2, [pc, #212]	@ (80036b0 <HAL_DMA_IRQHandler+0xe34>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d022      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a33      	ldr	r2, [pc, #204]	@ (80036b4 <HAL_DMA_IRQHandler+0xe38>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d01d      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a32      	ldr	r2, [pc, #200]	@ (80036b8 <HAL_DMA_IRQHandler+0xe3c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a30      	ldr	r2, [pc, #192]	@ (80036bc <HAL_DMA_IRQHandler+0xe40>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d013      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2f      	ldr	r2, [pc, #188]	@ (80036c0 <HAL_DMA_IRQHandler+0xe44>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00e      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <HAL_DMA_IRQHandler+0xe48>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d009      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <HAL_DMA_IRQHandler+0xe4c>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d004      	beq.n	8003626 <HAL_DMA_IRQHandler+0xdaa>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a2a      	ldr	r2, [pc, #168]	@ (80036cc <HAL_DMA_IRQHandler+0xe50>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d108      	bne.n	8003638 <HAL_DMA_IRQHandler+0xdbc>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 021c 	bic.w	r2, r2, #28
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e007      	b.n	8003648 <HAL_DMA_IRQHandler+0xdcc>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681a      	ldr	r2, [r3, #0]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 020e 	bic.w	r2, r2, #14
 8003646:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	f003 031f 	and.w	r3, r3, #31
 8003650:	2201      	movs	r2, #1
 8003652:	409a      	lsls	r2, r3
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d009      	beq.n	800368a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
 800367e:	e004      	b.n	800368a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003680:	bf00      	nop
 8003682:	e002      	b.n	800368a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003684:	bf00      	nop
 8003686:	e000      	b.n	800368a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003688:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800368a:	3728      	adds	r7, #40	@ 0x28
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40020010 	.word	0x40020010
 8003694:	40020028 	.word	0x40020028
 8003698:	40020040 	.word	0x40020040
 800369c:	40020058 	.word	0x40020058
 80036a0:	40020070 	.word	0x40020070
 80036a4:	40020088 	.word	0x40020088
 80036a8:	400200a0 	.word	0x400200a0
 80036ac:	400200b8 	.word	0x400200b8
 80036b0:	40020410 	.word	0x40020410
 80036b4:	40020428 	.word	0x40020428
 80036b8:	40020440 	.word	0x40020440
 80036bc:	40020458 	.word	0x40020458
 80036c0:	40020470 	.word	0x40020470
 80036c4:	40020488 	.word	0x40020488
 80036c8:	400204a0 	.word	0x400204a0
 80036cc:	400204b8 	.word	0x400204b8

080036d0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b087      	sub	sp, #28
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036e8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7f      	ldr	r2, [pc, #508]	@ (80038ec <DMA_SetConfig+0x21c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d072      	beq.n	80037da <DMA_SetConfig+0x10a>
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a7d      	ldr	r2, [pc, #500]	@ (80038f0 <DMA_SetConfig+0x220>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d06d      	beq.n	80037da <DMA_SetConfig+0x10a>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a7c      	ldr	r2, [pc, #496]	@ (80038f4 <DMA_SetConfig+0x224>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d068      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7a      	ldr	r2, [pc, #488]	@ (80038f8 <DMA_SetConfig+0x228>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d063      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a79      	ldr	r2, [pc, #484]	@ (80038fc <DMA_SetConfig+0x22c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d05e      	beq.n	80037da <DMA_SetConfig+0x10a>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a77      	ldr	r2, [pc, #476]	@ (8003900 <DMA_SetConfig+0x230>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d059      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a76      	ldr	r2, [pc, #472]	@ (8003904 <DMA_SetConfig+0x234>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d054      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a74      	ldr	r2, [pc, #464]	@ (8003908 <DMA_SetConfig+0x238>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04f      	beq.n	80037da <DMA_SetConfig+0x10a>
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	@ (800390c <DMA_SetConfig+0x23c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04a      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a71      	ldr	r2, [pc, #452]	@ (8003910 <DMA_SetConfig+0x240>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d045      	beq.n	80037da <DMA_SetConfig+0x10a>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a70      	ldr	r2, [pc, #448]	@ (8003914 <DMA_SetConfig+0x244>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d040      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <DMA_SetConfig+0x248>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d03b      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6d      	ldr	r2, [pc, #436]	@ (800391c <DMA_SetConfig+0x24c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d036      	beq.n	80037da <DMA_SetConfig+0x10a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6b      	ldr	r2, [pc, #428]	@ (8003920 <DMA_SetConfig+0x250>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <DMA_SetConfig+0x254>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d02c      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <DMA_SetConfig+0x258>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d027      	beq.n	80037da <DMA_SetConfig+0x10a>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a67      	ldr	r2, [pc, #412]	@ (800392c <DMA_SetConfig+0x25c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <DMA_SetConfig+0x10a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a65      	ldr	r2, [pc, #404]	@ (8003930 <DMA_SetConfig+0x260>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <DMA_SetConfig+0x10a>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a64      	ldr	r2, [pc, #400]	@ (8003934 <DMA_SetConfig+0x264>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <DMA_SetConfig+0x10a>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a62      	ldr	r2, [pc, #392]	@ (8003938 <DMA_SetConfig+0x268>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <DMA_SetConfig+0x10a>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a61      	ldr	r2, [pc, #388]	@ (800393c <DMA_SetConfig+0x26c>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <DMA_SetConfig+0x10a>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a5f      	ldr	r2, [pc, #380]	@ (8003940 <DMA_SetConfig+0x270>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <DMA_SetConfig+0x10a>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a5e      	ldr	r2, [pc, #376]	@ (8003944 <DMA_SetConfig+0x274>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <DMA_SetConfig+0x10a>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a5c      	ldr	r2, [pc, #368]	@ (8003948 <DMA_SetConfig+0x278>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <DMA_SetConfig+0x10e>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <DMA_SetConfig+0x110>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80037ec:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80037fe:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a39      	ldr	r2, [pc, #228]	@ (80038ec <DMA_SetConfig+0x21c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d04a      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a38      	ldr	r2, [pc, #224]	@ (80038f0 <DMA_SetConfig+0x220>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d045      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a36      	ldr	r2, [pc, #216]	@ (80038f4 <DMA_SetConfig+0x224>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d040      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a35      	ldr	r2, [pc, #212]	@ (80038f8 <DMA_SetConfig+0x228>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d03b      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a33      	ldr	r2, [pc, #204]	@ (80038fc <DMA_SetConfig+0x22c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d036      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a32      	ldr	r2, [pc, #200]	@ (8003900 <DMA_SetConfig+0x230>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d031      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a30      	ldr	r2, [pc, #192]	@ (8003904 <DMA_SetConfig+0x234>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d02c      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2f      	ldr	r2, [pc, #188]	@ (8003908 <DMA_SetConfig+0x238>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d027      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2d      	ldr	r2, [pc, #180]	@ (800390c <DMA_SetConfig+0x23c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d022      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a2c      	ldr	r2, [pc, #176]	@ (8003910 <DMA_SetConfig+0x240>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d01d      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a2a      	ldr	r2, [pc, #168]	@ (8003914 <DMA_SetConfig+0x244>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d018      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a29      	ldr	r2, [pc, #164]	@ (8003918 <DMA_SetConfig+0x248>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a27      	ldr	r2, [pc, #156]	@ (800391c <DMA_SetConfig+0x24c>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00e      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a26      	ldr	r2, [pc, #152]	@ (8003920 <DMA_SetConfig+0x250>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d009      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a24      	ldr	r2, [pc, #144]	@ (8003924 <DMA_SetConfig+0x254>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <DMA_SetConfig+0x1d0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a23      	ldr	r2, [pc, #140]	@ (8003928 <DMA_SetConfig+0x258>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <DMA_SetConfig+0x1d4>
 80038a0:	2301      	movs	r3, #1
 80038a2:	e000      	b.n	80038a6 <DMA_SetConfig+0x1d6>
 80038a4:	2300      	movs	r3, #0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d059      	beq.n	800395e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	223f      	movs	r2, #63	@ 0x3f
 80038b4:	409a      	lsls	r2, r3
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80038c8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b40      	cmp	r3, #64	@ 0x40
 80038d8:	d138      	bne.n	800394c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80038ea:	e086      	b.n	80039fa <DMA_SetConfig+0x32a>
 80038ec:	40020010 	.word	0x40020010
 80038f0:	40020028 	.word	0x40020028
 80038f4:	40020040 	.word	0x40020040
 80038f8:	40020058 	.word	0x40020058
 80038fc:	40020070 	.word	0x40020070
 8003900:	40020088 	.word	0x40020088
 8003904:	400200a0 	.word	0x400200a0
 8003908:	400200b8 	.word	0x400200b8
 800390c:	40020410 	.word	0x40020410
 8003910:	40020428 	.word	0x40020428
 8003914:	40020440 	.word	0x40020440
 8003918:	40020458 	.word	0x40020458
 800391c:	40020470 	.word	0x40020470
 8003920:	40020488 	.word	0x40020488
 8003924:	400204a0 	.word	0x400204a0
 8003928:	400204b8 	.word	0x400204b8
 800392c:	58025408 	.word	0x58025408
 8003930:	5802541c 	.word	0x5802541c
 8003934:	58025430 	.word	0x58025430
 8003938:	58025444 	.word	0x58025444
 800393c:	58025458 	.word	0x58025458
 8003940:	5802546c 	.word	0x5802546c
 8003944:	58025480 	.word	0x58025480
 8003948:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	60da      	str	r2, [r3, #12]
}
 800395c:	e04d      	b.n	80039fa <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a29      	ldr	r2, [pc, #164]	@ (8003a08 <DMA_SetConfig+0x338>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <DMA_SetConfig+0x2de>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a27      	ldr	r2, [pc, #156]	@ (8003a0c <DMA_SetConfig+0x33c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d01d      	beq.n	80039ae <DMA_SetConfig+0x2de>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a26      	ldr	r2, [pc, #152]	@ (8003a10 <DMA_SetConfig+0x340>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d018      	beq.n	80039ae <DMA_SetConfig+0x2de>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a24      	ldr	r2, [pc, #144]	@ (8003a14 <DMA_SetConfig+0x344>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d013      	beq.n	80039ae <DMA_SetConfig+0x2de>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a23      	ldr	r2, [pc, #140]	@ (8003a18 <DMA_SetConfig+0x348>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d00e      	beq.n	80039ae <DMA_SetConfig+0x2de>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a21      	ldr	r2, [pc, #132]	@ (8003a1c <DMA_SetConfig+0x34c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d009      	beq.n	80039ae <DMA_SetConfig+0x2de>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a20      	ldr	r2, [pc, #128]	@ (8003a20 <DMA_SetConfig+0x350>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d004      	beq.n	80039ae <DMA_SetConfig+0x2de>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003a24 <DMA_SetConfig+0x354>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <DMA_SetConfig+0x2e2>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <DMA_SetConfig+0x2e4>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d020      	beq.n	80039fa <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b40      	cmp	r3, #64	@ 0x40
 80039d6:	d108      	bne.n	80039ea <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68ba      	ldr	r2, [r7, #8]
 80039e6:	60da      	str	r2, [r3, #12]
}
 80039e8:	e007      	b.n	80039fa <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	60da      	str	r2, [r3, #12]
}
 80039fa:	bf00      	nop
 80039fc:	371c      	adds	r7, #28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	58025408 	.word	0x58025408
 8003a0c:	5802541c 	.word	0x5802541c
 8003a10:	58025430 	.word	0x58025430
 8003a14:	58025444 	.word	0x58025444
 8003a18:	58025458 	.word	0x58025458
 8003a1c:	5802546c 	.word	0x5802546c
 8003a20:	58025480 	.word	0x58025480
 8003a24:	58025494 	.word	0x58025494

08003a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a42      	ldr	r2, [pc, #264]	@ (8003b40 <DMA_CalcBaseAndBitshift+0x118>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d04a      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a41      	ldr	r2, [pc, #260]	@ (8003b44 <DMA_CalcBaseAndBitshift+0x11c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d045      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3f      	ldr	r2, [pc, #252]	@ (8003b48 <DMA_CalcBaseAndBitshift+0x120>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d040      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a3e      	ldr	r2, [pc, #248]	@ (8003b4c <DMA_CalcBaseAndBitshift+0x124>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d03b      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b50 <DMA_CalcBaseAndBitshift+0x128>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d036      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a3b      	ldr	r2, [pc, #236]	@ (8003b54 <DMA_CalcBaseAndBitshift+0x12c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d031      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a39      	ldr	r2, [pc, #228]	@ (8003b58 <DMA_CalcBaseAndBitshift+0x130>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02c      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a38      	ldr	r2, [pc, #224]	@ (8003b5c <DMA_CalcBaseAndBitshift+0x134>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d027      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a36      	ldr	r2, [pc, #216]	@ (8003b60 <DMA_CalcBaseAndBitshift+0x138>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d022      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a35      	ldr	r2, [pc, #212]	@ (8003b64 <DMA_CalcBaseAndBitshift+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d01d      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a33      	ldr	r2, [pc, #204]	@ (8003b68 <DMA_CalcBaseAndBitshift+0x140>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d018      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a32      	ldr	r2, [pc, #200]	@ (8003b6c <DMA_CalcBaseAndBitshift+0x144>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d013      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a30      	ldr	r2, [pc, #192]	@ (8003b70 <DMA_CalcBaseAndBitshift+0x148>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00e      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2f      	ldr	r2, [pc, #188]	@ (8003b74 <DMA_CalcBaseAndBitshift+0x14c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d009      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <DMA_CalcBaseAndBitshift+0x150>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d004      	beq.n	8003ad0 <DMA_CalcBaseAndBitshift+0xa8>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	@ (8003b7c <DMA_CalcBaseAndBitshift+0x154>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d101      	bne.n	8003ad4 <DMA_CalcBaseAndBitshift+0xac>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e000      	b.n	8003ad6 <DMA_CalcBaseAndBitshift+0xae>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d024      	beq.n	8003b24 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3b10      	subs	r3, #16
 8003ae2:	4a27      	ldr	r2, [pc, #156]	@ (8003b80 <DMA_CalcBaseAndBitshift+0x158>)
 8003ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae8:	091b      	lsrs	r3, r3, #4
 8003aea:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	4a24      	ldr	r2, [pc, #144]	@ (8003b84 <DMA_CalcBaseAndBitshift+0x15c>)
 8003af4:	5cd3      	ldrb	r3, [r2, r3]
 8003af6:	461a      	mov	r2, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d908      	bls.n	8003b14 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	461a      	mov	r2, r3
 8003b08:	4b1f      	ldr	r3, [pc, #124]	@ (8003b88 <DMA_CalcBaseAndBitshift+0x160>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	1d1a      	adds	r2, r3, #4
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b12:	e00d      	b.n	8003b30 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <DMA_CalcBaseAndBitshift+0x160>)
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b22:	e005      	b.n	8003b30 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	3714      	adds	r7, #20
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr
 8003b40:	40020010 	.word	0x40020010
 8003b44:	40020028 	.word	0x40020028
 8003b48:	40020040 	.word	0x40020040
 8003b4c:	40020058 	.word	0x40020058
 8003b50:	40020070 	.word	0x40020070
 8003b54:	40020088 	.word	0x40020088
 8003b58:	400200a0 	.word	0x400200a0
 8003b5c:	400200b8 	.word	0x400200b8
 8003b60:	40020410 	.word	0x40020410
 8003b64:	40020428 	.word	0x40020428
 8003b68:	40020440 	.word	0x40020440
 8003b6c:	40020458 	.word	0x40020458
 8003b70:	40020470 	.word	0x40020470
 8003b74:	40020488 	.word	0x40020488
 8003b78:	400204a0 	.word	0x400204a0
 8003b7c:	400204b8 	.word	0x400204b8
 8003b80:	aaaaaaab 	.word	0xaaaaaaab
 8003b84:	080092ac 	.word	0x080092ac
 8003b88:	fffffc00 	.word	0xfffffc00

08003b8c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b94:	2300      	movs	r3, #0
 8003b96:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d120      	bne.n	8003be2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	2b03      	cmp	r3, #3
 8003ba6:	d858      	bhi.n	8003c5a <DMA_CheckFifoParam+0xce>
 8003ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb0 <DMA_CheckFifoParam+0x24>)
 8003baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bae:	bf00      	nop
 8003bb0:	08003bc1 	.word	0x08003bc1
 8003bb4:	08003bd3 	.word	0x08003bd3
 8003bb8:	08003bc1 	.word	0x08003bc1
 8003bbc:	08003c5b 	.word	0x08003c5b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d048      	beq.n	8003c5e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003bd0:	e045      	b.n	8003c5e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003bda:	d142      	bne.n	8003c62 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003be0:	e03f      	b.n	8003c62 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bea:	d123      	bne.n	8003c34 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf0:	2b03      	cmp	r3, #3
 8003bf2:	d838      	bhi.n	8003c66 <DMA_CheckFifoParam+0xda>
 8003bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bfc <DMA_CheckFifoParam+0x70>)
 8003bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bfa:	bf00      	nop
 8003bfc:	08003c0d 	.word	0x08003c0d
 8003c00:	08003c13 	.word	0x08003c13
 8003c04:	08003c0d 	.word	0x08003c0d
 8003c08:	08003c25 	.word	0x08003c25
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
        break;
 8003c10:	e030      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d025      	beq.n	8003c6a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c22:	e022      	b.n	8003c6a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c2c:	d11f      	bne.n	8003c6e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003c32:	e01c      	b.n	8003c6e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d902      	bls.n	8003c42 <DMA_CheckFifoParam+0xb6>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d003      	beq.n	8003c48 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003c40:	e018      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	73fb      	strb	r3, [r7, #15]
        break;
 8003c46:	e015      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00e      	beq.n	8003c72 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
    break;
 8003c58:	e00b      	b.n	8003c72 <DMA_CheckFifoParam+0xe6>
        break;
 8003c5a:	bf00      	nop
 8003c5c:	e00a      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        break;
 8003c5e:	bf00      	nop
 8003c60:	e008      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        break;
 8003c62:	bf00      	nop
 8003c64:	e006      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        break;
 8003c66:	bf00      	nop
 8003c68:	e004      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6a:	bf00      	nop
 8003c6c:	e002      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
        break;
 8003c6e:	bf00      	nop
 8003c70:	e000      	b.n	8003c74 <DMA_CheckFifoParam+0xe8>
    break;
 8003c72:	bf00      	nop
    }
  }

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop

08003c84 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a38      	ldr	r2, [pc, #224]	@ (8003d78 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d022      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d01d      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a35      	ldr	r2, [pc, #212]	@ (8003d80 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d018      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a33      	ldr	r2, [pc, #204]	@ (8003d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d013      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a32      	ldr	r2, [pc, #200]	@ (8003d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d00e      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a30      	ldr	r2, [pc, #192]	@ (8003d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d009      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2f      	ldr	r2, [pc, #188]	@ (8003d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d004      	beq.n	8003ce2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a2d      	ldr	r2, [pc, #180]	@ (8003d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d101      	bne.n	8003ce6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01a      	beq.n	8003d22 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	3b08      	subs	r3, #8
 8003cf4:	4a28      	ldr	r2, [pc, #160]	@ (8003d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfa:	091b      	lsrs	r3, r3, #4
 8003cfc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	4b26      	ldr	r3, [pc, #152]	@ (8003d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003d02:	4413      	add	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	461a      	mov	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a24      	ldr	r2, [pc, #144]	@ (8003da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003d10:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	2201      	movs	r2, #1
 8003d1a:	409a      	lsls	r2, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003d20:	e024      	b.n	8003d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	3b10      	subs	r3, #16
 8003d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003da4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003d2c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4a1c      	ldr	r2, [pc, #112]	@ (8003da8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d806      	bhi.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dac <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d902      	bls.n	8003d4a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	3308      	adds	r3, #8
 8003d48:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4b18      	ldr	r3, [pc, #96]	@ (8003db0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	461a      	mov	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a16      	ldr	r2, [pc, #88]	@ (8003db4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003d5c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 031f 	and.w	r3, r3, #31
 8003d64:	2201      	movs	r2, #1
 8003d66:	409a      	lsls	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003d6c:	bf00      	nop
 8003d6e:	3714      	adds	r7, #20
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	58025408 	.word	0x58025408
 8003d7c:	5802541c 	.word	0x5802541c
 8003d80:	58025430 	.word	0x58025430
 8003d84:	58025444 	.word	0x58025444
 8003d88:	58025458 	.word	0x58025458
 8003d8c:	5802546c 	.word	0x5802546c
 8003d90:	58025480 	.word	0x58025480
 8003d94:	58025494 	.word	0x58025494
 8003d98:	cccccccd 	.word	0xcccccccd
 8003d9c:	16009600 	.word	0x16009600
 8003da0:	58025880 	.word	0x58025880
 8003da4:	aaaaaaab 	.word	0xaaaaaaab
 8003da8:	400204b8 	.word	0x400204b8
 8003dac:	4002040f 	.word	0x4002040f
 8003db0:	10008200 	.word	0x10008200
 8003db4:	40020880 	.word	0x40020880

08003db8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d04a      	beq.n	8003e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d847      	bhi.n	8003e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a25      	ldr	r2, [pc, #148]	@ (8003e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d022      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a24      	ldr	r2, [pc, #144]	@ (8003e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d01d      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a22      	ldr	r2, [pc, #136]	@ (8003e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d018      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a21      	ldr	r2, [pc, #132]	@ (8003e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d013      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1f      	ldr	r2, [pc, #124]	@ (8003e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00e      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d009      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1c      	ldr	r2, [pc, #112]	@ (8003e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d004      	beq.n	8003e24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003e8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d101      	bne.n	8003e28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003e32:	4413      	add	r3, r2
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	461a      	mov	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	@ (8003e94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003e40:	671a      	str	r2, [r3, #112]	@ 0x70
 8003e42:	e009      	b.n	8003e58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003e44:	68fa      	ldr	r2, [r7, #12]
 8003e46:	4b14      	ldr	r3, [pc, #80]	@ (8003e98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a11      	ldr	r2, [pc, #68]	@ (8003e9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003e56:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	409a      	lsls	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	58025408 	.word	0x58025408
 8003e74:	5802541c 	.word	0x5802541c
 8003e78:	58025430 	.word	0x58025430
 8003e7c:	58025444 	.word	0x58025444
 8003e80:	58025458 	.word	0x58025458
 8003e84:	5802546c 	.word	0x5802546c
 8003e88:	58025480 	.word	0x58025480
 8003e8c:	58025494 	.word	0x58025494
 8003e90:	1600963f 	.word	0x1600963f
 8003e94:	58025940 	.word	0x58025940
 8003e98:	1000823f 	.word	0x1000823f
 8003e9c:	40020940 	.word	0x40020940

08003ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b089      	sub	sp, #36	@ 0x24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003eae:	4b89      	ldr	r3, [pc, #548]	@ (80040d4 <HAL_GPIO_Init+0x234>)
 8003eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003eb2:	e194      	b.n	80041de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	f000 8186 	beq.w	80041d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0303 	and.w	r3, r3, #3
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d005      	beq.n	8003ee4 <HAL_GPIO_Init+0x44>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f003 0303 	and.w	r3, r3, #3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d130      	bne.n	8003f46 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	2203      	movs	r2, #3
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68da      	ldr	r2, [r3, #12]
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	091b      	lsrs	r3, r3, #4
 8003f30:	f003 0201 	and.w	r2, r3, #1
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
 8003f4e:	2b03      	cmp	r3, #3
 8003f50:	d017      	beq.n	8003f82 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	689a      	ldr	r2, [r3, #8]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d123      	bne.n	8003fd6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	08da      	lsrs	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3208      	adds	r2, #8
 8003f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	f003 0307 	and.w	r3, r3, #7
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	220f      	movs	r2, #15
 8003fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8003faa:	43db      	mvns	r3, r3
 8003fac:	69ba      	ldr	r2, [r7, #24]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	691a      	ldr	r2, [r3, #16]
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	08da      	lsrs	r2, r3, #3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	3208      	adds	r2, #8
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	2203      	movs	r2, #3
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	4013      	ands	r3, r2
 8003fec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f003 0203 	and.w	r2, r3, #3
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69ba      	ldr	r2, [r7, #24]
 8004008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 80e0 	beq.w	80041d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004018:	4b2f      	ldr	r3, [pc, #188]	@ (80040d8 <HAL_GPIO_Init+0x238>)
 800401a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800401e:	4a2e      	ldr	r2, [pc, #184]	@ (80040d8 <HAL_GPIO_Init+0x238>)
 8004020:	f043 0302 	orr.w	r3, r3, #2
 8004024:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004028:	4b2b      	ldr	r3, [pc, #172]	@ (80040d8 <HAL_GPIO_Init+0x238>)
 800402a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004036:	4a29      	ldr	r2, [pc, #164]	@ (80040dc <HAL_GPIO_Init+0x23c>)
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	089b      	lsrs	r3, r3, #2
 800403c:	3302      	adds	r3, #2
 800403e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004042:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	220f      	movs	r2, #15
 800404e:	fa02 f303 	lsl.w	r3, r2, r3
 8004052:	43db      	mvns	r3, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4013      	ands	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a20      	ldr	r2, [pc, #128]	@ (80040e0 <HAL_GPIO_Init+0x240>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d052      	beq.n	8004108 <HAL_GPIO_Init+0x268>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a1f      	ldr	r2, [pc, #124]	@ (80040e4 <HAL_GPIO_Init+0x244>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d031      	beq.n	80040ce <HAL_GPIO_Init+0x22e>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a1e      	ldr	r2, [pc, #120]	@ (80040e8 <HAL_GPIO_Init+0x248>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d02b      	beq.n	80040ca <HAL_GPIO_Init+0x22a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a1d      	ldr	r2, [pc, #116]	@ (80040ec <HAL_GPIO_Init+0x24c>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d025      	beq.n	80040c6 <HAL_GPIO_Init+0x226>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a1c      	ldr	r2, [pc, #112]	@ (80040f0 <HAL_GPIO_Init+0x250>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d01f      	beq.n	80040c2 <HAL_GPIO_Init+0x222>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a1b      	ldr	r2, [pc, #108]	@ (80040f4 <HAL_GPIO_Init+0x254>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d019      	beq.n	80040be <HAL_GPIO_Init+0x21e>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a1a      	ldr	r2, [pc, #104]	@ (80040f8 <HAL_GPIO_Init+0x258>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_GPIO_Init+0x21a>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <HAL_GPIO_Init+0x25c>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00d      	beq.n	80040b6 <HAL_GPIO_Init+0x216>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a18      	ldr	r2, [pc, #96]	@ (8004100 <HAL_GPIO_Init+0x260>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <HAL_GPIO_Init+0x212>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a17      	ldr	r2, [pc, #92]	@ (8004104 <HAL_GPIO_Init+0x264>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d101      	bne.n	80040ae <HAL_GPIO_Init+0x20e>
 80040aa:	2309      	movs	r3, #9
 80040ac:	e02d      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ae:	230a      	movs	r3, #10
 80040b0:	e02b      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040b2:	2308      	movs	r3, #8
 80040b4:	e029      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040b6:	2307      	movs	r3, #7
 80040b8:	e027      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ba:	2306      	movs	r3, #6
 80040bc:	e025      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040be:	2305      	movs	r3, #5
 80040c0:	e023      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040c2:	2304      	movs	r3, #4
 80040c4:	e021      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040c6:	2303      	movs	r3, #3
 80040c8:	e01f      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ca:	2302      	movs	r3, #2
 80040cc:	e01d      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040ce:	2301      	movs	r3, #1
 80040d0:	e01b      	b.n	800410a <HAL_GPIO_Init+0x26a>
 80040d2:	bf00      	nop
 80040d4:	58000080 	.word	0x58000080
 80040d8:	58024400 	.word	0x58024400
 80040dc:	58000400 	.word	0x58000400
 80040e0:	58020000 	.word	0x58020000
 80040e4:	58020400 	.word	0x58020400
 80040e8:	58020800 	.word	0x58020800
 80040ec:	58020c00 	.word	0x58020c00
 80040f0:	58021000 	.word	0x58021000
 80040f4:	58021400 	.word	0x58021400
 80040f8:	58021800 	.word	0x58021800
 80040fc:	58021c00 	.word	0x58021c00
 8004100:	58022000 	.word	0x58022000
 8004104:	58022400 	.word	0x58022400
 8004108:	2300      	movs	r3, #0
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	f002 0203 	and.w	r2, r2, #3
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	4093      	lsls	r3, r2
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4313      	orrs	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800411a:	4938      	ldr	r1, [pc, #224]	@ (80041fc <HAL_GPIO_Init+0x35c>)
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	089b      	lsrs	r3, r3, #2
 8004120:	3302      	adds	r3, #2
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004128:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800414e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	43db      	mvns	r3, r3
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	4013      	ands	r3, r2
 8004166:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d003      	beq.n	800417c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800417c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	43db      	mvns	r3, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4013      	ands	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80041a0:	69ba      	ldr	r2, [r7, #24]
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	3301      	adds	r3, #1
 80041dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	fa22 f303 	lsr.w	r3, r2, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f47f ae63 	bne.w	8003eb4 <HAL_GPIO_Init+0x14>
  }
}
 80041ee:	bf00      	nop
 80041f0:	bf00      	nop
 80041f2:	3724      	adds	r7, #36	@ 0x24
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	58000400 	.word	0x58000400

08004200 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <HAL_PWREx_ConfigSupply+0x70>)
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b04      	cmp	r3, #4
 8004212:	d00a      	beq.n	800422a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004214:	4b16      	ldr	r3, [pc, #88]	@ (8004270 <HAL_PWREx_ConfigSupply+0x70>)
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d001      	beq.n	8004226 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e01f      	b.n	8004266 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004226:	2300      	movs	r3, #0
 8004228:	e01d      	b.n	8004266 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800422a:	4b11      	ldr	r3, [pc, #68]	@ (8004270 <HAL_PWREx_ConfigSupply+0x70>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	f023 0207 	bic.w	r2, r3, #7
 8004232:	490f      	ldr	r1, [pc, #60]	@ (8004270 <HAL_PWREx_ConfigSupply+0x70>)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	4313      	orrs	r3, r2
 8004238:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800423a:	f7fc fe55 	bl	8000ee8 <HAL_GetTick>
 800423e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004240:	e009      	b.n	8004256 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004242:	f7fc fe51 	bl	8000ee8 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004250:	d901      	bls.n	8004256 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e007      	b.n	8004266 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004256:	4b06      	ldr	r3, [pc, #24]	@ (8004270 <HAL_PWREx_ConfigSupply+0x70>)
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800425e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004262:	d1ee      	bne.n	8004242 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	58024800 	.word	0x58024800

08004274 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08c      	sub	sp, #48	@ 0x30
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	f000 bc48 	b.w	8004b18 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8088 	beq.w	80043a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004296:	4b99      	ldr	r3, [pc, #612]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800429e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80042a0:	4b96      	ldr	r3, [pc, #600]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80042a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d007      	beq.n	80042bc <HAL_RCC_OscConfig+0x48>
 80042ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ae:	2b18      	cmp	r3, #24
 80042b0:	d111      	bne.n	80042d6 <HAL_RCC_OscConfig+0x62>
 80042b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b4:	f003 0303 	and.w	r3, r3, #3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d10c      	bne.n	80042d6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042bc:	4b8f      	ldr	r3, [pc, #572]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d06d      	beq.n	80043a4 <HAL_RCC_OscConfig+0x130>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d169      	bne.n	80043a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	f000 bc21 	b.w	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042de:	d106      	bne.n	80042ee <HAL_RCC_OscConfig+0x7a>
 80042e0:	4b86      	ldr	r3, [pc, #536]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a85      	ldr	r2, [pc, #532]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e02e      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10c      	bne.n	8004310 <HAL_RCC_OscConfig+0x9c>
 80042f6:	4b81      	ldr	r3, [pc, #516]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a80      	ldr	r2, [pc, #512]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80042fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	4b7e      	ldr	r3, [pc, #504]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a7d      	ldr	r2, [pc, #500]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004308:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	e01d      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004318:	d10c      	bne.n	8004334 <HAL_RCC_OscConfig+0xc0>
 800431a:	4b78      	ldr	r3, [pc, #480]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a77      	ldr	r2, [pc, #476]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004320:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004324:	6013      	str	r3, [r2, #0]
 8004326:	4b75      	ldr	r3, [pc, #468]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a74      	ldr	r2, [pc, #464]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800432c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004330:	6013      	str	r3, [r2, #0]
 8004332:	e00b      	b.n	800434c <HAL_RCC_OscConfig+0xd8>
 8004334:	4b71      	ldr	r3, [pc, #452]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a70      	ldr	r2, [pc, #448]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800433a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800433e:	6013      	str	r3, [r2, #0]
 8004340:	4b6e      	ldr	r3, [pc, #440]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6d      	ldr	r2, [pc, #436]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004346:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800434a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d013      	beq.n	800437c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fc fdc8 	bl	8000ee8 <HAL_GetTick>
 8004358:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fc fdc4 	bl	8000ee8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e3d4      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800436e:	4b63      	ldr	r3, [pc, #396]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0xe8>
 800437a:	e014      	b.n	80043a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800437c:	f7fc fdb4 	bl	8000ee8 <HAL_GetTick>
 8004380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004384:	f7fc fdb0 	bl	8000ee8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b64      	cmp	r3, #100	@ 0x64
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e3c0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004396:	4b59      	ldr	r3, [pc, #356]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d1f0      	bne.n	8004384 <HAL_RCC_OscConfig+0x110>
 80043a2:	e000      	b.n	80043a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 80ca 	beq.w	8004548 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043b4:	4b51      	ldr	r3, [pc, #324]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80043be:	4b4f      	ldr	r3, [pc, #316]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d007      	beq.n	80043da <HAL_RCC_OscConfig+0x166>
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	2b18      	cmp	r3, #24
 80043ce:	d156      	bne.n	800447e <HAL_RCC_OscConfig+0x20a>
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 0303 	and.w	r3, r3, #3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d151      	bne.n	800447e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043da:	4b48      	ldr	r3, [pc, #288]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0304 	and.w	r3, r3, #4
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <HAL_RCC_OscConfig+0x17e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d101      	bne.n	80043f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e392      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80043f2:	4b42      	ldr	r3, [pc, #264]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f023 0219 	bic.w	r2, r3, #25
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	493f      	ldr	r1, [pc, #252]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004400:	4313      	orrs	r3, r2
 8004402:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004404:	f7fc fd70 	bl	8000ee8 <HAL_GetTick>
 8004408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440c:	f7fc fd6c 	bl	8000ee8 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e37c      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800441e:	4b37      	ldr	r3, [pc, #220]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800442a:	f7fc fd69 	bl	8000f00 <HAL_GetREVID>
 800442e:	4603      	mov	r3, r0
 8004430:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004434:	4293      	cmp	r3, r2
 8004436:	d817      	bhi.n	8004468 <HAL_RCC_OscConfig+0x1f4>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	2b40      	cmp	r3, #64	@ 0x40
 800443e:	d108      	bne.n	8004452 <HAL_RCC_OscConfig+0x1de>
 8004440:	4b2e      	ldr	r3, [pc, #184]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004448:	4a2c      	ldr	r2, [pc, #176]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800444a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800444e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004450:	e07a      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004452:	4b2a      	ldr	r3, [pc, #168]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	4926      	ldr	r1, [pc, #152]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004462:	4313      	orrs	r3, r2
 8004464:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004466:	e06f      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004468:	4b24      	ldr	r3, [pc, #144]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	061b      	lsls	r3, r3, #24
 8004476:	4921      	ldr	r1, [pc, #132]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004478:	4313      	orrs	r3, r2
 800447a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800447c:	e064      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d047      	beq.n	8004516 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004486:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f023 0219 	bic.w	r2, r3, #25
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	491a      	ldr	r1, [pc, #104]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fc fd26 	bl	8000ee8 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044a0:	f7fc fd22 	bl	8000ee8 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e332      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044b2:	4b12      	ldr	r3, [pc, #72]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0304 	and.w	r3, r3, #4
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044be:	f7fc fd1f 	bl	8000f00 <HAL_GetREVID>
 80044c2:	4603      	mov	r3, r0
 80044c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d819      	bhi.n	8004500 <HAL_RCC_OscConfig+0x28c>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b40      	cmp	r3, #64	@ 0x40
 80044d2:	d108      	bne.n	80044e6 <HAL_RCC_OscConfig+0x272>
 80044d4:	4b09      	ldr	r3, [pc, #36]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80044dc:	4a07      	ldr	r2, [pc, #28]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e2:	6053      	str	r3, [r2, #4]
 80044e4:	e030      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
 80044e6:	4b05      	ldr	r3, [pc, #20]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	031b      	lsls	r3, r3, #12
 80044f4:	4901      	ldr	r1, [pc, #4]	@ (80044fc <HAL_RCC_OscConfig+0x288>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	604b      	str	r3, [r1, #4]
 80044fa:	e025      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
 80044fc:	58024400 	.word	0x58024400
 8004500:	4b9a      	ldr	r3, [pc, #616]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	061b      	lsls	r3, r3, #24
 800450e:	4997      	ldr	r1, [pc, #604]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004510:	4313      	orrs	r3, r2
 8004512:	604b      	str	r3, [r1, #4]
 8004514:	e018      	b.n	8004548 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004516:	4b95      	ldr	r3, [pc, #596]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a94      	ldr	r2, [pc, #592]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fc fce1 	bl	8000ee8 <HAL_GetTick>
 8004526:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800452a:	f7fc fcdd 	bl	8000ee8 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e2ed      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800453c:	4b8b      	ldr	r3, [pc, #556]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d1f0      	bne.n	800452a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0310 	and.w	r3, r3, #16
 8004550:	2b00      	cmp	r3, #0
 8004552:	f000 80a9 	beq.w	80046a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004556:	4b85      	ldr	r3, [pc, #532]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800455e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004560:	4b82      	ldr	r3, [pc, #520]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004564:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d007      	beq.n	800457c <HAL_RCC_OscConfig+0x308>
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	2b18      	cmp	r3, #24
 8004570:	d13a      	bne.n	80045e8 <HAL_RCC_OscConfig+0x374>
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f003 0303 	and.w	r3, r3, #3
 8004578:	2b01      	cmp	r3, #1
 800457a:	d135      	bne.n	80045e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800457c:	4b7b      	ldr	r3, [pc, #492]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x320>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2b80      	cmp	r3, #128	@ 0x80
 800458e:	d001      	beq.n	8004594 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e2c1      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004594:	f7fc fcb4 	bl	8000f00 <HAL_GetREVID>
 8004598:	4603      	mov	r3, r0
 800459a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800459e:	4293      	cmp	r3, r2
 80045a0:	d817      	bhi.n	80045d2 <HAL_RCC_OscConfig+0x35e>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d108      	bne.n	80045bc <HAL_RCC_OscConfig+0x348>
 80045aa:	4b70      	ldr	r3, [pc, #448]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80045b2:	4a6e      	ldr	r2, [pc, #440]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80045b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045ba:	e075      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045bc:	4b6b      	ldr	r3, [pc, #428]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	069b      	lsls	r3, r3, #26
 80045ca:	4968      	ldr	r1, [pc, #416]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045d0:	e06a      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80045d2:	4b66      	ldr	r3, [pc, #408]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	061b      	lsls	r3, r3, #24
 80045e0:	4962      	ldr	r1, [pc, #392]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80045e6:	e05f      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d042      	beq.n	8004676 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80045f0:	4b5e      	ldr	r3, [pc, #376]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5d      	ldr	r2, [pc, #372]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80045f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80045fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045fc:	f7fc fc74 	bl	8000ee8 <HAL_GetTick>
 8004600:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004604:	f7fc fc70 	bl	8000ee8 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e280      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004616:	4b55      	ldr	r3, [pc, #340]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0f0      	beq.n	8004604 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004622:	f7fc fc6d 	bl	8000f00 <HAL_GetREVID>
 8004626:	4603      	mov	r3, r0
 8004628:	f241 0203 	movw	r2, #4099	@ 0x1003
 800462c:	4293      	cmp	r3, r2
 800462e:	d817      	bhi.n	8004660 <HAL_RCC_OscConfig+0x3ec>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	2b20      	cmp	r3, #32
 8004636:	d108      	bne.n	800464a <HAL_RCC_OscConfig+0x3d6>
 8004638:	4b4c      	ldr	r3, [pc, #304]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004640:	4a4a      	ldr	r2, [pc, #296]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004642:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004646:	6053      	str	r3, [r2, #4]
 8004648:	e02e      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
 800464a:	4b48      	ldr	r3, [pc, #288]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	069b      	lsls	r3, r3, #26
 8004658:	4944      	ldr	r1, [pc, #272]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800465a:	4313      	orrs	r3, r2
 800465c:	604b      	str	r3, [r1, #4]
 800465e:	e023      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
 8004660:	4b42      	ldr	r3, [pc, #264]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	061b      	lsls	r3, r3, #24
 800466e:	493f      	ldr	r1, [pc, #252]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	60cb      	str	r3, [r1, #12]
 8004674:	e018      	b.n	80046a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004676:	4b3d      	ldr	r3, [pc, #244]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a3c      	ldr	r2, [pc, #240]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800467c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004680:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004682:	f7fc fc31 	bl	8000ee8 <HAL_GetTick>
 8004686:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004688:	e008      	b.n	800469c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800468a:	f7fc fc2d 	bl	8000ee8 <HAL_GetTick>
 800468e:	4602      	mov	r2, r0
 8004690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004692:	1ad3      	subs	r3, r2, r3
 8004694:	2b02      	cmp	r3, #2
 8004696:	d901      	bls.n	800469c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e23d      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800469c:	4b33      	ldr	r3, [pc, #204]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d1f0      	bne.n	800468a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0308 	and.w	r3, r3, #8
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d036      	beq.n	8004722 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d019      	beq.n	80046f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046bc:	4b2b      	ldr	r3, [pc, #172]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046c0:	4a2a      	ldr	r2, [pc, #168]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c8:	f7fc fc0e 	bl	8000ee8 <HAL_GetTick>
 80046cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046d0:	f7fc fc0a 	bl	8000ee8 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e21a      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80046e2:	4b22      	ldr	r3, [pc, #136]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e6:	f003 0302 	and.w	r3, r3, #2
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d0f0      	beq.n	80046d0 <HAL_RCC_OscConfig+0x45c>
 80046ee:	e018      	b.n	8004722 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046f0:	4b1e      	ldr	r3, [pc, #120]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f4:	4a1d      	ldr	r2, [pc, #116]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 80046f6:	f023 0301 	bic.w	r3, r3, #1
 80046fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046fc:	f7fc fbf4 	bl	8000ee8 <HAL_GetTick>
 8004700:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004702:	e008      	b.n	8004716 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004704:	f7fc fbf0 	bl	8000ee8 <HAL_GetTick>
 8004708:	4602      	mov	r2, r0
 800470a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	2b02      	cmp	r3, #2
 8004710:	d901      	bls.n	8004716 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e200      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004716:	4b15      	ldr	r3, [pc, #84]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800471a:	f003 0302 	and.w	r3, r3, #2
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1f0      	bne.n	8004704 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0320 	and.w	r3, r3, #32
 800472a:	2b00      	cmp	r3, #0
 800472c:	d039      	beq.n	80047a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d01c      	beq.n	8004770 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004736:	4b0d      	ldr	r3, [pc, #52]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4a0c      	ldr	r2, [pc, #48]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800473c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004740:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004742:	f7fc fbd1 	bl	8000ee8 <HAL_GetTick>
 8004746:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004748:	e008      	b.n	800475c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800474a:	f7fc fbcd 	bl	8000ee8 <HAL_GetTick>
 800474e:	4602      	mov	r2, r0
 8004750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d901      	bls.n	800475c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004758:	2303      	movs	r3, #3
 800475a:	e1dd      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800475c:	4b03      	ldr	r3, [pc, #12]	@ (800476c <HAL_RCC_OscConfig+0x4f8>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0f0      	beq.n	800474a <HAL_RCC_OscConfig+0x4d6>
 8004768:	e01b      	b.n	80047a2 <HAL_RCC_OscConfig+0x52e>
 800476a:	bf00      	nop
 800476c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004770:	4b9b      	ldr	r3, [pc, #620]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a9a      	ldr	r2, [pc, #616]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800477a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800477c:	f7fc fbb4 	bl	8000ee8 <HAL_GetTick>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004782:	e008      	b.n	8004796 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004784:	f7fc fbb0 	bl	8000ee8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e1c0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004796:	4b92      	ldr	r3, [pc, #584]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1f0      	bne.n	8004784 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0304 	and.w	r3, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8081 	beq.w	80048b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047b0:	4b8c      	ldr	r3, [pc, #560]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a8b      	ldr	r2, [pc, #556]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80047bc:	f7fc fb94 	bl	8000ee8 <HAL_GetTick>
 80047c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047c2:	e008      	b.n	80047d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047c4:	f7fc fb90 	bl	8000ee8 <HAL_GetTick>
 80047c8:	4602      	mov	r2, r0
 80047ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	2b64      	cmp	r3, #100	@ 0x64
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e1a0      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80047d6:	4b83      	ldr	r3, [pc, #524]	@ (80049e4 <HAL_RCC_OscConfig+0x770>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d0f0      	beq.n	80047c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d106      	bne.n	80047f8 <HAL_RCC_OscConfig+0x584>
 80047ea:	4b7d      	ldr	r3, [pc, #500]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80047ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047ee:	4a7c      	ldr	r2, [pc, #496]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80047f0:	f043 0301 	orr.w	r3, r3, #1
 80047f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80047f6:	e02d      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <HAL_RCC_OscConfig+0x5a6>
 8004800:	4b77      	ldr	r3, [pc, #476]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004804:	4a76      	ldr	r2, [pc, #472]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004806:	f023 0301 	bic.w	r3, r3, #1
 800480a:	6713      	str	r3, [r2, #112]	@ 0x70
 800480c:	4b74      	ldr	r3, [pc, #464]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800480e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004810:	4a73      	ldr	r2, [pc, #460]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004812:	f023 0304 	bic.w	r3, r3, #4
 8004816:	6713      	str	r3, [r2, #112]	@ 0x70
 8004818:	e01c      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b05      	cmp	r3, #5
 8004820:	d10c      	bne.n	800483c <HAL_RCC_OscConfig+0x5c8>
 8004822:	4b6f      	ldr	r3, [pc, #444]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004826:	4a6e      	ldr	r2, [pc, #440]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004828:	f043 0304 	orr.w	r3, r3, #4
 800482c:	6713      	str	r3, [r2, #112]	@ 0x70
 800482e:	4b6c      	ldr	r3, [pc, #432]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004830:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004832:	4a6b      	ldr	r2, [pc, #428]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6713      	str	r3, [r2, #112]	@ 0x70
 800483a:	e00b      	b.n	8004854 <HAL_RCC_OscConfig+0x5e0>
 800483c:	4b68      	ldr	r3, [pc, #416]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800483e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004840:	4a67      	ldr	r2, [pc, #412]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004842:	f023 0301 	bic.w	r3, r3, #1
 8004846:	6713      	str	r3, [r2, #112]	@ 0x70
 8004848:	4b65      	ldr	r3, [pc, #404]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800484a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484c:	4a64      	ldr	r2, [pc, #400]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800484e:	f023 0304 	bic.w	r3, r3, #4
 8004852:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d015      	beq.n	8004888 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fc fb44 	bl	8000ee8 <HAL_GetTick>
 8004860:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004862:	e00a      	b.n	800487a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fc fb40 	bl	8000ee8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e14e      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800487a:	4b59      	ldr	r3, [pc, #356]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800487c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800487e:	f003 0302 	and.w	r3, r3, #2
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0ee      	beq.n	8004864 <HAL_RCC_OscConfig+0x5f0>
 8004886:	e014      	b.n	80048b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004888:	f7fc fb2e 	bl	8000ee8 <HAL_GetTick>
 800488c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004890:	f7fc fb2a 	bl	8000ee8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e138      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80048a6:	4b4e      	ldr	r3, [pc, #312]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d1ee      	bne.n	8004890 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 812d 	beq.w	8004b16 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80048bc:	4b48      	ldr	r3, [pc, #288]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048c4:	2b18      	cmp	r3, #24
 80048c6:	f000 80bd 	beq.w	8004a44 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	f040 809e 	bne.w	8004a10 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d4:	4b42      	ldr	r3, [pc, #264]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a41      	ldr	r2, [pc, #260]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fc fb02 	bl	8000ee8 <HAL_GetTick>
 80048e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fc fafe 	bl	8000ee8 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e10e      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80048fa:	4b39      	ldr	r3, [pc, #228]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004906:	4b36      	ldr	r3, [pc, #216]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004908:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCC_OscConfig+0x774>)
 800490c:	4013      	ands	r3, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	430a      	orrs	r2, r1
 800491a:	4931      	ldr	r1, [pc, #196]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800491c:	4313      	orrs	r3, r2
 800491e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004924:	3b01      	subs	r3, #1
 8004926:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800492e:	3b01      	subs	r3, #1
 8004930:	025b      	lsls	r3, r3, #9
 8004932:	b29b      	uxth	r3, r3
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800493a:	3b01      	subs	r3, #1
 800493c:	041b      	lsls	r3, r3, #16
 800493e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	3b01      	subs	r3, #1
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004950:	4923      	ldr	r1, [pc, #140]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004952:	4313      	orrs	r3, r2
 8004954:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004956:	4b22      	ldr	r3, [pc, #136]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	4a21      	ldr	r2, [pc, #132]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800495c:	f023 0301 	bic.w	r3, r3, #1
 8004960:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004962:	4b1f      	ldr	r3, [pc, #124]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004964:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004966:	4b21      	ldr	r3, [pc, #132]	@ (80049ec <HAL_RCC_OscConfig+0x778>)
 8004968:	4013      	ands	r3, r2
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800496e:	00d2      	lsls	r2, r2, #3
 8004970:	491b      	ldr	r1, [pc, #108]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004972:	4313      	orrs	r3, r2
 8004974:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004976:	4b1a      	ldr	r3, [pc, #104]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	f023 020c 	bic.w	r2, r3, #12
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004982:	4917      	ldr	r1, [pc, #92]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004988:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800498a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498c:	f023 0202 	bic.w	r2, r3, #2
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004994:	4912      	ldr	r1, [pc, #72]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 8004996:	4313      	orrs	r3, r2
 8004998:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800499a:	4b11      	ldr	r3, [pc, #68]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 800499c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800499e:	4a10      	ldr	r2, [pc, #64]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049a6:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049aa:	4a0d      	ldr	r2, [pc, #52]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80049b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b6:	4a0a      	ldr	r2, [pc, #40]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80049bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80049be:	4b08      	ldr	r3, [pc, #32]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c2:	4a07      	ldr	r2, [pc, #28]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049c4:	f043 0301 	orr.w	r3, r3, #1
 80049c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_RCC_OscConfig+0x76c>)
 80049d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80049d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d6:	f7fc fa87 	bl	8000ee8 <HAL_GetTick>
 80049da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80049dc:	e011      	b.n	8004a02 <HAL_RCC_OscConfig+0x78e>
 80049de:	bf00      	nop
 80049e0:	58024400 	.word	0x58024400
 80049e4:	58024800 	.word	0x58024800
 80049e8:	fffffc0c 	.word	0xfffffc0c
 80049ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f0:	f7fc fa7a 	bl	8000ee8 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e08a      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a02:	4b47      	ldr	r3, [pc, #284]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x77c>
 8004a0e:	e082      	b.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a10:	4b43      	ldr	r3, [pc, #268]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a42      	ldr	r2, [pc, #264]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a16:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1c:	f7fc fa64 	bl	8000ee8 <HAL_GetTick>
 8004a20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a24:	f7fc fa60 	bl	8000ee8 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e070      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004a36:	4b3a      	ldr	r3, [pc, #232]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0x7b0>
 8004a42:	e068      	b.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004a44:	4b36      	ldr	r3, [pc, #216]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a48:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004a4a:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a4e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d031      	beq.n	8004abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	f003 0203 	and.w	r2, r3, #3
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d12a      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	091b      	lsrs	r3, r3, #4
 8004a6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d122      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a80:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d11a      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	0a5b      	lsrs	r3, r3, #9
 8004a8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a92:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d111      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	0c1b      	lsrs	r3, r3, #16
 8004a9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d108      	bne.n	8004abc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	0e1b      	lsrs	r3, r3, #24
 8004aae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d001      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e02b      	b.n	8004b18 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004ac0:	4b17      	ldr	r3, [pc, #92]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004ac2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004aca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d01f      	beq.n	8004b16 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ad6:	4b12      	ldr	r3, [pc, #72]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	4a11      	ldr	r2, [pc, #68]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004adc:	f023 0301 	bic.w	r3, r3, #1
 8004ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ae2:	f7fc fa01 	bl	8000ee8 <HAL_GetTick>
 8004ae6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004ae8:	bf00      	nop
 8004aea:	f7fc f9fd 	bl	8000ee8 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d0f9      	beq.n	8004aea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004af6:	4b0a      	ldr	r3, [pc, #40]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004af8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004afa:	4b0a      	ldr	r3, [pc, #40]	@ (8004b24 <HAL_RCC_OscConfig+0x8b0>)
 8004afc:	4013      	ands	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004b02:	00d2      	lsls	r2, r2, #3
 8004b04:	4906      	ldr	r1, [pc, #24]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004b0a:	4b05      	ldr	r3, [pc, #20]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	4a04      	ldr	r2, [pc, #16]	@ (8004b20 <HAL_RCC_OscConfig+0x8ac>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004b16:	2300      	movs	r3, #0
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3730      	adds	r7, #48	@ 0x30
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}
 8004b20:	58024400 	.word	0x58024400
 8004b24:	ffff0007 	.word	0xffff0007

08004b28 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e19c      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b3c:	4b8a      	ldr	r3, [pc, #552]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	683a      	ldr	r2, [r7, #0]
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d910      	bls.n	8004b6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b4a:	4b87      	ldr	r3, [pc, #540]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f023 020f 	bic.w	r2, r3, #15
 8004b52:	4985      	ldr	r1, [pc, #532]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b5a:	4b83      	ldr	r3, [pc, #524]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 030f 	and.w	r3, r3, #15
 8004b62:	683a      	ldr	r2, [r7, #0]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d001      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e184      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0304 	and.w	r3, r3, #4
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d010      	beq.n	8004b9a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691a      	ldr	r2, [r3, #16]
 8004b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b7e:	699b      	ldr	r3, [r3, #24]
 8004b80:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d908      	bls.n	8004b9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b88:	4b78      	ldr	r3, [pc, #480]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b8a:	699b      	ldr	r3, [r3, #24]
 8004b8c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691b      	ldr	r3, [r3, #16]
 8004b94:	4975      	ldr	r1, [pc, #468]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0308 	and.w	r3, r3, #8
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d010      	beq.n	8004bc8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	695a      	ldr	r2, [r3, #20]
 8004baa:	4b70      	ldr	r3, [pc, #448]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d908      	bls.n	8004bc8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	695b      	ldr	r3, [r3, #20]
 8004bc2:	496a      	ldr	r1, [pc, #424]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d010      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	699a      	ldr	r2, [r3, #24]
 8004bd8:	4b64      	ldr	r3, [pc, #400]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d908      	bls.n	8004bf6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004be4:	4b61      	ldr	r3, [pc, #388]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004be6:	69db      	ldr	r3, [r3, #28]
 8004be8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	495e      	ldr	r1, [pc, #376]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0320 	and.w	r3, r3, #32
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	69da      	ldr	r2, [r3, #28]
 8004c06:	4b59      	ldr	r3, [pc, #356]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d908      	bls.n	8004c24 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004c12:	4b56      	ldr	r3, [pc, #344]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c14:	6a1b      	ldr	r3, [r3, #32]
 8004c16:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	69db      	ldr	r3, [r3, #28]
 8004c1e:	4953      	ldr	r1, [pc, #332]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d010      	beq.n	8004c52 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68da      	ldr	r2, [r3, #12]
 8004c34:	4b4d      	ldr	r3, [pc, #308]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c36:	699b      	ldr	r3, [r3, #24]
 8004c38:	f003 030f 	and.w	r3, r3, #15
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d908      	bls.n	8004c52 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c40:	4b4a      	ldr	r3, [pc, #296]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	f023 020f 	bic.w	r2, r3, #15
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	4947      	ldr	r1, [pc, #284]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d055      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004c5e:	4b43      	ldr	r3, [pc, #268]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	4940      	ldr	r1, [pc, #256]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	2b02      	cmp	r3, #2
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c78:	4b3c      	ldr	r3, [pc, #240]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d121      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e0f6      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	2b03      	cmp	r3, #3
 8004c8e:	d107      	bne.n	8004ca0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004c90:	4b36      	ldr	r3, [pc, #216]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e0ea      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d107      	bne.n	8004cb8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004ca8:	4b30      	ldr	r3, [pc, #192]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d109      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e0de      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004cb8:	4b2c      	ldr	r3, [pc, #176]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0304 	and.w	r3, r3, #4
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e0d6      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004cc8:	4b28      	ldr	r3, [pc, #160]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	f023 0207 	bic.w	r2, r3, #7
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4925      	ldr	r1, [pc, #148]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cda:	f7fc f905 	bl	8000ee8 <HAL_GetTick>
 8004cde:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ce0:	e00a      	b.n	8004cf8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ce2:	f7fc f901 	bl	8000ee8 <HAL_GetTick>
 8004ce6:	4602      	mov	r2, r0
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d901      	bls.n	8004cf8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	e0be      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d1eb      	bne.n	8004ce2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0302 	and.w	r3, r3, #2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d010      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	4b14      	ldr	r3, [pc, #80]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	f003 030f 	and.w	r3, r3, #15
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d208      	bcs.n	8004d38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d26:	4b11      	ldr	r3, [pc, #68]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f023 020f 	bic.w	r2, r3, #15
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	490e      	ldr	r1, [pc, #56]	@ (8004d6c <HAL_RCC_ClockConfig+0x244>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d38:	4b0b      	ldr	r3, [pc, #44]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 030f 	and.w	r3, r3, #15
 8004d40:	683a      	ldr	r2, [r7, #0]
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d214      	bcs.n	8004d70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d46:	4b08      	ldr	r3, [pc, #32]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f023 020f 	bic.w	r2, r3, #15
 8004d4e:	4906      	ldr	r1, [pc, #24]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d56:	4b04      	ldr	r3, [pc, #16]	@ (8004d68 <HAL_RCC_ClockConfig+0x240>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 030f 	and.w	r3, r3, #15
 8004d5e:	683a      	ldr	r2, [r7, #0]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e086      	b.n	8004e76 <HAL_RCC_ClockConfig+0x34e>
 8004d68:	52002000 	.word	0x52002000
 8004d6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	4b3f      	ldr	r3, [pc, #252]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d208      	bcs.n	8004d9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d8e:	699b      	ldr	r3, [r3, #24]
 8004d90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
 8004d98:	4939      	ldr	r1, [pc, #228]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d010      	beq.n	8004dcc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	4b34      	ldr	r3, [pc, #208]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d208      	bcs.n	8004dcc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004dba:	4b31      	ldr	r3, [pc, #196]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dbc:	69db      	ldr	r3, [r3, #28]
 8004dbe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	695b      	ldr	r3, [r3, #20]
 8004dc6:	492e      	ldr	r1, [pc, #184]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dc8:	4313      	orrs	r3, r2
 8004dca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0310 	and.w	r3, r3, #16
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d010      	beq.n	8004dfa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	4b28      	ldr	r3, [pc, #160]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dde:	69db      	ldr	r3, [r3, #28]
 8004de0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d208      	bcs.n	8004dfa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004de8:	4b25      	ldr	r3, [pc, #148]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004dea:	69db      	ldr	r3, [r3, #28]
 8004dec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	699b      	ldr	r3, [r3, #24]
 8004df4:	4922      	ldr	r1, [pc, #136]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	69da      	ldr	r2, [r3, #28]
 8004e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d208      	bcs.n	8004e28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004e16:	4b1a      	ldr	r3, [pc, #104]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	4917      	ldr	r1, [pc, #92]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004e28:	f000 f834 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	4b14      	ldr	r3, [pc, #80]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 030f 	and.w	r3, r3, #15
 8004e38:	4912      	ldr	r1, [pc, #72]	@ (8004e84 <HAL_RCC_ClockConfig+0x35c>)
 8004e3a:	5ccb      	ldrb	r3, [r1, r3]
 8004e3c:	f003 031f 	and.w	r3, r3, #31
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
 8004e44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004e46:	4b0e      	ldr	r3, [pc, #56]	@ (8004e80 <HAL_RCC_ClockConfig+0x358>)
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	f003 030f 	and.w	r3, r3, #15
 8004e4e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e84 <HAL_RCC_ClockConfig+0x35c>)
 8004e50:	5cd3      	ldrb	r3, [r2, r3]
 8004e52:	f003 031f 	and.w	r3, r3, #31
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	fa22 f303 	lsr.w	r3, r2, r3
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8004e88 <HAL_RCC_ClockConfig+0x360>)
 8004e5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004e60:	4a0a      	ldr	r2, [pc, #40]	@ (8004e8c <HAL_RCC_ClockConfig+0x364>)
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004e66:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <HAL_RCC_ClockConfig+0x368>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fb fff2 	bl	8000e54 <HAL_InitTick>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	58024400 	.word	0x58024400
 8004e84:	0800929c 	.word	0x0800929c
 8004e88:	24000044 	.word	0x24000044
 8004e8c:	24000040 	.word	0x24000040
 8004e90:	24000048 	.word	0x24000048

08004e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b089      	sub	sp, #36	@ 0x24
 8004e98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e9a:	4bb3      	ldr	r3, [pc, #716]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea2:	2b18      	cmp	r3, #24
 8004ea4:	f200 8155 	bhi.w	8005152 <HAL_RCC_GetSysClockFreq+0x2be>
 8004ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eae:	bf00      	nop
 8004eb0:	08004f15 	.word	0x08004f15
 8004eb4:	08005153 	.word	0x08005153
 8004eb8:	08005153 	.word	0x08005153
 8004ebc:	08005153 	.word	0x08005153
 8004ec0:	08005153 	.word	0x08005153
 8004ec4:	08005153 	.word	0x08005153
 8004ec8:	08005153 	.word	0x08005153
 8004ecc:	08005153 	.word	0x08005153
 8004ed0:	08004f3b 	.word	0x08004f3b
 8004ed4:	08005153 	.word	0x08005153
 8004ed8:	08005153 	.word	0x08005153
 8004edc:	08005153 	.word	0x08005153
 8004ee0:	08005153 	.word	0x08005153
 8004ee4:	08005153 	.word	0x08005153
 8004ee8:	08005153 	.word	0x08005153
 8004eec:	08005153 	.word	0x08005153
 8004ef0:	08004f41 	.word	0x08004f41
 8004ef4:	08005153 	.word	0x08005153
 8004ef8:	08005153 	.word	0x08005153
 8004efc:	08005153 	.word	0x08005153
 8004f00:	08005153 	.word	0x08005153
 8004f04:	08005153 	.word	0x08005153
 8004f08:	08005153 	.word	0x08005153
 8004f0c:	08005153 	.word	0x08005153
 8004f10:	08004f47 	.word	0x08004f47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f14:	4b94      	ldr	r3, [pc, #592]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0320 	and.w	r3, r3, #32
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d009      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004f20:	4b91      	ldr	r3, [pc, #580]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	08db      	lsrs	r3, r3, #3
 8004f26:	f003 0303 	and.w	r3, r3, #3
 8004f2a:	4a90      	ldr	r2, [pc, #576]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004f30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004f32:	e111      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004f34:	4b8d      	ldr	r3, [pc, #564]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004f36:	61bb      	str	r3, [r7, #24]
      break;
 8004f38:	e10e      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004f3a:	4b8d      	ldr	r3, [pc, #564]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f3c:	61bb      	str	r3, [r7, #24]
      break;
 8004f3e:	e10b      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004f40:	4b8c      	ldr	r3, [pc, #560]	@ (8005174 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004f42:	61bb      	str	r3, [r7, #24]
      break;
 8004f44:	e108      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004f46:	4b88      	ldr	r3, [pc, #544]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004f50:	4b85      	ldr	r3, [pc, #532]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004f5c:	4b82      	ldr	r3, [pc, #520]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004f66:	4b80      	ldr	r3, [pc, #512]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	08db      	lsrs	r3, r3, #3
 8004f6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	fb02 f303 	mul.w	r3, r2, r3
 8004f76:	ee07 3a90 	vmov	s15, r3
 8004f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80e1 	beq.w	800514c <HAL_RCC_GetSysClockFreq+0x2b8>
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	f000 8083 	beq.w	8005098 <HAL_RCC_GetSysClockFreq+0x204>
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	f200 80a1 	bhi.w	80050dc <HAL_RCC_GetSysClockFreq+0x248>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d003      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x114>
 8004fa0:	697b      	ldr	r3, [r7, #20]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d056      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004fa6:	e099      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004fa8:	4b6f      	ldr	r3, [pc, #444]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d02d      	beq.n	8005010 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fb4:	4b6c      	ldr	r3, [pc, #432]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	08db      	lsrs	r3, r3, #3
 8004fba:	f003 0303 	and.w	r3, r3, #3
 8004fbe:	4a6b      	ldr	r2, [pc, #428]	@ (800516c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	ee07 3a90 	vmov	s15, r3
 8004fcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	ee07 3a90 	vmov	s15, r3
 8004fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fde:	4b62      	ldr	r3, [pc, #392]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe6:	ee07 3a90 	vmov	s15, r3
 8004fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ff2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800500a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800500e:	e087      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	ee07 3a90 	vmov	s15, r3
 8005016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800501a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800517c <HAL_RCC_GetSysClockFreq+0x2e8>
 800501e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005022:	4b51      	ldr	r3, [pc, #324]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800502a:	ee07 3a90 	vmov	s15, r3
 800502e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005032:	ed97 6a02 	vldr	s12, [r7, #8]
 8005036:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800503a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800503e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800504a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800504e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005052:	e065      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	ee07 3a90 	vmov	s15, r3
 800505a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800505e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005180 <HAL_RCC_GetSysClockFreq+0x2ec>
 8005062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005066:	4b40      	ldr	r3, [pc, #256]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800506e:	ee07 3a90 	vmov	s15, r3
 8005072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005076:	ed97 6a02 	vldr	s12, [r7, #8]
 800507a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 800507e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800508a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800508e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005096:	e043      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	ee07 3a90 	vmov	s15, r3
 800509e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050a2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005184 <HAL_RCC_GetSysClockFreq+0x2f0>
 80050a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050aa:	4b2f      	ldr	r3, [pc, #188]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b2:	ee07 3a90 	vmov	s15, r3
 80050b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80050be:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 80050c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80050ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80050da:	e021      	b.n	8005120 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	ee07 3a90 	vmov	s15, r3
 80050e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050e6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005180 <HAL_RCC_GetSysClockFreq+0x2ec>
 80050ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050ee:	4b1e      	ldr	r3, [pc, #120]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80050f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8005102:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005178 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005106:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800510a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800510e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005112:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800511a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800511e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8005120:	4b11      	ldr	r3, [pc, #68]	@ (8005168 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005124:	0a5b      	lsrs	r3, r3, #9
 8005126:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800512a:	3301      	adds	r3, #1
 800512c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	ee07 3a90 	vmov	s15, r3
 8005134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005138:	edd7 6a07 	vldr	s13, [r7, #28]
 800513c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005140:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005144:	ee17 3a90 	vmov	r3, s15
 8005148:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800514a:	e005      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800514c:	2300      	movs	r3, #0
 800514e:	61bb      	str	r3, [r7, #24]
      break;
 8005150:	e002      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8005152:	4b07      	ldr	r3, [pc, #28]	@ (8005170 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005154:	61bb      	str	r3, [r7, #24]
      break;
 8005156:	bf00      	nop
  }

  return sysclockfreq;
 8005158:	69bb      	ldr	r3, [r7, #24]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3724      	adds	r7, #36	@ 0x24
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	58024400 	.word	0x58024400
 800516c:	03d09000 	.word	0x03d09000
 8005170:	003d0900 	.word	0x003d0900
 8005174:	017d7840 	.word	0x017d7840
 8005178:	46000000 	.word	0x46000000
 800517c:	4c742400 	.word	0x4c742400
 8005180:	4a742400 	.word	0x4a742400
 8005184:	4bbebc20 	.word	0x4bbebc20

08005188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b082      	sub	sp, #8
 800518c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800518e:	f7ff fe81 	bl	8004e94 <HAL_RCC_GetSysClockFreq>
 8005192:	4602      	mov	r2, r0
 8005194:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	0a1b      	lsrs	r3, r3, #8
 800519a:	f003 030f 	and.w	r3, r3, #15
 800519e:	490f      	ldr	r1, [pc, #60]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x54>)
 80051a0:	5ccb      	ldrb	r3, [r1, r3]
 80051a2:	f003 031f 	and.w	r3, r3, #31
 80051a6:	fa22 f303 	lsr.w	r3, r2, r3
 80051aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051ac:	4b0a      	ldr	r3, [pc, #40]	@ (80051d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	4a09      	ldr	r2, [pc, #36]	@ (80051dc <HAL_RCC_GetHCLKFreq+0x54>)
 80051b6:	5cd3      	ldrb	r3, [r2, r3]
 80051b8:	f003 031f 	and.w	r3, r3, #31
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	fa22 f303 	lsr.w	r3, r2, r3
 80051c2:	4a07      	ldr	r2, [pc, #28]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051c6:	4a07      	ldr	r2, [pc, #28]	@ (80051e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80051cc:	4b04      	ldr	r3, [pc, #16]	@ (80051e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80051ce:	681b      	ldr	r3, [r3, #0]
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	58024400 	.word	0x58024400
 80051dc:	0800929c 	.word	0x0800929c
 80051e0:	24000044 	.word	0x24000044
 80051e4:	24000040 	.word	0x24000040

080051e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80051ec:	f7ff ffcc 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051f0:	4602      	mov	r2, r0
 80051f2:	4b06      	ldr	r3, [pc, #24]	@ (800520c <HAL_RCC_GetPCLK1Freq+0x24>)
 80051f4:	69db      	ldr	r3, [r3, #28]
 80051f6:	091b      	lsrs	r3, r3, #4
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	4904      	ldr	r1, [pc, #16]	@ (8005210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051fe:	5ccb      	ldrb	r3, [r1, r3]
 8005200:	f003 031f 	and.w	r3, r3, #31
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005208:	4618      	mov	r0, r3
 800520a:	bd80      	pop	{r7, pc}
 800520c:	58024400 	.word	0x58024400
 8005210:	0800929c 	.word	0x0800929c

08005214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005218:	f7ff ffb6 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 800521c:	4602      	mov	r2, r0
 800521e:	4b06      	ldr	r3, [pc, #24]	@ (8005238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005220:	69db      	ldr	r3, [r3, #28]
 8005222:	0a1b      	lsrs	r3, r3, #8
 8005224:	f003 0307 	and.w	r3, r3, #7
 8005228:	4904      	ldr	r1, [pc, #16]	@ (800523c <HAL_RCC_GetPCLK2Freq+0x28>)
 800522a:	5ccb      	ldrb	r3, [r1, r3]
 800522c:	f003 031f 	and.w	r3, r3, #31
 8005230:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005234:	4618      	mov	r0, r3
 8005236:	bd80      	pop	{r7, pc}
 8005238:	58024400 	.word	0x58024400
 800523c:	0800929c 	.word	0x0800929c

08005240 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005244:	b0ca      	sub	sp, #296	@ 0x128
 8005246:	af00      	add	r7, sp, #0
 8005248:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800524c:	2300      	movs	r3, #0
 800524e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005252:	2300      	movs	r3, #0
 8005254:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005264:	2500      	movs	r5, #0
 8005266:	ea54 0305 	orrs.w	r3, r4, r5
 800526a:	d049      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800526c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005270:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005272:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005276:	d02f      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005278:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800527c:	d828      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800527e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005282:	d01a      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005284:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005288:	d822      	bhi.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005292:	d007      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005294:	e01c      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005296:	4bb8      	ldr	r3, [pc, #736]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800529a:	4ab7      	ldr	r2, [pc, #732]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800529c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052a2:	e01a      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80052a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a8:	3308      	adds	r3, #8
 80052aa:	2102      	movs	r1, #2
 80052ac:	4618      	mov	r0, r3
 80052ae:	f001 fc8f 	bl	8006bd0 <RCCEx_PLL2_Config>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052b8:	e00f      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80052ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052be:	3328      	adds	r3, #40	@ 0x28
 80052c0:	2102      	movs	r1, #2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f001 fd36 	bl	8006d34 <RCCEx_PLL3_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80052ce:	e004      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052d6:	e000      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80052d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10a      	bne.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80052e2:	4ba5      	ldr	r3, [pc, #660]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80052ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052f0:	4aa1      	ldr	r2, [pc, #644]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052f2:	430b      	orrs	r3, r1
 80052f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80052f6:	e003      	b.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800530c:	f04f 0900 	mov.w	r9, #0
 8005310:	ea58 0309 	orrs.w	r3, r8, r9
 8005314:	d047      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800531a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800531c:	2b04      	cmp	r3, #4
 800531e:	d82a      	bhi.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8005320:	a201      	add	r2, pc, #4	@ (adr r2, 8005328 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8005322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005326:	bf00      	nop
 8005328:	0800533d 	.word	0x0800533d
 800532c:	0800534b 	.word	0x0800534b
 8005330:	08005361 	.word	0x08005361
 8005334:	0800537f 	.word	0x0800537f
 8005338:	0800537f 	.word	0x0800537f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800533c:	4b8e      	ldr	r3, [pc, #568]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	4a8d      	ldr	r2, [pc, #564]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005348:	e01a      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800534a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800534e:	3308      	adds	r3, #8
 8005350:	2100      	movs	r1, #0
 8005352:	4618      	mov	r0, r3
 8005354:	f001 fc3c 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005358:	4603      	mov	r3, r0
 800535a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800535e:	e00f      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005364:	3328      	adds	r3, #40	@ 0x28
 8005366:	2100      	movs	r1, #0
 8005368:	4618      	mov	r0, r3
 800536a:	f001 fce3 	bl	8006d34 <RCCEx_PLL3_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005374:	e004      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800537c:	e000      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800537e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005388:	4b7b      	ldr	r3, [pc, #492]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800538a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800538c:	f023 0107 	bic.w	r1, r3, #7
 8005390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005396:	4a78      	ldr	r2, [pc, #480]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6513      	str	r3, [r2, #80]	@ 0x50
 800539c:	e003      	b.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800539e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80053a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ae:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80053b2:	f04f 0b00 	mov.w	fp, #0
 80053b6:	ea5a 030b 	orrs.w	r3, sl, fp
 80053ba:	d04c      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c6:	d030      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80053c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053cc:	d829      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d0:	d02d      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80053d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d4:	d825      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053d6:	2b80      	cmp	r3, #128	@ 0x80
 80053d8:	d018      	beq.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80053da:	2b80      	cmp	r3, #128	@ 0x80
 80053dc:	d821      	bhi.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80053e2:	2b40      	cmp	r3, #64	@ 0x40
 80053e4:	d007      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80053e6:	e01c      	b.n	8005422 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053e8:	4b63      	ldr	r3, [pc, #396]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ec:	4a62      	ldr	r2, [pc, #392]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80053ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80053f4:	e01c      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053fa:	3308      	adds	r3, #8
 80053fc:	2100      	movs	r1, #0
 80053fe:	4618      	mov	r0, r3
 8005400:	f001 fbe6 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005404:	4603      	mov	r3, r0
 8005406:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800540a:	e011      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800540c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005410:	3328      	adds	r3, #40	@ 0x28
 8005412:	2100      	movs	r1, #0
 8005414:	4618      	mov	r0, r3
 8005416:	f001 fc8d 	bl	8006d34 <RCCEx_PLL3_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800542e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10a      	bne.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005438:	4b4f      	ldr	r3, [pc, #316]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800543a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800543c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005446:	4a4c      	ldr	r2, [pc, #304]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005448:	430b      	orrs	r3, r1
 800544a:	6513      	str	r3, [r2, #80]	@ 0x50
 800544c:	e003      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005452:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005456:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005462:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005466:	2300      	movs	r3, #0
 8005468:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800546c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005470:	460b      	mov	r3, r1
 8005472:	4313      	orrs	r3, r2
 8005474:	d053      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800547a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800547e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005482:	d035      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005484:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005488:	d82e      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800548a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800548e:	d031      	beq.n	80054f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005490:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005494:	d828      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005496:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800549a:	d01a      	beq.n	80054d2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800549c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054a0:	d822      	bhi.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80054a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80054aa:	d007      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80054ac:	e01c      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054ae:	4b32      	ldr	r3, [pc, #200]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054b2:	4a31      	ldr	r2, [pc, #196]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80054b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054ba:	e01c      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054c0:	3308      	adds	r3, #8
 80054c2:	2100      	movs	r1, #0
 80054c4:	4618      	mov	r0, r3
 80054c6:	f001 fb83 	bl	8006bd0 <RCCEx_PLL2_Config>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80054d0:	e011      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d6:	3328      	adds	r3, #40	@ 0x28
 80054d8:	2100      	movs	r1, #0
 80054da:	4618      	mov	r0, r3
 80054dc:	f001 fc2a 	bl	8006d34 <RCCEx_PLL3_Config>
 80054e0:	4603      	mov	r3, r0
 80054e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80054e6:	e006      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054ee:	e002      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054f0:	bf00      	nop
 80054f2:	e000      	b.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80054f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80054fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005502:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800550a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800550e:	4a1a      	ldr	r2, [pc, #104]	@ (8005578 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005510:	430b      	orrs	r3, r1
 8005512:	6593      	str	r3, [r2, #88]	@ 0x58
 8005514:	e003      	b.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800551a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800551e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800552a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800552e:	2300      	movs	r3, #0
 8005530:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005534:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005538:	460b      	mov	r3, r1
 800553a:	4313      	orrs	r3, r2
 800553c:	d056      	beq.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800553e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005542:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005546:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800554a:	d038      	beq.n	80055be <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800554c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005550:	d831      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005552:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005556:	d034      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005558:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800555c:	d82b      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800555e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005562:	d01d      	beq.n	80055a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005564:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005568:	d825      	bhi.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d006      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800556e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005572:	d00a      	beq.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005574:	e01f      	b.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005576:	bf00      	nop
 8005578:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800557c:	4ba2      	ldr	r3, [pc, #648]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800557e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005580:	4aa1      	ldr	r2, [pc, #644]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005582:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005586:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005588:	e01c      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800558a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800558e:	3308      	adds	r3, #8
 8005590:	2100      	movs	r1, #0
 8005592:	4618      	mov	r0, r3
 8005594:	f001 fb1c 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005598:	4603      	mov	r3, r0
 800559a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800559e:	e011      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80055a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055a4:	3328      	adds	r3, #40	@ 0x28
 80055a6:	2100      	movs	r1, #0
 80055a8:	4618      	mov	r0, r3
 80055aa:	f001 fbc3 	bl	8006d34 <RCCEx_PLL3_Config>
 80055ae:	4603      	mov	r3, r0
 80055b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80055b4:	e006      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055bc:	e002      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055be:	bf00      	nop
 80055c0:	e000      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80055c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80055cc:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80055d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80055dc:	4a8a      	ldr	r2, [pc, #552]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055de:	430b      	orrs	r3, r1
 80055e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80055e2:	e003      	b.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80055ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80055f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80055fc:	2300      	movs	r3, #0
 80055fe:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005602:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005606:	460b      	mov	r3, r1
 8005608:	4313      	orrs	r3, r2
 800560a:	d03a      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800560c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005612:	2b30      	cmp	r3, #48	@ 0x30
 8005614:	d01f      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8005616:	2b30      	cmp	r3, #48	@ 0x30
 8005618:	d819      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800561a:	2b20      	cmp	r3, #32
 800561c:	d00c      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800561e:	2b20      	cmp	r3, #32
 8005620:	d815      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8005622:	2b00      	cmp	r3, #0
 8005624:	d019      	beq.n	800565a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8005626:	2b10      	cmp	r3, #16
 8005628:	d111      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800562a:	4b77      	ldr	r3, [pc, #476]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800562c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562e:	4a76      	ldr	r2, [pc, #472]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005630:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005634:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005636:	e011      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3308      	adds	r3, #8
 800563e:	2102      	movs	r1, #2
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fac5 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800564c:	e006      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005654:	e002      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005656:	bf00      	nop
 8005658:	e000      	b.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800565a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800565c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10a      	bne.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005664:	4b68      	ldr	r3, [pc, #416]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005666:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005668:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800566c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005672:	4a65      	ldr	r2, [pc, #404]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005674:	430b      	orrs	r3, r1
 8005676:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005678:	e003      	b.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800567a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800568e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005692:	2300      	movs	r3, #0
 8005694:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005698:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800569c:	460b      	mov	r3, r1
 800569e:	4313      	orrs	r3, r2
 80056a0:	d051      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80056a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80056a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056ac:	d035      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80056ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80056b2:	d82e      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056b8:	d031      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80056ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80056be:	d828      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056c4:	d01a      	beq.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80056c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056ca:	d822      	bhi.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d003      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80056d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80056d4:	d007      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80056d6:	e01c      	b.n	8005712 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056d8:	4b4b      	ldr	r3, [pc, #300]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056dc:	4a4a      	ldr	r2, [pc, #296]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80056de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056e4:	e01c      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056ea:	3308      	adds	r3, #8
 80056ec:	2100      	movs	r1, #0
 80056ee:	4618      	mov	r0, r3
 80056f0:	f001 fa6e 	bl	8006bd0 <RCCEx_PLL2_Config>
 80056f4:	4603      	mov	r3, r0
 80056f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005700:	3328      	adds	r3, #40	@ 0x28
 8005702:	2100      	movs	r1, #0
 8005704:	4618      	mov	r0, r3
 8005706:	f001 fb15 	bl	8006d34 <RCCEx_PLL3_Config>
 800570a:	4603      	mov	r3, r0
 800570c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005710:	e006      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005718:	e002      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800571e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005728:	4b37      	ldr	r3, [pc, #220]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800572a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800572c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005734:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005736:	4a34      	ldr	r2, [pc, #208]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005738:	430b      	orrs	r3, r1
 800573a:	6513      	str	r3, [r2, #80]	@ 0x50
 800573c:	e003      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800573e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005742:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800574a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800574e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005752:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005756:	2300      	movs	r3, #0
 8005758:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800575c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005760:	460b      	mov	r3, r1
 8005762:	4313      	orrs	r3, r2
 8005764:	d056      	beq.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800576a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800576c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005770:	d033      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005772:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005776:	d82c      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005778:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800577c:	d02f      	beq.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800577e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005782:	d826      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005784:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005788:	d02b      	beq.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800578a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800578e:	d820      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005790:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005794:	d012      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005796:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800579a:	d81a      	bhi.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800579c:	2b00      	cmp	r3, #0
 800579e:	d022      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80057a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057a4:	d115      	bne.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80057a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057aa:	3308      	adds	r3, #8
 80057ac:	2101      	movs	r1, #1
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 fa0e 	bl	8006bd0 <RCCEx_PLL2_Config>
 80057b4:	4603      	mov	r3, r0
 80057b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057ba:	e015      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80057bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c0:	3328      	adds	r3, #40	@ 0x28
 80057c2:	2101      	movs	r1, #1
 80057c4:	4618      	mov	r0, r3
 80057c6:	f001 fab5 	bl	8006d34 <RCCEx_PLL3_Config>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80057d0:	e00a      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057d8:	e006      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057da:	bf00      	nop
 80057dc:	e004      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057de:	bf00      	nop
 80057e0:	e002      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057e2:	bf00      	nop
 80057e4:	e000      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80057e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10d      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80057f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057f4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80057f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057fe:	4a02      	ldr	r2, [pc, #8]	@ (8005808 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005800:	430b      	orrs	r3, r1
 8005802:	6513      	str	r3, [r2, #80]	@ 0x50
 8005804:	e006      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005806:	bf00      	nop
 8005808:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800580c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005810:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005820:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005824:	2300      	movs	r3, #0
 8005826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800582a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800582e:	460b      	mov	r3, r1
 8005830:	4313      	orrs	r3, r2
 8005832:	d055      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005838:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800583c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005840:	d033      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005842:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005846:	d82c      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005848:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800584c:	d02f      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005852:	d826      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005854:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005858:	d02b      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800585a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800585e:	d820      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005860:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005864:	d012      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005866:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800586a:	d81a      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800586c:	2b00      	cmp	r3, #0
 800586e:	d022      	beq.n	80058b6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005870:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005874:	d115      	bne.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587a:	3308      	adds	r3, #8
 800587c:	2101      	movs	r1, #1
 800587e:	4618      	mov	r0, r3
 8005880:	f001 f9a6 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800588a:	e015      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800588c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005890:	3328      	adds	r3, #40	@ 0x28
 8005892:	2101      	movs	r1, #1
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fa4d 	bl	8006d34 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80058a0:	e00a      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80058a8:	e006      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058aa:	bf00      	nop
 80058ac:	e004      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058ae:	bf00      	nop
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058b2:	bf00      	nop
 80058b4:	e000      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80058b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10b      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80058c0:	4ba3      	ldr	r3, [pc, #652]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80058c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80058d0:	4a9f      	ldr	r2, [pc, #636]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d2:	430b      	orrs	r3, r1
 80058d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d6:	e003      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80058e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80058ec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80058f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d037      	beq.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005906:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800590a:	d00e      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800590c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005910:	d816      	bhi.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005912:	2b00      	cmp	r3, #0
 8005914:	d018      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005916:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800591a:	d111      	bne.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591c:	4b8c      	ldr	r3, [pc, #560]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800591e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005920:	4a8b      	ldr	r2, [pc, #556]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005926:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005928:	e00f      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800592a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800592e:	3308      	adds	r3, #8
 8005930:	2101      	movs	r1, #1
 8005932:	4618      	mov	r0, r3
 8005934:	f001 f94c 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005938:	4603      	mov	r3, r0
 800593a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800593e:	e004      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005946:	e000      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005948:	bf00      	nop
    }

    if (ret == HAL_OK)
 800594a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005952:	4b7f      	ldr	r3, [pc, #508]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005956:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005960:	4a7b      	ldr	r2, [pc, #492]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005962:	430b      	orrs	r3, r1
 8005964:	6513      	str	r3, [r2, #80]	@ 0x50
 8005966:	e003      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800596c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005978:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800597c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005980:	2300      	movs	r3, #0
 8005982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005986:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800598a:	460b      	mov	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	d039      	beq.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005994:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005996:	2b03      	cmp	r3, #3
 8005998:	d81c      	bhi.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059dd 	.word	0x080059dd
 80059a4:	080059b1 	.word	0x080059b1
 80059a8:	080059bf 	.word	0x080059bf
 80059ac:	080059dd 	.word	0x080059dd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b67      	ldr	r3, [pc, #412]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4a66      	ldr	r2, [pc, #408]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059bc:	e00f      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	3308      	adds	r3, #8
 80059c4:	2102      	movs	r1, #2
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 f902 	bl	8006bd0 <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80059d2:	e004      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059da:	e000      	b.n	80059de <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80059dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d10a      	bne.n	80059fc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80059e6:	4b5a      	ldr	r3, [pc, #360]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059ea:	f023 0103 	bic.w	r1, r3, #3
 80059ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80059f4:	4a56      	ldr	r2, [pc, #344]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80059f6:	430b      	orrs	r3, r1
 80059f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059fa:	e003      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005a10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005a1a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4313      	orrs	r3, r2
 8005a22:	f000 809f 	beq.w	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a26:	4b4b      	ldr	r3, [pc, #300]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a4a      	ldr	r2, [pc, #296]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005a32:	f7fb fa59 	bl	8000ee8 <HAL_GetTick>
 8005a36:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a3a:	e00b      	b.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a3c:	f7fb fa54 	bl	8000ee8 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b64      	cmp	r3, #100	@ 0x64
 8005a4a:	d903      	bls.n	8005a54 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a52:	e005      	b.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005a54:	4b3f      	ldr	r3, [pc, #252]	@ (8005b54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d0ed      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d179      	bne.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005a68:	4b39      	ldr	r3, [pc, #228]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a70:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005a74:	4053      	eors	r3, r2
 8005a76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d015      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005a7e:	4b34      	ldr	r3, [pc, #208]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a86:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a8a:	4b31      	ldr	r3, [pc, #196]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a8e:	4a30      	ldr	r2, [pc, #192]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a94:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a96:	4b2e      	ldr	r3, [pc, #184]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005aa0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005aa2:	4a2b      	ldr	r2, [pc, #172]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005aa8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aae:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005ab2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ab6:	d118      	bne.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab8:	f7fb fa16 	bl	8000ee8 <HAL_GetTick>
 8005abc:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ac0:	e00d      	b.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ac2:	f7fb fa11 	bl	8000ee8 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005acc:	1ad2      	subs	r2, r2, r3
 8005ace:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d903      	bls.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005adc:	e005      	b.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ade:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae2:	f003 0302 	and.w	r3, r3, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d0eb      	beq.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005aea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d129      	bne.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005afa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005afe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b02:	d10e      	bne.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005b04:	4b12      	ldr	r3, [pc, #72]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b14:	091a      	lsrs	r2, r3, #4
 8005b16:	4b10      	ldr	r3, [pc, #64]	@ (8005b58 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005b18:	4013      	ands	r3, r2
 8005b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b1c:	430b      	orrs	r3, r1
 8005b1e:	6113      	str	r3, [r2, #16]
 8005b20:	e005      	b.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005b22:	4b0b      	ldr	r3, [pc, #44]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	4a0a      	ldr	r2, [pc, #40]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b28:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005b2c:	6113      	str	r3, [r2, #16]
 8005b2e:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b30:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b36:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b3e:	4a04      	ldr	r2, [pc, #16]	@ (8005b50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b40:	430b      	orrs	r3, r1
 8005b42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b44:	e00e      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b4a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005b4e:	e009      	b.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005b50:	58024400 	.word	0x58024400
 8005b54:	58024800 	.word	0x58024800
 8005b58:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6c:	f002 0301 	and.w	r3, r2, #1
 8005b70:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b74:	2300      	movs	r3, #0
 8005b76:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b7a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4313      	orrs	r3, r2
 8005b82:	f000 8089 	beq.w	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b8a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b8c:	2b28      	cmp	r3, #40	@ 0x28
 8005b8e:	d86b      	bhi.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005b90:	a201      	add	r2, pc, #4	@ (adr r2, 8005b98 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b96:	bf00      	nop
 8005b98:	08005c71 	.word	0x08005c71
 8005b9c:	08005c69 	.word	0x08005c69
 8005ba0:	08005c69 	.word	0x08005c69
 8005ba4:	08005c69 	.word	0x08005c69
 8005ba8:	08005c69 	.word	0x08005c69
 8005bac:	08005c69 	.word	0x08005c69
 8005bb0:	08005c69 	.word	0x08005c69
 8005bb4:	08005c69 	.word	0x08005c69
 8005bb8:	08005c3d 	.word	0x08005c3d
 8005bbc:	08005c69 	.word	0x08005c69
 8005bc0:	08005c69 	.word	0x08005c69
 8005bc4:	08005c69 	.word	0x08005c69
 8005bc8:	08005c69 	.word	0x08005c69
 8005bcc:	08005c69 	.word	0x08005c69
 8005bd0:	08005c69 	.word	0x08005c69
 8005bd4:	08005c69 	.word	0x08005c69
 8005bd8:	08005c53 	.word	0x08005c53
 8005bdc:	08005c69 	.word	0x08005c69
 8005be0:	08005c69 	.word	0x08005c69
 8005be4:	08005c69 	.word	0x08005c69
 8005be8:	08005c69 	.word	0x08005c69
 8005bec:	08005c69 	.word	0x08005c69
 8005bf0:	08005c69 	.word	0x08005c69
 8005bf4:	08005c69 	.word	0x08005c69
 8005bf8:	08005c71 	.word	0x08005c71
 8005bfc:	08005c69 	.word	0x08005c69
 8005c00:	08005c69 	.word	0x08005c69
 8005c04:	08005c69 	.word	0x08005c69
 8005c08:	08005c69 	.word	0x08005c69
 8005c0c:	08005c69 	.word	0x08005c69
 8005c10:	08005c69 	.word	0x08005c69
 8005c14:	08005c69 	.word	0x08005c69
 8005c18:	08005c71 	.word	0x08005c71
 8005c1c:	08005c69 	.word	0x08005c69
 8005c20:	08005c69 	.word	0x08005c69
 8005c24:	08005c69 	.word	0x08005c69
 8005c28:	08005c69 	.word	0x08005c69
 8005c2c:	08005c69 	.word	0x08005c69
 8005c30:	08005c69 	.word	0x08005c69
 8005c34:	08005c69 	.word	0x08005c69
 8005c38:	08005c71 	.word	0x08005c71
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c40:	3308      	adds	r3, #8
 8005c42:	2101      	movs	r1, #1
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 ffc3 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c50:	e00f      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c56:	3328      	adds	r3, #40	@ 0x28
 8005c58:	2101      	movs	r1, #1
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f001 f86a 	bl	8006d34 <RCCEx_PLL3_Config>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005c66:	e004      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c6e:	e000      	b.n	8005c72 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005c70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005c7a:	4bbf      	ldr	r3, [pc, #764]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c7e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c88:	4abb      	ldr	r2, [pc, #748]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c8a:	430b      	orrs	r3, r1
 8005c8c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c8e:	e003      	b.n	8005c98 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f002 0302 	and.w	r3, r2, #2
 8005ca4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ca8:	2300      	movs	r3, #0
 8005caa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005cae:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	d041      	beq.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005cbe:	2b05      	cmp	r3, #5
 8005cc0:	d824      	bhi.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005d15 	.word	0x08005d15
 8005ccc:	08005ce1 	.word	0x08005ce1
 8005cd0:	08005cf7 	.word	0x08005cf7
 8005cd4:	08005d15 	.word	0x08005d15
 8005cd8:	08005d15 	.word	0x08005d15
 8005cdc:	08005d15 	.word	0x08005d15
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	2101      	movs	r1, #1
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f000 ff71 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005cf4:	e00f      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfa:	3328      	adds	r3, #40	@ 0x28
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f001 f818 	bl	8006d34 <RCCEx_PLL3_Config>
 8005d04:	4603      	mov	r3, r0
 8005d06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005d0a:	e004      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d12:	e000      	b.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005d14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10a      	bne.n	8005d34 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005d1e:	4b96      	ldr	r3, [pc, #600]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d22:	f023 0107 	bic.w	r1, r3, #7
 8005d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d2a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005d2c:	4a92      	ldr	r2, [pc, #584]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d2e:	430b      	orrs	r3, r1
 8005d30:	6553      	str	r3, [r2, #84]	@ 0x54
 8005d32:	e003      	b.n	8005d3c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d44:	f002 0304 	and.w	r3, r2, #4
 8005d48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d52:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	d044      	beq.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d64:	2b05      	cmp	r3, #5
 8005d66:	d825      	bhi.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005d68:	a201      	add	r2, pc, #4	@ (adr r2, 8005d70 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005d89 	.word	0x08005d89
 8005d78:	08005d9f 	.word	0x08005d9f
 8005d7c:	08005dbd 	.word	0x08005dbd
 8005d80:	08005dbd 	.word	0x08005dbd
 8005d84:	08005dbd 	.word	0x08005dbd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	2101      	movs	r1, #1
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 ff1d 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005d96:	4603      	mov	r3, r0
 8005d98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005d9c:	e00f      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005da2:	3328      	adds	r3, #40	@ 0x28
 8005da4:	2101      	movs	r1, #1
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 ffc4 	bl	8006d34 <RCCEx_PLL3_Config>
 8005dac:	4603      	mov	r3, r0
 8005dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005db2:	e004      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db4:	2301      	movs	r3, #1
 8005db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10b      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	f023 0107 	bic.w	r1, r3, #7
 8005dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd6:	4a68      	ldr	r2, [pc, #416]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ddc:	e003      	b.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dee:	f002 0320 	and.w	r3, r2, #32
 8005df2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005dfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d055      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e12:	d033      	beq.n	8005e7c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005e14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e18:	d82c      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e1e:	d02f      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005e20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e24:	d826      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e2a:	d02b      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005e2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005e30:	d820      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e36:	d012      	beq.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005e38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e3c:	d81a      	bhi.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d022      	beq.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005e42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005e46:	d115      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 febd 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e5c:	e015      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	3328      	adds	r3, #40	@ 0x28
 8005e64:	2102      	movs	r1, #2
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 ff64 	bl	8006d34 <RCCEx_PLL3_Config>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005e72:	e00a      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005e7a:	e006      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e7c:	bf00      	nop
 8005e7e:	e004      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e80:	bf00      	nop
 8005e82:	e002      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e84:	bf00      	nop
 8005e86:	e000      	b.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10b      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e92:	4b39      	ldr	r3, [pc, #228]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e96:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ea2:	4a35      	ldr	r2, [pc, #212]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ea4:	430b      	orrs	r3, r1
 8005ea6:	6553      	str	r3, [r2, #84]	@ 0x54
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005eae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005ec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	d058      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005eda:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ede:	d033      	beq.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005ee0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005ee4:	d82c      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eea:	d02f      	beq.n	8005f4c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ef0:	d826      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005ef2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ef6:	d02b      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005ef8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005efc:	d820      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005efe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f02:	d012      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005f04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f08:	d81a      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d022      	beq.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f12:	d115      	bne.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3308      	adds	r3, #8
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 fe57 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f28:	e015      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	2102      	movs	r1, #2
 8005f32:	4618      	mov	r0, r3
 8005f34:	f000 fefe 	bl	8006d34 <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005f3e:	e00a      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f46:	e006      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f48:	bf00      	nop
 8005f4a:	e004      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f4c:	bf00      	nop
 8005f4e:	e002      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f50:	bf00      	nop
 8005f52:	e000      	b.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10e      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005f5e:	4b06      	ldr	r3, [pc, #24]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f62:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f6e:	4a02      	ldr	r2, [pc, #8]	@ (8005f78 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f70:	430b      	orrs	r3, r1
 8005f72:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f74:	e006      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005f76:	bf00      	nop
 8005f78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005f90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f9a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	d055      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fa8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fac:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fb0:	d033      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005fb2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005fb6:	d82c      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fb8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fbc:	d02f      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005fbe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005fc2:	d826      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fc4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fc8:	d02b      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005fca:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005fce:	d820      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fd0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fd4:	d012      	beq.n	8005ffc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005fd6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005fda:	d81a      	bhi.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d022      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fe4:	d115      	bne.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fea:	3308      	adds	r3, #8
 8005fec:	2100      	movs	r1, #0
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f000 fdee 	bl	8006bd0 <RCCEx_PLL2_Config>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005ffa:	e015      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006000:	3328      	adds	r3, #40	@ 0x28
 8006002:	2102      	movs	r1, #2
 8006004:	4618      	mov	r0, r3
 8006006:	f000 fe95 	bl	8006d34 <RCCEx_PLL3_Config>
 800600a:	4603      	mov	r3, r0
 800600c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006010:	e00a      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800601a:	bf00      	nop
 800601c:	e004      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8006026:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800602c:	2b00      	cmp	r3, #0
 800602e:	d10b      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006030:	4ba1      	ldr	r3, [pc, #644]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006034:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800603c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006040:	4a9d      	ldr	r2, [pc, #628]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006042:	430b      	orrs	r3, r1
 8006044:	6593      	str	r3, [r2, #88]	@ 0x58
 8006046:	e003      	b.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800604c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	f002 0308 	and.w	r3, r2, #8
 800605c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006060:	2300      	movs	r3, #0
 8006062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800606a:	460b      	mov	r3, r1
 800606c:	4313      	orrs	r3, r2
 800606e:	d01e      	beq.n	80060ae <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006074:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006078:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800607c:	d10c      	bne.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800607e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006082:	3328      	adds	r3, #40	@ 0x28
 8006084:	2102      	movs	r1, #2
 8006086:	4618      	mov	r0, r3
 8006088:	f000 fe54 	bl	8006d34 <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d002      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006098:	4b87      	ldr	r3, [pc, #540]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800609a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80060a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80060a8:	4a83      	ldr	r2, [pc, #524]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060aa:	430b      	orrs	r3, r1
 80060ac:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b6:	f002 0310 	and.w	r3, r2, #16
 80060ba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060be:	2300      	movs	r3, #0
 80060c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80060c4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80060c8:	460b      	mov	r3, r1
 80060ca:	4313      	orrs	r3, r2
 80060cc:	d01e      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80060ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80060d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060da:	d10c      	bne.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e0:	3328      	adds	r3, #40	@ 0x28
 80060e2:	2102      	movs	r1, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 fe25 	bl	8006d34 <RCCEx_PLL3_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80060f6:	4b70      	ldr	r3, [pc, #448]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80060f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060fa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80060fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006102:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006106:	4a6c      	ldr	r2, [pc, #432]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006108:	430b      	orrs	r3, r1
 800610a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800610c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006118:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800611c:	2300      	movs	r3, #0
 800611e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006122:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006126:	460b      	mov	r3, r1
 8006128:	4313      	orrs	r3, r2
 800612a:	d03e      	beq.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800612c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006130:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006134:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006138:	d022      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800613a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800613e:	d81b      	bhi.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006140:	2b00      	cmp	r3, #0
 8006142:	d003      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8006144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006148:	d00b      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800614a:	e015      	b.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800614c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006150:	3308      	adds	r3, #8
 8006152:	2100      	movs	r1, #0
 8006154:	4618      	mov	r0, r3
 8006156:	f000 fd3b 	bl	8006bd0 <RCCEx_PLL2_Config>
 800615a:	4603      	mov	r3, r0
 800615c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006160:	e00f      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006166:	3328      	adds	r3, #40	@ 0x28
 8006168:	2102      	movs	r1, #2
 800616a:	4618      	mov	r0, r3
 800616c:	f000 fde2 	bl	8006d34 <RCCEx_PLL3_Config>
 8006170:	4603      	mov	r3, r0
 8006172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006176:	e004      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800617e:	e000      	b.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800618a:	4b4b      	ldr	r3, [pc, #300]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800618e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006196:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800619a:	4a47      	ldr	r2, [pc, #284]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800619c:	430b      	orrs	r3, r1
 800619e:	6593      	str	r3, [r2, #88]	@ 0x58
 80061a0:	e003      	b.n	80061aa <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80061a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80061b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80061b8:	2300      	movs	r3, #0
 80061ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80061bc:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80061c0:	460b      	mov	r3, r1
 80061c2:	4313      	orrs	r3, r2
 80061c4:	d03b      	beq.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061d2:	d01f      	beq.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80061d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80061d8:	d818      	bhi.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80061da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061de:	d003      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80061e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061e4:	d007      	beq.n	80061f6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80061e6:	e011      	b.n	800620c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061e8:	4b33      	ldr	r3, [pc, #204]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ec:	4a32      	ldr	r2, [pc, #200]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80061ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80061f4:	e00f      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061fa:	3328      	adds	r3, #40	@ 0x28
 80061fc:	2101      	movs	r1, #1
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fd98 	bl	8006d34 <RCCEx_PLL3_Config>
 8006204:	4603      	mov	r3, r0
 8006206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800620a:	e004      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006212:	e000      	b.n	8006216 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8006214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10b      	bne.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800621e:	4b26      	ldr	r3, [pc, #152]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006222:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622e:	4a22      	ldr	r2, [pc, #136]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006230:	430b      	orrs	r3, r1
 8006232:	6553      	str	r3, [r2, #84]	@ 0x54
 8006234:	e003      	b.n	800623e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800623a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800624a:	673b      	str	r3, [r7, #112]	@ 0x70
 800624c:	2300      	movs	r3, #0
 800624e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006250:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006254:	460b      	mov	r3, r1
 8006256:	4313      	orrs	r3, r2
 8006258:	d034      	beq.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800625a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800625e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006260:	2b00      	cmp	r3, #0
 8006262:	d003      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006268:	d007      	beq.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800626a:	e011      	b.n	8006290 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800626c:	4b12      	ldr	r3, [pc, #72]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800626e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006270:	4a11      	ldr	r2, [pc, #68]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006272:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006276:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006278:	e00e      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800627a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627e:	3308      	adds	r3, #8
 8006280:	2102      	movs	r1, #2
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fca4 	bl	8006bd0 <RCCEx_PLL2_Config>
 8006288:	4603      	mov	r3, r0
 800628a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800628e:	e003      	b.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10d      	bne.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80062a0:	4b05      	ldr	r3, [pc, #20]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ae:	4a02      	ldr	r2, [pc, #8]	@ (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80062b0:	430b      	orrs	r3, r1
 80062b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80062b4:	e006      	b.n	80062c4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80062b6:	bf00      	nop
 80062b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80062c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80062d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80062d2:	2300      	movs	r3, #0
 80062d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80062d6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80062da:	460b      	mov	r3, r1
 80062dc:	4313      	orrs	r3, r2
 80062de:	d00c      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e4:	3328      	adds	r3, #40	@ 0x28
 80062e6:	2102      	movs	r1, #2
 80062e8:	4618      	mov	r0, r3
 80062ea:	f000 fd23 	bl	8006d34 <RCCEx_PLL3_Config>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80062fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006302:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006306:	663b      	str	r3, [r7, #96]	@ 0x60
 8006308:	2300      	movs	r3, #0
 800630a:	667b      	str	r3, [r7, #100]	@ 0x64
 800630c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006310:	460b      	mov	r3, r1
 8006312:	4313      	orrs	r3, r2
 8006314:	d038      	beq.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800631a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800631e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006322:	d018      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8006324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006328:	d811      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800632a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800632e:	d014      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006334:	d80b      	bhi.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d011      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800633a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800633e:	d106      	bne.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006340:	4bc3      	ldr	r3, [pc, #780]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006344:	4ac2      	ldr	r2, [pc, #776]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006346:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800634a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800634c:	e008      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006354:	e004      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006356:	bf00      	nop
 8006358:	e002      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800635a:	bf00      	nop
 800635c:	e000      	b.n	8006360 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800635e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006364:	2b00      	cmp	r3, #0
 8006366:	d10b      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006368:	4bb9      	ldr	r3, [pc, #740]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800636a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800636c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006378:	4ab5      	ldr	r2, [pc, #724]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800637a:	430b      	orrs	r3, r1
 800637c:	6553      	str	r3, [r2, #84]	@ 0x54
 800637e:	e003      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006380:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006384:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006390:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006394:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006396:	2300      	movs	r3, #0
 8006398:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800639a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800639e:	460b      	mov	r3, r1
 80063a0:	4313      	orrs	r3, r2
 80063a2:	d009      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063a4:	4baa      	ldr	r3, [pc, #680]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80063ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063b2:	4aa7      	ldr	r2, [pc, #668]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063b4:	430b      	orrs	r3, r1
 80063b6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80063b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80063c4:	653b      	str	r3, [r7, #80]	@ 0x50
 80063c6:	2300      	movs	r3, #0
 80063c8:	657b      	str	r3, [r7, #84]	@ 0x54
 80063ca:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80063ce:	460b      	mov	r3, r1
 80063d0:	4313      	orrs	r3, r2
 80063d2:	d00a      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80063d4:	4b9e      	ldr	r3, [pc, #632]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80063dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80063e4:	4a9a      	ldr	r2, [pc, #616]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80063e6:	430b      	orrs	r3, r1
 80063e8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80063f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063f8:	2300      	movs	r3, #0
 80063fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063fc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006400:	460b      	mov	r3, r1
 8006402:	4313      	orrs	r3, r2
 8006404:	d009      	beq.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006406:	4b92      	ldr	r3, [pc, #584]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800640a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800640e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006414:	4a8e      	ldr	r2, [pc, #568]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006416:	430b      	orrs	r3, r1
 8006418:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800641a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800641e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006422:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006426:	643b      	str	r3, [r7, #64]	@ 0x40
 8006428:	2300      	movs	r3, #0
 800642a:	647b      	str	r3, [r7, #68]	@ 0x44
 800642c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006430:	460b      	mov	r3, r1
 8006432:	4313      	orrs	r3, r2
 8006434:	d00e      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006436:	4b86      	ldr	r3, [pc, #536]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	4a85      	ldr	r2, [pc, #532]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800643c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006440:	6113      	str	r3, [r2, #16]
 8006442:	4b83      	ldr	r3, [pc, #524]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006444:	6919      	ldr	r1, [r3, #16]
 8006446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800644a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800644e:	4a80      	ldr	r2, [pc, #512]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006450:	430b      	orrs	r3, r1
 8006452:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800645c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006460:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006462:	2300      	movs	r3, #0
 8006464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006466:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800646a:	460b      	mov	r3, r1
 800646c:	4313      	orrs	r3, r2
 800646e:	d009      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006470:	4b77      	ldr	r3, [pc, #476]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006474:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006478:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800647c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800647e:	4a74      	ldr	r2, [pc, #464]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006480:	430b      	orrs	r3, r1
 8006482:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006490:	633b      	str	r3, [r7, #48]	@ 0x30
 8006492:	2300      	movs	r3, #0
 8006494:	637b      	str	r3, [r7, #52]	@ 0x34
 8006496:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800649a:	460b      	mov	r3, r1
 800649c:	4313      	orrs	r3, r2
 800649e:	d00a      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80064a0:	4b6b      	ldr	r3, [pc, #428]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064a4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80064a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064b0:	4a67      	ldr	r2, [pc, #412]	@ (8006650 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80064b2:	430b      	orrs	r3, r1
 80064b4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80064b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064be:	2100      	movs	r1, #0
 80064c0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064c8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80064cc:	460b      	mov	r3, r1
 80064ce:	4313      	orrs	r3, r2
 80064d0:	d011      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d6:	3308      	adds	r3, #8
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f000 fb78 	bl	8006bd0 <RCCEx_PLL2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80064e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d003      	beq.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80064f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	2100      	movs	r1, #0
 8006500:	6239      	str	r1, [r7, #32]
 8006502:	f003 0302 	and.w	r3, r3, #2
 8006506:	627b      	str	r3, [r7, #36]	@ 0x24
 8006508:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800650c:	460b      	mov	r3, r1
 800650e:	4313      	orrs	r3, r2
 8006510:	d011      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006516:	3308      	adds	r3, #8
 8006518:	2101      	movs	r1, #1
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fb58 	bl	8006bd0 <RCCEx_PLL2_Config>
 8006520:	4603      	mov	r3, r0
 8006522:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006526:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800652a:	2b00      	cmp	r3, #0
 800652c:	d003      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800652e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006532:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800653a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653e:	2100      	movs	r1, #0
 8006540:	61b9      	str	r1, [r7, #24]
 8006542:	f003 0304 	and.w	r3, r3, #4
 8006546:	61fb      	str	r3, [r7, #28]
 8006548:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800654c:	460b      	mov	r3, r1
 800654e:	4313      	orrs	r3, r2
 8006550:	d011      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	3308      	adds	r3, #8
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fb38 	bl	8006bd0 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006566:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800656a:	2b00      	cmp	r3, #0
 800656c:	d003      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800656e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800657a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800657e:	2100      	movs	r1, #0
 8006580:	6139      	str	r1, [r7, #16]
 8006582:	f003 0308 	and.w	r3, r3, #8
 8006586:	617b      	str	r3, [r7, #20]
 8006588:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800658c:	460b      	mov	r3, r1
 800658e:	4313      	orrs	r3, r2
 8006590:	d011      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006596:	3328      	adds	r3, #40	@ 0x28
 8006598:	2100      	movs	r1, #0
 800659a:	4618      	mov	r0, r3
 800659c:	f000 fbca 	bl	8006d34 <RCCEx_PLL3_Config>
 80065a0:	4603      	mov	r3, r0
 80065a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80065a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80065b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065be:	2100      	movs	r1, #0
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80065cc:	460b      	mov	r3, r1
 80065ce:	4313      	orrs	r3, r2
 80065d0:	d011      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	3328      	adds	r3, #40	@ 0x28
 80065d8:	2101      	movs	r1, #1
 80065da:	4618      	mov	r0, r3
 80065dc:	f000 fbaa 	bl	8006d34 <RCCEx_PLL3_Config>
 80065e0:	4603      	mov	r3, r0
 80065e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80065e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80065f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80065f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065fe:	2100      	movs	r1, #0
 8006600:	6039      	str	r1, [r7, #0]
 8006602:	f003 0320 	and.w	r3, r3, #32
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	e9d7 1200 	ldrd	r1, r2, [r7]
 800660c:	460b      	mov	r3, r1
 800660e:	4313      	orrs	r3, r2
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006616:	3328      	adds	r3, #40	@ 0x28
 8006618:	2102      	movs	r1, #2
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fb8a 	bl	8006d34 <RCCEx_PLL3_Config>
 8006620:	4603      	mov	r3, r0
 8006622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006626:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006632:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006636:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800663a:	2b00      	cmp	r3, #0
 800663c:	d101      	bne.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
}
 8006644:	4618      	mov	r0, r3
 8006646:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800664a:	46bd      	mov	sp, r7
 800664c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006650:	58024400 	.word	0x58024400

08006654 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006658:	f7fe fd96 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b06      	ldr	r3, [pc, #24]	@ (8006678 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	091b      	lsrs	r3, r3, #4
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4904      	ldr	r1, [pc, #16]	@ (800667c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	f003 031f 	and.w	r3, r3, #31
 8006670:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006674:	4618      	mov	r0, r3
 8006676:	bd80      	pop	{r7, pc}
 8006678:	58024400 	.word	0x58024400
 800667c:	0800929c 	.word	0x0800929c

08006680 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006680:	b480      	push	{r7}
 8006682:	b089      	sub	sp, #36	@ 0x24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006688:	4ba1      	ldr	r3, [pc, #644]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800668a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800668c:	f003 0303 	and.w	r3, r3, #3
 8006690:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006692:	4b9f      	ldr	r3, [pc, #636]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006696:	0b1b      	lsrs	r3, r3, #12
 8006698:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800669c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800669e:	4b9c      	ldr	r3, [pc, #624]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a2:	091b      	lsrs	r3, r3, #4
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80066aa:	4b99      	ldr	r3, [pc, #612]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ae:	08db      	lsrs	r3, r3, #3
 80066b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	fb02 f303 	mul.w	r3, r2, r3
 80066ba:	ee07 3a90 	vmov	s15, r3
 80066be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066c2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8111 	beq.w	80068f0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	f000 8083 	beq.w	80067dc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	f200 80a1 	bhi.w	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d056      	beq.n	8006798 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80066ea:	e099      	b.n	8006820 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066ec:	4b88      	ldr	r3, [pc, #544]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0320 	and.w	r3, r3, #32
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d02d      	beq.n	8006754 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066f8:	4b85      	ldr	r3, [pc, #532]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	08db      	lsrs	r3, r3, #3
 80066fe:	f003 0303 	and.w	r3, r3, #3
 8006702:	4a84      	ldr	r2, [pc, #528]	@ (8006914 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006704:	fa22 f303 	lsr.w	r3, r2, r3
 8006708:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	ee07 3a90 	vmov	s15, r3
 8006710:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	ee07 3a90 	vmov	s15, r3
 800671a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800671e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006722:	4b7b      	ldr	r3, [pc, #492]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800672a:	ee07 3a90 	vmov	s15, r3
 800672e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006732:	ed97 6a03 	vldr	s12, [r7, #12]
 8006736:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800673a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800673e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800674a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800674e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006752:	e087      	b.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	ee07 3a90 	vmov	s15, r3
 800675a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800675e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800691c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006766:	4b6a      	ldr	r3, [pc, #424]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800676a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800676e:	ee07 3a90 	vmov	s15, r3
 8006772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006776:	ed97 6a03 	vldr	s12, [r7, #12]
 800677a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800677e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800678a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800678e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006796:	e065      	b.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	ee07 3a90 	vmov	s15, r3
 800679e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067a2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80067a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067aa:	4b59      	ldr	r3, [pc, #356]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067b2:	ee07 3a90 	vmov	s15, r3
 80067b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80067be:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80067c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067da:	e043      	b.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	ee07 3a90 	vmov	s15, r3
 80067e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067e6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006924 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80067ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067ee:	4b48      	ldr	r3, [pc, #288]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80067f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067f6:	ee07 3a90 	vmov	s15, r3
 80067fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006802:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800680a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800680e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800681a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800681e:	e021      	b.n	8006864 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	ee07 3a90 	vmov	s15, r3
 8006826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800682a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006920 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800682e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006832:	4b37      	ldr	r3, [pc, #220]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800683a:	ee07 3a90 	vmov	s15, r3
 800683e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006842:	ed97 6a03 	vldr	s12, [r7, #12]
 8006846:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006918 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800684a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800684e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800685a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800685e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006862:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006864:	4b2a      	ldr	r3, [pc, #168]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006866:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006868:	0a5b      	lsrs	r3, r3, #9
 800686a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006876:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800687a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800687e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006882:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006886:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800688a:	ee17 2a90 	vmov	r2, s15
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006892:	4b1f      	ldr	r3, [pc, #124]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006894:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006896:	0c1b      	lsrs	r3, r3, #16
 8006898:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80068b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068b8:	ee17 2a90 	vmov	r2, s15
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80068c0:	4b13      	ldr	r3, [pc, #76]	@ (8006910 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	0e1b      	lsrs	r3, r3, #24
 80068c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ca:	ee07 3a90 	vmov	s15, r3
 80068ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068da:	edd7 6a07 	vldr	s13, [r7, #28]
 80068de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068e6:	ee17 2a90 	vmov	r2, s15
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80068ee:	e008      	b.n	8006902 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	609a      	str	r2, [r3, #8]
}
 8006902:	bf00      	nop
 8006904:	3724      	adds	r7, #36	@ 0x24
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	58024400 	.word	0x58024400
 8006914:	03d09000 	.word	0x03d09000
 8006918:	46000000 	.word	0x46000000
 800691c:	4c742400 	.word	0x4c742400
 8006920:	4a742400 	.word	0x4a742400
 8006924:	4bbebc20 	.word	0x4bbebc20

08006928 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006928:	b480      	push	{r7}
 800692a:	b089      	sub	sp, #36	@ 0x24
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006930:	4ba1      	ldr	r3, [pc, #644]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006934:	f003 0303 	and.w	r3, r3, #3
 8006938:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800693a:	4b9f      	ldr	r3, [pc, #636]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800693c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693e:	0d1b      	lsrs	r3, r3, #20
 8006940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006944:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006946:	4b9c      	ldr	r3, [pc, #624]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800694a:	0a1b      	lsrs	r3, r3, #8
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006952:	4b99      	ldr	r3, [pc, #612]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006956:	08db      	lsrs	r3, r3, #3
 8006958:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	fb02 f303 	mul.w	r3, r2, r3
 8006962:	ee07 3a90 	vmov	s15, r3
 8006966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800696a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800696e:	697b      	ldr	r3, [r7, #20]
 8006970:	2b00      	cmp	r3, #0
 8006972:	f000 8111 	beq.w	8006b98 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b02      	cmp	r3, #2
 800697a:	f000 8083 	beq.w	8006a84 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	2b02      	cmp	r3, #2
 8006982:	f200 80a1 	bhi.w	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d003      	beq.n	8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d056      	beq.n	8006a40 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006992:	e099      	b.n	8006ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006994:	4b88      	ldr	r3, [pc, #544]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0320 	and.w	r3, r3, #32
 800699c:	2b00      	cmp	r3, #0
 800699e:	d02d      	beq.n	80069fc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a0:	4b85      	ldr	r3, [pc, #532]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	08db      	lsrs	r3, r3, #3
 80069a6:	f003 0303 	and.w	r3, r3, #3
 80069aa:	4a84      	ldr	r2, [pc, #528]	@ (8006bbc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	ee07 3a90 	vmov	s15, r3
 80069b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	ee07 3a90 	vmov	s15, r3
 80069c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069ca:	4b7b      	ldr	r3, [pc, #492]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80069cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069da:	ed97 6a03 	vldr	s12, [r7, #12]
 80069de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80069e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80069fa:	e087      	b.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	ee07 3a90 	vmov	s15, r3
 8006a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a06:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bc4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a0e:	4b6a      	ldr	r3, [pc, #424]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a16:	ee07 3a90 	vmov	s15, r3
 8006a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a22:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a3e:	e065      	b.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	ee07 3a90 	vmov	s15, r3
 8006a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a4a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a52:	4b59      	ldr	r3, [pc, #356]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a66:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a82:	e043      	b.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	ee07 3a90 	vmov	s15, r3
 8006a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a8e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bcc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a96:	4b48      	ldr	r3, [pc, #288]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aaa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ac6:	e021      	b.n	8006b0c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	ee07 3a90 	vmov	s15, r3
 8006ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ada:	4b37      	ldr	r3, [pc, #220]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b0a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006b0c:	4b2a      	ldr	r3, [pc, #168]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b10:	0a5b      	lsrs	r3, r3, #9
 8006b12:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b16:	ee07 3a90 	vmov	s15, r3
 8006b1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b22:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b26:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b32:	ee17 2a90 	vmov	r2, s15
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006b3a:	4b1f      	ldr	r3, [pc, #124]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	0c1b      	lsrs	r3, r3, #16
 8006b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b44:	ee07 3a90 	vmov	s15, r3
 8006b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b50:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b54:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b60:	ee17 2a90 	vmov	r2, s15
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006b68:	4b13      	ldr	r3, [pc, #76]	@ (8006bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	0e1b      	lsrs	r3, r3, #24
 8006b6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b72:	ee07 3a90 	vmov	s15, r3
 8006b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b7e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b82:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b8e:	ee17 2a90 	vmov	r2, s15
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006b96:	e008      	b.n	8006baa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	609a      	str	r2, [r3, #8]
}
 8006baa:	bf00      	nop
 8006bac:	3724      	adds	r7, #36	@ 0x24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	58024400 	.word	0x58024400
 8006bbc:	03d09000 	.word	0x03d09000
 8006bc0:	46000000 	.word	0x46000000
 8006bc4:	4c742400 	.word	0x4c742400
 8006bc8:	4a742400 	.word	0x4a742400
 8006bcc:	4bbebc20 	.word	0x4bbebc20

08006bd0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
 8006bd8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006bde:	4b53      	ldr	r3, [pc, #332]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006be0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be2:	f003 0303 	and.w	r3, r3, #3
 8006be6:	2b03      	cmp	r3, #3
 8006be8:	d101      	bne.n	8006bee <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e099      	b.n	8006d22 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006bee:	4b4f      	ldr	r3, [pc, #316]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a4e      	ldr	r2, [pc, #312]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006bf4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006bfa:	f7fa f975 	bl	8000ee8 <HAL_GetTick>
 8006bfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c00:	e008      	b.n	8006c14 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006c02:	f7fa f971 	bl	8000ee8 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	2b02      	cmp	r3, #2
 8006c0e:	d901      	bls.n	8006c14 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006c10:	2303      	movs	r3, #3
 8006c12:	e086      	b.n	8006d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006c14:	4b45      	ldr	r3, [pc, #276]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1f0      	bne.n	8006c02 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006c20:	4b42      	ldr	r3, [pc, #264]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c24:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	031b      	lsls	r3, r3, #12
 8006c2e:	493f      	ldr	r1, [pc, #252]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c30:	4313      	orrs	r3, r2
 8006c32:	628b      	str	r3, [r1, #40]	@ 0x28
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	3b01      	subs	r3, #1
 8006c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	3b01      	subs	r3, #1
 8006c44:	025b      	lsls	r3, r3, #9
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	041b      	lsls	r3, r3, #16
 8006c52:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006c56:	431a      	orrs	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	691b      	ldr	r3, [r3, #16]
 8006c5c:	3b01      	subs	r3, #1
 8006c5e:	061b      	lsls	r3, r3, #24
 8006c60:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006c64:	4931      	ldr	r1, [pc, #196]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c66:	4313      	orrs	r3, r2
 8006c68:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006c6a:	4b30      	ldr	r3, [pc, #192]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c6e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	492d      	ldr	r1, [pc, #180]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006c7c:	4b2b      	ldr	r3, [pc, #172]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	f023 0220 	bic.w	r2, r3, #32
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	4928      	ldr	r1, [pc, #160]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006c8e:	4b27      	ldr	r3, [pc, #156]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	4a26      	ldr	r2, [pc, #152]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c94:	f023 0310 	bic.w	r3, r3, #16
 8006c98:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006c9a:	4b24      	ldr	r3, [pc, #144]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006c9c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c9e:	4b24      	ldr	r3, [pc, #144]	@ (8006d30 <RCCEx_PLL2_Config+0x160>)
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	69d2      	ldr	r2, [r2, #28]
 8006ca6:	00d2      	lsls	r2, r2, #3
 8006ca8:	4920      	ldr	r1, [pc, #128]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006cae:	4b1f      	ldr	r3, [pc, #124]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cb4:	f043 0310 	orr.w	r3, r3, #16
 8006cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d106      	bne.n	8006cce <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006cc0:	4b1a      	ldr	r3, [pc, #104]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cc4:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cc6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006cca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ccc:	e00f      	b.n	8006cee <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d106      	bne.n	8006ce2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006cd4:	4b15      	ldr	r3, [pc, #84]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cd8:	4a14      	ldr	r2, [pc, #80]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006cde:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ce0:	e005      	b.n	8006cee <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ce2:	4b12      	ldr	r3, [pc, #72]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	4a11      	ldr	r2, [pc, #68]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006ce8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006cee:	4b0f      	ldr	r3, [pc, #60]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006cf4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006cf8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006cfa:	f7fa f8f5 	bl	8000ee8 <HAL_GetTick>
 8006cfe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d00:	e008      	b.n	8006d14 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006d02:	f7fa f8f1 	bl	8000ee8 <HAL_GetTick>
 8006d06:	4602      	mov	r2, r0
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	1ad3      	subs	r3, r2, r3
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d901      	bls.n	8006d14 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e006      	b.n	8006d22 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006d14:	4b05      	ldr	r3, [pc, #20]	@ (8006d2c <RCCEx_PLL2_Config+0x15c>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0f0      	beq.n	8006d02 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	58024400 	.word	0x58024400
 8006d30:	ffff0007 	.word	0xffff0007

08006d34 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006d42:	4b53      	ldr	r3, [pc, #332]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d46:	f003 0303 	and.w	r3, r3, #3
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d101      	bne.n	8006d52 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	e099      	b.n	8006e86 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006d52:	4b4f      	ldr	r3, [pc, #316]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a4e      	ldr	r2, [pc, #312]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d5e:	f7fa f8c3 	bl	8000ee8 <HAL_GetTick>
 8006d62:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d64:	e008      	b.n	8006d78 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006d66:	f7fa f8bf 	bl	8000ee8 <HAL_GetTick>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	1ad3      	subs	r3, r2, r3
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d901      	bls.n	8006d78 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006d74:	2303      	movs	r3, #3
 8006d76:	e086      	b.n	8006e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006d78:	4b45      	ldr	r3, [pc, #276]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d1f0      	bne.n	8006d66 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006d84:	4b42      	ldr	r3, [pc, #264]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d88:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	051b      	lsls	r3, r3, #20
 8006d92:	493f      	ldr	r1, [pc, #252]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006d94:	4313      	orrs	r3, r2
 8006d96:	628b      	str	r3, [r1, #40]	@ 0x28
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	3b01      	subs	r3, #1
 8006da8:	025b      	lsls	r3, r3, #9
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	431a      	orrs	r2, r3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	041b      	lsls	r3, r3, #16
 8006db6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	3b01      	subs	r3, #1
 8006dc2:	061b      	lsls	r3, r3, #24
 8006dc4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006dc8:	4931      	ldr	r1, [pc, #196]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006dce:	4b30      	ldr	r3, [pc, #192]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	695b      	ldr	r3, [r3, #20]
 8006dda:	492d      	ldr	r1, [pc, #180]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006de0:	4b2b      	ldr	r3, [pc, #172]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	4928      	ldr	r1, [pc, #160]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006df2:	4b27      	ldr	r3, [pc, #156]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006df4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df6:	4a26      	ldr	r2, [pc, #152]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006df8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006dfe:	4b24      	ldr	r3, [pc, #144]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e02:	4b24      	ldr	r3, [pc, #144]	@ (8006e94 <RCCEx_PLL3_Config+0x160>)
 8006e04:	4013      	ands	r3, r2
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	69d2      	ldr	r2, [r2, #28]
 8006e0a:	00d2      	lsls	r2, r2, #3
 8006e0c:	4920      	ldr	r1, [pc, #128]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006e12:	4b1f      	ldr	r3, [pc, #124]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e16:	4a1e      	ldr	r2, [pc, #120]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d106      	bne.n	8006e32 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006e24:	4b1a      	ldr	r3, [pc, #104]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e28:	4a19      	ldr	r2, [pc, #100]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e2a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e30:	e00f      	b.n	8006e52 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d106      	bne.n	8006e46 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006e38:	4b15      	ldr	r3, [pc, #84]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e3c:	4a14      	ldr	r2, [pc, #80]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006e42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006e44:	e005      	b.n	8006e52 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006e46:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e4a:	4a11      	ldr	r2, [pc, #68]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e4c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006e50:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006e52:	4b0f      	ldr	r3, [pc, #60]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4a0e      	ldr	r2, [pc, #56]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e5e:	f7fa f843 	bl	8000ee8 <HAL_GetTick>
 8006e62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e64:	e008      	b.n	8006e78 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006e66:	f7fa f83f 	bl	8000ee8 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d901      	bls.n	8006e78 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	e006      	b.n	8006e86 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006e78:	4b05      	ldr	r3, [pc, #20]	@ (8006e90 <RCCEx_PLL3_Config+0x15c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d0f0      	beq.n	8006e66 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	ffff0007 	.word	0xffff0007

08006e98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e049      	b.n	8006f3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d106      	bne.n	8006ec4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	2200      	movs	r2, #0
 8006eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7f9 fe18 	bl	8000af4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	4610      	mov	r0, r2
 8006ed8:	f000 f9de 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2201      	movs	r2, #1
 8006ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2201      	movs	r2, #1
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2201      	movs	r2, #1
 8006f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2201      	movs	r2, #1
 8006f30:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3708      	adds	r7, #8
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
	...

08006f48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f56:	b2db      	uxtb	r3, r3
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d001      	beq.n	8006f60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e054      	b.n	800700a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f042 0201 	orr.w	r2, r2, #1
 8006f76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a26      	ldr	r2, [pc, #152]	@ (8007018 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d022      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f8a:	d01d      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a22      	ldr	r2, [pc, #136]	@ (800701c <HAL_TIM_Base_Start_IT+0xd4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d018      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a21      	ldr	r2, [pc, #132]	@ (8007020 <HAL_TIM_Base_Start_IT+0xd8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d013      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8007024 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d00e      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1e      	ldr	r2, [pc, #120]	@ (8007028 <HAL_TIM_Base_Start_IT+0xe0>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d009      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1c      	ldr	r2, [pc, #112]	@ (800702c <HAL_TIM_Base_Start_IT+0xe4>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d004      	beq.n	8006fc8 <HAL_TIM_Base_Start_IT+0x80>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	@ (8007030 <HAL_TIM_Base_Start_IT+0xe8>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d115      	bne.n	8006ff4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	689a      	ldr	r2, [r3, #8]
 8006fce:	4b19      	ldr	r3, [pc, #100]	@ (8007034 <HAL_TIM_Base_Start_IT+0xec>)
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b06      	cmp	r3, #6
 8006fd8:	d015      	beq.n	8007006 <HAL_TIM_Base_Start_IT+0xbe>
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fe0:	d011      	beq.n	8007006 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f042 0201 	orr.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff2:	e008      	b.n	8007006 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0201 	orr.w	r2, r2, #1
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	e000      	b.n	8007008 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007006:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	40010000 	.word	0x40010000
 800701c:	40000400 	.word	0x40000400
 8007020:	40000800 	.word	0x40000800
 8007024:	40000c00 	.word	0x40000c00
 8007028:	40010400 	.word	0x40010400
 800702c:	40001800 	.word	0x40001800
 8007030:	40014000 	.word	0x40014000
 8007034:	00010007 	.word	0x00010007

08007038 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0302 	and.w	r3, r3, #2
 8007056:	2b00      	cmp	r3, #0
 8007058:	d020      	beq.n	800709c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b00      	cmp	r3, #0
 8007062:	d01b      	beq.n	800709c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f06f 0202 	mvn.w	r2, #2
 800706c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	699b      	ldr	r3, [r3, #24]
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d003      	beq.n	800708a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8e9 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8007088:	e005      	b.n	8007096 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 f8db 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 f8ec 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	f003 0304 	and.w	r3, r3, #4
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d020      	beq.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	f003 0304 	and.w	r3, r3, #4
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01b      	beq.n	80070e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f06f 0204 	mvn.w	r2, #4
 80070b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2202      	movs	r2, #2
 80070be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	699b      	ldr	r3, [r3, #24]
 80070c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d003      	beq.n	80070d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f8c3 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 80070d4:	e005      	b.n	80070e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f8b5 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070dc:	6878      	ldr	r0, [r7, #4]
 80070de:	f000 f8c6 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f003 0308 	and.w	r3, r3, #8
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d020      	beq.n	8007134 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f06f 0208 	mvn.w	r2, #8
 8007104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2204      	movs	r2, #4
 800710a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	f003 0303 	and.w	r3, r3, #3
 8007116:	2b00      	cmp	r3, #0
 8007118:	d003      	beq.n	8007122 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f89d 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 8007120:	e005      	b.n	800712e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f88f 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f8a0 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	f003 0310 	and.w	r3, r3, #16
 800713a:	2b00      	cmp	r3, #0
 800713c:	d020      	beq.n	8007180 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f003 0310 	and.w	r3, r3, #16
 8007144:	2b00      	cmp	r3, #0
 8007146:	d01b      	beq.n	8007180 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f06f 0210 	mvn.w	r2, #16
 8007150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2208      	movs	r2, #8
 8007156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 f877 	bl	800725a <HAL_TIM_IC_CaptureCallback>
 800716c:	e005      	b.n	800717a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f869 	bl	8007246 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f87a 	bl	800726e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007180:	68bb      	ldr	r3, [r7, #8]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b00      	cmp	r3, #0
 8007188:	d00c      	beq.n	80071a4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b00      	cmp	r3, #0
 8007192:	d007      	beq.n	80071a4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f06f 0201 	mvn.w	r2, #1
 800719c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f7f9 fa64 	bl	800066c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00c      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80071ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 f9a1 	bl	8007514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00c      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d007      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80071ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f999 	bl	8007528 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00c      	beq.n	800721a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d007      	beq.n	800721a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f834 	bl	8007282 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	f003 0320 	and.w	r3, r3, #32
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00c      	beq.n	800723e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f003 0320 	and.w	r3, r3, #32
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f06f 0220 	mvn.w	r2, #32
 8007236:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f961 	bl	8007500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800723e:	bf00      	nop
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}

08007246 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800724e:	bf00      	nop
 8007250:	370c      	adds	r7, #12
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800726e:	b480      	push	{r7}
 8007270:	b083      	sub	sp, #12
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007276:	bf00      	nop
 8007278:	370c      	adds	r7, #12
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800728a:	bf00      	nop
 800728c:	370c      	adds	r7, #12
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a46      	ldr	r2, [pc, #280]	@ (80073c4 <TIM_Base_SetConfig+0x12c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d013      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b6:	d00f      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a43      	ldr	r2, [pc, #268]	@ (80073c8 <TIM_Base_SetConfig+0x130>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00b      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a42      	ldr	r2, [pc, #264]	@ (80073cc <TIM_Base_SetConfig+0x134>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d007      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a41      	ldr	r2, [pc, #260]	@ (80073d0 <TIM_Base_SetConfig+0x138>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d003      	beq.n	80072d8 <TIM_Base_SetConfig+0x40>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a40      	ldr	r2, [pc, #256]	@ (80073d4 <TIM_Base_SetConfig+0x13c>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d108      	bne.n	80072ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a35      	ldr	r2, [pc, #212]	@ (80073c4 <TIM_Base_SetConfig+0x12c>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01f      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072f8:	d01b      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a32      	ldr	r2, [pc, #200]	@ (80073c8 <TIM_Base_SetConfig+0x130>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d017      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a31      	ldr	r2, [pc, #196]	@ (80073cc <TIM_Base_SetConfig+0x134>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a30      	ldr	r2, [pc, #192]	@ (80073d0 <TIM_Base_SetConfig+0x138>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d00f      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a2f      	ldr	r2, [pc, #188]	@ (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d00b      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a2e      	ldr	r2, [pc, #184]	@ (80073d8 <TIM_Base_SetConfig+0x140>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d007      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a2d      	ldr	r2, [pc, #180]	@ (80073dc <TIM_Base_SetConfig+0x144>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d003      	beq.n	8007332 <TIM_Base_SetConfig+0x9a>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a2c      	ldr	r2, [pc, #176]	@ (80073e0 <TIM_Base_SetConfig+0x148>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d108      	bne.n	8007344 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007338:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4313      	orrs	r3, r2
 8007342:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	695b      	ldr	r3, [r3, #20]
 800734e:	4313      	orrs	r3, r2
 8007350:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	68fa      	ldr	r2, [r7, #12]
 8007356:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	689a      	ldr	r2, [r3, #8]
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4a16      	ldr	r2, [pc, #88]	@ (80073c4 <TIM_Base_SetConfig+0x12c>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d00f      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	4a18      	ldr	r2, [pc, #96]	@ (80073d4 <TIM_Base_SetConfig+0x13c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d00b      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a17      	ldr	r2, [pc, #92]	@ (80073d8 <TIM_Base_SetConfig+0x140>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d007      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a16      	ldr	r2, [pc, #88]	@ (80073dc <TIM_Base_SetConfig+0x144>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d003      	beq.n	8007390 <TIM_Base_SetConfig+0xf8>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a15      	ldr	r2, [pc, #84]	@ (80073e0 <TIM_Base_SetConfig+0x148>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d103      	bne.n	8007398 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	691a      	ldr	r2, [r3, #16]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0301 	and.w	r3, r3, #1
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d105      	bne.n	80073b6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	f023 0201 	bic.w	r2, r3, #1
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	611a      	str	r2, [r3, #16]
  }
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	40010000 	.word	0x40010000
 80073c8:	40000400 	.word	0x40000400
 80073cc:	40000800 	.word	0x40000800
 80073d0:	40000c00 	.word	0x40000c00
 80073d4:	40010400 	.word	0x40010400
 80073d8:	40014000 	.word	0x40014000
 80073dc:	40014400 	.word	0x40014400
 80073e0:	40014800 	.word	0x40014800

080073e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b085      	sub	sp, #20
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
 80073ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d101      	bne.n	80073fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f8:	2302      	movs	r3, #2
 80073fa:	e06d      	b.n	80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
 800741a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a30      	ldr	r2, [pc, #192]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d004      	beq.n	8007430 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2f      	ldr	r2, [pc, #188]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d108      	bne.n	8007442 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007436:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	685b      	ldr	r3, [r3, #4]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	4313      	orrs	r3, r2
 8007440:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007448:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	68fa      	ldr	r2, [r7, #12]
 8007450:	4313      	orrs	r3, r2
 8007452:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68fa      	ldr	r2, [r7, #12]
 800745a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a20      	ldr	r2, [pc, #128]	@ (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d022      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800746e:	d01d      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a1d      	ldr	r2, [pc, #116]	@ (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d018      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a1c      	ldr	r2, [pc, #112]	@ (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d013      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1a      	ldr	r2, [pc, #104]	@ (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d00e      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a15      	ldr	r2, [pc, #84]	@ (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d009      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a16      	ldr	r2, [pc, #88]	@ (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d004      	beq.n	80074ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a15      	ldr	r2, [pc, #84]	@ (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d10c      	bne.n	80074c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2201      	movs	r2, #1
 80074ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074d6:	2300      	movs	r3, #0
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3714      	adds	r7, #20
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr
 80074e4:	40010000 	.word	0x40010000
 80074e8:	40010400 	.word	0x40010400
 80074ec:	40000400 	.word	0x40000400
 80074f0:	40000800 	.word	0x40000800
 80074f4:	40000c00 	.word	0x40000c00
 80074f8:	40001800 	.word	0x40001800
 80074fc:	40014000 	.word	0x40014000

08007500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d101      	bne.n	800754e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e042      	b.n	80075d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007554:	2b00      	cmp	r3, #0
 8007556:	d106      	bne.n	8007566 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f7f9 fb3b 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	2224      	movs	r2, #36	@ 0x24
 800756a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 0201 	bic.w	r2, r2, #1
 800757c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007582:	2b00      	cmp	r3, #0
 8007584:	d002      	beq.n	800758c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f001 f9f4 	bl	8008974 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 fc89 	bl	8007ea4 <UART_SetConfig>
 8007592:	4603      	mov	r3, r0
 8007594:	2b01      	cmp	r3, #1
 8007596:	d101      	bne.n	800759c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e01b      	b.n	80075d4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	685a      	ldr	r2, [r3, #4]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80075aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	689a      	ldr	r2, [r3, #8]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80075ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f042 0201 	orr.w	r2, r2, #1
 80075ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f001 fa73 	bl	8008ab8 <UART_CheckIdleState>
 80075d2:	4603      	mov	r3, r0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3708      	adds	r7, #8
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	@ 0x28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	4613      	mov	r3, r2
 80075e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80075f0:	2b20      	cmp	r3, #32
 80075f2:	d167      	bne.n	80076c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_UART_Transmit_DMA+0x24>
 80075fa:	88fb      	ldrh	r3, [r7, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007600:	2301      	movs	r3, #1
 8007602:	e060      	b.n	80076c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	88fa      	ldrh	r2, [r7, #6]
 800760e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2200      	movs	r2, #0
 800761e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2221      	movs	r2, #33	@ 0x21
 8007626:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d028      	beq.n	8007684 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007636:	4a26      	ldr	r2, [pc, #152]	@ (80076d0 <HAL_UART_Transmit_DMA+0xf4>)
 8007638:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800763e:	4a25      	ldr	r2, [pc, #148]	@ (80076d4 <HAL_UART_Transmit_DMA+0xf8>)
 8007640:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007646:	4a24      	ldr	r2, [pc, #144]	@ (80076d8 <HAL_UART_Transmit_DMA+0xfc>)
 8007648:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800764e:	2200      	movs	r2, #0
 8007650:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800765a:	4619      	mov	r1, r3
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3328      	adds	r3, #40	@ 0x28
 8007662:	461a      	mov	r2, r3
 8007664:	88fb      	ldrh	r3, [r7, #6]
 8007666:	f7fa f93b 	bl	80018e0 <HAL_DMA_Start_IT>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d009      	beq.n	8007684 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2210      	movs	r2, #16
 8007674:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e020      	b.n	80076c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	2240      	movs	r2, #64	@ 0x40
 800768a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	3308      	adds	r3, #8
 8007692:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	e853 3f00 	ldrex	r3, [r3]
 800769a:	613b      	str	r3, [r7, #16]
   return(result);
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	3308      	adds	r3, #8
 80076aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ac:	623a      	str	r2, [r7, #32]
 80076ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b0:	69f9      	ldr	r1, [r7, #28]
 80076b2:	6a3a      	ldr	r2, [r7, #32]
 80076b4:	e841 2300 	strex	r3, r2, [r1]
 80076b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d1e5      	bne.n	800768c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80076c0:	2300      	movs	r3, #0
 80076c2:	e000      	b.n	80076c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80076c4:	2302      	movs	r3, #2
  }
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	@ 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	08008e35 	.word	0x08008e35
 80076d4:	08008ecb 	.word	0x08008ecb
 80076d8:	08008ee7 	.word	0x08008ee7

080076dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b0ba      	sub	sp, #232	@ 0xe8
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	69db      	ldr	r3, [r3, #28]
 80076ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007702:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007706:	f640 030f 	movw	r3, #2063	@ 0x80f
 800770a:	4013      	ands	r3, r2
 800770c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007710:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11b      	bne.n	8007750 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771c:	f003 0320 	and.w	r3, r3, #32
 8007720:	2b00      	cmp	r3, #0
 8007722:	d015      	beq.n	8007750 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d009      	beq.n	8007750 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 8377 	beq.w	8007e34 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	4798      	blx	r3
      }
      return;
 800774e:	e371      	b.n	8007e34 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007750:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8123 	beq.w	80079a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800775a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800775e:	4b8d      	ldr	r3, [pc, #564]	@ (8007994 <HAL_UART_IRQHandler+0x2b8>)
 8007760:	4013      	ands	r3, r2
 8007762:	2b00      	cmp	r3, #0
 8007764:	d106      	bne.n	8007774 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007766:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800776a:	4b8b      	ldr	r3, [pc, #556]	@ (8007998 <HAL_UART_IRQHandler+0x2bc>)
 800776c:	4013      	ands	r3, r2
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 8116 	beq.w	80079a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007778:	f003 0301 	and.w	r3, r3, #1
 800777c:	2b00      	cmp	r3, #0
 800777e:	d011      	beq.n	80077a4 <HAL_UART_IRQHandler+0xc8>
 8007780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00b      	beq.n	80077a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	2201      	movs	r2, #1
 8007792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800779a:	f043 0201 	orr.w	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a8:	f003 0302 	and.w	r3, r3, #2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d011      	beq.n	80077d4 <HAL_UART_IRQHandler+0xf8>
 80077b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00b      	beq.n	80077d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	2202      	movs	r2, #2
 80077c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d011      	beq.n	8007804 <HAL_UART_IRQHandler+0x128>
 80077e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00b      	beq.n	8007804 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2204      	movs	r2, #4
 80077f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fa:	f043 0202 	orr.w	r2, r3, #2
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007804:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007808:	f003 0308 	and.w	r3, r3, #8
 800780c:	2b00      	cmp	r3, #0
 800780e:	d017      	beq.n	8007840 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007810:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007814:	f003 0320 	and.w	r3, r3, #32
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800781c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007820:	4b5c      	ldr	r3, [pc, #368]	@ (8007994 <HAL_UART_IRQHandler+0x2b8>)
 8007822:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00b      	beq.n	8007840 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2208      	movs	r2, #8
 800782e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007836:	f043 0208 	orr.w	r2, r3, #8
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007844:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007848:	2b00      	cmp	r3, #0
 800784a:	d012      	beq.n	8007872 <HAL_UART_IRQHandler+0x196>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007850:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00c      	beq.n	8007872 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007860:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007868:	f043 0220 	orr.w	r2, r3, #32
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007878:	2b00      	cmp	r3, #0
 800787a:	f000 82dd 	beq.w	8007e38 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800787e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007882:	f003 0320 	and.w	r3, r3, #32
 8007886:	2b00      	cmp	r3, #0
 8007888:	d013      	beq.n	80078b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800788a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800788e:	f003 0320 	and.w	r3, r3, #32
 8007892:	2b00      	cmp	r3, #0
 8007894:	d105      	bne.n	80078a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800789a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d003      	beq.n	80078b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80078b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c6:	2b40      	cmp	r3, #64	@ 0x40
 80078c8:	d005      	beq.n	80078d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80078ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80078ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d054      	beq.n	8007980 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f001 fa46 	bl	8008d68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e6:	2b40      	cmp	r3, #64	@ 0x40
 80078e8:	d146      	bne.n	8007978 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	3308      	adds	r3, #8
 80078f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078f8:	e853 3f00 	ldrex	r3, [r3]
 80078fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007900:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007904:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	3308      	adds	r3, #8
 8007912:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007916:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800791a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007922:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007926:	e841 2300 	strex	r3, r2, [r1]
 800792a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800792e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1d9      	bne.n	80078ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793c:	2b00      	cmp	r3, #0
 800793e:	d017      	beq.n	8007970 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007946:	4a15      	ldr	r2, [pc, #84]	@ (800799c <HAL_UART_IRQHandler+0x2c0>)
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007950:	4618      	mov	r0, r3
 8007952:	f7fa fd4d 	bl	80023f0 <HAL_DMA_Abort_IT>
 8007956:	4603      	mov	r3, r0
 8007958:	2b00      	cmp	r3, #0
 800795a:	d019      	beq.n	8007990 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007962:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007964:	687a      	ldr	r2, [r7, #4]
 8007966:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800796a:	4610      	mov	r0, r2
 800796c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800796e:	e00f      	b.n	8007990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fa81 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007976:	e00b      	b.n	8007990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fa7d 	bl	8007e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800797e:	e007      	b.n	8007990 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f000 fa79 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800798e:	e253      	b.n	8007e38 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	bf00      	nop
    return;
 8007992:	e251      	b.n	8007e38 <HAL_UART_IRQHandler+0x75c>
 8007994:	10000001 	.word	0x10000001
 8007998:	04000120 	.word	0x04000120
 800799c:	08008f67 	.word	0x08008f67

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	f040 81e7 	bne.w	8007d78 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80079aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 81e0 	beq.w	8007d78 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80079b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f000 81d9 	beq.w	8007d78 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	2210      	movs	r2, #16
 80079cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079d8:	2b40      	cmp	r3, #64	@ 0x40
 80079da:	f040 8151 	bne.w	8007c80 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a96      	ldr	r2, [pc, #600]	@ (8007c40 <HAL_UART_IRQHandler+0x564>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d068      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a93      	ldr	r2, [pc, #588]	@ (8007c44 <HAL_UART_IRQHandler+0x568>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d061      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a91      	ldr	r2, [pc, #580]	@ (8007c48 <HAL_UART_IRQHandler+0x56c>)
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d05a      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	4a8e      	ldr	r2, [pc, #568]	@ (8007c4c <HAL_UART_IRQHandler+0x570>)
 8007a12:	4293      	cmp	r3, r2
 8007a14:	d053      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a8c      	ldr	r2, [pc, #560]	@ (8007c50 <HAL_UART_IRQHandler+0x574>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d04c      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a89      	ldr	r2, [pc, #548]	@ (8007c54 <HAL_UART_IRQHandler+0x578>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d045      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4a87      	ldr	r2, [pc, #540]	@ (8007c58 <HAL_UART_IRQHandler+0x57c>)
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	d03e      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a84      	ldr	r2, [pc, #528]	@ (8007c5c <HAL_UART_IRQHandler+0x580>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d037      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a82      	ldr	r2, [pc, #520]	@ (8007c60 <HAL_UART_IRQHandler+0x584>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d030      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4a7f      	ldr	r2, [pc, #508]	@ (8007c64 <HAL_UART_IRQHandler+0x588>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d029      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a7d      	ldr	r2, [pc, #500]	@ (8007c68 <HAL_UART_IRQHandler+0x58c>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d022      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a7a      	ldr	r2, [pc, #488]	@ (8007c6c <HAL_UART_IRQHandler+0x590>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d01b      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a78      	ldr	r2, [pc, #480]	@ (8007c70 <HAL_UART_IRQHandler+0x594>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d014      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a75      	ldr	r2, [pc, #468]	@ (8007c74 <HAL_UART_IRQHandler+0x598>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d00d      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a73      	ldr	r2, [pc, #460]	@ (8007c78 <HAL_UART_IRQHandler+0x59c>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d006      	beq.n	8007abe <HAL_UART_IRQHandler+0x3e2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a70      	ldr	r2, [pc, #448]	@ (8007c7c <HAL_UART_IRQHandler+0x5a0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d106      	bne.n	8007acc <HAL_UART_IRQHandler+0x3f0>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	e005      	b.n	8007ad8 <HAL_UART_IRQHandler+0x3fc>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 81ab 	beq.w	8007e3c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007aec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007af0:	429a      	cmp	r2, r3
 8007af2:	f080 81a3 	bcs.w	8007e3c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007afc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b06:	69db      	ldr	r3, [r3, #28]
 8007b08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b0c:	f000 8087 	beq.w	8007c1e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b24:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b2c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	461a      	mov	r2, r3
 8007b36:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007b3a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007b3e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b46:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b52:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1da      	bne.n	8007b10 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3308      	adds	r3, #8
 8007b60:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b6a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b6c:	f023 0301 	bic.w	r3, r3, #1
 8007b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3308      	adds	r3, #8
 8007b7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b7e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b82:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b84:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b86:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b90:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e1      	bne.n	8007b5a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	3308      	adds	r3, #8
 8007b9c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b9e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ba0:	e853 3f00 	ldrex	r3, [r3]
 8007ba4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007ba6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ba8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bbc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bbe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bc0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d1e3      	bne.n	8007b96 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2220      	movs	r2, #32
 8007bd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007be4:	e853 3f00 	ldrex	r3, [r3]
 8007be8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007bea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007bec:	f023 0310 	bic.w	r3, r3, #16
 8007bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bfe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1e4      	bne.n	8007bdc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fa f8cb 	bl	8001db4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2202      	movs	r2, #2
 8007c22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	b29b      	uxth	r3, r3
 8007c36:	4619      	mov	r1, r3
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 f927 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c3e:	e0fd      	b.n	8007e3c <HAL_UART_IRQHandler+0x760>
 8007c40:	40020010 	.word	0x40020010
 8007c44:	40020028 	.word	0x40020028
 8007c48:	40020040 	.word	0x40020040
 8007c4c:	40020058 	.word	0x40020058
 8007c50:	40020070 	.word	0x40020070
 8007c54:	40020088 	.word	0x40020088
 8007c58:	400200a0 	.word	0x400200a0
 8007c5c:	400200b8 	.word	0x400200b8
 8007c60:	40020410 	.word	0x40020410
 8007c64:	40020428 	.word	0x40020428
 8007c68:	40020440 	.word	0x40020440
 8007c6c:	40020458 	.word	0x40020458
 8007c70:	40020470 	.word	0x40020470
 8007c74:	40020488 	.word	0x40020488
 8007c78:	400204a0 	.word	0x400204a0
 8007c7c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	1ad3      	subs	r3, r2, r3
 8007c90:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c9a:	b29b      	uxth	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f000 80cf 	beq.w	8007e40 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007ca2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80ca 	beq.w	8007e40 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007cc0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	461a      	mov	r2, r3
 8007cca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007cce:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cd0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cd6:	e841 2300 	strex	r3, r2, [r1]
 8007cda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1e4      	bne.n	8007cac <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	623b      	str	r3, [r7, #32]
   return(result);
 8007cf2:	6a3a      	ldr	r2, [r7, #32]
 8007cf4:	4b55      	ldr	r3, [pc, #340]	@ (8007e4c <HAL_UART_IRQHandler+0x770>)
 8007cf6:	4013      	ands	r3, r2
 8007cf8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d06:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d0e:	e841 2300 	strex	r3, r2, [r1]
 8007d12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d1e3      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2220      	movs	r2, #32
 8007d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	e853 3f00 	ldrex	r3, [r3]
 8007d3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f023 0310 	bic.w	r3, r3, #16
 8007d42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d50:	61fb      	str	r3, [r7, #28]
 8007d52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d54:	69b9      	ldr	r1, [r7, #24]
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	e841 2300 	strex	r3, r2, [r1]
 8007d5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1e4      	bne.n	8007d2e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2202      	movs	r2, #2
 8007d68:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d6e:	4619      	mov	r1, r3
 8007d70:	6878      	ldr	r0, [r7, #4]
 8007d72:	f000 f88b 	bl	8007e8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d76:	e063      	b.n	8007e40 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d7c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <HAL_UART_IRQHandler+0x6c6>
 8007d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d008      	beq.n	8007da2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 f924 	bl	8008fe8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da0:	e051      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d014      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d105      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007dba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007dbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d008      	beq.n	8007dd8 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d03a      	beq.n	8007e44 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	4798      	blx	r3
    }
    return;
 8007dd6:	e035      	b.n	8007e44 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d009      	beq.n	8007df8 <HAL_UART_IRQHandler+0x71c>
 8007de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007de8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d003      	beq.n	8007df8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f001 f8ce 	bl	8008f92 <UART_EndTransmit_IT>
    return;
 8007df6:	e026      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007dfc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d009      	beq.n	8007e18 <HAL_UART_IRQHandler+0x73c>
 8007e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e08:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d003      	beq.n	8007e18 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f001 f8fd 	bl	8009010 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e16:	e016      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007e18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e1c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d010      	beq.n	8007e46 <HAL_UART_IRQHandler+0x76a>
 8007e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	da0c      	bge.n	8007e46 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f001 f8e5 	bl	8008ffc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e32:	e008      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e34:	bf00      	nop
 8007e36:	e006      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
    return;
 8007e38:	bf00      	nop
 8007e3a:	e004      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e3c:	bf00      	nop
 8007e3e:	e002      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
      return;
 8007e40:	bf00      	nop
 8007e42:	e000      	b.n	8007e46 <HAL_UART_IRQHandler+0x76a>
    return;
 8007e44:	bf00      	nop
  }
}
 8007e46:	37e8      	adds	r7, #232	@ 0xe8
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}
 8007e4c:	effffffe 	.word	0xeffffffe

08007e50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e80:	bf00      	nop
 8007e82:	370c      	adds	r7, #12
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e8c:	b480      	push	{r7}
 8007e8e:	b083      	sub	sp, #12
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	460b      	mov	r3, r1
 8007e96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e98:	bf00      	nop
 8007e9a:	370c      	adds	r7, #12
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ea8:	b092      	sub	sp, #72	@ 0x48
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	691b      	ldr	r3, [r3, #16]
 8007ebc:	431a      	orrs	r2, r3
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	431a      	orrs	r2, r3
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	4bbe      	ldr	r3, [pc, #760]	@ (80081cc <UART_SetConfig+0x328>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	697a      	ldr	r2, [r7, #20]
 8007ed8:	6812      	ldr	r2, [r2, #0]
 8007eda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007edc:	430b      	orrs	r3, r1
 8007ede:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	68da      	ldr	r2, [r3, #12]
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	699b      	ldr	r3, [r3, #24]
 8007efa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4ab3      	ldr	r2, [pc, #716]	@ (80081d0 <UART_SetConfig+0x32c>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d004      	beq.n	8007f10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f06:	697b      	ldr	r3, [r7, #20]
 8007f08:	6a1b      	ldr	r3, [r3, #32]
 8007f0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	689a      	ldr	r2, [r3, #8]
 8007f16:	4baf      	ldr	r3, [pc, #700]	@ (80081d4 <UART_SetConfig+0x330>)
 8007f18:	4013      	ands	r3, r2
 8007f1a:	697a      	ldr	r2, [r7, #20]
 8007f1c:	6812      	ldr	r2, [r2, #0]
 8007f1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007f20:	430b      	orrs	r3, r1
 8007f22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f2a:	f023 010f 	bic.w	r1, r3, #15
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4aa6      	ldr	r2, [pc, #664]	@ (80081d8 <UART_SetConfig+0x334>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d177      	bne.n	8008034 <UART_SetConfig+0x190>
 8007f44:	4ba5      	ldr	r3, [pc, #660]	@ (80081dc <UART_SetConfig+0x338>)
 8007f46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f4c:	2b28      	cmp	r3, #40	@ 0x28
 8007f4e:	d86d      	bhi.n	800802c <UART_SetConfig+0x188>
 8007f50:	a201      	add	r2, pc, #4	@ (adr r2, 8007f58 <UART_SetConfig+0xb4>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	08007ffd 	.word	0x08007ffd
 8007f5c:	0800802d 	.word	0x0800802d
 8007f60:	0800802d 	.word	0x0800802d
 8007f64:	0800802d 	.word	0x0800802d
 8007f68:	0800802d 	.word	0x0800802d
 8007f6c:	0800802d 	.word	0x0800802d
 8007f70:	0800802d 	.word	0x0800802d
 8007f74:	0800802d 	.word	0x0800802d
 8007f78:	08008005 	.word	0x08008005
 8007f7c:	0800802d 	.word	0x0800802d
 8007f80:	0800802d 	.word	0x0800802d
 8007f84:	0800802d 	.word	0x0800802d
 8007f88:	0800802d 	.word	0x0800802d
 8007f8c:	0800802d 	.word	0x0800802d
 8007f90:	0800802d 	.word	0x0800802d
 8007f94:	0800802d 	.word	0x0800802d
 8007f98:	0800800d 	.word	0x0800800d
 8007f9c:	0800802d 	.word	0x0800802d
 8007fa0:	0800802d 	.word	0x0800802d
 8007fa4:	0800802d 	.word	0x0800802d
 8007fa8:	0800802d 	.word	0x0800802d
 8007fac:	0800802d 	.word	0x0800802d
 8007fb0:	0800802d 	.word	0x0800802d
 8007fb4:	0800802d 	.word	0x0800802d
 8007fb8:	08008015 	.word	0x08008015
 8007fbc:	0800802d 	.word	0x0800802d
 8007fc0:	0800802d 	.word	0x0800802d
 8007fc4:	0800802d 	.word	0x0800802d
 8007fc8:	0800802d 	.word	0x0800802d
 8007fcc:	0800802d 	.word	0x0800802d
 8007fd0:	0800802d 	.word	0x0800802d
 8007fd4:	0800802d 	.word	0x0800802d
 8007fd8:	0800801d 	.word	0x0800801d
 8007fdc:	0800802d 	.word	0x0800802d
 8007fe0:	0800802d 	.word	0x0800802d
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	0800802d 	.word	0x0800802d
 8007fec:	0800802d 	.word	0x0800802d
 8007ff0:	0800802d 	.word	0x0800802d
 8007ff4:	0800802d 	.word	0x0800802d
 8007ff8:	08008025 	.word	0x08008025
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e222      	b.n	800844a <UART_SetConfig+0x5a6>
 8008004:	2304      	movs	r3, #4
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e21e      	b.n	800844a <UART_SetConfig+0x5a6>
 800800c:	2308      	movs	r3, #8
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e21a      	b.n	800844a <UART_SetConfig+0x5a6>
 8008014:	2310      	movs	r3, #16
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801a:	e216      	b.n	800844a <UART_SetConfig+0x5a6>
 800801c:	2320      	movs	r3, #32
 800801e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008022:	e212      	b.n	800844a <UART_SetConfig+0x5a6>
 8008024:	2340      	movs	r3, #64	@ 0x40
 8008026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800802a:	e20e      	b.n	800844a <UART_SetConfig+0x5a6>
 800802c:	2380      	movs	r3, #128	@ 0x80
 800802e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008032:	e20a      	b.n	800844a <UART_SetConfig+0x5a6>
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a69      	ldr	r2, [pc, #420]	@ (80081e0 <UART_SetConfig+0x33c>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d130      	bne.n	80080a0 <UART_SetConfig+0x1fc>
 800803e:	4b67      	ldr	r3, [pc, #412]	@ (80081dc <UART_SetConfig+0x338>)
 8008040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	2b05      	cmp	r3, #5
 8008048:	d826      	bhi.n	8008098 <UART_SetConfig+0x1f4>
 800804a:	a201      	add	r2, pc, #4	@ (adr r2, 8008050 <UART_SetConfig+0x1ac>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008069 	.word	0x08008069
 8008054:	08008071 	.word	0x08008071
 8008058:	08008079 	.word	0x08008079
 800805c:	08008081 	.word	0x08008081
 8008060:	08008089 	.word	0x08008089
 8008064:	08008091 	.word	0x08008091
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e1ec      	b.n	800844a <UART_SetConfig+0x5a6>
 8008070:	2304      	movs	r3, #4
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e1e8      	b.n	800844a <UART_SetConfig+0x5a6>
 8008078:	2308      	movs	r3, #8
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e1e4      	b.n	800844a <UART_SetConfig+0x5a6>
 8008080:	2310      	movs	r3, #16
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008086:	e1e0      	b.n	800844a <UART_SetConfig+0x5a6>
 8008088:	2320      	movs	r3, #32
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800808e:	e1dc      	b.n	800844a <UART_SetConfig+0x5a6>
 8008090:	2340      	movs	r3, #64	@ 0x40
 8008092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008096:	e1d8      	b.n	800844a <UART_SetConfig+0x5a6>
 8008098:	2380      	movs	r3, #128	@ 0x80
 800809a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800809e:	e1d4      	b.n	800844a <UART_SetConfig+0x5a6>
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a4f      	ldr	r2, [pc, #316]	@ (80081e4 <UART_SetConfig+0x340>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d130      	bne.n	800810c <UART_SetConfig+0x268>
 80080aa:	4b4c      	ldr	r3, [pc, #304]	@ (80081dc <UART_SetConfig+0x338>)
 80080ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080ae:	f003 0307 	and.w	r3, r3, #7
 80080b2:	2b05      	cmp	r3, #5
 80080b4:	d826      	bhi.n	8008104 <UART_SetConfig+0x260>
 80080b6:	a201      	add	r2, pc, #4	@ (adr r2, 80080bc <UART_SetConfig+0x218>)
 80080b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080bc:	080080d5 	.word	0x080080d5
 80080c0:	080080dd 	.word	0x080080dd
 80080c4:	080080e5 	.word	0x080080e5
 80080c8:	080080ed 	.word	0x080080ed
 80080cc:	080080f5 	.word	0x080080f5
 80080d0:	080080fd 	.word	0x080080fd
 80080d4:	2300      	movs	r3, #0
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e1b6      	b.n	800844a <UART_SetConfig+0x5a6>
 80080dc:	2304      	movs	r3, #4
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e1b2      	b.n	800844a <UART_SetConfig+0x5a6>
 80080e4:	2308      	movs	r3, #8
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ea:	e1ae      	b.n	800844a <UART_SetConfig+0x5a6>
 80080ec:	2310      	movs	r3, #16
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f2:	e1aa      	b.n	800844a <UART_SetConfig+0x5a6>
 80080f4:	2320      	movs	r3, #32
 80080f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fa:	e1a6      	b.n	800844a <UART_SetConfig+0x5a6>
 80080fc:	2340      	movs	r3, #64	@ 0x40
 80080fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008102:	e1a2      	b.n	800844a <UART_SetConfig+0x5a6>
 8008104:	2380      	movs	r3, #128	@ 0x80
 8008106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800810a:	e19e      	b.n	800844a <UART_SetConfig+0x5a6>
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a35      	ldr	r2, [pc, #212]	@ (80081e8 <UART_SetConfig+0x344>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d130      	bne.n	8008178 <UART_SetConfig+0x2d4>
 8008116:	4b31      	ldr	r3, [pc, #196]	@ (80081dc <UART_SetConfig+0x338>)
 8008118:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800811a:	f003 0307 	and.w	r3, r3, #7
 800811e:	2b05      	cmp	r3, #5
 8008120:	d826      	bhi.n	8008170 <UART_SetConfig+0x2cc>
 8008122:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <UART_SetConfig+0x284>)
 8008124:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008128:	08008141 	.word	0x08008141
 800812c:	08008149 	.word	0x08008149
 8008130:	08008151 	.word	0x08008151
 8008134:	08008159 	.word	0x08008159
 8008138:	08008161 	.word	0x08008161
 800813c:	08008169 	.word	0x08008169
 8008140:	2300      	movs	r3, #0
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008146:	e180      	b.n	800844a <UART_SetConfig+0x5a6>
 8008148:	2304      	movs	r3, #4
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814e:	e17c      	b.n	800844a <UART_SetConfig+0x5a6>
 8008150:	2308      	movs	r3, #8
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008156:	e178      	b.n	800844a <UART_SetConfig+0x5a6>
 8008158:	2310      	movs	r3, #16
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800815e:	e174      	b.n	800844a <UART_SetConfig+0x5a6>
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008166:	e170      	b.n	800844a <UART_SetConfig+0x5a6>
 8008168:	2340      	movs	r3, #64	@ 0x40
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816e:	e16c      	b.n	800844a <UART_SetConfig+0x5a6>
 8008170:	2380      	movs	r3, #128	@ 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008176:	e168      	b.n	800844a <UART_SetConfig+0x5a6>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1b      	ldr	r2, [pc, #108]	@ (80081ec <UART_SetConfig+0x348>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d142      	bne.n	8008208 <UART_SetConfig+0x364>
 8008182:	4b16      	ldr	r3, [pc, #88]	@ (80081dc <UART_SetConfig+0x338>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	f003 0307 	and.w	r3, r3, #7
 800818a:	2b05      	cmp	r3, #5
 800818c:	d838      	bhi.n	8008200 <UART_SetConfig+0x35c>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <UART_SetConfig+0x2f0>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	080081ad 	.word	0x080081ad
 8008198:	080081b5 	.word	0x080081b5
 800819c:	080081bd 	.word	0x080081bd
 80081a0:	080081c5 	.word	0x080081c5
 80081a4:	080081f1 	.word	0x080081f1
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	2300      	movs	r3, #0
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b2:	e14a      	b.n	800844a <UART_SetConfig+0x5a6>
 80081b4:	2304      	movs	r3, #4
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ba:	e146      	b.n	800844a <UART_SetConfig+0x5a6>
 80081bc:	2308      	movs	r3, #8
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081c2:	e142      	b.n	800844a <UART_SetConfig+0x5a6>
 80081c4:	2310      	movs	r3, #16
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ca:	e13e      	b.n	800844a <UART_SetConfig+0x5a6>
 80081cc:	cfff69f3 	.word	0xcfff69f3
 80081d0:	58000c00 	.word	0x58000c00
 80081d4:	11fff4ff 	.word	0x11fff4ff
 80081d8:	40011000 	.word	0x40011000
 80081dc:	58024400 	.word	0x58024400
 80081e0:	40004400 	.word	0x40004400
 80081e4:	40004800 	.word	0x40004800
 80081e8:	40004c00 	.word	0x40004c00
 80081ec:	40005000 	.word	0x40005000
 80081f0:	2320      	movs	r3, #32
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e128      	b.n	800844a <UART_SetConfig+0x5a6>
 80081f8:	2340      	movs	r3, #64	@ 0x40
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e124      	b.n	800844a <UART_SetConfig+0x5a6>
 8008200:	2380      	movs	r3, #128	@ 0x80
 8008202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008206:	e120      	b.n	800844a <UART_SetConfig+0x5a6>
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4acb      	ldr	r2, [pc, #812]	@ (800853c <UART_SetConfig+0x698>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d176      	bne.n	8008300 <UART_SetConfig+0x45c>
 8008212:	4bcb      	ldr	r3, [pc, #812]	@ (8008540 <UART_SetConfig+0x69c>)
 8008214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008216:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800821a:	2b28      	cmp	r3, #40	@ 0x28
 800821c:	d86c      	bhi.n	80082f8 <UART_SetConfig+0x454>
 800821e:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <UART_SetConfig+0x380>)
 8008220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008224:	080082c9 	.word	0x080082c9
 8008228:	080082f9 	.word	0x080082f9
 800822c:	080082f9 	.word	0x080082f9
 8008230:	080082f9 	.word	0x080082f9
 8008234:	080082f9 	.word	0x080082f9
 8008238:	080082f9 	.word	0x080082f9
 800823c:	080082f9 	.word	0x080082f9
 8008240:	080082f9 	.word	0x080082f9
 8008244:	080082d1 	.word	0x080082d1
 8008248:	080082f9 	.word	0x080082f9
 800824c:	080082f9 	.word	0x080082f9
 8008250:	080082f9 	.word	0x080082f9
 8008254:	080082f9 	.word	0x080082f9
 8008258:	080082f9 	.word	0x080082f9
 800825c:	080082f9 	.word	0x080082f9
 8008260:	080082f9 	.word	0x080082f9
 8008264:	080082d9 	.word	0x080082d9
 8008268:	080082f9 	.word	0x080082f9
 800826c:	080082f9 	.word	0x080082f9
 8008270:	080082f9 	.word	0x080082f9
 8008274:	080082f9 	.word	0x080082f9
 8008278:	080082f9 	.word	0x080082f9
 800827c:	080082f9 	.word	0x080082f9
 8008280:	080082f9 	.word	0x080082f9
 8008284:	080082e1 	.word	0x080082e1
 8008288:	080082f9 	.word	0x080082f9
 800828c:	080082f9 	.word	0x080082f9
 8008290:	080082f9 	.word	0x080082f9
 8008294:	080082f9 	.word	0x080082f9
 8008298:	080082f9 	.word	0x080082f9
 800829c:	080082f9 	.word	0x080082f9
 80082a0:	080082f9 	.word	0x080082f9
 80082a4:	080082e9 	.word	0x080082e9
 80082a8:	080082f9 	.word	0x080082f9
 80082ac:	080082f9 	.word	0x080082f9
 80082b0:	080082f9 	.word	0x080082f9
 80082b4:	080082f9 	.word	0x080082f9
 80082b8:	080082f9 	.word	0x080082f9
 80082bc:	080082f9 	.word	0x080082f9
 80082c0:	080082f9 	.word	0x080082f9
 80082c4:	080082f1 	.word	0x080082f1
 80082c8:	2301      	movs	r3, #1
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e0bc      	b.n	800844a <UART_SetConfig+0x5a6>
 80082d0:	2304      	movs	r3, #4
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e0b8      	b.n	800844a <UART_SetConfig+0x5a6>
 80082d8:	2308      	movs	r3, #8
 80082da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082de:	e0b4      	b.n	800844a <UART_SetConfig+0x5a6>
 80082e0:	2310      	movs	r3, #16
 80082e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082e6:	e0b0      	b.n	800844a <UART_SetConfig+0x5a6>
 80082e8:	2320      	movs	r3, #32
 80082ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ee:	e0ac      	b.n	800844a <UART_SetConfig+0x5a6>
 80082f0:	2340      	movs	r3, #64	@ 0x40
 80082f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082f6:	e0a8      	b.n	800844a <UART_SetConfig+0x5a6>
 80082f8:	2380      	movs	r3, #128	@ 0x80
 80082fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082fe:	e0a4      	b.n	800844a <UART_SetConfig+0x5a6>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a8f      	ldr	r2, [pc, #572]	@ (8008544 <UART_SetConfig+0x6a0>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d130      	bne.n	800836c <UART_SetConfig+0x4c8>
 800830a:	4b8d      	ldr	r3, [pc, #564]	@ (8008540 <UART_SetConfig+0x69c>)
 800830c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800830e:	f003 0307 	and.w	r3, r3, #7
 8008312:	2b05      	cmp	r3, #5
 8008314:	d826      	bhi.n	8008364 <UART_SetConfig+0x4c0>
 8008316:	a201      	add	r2, pc, #4	@ (adr r2, 800831c <UART_SetConfig+0x478>)
 8008318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831c:	08008335 	.word	0x08008335
 8008320:	0800833d 	.word	0x0800833d
 8008324:	08008345 	.word	0x08008345
 8008328:	0800834d 	.word	0x0800834d
 800832c:	08008355 	.word	0x08008355
 8008330:	0800835d 	.word	0x0800835d
 8008334:	2300      	movs	r3, #0
 8008336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833a:	e086      	b.n	800844a <UART_SetConfig+0x5a6>
 800833c:	2304      	movs	r3, #4
 800833e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008342:	e082      	b.n	800844a <UART_SetConfig+0x5a6>
 8008344:	2308      	movs	r3, #8
 8008346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800834a:	e07e      	b.n	800844a <UART_SetConfig+0x5a6>
 800834c:	2310      	movs	r3, #16
 800834e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008352:	e07a      	b.n	800844a <UART_SetConfig+0x5a6>
 8008354:	2320      	movs	r3, #32
 8008356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800835a:	e076      	b.n	800844a <UART_SetConfig+0x5a6>
 800835c:	2340      	movs	r3, #64	@ 0x40
 800835e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008362:	e072      	b.n	800844a <UART_SetConfig+0x5a6>
 8008364:	2380      	movs	r3, #128	@ 0x80
 8008366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800836a:	e06e      	b.n	800844a <UART_SetConfig+0x5a6>
 800836c:	697b      	ldr	r3, [r7, #20]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a75      	ldr	r2, [pc, #468]	@ (8008548 <UART_SetConfig+0x6a4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d130      	bne.n	80083d8 <UART_SetConfig+0x534>
 8008376:	4b72      	ldr	r3, [pc, #456]	@ (8008540 <UART_SetConfig+0x69c>)
 8008378:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800837a:	f003 0307 	and.w	r3, r3, #7
 800837e:	2b05      	cmp	r3, #5
 8008380:	d826      	bhi.n	80083d0 <UART_SetConfig+0x52c>
 8008382:	a201      	add	r2, pc, #4	@ (adr r2, 8008388 <UART_SetConfig+0x4e4>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	080083a1 	.word	0x080083a1
 800838c:	080083a9 	.word	0x080083a9
 8008390:	080083b1 	.word	0x080083b1
 8008394:	080083b9 	.word	0x080083b9
 8008398:	080083c1 	.word	0x080083c1
 800839c:	080083c9 	.word	0x080083c9
 80083a0:	2300      	movs	r3, #0
 80083a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a6:	e050      	b.n	800844a <UART_SetConfig+0x5a6>
 80083a8:	2304      	movs	r3, #4
 80083aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ae:	e04c      	b.n	800844a <UART_SetConfig+0x5a6>
 80083b0:	2308      	movs	r3, #8
 80083b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b6:	e048      	b.n	800844a <UART_SetConfig+0x5a6>
 80083b8:	2310      	movs	r3, #16
 80083ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083be:	e044      	b.n	800844a <UART_SetConfig+0x5a6>
 80083c0:	2320      	movs	r3, #32
 80083c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c6:	e040      	b.n	800844a <UART_SetConfig+0x5a6>
 80083c8:	2340      	movs	r3, #64	@ 0x40
 80083ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ce:	e03c      	b.n	800844a <UART_SetConfig+0x5a6>
 80083d0:	2380      	movs	r3, #128	@ 0x80
 80083d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d6:	e038      	b.n	800844a <UART_SetConfig+0x5a6>
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	4a5b      	ldr	r2, [pc, #364]	@ (800854c <UART_SetConfig+0x6a8>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d130      	bne.n	8008444 <UART_SetConfig+0x5a0>
 80083e2:	4b57      	ldr	r3, [pc, #348]	@ (8008540 <UART_SetConfig+0x69c>)
 80083e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083e6:	f003 0307 	and.w	r3, r3, #7
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d826      	bhi.n	800843c <UART_SetConfig+0x598>
 80083ee:	a201      	add	r2, pc, #4	@ (adr r2, 80083f4 <UART_SetConfig+0x550>)
 80083f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f4:	0800840d 	.word	0x0800840d
 80083f8:	08008415 	.word	0x08008415
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	08008425 	.word	0x08008425
 8008404:	0800842d 	.word	0x0800842d
 8008408:	08008435 	.word	0x08008435
 800840c:	2302      	movs	r3, #2
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e01a      	b.n	800844a <UART_SetConfig+0x5a6>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e016      	b.n	800844a <UART_SetConfig+0x5a6>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e012      	b.n	800844a <UART_SetConfig+0x5a6>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e00e      	b.n	800844a <UART_SetConfig+0x5a6>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e00a      	b.n	800844a <UART_SetConfig+0x5a6>
 8008434:	2340      	movs	r3, #64	@ 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e006      	b.n	800844a <UART_SetConfig+0x5a6>
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e002      	b.n	800844a <UART_SetConfig+0x5a6>
 8008444:	2380      	movs	r3, #128	@ 0x80
 8008446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a3f      	ldr	r2, [pc, #252]	@ (800854c <UART_SetConfig+0x6a8>)
 8008450:	4293      	cmp	r3, r2
 8008452:	f040 80f8 	bne.w	8008646 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008456:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800845a:	2b20      	cmp	r3, #32
 800845c:	dc46      	bgt.n	80084ec <UART_SetConfig+0x648>
 800845e:	2b02      	cmp	r3, #2
 8008460:	f2c0 8082 	blt.w	8008568 <UART_SetConfig+0x6c4>
 8008464:	3b02      	subs	r3, #2
 8008466:	2b1e      	cmp	r3, #30
 8008468:	d87e      	bhi.n	8008568 <UART_SetConfig+0x6c4>
 800846a:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <UART_SetConfig+0x5cc>)
 800846c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008470:	080084f3 	.word	0x080084f3
 8008474:	08008569 	.word	0x08008569
 8008478:	080084fb 	.word	0x080084fb
 800847c:	08008569 	.word	0x08008569
 8008480:	08008569 	.word	0x08008569
 8008484:	08008569 	.word	0x08008569
 8008488:	0800850b 	.word	0x0800850b
 800848c:	08008569 	.word	0x08008569
 8008490:	08008569 	.word	0x08008569
 8008494:	08008569 	.word	0x08008569
 8008498:	08008569 	.word	0x08008569
 800849c:	08008569 	.word	0x08008569
 80084a0:	08008569 	.word	0x08008569
 80084a4:	08008569 	.word	0x08008569
 80084a8:	0800851b 	.word	0x0800851b
 80084ac:	08008569 	.word	0x08008569
 80084b0:	08008569 	.word	0x08008569
 80084b4:	08008569 	.word	0x08008569
 80084b8:	08008569 	.word	0x08008569
 80084bc:	08008569 	.word	0x08008569
 80084c0:	08008569 	.word	0x08008569
 80084c4:	08008569 	.word	0x08008569
 80084c8:	08008569 	.word	0x08008569
 80084cc:	08008569 	.word	0x08008569
 80084d0:	08008569 	.word	0x08008569
 80084d4:	08008569 	.word	0x08008569
 80084d8:	08008569 	.word	0x08008569
 80084dc:	08008569 	.word	0x08008569
 80084e0:	08008569 	.word	0x08008569
 80084e4:	08008569 	.word	0x08008569
 80084e8:	0800855b 	.word	0x0800855b
 80084ec:	2b40      	cmp	r3, #64	@ 0x40
 80084ee:	d037      	beq.n	8008560 <UART_SetConfig+0x6bc>
 80084f0:	e03a      	b.n	8008568 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084f2:	f7fe f8af 	bl	8006654 <HAL_RCCEx_GetD3PCLK1Freq>
 80084f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084f8:	e03c      	b.n	8008574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe f8be 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008508:	e034      	b.n	8008574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800850a:	f107 0318 	add.w	r3, r7, #24
 800850e:	4618      	mov	r0, r3
 8008510:	f7fe fa0a 	bl	8006928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008514:	69fb      	ldr	r3, [r7, #28]
 8008516:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008518:	e02c      	b.n	8008574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800851a:	4b09      	ldr	r3, [pc, #36]	@ (8008540 <UART_SetConfig+0x69c>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d016      	beq.n	8008554 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008526:	4b06      	ldr	r3, [pc, #24]	@ (8008540 <UART_SetConfig+0x69c>)
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	08db      	lsrs	r3, r3, #3
 800852c:	f003 0303 	and.w	r3, r3, #3
 8008530:	4a07      	ldr	r2, [pc, #28]	@ (8008550 <UART_SetConfig+0x6ac>)
 8008532:	fa22 f303 	lsr.w	r3, r2, r3
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008538:	e01c      	b.n	8008574 <UART_SetConfig+0x6d0>
 800853a:	bf00      	nop
 800853c:	40011400 	.word	0x40011400
 8008540:	58024400 	.word	0x58024400
 8008544:	40007800 	.word	0x40007800
 8008548:	40007c00 	.word	0x40007c00
 800854c:	58000c00 	.word	0x58000c00
 8008550:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008554:	4b9d      	ldr	r3, [pc, #628]	@ (80087cc <UART_SetConfig+0x928>)
 8008556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008558:	e00c      	b.n	8008574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800855a:	4b9d      	ldr	r3, [pc, #628]	@ (80087d0 <UART_SetConfig+0x92c>)
 800855c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800855e:	e009      	b.n	8008574 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008560:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008566:	e005      	b.n	8008574 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8008568:	2300      	movs	r3, #0
 800856a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008572:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008576:	2b00      	cmp	r3, #0
 8008578:	f000 81de 	beq.w	8008938 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008580:	4a94      	ldr	r2, [pc, #592]	@ (80087d4 <UART_SetConfig+0x930>)
 8008582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008586:	461a      	mov	r2, r3
 8008588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800858a:	fbb3 f3f2 	udiv	r3, r3, r2
 800858e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	4613      	mov	r3, r2
 8008596:	005b      	lsls	r3, r3, #1
 8008598:	4413      	add	r3, r2
 800859a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800859c:	429a      	cmp	r2, r3
 800859e:	d305      	bcc.n	80085ac <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80085a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d903      	bls.n	80085b4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80085ac:	2301      	movs	r3, #1
 80085ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80085b2:	e1c1      	b.n	8008938 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085b6:	2200      	movs	r2, #0
 80085b8:	60bb      	str	r3, [r7, #8]
 80085ba:	60fa      	str	r2, [r7, #12]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085c0:	4a84      	ldr	r2, [pc, #528]	@ (80087d4 <UART_SetConfig+0x930>)
 80085c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085c6:	b29b      	uxth	r3, r3
 80085c8:	2200      	movs	r2, #0
 80085ca:	603b      	str	r3, [r7, #0]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085d6:	f7f7 fe7f 	bl	80002d8 <__aeabi_uldivmod>
 80085da:	4602      	mov	r2, r0
 80085dc:	460b      	mov	r3, r1
 80085de:	4610      	mov	r0, r2
 80085e0:	4619      	mov	r1, r3
 80085e2:	f04f 0200 	mov.w	r2, #0
 80085e6:	f04f 0300 	mov.w	r3, #0
 80085ea:	020b      	lsls	r3, r1, #8
 80085ec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085f0:	0202      	lsls	r2, r0, #8
 80085f2:	6979      	ldr	r1, [r7, #20]
 80085f4:	6849      	ldr	r1, [r1, #4]
 80085f6:	0849      	lsrs	r1, r1, #1
 80085f8:	2000      	movs	r0, #0
 80085fa:	460c      	mov	r4, r1
 80085fc:	4605      	mov	r5, r0
 80085fe:	eb12 0804 	adds.w	r8, r2, r4
 8008602:	eb43 0905 	adc.w	r9, r3, r5
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	469a      	mov	sl, r3
 800860e:	4693      	mov	fp, r2
 8008610:	4652      	mov	r2, sl
 8008612:	465b      	mov	r3, fp
 8008614:	4640      	mov	r0, r8
 8008616:	4649      	mov	r1, r9
 8008618:	f7f7 fe5e 	bl	80002d8 <__aeabi_uldivmod>
 800861c:	4602      	mov	r2, r0
 800861e:	460b      	mov	r3, r1
 8008620:	4613      	mov	r3, r2
 8008622:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800862a:	d308      	bcc.n	800863e <UART_SetConfig+0x79a>
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008632:	d204      	bcs.n	800863e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800863a:	60da      	str	r2, [r3, #12]
 800863c:	e17c      	b.n	8008938 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008644:	e178      	b.n	8008938 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008646:	697b      	ldr	r3, [r7, #20]
 8008648:	69db      	ldr	r3, [r3, #28]
 800864a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800864e:	f040 80c5 	bne.w	80087dc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008652:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008656:	2b20      	cmp	r3, #32
 8008658:	dc48      	bgt.n	80086ec <UART_SetConfig+0x848>
 800865a:	2b00      	cmp	r3, #0
 800865c:	db7b      	blt.n	8008756 <UART_SetConfig+0x8b2>
 800865e:	2b20      	cmp	r3, #32
 8008660:	d879      	bhi.n	8008756 <UART_SetConfig+0x8b2>
 8008662:	a201      	add	r2, pc, #4	@ (adr r2, 8008668 <UART_SetConfig+0x7c4>)
 8008664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008668:	080086f3 	.word	0x080086f3
 800866c:	080086fb 	.word	0x080086fb
 8008670:	08008757 	.word	0x08008757
 8008674:	08008757 	.word	0x08008757
 8008678:	08008703 	.word	0x08008703
 800867c:	08008757 	.word	0x08008757
 8008680:	08008757 	.word	0x08008757
 8008684:	08008757 	.word	0x08008757
 8008688:	08008713 	.word	0x08008713
 800868c:	08008757 	.word	0x08008757
 8008690:	08008757 	.word	0x08008757
 8008694:	08008757 	.word	0x08008757
 8008698:	08008757 	.word	0x08008757
 800869c:	08008757 	.word	0x08008757
 80086a0:	08008757 	.word	0x08008757
 80086a4:	08008757 	.word	0x08008757
 80086a8:	08008723 	.word	0x08008723
 80086ac:	08008757 	.word	0x08008757
 80086b0:	08008757 	.word	0x08008757
 80086b4:	08008757 	.word	0x08008757
 80086b8:	08008757 	.word	0x08008757
 80086bc:	08008757 	.word	0x08008757
 80086c0:	08008757 	.word	0x08008757
 80086c4:	08008757 	.word	0x08008757
 80086c8:	08008757 	.word	0x08008757
 80086cc:	08008757 	.word	0x08008757
 80086d0:	08008757 	.word	0x08008757
 80086d4:	08008757 	.word	0x08008757
 80086d8:	08008757 	.word	0x08008757
 80086dc:	08008757 	.word	0x08008757
 80086e0:	08008757 	.word	0x08008757
 80086e4:	08008757 	.word	0x08008757
 80086e8:	08008749 	.word	0x08008749
 80086ec:	2b40      	cmp	r3, #64	@ 0x40
 80086ee:	d02e      	beq.n	800874e <UART_SetConfig+0x8aa>
 80086f0:	e031      	b.n	8008756 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086f2:	f7fc fd79 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 80086f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086f8:	e033      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086fa:	f7fc fd8b 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 80086fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008700:	e02f      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008706:	4618      	mov	r0, r3
 8008708:	f7fd ffba 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800870c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008710:	e027      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008712:	f107 0318 	add.w	r3, r7, #24
 8008716:	4618      	mov	r0, r3
 8008718:	f7fe f906 	bl	8006928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800871c:	69fb      	ldr	r3, [r7, #28]
 800871e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008720:	e01f      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008722:	4b2d      	ldr	r3, [pc, #180]	@ (80087d8 <UART_SetConfig+0x934>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f003 0320 	and.w	r3, r3, #32
 800872a:	2b00      	cmp	r3, #0
 800872c:	d009      	beq.n	8008742 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800872e:	4b2a      	ldr	r3, [pc, #168]	@ (80087d8 <UART_SetConfig+0x934>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	08db      	lsrs	r3, r3, #3
 8008734:	f003 0303 	and.w	r3, r3, #3
 8008738:	4a24      	ldr	r2, [pc, #144]	@ (80087cc <UART_SetConfig+0x928>)
 800873a:	fa22 f303 	lsr.w	r3, r2, r3
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008740:	e00f      	b.n	8008762 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008742:	4b22      	ldr	r3, [pc, #136]	@ (80087cc <UART_SetConfig+0x928>)
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008746:	e00c      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008748:	4b21      	ldr	r3, [pc, #132]	@ (80087d0 <UART_SetConfig+0x92c>)
 800874a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800874c:	e009      	b.n	8008762 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800874e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008752:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008754:	e005      	b.n	8008762 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008756:	2300      	movs	r3, #0
 8008758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008760:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 80e7 	beq.w	8008938 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876e:	4a19      	ldr	r2, [pc, #100]	@ (80087d4 <UART_SetConfig+0x930>)
 8008770:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008774:	461a      	mov	r2, r3
 8008776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008778:	fbb3 f3f2 	udiv	r3, r3, r2
 800877c:	005a      	lsls	r2, r3, #1
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	085b      	lsrs	r3, r3, #1
 8008784:	441a      	add	r2, r3
 8008786:	697b      	ldr	r3, [r7, #20]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	fbb2 f3f3 	udiv	r3, r2, r3
 800878e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008792:	2b0f      	cmp	r3, #15
 8008794:	d916      	bls.n	80087c4 <UART_SetConfig+0x920>
 8008796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800879c:	d212      	bcs.n	80087c4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800879e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a0:	b29b      	uxth	r3, r3
 80087a2:	f023 030f 	bic.w	r3, r3, #15
 80087a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80087a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087aa:	085b      	lsrs	r3, r3, #1
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	f003 0307 	and.w	r3, r3, #7
 80087b2:	b29a      	uxth	r2, r3
 80087b4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80087b6:	4313      	orrs	r3, r2
 80087b8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80087c0:	60da      	str	r2, [r3, #12]
 80087c2:	e0b9      	b.n	8008938 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087ca:	e0b5      	b.n	8008938 <UART_SetConfig+0xa94>
 80087cc:	03d09000 	.word	0x03d09000
 80087d0:	003d0900 	.word	0x003d0900
 80087d4:	080092b4 	.word	0x080092b4
 80087d8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80087dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087e0:	2b20      	cmp	r3, #32
 80087e2:	dc49      	bgt.n	8008878 <UART_SetConfig+0x9d4>
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	db7c      	blt.n	80088e2 <UART_SetConfig+0xa3e>
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d87a      	bhi.n	80088e2 <UART_SetConfig+0xa3e>
 80087ec:	a201      	add	r2, pc, #4	@ (adr r2, 80087f4 <UART_SetConfig+0x950>)
 80087ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f2:	bf00      	nop
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	08008887 	.word	0x08008887
 80087fc:	080088e3 	.word	0x080088e3
 8008800:	080088e3 	.word	0x080088e3
 8008804:	0800888f 	.word	0x0800888f
 8008808:	080088e3 	.word	0x080088e3
 800880c:	080088e3 	.word	0x080088e3
 8008810:	080088e3 	.word	0x080088e3
 8008814:	0800889f 	.word	0x0800889f
 8008818:	080088e3 	.word	0x080088e3
 800881c:	080088e3 	.word	0x080088e3
 8008820:	080088e3 	.word	0x080088e3
 8008824:	080088e3 	.word	0x080088e3
 8008828:	080088e3 	.word	0x080088e3
 800882c:	080088e3 	.word	0x080088e3
 8008830:	080088e3 	.word	0x080088e3
 8008834:	080088af 	.word	0x080088af
 8008838:	080088e3 	.word	0x080088e3
 800883c:	080088e3 	.word	0x080088e3
 8008840:	080088e3 	.word	0x080088e3
 8008844:	080088e3 	.word	0x080088e3
 8008848:	080088e3 	.word	0x080088e3
 800884c:	080088e3 	.word	0x080088e3
 8008850:	080088e3 	.word	0x080088e3
 8008854:	080088e3 	.word	0x080088e3
 8008858:	080088e3 	.word	0x080088e3
 800885c:	080088e3 	.word	0x080088e3
 8008860:	080088e3 	.word	0x080088e3
 8008864:	080088e3 	.word	0x080088e3
 8008868:	080088e3 	.word	0x080088e3
 800886c:	080088e3 	.word	0x080088e3
 8008870:	080088e3 	.word	0x080088e3
 8008874:	080088d5 	.word	0x080088d5
 8008878:	2b40      	cmp	r3, #64	@ 0x40
 800887a:	d02e      	beq.n	80088da <UART_SetConfig+0xa36>
 800887c:	e031      	b.n	80088e2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800887e:	f7fc fcb3 	bl	80051e8 <HAL_RCC_GetPCLK1Freq>
 8008882:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008884:	e033      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008886:	f7fc fcc5 	bl	8005214 <HAL_RCC_GetPCLK2Freq>
 800888a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800888c:	e02f      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800888e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008892:	4618      	mov	r0, r3
 8008894:	f7fd fef4 	bl	8006680 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800889a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800889c:	e027      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889e:	f107 0318 	add.w	r3, r7, #24
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fe f840 	bl	8006928 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ac:	e01f      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80088ae:	4b2d      	ldr	r3, [pc, #180]	@ (8008964 <UART_SetConfig+0xac0>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f003 0320 	and.w	r3, r3, #32
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d009      	beq.n	80088ce <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008964 <UART_SetConfig+0xac0>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	08db      	lsrs	r3, r3, #3
 80088c0:	f003 0303 	and.w	r3, r3, #3
 80088c4:	4a28      	ldr	r2, [pc, #160]	@ (8008968 <UART_SetConfig+0xac4>)
 80088c6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088cc:	e00f      	b.n	80088ee <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80088ce:	4b26      	ldr	r3, [pc, #152]	@ (8008968 <UART_SetConfig+0xac4>)
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d2:	e00c      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088d4:	4b25      	ldr	r3, [pc, #148]	@ (800896c <UART_SetConfig+0xac8>)
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d8:	e009      	b.n	80088ee <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088e0:	e005      	b.n	80088ee <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80088e2:	2300      	movs	r3, #0
 80088e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088e6:	2301      	movs	r3, #1
 80088e8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088ec:	bf00      	nop
    }

    if (pclk != 0U)
 80088ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d021      	beq.n	8008938 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008970 <UART_SetConfig+0xacc>)
 80088fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088fe:	461a      	mov	r2, r3
 8008900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008902:	fbb3 f2f2 	udiv	r2, r3, r2
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	685b      	ldr	r3, [r3, #4]
 800890a:	085b      	lsrs	r3, r3, #1
 800890c:	441a      	add	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	fbb2 f3f3 	udiv	r3, r2, r3
 8008916:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	2b0f      	cmp	r3, #15
 800891c:	d909      	bls.n	8008932 <UART_SetConfig+0xa8e>
 800891e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008924:	d205      	bcs.n	8008932 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008926:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008928:	b29a      	uxth	r2, r3
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	60da      	str	r2, [r3, #12]
 8008930:	e002      	b.n	8008938 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	2201      	movs	r2, #1
 800893c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2201      	movs	r2, #1
 8008944:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	2200      	movs	r2, #0
 8008952:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008954:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008958:	4618      	mov	r0, r3
 800895a:	3748      	adds	r7, #72	@ 0x48
 800895c:	46bd      	mov	sp, r7
 800895e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008962:	bf00      	nop
 8008964:	58024400 	.word	0x58024400
 8008968:	03d09000 	.word	0x03d09000
 800896c:	003d0900 	.word	0x003d0900
 8008970:	080092b4 	.word	0x080092b4

08008974 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008980:	f003 0308 	and.w	r3, r3, #8
 8008984:	2b00      	cmp	r3, #0
 8008986:	d00a      	beq.n	800899e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00a      	beq.n	80089c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	430a      	orrs	r2, r1
 80089be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	f003 0302 	and.w	r3, r3, #2
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d00a      	beq.n	80089e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089e6:	f003 0304 	and.w	r3, r3, #4
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d00a      	beq.n	8008a04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a08:	f003 0310 	and.w	r3, r3, #16
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d00a      	beq.n	8008a26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a2a:	f003 0320 	and.w	r3, r3, #32
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d00a      	beq.n	8008a48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	689b      	ldr	r3, [r3, #8]
 8008a38:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	430a      	orrs	r2, r1
 8008a46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d01a      	beq.n	8008a8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	430a      	orrs	r2, r1
 8008a68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a72:	d10a      	bne.n	8008a8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00a      	beq.n	8008aac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	430a      	orrs	r2, r1
 8008aaa:	605a      	str	r2, [r3, #4]
  }
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b098      	sub	sp, #96	@ 0x60
 8008abc:	af02      	add	r7, sp, #8
 8008abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ac8:	f7f8 fa0e 	bl	8000ee8 <HAL_GetTick>
 8008acc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f003 0308 	and.w	r3, r3, #8
 8008ad8:	2b08      	cmp	r3, #8
 8008ada:	d12f      	bne.n	8008b3c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008adc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008ae0:	9300      	str	r3, [sp, #0]
 8008ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008aea:	6878      	ldr	r0, [r7, #4]
 8008aec:	f000 f88e 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008af0:	4603      	mov	r3, r0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d022      	beq.n	8008b3c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008afe:	e853 3f00 	ldrex	r3, [r3]
 8008b02:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b0a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	461a      	mov	r2, r3
 8008b12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b14:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b1c:	e841 2300 	strex	r3, r2, [r1]
 8008b20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d1e6      	bne.n	8008af6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2220      	movs	r2, #32
 8008b2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2200      	movs	r2, #0
 8008b34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e063      	b.n	8008c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0304 	and.w	r3, r3, #4
 8008b46:	2b04      	cmp	r3, #4
 8008b48:	d149      	bne.n	8008bde <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b4a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b4e:	9300      	str	r3, [sp, #0]
 8008b50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b52:	2200      	movs	r2, #0
 8008b54:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f857 	bl	8008c0c <UART_WaitOnFlagUntilTimeout>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d03c      	beq.n	8008bde <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	623b      	str	r3, [r7, #32]
   return(result);
 8008b72:	6a3b      	ldr	r3, [r7, #32]
 8008b74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b82:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008bb6:	61fa      	str	r2, [r7, #28]
 8008bb8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	69b9      	ldr	r1, [r7, #24]
 8008bbc:	69fa      	ldr	r2, [r7, #28]
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	617b      	str	r3, [r7, #20]
   return(result);
 8008bc4:	697b      	ldr	r3, [r7, #20]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e012      	b.n	8008c04 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2220      	movs	r2, #32
 8008bea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2200      	movs	r2, #0
 8008bf2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3758      	adds	r7, #88	@ 0x58
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b084      	sub	sp, #16
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c1c:	e04f      	b.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c1e:	69bb      	ldr	r3, [r7, #24]
 8008c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c24:	d04b      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c26:	f7f8 f95f 	bl	8000ee8 <HAL_GetTick>
 8008c2a:	4602      	mov	r2, r0
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	1ad3      	subs	r3, r2, r3
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d302      	bcc.n	8008c3c <UART_WaitOnFlagUntilTimeout+0x30>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d101      	bne.n	8008c40 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c3c:	2303      	movs	r3, #3
 8008c3e:	e04e      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f003 0304 	and.w	r3, r3, #4
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d037      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	2b80      	cmp	r3, #128	@ 0x80
 8008c52:	d034      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d031      	beq.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69db      	ldr	r3, [r3, #28]
 8008c60:	f003 0308 	and.w	r3, r3, #8
 8008c64:	2b08      	cmp	r3, #8
 8008c66:	d110      	bne.n	8008c8a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f879 	bl	8008d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2208      	movs	r2, #8
 8008c7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	e029      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69db      	ldr	r3, [r3, #28]
 8008c90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c98:	d111      	bne.n	8008cbe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008ca2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f85f 	bl	8008d68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	2220      	movs	r2, #32
 8008cae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e00f      	b.n	8008cde <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	69da      	ldr	r2, [r3, #28]
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	68ba      	ldr	r2, [r7, #8]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	bf0c      	ite	eq
 8008cce:	2301      	moveq	r3, #1
 8008cd0:	2300      	movne	r3, #0
 8008cd2:	b2db      	uxtb	r3, r3
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	79fb      	ldrb	r3, [r7, #7]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d0a0      	beq.n	8008c1e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cdc:	2300      	movs	r3, #0
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3710      	adds	r7, #16
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	bd80      	pop	{r7, pc}

08008ce6 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ce6:	b480      	push	{r7}
 8008ce8:	b08f      	sub	sp, #60	@ 0x3c
 8008cea:	af00      	add	r7, sp, #0
 8008cec:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf4:	6a3b      	ldr	r3, [r7, #32]
 8008cf6:	e853 3f00 	ldrex	r3, [r3]
 8008cfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008d02:	637b      	str	r3, [r7, #52]	@ 0x34
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	461a      	mov	r2, r3
 8008d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d0e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008d12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d14:	e841 2300 	strex	r3, r2, [r1]
 8008d18:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d1e6      	bne.n	8008cee <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	e853 3f00 	ldrex	r3, [r3]
 8008d2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d40:	61ba      	str	r2, [r7, #24]
 8008d42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d44:	6979      	ldr	r1, [r7, #20]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	e841 2300 	strex	r3, r2, [r1]
 8008d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d1e5      	bne.n	8008d20 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2220      	movs	r2, #32
 8008d58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008d5c:	bf00      	nop
 8008d5e:	373c      	adds	r7, #60	@ 0x3c
 8008d60:	46bd      	mov	sp, r7
 8008d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d66:	4770      	bx	lr

08008d68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b095      	sub	sp, #84	@ 0x54
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d78:	e853 3f00 	ldrex	r3, [r3]
 8008d7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	461a      	mov	r2, r3
 8008d8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8008d90:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008d94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e6      	bne.n	8008d70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3308      	adds	r3, #8
 8008da8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6a3b      	ldr	r3, [r7, #32]
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008db2:	69fa      	ldr	r2, [r7, #28]
 8008db4:	4b1e      	ldr	r3, [pc, #120]	@ (8008e30 <UART_EndRxTransfer+0xc8>)
 8008db6:	4013      	ands	r3, r2
 8008db8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008dca:	e841 2300 	strex	r3, r2, [r1]
 8008dce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d1e5      	bne.n	8008da2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d118      	bne.n	8008e10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	e853 3f00 	ldrex	r3, [r3]
 8008dea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f023 0310 	bic.w	r3, r3, #16
 8008df2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	461a      	mov	r2, r3
 8008dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dfc:	61bb      	str	r3, [r7, #24]
 8008dfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e00:	6979      	ldr	r1, [r7, #20]
 8008e02:	69ba      	ldr	r2, [r7, #24]
 8008e04:	e841 2300 	strex	r3, r2, [r1]
 8008e08:	613b      	str	r3, [r7, #16]
   return(result);
 8008e0a:	693b      	ldr	r3, [r7, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d1e6      	bne.n	8008dde <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	2220      	movs	r2, #32
 8008e14:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2200      	movs	r2, #0
 8008e22:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008e24:	bf00      	nop
 8008e26:	3754      	adds	r7, #84	@ 0x54
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	effffffe 	.word	0xeffffffe

08008e34 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b090      	sub	sp, #64	@ 0x40
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e40:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69db      	ldr	r3, [r3, #28]
 8008e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e4a:	d037      	beq.n	8008ebc <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008e54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3308      	adds	r3, #8
 8008e5a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e5e:	e853 3f00 	ldrex	r3, [r3]
 8008e62:	623b      	str	r3, [r7, #32]
   return(result);
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008e6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	3308      	adds	r3, #8
 8008e72:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008e74:	633a      	str	r2, [r7, #48]	@ 0x30
 8008e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008e7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7c:	e841 2300 	strex	r3, r2, [r1]
 8008e80:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d1e5      	bne.n	8008e54 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	e853 3f00 	ldrex	r3, [r3]
 8008e94:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eaa:	69b9      	ldr	r1, [r7, #24]
 8008eac:	69fa      	ldr	r2, [r7, #28]
 8008eae:	e841 2300 	strex	r3, r2, [r1]
 8008eb2:	617b      	str	r3, [r7, #20]
   return(result);
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d1e6      	bne.n	8008e88 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008eba:	e002      	b.n	8008ec2 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008ebc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ebe:	f7fe ffc7 	bl	8007e50 <HAL_UART_TxCpltCallback>
}
 8008ec2:	bf00      	nop
 8008ec4:	3740      	adds	r7, #64	@ 0x40
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b084      	sub	sp, #16
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ed6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7fe ffc3 	bl	8007e64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ede:	bf00      	nop
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b086      	sub	sp, #24
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ef2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008efa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f0e:	2b80      	cmp	r3, #128	@ 0x80
 8008f10:	d109      	bne.n	8008f26 <UART_DMAError+0x40>
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b21      	cmp	r3, #33	@ 0x21
 8008f16:	d106      	bne.n	8008f26 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008f20:	6978      	ldr	r0, [r7, #20]
 8008f22:	f7ff fee0 	bl	8008ce6 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f30:	2b40      	cmp	r3, #64	@ 0x40
 8008f32:	d109      	bne.n	8008f48 <UART_DMAError+0x62>
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	2b22      	cmp	r3, #34	@ 0x22
 8008f38:	d106      	bne.n	8008f48 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008f42:	6978      	ldr	r0, [r7, #20]
 8008f44:	f7ff ff10 	bl	8008d68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008f4e:	f043 0210 	orr.w	r2, r3, #16
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f58:	6978      	ldr	r0, [r7, #20]
 8008f5a:	f7fe ff8d 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2200      	movs	r2, #0
 8008f78:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f7fe ff77 	bl	8007e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f8a:	bf00      	nop
 8008f8c:	3710      	adds	r7, #16
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b088      	sub	sp, #32
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	e853 3f00 	ldrex	r3, [r3]
 8008fa6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	61bb      	str	r3, [r7, #24]
 8008fba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6979      	ldr	r1, [r7, #20]
 8008fbe:	69ba      	ldr	r2, [r7, #24]
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e6      	bne.n	8008f9a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2220      	movs	r2, #32
 8008fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7fe ff38 	bl	8007e50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fe0:	bf00      	nop
 8008fe2:	3720      	adds	r7, #32
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009018:	bf00      	nop
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <HAL_UARTEx_DisableFifoMode+0x16>
 8009036:	2302      	movs	r3, #2
 8009038:	e027      	b.n	800908a <HAL_UARTEx_DisableFifoMode+0x66>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2224      	movs	r2, #36	@ 0x24
 8009046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	681a      	ldr	r2, [r3, #0]
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	f022 0201 	bic.w	r2, r2, #1
 8009060:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009068:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2200      	movs	r2, #0
 800906e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2220      	movs	r2, #32
 800907c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2200      	movs	r2, #0
 8009084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
 800909e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d101      	bne.n	80090ae <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80090aa:	2302      	movs	r3, #2
 80090ac:	e02d      	b.n	800910a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2224      	movs	r2, #36	@ 0x24
 80090ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	681a      	ldr	r2, [r3, #0]
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	f022 0201 	bic.w	r2, r2, #1
 80090d4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	683a      	ldr	r2, [r7, #0]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 f850 	bl	8009190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2220      	movs	r2, #32
 80090fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009108:	2300      	movs	r3, #0
}
 800910a:	4618      	mov	r0, r3
 800910c:	3710      	adds	r7, #16
 800910e:	46bd      	mov	sp, r7
 8009110:	bd80      	pop	{r7, pc}

08009112 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
 800911a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009122:	2b01      	cmp	r3, #1
 8009124:	d101      	bne.n	800912a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009126:	2302      	movs	r3, #2
 8009128:	e02d      	b.n	8009186 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2201      	movs	r2, #1
 800912e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2224      	movs	r2, #36	@ 0x24
 8009136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681a      	ldr	r2, [r3, #0]
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f022 0201 	bic.w	r2, r2, #1
 8009150:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	683a      	ldr	r2, [r7, #0]
 8009162:	430a      	orrs	r2, r1
 8009164:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f812 	bl	8009190 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2220      	movs	r2, #32
 8009178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009184:	2300      	movs	r3, #0
}
 8009186:	4618      	mov	r0, r3
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
	...

08009190 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009190:	b480      	push	{r7}
 8009192:	b085      	sub	sp, #20
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800919c:	2b00      	cmp	r3, #0
 800919e:	d108      	bne.n	80091b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80091b0:	e031      	b.n	8009216 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80091b2:	2310      	movs	r3, #16
 80091b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80091b6:	2310      	movs	r3, #16
 80091b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	689b      	ldr	r3, [r3, #8]
 80091c0:	0e5b      	lsrs	r3, r3, #25
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	f003 0307 	and.w	r3, r3, #7
 80091c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	0f5b      	lsrs	r3, r3, #29
 80091d2:	b2db      	uxtb	r3, r3
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091da:	7bbb      	ldrb	r3, [r7, #14]
 80091dc:	7b3a      	ldrb	r2, [r7, #12]
 80091de:	4911      	ldr	r1, [pc, #68]	@ (8009224 <UARTEx_SetNbDataToProcess+0x94>)
 80091e0:	5c8a      	ldrb	r2, [r1, r2]
 80091e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80091e6:	7b3a      	ldrb	r2, [r7, #12]
 80091e8:	490f      	ldr	r1, [pc, #60]	@ (8009228 <UARTEx_SetNbDataToProcess+0x98>)
 80091ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80091ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	7b7a      	ldrb	r2, [r7, #13]
 80091fc:	4909      	ldr	r1, [pc, #36]	@ (8009224 <UARTEx_SetNbDataToProcess+0x94>)
 80091fe:	5c8a      	ldrb	r2, [r1, r2]
 8009200:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009204:	7b7a      	ldrb	r2, [r7, #13]
 8009206:	4908      	ldr	r1, [pc, #32]	@ (8009228 <UARTEx_SetNbDataToProcess+0x98>)
 8009208:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800920a:	fb93 f3f2 	sdiv	r3, r3, r2
 800920e:	b29a      	uxth	r2, r3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009216:	bf00      	nop
 8009218:	3714      	adds	r7, #20
 800921a:	46bd      	mov	sp, r7
 800921c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	080092cc 	.word	0x080092cc
 8009228:	080092d4 	.word	0x080092d4

0800922c <memset>:
 800922c:	4402      	add	r2, r0
 800922e:	4603      	mov	r3, r0
 8009230:	4293      	cmp	r3, r2
 8009232:	d100      	bne.n	8009236 <memset+0xa>
 8009234:	4770      	bx	lr
 8009236:	f803 1b01 	strb.w	r1, [r3], #1
 800923a:	e7f9      	b.n	8009230 <memset+0x4>

0800923c <__libc_init_array>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4d0d      	ldr	r5, [pc, #52]	@ (8009274 <__libc_init_array+0x38>)
 8009240:	4c0d      	ldr	r4, [pc, #52]	@ (8009278 <__libc_init_array+0x3c>)
 8009242:	1b64      	subs	r4, r4, r5
 8009244:	10a4      	asrs	r4, r4, #2
 8009246:	2600      	movs	r6, #0
 8009248:	42a6      	cmp	r6, r4
 800924a:	d109      	bne.n	8009260 <__libc_init_array+0x24>
 800924c:	4d0b      	ldr	r5, [pc, #44]	@ (800927c <__libc_init_array+0x40>)
 800924e:	4c0c      	ldr	r4, [pc, #48]	@ (8009280 <__libc_init_array+0x44>)
 8009250:	f000 f818 	bl	8009284 <_init>
 8009254:	1b64      	subs	r4, r4, r5
 8009256:	10a4      	asrs	r4, r4, #2
 8009258:	2600      	movs	r6, #0
 800925a:	42a6      	cmp	r6, r4
 800925c:	d105      	bne.n	800926a <__libc_init_array+0x2e>
 800925e:	bd70      	pop	{r4, r5, r6, pc}
 8009260:	f855 3b04 	ldr.w	r3, [r5], #4
 8009264:	4798      	blx	r3
 8009266:	3601      	adds	r6, #1
 8009268:	e7ee      	b.n	8009248 <__libc_init_array+0xc>
 800926a:	f855 3b04 	ldr.w	r3, [r5], #4
 800926e:	4798      	blx	r3
 8009270:	3601      	adds	r6, #1
 8009272:	e7f2      	b.n	800925a <__libc_init_array+0x1e>
 8009274:	080092e4 	.word	0x080092e4
 8009278:	080092e4 	.word	0x080092e4
 800927c:	080092e4 	.word	0x080092e4
 8009280:	080092e8 	.word	0x080092e8

08009284 <_init>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	bf00      	nop
 8009288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928a:	bc08      	pop	{r3}
 800928c:	469e      	mov	lr, r3
 800928e:	4770      	bx	lr

08009290 <_fini>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr
