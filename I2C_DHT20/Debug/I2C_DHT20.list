
I2C_DHT20.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f854  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800faf8  0800faf8  00010af8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ff98  0800ff98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ffa0  0800ffa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800ffa4  0800ffa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001dc  24000000  0800ffa8  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000444  240001dc  08010184  000111dc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000620  08010184  00011620  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000111dc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00017285  00000000  00000000  0001120a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002eb7  00000000  00000000  0002848f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f78  00000000  00000000  0002b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000beb  00000000  00000000  0002c2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037cd1  00000000  00000000  0002ceab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00019055  00000000  00000000  00064b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159871  00000000  00000000  0007dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d7442  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000523c  00000000  00000000  001d7488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005b  00000000  00000000  001dc6c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001dc 	.word	0x240001dc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fadc 	.word	0x0800fadc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e0 	.word	0x240001e0
 80002dc:	0800fadc 	.word	0x0800fadc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <REGISTER_Reset>:

uint8_t readBuffer[6] = { 0 };

// Reset DHT20 register
void REGISTER_Reset(uint8_t addr)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b088      	sub	sp, #32
 8000a6c:	af02      	add	r7, sp, #8
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	uint8_t sendBuffer1[3] = { addr, 0x00, 0x00 };
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	753b      	strb	r3, [r7, #20]
 8000a76:	2300      	movs	r3, #0
 8000a78:	757b      	strb	r3, [r7, #21]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	75bb      	strb	r3, [r7, #22]
	HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS, sendBuffer1, 3, HAL_MAX_DELAY);
 8000a7e:	f107 0214 	add.w	r2, r7, #20
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	2303      	movs	r3, #3
 8000a8a:	2170      	movs	r1, #112	@ 0x70
 8000a8c:	4819      	ldr	r0, [pc, #100]	@ (8000af4 <REGISTER_Reset+0x8c>)
 8000a8e:	f003 fdef 	bl	8004670 <HAL_I2C_Master_Transmit>

	HAL_Delay(5);
 8000a92:	2005      	movs	r0, #5
 8000a94:	f000 ffb4 	bl	8001a00 <HAL_Delay>

	uint8_t readBuffer[3] = { 0, 0, 0 };
 8000a98:	4a17      	ldr	r2, [pc, #92]	@ (8000af8 <REGISTER_Reset+0x90>)
 8000a9a:	f107 0310 	add.w	r3, r7, #16
 8000a9e:	6812      	ldr	r2, [r2, #0]
 8000aa0:	4611      	mov	r1, r2
 8000aa2:	8019      	strh	r1, [r3, #0]
 8000aa4:	3302      	adds	r3, #2
 8000aa6:	0c12      	lsrs	r2, r2, #16
 8000aa8:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS, readBuffer, 3, HAL_MAX_DELAY);
 8000aaa:	f107 0210 	add.w	r2, r7, #16
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	2303      	movs	r3, #3
 8000ab6:	2170      	movs	r1, #112	@ 0x70
 8000ab8:	480e      	ldr	r0, [pc, #56]	@ (8000af4 <REGISTER_Reset+0x8c>)
 8000aba:	f003 fef1 	bl	80048a0 <HAL_I2C_Master_Receive>

	HAL_Delay(10);
 8000abe:	200a      	movs	r0, #10
 8000ac0:	f000 ff9e 	bl	8001a00 <HAL_Delay>

	uint8_t sendBuffer2[3] = { 0xB0 | addr, readBuffer[1], readBuffer[2] };
 8000ac4:	79fb      	ldrb	r3, [r7, #7]
 8000ac6:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	733b      	strb	r3, [r7, #12]
 8000ace:	7c7b      	ldrb	r3, [r7, #17]
 8000ad0:	737b      	strb	r3, [r7, #13]
 8000ad2:	7cbb      	ldrb	r3, [r7, #18]
 8000ad4:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(&hi2c1, DHT20_ADDRESS, sendBuffer2, 3, HAL_MAX_DELAY);
 8000ad6:	f107 020c 	add.w	r2, r7, #12
 8000ada:	f04f 33ff 	mov.w	r3, #4294967295
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2303      	movs	r3, #3
 8000ae2:	2170      	movs	r1, #112	@ 0x70
 8000ae4:	4803      	ldr	r0, [pc, #12]	@ (8000af4 <REGISTER_Reset+0x8c>)
 8000ae6:	f003 fdc3 	bl	8004670 <HAL_I2C_Master_Transmit>
}
 8000aea:	bf00      	nop
 8000aec:	3718      	adds	r7, #24
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	24000200 	.word	0x24000200
 8000af8:	0800faf8 	.word	0x0800faf8

08000afc <STATUS_Read>:

// Read DHT20 status
uint8_t STATUS_Read()
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af02      	add	r7, sp, #8
	uint8_t readBuffer = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Receive(&hi2c1, DHT20_ADDRESS, &readBuffer, 1, HAL_MAX_DELAY);
 8000b06:	1dfa      	adds	r2, r7, #7
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	9300      	str	r3, [sp, #0]
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2170      	movs	r1, #112	@ 0x70
 8000b12:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <STATUS_Read+0x28>)
 8000b14:	f003 fec4 	bl	80048a0 <HAL_I2C_Master_Receive>
	return readBuffer;
 8000b18:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	24000200 	.word	0x24000200

08000b28 <DHT20_Measure>:

// Send 0xAC command
void DHT20_Measure()
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
	static uint8_t sendBuffer[3] = { 0xAC, 0x33, 0x00 };
	HAL_I2C_Master_Transmit_IT(&hi2c1, DHT20_ADDRESS, sendBuffer, 3);		// HAL_I2C_Master_Transmit_DMA(&hi2c1, DHT20_ADDRESS, sendBuffer, 3);
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	4a03      	ldr	r2, [pc, #12]	@ (8000b3c <DHT20_Measure+0x14>)
 8000b30:	2170      	movs	r1, #112	@ 0x70
 8000b32:	4803      	ldr	r0, [pc, #12]	@ (8000b40 <DHT20_Measure+0x18>)
 8000b34:	f003 ffaa 	bl	8004a8c <HAL_I2C_Master_Transmit_IT>
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000000 	.word	0x24000000
 8000b40:	24000200 	.word	0x24000200

08000b44 <DHT20_Get>:

// Receive temperature and humidity data from DHT20
void DHT20_Get()
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1, DHT20_ADDRESS, readBuffer, 6);		// HAL_I2C_Master_Receive_DMA(&hi2c1, DHT20_ADDRESS, readBuffer, 6);
 8000b48:	2306      	movs	r3, #6
 8000b4a:	4a03      	ldr	r2, [pc, #12]	@ (8000b58 <DHT20_Get+0x14>)
 8000b4c:	2170      	movs	r1, #112	@ 0x70
 8000b4e:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <DHT20_Get+0x18>)
 8000b50:	f004 f834 	bl	8004bbc <HAL_I2C_Master_Receive_IT>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	240001f8 	.word	0x240001f8
 8000b5c:	24000200 	.word	0x24000200

08000b60 <DHT20_Analysis>:

// Convert BIN data to DEC data
void DHT20_Analysis(float* Temperature, float* Humidity)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	uint32_t data = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	data = ((uint32_t)readBuffer[3] >> 4) + ((uint32_t)readBuffer[2] << 4) + ((uint32_t)readBuffer[1] << 12);
 8000b6e:	4b22      	ldr	r3, [pc, #136]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000b70:	78db      	ldrb	r3, [r3, #3]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000b7a:	789b      	ldrb	r3, [r3, #2]
 8000b7c:	011b      	lsls	r3, r3, #4
 8000b7e:	441a      	add	r2, r3
 8000b80:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000b82:	785b      	ldrb	r3, [r3, #1]
 8000b84:	031b      	lsls	r3, r3, #12
 8000b86:	4413      	add	r3, r2
 8000b88:	60fb      	str	r3, [r7, #12]
	*Humidity = data * 100.0f / (1 << 20);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	ee07 3a90 	vmov	s15, r3
 8000b90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000b94:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000bfc <DHT20_Analysis+0x9c>
 8000b98:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000b9c:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000c00 <DHT20_Analysis+0xa0>
 8000ba0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	edc3 7a00 	vstr	s15, [r3]

	data = (((uint32_t)readBuffer[3] & 0x0F) << 16) + ((uint32_t)readBuffer[4] << 8) + (uint32_t)readBuffer[5];
 8000baa:	4b13      	ldr	r3, [pc, #76]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000bac:	78db      	ldrb	r3, [r3, #3]
 8000bae:	041b      	lsls	r3, r3, #16
 8000bb0:	f403 2270 	and.w	r2, r3, #983040	@ 0xf0000
 8000bb4:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000bb6:	791b      	ldrb	r3, [r3, #4]
 8000bb8:	021b      	lsls	r3, r3, #8
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a0e      	ldr	r2, [pc, #56]	@ (8000bf8 <DHT20_Analysis+0x98>)
 8000bbe:	7952      	ldrb	r2, [r2, #5]
 8000bc0:	4413      	add	r3, r2
 8000bc2:	60fb      	str	r3, [r7, #12]
	*Temperature = data * 200.0f / (1 << 20) - 50;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	ee07 3a90 	vmov	s15, r3
 8000bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000bce:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8000c04 <DHT20_Analysis+0xa4>
 8000bd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bd6:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000c00 <DHT20_Analysis+0xa0>
 8000bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bde:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8000c08 <DHT20_Analysis+0xa8>
 8000be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	edc3 7a00 	vstr	s15, [r3]
}
 8000bec:	bf00      	nop
 8000bee:	3714      	adds	r7, #20
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	240001f8 	.word	0x240001f8
 8000bfc:	42c80000 	.word	0x42c80000
 8000c00:	49800000 	.word	0x49800000
 8000c04:	43480000 	.word	0x43480000
 8000c08:	42480000 	.word	0x42480000

08000c0c <DHT20_Init>:

// Initialize DHT20
void DHT20_Init()
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 8000c10:	2064      	movs	r0, #100	@ 0x64
 8000c12:	f000 fef5 	bl	8001a00 <HAL_Delay>

	if((STATUS_Read() & 0x18) != 0x18)
 8000c16:	f7ff ff71 	bl	8000afc <STATUS_Read>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	f003 0318 	and.w	r3, r3, #24
 8000c20:	2b18      	cmp	r3, #24
 8000c22:	d00b      	beq.n	8000c3c <DHT20_Init+0x30>
	{
		REGISTER_Reset(0x1B);
 8000c24:	201b      	movs	r0, #27
 8000c26:	f7ff ff1f 	bl	8000a68 <REGISTER_Reset>
		REGISTER_Reset(0x1C);
 8000c2a:	201c      	movs	r0, #28
 8000c2c:	f7ff ff1c 	bl	8000a68 <REGISTER_Reset>
		REGISTER_Reset(0x1E);
 8000c30:	201e      	movs	r0, #30
 8000c32:	f7ff ff19 	bl	8000a68 <REGISTER_Reset>
		HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f000 fee2 	bl	8001a00 <HAL_Delay>
	}
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c46:	4b19      	ldr	r3, [pc, #100]	@ (8000cac <MX_DMA_Init+0x6c>)
 8000c48:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c4c:	4a17      	ldr	r2, [pc, #92]	@ (8000cac <MX_DMA_Init+0x6c>)
 8000c4e:	f043 0301 	orr.w	r3, r3, #1
 8000c52:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c56:	4b15      	ldr	r3, [pc, #84]	@ (8000cac <MX_DMA_Init+0x6c>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c5c:	f003 0301 	and.w	r3, r3, #1
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000c64:	2200      	movs	r2, #0
 8000c66:	2100      	movs	r1, #0
 8000c68:	200b      	movs	r0, #11
 8000c6a:	f000 ffd4 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c6e:	200b      	movs	r0, #11
 8000c70:	f000 ffeb 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2100      	movs	r1, #0
 8000c78:	200c      	movs	r0, #12
 8000c7a:	f000 ffcc 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c7e:	200c      	movs	r0, #12
 8000c80:	f000 ffe3 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000c84:	2200      	movs	r2, #0
 8000c86:	2100      	movs	r1, #0
 8000c88:	200d      	movs	r0, #13
 8000c8a:	f000 ffc4 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c8e:	200d      	movs	r0, #13
 8000c90:	f000 ffdb 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000c94:	2200      	movs	r2, #0
 8000c96:	2100      	movs	r1, #0
 8000c98:	200e      	movs	r0, #14
 8000c9a:	f000 ffbc 	bl	8001c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c9e:	200e      	movs	r0, #14
 8000ca0:	f000 ffd3 	bl	8001c4a <HAL_NVIC_EnableIRQ>

}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	58024400 	.word	0x58024400

08000cb0 <MX_GPIO_Init>:
     PC14-OSC32_IN (OSC32_IN)   ------> RCC_OSC32_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb6:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cda:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cdc:	f043 0302 	orr.w	r3, r3, #2
 8000ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce4:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	60bb      	str	r3, [r7, #8]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a10      	ldr	r2, [pc, #64]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000cfa:	f043 0301 	orr.w	r3, r3, #1
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a09      	ldr	r2, [pc, #36]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000d18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_GPIO_Init+0x8c>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	683b      	ldr	r3, [r7, #0]

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	58024400 	.word	0x58024400

08000d40 <HAL_I2C_MasterTxCpltCallback>:
#include "i2c.h"

/* USER CODE BEGIN 0 */

void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a06      	ldr	r2, [pc, #24]	@ (8000d64 <HAL_I2C_MasterTxCpltCallback+0x24>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d102      	bne.n	8000d56 <HAL_I2C_MasterTxCpltCallback+0x16>
	{
		dht20State = 2;
 8000d50:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <HAL_I2C_MasterTxCpltCallback+0x28>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	701a      	strb	r2, [r3, #0]
	}
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	24000200 	.word	0x24000200
 8000d68:	24000344 	.word	0x24000344

08000d6c <HAL_I2C_MasterRxCpltCallback>:

void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	if(hi2c == &hi2c1)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a06      	ldr	r2, [pc, #24]	@ (8000d90 <HAL_I2C_MasterRxCpltCallback+0x24>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d102      	bne.n	8000d82 <HAL_I2C_MasterRxCpltCallback+0x16>
	{
		dht20State = 4;
 8000d7c:	4b05      	ldr	r3, [pc, #20]	@ (8000d94 <HAL_I2C_MasterRxCpltCallback+0x28>)
 8000d7e:	2204      	movs	r2, #4
 8000d80:	701a      	strb	r2, [r3, #0]
	}
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	24000200 	.word	0x24000200
 8000d94:	24000344 	.word	0x24000344

08000d98 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e10 <MX_I2C1_Init+0x78>)
 8000da0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x307075B1;
 8000da2:	4b1a      	ldr	r3, [pc, #104]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <MX_I2C1_Init+0x7c>)
 8000da6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000da8:	4b18      	ldr	r3, [pc, #96]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dae:	4b17      	ldr	r3, [pc, #92]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db4:	4b15      	ldr	r3, [pc, #84]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dba:	4b14      	ldr	r3, [pc, #80]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc6:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd2:	480e      	ldr	r0, [pc, #56]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000dd4:	f003 fbb0 	bl	8004538 <HAL_I2C_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000dde:	f000 fa4d 	bl	800127c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de2:	2100      	movs	r1, #0
 8000de4:	4809      	ldr	r0, [pc, #36]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000de6:	f005 ff77 	bl	8006cd8 <HAL_I2CEx_ConfigAnalogFilter>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df0:	f000 fa44 	bl	800127c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df4:	2100      	movs	r1, #0
 8000df6:	4805      	ldr	r0, [pc, #20]	@ (8000e0c <MX_I2C1_Init+0x74>)
 8000df8:	f005 ffb9 	bl	8006d6e <HAL_I2CEx_ConfigDigitalFilter>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d001      	beq.n	8000e06 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e02:	f000 fa3b 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	24000200 	.word	0x24000200
 8000e10:	40005400 	.word	0x40005400
 8000e14:	307075b1 	.word	0x307075b1

08000e18 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b0ba      	sub	sp, #232	@ 0xe8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e20:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	22c0      	movs	r2, #192	@ 0xc0
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f00b fb3a 	bl	800c4b2 <memset>
  if(i2cHandle->Instance==I2C1)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a5c      	ldr	r2, [pc, #368]	@ (8000fb4 <HAL_I2C_MspInit+0x19c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	f040 80b1 	bne.w	8000fac <HAL_I2C_MspInit+0x194>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4a:	f04f 0208 	mov.w	r2, #8
 8000e4e:	f04f 0300 	mov.w	r3, #0
 8000e52:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5c:	f107 0310 	add.w	r3, r7, #16
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 fff1 	bl	8007e48 <HAL_RCCEx_PeriphCLKConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8000e6c:	f000 fa06 	bl	800127c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e70:	4b51      	ldr	r3, [pc, #324]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e76:	4a50      	ldr	r2, [pc, #320]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000e78:	f043 0302 	orr.w	r3, r3, #2
 8000e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e80:	4b4d      	ldr	r3, [pc, #308]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60fb      	str	r3, [r7, #12]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8000e8e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e96:	2312      	movs	r3, #18
 8000e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4841      	ldr	r0, [pc, #260]	@ (8000fbc <HAL_I2C_MspInit+0x1a4>)
 8000eb6:	f003 f98f 	bl	80041d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eba:	4b3f      	ldr	r3, [pc, #252]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000ebc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ec0:	4a3d      	ldr	r2, [pc, #244]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000ec2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ec6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000eca:	4b3b      	ldr	r3, [pc, #236]	@ (8000fb8 <HAL_I2C_MspInit+0x1a0>)
 8000ecc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream2;
 8000ed8:	4b39      	ldr	r3, [pc, #228]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000eda:	4a3a      	ldr	r2, [pc, #232]	@ (8000fc4 <HAL_I2C_MspInit+0x1ac>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000ede:	4b38      	ldr	r3, [pc, #224]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000ee0:	2221      	movs	r2, #33	@ 0x21
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ee4:	4b36      	ldr	r3, [pc, #216]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b35      	ldr	r3, [pc, #212]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b33      	ldr	r3, [pc, #204]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef8:	4b31      	ldr	r3, [pc, #196]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f04:	4b2e      	ldr	r3, [pc, #184]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000f16:	482a      	ldr	r0, [pc, #168]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f18:	f000 ff2a 	bl	8001d70 <HAL_DMA_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8000f22:	f000 f9ab 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a25      	ldr	r2, [pc, #148]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f2a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f2c:	4a24      	ldr	r2, [pc, #144]	@ (8000fc0 <HAL_I2C_MspInit+0x1a8>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream3;
 8000f32:	4b25      	ldr	r3, [pc, #148]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f34:	4a25      	ldr	r2, [pc, #148]	@ (8000fcc <HAL_I2C_MspInit+0x1b4>)
 8000f36:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000f38:	4b23      	ldr	r3, [pc, #140]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f3a:	2222      	movs	r2, #34	@ 0x22
 8000f3c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f3e:	4b22      	ldr	r3, [pc, #136]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f40:	2240      	movs	r2, #64	@ 0x40
 8000f42:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f44:	4b20      	ldr	r3, [pc, #128]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f4c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f50:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f52:	4b1d      	ldr	r3, [pc, #116]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f58:	4b1b      	ldr	r3, [pc, #108]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f64:	4b18      	ldr	r3, [pc, #96]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f6a:	4b17      	ldr	r3, [pc, #92]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000f70:	4815      	ldr	r0, [pc, #84]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f72:	f000 fefd 	bl	8001d70 <HAL_DMA_Init>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <HAL_I2C_MspInit+0x168>
    {
      Error_Handler();
 8000f7c:	f000 f97e 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4a11      	ldr	r2, [pc, #68]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f84:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f86:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <HAL_I2C_MspInit+0x1b0>)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	201f      	movs	r0, #31
 8000f92:	f000 fe40 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000f96:	201f      	movs	r0, #31
 8000f98:	f000 fe57 	bl	8001c4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2020      	movs	r0, #32
 8000fa2:	f000 fe38 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fa6:	2020      	movs	r0, #32
 8000fa8:	f000 fe4f 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	37e8      	adds	r7, #232	@ 0xe8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	58020400 	.word	0x58020400
 8000fc0:	24000254 	.word	0x24000254
 8000fc4:	40020040 	.word	0x40020040
 8000fc8:	240002cc 	.word	0x240002cc
 8000fcc:	40020058 	.word	0x40020058

08000fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b092      	sub	sp, #72	@ 0x48
 8000fd4:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000fd6:	f000 f925 	bl	8001224 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fda:	f000 fc7f 	bl	80018dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fde:	f000 f871 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe2:	f7ff fe65 	bl	8000cb0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fe6:	f7ff fe2b 	bl	8000c40 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000fea:	f000 fb2b 	bl	8001644 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000fee:	f7ff fed3 	bl	8000d98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(100);
 8000ff2:	2064      	movs	r0, #100	@ 0x64
 8000ff4:	f000 fd04 	bl	8001a00 <HAL_Delay>
  DHT20_Init();
 8000ff8:	f7ff fe08 	bl	8000c0c <DHT20_Init>
  float temp = 0, humi = 0;
 8000ffc:	f04f 0300 	mov.w	r3, #0
 8001000:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001002:	f04f 0300 	mov.w	r3, #0
 8001006:	63bb      	str	r3, [r7, #56]	@ 0x38
  char message[50] = { 0 };
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	f107 0308 	add.w	r3, r7, #8
 8001010:	222e      	movs	r2, #46	@ 0x2e
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f00b fa4c 	bl	800c4b2 <memset>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(dht20State == 0)
 800101a:	4b27      	ldr	r3, [pc, #156]	@ (80010b8 <main+0xe8>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d105      	bne.n	800102e <main+0x5e>
	  {
		  DHT20_Measure();
 8001022:	f7ff fd81 	bl	8000b28 <DHT20_Measure>
		  dht20State = 1;
 8001026:	4b24      	ldr	r3, [pc, #144]	@ (80010b8 <main+0xe8>)
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e7f5      	b.n	800101a <main+0x4a>
	  }
	  else if(dht20State == 2)
 800102e:	4b22      	ldr	r3, [pc, #136]	@ (80010b8 <main+0xe8>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	d110      	bne.n	8001058 <main+0x88>
	  {
		HAL_Delay(80);
 8001036:	2050      	movs	r0, #80	@ 0x50
 8001038:	f000 fce2 	bl	8001a00 <HAL_Delay>
		while((STATUS_Read() & 0x80) == 0x80)
 800103c:	bf00      	nop
 800103e:	f7ff fd5d 	bl	8000afc <STATUS_Read>
 8001042:	4603      	mov	r3, r0
 8001044:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001048:	2b80      	cmp	r3, #128	@ 0x80
 800104a:	d0f8      	beq.n	800103e <main+0x6e>
		{

		}
		DHT20_Get();
 800104c:	f7ff fd7a 	bl	8000b44 <DHT20_Get>
		dht20State = 3;
 8001050:	4b19      	ldr	r3, [pc, #100]	@ (80010b8 <main+0xe8>)
 8001052:	2203      	movs	r2, #3
 8001054:	701a      	strb	r2, [r3, #0]
 8001056:	e7e0      	b.n	800101a <main+0x4a>
	  }
	  else if(dht20State == 4)
 8001058:	4b17      	ldr	r3, [pc, #92]	@ (80010b8 <main+0xe8>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b04      	cmp	r3, #4
 800105e:	d1dc      	bne.n	800101a <main+0x4a>
	  {
		  DHT20_Analysis(&temp, &humi);
 8001060:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8001064:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001068:	4611      	mov	r1, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd78 	bl	8000b60 <DHT20_Analysis>
		  sprintf(message, "温度: %.1f°C, 湿度: %.1f%%\r\n", temp, humi);
 8001070:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001074:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8001078:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800107c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001080:	1d38      	adds	r0, r7, #4
 8001082:	ed8d 7b00 	vstr	d7, [sp]
 8001086:	ec53 2b16 	vmov	r2, r3, d6
 800108a:	490c      	ldr	r1, [pc, #48]	@ (80010bc <main+0xec>)
 800108c:	f00b f9ae 	bl	800c3ec <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	4618      	mov	r0, r3
 8001094:	f7ff f974 	bl	8000380 <strlen>
 8001098:	4603      	mov	r3, r0
 800109a:	b29a      	uxth	r2, r3
 800109c:	1d39      	adds	r1, r7, #4
 800109e:	f04f 33ff 	mov.w	r3, #4294967295
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <main+0xf0>)
 80010a4:	f008 fd4c 	bl	8009b40 <HAL_UART_Transmit>
		  HAL_Delay(1000);
 80010a8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010ac:	f000 fca8 	bl	8001a00 <HAL_Delay>
		  dht20State = 0;
 80010b0:	4b01      	ldr	r3, [pc, #4]	@ (80010b8 <main+0xe8>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	701a      	strb	r2, [r3, #0]
	  if(dht20State == 0)
 80010b6:	e7b0      	b.n	800101a <main+0x4a>
 80010b8:	24000344 	.word	0x24000344
 80010bc:	0800fb08 	.word	0x0800fb08
 80010c0:	2400034c 	.word	0x2400034c

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b09e      	sub	sp, #120	@ 0x78
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010ce:	224c      	movs	r2, #76	@ 0x4c
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f00b f9ed 	bl	800c4b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2220      	movs	r2, #32
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f00b f9e6 	bl	800c4b2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010e6:	2002      	movs	r0, #2
 80010e8:	f005 fe8e 	bl	8006e08 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ec:	2300      	movs	r3, #0
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	4b49      	ldr	r3, [pc, #292]	@ (8001218 <SystemClock_Config+0x154>)
 80010f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010f4:	4a48      	ldr	r2, [pc, #288]	@ (8001218 <SystemClock_Config+0x154>)
 80010f6:	f023 0301 	bic.w	r3, r3, #1
 80010fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80010fc:	4b46      	ldr	r3, [pc, #280]	@ (8001218 <SystemClock_Config+0x154>)
 80010fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001100:	f003 0301 	and.w	r3, r3, #1
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b45      	ldr	r3, [pc, #276]	@ (800121c <SystemClock_Config+0x158>)
 8001108:	699b      	ldr	r3, [r3, #24]
 800110a:	4a44      	ldr	r2, [pc, #272]	@ (800121c <SystemClock_Config+0x158>)
 800110c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001110:	6193      	str	r3, [r2, #24]
 8001112:	4b42      	ldr	r3, [pc, #264]	@ (800121c <SystemClock_Config+0x158>)
 8001114:	699b      	ldr	r3, [r3, #24]
 8001116:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800111e:	bf00      	nop
 8001120:	4b3e      	ldr	r3, [pc, #248]	@ (800121c <SystemClock_Config+0x158>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001128:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800112c:	d1f8      	bne.n	8001120 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	4b3c      	ldr	r3, [pc, #240]	@ (8001220 <SystemClock_Config+0x15c>)
 8001130:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001134:	4a3a      	ldr	r2, [pc, #232]	@ (8001220 <SystemClock_Config+0x15c>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <SystemClock_Config+0x15c>)
 8001140:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	607b      	str	r3, [r7, #4]
 800114a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800114c:	2300      	movs	r3, #0
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	4b32      	ldr	r3, [pc, #200]	@ (800121c <SystemClock_Config+0x158>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	4a31      	ldr	r2, [pc, #196]	@ (800121c <SystemClock_Config+0x158>)
 8001156:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800115a:	6193      	str	r3, [r2, #24]
 800115c:	4b2f      	ldr	r3, [pc, #188]	@ (800121c <SystemClock_Config+0x158>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001164:	603b      	str	r3, [r7, #0]
 8001166:	4b2c      	ldr	r3, [pc, #176]	@ (8001218 <SystemClock_Config+0x154>)
 8001168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800116a:	4a2b      	ldr	r2, [pc, #172]	@ (8001218 <SystemClock_Config+0x154>)
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001172:	4b29      	ldr	r3, [pc, #164]	@ (8001218 <SystemClock_Config+0x154>)
 8001174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800117e:	bf00      	nop
 8001180:	4b26      	ldr	r3, [pc, #152]	@ (800121c <SystemClock_Config+0x158>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001188:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800118c:	d1f8      	bne.n	8001180 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800118e:	2302      	movs	r3, #2
 8001190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001192:	2301      	movs	r3, #1
 8001194:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001196:	2340      	movs	r3, #64	@ 0x40
 8001198:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119a:	2302      	movs	r3, #2
 800119c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119e:	2300      	movs	r3, #0
 80011a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80011a6:	233c      	movs	r3, #60	@ 0x3c
 80011a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011ae:	2302      	movs	r3, #2
 80011b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011b6:	230c      	movs	r3, #12
 80011b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011c6:	4618      	mov	r0, r3
 80011c8:	f005 fe58 	bl	8006e7c <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x112>
  {
    Error_Handler();
 80011d2:	f000 f853 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	233f      	movs	r3, #63	@ 0x3f
 80011d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2303      	movs	r3, #3
 80011dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80011e2:	2308      	movs	r3, #8
 80011e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e6:	2340      	movs	r3, #64	@ 0x40
 80011e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011ea:	2340      	movs	r3, #64	@ 0x40
 80011ec:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011f4:	2340      	movs	r3, #64	@ 0x40
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	2104      	movs	r1, #4
 80011fe:	4618      	mov	r0, r3
 8001200:	f006 fa96 	bl	8007730 <HAL_RCC_ClockConfig>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800120a:	f000 f837 	bl	800127c <Error_Handler>
  }
}
 800120e:	bf00      	nop
 8001210:	3778      	adds	r7, #120	@ 0x78
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	58000400 	.word	0x58000400
 800121c:	58024800 	.word	0x58024800
 8001220:	58024400 	.word	0x58024400

08001224 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001236:	f000 fd23 	bl	8001c80 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800123a:	2301      	movs	r3, #1
 800123c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800123e:	2300      	movs	r3, #0
 8001240:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001246:	231f      	movs	r3, #31
 8001248:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800124a:	2387      	movs	r3, #135	@ 0x87
 800124c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800124e:	2300      	movs	r3, #0
 8001250:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8001252:	2300      	movs	r3, #0
 8001254:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001256:	2301      	movs	r3, #1
 8001258:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800125a:	2301      	movs	r3, #1
 800125c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800125e:	2300      	movs	r3, #0
 8001260:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001266:	463b      	mov	r3, r7
 8001268:	4618      	mov	r0, r3
 800126a:	f000 fd41 	bl	8001cf0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800126e:	2004      	movs	r0, #4
 8001270:	f000 fd1e 	bl	8001cb0 <HAL_MPU_Enable>

}
 8001274:	bf00      	nop
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <Error_Handler+0x8>

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_MspInit+0x30>)
 8001290:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <HAL_MspInit+0x30>)
 8001296:	f043 0302 	orr.w	r3, r3, #2
 800129a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800129e:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <HAL_MspInit+0x30>)
 80012a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ac:	bf00      	nop
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	58024400 	.word	0x58024400

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012c0:	bf00      	nop
 80012c2:	e7fd      	b.n	80012c0 <NMI_Handler+0x4>

080012c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c8:	bf00      	nop
 80012ca:	e7fd      	b.n	80012c8 <HardFault_Handler+0x4>

080012cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <MemManage_Handler+0x4>

080012d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <BusFault_Handler+0x4>

080012dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <UsageFault_Handler+0x4>

080012e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001312:	f000 fb55 	bl	80019c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001320:	4802      	ldr	r0, [pc, #8]	@ (800132c <DMA1_Stream0_IRQHandler+0x10>)
 8001322:	f001 fde5 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	240003e0 	.word	0x240003e0

08001330 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001334:	4802      	ldr	r0, [pc, #8]	@ (8001340 <DMA1_Stream1_IRQHandler+0x10>)
 8001336:	f001 fddb 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000458 	.word	0x24000458

08001344 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001348:	4802      	ldr	r0, [pc, #8]	@ (8001354 <DMA1_Stream2_IRQHandler+0x10>)
 800134a:	f001 fdd1 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	24000254 	.word	0x24000254

08001358 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800135c:	4802      	ldr	r0, [pc, #8]	@ (8001368 <DMA1_Stream3_IRQHandler+0x10>)
 800135e:	f001 fdc7 	bl	8002ef0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	240002cc 	.word	0x240002cc

0800136c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001370:	4802      	ldr	r0, [pc, #8]	@ (800137c <I2C1_EV_IRQHandler+0x10>)
 8001372:	f003 fc93 	bl	8004c9c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	24000200 	.word	0x24000200

08001380 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001384:	4802      	ldr	r0, [pc, #8]	@ (8001390 <I2C1_ER_IRQHandler+0x10>)
 8001386:	f003 fca3 	bl	8004cd0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	24000200 	.word	0x24000200

08001394 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <USART1_IRQHandler+0x10>)
 800139a:	f008 fc5f 	bl	8009c5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2400034c 	.word	0x2400034c

080013a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_kill>:

int _kill(int pid, int sig)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80013c2:	f00b f8c9 	bl	800c558 <__errno>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2216      	movs	r2, #22
 80013ca:	601a      	str	r2, [r3, #0]
  return -1;
 80013cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_exit>:

void _exit (int status)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80013e0:	f04f 31ff 	mov.w	r1, #4294967295
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ffe7 	bl	80013b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013ea:	bf00      	nop
 80013ec:	e7fd      	b.n	80013ea <_exit+0x12>

080013ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	60f8      	str	r0, [r7, #12]
 80013f6:	60b9      	str	r1, [r7, #8]
 80013f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	e00a      	b.n	8001416 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001400:	f3af 8000 	nop.w
 8001404:	4601      	mov	r1, r0
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	1c5a      	adds	r2, r3, #1
 800140a:	60ba      	str	r2, [r7, #8]
 800140c:	b2ca      	uxtb	r2, r1
 800140e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	3301      	adds	r3, #1
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	429a      	cmp	r2, r3
 800141c:	dbf0      	blt.n	8001400 <_read+0x12>
  }

  return len;
 800141e:	687b      	ldr	r3, [r7, #4]
}
 8001420:	4618      	mov	r0, r3
 8001422:	3718      	adds	r7, #24
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	60b9      	str	r1, [r7, #8]
 8001432:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e009      	b.n	800144e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	1c5a      	adds	r2, r3, #1
 800143e:	60ba      	str	r2, [r7, #8]
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	697a      	ldr	r2, [r7, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	429a      	cmp	r2, r3
 8001454:	dbf1      	blt.n	800143a <_write+0x12>
  }
  return len;
 8001456:	687b      	ldr	r3, [r7, #4]
}
 8001458:	4618      	mov	r0, r3
 800145a:	3718      	adds	r7, #24
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <_close>:

int _close(int file)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146c:	4618      	mov	r0, r3
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001488:	605a      	str	r2, [r3, #4]
  return 0;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <_isatty>:

int _isatty(int file)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014a0:	2301      	movs	r3, #1
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr

080014ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b085      	sub	sp, #20
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	60f8      	str	r0, [r7, #12]
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80014ba:	2300      	movs	r3, #0
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014d0:	4a14      	ldr	r2, [pc, #80]	@ (8001524 <_sbrk+0x5c>)
 80014d2:	4b15      	ldr	r3, [pc, #84]	@ (8001528 <_sbrk+0x60>)
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014dc:	4b13      	ldr	r3, [pc, #76]	@ (800152c <_sbrk+0x64>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d102      	bne.n	80014ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <_sbrk+0x64>)
 80014e6:	4a12      	ldr	r2, [pc, #72]	@ (8001530 <_sbrk+0x68>)
 80014e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ea:	4b10      	ldr	r3, [pc, #64]	@ (800152c <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d207      	bcs.n	8001508 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014f8:	f00b f82e 	bl	800c558 <__errno>
 80014fc:	4603      	mov	r3, r0
 80014fe:	220c      	movs	r2, #12
 8001500:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001502:	f04f 33ff 	mov.w	r3, #4294967295
 8001506:	e009      	b.n	800151c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001508:	4b08      	ldr	r3, [pc, #32]	@ (800152c <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800150e:	4b07      	ldr	r3, [pc, #28]	@ (800152c <_sbrk+0x64>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4413      	add	r3, r2
 8001516:	4a05      	ldr	r2, [pc, #20]	@ (800152c <_sbrk+0x64>)
 8001518:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800151a:	68fb      	ldr	r3, [r7, #12]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	24080000 	.word	0x24080000
 8001528:	00000400 	.word	0x00000400
 800152c:	24000348 	.word	0x24000348
 8001530:	24000620 	.word	0x24000620

08001534 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001538:	4b37      	ldr	r3, [pc, #220]	@ (8001618 <SystemInit+0xe4>)
 800153a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800153e:	4a36      	ldr	r2, [pc, #216]	@ (8001618 <SystemInit+0xe4>)
 8001540:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001544:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001548:	4b34      	ldr	r3, [pc, #208]	@ (800161c <SystemInit+0xe8>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 030f 	and.w	r3, r3, #15
 8001550:	2b06      	cmp	r3, #6
 8001552:	d807      	bhi.n	8001564 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001554:	4b31      	ldr	r3, [pc, #196]	@ (800161c <SystemInit+0xe8>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 030f 	bic.w	r3, r3, #15
 800155c:	4a2f      	ldr	r2, [pc, #188]	@ (800161c <SystemInit+0xe8>)
 800155e:	f043 0307 	orr.w	r3, r3, #7
 8001562:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001564:	4b2e      	ldr	r3, [pc, #184]	@ (8001620 <SystemInit+0xec>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a2d      	ldr	r2, [pc, #180]	@ (8001620 <SystemInit+0xec>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001570:	4b2b      	ldr	r3, [pc, #172]	@ (8001620 <SystemInit+0xec>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001576:	4b2a      	ldr	r3, [pc, #168]	@ (8001620 <SystemInit+0xec>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	4929      	ldr	r1, [pc, #164]	@ (8001620 <SystemInit+0xec>)
 800157c:	4b29      	ldr	r3, [pc, #164]	@ (8001624 <SystemInit+0xf0>)
 800157e:	4013      	ands	r3, r2
 8001580:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001582:	4b26      	ldr	r3, [pc, #152]	@ (800161c <SystemInit+0xe8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d007      	beq.n	800159e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800158e:	4b23      	ldr	r3, [pc, #140]	@ (800161c <SystemInit+0xe8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f023 030f 	bic.w	r3, r3, #15
 8001596:	4a21      	ldr	r2, [pc, #132]	@ (800161c <SystemInit+0xe8>)
 8001598:	f043 0307 	orr.w	r3, r3, #7
 800159c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800159e:	4b20      	ldr	r3, [pc, #128]	@ (8001620 <SystemInit+0xec>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80015a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001620 <SystemInit+0xec>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80015aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001620 <SystemInit+0xec>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80015b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001620 <SystemInit+0xec>)
 80015b2:	4a1d      	ldr	r2, [pc, #116]	@ (8001628 <SystemInit+0xf4>)
 80015b4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80015b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <SystemInit+0xec>)
 80015b8:	4a1c      	ldr	r2, [pc, #112]	@ (800162c <SystemInit+0xf8>)
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80015bc:	4b18      	ldr	r3, [pc, #96]	@ (8001620 <SystemInit+0xec>)
 80015be:	4a1c      	ldr	r2, [pc, #112]	@ (8001630 <SystemInit+0xfc>)
 80015c0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80015c2:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <SystemInit+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80015c8:	4b15      	ldr	r3, [pc, #84]	@ (8001620 <SystemInit+0xec>)
 80015ca:	4a19      	ldr	r2, [pc, #100]	@ (8001630 <SystemInit+0xfc>)
 80015cc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80015ce:	4b14      	ldr	r3, [pc, #80]	@ (8001620 <SystemInit+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <SystemInit+0xec>)
 80015d6:	4a16      	ldr	r2, [pc, #88]	@ (8001630 <SystemInit+0xfc>)
 80015d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80015da:	4b11      	ldr	r3, [pc, #68]	@ (8001620 <SystemInit+0xec>)
 80015dc:	2200      	movs	r2, #0
 80015de:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <SystemInit+0xec>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001620 <SystemInit+0xec>)
 80015e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <SystemInit+0xec>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80015f2:	4b10      	ldr	r3, [pc, #64]	@ (8001634 <SystemInit+0x100>)
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <SystemInit+0x104>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80015fe:	d202      	bcs.n	8001606 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001600:	4b0e      	ldr	r3, [pc, #56]	@ (800163c <SystemInit+0x108>)
 8001602:	2201      	movs	r2, #1
 8001604:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001606:	4b0e      	ldr	r3, [pc, #56]	@ (8001640 <SystemInit+0x10c>)
 8001608:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800160c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800160e:	bf00      	nop
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	e000ed00 	.word	0xe000ed00
 800161c:	52002000 	.word	0x52002000
 8001620:	58024400 	.word	0x58024400
 8001624:	eaf6ed7f 	.word	0xeaf6ed7f
 8001628:	02020200 	.word	0x02020200
 800162c:	01ff0000 	.word	0x01ff0000
 8001630:	01010280 	.word	0x01010280
 8001634:	5c001000 	.word	0x5c001000
 8001638:	ffff0000 	.word	0xffff0000
 800163c:	51008108 	.word	0x51008108
 8001640:	52004000 	.word	0x52004000

08001644 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001648:	4b22      	ldr	r3, [pc, #136]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 800164a:	4a23      	ldr	r2, [pc, #140]	@ (80016d8 <MX_USART1_UART_Init+0x94>)
 800164c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800164e:	4b21      	ldr	r3, [pc, #132]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001650:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001656:	4b1f      	ldr	r3, [pc, #124]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800165c:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001662:	4b1c      	ldr	r3, [pc, #112]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001668:	4b1a      	ldr	r3, [pc, #104]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 800166a:	220c      	movs	r2, #12
 800166c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001670:	2200      	movs	r2, #0
 8001672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001674:	4b17      	ldr	r3, [pc, #92]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001676:	2200      	movs	r2, #0
 8001678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 800167c:	2200      	movs	r2, #0
 800167e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001680:	4b14      	ldr	r3, [pc, #80]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001682:	2200      	movs	r2, #0
 8001684:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001686:	4b13      	ldr	r3, [pc, #76]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 8001688:	2200      	movs	r2, #0
 800168a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800168c:	4811      	ldr	r0, [pc, #68]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 800168e:	f008 fa07 	bl	8009aa0 <HAL_UART_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001698:	f7ff fdf0 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800169c:	2100      	movs	r1, #0
 800169e:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 80016a0:	f009 fed6 	bl	800b450 <HAL_UARTEx_SetTxFifoThreshold>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80016aa:	f7ff fde7 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016ae:	2100      	movs	r1, #0
 80016b0:	4808      	ldr	r0, [pc, #32]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 80016b2:	f009 ff0b 	bl	800b4cc <HAL_UARTEx_SetRxFifoThreshold>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80016bc:	f7ff fdde 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016c0:	4804      	ldr	r0, [pc, #16]	@ (80016d4 <MX_USART1_UART_Init+0x90>)
 80016c2:	f009 fe8c 	bl	800b3de <HAL_UARTEx_DisableFifoMode>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016cc:	f7ff fdd6 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016d0:	bf00      	nop
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	2400034c 	.word	0x2400034c
 80016d8:	40011000 	.word	0x40011000

080016dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b0ba      	sub	sp, #232	@ 0xe8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f4:	f107 0310 	add.w	r3, r7, #16
 80016f8:	22c0      	movs	r2, #192	@ 0xc0
 80016fa:	2100      	movs	r1, #0
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00a fed8 	bl	800c4b2 <memset>
  if(uartHandle->Instance==USART1)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a59      	ldr	r2, [pc, #356]	@ (800186c <HAL_UART_MspInit+0x190>)
 8001708:	4293      	cmp	r3, r2
 800170a:	f040 80aa 	bne.w	8001862 <HAL_UART_MspInit+0x186>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800170e:	f04f 0201 	mov.w	r2, #1
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800171a:	2300      	movs	r3, #0
 800171c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f006 fb8f 	bl	8007e48 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8001730:	f7ff fda4 	bl	800127c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001734:	4b4e      	ldr	r3, [pc, #312]	@ (8001870 <HAL_UART_MspInit+0x194>)
 8001736:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800173a:	4a4d      	ldr	r2, [pc, #308]	@ (8001870 <HAL_UART_MspInit+0x194>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001744:	4b4a      	ldr	r3, [pc, #296]	@ (8001870 <HAL_UART_MspInit+0x194>)
 8001746:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	4b47      	ldr	r3, [pc, #284]	@ (8001870 <HAL_UART_MspInit+0x194>)
 8001754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001758:	4a45      	ldr	r2, [pc, #276]	@ (8001870 <HAL_UART_MspInit+0x194>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001762:	4b43      	ldr	r3, [pc, #268]	@ (8001870 <HAL_UART_MspInit+0x194>)
 8001764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001768:	f003 0301 	and.w	r3, r3, #1
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8001770:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001774:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177e:	2300      	movs	r3, #0
 8001780:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178a:	2307      	movs	r3, #7
 800178c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001790:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001794:	4619      	mov	r1, r3
 8001796:	4837      	ldr	r0, [pc, #220]	@ (8001874 <HAL_UART_MspInit+0x198>)
 8001798:	f002 fd1e 	bl	80041d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 800179c:	4b36      	ldr	r3, [pc, #216]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 800179e:	4a37      	ldr	r2, [pc, #220]	@ (800187c <HAL_UART_MspInit+0x1a0>)
 80017a0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 80017a2:	4b35      	ldr	r3, [pc, #212]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017a4:	2229      	movs	r2, #41	@ 0x29
 80017a6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017a8:	4b33      	ldr	r3, [pc, #204]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017ae:	4b32      	ldr	r3, [pc, #200]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017b4:	4b30      	ldr	r3, [pc, #192]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017ba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017c2:	4b2d      	ldr	r3, [pc, #180]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017d4:	4b28      	ldr	r3, [pc, #160]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017da:	4827      	ldr	r0, [pc, #156]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017dc:	f000 fac8 	bl	8001d70 <HAL_DMA_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 80017e6:	f7ff fd49 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a22      	ldr	r2, [pc, #136]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_UART_MspInit+0x19c>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream1;
 80017f8:	4b21      	ldr	r3, [pc, #132]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 80017fa:	4a22      	ldr	r2, [pc, #136]	@ (8001884 <HAL_UART_MspInit+0x1a8>)
 80017fc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80017fe:	4b20      	ldr	r3, [pc, #128]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001800:	222a      	movs	r2, #42	@ 0x2a
 8001802:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001804:	4b1e      	ldr	r3, [pc, #120]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001806:	2240      	movs	r2, #64	@ 0x40
 8001808:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800180a:	4b1d      	ldr	r3, [pc, #116]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 800180c:	2200      	movs	r2, #0
 800180e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001810:	4b1b      	ldr	r3, [pc, #108]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001816:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 800181a:	2200      	movs	r2, #0
 800181c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800181e:	4b18      	ldr	r3, [pc, #96]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001824:	4b16      	ldr	r3, [pc, #88]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800182a:	4b15      	ldr	r3, [pc, #84]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001830:	4b13      	ldr	r3, [pc, #76]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001836:	4812      	ldr	r0, [pc, #72]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 8001838:	f000 fa9a 	bl	8001d70 <HAL_DMA_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8001842:	f7ff fd1b 	bl	800127c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a0d      	ldr	r2, [pc, #52]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 800184a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800184c:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <HAL_UART_MspInit+0x1a4>)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001852:	2200      	movs	r2, #0
 8001854:	2100      	movs	r1, #0
 8001856:	2025      	movs	r0, #37	@ 0x25
 8001858:	f000 f9dd 	bl	8001c16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800185c:	2025      	movs	r0, #37	@ 0x25
 800185e:	f000 f9f4 	bl	8001c4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001862:	bf00      	nop
 8001864:	37e8      	adds	r7, #232	@ 0xe8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40011000 	.word	0x40011000
 8001870:	58024400 	.word	0x58024400
 8001874:	58020000 	.word	0x58020000
 8001878:	240003e0 	.word	0x240003e0
 800187c:	40020010 	.word	0x40020010
 8001880:	24000458 	.word	0x24000458
 8001884:	40020028 	.word	0x40020028

08001888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800188c:	f7ff fe52 	bl	8001534 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	@ (80018c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	@ (80018cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	@ (80018d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	@ (80018d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f00a fe55 	bl	800c564 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ba:	f7ff fb89 	bl	8000fd0 <main>
  bx  lr
 80018be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80018c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80018c8:	240001dc 	.word	0x240001dc
  ldr r2, =_sidata
 80018cc:	0800ffa8 	.word	0x0800ffa8
  ldr r2, =_sbss
 80018d0:	240001dc 	.word	0x240001dc
  ldr r4, =_ebss
 80018d4:	24000620 	.word	0x24000620

080018d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC3_IRQHandler>
	...

080018dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e2:	2003      	movs	r0, #3
 80018e4:	f000 f98c 	bl	8001c00 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018e8:	f006 f8d8 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 80018ec:	4602      	mov	r2, r0
 80018ee:	4b15      	ldr	r3, [pc, #84]	@ (8001944 <HAL_Init+0x68>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	0a1b      	lsrs	r3, r3, #8
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	4913      	ldr	r1, [pc, #76]	@ (8001948 <HAL_Init+0x6c>)
 80018fa:	5ccb      	ldrb	r3, [r1, r3]
 80018fc:	f003 031f 	and.w	r3, r3, #31
 8001900:	fa22 f303 	lsr.w	r3, r2, r3
 8001904:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001906:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <HAL_Init+0x68>)
 8001908:	699b      	ldr	r3, [r3, #24]
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	4a0e      	ldr	r2, [pc, #56]	@ (8001948 <HAL_Init+0x6c>)
 8001910:	5cd3      	ldrb	r3, [r2, r3]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	fa22 f303 	lsr.w	r3, r2, r3
 800191c:	4a0b      	ldr	r2, [pc, #44]	@ (800194c <HAL_Init+0x70>)
 800191e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001920:	4a0b      	ldr	r2, [pc, #44]	@ (8001950 <HAL_Init+0x74>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001926:	200f      	movs	r0, #15
 8001928:	f000 f814 	bl	8001954 <HAL_InitTick>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e002      	b.n	800193c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001936:	f7ff fca7 	bl	8001288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	58024400 	.word	0x58024400
 8001948:	0800fb2c 	.word	0x0800fb2c
 800194c:	24000008 	.word	0x24000008
 8001950:	24000004 	.word	0x24000004

08001954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800195c:	4b15      	ldr	r3, [pc, #84]	@ (80019b4 <HAL_InitTick+0x60>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e021      	b.n	80019ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001968:	4b13      	ldr	r3, [pc, #76]	@ (80019b8 <HAL_InitTick+0x64>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <HAL_InitTick+0x60>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	4619      	mov	r1, r3
 8001972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001976:	fbb3 f3f1 	udiv	r3, r3, r1
 800197a:	fbb2 f3f3 	udiv	r3, r2, r3
 800197e:	4618      	mov	r0, r3
 8001980:	f000 f971 	bl	8001c66 <HAL_SYSTICK_Config>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e00e      	b.n	80019ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2b0f      	cmp	r3, #15
 8001992:	d80a      	bhi.n	80019aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001994:	2200      	movs	r2, #0
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f000 f93b 	bl	8001c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019a0:	4a06      	ldr	r2, [pc, #24]	@ (80019bc <HAL_InitTick+0x68>)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019a6:	2300      	movs	r3, #0
 80019a8:	e000      	b.n	80019ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3708      	adds	r7, #8
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	24000010 	.word	0x24000010
 80019b8:	24000004 	.word	0x24000004
 80019bc:	2400000c 	.word	0x2400000c

080019c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019c4:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <HAL_IncTick+0x20>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	461a      	mov	r2, r3
 80019ca:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <HAL_IncTick+0x24>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4413      	add	r3, r2
 80019d0:	4a04      	ldr	r2, [pc, #16]	@ (80019e4 <HAL_IncTick+0x24>)
 80019d2:	6013      	str	r3, [r2, #0]
}
 80019d4:	bf00      	nop
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	24000010 	.word	0x24000010
 80019e4:	240004d0 	.word	0x240004d0

080019e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return uwTick;
 80019ec:	4b03      	ldr	r3, [pc, #12]	@ (80019fc <HAL_GetTick+0x14>)
 80019ee:	681b      	ldr	r3, [r3, #0]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	240004d0 	.word	0x240004d0

08001a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a08:	f7ff ffee 	bl	80019e8 <HAL_GetTick>
 8001a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d005      	beq.n	8001a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a44 <HAL_Delay+0x44>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a26:	bf00      	nop
 8001a28:	f7ff ffde 	bl	80019e8 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d8f7      	bhi.n	8001a28 <HAL_Delay+0x28>
  {
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	24000010 	.word	0x24000010

08001a48 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_GetREVID+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0c1b      	lsrs	r3, r3, #16
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	5c001000 	.word	0x5c001000

08001a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a70:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a76:	68ba      	ldr	r2, [r7, #8]
 8001a78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a8e:	4a04      	ldr	r2, [pc, #16]	@ (8001aa0 <__NVIC_SetPriorityGrouping+0x40>)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60d3      	str	r3, [r2, #12]
}
 8001a94:	bf00      	nop
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	e000ed00 	.word	0xe000ed00
 8001aa4:	05fa0000 	.word	0x05fa0000

08001aa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aac:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <__NVIC_GetPriorityGrouping+0x18>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	0a1b      	lsrs	r3, r3, #8
 8001ab2:	f003 0307 	and.w	r3, r3, #7
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ace:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	db0b      	blt.n	8001aee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	f003 021f 	and.w	r2, r3, #31
 8001adc:	4907      	ldr	r1, [pc, #28]	@ (8001afc <__NVIC_EnableIRQ+0x38>)
 8001ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ae2:	095b      	lsrs	r3, r3, #5
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000e100 	.word	0xe000e100

08001b00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b083      	sub	sp, #12
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	6039      	str	r1, [r7, #0]
 8001b0a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001b0c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	db0a      	blt.n	8001b2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	490c      	ldr	r1, [pc, #48]	@ (8001b4c <__NVIC_SetPriority+0x4c>)
 8001b1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1e:	0112      	lsls	r2, r2, #4
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	440b      	add	r3, r1
 8001b24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b28:	e00a      	b.n	8001b40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4908      	ldr	r1, [pc, #32]	@ (8001b50 <__NVIC_SetPriority+0x50>)
 8001b30:	88fb      	ldrh	r3, [r7, #6]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	3b04      	subs	r3, #4
 8001b38:	0112      	lsls	r2, r2, #4
 8001b3a:	b2d2      	uxtb	r2, r2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	761a      	strb	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000e100 	.word	0xe000e100
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b089      	sub	sp, #36	@ 0x24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f1c3 0307 	rsb	r3, r3, #7
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	bf28      	it	cs
 8001b72:	2304      	movcs	r3, #4
 8001b74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	3304      	adds	r3, #4
 8001b7a:	2b06      	cmp	r3, #6
 8001b7c:	d902      	bls.n	8001b84 <NVIC_EncodePriority+0x30>
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	3b03      	subs	r3, #3
 8001b82:	e000      	b.n	8001b86 <NVIC_EncodePriority+0x32>
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43da      	mvns	r2, r3
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	401a      	ands	r2, r3
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	4313      	orrs	r3, r2
         );
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3724      	adds	r7, #36	@ 0x24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bcc:	d301      	bcc.n	8001bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00f      	b.n	8001bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001bfc <SysTick_Config+0x40>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bda:	210f      	movs	r1, #15
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f7ff ff8e 	bl	8001b00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001be4:	4b05      	ldr	r3, [pc, #20]	@ (8001bfc <SysTick_Config+0x40>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bea:	4b04      	ldr	r3, [pc, #16]	@ (8001bfc <SysTick_Config+0x40>)
 8001bec:	2207      	movs	r2, #7
 8001bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	e000e010 	.word	0xe000e010

08001c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ff29 	bl	8001a60 <__NVIC_SetPriorityGrouping>
}
 8001c0e:	bf00      	nop
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}

08001c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c16:	b580      	push	{r7, lr}
 8001c18:	b086      	sub	sp, #24
 8001c1a:	af00      	add	r7, sp, #0
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	60b9      	str	r1, [r7, #8]
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c24:	f7ff ff40 	bl	8001aa8 <__NVIC_GetPriorityGrouping>
 8001c28:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	68b9      	ldr	r1, [r7, #8]
 8001c2e:	6978      	ldr	r0, [r7, #20]
 8001c30:	f7ff ff90 	bl	8001b54 <NVIC_EncodePriority>
 8001c34:	4602      	mov	r2, r0
 8001c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c3a:	4611      	mov	r1, r2
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff5f 	bl	8001b00 <__NVIC_SetPriority>
}
 8001c42:	bf00      	nop
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4a:	b580      	push	{r7, lr}
 8001c4c:	b082      	sub	sp, #8
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4603      	mov	r3, r0
 8001c52:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff33 	bl	8001ac4 <__NVIC_EnableIRQ>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff ffa4 	bl	8001bbc <SysTick_Config>
 8001c74:	4603      	mov	r3, r0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001c84:	f3bf 8f5f 	dmb	sy
}
 8001c88:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <HAL_MPU_Disable+0x28>)
 8001c8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8e:	4a06      	ldr	r2, [pc, #24]	@ (8001ca8 <HAL_MPU_Disable+0x28>)
 8001c90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c94:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c96:	4b05      	ldr	r3, [pc, #20]	@ (8001cac <HAL_MPU_Disable+0x2c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
}
 8001c9c:	bf00      	nop
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	e000ed00 	.word	0xe000ed00
 8001cac:	e000ed90 	.word	0xe000ed90

08001cb0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce8 <HAL_MPU_Enable+0x38>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f043 0301 	orr.w	r3, r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_MPU_Enable+0x3c>)
 8001cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <HAL_MPU_Enable+0x3c>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ccc:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001cce:	f3bf 8f4f 	dsb	sy
}
 8001cd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cd4:	f3bf 8f6f 	isb	sy
}
 8001cd8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	e000ed90 	.word	0xe000ed90
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	785a      	ldrb	r2, [r3, #1]
 8001cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_MPU_ConfigRegion+0x7c>)
 8001cfe:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	@ (8001d6c <HAL_MPU_ConfigRegion+0x7c>)
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	4a19      	ldr	r2, [pc, #100]	@ (8001d6c <HAL_MPU_ConfigRegion+0x7c>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001d0c:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <HAL_MPU_ConfigRegion+0x7c>)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	7b1b      	ldrb	r3, [r3, #12]
 8001d18:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	7adb      	ldrb	r3, [r3, #11]
 8001d1e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d20:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	7a9b      	ldrb	r3, [r3, #10]
 8001d26:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001d28:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	7b5b      	ldrb	r3, [r3, #13]
 8001d2e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001d30:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7b9b      	ldrb	r3, [r3, #14]
 8001d36:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001d38:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	7bdb      	ldrb	r3, [r3, #15]
 8001d3e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001d40:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	7a5b      	ldrb	r3, [r3, #9]
 8001d46:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001d48:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7a1b      	ldrb	r3, [r3, #8]
 8001d4e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001d50:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d58:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001d5a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001d5c:	6113      	str	r3, [r2, #16]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	e000ed90 	.word	0xe000ed90

08001d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff fe36 	bl	80019e8 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e316      	b.n	80023b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a66      	ldr	r2, [pc, #408]	@ (8001f28 <HAL_DMA_Init+0x1b8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d04a      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a65      	ldr	r2, [pc, #404]	@ (8001f2c <HAL_DMA_Init+0x1bc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d045      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a63      	ldr	r2, [pc, #396]	@ (8001f30 <HAL_DMA_Init+0x1c0>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d040      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a62      	ldr	r2, [pc, #392]	@ (8001f34 <HAL_DMA_Init+0x1c4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d03b      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a60      	ldr	r2, [pc, #384]	@ (8001f38 <HAL_DMA_Init+0x1c8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d036      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8001f3c <HAL_DMA_Init+0x1cc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d031      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_DMA_Init+0x1d0>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d02c      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f44 <HAL_DMA_Init+0x1d4>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d027      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8001f48 <HAL_DMA_Init+0x1d8>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d022      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a59      	ldr	r2, [pc, #356]	@ (8001f4c <HAL_DMA_Init+0x1dc>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d01d      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a57      	ldr	r2, [pc, #348]	@ (8001f50 <HAL_DMA_Init+0x1e0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d018      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a56      	ldr	r2, [pc, #344]	@ (8001f54 <HAL_DMA_Init+0x1e4>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d013      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a54      	ldr	r2, [pc, #336]	@ (8001f58 <HAL_DMA_Init+0x1e8>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00e      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a53      	ldr	r2, [pc, #332]	@ (8001f5c <HAL_DMA_Init+0x1ec>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d009      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a51      	ldr	r2, [pc, #324]	@ (8001f60 <HAL_DMA_Init+0x1f0>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_DMA_Init+0xb8>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a50      	ldr	r2, [pc, #320]	@ (8001f64 <HAL_DMA_Init+0x1f4>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d101      	bne.n	8001e2c <HAL_DMA_Init+0xbc>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_DMA_Init+0xbe>
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 813b 	beq.w	80020aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2202      	movs	r2, #2
 8001e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	@ (8001f28 <HAL_DMA_Init+0x1b8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d04a      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a36      	ldr	r2, [pc, #216]	@ (8001f2c <HAL_DMA_Init+0x1bc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d045      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a34      	ldr	r2, [pc, #208]	@ (8001f30 <HAL_DMA_Init+0x1c0>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d040      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a33      	ldr	r2, [pc, #204]	@ (8001f34 <HAL_DMA_Init+0x1c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d03b      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_DMA_Init+0x1c8>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d036      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a30      	ldr	r2, [pc, #192]	@ (8001f3c <HAL_DMA_Init+0x1cc>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d031      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <HAL_DMA_Init+0x1d0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d02c      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001f44 <HAL_DMA_Init+0x1d4>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d027      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a2b      	ldr	r2, [pc, #172]	@ (8001f48 <HAL_DMA_Init+0x1d8>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d022      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8001f4c <HAL_DMA_Init+0x1dc>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d01d      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a28      	ldr	r2, [pc, #160]	@ (8001f50 <HAL_DMA_Init+0x1e0>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d018      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <HAL_DMA_Init+0x1e4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d013      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a25      	ldr	r2, [pc, #148]	@ (8001f58 <HAL_DMA_Init+0x1e8>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d00e      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a24      	ldr	r2, [pc, #144]	@ (8001f5c <HAL_DMA_Init+0x1ec>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d009      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a22      	ldr	r2, [pc, #136]	@ (8001f60 <HAL_DMA_Init+0x1f0>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d004      	beq.n	8001ee4 <HAL_DMA_Init+0x174>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	@ (8001f64 <HAL_DMA_Init+0x1f4>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d108      	bne.n	8001ef6 <HAL_DMA_Init+0x186>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f022 0201 	bic.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	e007      	b.n	8001f06 <HAL_DMA_Init+0x196>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0201 	bic.w	r2, r2, #1
 8001f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f06:	e02f      	b.n	8001f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f08:	f7ff fd6e 	bl	80019e8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b05      	cmp	r3, #5
 8001f14:	d928      	bls.n	8001f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2220      	movs	r2, #32
 8001f1a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2203      	movs	r2, #3
 8001f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e246      	b.n	80023b6 <HAL_DMA_Init+0x646>
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	40020040 	.word	0x40020040
 8001f34:	40020058 	.word	0x40020058
 8001f38:	40020070 	.word	0x40020070
 8001f3c:	40020088 	.word	0x40020088
 8001f40:	400200a0 	.word	0x400200a0
 8001f44:	400200b8 	.word	0x400200b8
 8001f48:	40020410 	.word	0x40020410
 8001f4c:	40020428 	.word	0x40020428
 8001f50:	40020440 	.word	0x40020440
 8001f54:	40020458 	.word	0x40020458
 8001f58:	40020470 	.word	0x40020470
 8001f5c:	40020488 	.word	0x40020488
 8001f60:	400204a0 	.word	0x400204a0
 8001f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0301 	and.w	r3, r3, #1
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1c8      	bne.n	8001f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	4b83      	ldr	r3, [pc, #524]	@ (8002190 <HAL_DMA_Init+0x420>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	691b      	ldr	r3, [r3, #16]
 8001f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001fae:	697a      	ldr	r2, [r7, #20]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d107      	bne.n	8001fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001fcc:	4b71      	ldr	r3, [pc, #452]	@ (8002194 <HAL_DMA_Init+0x424>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b71      	ldr	r3, [pc, #452]	@ (8002198 <HAL_DMA_Init+0x428>)
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fd8:	d328      	bcc.n	800202c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b28      	cmp	r3, #40	@ 0x28
 8001fe0:	d903      	bls.n	8001fea <HAL_DMA_Init+0x27a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8001fe8:	d917      	bls.n	800201a <HAL_DMA_Init+0x2aa>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8001ff0:	d903      	bls.n	8001ffa <HAL_DMA_Init+0x28a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	2b42      	cmp	r3, #66	@ 0x42
 8001ff8:	d90f      	bls.n	800201a <HAL_DMA_Init+0x2aa>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b46      	cmp	r3, #70	@ 0x46
 8002000:	d903      	bls.n	800200a <HAL_DMA_Init+0x29a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b48      	cmp	r3, #72	@ 0x48
 8002008:	d907      	bls.n	800201a <HAL_DMA_Init+0x2aa>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002010:	d905      	bls.n	800201e <HAL_DMA_Init+0x2ae>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b52      	cmp	r3, #82	@ 0x52
 8002018:	d801      	bhi.n	800201e <HAL_DMA_Init+0x2ae>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_DMA_Init+0x2b0>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800202a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f023 0307 	bic.w	r3, r3, #7
 8002042:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002048:	697a      	ldr	r2, [r7, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002052:	2b04      	cmp	r3, #4
 8002054:	d117      	bne.n	8002086 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f001 ff2b 	bl	8003ec4 <DMA_CheckFifoParam>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d008      	beq.n	8002086 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2240      	movs	r2, #64	@ 0x40
 8002078:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e197      	b.n	80023b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	697a      	ldr	r2, [r7, #20]
 800208c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f001 fe66 	bl	8003d60 <DMA_CalcBaseAndBitshift>
 8002094:	4603      	mov	r3, r0
 8002096:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	223f      	movs	r2, #63	@ 0x3f
 80020a2:	409a      	lsls	r2, r3
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	609a      	str	r2, [r3, #8]
 80020a8:	e0cd      	b.n	8002246 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a3b      	ldr	r2, [pc, #236]	@ (800219c <HAL_DMA_Init+0x42c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d022      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a39      	ldr	r2, [pc, #228]	@ (80021a0 <HAL_DMA_Init+0x430>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d01d      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a38      	ldr	r2, [pc, #224]	@ (80021a4 <HAL_DMA_Init+0x434>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d018      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a36      	ldr	r2, [pc, #216]	@ (80021a8 <HAL_DMA_Init+0x438>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a35      	ldr	r2, [pc, #212]	@ (80021ac <HAL_DMA_Init+0x43c>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d00e      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a33      	ldr	r2, [pc, #204]	@ (80021b0 <HAL_DMA_Init+0x440>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d009      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a32      	ldr	r2, [pc, #200]	@ (80021b4 <HAL_DMA_Init+0x444>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d004      	beq.n	80020fa <HAL_DMA_Init+0x38a>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a30      	ldr	r2, [pc, #192]	@ (80021b8 <HAL_DMA_Init+0x448>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d101      	bne.n	80020fe <HAL_DMA_Init+0x38e>
 80020fa:	2301      	movs	r3, #1
 80020fc:	e000      	b.n	8002100 <HAL_DMA_Init+0x390>
 80020fe:	2300      	movs	r3, #0
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8097 	beq.w	8002234 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a24      	ldr	r2, [pc, #144]	@ (800219c <HAL_DMA_Init+0x42c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d021      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a22      	ldr	r2, [pc, #136]	@ (80021a0 <HAL_DMA_Init+0x430>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d01c      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <HAL_DMA_Init+0x434>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d017      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a1f      	ldr	r2, [pc, #124]	@ (80021a8 <HAL_DMA_Init+0x438>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d012      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a1e      	ldr	r2, [pc, #120]	@ (80021ac <HAL_DMA_Init+0x43c>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d00d      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a1c      	ldr	r2, [pc, #112]	@ (80021b0 <HAL_DMA_Init+0x440>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d008      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1b      	ldr	r2, [pc, #108]	@ (80021b4 <HAL_DMA_Init+0x444>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d003      	beq.n	8002154 <HAL_DMA_Init+0x3e4>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a19      	ldr	r2, [pc, #100]	@ (80021b8 <HAL_DMA_Init+0x448>)
 8002152:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2202      	movs	r2, #2
 8002158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4b13      	ldr	r3, [pc, #76]	@ (80021bc <HAL_DMA_Init+0x44c>)
 8002170:	4013      	ands	r3, r2
 8002172:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b40      	cmp	r3, #64	@ 0x40
 800217a:	d021      	beq.n	80021c0 <HAL_DMA_Init+0x450>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	2b80      	cmp	r3, #128	@ 0x80
 8002182:	d102      	bne.n	800218a <HAL_DMA_Init+0x41a>
 8002184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002188:	e01b      	b.n	80021c2 <HAL_DMA_Init+0x452>
 800218a:	2300      	movs	r3, #0
 800218c:	e019      	b.n	80021c2 <HAL_DMA_Init+0x452>
 800218e:	bf00      	nop
 8002190:	fe10803f 	.word	0xfe10803f
 8002194:	5c001000 	.word	0x5c001000
 8002198:	ffff0000 	.word	0xffff0000
 800219c:	58025408 	.word	0x58025408
 80021a0:	5802541c 	.word	0x5802541c
 80021a4:	58025430 	.word	0x58025430
 80021a8:	58025444 	.word	0x58025444
 80021ac:	58025458 	.word	0x58025458
 80021b0:	5802546c 	.word	0x5802546c
 80021b4:	58025480 	.word	0x58025480
 80021b8:	58025494 	.word	0x58025494
 80021bc:	fffe000f 	.word	0xfffe000f
 80021c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	68d2      	ldr	r2, [r2, #12]
 80021c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	691b      	ldr	r3, [r3, #16]
 80021ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80021d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80021d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80021e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80021e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80021f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	461a      	mov	r2, r3
 8002206:	4b6e      	ldr	r3, [pc, #440]	@ (80023c0 <HAL_DMA_Init+0x650>)
 8002208:	4413      	add	r3, r2
 800220a:	4a6e      	ldr	r2, [pc, #440]	@ (80023c4 <HAL_DMA_Init+0x654>)
 800220c:	fba2 2303 	umull	r2, r3, r2, r3
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	009a      	lsls	r2, r3, #2
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f001 fda1 	bl	8003d60 <DMA_CalcBaseAndBitshift>
 800221e:	4603      	mov	r3, r0
 8002220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	2201      	movs	r2, #1
 800222c:	409a      	lsls	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	e008      	b.n	8002246 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2240      	movs	r2, #64	@ 0x40
 8002238:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0b7      	b.n	80023b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	@ (80023c8 <HAL_DMA_Init+0x658>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d072      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a5d      	ldr	r2, [pc, #372]	@ (80023cc <HAL_DMA_Init+0x65c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d06d      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a5c      	ldr	r2, [pc, #368]	@ (80023d0 <HAL_DMA_Init+0x660>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d068      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a5a      	ldr	r2, [pc, #360]	@ (80023d4 <HAL_DMA_Init+0x664>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d063      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a59      	ldr	r2, [pc, #356]	@ (80023d8 <HAL_DMA_Init+0x668>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d05e      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a57      	ldr	r2, [pc, #348]	@ (80023dc <HAL_DMA_Init+0x66c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d059      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a56      	ldr	r2, [pc, #344]	@ (80023e0 <HAL_DMA_Init+0x670>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d054      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a54      	ldr	r2, [pc, #336]	@ (80023e4 <HAL_DMA_Init+0x674>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d04f      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a53      	ldr	r2, [pc, #332]	@ (80023e8 <HAL_DMA_Init+0x678>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d04a      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a51      	ldr	r2, [pc, #324]	@ (80023ec <HAL_DMA_Init+0x67c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d045      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a50      	ldr	r2, [pc, #320]	@ (80023f0 <HAL_DMA_Init+0x680>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d040      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a4e      	ldr	r2, [pc, #312]	@ (80023f4 <HAL_DMA_Init+0x684>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d03b      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4d      	ldr	r2, [pc, #308]	@ (80023f8 <HAL_DMA_Init+0x688>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d036      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4b      	ldr	r2, [pc, #300]	@ (80023fc <HAL_DMA_Init+0x68c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4a      	ldr	r2, [pc, #296]	@ (8002400 <HAL_DMA_Init+0x690>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d02c      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a48      	ldr	r2, [pc, #288]	@ (8002404 <HAL_DMA_Init+0x694>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d027      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a47      	ldr	r2, [pc, #284]	@ (8002408 <HAL_DMA_Init+0x698>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d022      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a45      	ldr	r2, [pc, #276]	@ (800240c <HAL_DMA_Init+0x69c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01d      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a44      	ldr	r2, [pc, #272]	@ (8002410 <HAL_DMA_Init+0x6a0>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d018      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a42      	ldr	r2, [pc, #264]	@ (8002414 <HAL_DMA_Init+0x6a4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <HAL_DMA_Init+0x6a8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d00e      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a3f      	ldr	r2, [pc, #252]	@ (800241c <HAL_DMA_Init+0x6ac>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d009      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a3e      	ldr	r2, [pc, #248]	@ (8002420 <HAL_DMA_Init+0x6b0>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d004      	beq.n	8002336 <HAL_DMA_Init+0x5c6>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3c      	ldr	r2, [pc, #240]	@ (8002424 <HAL_DMA_Init+0x6b4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d101      	bne.n	800233a <HAL_DMA_Init+0x5ca>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_DMA_Init+0x5cc>
 800233a:	2300      	movs	r3, #0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d032      	beq.n	80023a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f001 fe3b 	bl	8003fbc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	2b80      	cmp	r3, #128	@ 0x80
 800234c:	d102      	bne.n	8002354 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685a      	ldr	r2, [r3, #4]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d010      	beq.n	8002394 <HAL_DMA_Init+0x624>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b08      	cmp	r3, #8
 8002378:	d80c      	bhi.n	8002394 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f001 feb8 	bl	80040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e008      	b.n	80023a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2200      	movs	r2, #0
 80023a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	a7fdabf8 	.word	0xa7fdabf8
 80023c4:	cccccccd 	.word	0xcccccccd
 80023c8:	40020010 	.word	0x40020010
 80023cc:	40020028 	.word	0x40020028
 80023d0:	40020040 	.word	0x40020040
 80023d4:	40020058 	.word	0x40020058
 80023d8:	40020070 	.word	0x40020070
 80023dc:	40020088 	.word	0x40020088
 80023e0:	400200a0 	.word	0x400200a0
 80023e4:	400200b8 	.word	0x400200b8
 80023e8:	40020410 	.word	0x40020410
 80023ec:	40020428 	.word	0x40020428
 80023f0:	40020440 	.word	0x40020440
 80023f4:	40020458 	.word	0x40020458
 80023f8:	40020470 	.word	0x40020470
 80023fc:	40020488 	.word	0x40020488
 8002400:	400204a0 	.word	0x400204a0
 8002404:	400204b8 	.word	0x400204b8
 8002408:	58025408 	.word	0x58025408
 800240c:	5802541c 	.word	0x5802541c
 8002410:	58025430 	.word	0x58025430
 8002414:	58025444 	.word	0x58025444
 8002418:	58025458 	.word	0x58025458
 800241c:	5802546c 	.word	0x5802546c
 8002420:	58025480 	.word	0x58025480
 8002424:	58025494 	.word	0x58025494

08002428 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff fada 	bl	80019e8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e2dc      	b.n	80029fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002446:	b2db      	uxtb	r3, r3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d008      	beq.n	800245e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2280      	movs	r2, #128	@ 0x80
 8002450:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e2cd      	b.n	80029fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a76      	ldr	r2, [pc, #472]	@ (800263c <HAL_DMA_Abort+0x214>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d04a      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a74      	ldr	r2, [pc, #464]	@ (8002640 <HAL_DMA_Abort+0x218>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d045      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a73      	ldr	r2, [pc, #460]	@ (8002644 <HAL_DMA_Abort+0x21c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d040      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a71      	ldr	r2, [pc, #452]	@ (8002648 <HAL_DMA_Abort+0x220>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d03b      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a70      	ldr	r2, [pc, #448]	@ (800264c <HAL_DMA_Abort+0x224>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d036      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a6e      	ldr	r2, [pc, #440]	@ (8002650 <HAL_DMA_Abort+0x228>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d031      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a6d      	ldr	r2, [pc, #436]	@ (8002654 <HAL_DMA_Abort+0x22c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d02c      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a6b      	ldr	r2, [pc, #428]	@ (8002658 <HAL_DMA_Abort+0x230>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d027      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a6a      	ldr	r2, [pc, #424]	@ (800265c <HAL_DMA_Abort+0x234>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d022      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a68      	ldr	r2, [pc, #416]	@ (8002660 <HAL_DMA_Abort+0x238>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d01d      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a67      	ldr	r2, [pc, #412]	@ (8002664 <HAL_DMA_Abort+0x23c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d018      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a65      	ldr	r2, [pc, #404]	@ (8002668 <HAL_DMA_Abort+0x240>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a64      	ldr	r2, [pc, #400]	@ (800266c <HAL_DMA_Abort+0x244>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00e      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a62      	ldr	r2, [pc, #392]	@ (8002670 <HAL_DMA_Abort+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d009      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a61      	ldr	r2, [pc, #388]	@ (8002674 <HAL_DMA_Abort+0x24c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d004      	beq.n	80024fe <HAL_DMA_Abort+0xd6>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a5f      	ldr	r2, [pc, #380]	@ (8002678 <HAL_DMA_Abort+0x250>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d101      	bne.n	8002502 <HAL_DMA_Abort+0xda>
 80024fe:	2301      	movs	r3, #1
 8002500:	e000      	b.n	8002504 <HAL_DMA_Abort+0xdc>
 8002502:	2300      	movs	r3, #0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d013      	beq.n	8002530 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f022 021e 	bic.w	r2, r2, #30
 8002516:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	695a      	ldr	r2, [r3, #20]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002526:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e00a      	b.n	8002546 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 020e 	bic.w	r2, r2, #14
 800253e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a3c      	ldr	r2, [pc, #240]	@ (800263c <HAL_DMA_Abort+0x214>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d072      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a3a      	ldr	r2, [pc, #232]	@ (8002640 <HAL_DMA_Abort+0x218>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d06d      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a39      	ldr	r2, [pc, #228]	@ (8002644 <HAL_DMA_Abort+0x21c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d068      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a37      	ldr	r2, [pc, #220]	@ (8002648 <HAL_DMA_Abort+0x220>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d063      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a36      	ldr	r2, [pc, #216]	@ (800264c <HAL_DMA_Abort+0x224>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d05e      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a34      	ldr	r2, [pc, #208]	@ (8002650 <HAL_DMA_Abort+0x228>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d059      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a33      	ldr	r2, [pc, #204]	@ (8002654 <HAL_DMA_Abort+0x22c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d054      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a31      	ldr	r2, [pc, #196]	@ (8002658 <HAL_DMA_Abort+0x230>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04f      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a30      	ldr	r2, [pc, #192]	@ (800265c <HAL_DMA_Abort+0x234>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d04a      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002660 <HAL_DMA_Abort+0x238>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d045      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002664 <HAL_DMA_Abort+0x23c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d040      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002668 <HAL_DMA_Abort+0x240>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d03b      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	@ (800266c <HAL_DMA_Abort+0x244>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d036      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a28      	ldr	r2, [pc, #160]	@ (8002670 <HAL_DMA_Abort+0x248>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d031      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a27      	ldr	r2, [pc, #156]	@ (8002674 <HAL_DMA_Abort+0x24c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02c      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a25      	ldr	r2, [pc, #148]	@ (8002678 <HAL_DMA_Abort+0x250>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d027      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a24      	ldr	r2, [pc, #144]	@ (800267c <HAL_DMA_Abort+0x254>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d022      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a22      	ldr	r2, [pc, #136]	@ (8002680 <HAL_DMA_Abort+0x258>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01d      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a21      	ldr	r2, [pc, #132]	@ (8002684 <HAL_DMA_Abort+0x25c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d018      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1f      	ldr	r2, [pc, #124]	@ (8002688 <HAL_DMA_Abort+0x260>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1e      	ldr	r2, [pc, #120]	@ (800268c <HAL_DMA_Abort+0x264>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00e      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1c      	ldr	r2, [pc, #112]	@ (8002690 <HAL_DMA_Abort+0x268>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d009      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1b      	ldr	r2, [pc, #108]	@ (8002694 <HAL_DMA_Abort+0x26c>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d004      	beq.n	8002636 <HAL_DMA_Abort+0x20e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a19      	ldr	r2, [pc, #100]	@ (8002698 <HAL_DMA_Abort+0x270>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d132      	bne.n	800269c <HAL_DMA_Abort+0x274>
 8002636:	2301      	movs	r3, #1
 8002638:	e031      	b.n	800269e <HAL_DMA_Abort+0x276>
 800263a:	bf00      	nop
 800263c:	40020010 	.word	0x40020010
 8002640:	40020028 	.word	0x40020028
 8002644:	40020040 	.word	0x40020040
 8002648:	40020058 	.word	0x40020058
 800264c:	40020070 	.word	0x40020070
 8002650:	40020088 	.word	0x40020088
 8002654:	400200a0 	.word	0x400200a0
 8002658:	400200b8 	.word	0x400200b8
 800265c:	40020410 	.word	0x40020410
 8002660:	40020428 	.word	0x40020428
 8002664:	40020440 	.word	0x40020440
 8002668:	40020458 	.word	0x40020458
 800266c:	40020470 	.word	0x40020470
 8002670:	40020488 	.word	0x40020488
 8002674:	400204a0 	.word	0x400204a0
 8002678:	400204b8 	.word	0x400204b8
 800267c:	58025408 	.word	0x58025408
 8002680:	5802541c 	.word	0x5802541c
 8002684:	58025430 	.word	0x58025430
 8002688:	58025444 	.word	0x58025444
 800268c:	58025458 	.word	0x58025458
 8002690:	5802546c 	.word	0x5802546c
 8002694:	58025480 	.word	0x58025480
 8002698:	58025494 	.word	0x58025494
 800269c:	2300      	movs	r3, #0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d007      	beq.n	80026b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80026b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6d      	ldr	r2, [pc, #436]	@ (800286c <HAL_DMA_Abort+0x444>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d04a      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002870 <HAL_DMA_Abort+0x448>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d045      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002874 <HAL_DMA_Abort+0x44c>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d040      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a68      	ldr	r2, [pc, #416]	@ (8002878 <HAL_DMA_Abort+0x450>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d03b      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a67      	ldr	r2, [pc, #412]	@ (800287c <HAL_DMA_Abort+0x454>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d036      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a65      	ldr	r2, [pc, #404]	@ (8002880 <HAL_DMA_Abort+0x458>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a64      	ldr	r2, [pc, #400]	@ (8002884 <HAL_DMA_Abort+0x45c>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d02c      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a62      	ldr	r2, [pc, #392]	@ (8002888 <HAL_DMA_Abort+0x460>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d027      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a61      	ldr	r2, [pc, #388]	@ (800288c <HAL_DMA_Abort+0x464>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a5f      	ldr	r2, [pc, #380]	@ (8002890 <HAL_DMA_Abort+0x468>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d01d      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a5e      	ldr	r2, [pc, #376]	@ (8002894 <HAL_DMA_Abort+0x46c>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d018      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a5c      	ldr	r2, [pc, #368]	@ (8002898 <HAL_DMA_Abort+0x470>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d013      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a5b      	ldr	r2, [pc, #364]	@ (800289c <HAL_DMA_Abort+0x474>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d00e      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a59      	ldr	r2, [pc, #356]	@ (80028a0 <HAL_DMA_Abort+0x478>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d009      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a58      	ldr	r2, [pc, #352]	@ (80028a4 <HAL_DMA_Abort+0x47c>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d004      	beq.n	8002752 <HAL_DMA_Abort+0x32a>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a56      	ldr	r2, [pc, #344]	@ (80028a8 <HAL_DMA_Abort+0x480>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d108      	bne.n	8002764 <HAL_DMA_Abort+0x33c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	e007      	b.n	8002774 <HAL_DMA_Abort+0x34c>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002774:	e013      	b.n	800279e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002776:	f7ff f937 	bl	80019e8 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	2b05      	cmp	r3, #5
 8002782:	d90c      	bls.n	800279e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2220      	movs	r2, #32
 8002788:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2203      	movs	r2, #3
 800278e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e12d      	b.n	80029fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e5      	bne.n	8002776 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a2f      	ldr	r2, [pc, #188]	@ (800286c <HAL_DMA_Abort+0x444>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d04a      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <HAL_DMA_Abort+0x448>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d045      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a2c      	ldr	r2, [pc, #176]	@ (8002874 <HAL_DMA_Abort+0x44c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d040      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a2a      	ldr	r2, [pc, #168]	@ (8002878 <HAL_DMA_Abort+0x450>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d03b      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a29      	ldr	r2, [pc, #164]	@ (800287c <HAL_DMA_Abort+0x454>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d036      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a27      	ldr	r2, [pc, #156]	@ (8002880 <HAL_DMA_Abort+0x458>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d031      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a26      	ldr	r2, [pc, #152]	@ (8002884 <HAL_DMA_Abort+0x45c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d02c      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a24      	ldr	r2, [pc, #144]	@ (8002888 <HAL_DMA_Abort+0x460>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d027      	beq.n	800284a <HAL_DMA_Abort+0x422>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a23      	ldr	r2, [pc, #140]	@ (800288c <HAL_DMA_Abort+0x464>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d022      	beq.n	800284a <HAL_DMA_Abort+0x422>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a21      	ldr	r2, [pc, #132]	@ (8002890 <HAL_DMA_Abort+0x468>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d01d      	beq.n	800284a <HAL_DMA_Abort+0x422>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a20      	ldr	r2, [pc, #128]	@ (8002894 <HAL_DMA_Abort+0x46c>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d018      	beq.n	800284a <HAL_DMA_Abort+0x422>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_DMA_Abort+0x470>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d013      	beq.n	800284a <HAL_DMA_Abort+0x422>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a1d      	ldr	r2, [pc, #116]	@ (800289c <HAL_DMA_Abort+0x474>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_DMA_Abort+0x422>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a1b      	ldr	r2, [pc, #108]	@ (80028a0 <HAL_DMA_Abort+0x478>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d009      	beq.n	800284a <HAL_DMA_Abort+0x422>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a1a      	ldr	r2, [pc, #104]	@ (80028a4 <HAL_DMA_Abort+0x47c>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d004      	beq.n	800284a <HAL_DMA_Abort+0x422>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a18      	ldr	r2, [pc, #96]	@ (80028a8 <HAL_DMA_Abort+0x480>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_DMA_Abort+0x426>
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <HAL_DMA_Abort+0x428>
 800284e:	2300      	movs	r3, #0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02b      	beq.n	80028ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002858:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285e:	f003 031f 	and.w	r3, r3, #31
 8002862:	223f      	movs	r2, #63	@ 0x3f
 8002864:	409a      	lsls	r2, r3
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	e02a      	b.n	80028c2 <HAL_DMA_Abort+0x49a>
 800286c:	40020010 	.word	0x40020010
 8002870:	40020028 	.word	0x40020028
 8002874:	40020040 	.word	0x40020040
 8002878:	40020058 	.word	0x40020058
 800287c:	40020070 	.word	0x40020070
 8002880:	40020088 	.word	0x40020088
 8002884:	400200a0 	.word	0x400200a0
 8002888:	400200b8 	.word	0x400200b8
 800288c:	40020410 	.word	0x40020410
 8002890:	40020428 	.word	0x40020428
 8002894:	40020440 	.word	0x40020440
 8002898:	40020458 	.word	0x40020458
 800289c:	40020470 	.word	0x40020470
 80028a0:	40020488 	.word	0x40020488
 80028a4:	400204a0 	.word	0x400204a0
 80028a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028b6:	f003 031f 	and.w	r3, r3, #31
 80028ba:	2201      	movs	r2, #1
 80028bc:	409a      	lsls	r2, r3
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a4f      	ldr	r2, [pc, #316]	@ (8002a04 <HAL_DMA_Abort+0x5dc>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d072      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	@ (8002a08 <HAL_DMA_Abort+0x5e0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d06d      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a4c      	ldr	r2, [pc, #304]	@ (8002a0c <HAL_DMA_Abort+0x5e4>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d068      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002a10 <HAL_DMA_Abort+0x5e8>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d063      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a49      	ldr	r2, [pc, #292]	@ (8002a14 <HAL_DMA_Abort+0x5ec>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d05e      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a47      	ldr	r2, [pc, #284]	@ (8002a18 <HAL_DMA_Abort+0x5f0>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d059      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a46      	ldr	r2, [pc, #280]	@ (8002a1c <HAL_DMA_Abort+0x5f4>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d054      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a44      	ldr	r2, [pc, #272]	@ (8002a20 <HAL_DMA_Abort+0x5f8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d04f      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a43      	ldr	r2, [pc, #268]	@ (8002a24 <HAL_DMA_Abort+0x5fc>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d04a      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a41      	ldr	r2, [pc, #260]	@ (8002a28 <HAL_DMA_Abort+0x600>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d045      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a40      	ldr	r2, [pc, #256]	@ (8002a2c <HAL_DMA_Abort+0x604>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d040      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a3e      	ldr	r2, [pc, #248]	@ (8002a30 <HAL_DMA_Abort+0x608>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d03b      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3d      	ldr	r2, [pc, #244]	@ (8002a34 <HAL_DMA_Abort+0x60c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d036      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a3b      	ldr	r2, [pc, #236]	@ (8002a38 <HAL_DMA_Abort+0x610>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d031      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3a      	ldr	r2, [pc, #232]	@ (8002a3c <HAL_DMA_Abort+0x614>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d02c      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a38      	ldr	r2, [pc, #224]	@ (8002a40 <HAL_DMA_Abort+0x618>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d027      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a37      	ldr	r2, [pc, #220]	@ (8002a44 <HAL_DMA_Abort+0x61c>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d022      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a35      	ldr	r2, [pc, #212]	@ (8002a48 <HAL_DMA_Abort+0x620>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d01d      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a34      	ldr	r2, [pc, #208]	@ (8002a4c <HAL_DMA_Abort+0x624>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a32      	ldr	r2, [pc, #200]	@ (8002a50 <HAL_DMA_Abort+0x628>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d013      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a31      	ldr	r2, [pc, #196]	@ (8002a54 <HAL_DMA_Abort+0x62c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a2f      	ldr	r2, [pc, #188]	@ (8002a58 <HAL_DMA_Abort+0x630>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2e      	ldr	r2, [pc, #184]	@ (8002a5c <HAL_DMA_Abort+0x634>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_DMA_Abort+0x58a>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a2c      	ldr	r2, [pc, #176]	@ (8002a60 <HAL_DMA_Abort+0x638>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_DMA_Abort+0x58e>
 80029b2:	2301      	movs	r3, #1
 80029b4:	e000      	b.n	80029b8 <HAL_DMA_Abort+0x590>
 80029b6:	2300      	movs	r3, #0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d015      	beq.n	80029e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80029c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00c      	beq.n	80029e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80029dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80029e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40020010 	.word	0x40020010
 8002a08:	40020028 	.word	0x40020028
 8002a0c:	40020040 	.word	0x40020040
 8002a10:	40020058 	.word	0x40020058
 8002a14:	40020070 	.word	0x40020070
 8002a18:	40020088 	.word	0x40020088
 8002a1c:	400200a0 	.word	0x400200a0
 8002a20:	400200b8 	.word	0x400200b8
 8002a24:	40020410 	.word	0x40020410
 8002a28:	40020428 	.word	0x40020428
 8002a2c:	40020440 	.word	0x40020440
 8002a30:	40020458 	.word	0x40020458
 8002a34:	40020470 	.word	0x40020470
 8002a38:	40020488 	.word	0x40020488
 8002a3c:	400204a0 	.word	0x400204a0
 8002a40:	400204b8 	.word	0x400204b8
 8002a44:	58025408 	.word	0x58025408
 8002a48:	5802541c 	.word	0x5802541c
 8002a4c:	58025430 	.word	0x58025430
 8002a50:	58025444 	.word	0x58025444
 8002a54:	58025458 	.word	0x58025458
 8002a58:	5802546c 	.word	0x5802546c
 8002a5c:	58025480 	.word	0x58025480
 8002a60:	58025494 	.word	0x58025494

08002a64 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e237      	b.n	8002ee6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d004      	beq.n	8002a8c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2280      	movs	r2, #128	@ 0x80
 8002a86:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e22c      	b.n	8002ee6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a5c      	ldr	r2, [pc, #368]	@ (8002c04 <HAL_DMA_Abort_IT+0x1a0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d04a      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a5b      	ldr	r2, [pc, #364]	@ (8002c08 <HAL_DMA_Abort_IT+0x1a4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d045      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a59      	ldr	r2, [pc, #356]	@ (8002c0c <HAL_DMA_Abort_IT+0x1a8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d040      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a58      	ldr	r2, [pc, #352]	@ (8002c10 <HAL_DMA_Abort_IT+0x1ac>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d03b      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a56      	ldr	r2, [pc, #344]	@ (8002c14 <HAL_DMA_Abort_IT+0x1b0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d036      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a55      	ldr	r2, [pc, #340]	@ (8002c18 <HAL_DMA_Abort_IT+0x1b4>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d031      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a53      	ldr	r2, [pc, #332]	@ (8002c1c <HAL_DMA_Abort_IT+0x1b8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d02c      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a52      	ldr	r2, [pc, #328]	@ (8002c20 <HAL_DMA_Abort_IT+0x1bc>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d027      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a50      	ldr	r2, [pc, #320]	@ (8002c24 <HAL_DMA_Abort_IT+0x1c0>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d022      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a4f      	ldr	r2, [pc, #316]	@ (8002c28 <HAL_DMA_Abort_IT+0x1c4>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d01d      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a4d      	ldr	r2, [pc, #308]	@ (8002c2c <HAL_DMA_Abort_IT+0x1c8>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d018      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a4c      	ldr	r2, [pc, #304]	@ (8002c30 <HAL_DMA_Abort_IT+0x1cc>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d013      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a4a      	ldr	r2, [pc, #296]	@ (8002c34 <HAL_DMA_Abort_IT+0x1d0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d00e      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a49      	ldr	r2, [pc, #292]	@ (8002c38 <HAL_DMA_Abort_IT+0x1d4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d009      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a47      	ldr	r2, [pc, #284]	@ (8002c3c <HAL_DMA_Abort_IT+0x1d8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d004      	beq.n	8002b2c <HAL_DMA_Abort_IT+0xc8>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a46      	ldr	r2, [pc, #280]	@ (8002c40 <HAL_DMA_Abort_IT+0x1dc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d101      	bne.n	8002b30 <HAL_DMA_Abort_IT+0xcc>
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e000      	b.n	8002b32 <HAL_DMA_Abort_IT+0xce>
 8002b30:	2300      	movs	r3, #0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	f000 8086 	beq.w	8002c44 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2204      	movs	r2, #4
 8002b3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2f      	ldr	r2, [pc, #188]	@ (8002c04 <HAL_DMA_Abort_IT+0x1a0>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d04a      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8002c08 <HAL_DMA_Abort_IT+0x1a4>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d045      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2c      	ldr	r2, [pc, #176]	@ (8002c0c <HAL_DMA_Abort_IT+0x1a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d040      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a2b      	ldr	r2, [pc, #172]	@ (8002c10 <HAL_DMA_Abort_IT+0x1ac>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d03b      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a29      	ldr	r2, [pc, #164]	@ (8002c14 <HAL_DMA_Abort_IT+0x1b0>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d036      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a28      	ldr	r2, [pc, #160]	@ (8002c18 <HAL_DMA_Abort_IT+0x1b4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d031      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a26      	ldr	r2, [pc, #152]	@ (8002c1c <HAL_DMA_Abort_IT+0x1b8>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d02c      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a25      	ldr	r2, [pc, #148]	@ (8002c20 <HAL_DMA_Abort_IT+0x1bc>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d027      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a23      	ldr	r2, [pc, #140]	@ (8002c24 <HAL_DMA_Abort_IT+0x1c0>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d022      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a22      	ldr	r2, [pc, #136]	@ (8002c28 <HAL_DMA_Abort_IT+0x1c4>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d01d      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a20      	ldr	r2, [pc, #128]	@ (8002c2c <HAL_DMA_Abort_IT+0x1c8>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d018      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c30 <HAL_DMA_Abort_IT+0x1cc>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c34 <HAL_DMA_Abort_IT+0x1d0>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00e      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8002c38 <HAL_DMA_Abort_IT+0x1d4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d009      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c3c <HAL_DMA_Abort_IT+0x1d8>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d004      	beq.n	8002be0 <HAL_DMA_Abort_IT+0x17c>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a19      	ldr	r2, [pc, #100]	@ (8002c40 <HAL_DMA_Abort_IT+0x1dc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d108      	bne.n	8002bf2 <HAL_DMA_Abort_IT+0x18e>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e178      	b.n	8002ee4 <HAL_DMA_Abort_IT+0x480>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0201 	bic.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	e16f      	b.n	8002ee4 <HAL_DMA_Abort_IT+0x480>
 8002c04:	40020010 	.word	0x40020010
 8002c08:	40020028 	.word	0x40020028
 8002c0c:	40020040 	.word	0x40020040
 8002c10:	40020058 	.word	0x40020058
 8002c14:	40020070 	.word	0x40020070
 8002c18:	40020088 	.word	0x40020088
 8002c1c:	400200a0 	.word	0x400200a0
 8002c20:	400200b8 	.word	0x400200b8
 8002c24:	40020410 	.word	0x40020410
 8002c28:	40020428 	.word	0x40020428
 8002c2c:	40020440 	.word	0x40020440
 8002c30:	40020458 	.word	0x40020458
 8002c34:	40020470 	.word	0x40020470
 8002c38:	40020488 	.word	0x40020488
 8002c3c:	400204a0 	.word	0x400204a0
 8002c40:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 020e 	bic.w	r2, r2, #14
 8002c52:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a6c      	ldr	r2, [pc, #432]	@ (8002e0c <HAL_DMA_Abort_IT+0x3a8>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d04a      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a6b      	ldr	r2, [pc, #428]	@ (8002e10 <HAL_DMA_Abort_IT+0x3ac>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d045      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a69      	ldr	r2, [pc, #420]	@ (8002e14 <HAL_DMA_Abort_IT+0x3b0>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d040      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a68      	ldr	r2, [pc, #416]	@ (8002e18 <HAL_DMA_Abort_IT+0x3b4>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d03b      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4a66      	ldr	r2, [pc, #408]	@ (8002e1c <HAL_DMA_Abort_IT+0x3b8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d036      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a65      	ldr	r2, [pc, #404]	@ (8002e20 <HAL_DMA_Abort_IT+0x3bc>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d031      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a63      	ldr	r2, [pc, #396]	@ (8002e24 <HAL_DMA_Abort_IT+0x3c0>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d02c      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a62      	ldr	r2, [pc, #392]	@ (8002e28 <HAL_DMA_Abort_IT+0x3c4>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d027      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a60      	ldr	r2, [pc, #384]	@ (8002e2c <HAL_DMA_Abort_IT+0x3c8>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d022      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a5f      	ldr	r2, [pc, #380]	@ (8002e30 <HAL_DMA_Abort_IT+0x3cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d01d      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a5d      	ldr	r2, [pc, #372]	@ (8002e34 <HAL_DMA_Abort_IT+0x3d0>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d018      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002e38 <HAL_DMA_Abort_IT+0x3d4>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a5a      	ldr	r2, [pc, #360]	@ (8002e3c <HAL_DMA_Abort_IT+0x3d8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00e      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a59      	ldr	r2, [pc, #356]	@ (8002e40 <HAL_DMA_Abort_IT+0x3dc>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d009      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a57      	ldr	r2, [pc, #348]	@ (8002e44 <HAL_DMA_Abort_IT+0x3e0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d004      	beq.n	8002cf4 <HAL_DMA_Abort_IT+0x290>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a56      	ldr	r2, [pc, #344]	@ (8002e48 <HAL_DMA_Abort_IT+0x3e4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d108      	bne.n	8002d06 <HAL_DMA_Abort_IT+0x2a2>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]
 8002d04:	e007      	b.n	8002d16 <HAL_DMA_Abort_IT+0x2b2>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0201 	bic.w	r2, r2, #1
 8002d14:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a3c      	ldr	r2, [pc, #240]	@ (8002e0c <HAL_DMA_Abort_IT+0x3a8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d072      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a3a      	ldr	r2, [pc, #232]	@ (8002e10 <HAL_DMA_Abort_IT+0x3ac>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d06d      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a39      	ldr	r2, [pc, #228]	@ (8002e14 <HAL_DMA_Abort_IT+0x3b0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d068      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a37      	ldr	r2, [pc, #220]	@ (8002e18 <HAL_DMA_Abort_IT+0x3b4>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d063      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a36      	ldr	r2, [pc, #216]	@ (8002e1c <HAL_DMA_Abort_IT+0x3b8>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d05e      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a34      	ldr	r2, [pc, #208]	@ (8002e20 <HAL_DMA_Abort_IT+0x3bc>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d059      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a33      	ldr	r2, [pc, #204]	@ (8002e24 <HAL_DMA_Abort_IT+0x3c0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d054      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a31      	ldr	r2, [pc, #196]	@ (8002e28 <HAL_DMA_Abort_IT+0x3c4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d04f      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a30      	ldr	r2, [pc, #192]	@ (8002e2c <HAL_DMA_Abort_IT+0x3c8>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d04a      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a2e      	ldr	r2, [pc, #184]	@ (8002e30 <HAL_DMA_Abort_IT+0x3cc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d045      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e34 <HAL_DMA_Abort_IT+0x3d0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d040      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2b      	ldr	r2, [pc, #172]	@ (8002e38 <HAL_DMA_Abort_IT+0x3d4>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d03b      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a2a      	ldr	r2, [pc, #168]	@ (8002e3c <HAL_DMA_Abort_IT+0x3d8>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d036      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	@ (8002e40 <HAL_DMA_Abort_IT+0x3dc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d031      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a27      	ldr	r2, [pc, #156]	@ (8002e44 <HAL_DMA_Abort_IT+0x3e0>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d02c      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a25      	ldr	r2, [pc, #148]	@ (8002e48 <HAL_DMA_Abort_IT+0x3e4>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d027      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a24      	ldr	r2, [pc, #144]	@ (8002e4c <HAL_DMA_Abort_IT+0x3e8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d022      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a22      	ldr	r2, [pc, #136]	@ (8002e50 <HAL_DMA_Abort_IT+0x3ec>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01d      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a21      	ldr	r2, [pc, #132]	@ (8002e54 <HAL_DMA_Abort_IT+0x3f0>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d018      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_DMA_Abort_IT+0x3f4>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d013      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_DMA_Abort_IT+0x3f8>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00e      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <HAL_DMA_Abort_IT+0x3fc>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d009      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e64 <HAL_DMA_Abort_IT+0x400>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d004      	beq.n	8002e06 <HAL_DMA_Abort_IT+0x3a2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_DMA_Abort_IT+0x404>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d132      	bne.n	8002e6c <HAL_DMA_Abort_IT+0x408>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e031      	b.n	8002e6e <HAL_DMA_Abort_IT+0x40a>
 8002e0a:	bf00      	nop
 8002e0c:	40020010 	.word	0x40020010
 8002e10:	40020028 	.word	0x40020028
 8002e14:	40020040 	.word	0x40020040
 8002e18:	40020058 	.word	0x40020058
 8002e1c:	40020070 	.word	0x40020070
 8002e20:	40020088 	.word	0x40020088
 8002e24:	400200a0 	.word	0x400200a0
 8002e28:	400200b8 	.word	0x400200b8
 8002e2c:	40020410 	.word	0x40020410
 8002e30:	40020428 	.word	0x40020428
 8002e34:	40020440 	.word	0x40020440
 8002e38:	40020458 	.word	0x40020458
 8002e3c:	40020470 	.word	0x40020470
 8002e40:	40020488 	.word	0x40020488
 8002e44:	400204a0 	.word	0x400204a0
 8002e48:	400204b8 	.word	0x400204b8
 8002e4c:	58025408 	.word	0x58025408
 8002e50:	5802541c 	.word	0x5802541c
 8002e54:	58025430 	.word	0x58025430
 8002e58:	58025444 	.word	0x58025444
 8002e5c:	58025458 	.word	0x58025458
 8002e60:	5802546c 	.word	0x5802546c
 8002e64:	58025480 	.word	0x58025480
 8002e68:	58025494 	.word	0x58025494
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d028      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e80:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e86:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e8c:	f003 031f 	and.w	r3, r3, #31
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ea0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eb8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ec2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop

08002ef0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b08a      	sub	sp, #40	@ 0x28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002efc:	4b67      	ldr	r3, [pc, #412]	@ (800309c <HAL_DMA_IRQHandler+0x1ac>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a67      	ldr	r2, [pc, #412]	@ (80030a0 <HAL_DMA_IRQHandler+0x1b0>)
 8002f02:	fba2 2303 	umull	r2, r3, r2, r3
 8002f06:	0a9b      	lsrs	r3, r3, #10
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a5f      	ldr	r2, [pc, #380]	@ (80030a4 <HAL_DMA_IRQHandler+0x1b4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d04a      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a5d      	ldr	r2, [pc, #372]	@ (80030a8 <HAL_DMA_IRQHandler+0x1b8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d045      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a5c      	ldr	r2, [pc, #368]	@ (80030ac <HAL_DMA_IRQHandler+0x1bc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d040      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a5a      	ldr	r2, [pc, #360]	@ (80030b0 <HAL_DMA_IRQHandler+0x1c0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d03b      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a59      	ldr	r2, [pc, #356]	@ (80030b4 <HAL_DMA_IRQHandler+0x1c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d036      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_DMA_IRQHandler+0x1c8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d031      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a56      	ldr	r2, [pc, #344]	@ (80030bc <HAL_DMA_IRQHandler+0x1cc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d02c      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a54      	ldr	r2, [pc, #336]	@ (80030c0 <HAL_DMA_IRQHandler+0x1d0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d027      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a53      	ldr	r2, [pc, #332]	@ (80030c4 <HAL_DMA_IRQHandler+0x1d4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d022      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a51      	ldr	r2, [pc, #324]	@ (80030c8 <HAL_DMA_IRQHandler+0x1d8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a50      	ldr	r2, [pc, #320]	@ (80030cc <HAL_DMA_IRQHandler+0x1dc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d018      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a4e      	ldr	r2, [pc, #312]	@ (80030d0 <HAL_DMA_IRQHandler+0x1e0>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a4d      	ldr	r2, [pc, #308]	@ (80030d4 <HAL_DMA_IRQHandler+0x1e4>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a4b      	ldr	r2, [pc, #300]	@ (80030d8 <HAL_DMA_IRQHandler+0x1e8>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a4a      	ldr	r2, [pc, #296]	@ (80030dc <HAL_DMA_IRQHandler+0x1ec>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_DMA_IRQHandler+0xd2>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a48      	ldr	r2, [pc, #288]	@ (80030e0 <HAL_DMA_IRQHandler+0x1f0>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_DMA_IRQHandler+0xd6>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_DMA_IRQHandler+0xd8>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 842b 	beq.w	8003824 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	2208      	movs	r2, #8
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 80a2 	beq.w	8003128 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a2e      	ldr	r2, [pc, #184]	@ (80030a4 <HAL_DMA_IRQHandler+0x1b4>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d04a      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80030a8 <HAL_DMA_IRQHandler+0x1b8>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d045      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a2b      	ldr	r2, [pc, #172]	@ (80030ac <HAL_DMA_IRQHandler+0x1bc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d040      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a2a      	ldr	r2, [pc, #168]	@ (80030b0 <HAL_DMA_IRQHandler+0x1c0>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d03b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a28      	ldr	r2, [pc, #160]	@ (80030b4 <HAL_DMA_IRQHandler+0x1c4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d036      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a27      	ldr	r2, [pc, #156]	@ (80030b8 <HAL_DMA_IRQHandler+0x1c8>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d031      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a25      	ldr	r2, [pc, #148]	@ (80030bc <HAL_DMA_IRQHandler+0x1cc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d02c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a24      	ldr	r2, [pc, #144]	@ (80030c0 <HAL_DMA_IRQHandler+0x1d0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d027      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a22      	ldr	r2, [pc, #136]	@ (80030c4 <HAL_DMA_IRQHandler+0x1d4>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d022      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a21      	ldr	r2, [pc, #132]	@ (80030c8 <HAL_DMA_IRQHandler+0x1d8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d01d      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a1f      	ldr	r2, [pc, #124]	@ (80030cc <HAL_DMA_IRQHandler+0x1dc>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d018      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a1e      	ldr	r2, [pc, #120]	@ (80030d0 <HAL_DMA_IRQHandler+0x1e0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a1c      	ldr	r2, [pc, #112]	@ (80030d4 <HAL_DMA_IRQHandler+0x1e4>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d00e      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a1b      	ldr	r2, [pc, #108]	@ (80030d8 <HAL_DMA_IRQHandler+0x1e8>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d009      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	@ (80030dc <HAL_DMA_IRQHandler+0x1ec>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d004      	beq.n	8003084 <HAL_DMA_IRQHandler+0x194>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a18      	ldr	r2, [pc, #96]	@ (80030e0 <HAL_DMA_IRQHandler+0x1f0>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d12f      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x1f4>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	bf14      	ite	ne
 8003092:	2301      	movne	r3, #1
 8003094:	2300      	moveq	r3, #0
 8003096:	b2db      	uxtb	r3, r3
 8003098:	e02e      	b.n	80030f8 <HAL_DMA_IRQHandler+0x208>
 800309a:	bf00      	nop
 800309c:	24000004 	.word	0x24000004
 80030a0:	1b4e81b5 	.word	0x1b4e81b5
 80030a4:	40020010 	.word	0x40020010
 80030a8:	40020028 	.word	0x40020028
 80030ac:	40020040 	.word	0x40020040
 80030b0:	40020058 	.word	0x40020058
 80030b4:	40020070 	.word	0x40020070
 80030b8:	40020088 	.word	0x40020088
 80030bc:	400200a0 	.word	0x400200a0
 80030c0:	400200b8 	.word	0x400200b8
 80030c4:	40020410 	.word	0x40020410
 80030c8:	40020428 	.word	0x40020428
 80030cc:	40020440 	.word	0x40020440
 80030d0:	40020458 	.word	0x40020458
 80030d4:	40020470 	.word	0x40020470
 80030d8:	40020488 	.word	0x40020488
 80030dc:	400204a0 	.word	0x400204a0
 80030e0:	400204b8 	.word	0x400204b8
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0204 	bic.w	r2, r2, #4
 800310a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	2208      	movs	r2, #8
 8003116:	409a      	lsls	r2, r3
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003120:	f043 0201 	orr.w	r2, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800312c:	f003 031f 	and.w	r3, r3, #31
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	fa22 f303 	lsr.w	r3, r2, r3
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d06e      	beq.n	800321c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <HAL_DMA_IRQHandler+0x3f8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d04a      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a67      	ldr	r2, [pc, #412]	@ (80032ec <HAL_DMA_IRQHandler+0x3fc>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d045      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a66      	ldr	r2, [pc, #408]	@ (80032f0 <HAL_DMA_IRQHandler+0x400>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d040      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a64      	ldr	r2, [pc, #400]	@ (80032f4 <HAL_DMA_IRQHandler+0x404>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d03b      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a63      	ldr	r2, [pc, #396]	@ (80032f8 <HAL_DMA_IRQHandler+0x408>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d036      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a61      	ldr	r2, [pc, #388]	@ (80032fc <HAL_DMA_IRQHandler+0x40c>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d031      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a60      	ldr	r2, [pc, #384]	@ (8003300 <HAL_DMA_IRQHandler+0x410>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d02c      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a5e      	ldr	r2, [pc, #376]	@ (8003304 <HAL_DMA_IRQHandler+0x414>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d027      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a5d      	ldr	r2, [pc, #372]	@ (8003308 <HAL_DMA_IRQHandler+0x418>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d022      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a5b      	ldr	r2, [pc, #364]	@ (800330c <HAL_DMA_IRQHandler+0x41c>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01d      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a5a      	ldr	r2, [pc, #360]	@ (8003310 <HAL_DMA_IRQHandler+0x420>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d018      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a58      	ldr	r2, [pc, #352]	@ (8003314 <HAL_DMA_IRQHandler+0x424>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a57      	ldr	r2, [pc, #348]	@ (8003318 <HAL_DMA_IRQHandler+0x428>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d00e      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a55      	ldr	r2, [pc, #340]	@ (800331c <HAL_DMA_IRQHandler+0x42c>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d009      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a54      	ldr	r2, [pc, #336]	@ (8003320 <HAL_DMA_IRQHandler+0x430>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_DMA_IRQHandler+0x2ee>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a52      	ldr	r2, [pc, #328]	@ (8003324 <HAL_DMA_IRQHandler+0x434>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10a      	bne.n	80031f4 <HAL_DMA_IRQHandler+0x304>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	695b      	ldr	r3, [r3, #20]
 80031e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf14      	ite	ne
 80031ec:	2301      	movne	r3, #1
 80031ee:	2300      	moveq	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	e003      	b.n	80031fc <HAL_DMA_IRQHandler+0x30c>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	2300      	movs	r3, #0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00d      	beq.n	800321c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003204:	f003 031f 	and.w	r3, r3, #31
 8003208:	2201      	movs	r2, #1
 800320a:	409a      	lsls	r2, r3
 800320c:	6a3b      	ldr	r3, [r7, #32]
 800320e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003220:	f003 031f 	and.w	r3, r3, #31
 8003224:	2204      	movs	r2, #4
 8003226:	409a      	lsls	r2, r3
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 808f 	beq.w	8003350 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a2c      	ldr	r2, [pc, #176]	@ (80032e8 <HAL_DMA_IRQHandler+0x3f8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d04a      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a2a      	ldr	r2, [pc, #168]	@ (80032ec <HAL_DMA_IRQHandler+0x3fc>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d045      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a29      	ldr	r2, [pc, #164]	@ (80032f0 <HAL_DMA_IRQHandler+0x400>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d040      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a27      	ldr	r2, [pc, #156]	@ (80032f4 <HAL_DMA_IRQHandler+0x404>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d03b      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a26      	ldr	r2, [pc, #152]	@ (80032f8 <HAL_DMA_IRQHandler+0x408>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d036      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a24      	ldr	r2, [pc, #144]	@ (80032fc <HAL_DMA_IRQHandler+0x40c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d031      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a23      	ldr	r2, [pc, #140]	@ (8003300 <HAL_DMA_IRQHandler+0x410>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d02c      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a21      	ldr	r2, [pc, #132]	@ (8003304 <HAL_DMA_IRQHandler+0x414>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d027      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a20      	ldr	r2, [pc, #128]	@ (8003308 <HAL_DMA_IRQHandler+0x418>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d022      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a1e      	ldr	r2, [pc, #120]	@ (800330c <HAL_DMA_IRQHandler+0x41c>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d01d      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a1d      	ldr	r2, [pc, #116]	@ (8003310 <HAL_DMA_IRQHandler+0x420>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d018      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003314 <HAL_DMA_IRQHandler+0x424>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d013      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003318 <HAL_DMA_IRQHandler+0x428>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d00e      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a18      	ldr	r2, [pc, #96]	@ (800331c <HAL_DMA_IRQHandler+0x42c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d009      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a17      	ldr	r2, [pc, #92]	@ (8003320 <HAL_DMA_IRQHandler+0x430>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d004      	beq.n	80032d2 <HAL_DMA_IRQHandler+0x3e2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a15      	ldr	r2, [pc, #84]	@ (8003324 <HAL_DMA_IRQHandler+0x434>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d12a      	bne.n	8003328 <HAL_DMA_IRQHandler+0x438>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	bf14      	ite	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	2300      	moveq	r3, #0
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	e023      	b.n	8003330 <HAL_DMA_IRQHandler+0x440>
 80032e8:	40020010 	.word	0x40020010
 80032ec:	40020028 	.word	0x40020028
 80032f0:	40020040 	.word	0x40020040
 80032f4:	40020058 	.word	0x40020058
 80032f8:	40020070 	.word	0x40020070
 80032fc:	40020088 	.word	0x40020088
 8003300:	400200a0 	.word	0x400200a0
 8003304:	400200b8 	.word	0x400200b8
 8003308:	40020410 	.word	0x40020410
 800330c:	40020428 	.word	0x40020428
 8003310:	40020440 	.word	0x40020440
 8003314:	40020458 	.word	0x40020458
 8003318:	40020470 	.word	0x40020470
 800331c:	40020488 	.word	0x40020488
 8003320:	400204a0 	.word	0x400204a0
 8003324:	400204b8 	.word	0x400204b8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003338:	f003 031f 	and.w	r3, r3, #31
 800333c:	2204      	movs	r2, #4
 800333e:	409a      	lsls	r2, r3
 8003340:	6a3b      	ldr	r3, [r7, #32]
 8003342:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003348:	f043 0204 	orr.w	r2, r3, #4
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2210      	movs	r2, #16
 800335a:	409a      	lsls	r2, r3
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	2b00      	cmp	r3, #0
 8003362:	f000 80a6 	beq.w	80034b2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a85      	ldr	r2, [pc, #532]	@ (8003580 <HAL_DMA_IRQHandler+0x690>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d04a      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a83      	ldr	r2, [pc, #524]	@ (8003584 <HAL_DMA_IRQHandler+0x694>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d045      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a82      	ldr	r2, [pc, #520]	@ (8003588 <HAL_DMA_IRQHandler+0x698>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d040      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a80      	ldr	r2, [pc, #512]	@ (800358c <HAL_DMA_IRQHandler+0x69c>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d03b      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7f      	ldr	r2, [pc, #508]	@ (8003590 <HAL_DMA_IRQHandler+0x6a0>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d036      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7d      	ldr	r2, [pc, #500]	@ (8003594 <HAL_DMA_IRQHandler+0x6a4>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d031      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003598 <HAL_DMA_IRQHandler+0x6a8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d02c      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a7a      	ldr	r2, [pc, #488]	@ (800359c <HAL_DMA_IRQHandler+0x6ac>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d027      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a79      	ldr	r2, [pc, #484]	@ (80035a0 <HAL_DMA_IRQHandler+0x6b0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d022      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a77      	ldr	r2, [pc, #476]	@ (80035a4 <HAL_DMA_IRQHandler+0x6b4>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01d      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a76      	ldr	r2, [pc, #472]	@ (80035a8 <HAL_DMA_IRQHandler+0x6b8>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d018      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a74      	ldr	r2, [pc, #464]	@ (80035ac <HAL_DMA_IRQHandler+0x6bc>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d013      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a73      	ldr	r2, [pc, #460]	@ (80035b0 <HAL_DMA_IRQHandler+0x6c0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a71      	ldr	r2, [pc, #452]	@ (80035b4 <HAL_DMA_IRQHandler+0x6c4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d009      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a70      	ldr	r2, [pc, #448]	@ (80035b8 <HAL_DMA_IRQHandler+0x6c8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_DMA_IRQHandler+0x516>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6e      	ldr	r2, [pc, #440]	@ (80035bc <HAL_DMA_IRQHandler+0x6cc>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10a      	bne.n	800341c <HAL_DMA_IRQHandler+0x52c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf14      	ite	ne
 8003414:	2301      	movne	r3, #1
 8003416:	2300      	moveq	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	e009      	b.n	8003430 <HAL_DMA_IRQHandler+0x540>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0304 	and.w	r3, r3, #4
 8003426:	2b00      	cmp	r3, #0
 8003428:	bf14      	ite	ne
 800342a:	2301      	movne	r3, #1
 800342c:	2300      	moveq	r3, #0
 800342e:	b2db      	uxtb	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d03e      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2210      	movs	r2, #16
 800343e:	409a      	lsls	r2, r3
 8003440:	6a3b      	ldr	r3, [r7, #32]
 8003442:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d018      	beq.n	8003484 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800345c:	2b00      	cmp	r3, #0
 800345e:	d108      	bne.n	8003472 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003464:	2b00      	cmp	r3, #0
 8003466:	d024      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
 8003470:	e01f      	b.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003476:	2b00      	cmp	r3, #0
 8003478:	d01b      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
 8003482:	e016      	b.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800348e:	2b00      	cmp	r3, #0
 8003490:	d107      	bne.n	80034a2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d003      	beq.n	80034b2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f003 031f 	and.w	r3, r3, #31
 80034ba:	2220      	movs	r2, #32
 80034bc:	409a      	lsls	r2, r3
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 8110 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003580 <HAL_DMA_IRQHandler+0x690>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d04a      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003584 <HAL_DMA_IRQHandler+0x694>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d045      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a29      	ldr	r2, [pc, #164]	@ (8003588 <HAL_DMA_IRQHandler+0x698>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d040      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a28      	ldr	r2, [pc, #160]	@ (800358c <HAL_DMA_IRQHandler+0x69c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d03b      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a26      	ldr	r2, [pc, #152]	@ (8003590 <HAL_DMA_IRQHandler+0x6a0>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d036      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a25      	ldr	r2, [pc, #148]	@ (8003594 <HAL_DMA_IRQHandler+0x6a4>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d031      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a23      	ldr	r2, [pc, #140]	@ (8003598 <HAL_DMA_IRQHandler+0x6a8>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d02c      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a22      	ldr	r2, [pc, #136]	@ (800359c <HAL_DMA_IRQHandler+0x6ac>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d027      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a20      	ldr	r2, [pc, #128]	@ (80035a0 <HAL_DMA_IRQHandler+0x6b0>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d022      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a1f      	ldr	r2, [pc, #124]	@ (80035a4 <HAL_DMA_IRQHandler+0x6b4>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d01d      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1d      	ldr	r2, [pc, #116]	@ (80035a8 <HAL_DMA_IRQHandler+0x6b8>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d018      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <HAL_DMA_IRQHandler+0x6bc>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a1a      	ldr	r2, [pc, #104]	@ (80035b0 <HAL_DMA_IRQHandler+0x6c0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d00e      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a19      	ldr	r2, [pc, #100]	@ (80035b4 <HAL_DMA_IRQHandler+0x6c4>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d009      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a17      	ldr	r2, [pc, #92]	@ (80035b8 <HAL_DMA_IRQHandler+0x6c8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d004      	beq.n	8003568 <HAL_DMA_IRQHandler+0x678>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a16      	ldr	r2, [pc, #88]	@ (80035bc <HAL_DMA_IRQHandler+0x6cc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d12b      	bne.n	80035c0 <HAL_DMA_IRQHandler+0x6d0>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0310 	and.w	r3, r3, #16
 8003572:	2b00      	cmp	r3, #0
 8003574:	bf14      	ite	ne
 8003576:	2301      	movne	r3, #1
 8003578:	2300      	moveq	r3, #0
 800357a:	b2db      	uxtb	r3, r3
 800357c:	e02a      	b.n	80035d4 <HAL_DMA_IRQHandler+0x6e4>
 800357e:	bf00      	nop
 8003580:	40020010 	.word	0x40020010
 8003584:	40020028 	.word	0x40020028
 8003588:	40020040 	.word	0x40020040
 800358c:	40020058 	.word	0x40020058
 8003590:	40020070 	.word	0x40020070
 8003594:	40020088 	.word	0x40020088
 8003598:	400200a0 	.word	0x400200a0
 800359c:	400200b8 	.word	0x400200b8
 80035a0:	40020410 	.word	0x40020410
 80035a4:	40020428 	.word	0x40020428
 80035a8:	40020440 	.word	0x40020440
 80035ac:	40020458 	.word	0x40020458
 80035b0:	40020470 	.word	0x40020470
 80035b4:	40020488 	.word	0x40020488
 80035b8:	400204a0 	.word	0x400204a0
 80035bc:	400204b8 	.word	0x400204b8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	bf14      	ite	ne
 80035ce:	2301      	movne	r3, #1
 80035d0:	2300      	moveq	r3, #0
 80035d2:	b2db      	uxtb	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 8087 	beq.w	80036e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2220      	movs	r2, #32
 80035e4:	409a      	lsls	r2, r3
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d139      	bne.n	800366a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0216 	bic.w	r2, r2, #22
 8003604:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695a      	ldr	r2, [r3, #20]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003614:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <HAL_DMA_IRQHandler+0x736>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003622:	2b00      	cmp	r3, #0
 8003624:	d007      	beq.n	8003636 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0208 	bic.w	r2, r2, #8
 8003634:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800363a:	f003 031f 	and.w	r3, r3, #31
 800363e:	223f      	movs	r2, #63	@ 0x3f
 8003640:	409a      	lsls	r2, r3
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 834a 	beq.w	8003cf4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4798      	blx	r3
          }
          return;
 8003668:	e344      	b.n	8003cf4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d018      	beq.n	80036aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d108      	bne.n	8003698 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02c      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	4798      	blx	r3
 8003696:	e027      	b.n	80036e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800369c:	2b00      	cmp	r3, #0
 800369e:	d023      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	4798      	blx	r3
 80036a8:	e01e      	b.n	80036e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10f      	bne.n	80036d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0210 	bic.w	r2, r2, #16
 80036c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8306 	beq.w	8003cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8088 	beq.w	8003810 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2204      	movs	r2, #4
 8003704:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a7a      	ldr	r2, [pc, #488]	@ (80038f8 <HAL_DMA_IRQHandler+0xa08>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d04a      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a79      	ldr	r2, [pc, #484]	@ (80038fc <HAL_DMA_IRQHandler+0xa0c>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d045      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a77      	ldr	r2, [pc, #476]	@ (8003900 <HAL_DMA_IRQHandler+0xa10>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d040      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a76      	ldr	r2, [pc, #472]	@ (8003904 <HAL_DMA_IRQHandler+0xa14>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d03b      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a74      	ldr	r2, [pc, #464]	@ (8003908 <HAL_DMA_IRQHandler+0xa18>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d036      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a73      	ldr	r2, [pc, #460]	@ (800390c <HAL_DMA_IRQHandler+0xa1c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d031      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a71      	ldr	r2, [pc, #452]	@ (8003910 <HAL_DMA_IRQHandler+0xa20>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d02c      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a70      	ldr	r2, [pc, #448]	@ (8003914 <HAL_DMA_IRQHandler+0xa24>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d027      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <HAL_DMA_IRQHandler+0xa28>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d022      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a6d      	ldr	r2, [pc, #436]	@ (800391c <HAL_DMA_IRQHandler+0xa2c>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d01d      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a6b      	ldr	r2, [pc, #428]	@ (8003920 <HAL_DMA_IRQHandler+0xa30>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d018      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_DMA_IRQHandler+0xa34>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d013      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	@ (8003928 <HAL_DMA_IRQHandler+0xa38>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00e      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a67      	ldr	r2, [pc, #412]	@ (800392c <HAL_DMA_IRQHandler+0xa3c>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d009      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a65      	ldr	r2, [pc, #404]	@ (8003930 <HAL_DMA_IRQHandler+0xa40>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d004      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x8b8>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a64      	ldr	r2, [pc, #400]	@ (8003934 <HAL_DMA_IRQHandler+0xa44>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d108      	bne.n	80037ba <HAL_DMA_IRQHandler+0x8ca>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 0201 	bic.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
 80037b8:	e007      	b.n	80037ca <HAL_DMA_IRQHandler+0x8da>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f022 0201 	bic.w	r2, r2, #1
 80037c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	3301      	adds	r3, #1
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d307      	bcc.n	80037e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1f2      	bne.n	80037ca <HAL_DMA_IRQHandler+0x8da>
 80037e4:	e000      	b.n	80037e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80037e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0301 	and.w	r3, r3, #1
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d004      	beq.n	8003800 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2203      	movs	r2, #3
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80037fe:	e003      	b.n	8003808 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003814:	2b00      	cmp	r3, #0
 8003816:	f000 8272 	beq.w	8003cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	4798      	blx	r3
 8003822:	e26c      	b.n	8003cfe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a43      	ldr	r2, [pc, #268]	@ (8003938 <HAL_DMA_IRQHandler+0xa48>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d022      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a42      	ldr	r2, [pc, #264]	@ (800393c <HAL_DMA_IRQHandler+0xa4c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d01d      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a40      	ldr	r2, [pc, #256]	@ (8003940 <HAL_DMA_IRQHandler+0xa50>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d018      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a3f      	ldr	r2, [pc, #252]	@ (8003944 <HAL_DMA_IRQHandler+0xa54>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d013      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a3d      	ldr	r2, [pc, #244]	@ (8003948 <HAL_DMA_IRQHandler+0xa58>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00e      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a3c      	ldr	r2, [pc, #240]	@ (800394c <HAL_DMA_IRQHandler+0xa5c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d009      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a3a      	ldr	r2, [pc, #232]	@ (8003950 <HAL_DMA_IRQHandler+0xa60>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d004      	beq.n	8003874 <HAL_DMA_IRQHandler+0x984>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a39      	ldr	r2, [pc, #228]	@ (8003954 <HAL_DMA_IRQHandler+0xa64>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d101      	bne.n	8003878 <HAL_DMA_IRQHandler+0x988>
 8003874:	2301      	movs	r3, #1
 8003876:	e000      	b.n	800387a <HAL_DMA_IRQHandler+0x98a>
 8003878:	2300      	movs	r3, #0
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 823f 	beq.w	8003cfe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f003 031f 	and.w	r3, r3, #31
 8003890:	2204      	movs	r2, #4
 8003892:	409a      	lsls	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	4013      	ands	r3, r2
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 80cd 	beq.w	8003a38 <HAL_DMA_IRQHandler+0xb48>
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80c7 	beq.w	8003a38 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ae:	f003 031f 	and.w	r3, r3, #31
 80038b2:	2204      	movs	r2, #4
 80038b4:	409a      	lsls	r2, r3
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d049      	beq.n	8003958 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 8210 	beq.w	8003cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038e0:	e20a      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8206 	beq.w	8003cf8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038f4:	e200      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xe08>
 80038f6:	bf00      	nop
 80038f8:	40020010 	.word	0x40020010
 80038fc:	40020028 	.word	0x40020028
 8003900:	40020040 	.word	0x40020040
 8003904:	40020058 	.word	0x40020058
 8003908:	40020070 	.word	0x40020070
 800390c:	40020088 	.word	0x40020088
 8003910:	400200a0 	.word	0x400200a0
 8003914:	400200b8 	.word	0x400200b8
 8003918:	40020410 	.word	0x40020410
 800391c:	40020428 	.word	0x40020428
 8003920:	40020440 	.word	0x40020440
 8003924:	40020458 	.word	0x40020458
 8003928:	40020470 	.word	0x40020470
 800392c:	40020488 	.word	0x40020488
 8003930:	400204a0 	.word	0x400204a0
 8003934:	400204b8 	.word	0x400204b8
 8003938:	58025408 	.word	0x58025408
 800393c:	5802541c 	.word	0x5802541c
 8003940:	58025430 	.word	0x58025430
 8003944:	58025444 	.word	0x58025444
 8003948:	58025458 	.word	0x58025458
 800394c:	5802546c 	.word	0x5802546c
 8003950:	58025480 	.word	0x58025480
 8003954:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	f003 0320 	and.w	r3, r3, #32
 800395e:	2b00      	cmp	r3, #0
 8003960:	d160      	bne.n	8003a24 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a7f      	ldr	r2, [pc, #508]	@ (8003b64 <HAL_DMA_IRQHandler+0xc74>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d04a      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7d      	ldr	r2, [pc, #500]	@ (8003b68 <HAL_DMA_IRQHandler+0xc78>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d045      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a7c      	ldr	r2, [pc, #496]	@ (8003b6c <HAL_DMA_IRQHandler+0xc7c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d040      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a7a      	ldr	r2, [pc, #488]	@ (8003b70 <HAL_DMA_IRQHandler+0xc80>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d03b      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a79      	ldr	r2, [pc, #484]	@ (8003b74 <HAL_DMA_IRQHandler+0xc84>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d036      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a77      	ldr	r2, [pc, #476]	@ (8003b78 <HAL_DMA_IRQHandler+0xc88>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d031      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a76      	ldr	r2, [pc, #472]	@ (8003b7c <HAL_DMA_IRQHandler+0xc8c>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d02c      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a74      	ldr	r2, [pc, #464]	@ (8003b80 <HAL_DMA_IRQHandler+0xc90>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d027      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a73      	ldr	r2, [pc, #460]	@ (8003b84 <HAL_DMA_IRQHandler+0xc94>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d022      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a71      	ldr	r2, [pc, #452]	@ (8003b88 <HAL_DMA_IRQHandler+0xc98>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01d      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a70      	ldr	r2, [pc, #448]	@ (8003b8c <HAL_DMA_IRQHandler+0xc9c>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d018      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b90 <HAL_DMA_IRQHandler+0xca0>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d013      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a6d      	ldr	r2, [pc, #436]	@ (8003b94 <HAL_DMA_IRQHandler+0xca4>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d00e      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a6b      	ldr	r2, [pc, #428]	@ (8003b98 <HAL_DMA_IRQHandler+0xca8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d009      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a6a      	ldr	r2, [pc, #424]	@ (8003b9c <HAL_DMA_IRQHandler+0xcac>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d004      	beq.n	8003a02 <HAL_DMA_IRQHandler+0xb12>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	@ (8003ba0 <HAL_DMA_IRQHandler+0xcb0>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d108      	bne.n	8003a14 <HAL_DMA_IRQHandler+0xb24>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0208 	bic.w	r2, r2, #8
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e007      	b.n	8003a24 <HAL_DMA_IRQHandler+0xb34>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0204 	bic.w	r2, r2, #4
 8003a22:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8165 	beq.w	8003cf8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a36:	e15f      	b.n	8003cf8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3c:	f003 031f 	and.w	r3, r3, #31
 8003a40:	2202      	movs	r2, #2
 8003a42:	409a      	lsls	r2, r3
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80c5 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xce8>
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80bf 	beq.w	8003bd8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5e:	f003 031f 	and.w	r3, r3, #31
 8003a62:	2202      	movs	r2, #2
 8003a64:	409a      	lsls	r2, r3
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d018      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 813a 	beq.w	8003cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a90:	e134      	b.n	8003cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 8130 	beq.w	8003cfc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aa4:	e12a      	b.n	8003cfc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f003 0320 	and.w	r3, r3, #32
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f040 8089 	bne.w	8003bc4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b64 <HAL_DMA_IRQHandler+0xc74>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d04a      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a29      	ldr	r2, [pc, #164]	@ (8003b68 <HAL_DMA_IRQHandler+0xc78>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d045      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a28      	ldr	r2, [pc, #160]	@ (8003b6c <HAL_DMA_IRQHandler+0xc7c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d040      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a26      	ldr	r2, [pc, #152]	@ (8003b70 <HAL_DMA_IRQHandler+0xc80>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d03b      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a25      	ldr	r2, [pc, #148]	@ (8003b74 <HAL_DMA_IRQHandler+0xc84>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d036      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a23      	ldr	r2, [pc, #140]	@ (8003b78 <HAL_DMA_IRQHandler+0xc88>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d031      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_DMA_IRQHandler+0xc8c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d02c      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a20      	ldr	r2, [pc, #128]	@ (8003b80 <HAL_DMA_IRQHandler+0xc90>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d027      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a1f      	ldr	r2, [pc, #124]	@ (8003b84 <HAL_DMA_IRQHandler+0xc94>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d022      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	@ (8003b88 <HAL_DMA_IRQHandler+0xc98>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d01d      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003b8c <HAL_DMA_IRQHandler+0xc9c>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a1a      	ldr	r2, [pc, #104]	@ (8003b90 <HAL_DMA_IRQHandler+0xca0>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d013      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <HAL_DMA_IRQHandler+0xca4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00e      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	@ (8003b98 <HAL_DMA_IRQHandler+0xca8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d009      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a16      	ldr	r2, [pc, #88]	@ (8003b9c <HAL_DMA_IRQHandler+0xcac>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d004      	beq.n	8003b52 <HAL_DMA_IRQHandler+0xc62>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a14      	ldr	r2, [pc, #80]	@ (8003ba0 <HAL_DMA_IRQHandler+0xcb0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d128      	bne.n	8003ba4 <HAL_DMA_IRQHandler+0xcb4>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 0214 	bic.w	r2, r2, #20
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e027      	b.n	8003bb4 <HAL_DMA_IRQHandler+0xcc4>
 8003b64:	40020010 	.word	0x40020010
 8003b68:	40020028 	.word	0x40020028
 8003b6c:	40020040 	.word	0x40020040
 8003b70:	40020058 	.word	0x40020058
 8003b74:	40020070 	.word	0x40020070
 8003b78:	40020088 	.word	0x40020088
 8003b7c:	400200a0 	.word	0x400200a0
 8003b80:	400200b8 	.word	0x400200b8
 8003b84:	40020410 	.word	0x40020410
 8003b88:	40020428 	.word	0x40020428
 8003b8c:	40020440 	.word	0x40020440
 8003b90:	40020458 	.word	0x40020458
 8003b94:	40020470 	.word	0x40020470
 8003b98:	40020488 	.word	0x40020488
 8003b9c:	400204a0 	.word	0x400204a0
 8003ba0:	400204b8 	.word	0x400204b8
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 020a 	bic.w	r2, r2, #10
 8003bb2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8097 	beq.w	8003cfc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003bd6:	e091      	b.n	8003cfc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bdc:	f003 031f 	and.w	r3, r3, #31
 8003be0:	2208      	movs	r2, #8
 8003be2:	409a      	lsls	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 8088 	beq.w	8003cfe <HAL_DMA_IRQHandler+0xe0e>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8082 	beq.w	8003cfe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a41      	ldr	r2, [pc, #260]	@ (8003d04 <HAL_DMA_IRQHandler+0xe14>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a3f      	ldr	r2, [pc, #252]	@ (8003d08 <HAL_DMA_IRQHandler+0xe18>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a3e      	ldr	r2, [pc, #248]	@ (8003d0c <HAL_DMA_IRQHandler+0xe1c>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a3c      	ldr	r2, [pc, #240]	@ (8003d10 <HAL_DMA_IRQHandler+0xe20>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a3b      	ldr	r2, [pc, #236]	@ (8003d14 <HAL_DMA_IRQHandler+0xe24>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a39      	ldr	r2, [pc, #228]	@ (8003d18 <HAL_DMA_IRQHandler+0xe28>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a38      	ldr	r2, [pc, #224]	@ (8003d1c <HAL_DMA_IRQHandler+0xe2c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a36      	ldr	r2, [pc, #216]	@ (8003d20 <HAL_DMA_IRQHandler+0xe30>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a35      	ldr	r2, [pc, #212]	@ (8003d24 <HAL_DMA_IRQHandler+0xe34>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a33      	ldr	r2, [pc, #204]	@ (8003d28 <HAL_DMA_IRQHandler+0xe38>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a32      	ldr	r2, [pc, #200]	@ (8003d2c <HAL_DMA_IRQHandler+0xe3c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a30      	ldr	r2, [pc, #192]	@ (8003d30 <HAL_DMA_IRQHandler+0xe40>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a2f      	ldr	r2, [pc, #188]	@ (8003d34 <HAL_DMA_IRQHandler+0xe44>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <HAL_DMA_IRQHandler+0xe48>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8003d3c <HAL_DMA_IRQHandler+0xe4c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_IRQHandler+0xdaa>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a2a      	ldr	r2, [pc, #168]	@ (8003d40 <HAL_DMA_IRQHandler+0xe50>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d108      	bne.n	8003cac <HAL_DMA_IRQHandler+0xdbc>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 021c 	bic.w	r2, r2, #28
 8003ca8:	601a      	str	r2, [r3, #0]
 8003caa:	e007      	b.n	8003cbc <HAL_DMA_IRQHandler+0xdcc>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f022 020e 	bic.w	r2, r2, #14
 8003cba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	f003 031f 	and.w	r3, r3, #31
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	409a      	lsls	r2, r3
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d009      	beq.n	8003cfe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e004      	b.n	8003cfe <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003cf4:	bf00      	nop
 8003cf6:	e002      	b.n	8003cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf8:	bf00      	nop
 8003cfa:	e000      	b.n	8003cfe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cfc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003cfe:	3728      	adds	r7, #40	@ 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	40020010 	.word	0x40020010
 8003d08:	40020028 	.word	0x40020028
 8003d0c:	40020040 	.word	0x40020040
 8003d10:	40020058 	.word	0x40020058
 8003d14:	40020070 	.word	0x40020070
 8003d18:	40020088 	.word	0x40020088
 8003d1c:	400200a0 	.word	0x400200a0
 8003d20:	400200b8 	.word	0x400200b8
 8003d24:	40020410 	.word	0x40020410
 8003d28:	40020428 	.word	0x40020428
 8003d2c:	40020440 	.word	0x40020440
 8003d30:	40020458 	.word	0x40020458
 8003d34:	40020470 	.word	0x40020470
 8003d38:	40020488 	.word	0x40020488
 8003d3c:	400204a0 	.word	0x400204a0
 8003d40:	400204b8 	.word	0x400204b8

08003d44 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003d52:	b2db      	uxtb	r3, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a42      	ldr	r2, [pc, #264]	@ (8003e78 <DMA_CalcBaseAndBitshift+0x118>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d04a      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a41      	ldr	r2, [pc, #260]	@ (8003e7c <DMA_CalcBaseAndBitshift+0x11c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d045      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3f      	ldr	r2, [pc, #252]	@ (8003e80 <DMA_CalcBaseAndBitshift+0x120>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d040      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e84 <DMA_CalcBaseAndBitshift+0x124>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d03b      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a3c      	ldr	r2, [pc, #240]	@ (8003e88 <DMA_CalcBaseAndBitshift+0x128>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d036      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a3b      	ldr	r2, [pc, #236]	@ (8003e8c <DMA_CalcBaseAndBitshift+0x12c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d031      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a39      	ldr	r2, [pc, #228]	@ (8003e90 <DMA_CalcBaseAndBitshift+0x130>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d02c      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a38      	ldr	r2, [pc, #224]	@ (8003e94 <DMA_CalcBaseAndBitshift+0x134>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d027      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a36      	ldr	r2, [pc, #216]	@ (8003e98 <DMA_CalcBaseAndBitshift+0x138>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d022      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a35      	ldr	r2, [pc, #212]	@ (8003e9c <DMA_CalcBaseAndBitshift+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d01d      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ea0 <DMA_CalcBaseAndBitshift+0x140>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d018      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <DMA_CalcBaseAndBitshift+0x144>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d013      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a30      	ldr	r2, [pc, #192]	@ (8003ea8 <DMA_CalcBaseAndBitshift+0x148>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d00e      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2f      	ldr	r2, [pc, #188]	@ (8003eac <DMA_CalcBaseAndBitshift+0x14c>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d009      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb0 <DMA_CalcBaseAndBitshift+0x150>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d004      	beq.n	8003e08 <DMA_CalcBaseAndBitshift+0xa8>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <DMA_CalcBaseAndBitshift+0x154>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d101      	bne.n	8003e0c <DMA_CalcBaseAndBitshift+0xac>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <DMA_CalcBaseAndBitshift+0xae>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d024      	beq.n	8003e5c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	3b10      	subs	r3, #16
 8003e1a:	4a27      	ldr	r2, [pc, #156]	@ (8003eb8 <DMA_CalcBaseAndBitshift+0x158>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	091b      	lsrs	r3, r3, #4
 8003e22:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f003 0307 	and.w	r3, r3, #7
 8003e2a:	4a24      	ldr	r2, [pc, #144]	@ (8003ebc <DMA_CalcBaseAndBitshift+0x15c>)
 8003e2c:	5cd3      	ldrb	r3, [r2, r3]
 8003e2e:	461a      	mov	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2b03      	cmp	r3, #3
 8003e38:	d908      	bls.n	8003e4c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	4b1f      	ldr	r3, [pc, #124]	@ (8003ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	1d1a      	adds	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e4a:	e00d      	b.n	8003e68 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	461a      	mov	r2, r3
 8003e52:	4b1b      	ldr	r3, [pc, #108]	@ (8003ec0 <DMA_CalcBaseAndBitshift+0x160>)
 8003e54:	4013      	ands	r3, r2
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e5a:	e005      	b.n	8003e68 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3714      	adds	r7, #20
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr
 8003e78:	40020010 	.word	0x40020010
 8003e7c:	40020028 	.word	0x40020028
 8003e80:	40020040 	.word	0x40020040
 8003e84:	40020058 	.word	0x40020058
 8003e88:	40020070 	.word	0x40020070
 8003e8c:	40020088 	.word	0x40020088
 8003e90:	400200a0 	.word	0x400200a0
 8003e94:	400200b8 	.word	0x400200b8
 8003e98:	40020410 	.word	0x40020410
 8003e9c:	40020428 	.word	0x40020428
 8003ea0:	40020440 	.word	0x40020440
 8003ea4:	40020458 	.word	0x40020458
 8003ea8:	40020470 	.word	0x40020470
 8003eac:	40020488 	.word	0x40020488
 8003eb0:	400204a0 	.word	0x400204a0
 8003eb4:	400204b8 	.word	0x400204b8
 8003eb8:	aaaaaaab 	.word	0xaaaaaaab
 8003ebc:	0800fb3c 	.word	0x0800fb3c
 8003ec0:	fffffc00 	.word	0xfffffc00

08003ec4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d120      	bne.n	8003f1a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d858      	bhi.n	8003f92 <DMA_CheckFifoParam+0xce>
 8003ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <DMA_CheckFifoParam+0x24>)
 8003ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee6:	bf00      	nop
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f0b 	.word	0x08003f0b
 8003ef0:	08003ef9 	.word	0x08003ef9
 8003ef4:	08003f93 	.word	0x08003f93
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003efc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d048      	beq.n	8003f96 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f08:	e045      	b.n	8003f96 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f12:	d142      	bne.n	8003f9a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f18:	e03f      	b.n	8003f9a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f22:	d123      	bne.n	8003f6c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d838      	bhi.n	8003f9e <DMA_CheckFifoParam+0xda>
 8003f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003f34 <DMA_CheckFifoParam+0x70>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f4b 	.word	0x08003f4b
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003f5d 	.word	0x08003f5d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
        break;
 8003f48:	e030      	b.n	8003fac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d025      	beq.n	8003fa2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f5a:	e022      	b.n	8003fa2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003f64:	d11f      	bne.n	8003fa6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003f6a:	e01c      	b.n	8003fa6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d902      	bls.n	8003f7a <DMA_CheckFifoParam+0xb6>
 8003f74:	2b03      	cmp	r3, #3
 8003f76:	d003      	beq.n	8003f80 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003f78:	e018      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	73fb      	strb	r3, [r7, #15]
        break;
 8003f7e:	e015      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00e      	beq.n	8003faa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8003f90:	e00b      	b.n	8003faa <DMA_CheckFifoParam+0xe6>
        break;
 8003f92:	bf00      	nop
 8003f94:	e00a      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f96:	bf00      	nop
 8003f98:	e008      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f9a:	bf00      	nop
 8003f9c:	e006      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003f9e:	bf00      	nop
 8003fa0:	e004      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003fa2:	bf00      	nop
 8003fa4:	e002      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
        break;
 8003fa6:	bf00      	nop
 8003fa8:	e000      	b.n	8003fac <DMA_CheckFifoParam+0xe8>
    break;
 8003faa:	bf00      	nop
    }
  }

  return status;
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop

08003fbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a38      	ldr	r2, [pc, #224]	@ (80040b0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d01d      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a35      	ldr	r2, [pc, #212]	@ (80040b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a33      	ldr	r2, [pc, #204]	@ (80040bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a32      	ldr	r2, [pc, #200]	@ (80040c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a30      	ldr	r2, [pc, #192]	@ (80040c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a2f      	ldr	r2, [pc, #188]	@ (80040c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a2d      	ldr	r2, [pc, #180]	@ (80040cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d101      	bne.n	800401e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01a      	beq.n	800405a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	3b08      	subs	r3, #8
 800402c:	4a28      	ldr	r2, [pc, #160]	@ (80040d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	091b      	lsrs	r3, r3, #4
 8004034:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4b26      	ldr	r3, [pc, #152]	@ (80040d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800403a:	4413      	add	r3, r2
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	461a      	mov	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a24      	ldr	r2, [pc, #144]	@ (80040d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004048:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f003 031f 	and.w	r3, r3, #31
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004058:	e024      	b.n	80040a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	3b10      	subs	r3, #16
 8004062:	4a1e      	ldr	r2, [pc, #120]	@ (80040dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004064:	fba2 2303 	umull	r2, r3, r2, r3
 8004068:	091b      	lsrs	r3, r3, #4
 800406a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4a1c      	ldr	r2, [pc, #112]	@ (80040e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d806      	bhi.n	8004082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	4a1b      	ldr	r2, [pc, #108]	@ (80040e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d902      	bls.n	8004082 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3308      	adds	r3, #8
 8004080:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004082:	68fa      	ldr	r2, [r7, #12]
 8004084:	4b18      	ldr	r3, [pc, #96]	@ (80040e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	461a      	mov	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	4a16      	ldr	r2, [pc, #88]	@ (80040ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004094:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2201      	movs	r2, #1
 800409e:	409a      	lsls	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr
 80040b0:	58025408 	.word	0x58025408
 80040b4:	5802541c 	.word	0x5802541c
 80040b8:	58025430 	.word	0x58025430
 80040bc:	58025444 	.word	0x58025444
 80040c0:	58025458 	.word	0x58025458
 80040c4:	5802546c 	.word	0x5802546c
 80040c8:	58025480 	.word	0x58025480
 80040cc:	58025494 	.word	0x58025494
 80040d0:	cccccccd 	.word	0xcccccccd
 80040d4:	16009600 	.word	0x16009600
 80040d8:	58025880 	.word	0x58025880
 80040dc:	aaaaaaab 	.word	0xaaaaaaab
 80040e0:	400204b8 	.word	0x400204b8
 80040e4:	4002040f 	.word	0x4002040f
 80040e8:	10008200 	.word	0x10008200
 80040ec:	40020880 	.word	0x40020880

080040f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d04a      	beq.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2b08      	cmp	r3, #8
 800410a:	d847      	bhi.n	800419c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a25      	ldr	r2, [pc, #148]	@ (80041a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a24      	ldr	r2, [pc, #144]	@ (80041ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d01d      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a22      	ldr	r2, [pc, #136]	@ (80041b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a21      	ldr	r2, [pc, #132]	@ (80041b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1f      	ldr	r2, [pc, #124]	@ (80041b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1e      	ldr	r2, [pc, #120]	@ (80041bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1c      	ldr	r2, [pc, #112]	@ (80041c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a1b      	ldr	r2, [pc, #108]	@ (80041c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d101      	bne.n	8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	461a      	mov	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a15      	ldr	r2, [pc, #84]	@ (80041cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004178:	671a      	str	r2, [r3, #112]	@ 0x70
 800417a:	e009      	b.n	8004190 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800417c:	68fa      	ldr	r2, [r7, #12]
 800417e:	4b14      	ldr	r3, [pc, #80]	@ (80041d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	461a      	mov	r2, r3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a11      	ldr	r2, [pc, #68]	@ (80041d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800418e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3b01      	subs	r3, #1
 8004194:	2201      	movs	r2, #1
 8004196:	409a      	lsls	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	58025408 	.word	0x58025408
 80041ac:	5802541c 	.word	0x5802541c
 80041b0:	58025430 	.word	0x58025430
 80041b4:	58025444 	.word	0x58025444
 80041b8:	58025458 	.word	0x58025458
 80041bc:	5802546c 	.word	0x5802546c
 80041c0:	58025480 	.word	0x58025480
 80041c4:	58025494 	.word	0x58025494
 80041c8:	1600963f 	.word	0x1600963f
 80041cc:	58025940 	.word	0x58025940
 80041d0:	1000823f 	.word	0x1000823f
 80041d4:	40020940 	.word	0x40020940

080041d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041d8:	b480      	push	{r7}
 80041da:	b089      	sub	sp, #36	@ 0x24
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80041e6:	4b89      	ldr	r3, [pc, #548]	@ (800440c <HAL_GPIO_Init+0x234>)
 80041e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80041ea:	e194      	b.n	8004516 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	2101      	movs	r1, #1
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	fa01 f303 	lsl.w	r3, r1, r3
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f000 8186 	beq.w	8004510 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f003 0303 	and.w	r3, r3, #3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d005      	beq.n	800421c <HAL_GPIO_Init+0x44>
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f003 0303 	and.w	r3, r3, #3
 8004218:	2b02      	cmp	r3, #2
 800421a:	d130      	bne.n	800427e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68da      	ldr	r2, [r3, #12]
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	005b      	lsls	r3, r3, #1
 800423c:	fa02 f303 	lsl.w	r3, r2, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4313      	orrs	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004252:	2201      	movs	r2, #1
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	fa02 f303 	lsl.w	r3, r2, r3
 800425a:	43db      	mvns	r3, r3
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4013      	ands	r3, r2
 8004260:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	091b      	lsrs	r3, r3, #4
 8004268:	f003 0201 	and.w	r2, r3, #1
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	fa02 f303 	lsl.w	r3, r2, r3
 8004272:	69ba      	ldr	r2, [r7, #24]
 8004274:	4313      	orrs	r3, r2
 8004276:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f003 0303 	and.w	r3, r3, #3
 8004286:	2b03      	cmp	r3, #3
 8004288:	d017      	beq.n	80042ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	2203      	movs	r2, #3
 8004296:	fa02 f303 	lsl.w	r3, r2, r3
 800429a:	43db      	mvns	r3, r3
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	4013      	ands	r3, r2
 80042a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	689a      	ldr	r2, [r3, #8]
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	005b      	lsls	r3, r3, #1
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	69ba      	ldr	r2, [r7, #24]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	69ba      	ldr	r2, [r7, #24]
 80042b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d123      	bne.n	800430e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	08da      	lsrs	r2, r3, #3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3208      	adds	r2, #8
 80042ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80042d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f003 0307 	and.w	r3, r3, #7
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	220f      	movs	r2, #15
 80042de:	fa02 f303 	lsl.w	r3, r2, r3
 80042e2:	43db      	mvns	r3, r3
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	4013      	ands	r3, r2
 80042e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004300:	69fb      	ldr	r3, [r7, #28]
 8004302:	08da      	lsrs	r2, r3, #3
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3208      	adds	r2, #8
 8004308:	69b9      	ldr	r1, [r7, #24]
 800430a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	2203      	movs	r2, #3
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4013      	ands	r3, r2
 8004324:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f003 0203 	and.w	r2, r3, #3
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80e0 	beq.w	8004510 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004350:	4b2f      	ldr	r3, [pc, #188]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004352:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004356:	4a2e      	ldr	r2, [pc, #184]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004358:	f043 0302 	orr.w	r3, r3, #2
 800435c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004360:	4b2b      	ldr	r3, [pc, #172]	@ (8004410 <HAL_GPIO_Init+0x238>)
 8004362:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800436e:	4a29      	ldr	r2, [pc, #164]	@ (8004414 <HAL_GPIO_Init+0x23c>)
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	3302      	adds	r3, #2
 8004376:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f003 0303 	and.w	r3, r3, #3
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	220f      	movs	r2, #15
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	43db      	mvns	r3, r3
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	4013      	ands	r3, r2
 8004390:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a20      	ldr	r2, [pc, #128]	@ (8004418 <HAL_GPIO_Init+0x240>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d052      	beq.n	8004440 <HAL_GPIO_Init+0x268>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1f      	ldr	r2, [pc, #124]	@ (800441c <HAL_GPIO_Init+0x244>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d031      	beq.n	8004406 <HAL_GPIO_Init+0x22e>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a1e      	ldr	r2, [pc, #120]	@ (8004420 <HAL_GPIO_Init+0x248>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02b      	beq.n	8004402 <HAL_GPIO_Init+0x22a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	@ (8004424 <HAL_GPIO_Init+0x24c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d025      	beq.n	80043fe <HAL_GPIO_Init+0x226>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a1c      	ldr	r2, [pc, #112]	@ (8004428 <HAL_GPIO_Init+0x250>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <HAL_GPIO_Init+0x222>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1b      	ldr	r2, [pc, #108]	@ (800442c <HAL_GPIO_Init+0x254>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d019      	beq.n	80043f6 <HAL_GPIO_Init+0x21e>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004430 <HAL_GPIO_Init+0x258>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d013      	beq.n	80043f2 <HAL_GPIO_Init+0x21a>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	@ (8004434 <HAL_GPIO_Init+0x25c>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d00d      	beq.n	80043ee <HAL_GPIO_Init+0x216>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	@ (8004438 <HAL_GPIO_Init+0x260>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d007      	beq.n	80043ea <HAL_GPIO_Init+0x212>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a17      	ldr	r2, [pc, #92]	@ (800443c <HAL_GPIO_Init+0x264>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d101      	bne.n	80043e6 <HAL_GPIO_Init+0x20e>
 80043e2:	2309      	movs	r3, #9
 80043e4:	e02d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043e6:	230a      	movs	r3, #10
 80043e8:	e02b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ea:	2308      	movs	r3, #8
 80043ec:	e029      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043ee:	2307      	movs	r3, #7
 80043f0:	e027      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f2:	2306      	movs	r3, #6
 80043f4:	e025      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043f6:	2305      	movs	r3, #5
 80043f8:	e023      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fa:	2304      	movs	r3, #4
 80043fc:	e021      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 80043fe:	2303      	movs	r3, #3
 8004400:	e01f      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004402:	2302      	movs	r3, #2
 8004404:	e01d      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 8004406:	2301      	movs	r3, #1
 8004408:	e01b      	b.n	8004442 <HAL_GPIO_Init+0x26a>
 800440a:	bf00      	nop
 800440c:	58000080 	.word	0x58000080
 8004410:	58024400 	.word	0x58024400
 8004414:	58000400 	.word	0x58000400
 8004418:	58020000 	.word	0x58020000
 800441c:	58020400 	.word	0x58020400
 8004420:	58020800 	.word	0x58020800
 8004424:	58020c00 	.word	0x58020c00
 8004428:	58021000 	.word	0x58021000
 800442c:	58021400 	.word	0x58021400
 8004430:	58021800 	.word	0x58021800
 8004434:	58021c00 	.word	0x58021c00
 8004438:	58022000 	.word	0x58022000
 800443c:	58022400 	.word	0x58022400
 8004440:	2300      	movs	r3, #0
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	f002 0203 	and.w	r2, r2, #3
 8004448:	0092      	lsls	r2, r2, #2
 800444a:	4093      	lsls	r3, r2
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004452:	4938      	ldr	r1, [pc, #224]	@ (8004534 <HAL_GPIO_Init+0x35c>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	69ba      	ldr	r2, [r7, #24]
 800445c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004460:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	43db      	mvns	r3, r3
 800446c:	69ba      	ldr	r2, [r7, #24]
 800446e:	4013      	ands	r3, r2
 8004470:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004486:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800448e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80044b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	43db      	mvns	r3, r3
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	4013      	ands	r3, r2
 80044f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	4313      	orrs	r3, r2
 8004508:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	3301      	adds	r3, #1
 8004514:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	fa22 f303 	lsr.w	r3, r2, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	f47f ae63 	bne.w	80041ec <HAL_GPIO_Init+0x14>
  }
}
 8004526:	bf00      	nop
 8004528:	bf00      	nop
 800452a:	3724      	adds	r7, #36	@ 0x24
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	58000400 	.word	0x58000400

08004538 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08b      	b.n	8004662 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fc fc5a 	bl	8000e18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	@ 0x24
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f022 0201 	bic.w	r2, r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004588:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689a      	ldr	r2, [r3, #8]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004598:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	68db      	ldr	r3, [r3, #12]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045ae:	609a      	str	r2, [r3, #8]
 80045b0:	e006      	b.n	80045c0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80045be:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d108      	bne.n	80045da <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685a      	ldr	r2, [r3, #4]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045d6:	605a      	str	r2, [r3, #4]
 80045d8:	e007      	b.n	80045ea <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6859      	ldr	r1, [r3, #4]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b1d      	ldr	r3, [pc, #116]	@ (800466c <HAL_I2C_Init+0x134>)
 80045f6:	430b      	orrs	r3, r1
 80045f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68da      	ldr	r2, [r3, #12]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004608:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	691a      	ldr	r2, [r3, #16]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	695b      	ldr	r3, [r3, #20]
 8004612:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69d9      	ldr	r1, [r3, #28]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a1a      	ldr	r2, [r3, #32]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f042 0201 	orr.w	r2, r2, #1
 8004642:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2220      	movs	r2, #32
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	02008000 	.word	0x02008000

08004670 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b088      	sub	sp, #32
 8004674:	af02      	add	r7, sp, #8
 8004676:	60f8      	str	r0, [r7, #12]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	461a      	mov	r2, r3
 800467c:	460b      	mov	r3, r1
 800467e:	817b      	strh	r3, [r7, #10]
 8004680:	4613      	mov	r3, r2
 8004682:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	f040 80fd 	bne.w	800488c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004698:	2b01      	cmp	r3, #1
 800469a:	d101      	bne.n	80046a0 <HAL_I2C_Master_Transmit+0x30>
 800469c:	2302      	movs	r3, #2
 800469e:	e0f6      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80046a8:	f7fd f99e 	bl	80019e8 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2319      	movs	r3, #25
 80046b4:	2201      	movs	r2, #1
 80046b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f001 ffa9 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80046c0:	4603      	mov	r3, r0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d001      	beq.n	80046ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e0e1      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2221      	movs	r2, #33	@ 0x21
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2210      	movs	r2, #16
 80046d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	893a      	ldrh	r2, [r7, #8]
 80046ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	2bff      	cmp	r3, #255	@ 0xff
 80046fa:	d906      	bls.n	800470a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	22ff      	movs	r2, #255	@ 0xff
 8004700:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004702:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004706:	617b      	str	r3, [r7, #20]
 8004708:	e007      	b.n	800471a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29a      	uxth	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004714:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004718:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471e:	2b00      	cmp	r3, #0
 8004720:	d024      	beq.n	800476c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004726:	781a      	ldrb	r2, [r3, #0]
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004732:	1c5a      	adds	r2, r3, #1
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800473c:	b29b      	uxth	r3, r3
 800473e:	3b01      	subs	r3, #1
 8004740:	b29a      	uxth	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800474a:	3b01      	subs	r3, #1
 800474c:	b29a      	uxth	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004756:	b2db      	uxtb	r3, r3
 8004758:	3301      	adds	r3, #1
 800475a:	b2da      	uxtb	r2, r3
 800475c:	8979      	ldrh	r1, [r7, #10]
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <HAL_I2C_Master_Transmit+0x228>)
 8004760:	9300      	str	r3, [sp, #0]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	68f8      	ldr	r0, [r7, #12]
 8004766:	f002 f9a3 	bl	8006ab0 <I2C_TransferConfig>
 800476a:	e066      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004770:	b2da      	uxtb	r2, r3
 8004772:	8979      	ldrh	r1, [r7, #10]
 8004774:	4b48      	ldr	r3, [pc, #288]	@ (8004898 <HAL_I2C_Master_Transmit+0x228>)
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	68f8      	ldr	r0, [r7, #12]
 800477c:	f002 f998 	bl	8006ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004780:	e05b      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	6a39      	ldr	r1, [r7, #32]
 8004786:	68f8      	ldr	r0, [r7, #12]
 8004788:	f001 ff9c 	bl	80066c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800478c:	4603      	mov	r3, r0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e07b      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479a:	781a      	ldrb	r2, [r3, #0]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	3b01      	subs	r3, #1
 80047b4:	b29a      	uxth	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047be:	3b01      	subs	r3, #1
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d034      	beq.n	800483a <HAL_I2C_Master_Transmit+0x1ca>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d130      	bne.n	800483a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	2200      	movs	r2, #0
 80047e0:	2180      	movs	r1, #128	@ 0x80
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f001 ff15 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e04d      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2bff      	cmp	r3, #255	@ 0xff
 80047fa:	d90e      	bls.n	800481a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	22ff      	movs	r2, #255	@ 0xff
 8004800:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004806:	b2da      	uxtb	r2, r3
 8004808:	8979      	ldrh	r1, [r7, #10]
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f002 f94c 	bl	8006ab0 <I2C_TransferConfig>
 8004818:	e00f      	b.n	800483a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004828:	b2da      	uxtb	r2, r3
 800482a:	8979      	ldrh	r1, [r7, #10]
 800482c:	2300      	movs	r3, #0
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f002 f93b 	bl	8006ab0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800483e:	b29b      	uxth	r3, r3
 8004840:	2b00      	cmp	r3, #0
 8004842:	d19e      	bne.n	8004782 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	6a39      	ldr	r1, [r7, #32]
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f001 ff82 	bl	8006752 <I2C_WaitOnSTOPFlagUntilTimeout>
 800484e:	4603      	mov	r3, r0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d001      	beq.n	8004858 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	e01a      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2220      	movs	r2, #32
 800485e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	6859      	ldr	r1, [r3, #4]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b0c      	ldr	r3, [pc, #48]	@ (800489c <HAL_I2C_Master_Transmit+0x22c>)
 800486c:	400b      	ands	r3, r1
 800486e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	80002000 	.word	0x80002000
 800489c:	fe00e800 	.word	0xfe00e800

080048a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	461a      	mov	r2, r3
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
 80048b0:	4613      	mov	r3, r2
 80048b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b20      	cmp	r3, #32
 80048be:	f040 80db 	bne.w	8004a78 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d101      	bne.n	80048d0 <HAL_I2C_Master_Receive+0x30>
 80048cc:	2302      	movs	r3, #2
 80048ce:	e0d4      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80048d8:	f7fd f886 	bl	80019e8 <HAL_GetTick>
 80048dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	9300      	str	r3, [sp, #0]
 80048e2:	2319      	movs	r3, #25
 80048e4:	2201      	movs	r2, #1
 80048e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f001 fe91 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0bf      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2222      	movs	r2, #34	@ 0x22
 80048fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2210      	movs	r2, #16
 8004906:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2200      	movs	r2, #0
 800490e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	893a      	ldrh	r2, [r7, #8]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004926:	b29b      	uxth	r3, r3
 8004928:	2bff      	cmp	r3, #255	@ 0xff
 800492a:	d90e      	bls.n	800494a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	22ff      	movs	r2, #255	@ 0xff
 8004930:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004936:	b2da      	uxtb	r2, r3
 8004938:	8979      	ldrh	r1, [r7, #10]
 800493a:	4b52      	ldr	r3, [pc, #328]	@ (8004a84 <HAL_I2C_Master_Receive+0x1e4>)
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f002 f8b4 	bl	8006ab0 <I2C_TransferConfig>
 8004948:	e06d      	b.n	8004a26 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004958:	b2da      	uxtb	r2, r3
 800495a:	8979      	ldrh	r1, [r7, #10]
 800495c:	4b49      	ldr	r3, [pc, #292]	@ (8004a84 <HAL_I2C_Master_Receive+0x1e4>)
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004964:	68f8      	ldr	r0, [r7, #12]
 8004966:	f002 f8a3 	bl	8006ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800496a:	e05c      	b.n	8004a26 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800496c:	697a      	ldr	r2, [r7, #20]
 800496e:	6a39      	ldr	r1, [r7, #32]
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f001 ff31 	bl	80067d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	e07c      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049b6:	b29b      	uxth	r3, r3
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d034      	beq.n	8004a26 <HAL_I2C_Master_Receive+0x186>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d130      	bne.n	8004a26 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2200      	movs	r2, #0
 80049cc:	2180      	movs	r1, #128	@ 0x80
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f001 fe1f 	bl	8006612 <I2C_WaitOnFlagUntilTimeout>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d001      	beq.n	80049de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e04d      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049e2:	b29b      	uxth	r3, r3
 80049e4:	2bff      	cmp	r3, #255	@ 0xff
 80049e6:	d90e      	bls.n	8004a06 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	22ff      	movs	r2, #255	@ 0xff
 80049ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	8979      	ldrh	r1, [r7, #10]
 80049f6:	2300      	movs	r3, #0
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f002 f856 	bl	8006ab0 <I2C_TransferConfig>
 8004a04:	e00f      	b.n	8004a26 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	8979      	ldrh	r1, [r7, #10]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	9300      	str	r3, [sp, #0]
 8004a1c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f002 f845 	bl	8006ab0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a2a:	b29b      	uxth	r3, r3
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d19d      	bne.n	800496c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a30:	697a      	ldr	r2, [r7, #20]
 8004a32:	6a39      	ldr	r1, [r7, #32]
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f001 fe8c 	bl	8006752 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e01a      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b0c      	ldr	r3, [pc, #48]	@ (8004a88 <HAL_I2C_Master_Receive+0x1e8>)
 8004a58:	400b      	ands	r3, r1
 8004a5a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	2220      	movs	r2, #32
 8004a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	80002400 	.word	0x80002400
 8004a88:	fe00e800 	.word	0xfe00e800

08004a8c <HAL_I2C_Master_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	607a      	str	r2, [r7, #4]
 8004a96:	461a      	mov	r2, r3
 8004a98:	460b      	mov	r3, r1
 8004a9a:	817b      	strh	r3, [r7, #10]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	2b20      	cmp	r3, #32
 8004aaa:	d17c      	bne.n	8004ba6 <HAL_I2C_Master_Transmit_IT+0x11a>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ab6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004aba:	d101      	bne.n	8004ac0 <HAL_I2C_Master_Transmit_IT+0x34>
    {
      return HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
 8004abe:	e073      	b.n	8004ba8 <HAL_I2C_Master_Transmit_IT+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_I2C_Master_Transmit_IT+0x42>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e06c      	b.n	8004ba8 <HAL_I2C_Master_Transmit_IT+0x11c>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2221      	movs	r2, #33	@ 0x21
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2210      	movs	r2, #16
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	893a      	ldrh	r2, [r7, #8]
 8004af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	4a2d      	ldr	r2, [pc, #180]	@ (8004bb0 <HAL_I2C_Master_Transmit_IT+0x124>)
 8004afc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4a2c      	ldr	r2, [pc, #176]	@ (8004bb4 <HAL_I2C_Master_Transmit_IT+0x128>)
 8004b02:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2bff      	cmp	r3, #255	@ 0xff
 8004b0c:	d906      	bls.n	8004b1c <HAL_I2C_Master_Transmit_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	22ff      	movs	r2, #255	@ 0xff
 8004b12:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004b14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e007      	b.n	8004b2c <HAL_I2C_Master_Transmit_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004b26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b2a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferSize > 0U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d024      	beq.n	8004b7e <HAL_I2C_Master_Transmit_IT+0xf2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b38:	781a      	ldrb	r2, [r3, #0]
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	b29a      	uxth	r2, r3
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	851a      	strh	r2, [r3, #40]	@ 0x28

      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	8979      	ldrh	r1, [r7, #10]
 8004b70:	4b11      	ldr	r3, [pc, #68]	@ (8004bb8 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	68f8      	ldr	r0, [r7, #12]
 8004b78:	f001 ff9a 	bl	8006ab0 <I2C_TransferConfig>
 8004b7c:	e009      	b.n	8004b92 <HAL_I2C_Master_Transmit_IT+0x106>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	8979      	ldrh	r1, [r7, #10]
 8004b86:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <HAL_I2C_Master_Transmit_IT+0x12c>)
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f001 ff8f 	bl	8006ab0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f001 ffb9 	bl	8006b14 <I2C_Enable_IRQ>

    return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	e000      	b.n	8004ba8 <HAL_I2C_Master_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ba6:	2302      	movs	r3, #2
  }
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3718      	adds	r7, #24
 8004bac:	46bd      	mov	sp, r7
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	ffff0000 	.word	0xffff0000
 8004bb4:	08004e2f 	.word	0x08004e2f
 8004bb8:	80002000 	.word	0x80002000

08004bbc <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b088      	sub	sp, #32
 8004bc0:	af02      	add	r7, sp, #8
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	460b      	mov	r3, r1
 8004bca:	817b      	strh	r3, [r7, #10]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b20      	cmp	r3, #32
 8004bda:	d153      	bne.n	8004c84 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bea:	d101      	bne.n	8004bf0 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8004bec:	2302      	movs	r3, #2
 8004bee:	e04a      	b.n	8004c86 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d101      	bne.n	8004bfe <HAL_I2C_Master_Receive_IT+0x42>
 8004bfa:	2302      	movs	r3, #2
 8004bfc:	e043      	b.n	8004c86 <HAL_I2C_Master_Receive_IT+0xca>
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2222      	movs	r2, #34	@ 0x22
 8004c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2210      	movs	r2, #16
 8004c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	893a      	ldrh	r2, [r7, #8]
 8004c26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a19      	ldr	r2, [pc, #100]	@ (8004c90 <HAL_I2C_Master_Receive_IT+0xd4>)
 8004c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a18      	ldr	r2, [pc, #96]	@ (8004c94 <HAL_I2C_Master_Receive_IT+0xd8>)
 8004c32:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	2bff      	cmp	r3, #255	@ 0xff
 8004c3c:	d906      	bls.n	8004c4c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	22ff      	movs	r2, #255	@ 0xff
 8004c42:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8004c44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e007      	b.n	8004c5c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8004c56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c5a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	8979      	ldrh	r1, [r7, #10]
 8004c64:	4b0c      	ldr	r3, [pc, #48]	@ (8004c98 <HAL_I2C_Master_Receive_IT+0xdc>)
 8004c66:	9300      	str	r3, [sp, #0]
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	68f8      	ldr	r0, [r7, #12]
 8004c6c:	f001 ff20 	bl	8006ab0 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c78:	2102      	movs	r1, #2
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f001 ff4a 	bl	8006b14 <I2C_Enable_IRQ>

    return HAL_OK;
 8004c80:	2300      	movs	r3, #0
 8004c82:	e000      	b.n	8004c86 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004c84:	2302      	movs	r3, #2
  }
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	ffff0000 	.word	0xffff0000
 8004c94:	08004e2f 	.word	0x08004e2f
 8004c98:	80002400 	.word	0x80002400

08004c9c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d005      	beq.n	8004cc8 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc0:	68ba      	ldr	r2, [r7, #8]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	4798      	blx	r3
  }
}
 8004cc8:	bf00      	nop
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00f      	beq.n	8004d12 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004d10:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00f      	beq.n	8004d3c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00a      	beq.n	8004d3c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	f043 0208 	orr.w	r2, r3, #8
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004d3a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00f      	beq.n	8004d66 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d00a      	beq.n	8004d66 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d54:	f043 0202 	orr.w	r2, r3, #2
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d64:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f003 030b 	and.w	r3, r3, #11
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8004d76:	68f9      	ldr	r1, [r7, #12]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f001 faf1 	bl	8006360 <I2C_ITError>
  }
}
 8004d7e:	bf00      	nop
 8004d80:	3718      	adds	r7, #24
 8004d82:	46bd      	mov	sp, r7
 8004d84:	bd80      	pop	{r7, pc}

08004d86 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d86:	b480      	push	{r7}
 8004d88:	b083      	sub	sp, #12
 8004d8a:	af00      	add	r7, sp, #0
 8004d8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d8e:	bf00      	nop
 8004d90:	370c      	adds	r7, #12
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr

08004d9a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d9a:	b480      	push	{r7}
 8004d9c:	b083      	sub	sp, #12
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr

08004dae <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b083      	sub	sp, #12
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
 8004db6:	460b      	mov	r3, r1
 8004db8:	70fb      	strb	r3, [r7, #3]
 8004dba:	4613      	mov	r3, r2
 8004dbc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b083      	sub	sp, #12
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr

08004df2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004df2:	b480      	push	{r7}
 8004df4:	b083      	sub	sp, #12
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004dfa:	bf00      	nop
 8004dfc:	370c      	adds	r7, #12
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b083      	sub	sp, #12
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004e22:	bf00      	nop
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr

08004e2e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004e2e:	b580      	push	{r7, lr}
 8004e30:	b088      	sub	sp, #32
 8004e32:	af02      	add	r7, sp, #8
 8004e34:	60f8      	str	r0, [r7, #12]
 8004e36:	60b9      	str	r1, [r7, #8]
 8004e38:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d101      	bne.n	8004e4c <I2C_Master_ISR_IT+0x1e>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e113      	b.n	8005074 <I2C_Master_ISR_IT+0x246>
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f003 0310 	and.w	r3, r3, #16
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d012      	beq.n	8004e84 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d00d      	beq.n	8004e84 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2210      	movs	r2, #16
 8004e6e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e74:	f043 0204 	orr.w	r2, r3, #4
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004e7c:	68f8      	ldr	r0, [r7, #12]
 8004e7e:	f001 fb86 	bl	800658e <I2C_Flush_TXDR>
 8004e82:	e0e4      	b.n	800504e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d022      	beq.n	8004ed4 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01d      	beq.n	8004ed4 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f023 0304 	bic.w	r3, r3, #4
 8004e9e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ed2:	e0bc      	b.n	800504e <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d128      	bne.n	8004f30 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d023      	beq.n	8004f30 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01e      	beq.n	8004f30 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f000 80a8 	beq.w	800504e <I2C_Master_ISR_IT+0x220>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f02:	781a      	ldrb	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0e:	1c5a      	adds	r2, r3, #1
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f18:	3b01      	subs	r3, #1
 8004f1a:	b29a      	uxth	r2, r3
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->XferCount != 0U)
 8004f2e:	e08e      	b.n	800504e <I2C_Master_ISR_IT+0x220>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d05c      	beq.n	8004ff4 <I2C_Master_ISR_IT+0x1c6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d057      	beq.n	8004ff4 <I2C_Master_ISR_IT+0x1c6>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d040      	beq.n	8004fd0 <I2C_Master_ISR_IT+0x1a2>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d13c      	bne.n	8004fd0 <I2C_Master_ISR_IT+0x1a2>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f62:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	2bff      	cmp	r3, #255	@ 0xff
 8004f6c:	d90e      	bls.n	8004f8c <I2C_Master_ISR_IT+0x15e>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	22ff      	movs	r2, #255	@ 0xff
 8004f72:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	8a79      	ldrh	r1, [r7, #18]
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	9300      	str	r3, [sp, #0]
 8004f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f001 fd93 	bl	8006ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004f8a:	e032      	b.n	8004ff2 <I2C_Master_ISR_IT+0x1c4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f9a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f9e:	d00b      	beq.n	8004fb8 <I2C_Master_ISR_IT+0x18a>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fa4:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004faa:	8a79      	ldrh	r1, [r7, #18]
 8004fac:	2000      	movs	r0, #0
 8004fae:	9000      	str	r0, [sp, #0]
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f001 fd7d 	bl	8006ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fb6:	e01c      	b.n	8004ff2 <I2C_Master_ISR_IT+0x1c4>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	8a79      	ldrh	r1, [r7, #18]
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	9300      	str	r3, [sp, #0]
 8004fc4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f001 fd71 	bl	8006ab0 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004fce:	e010      	b.n	8004ff2 <I2C_Master_ISR_IT+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004fde:	d003      	beq.n	8004fe8 <I2C_Master_ISR_IT+0x1ba>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8004fe0:	68f8      	ldr	r0, [r7, #12]
 8004fe2:	f000 fdb3 	bl	8005b4c <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004fe6:	e032      	b.n	800504e <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8004fe8:	2140      	movs	r1, #64	@ 0x40
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f001 f9b8 	bl	8006360 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ff0:	e02d      	b.n	800504e <I2C_Master_ISR_IT+0x220>
 8004ff2:	e02c      	b.n	800504e <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d027      	beq.n	800504e <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8005004:	2b00      	cmp	r3, #0
 8005006:	d022      	beq.n	800504e <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800500c:	b29b      	uxth	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d119      	bne.n	8005046 <I2C_Master_ISR_IT+0x218>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005020:	d015      	beq.n	800504e <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005026:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800502a:	d108      	bne.n	800503e <I2C_Master_ISR_IT+0x210>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800503a:	605a      	str	r2, [r3, #4]
 800503c:	e007      	b.n	800504e <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f000 fd84 	bl	8005b4c <I2C_ITMasterSeqCplt>
 8005044:	e003      	b.n	800504e <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005046:	2140      	movs	r1, #64	@ 0x40
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f001 f989 	bl	8006360 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	f003 0320 	and.w	r3, r3, #32
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800505e:	2b00      	cmp	r3, #0
 8005060:	d003      	beq.n	800506a <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8005062:	6979      	ldr	r1, [r7, #20]
 8005064:	68f8      	ldr	r0, [r7, #12]
 8005066:	f000 fe0b 	bl	8005c80 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005098:	2b01      	cmp	r3, #1
 800509a:	d101      	bne.n	80050a0 <I2C_Slave_ISR_IT+0x24>
 800509c:	2302      	movs	r3, #2
 800509e:	e0e2      	b.n	8005266 <I2C_Slave_ISR_IT+0x1ea>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d004      	beq.n	80050c6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80050bc:	6939      	ldr	r1, [r7, #16]
 80050be:	68f8      	ldr	r0, [r7, #12]
 80050c0:	f000 fea6 	bl	8005e10 <I2C_ITSlaveCplt>
 80050c4:	e0ca      	b.n	800525c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f003 0310 	and.w	r3, r3, #16
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d04b      	beq.n	8005168 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d046      	beq.n	8005168 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d128      	bne.n	8005136 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b28      	cmp	r3, #40	@ 0x28
 80050ee:	d108      	bne.n	8005102 <I2C_Slave_ISR_IT+0x86>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050f6:	d104      	bne.n	8005102 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80050f8:	6939      	ldr	r1, [r7, #16]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f001 f8dc 	bl	80062b8 <I2C_ITListenCplt>
 8005100:	e031      	b.n	8005166 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005108:	b2db      	uxtb	r3, r3
 800510a:	2b29      	cmp	r3, #41	@ 0x29
 800510c:	d10e      	bne.n	800512c <I2C_Slave_ISR_IT+0xb0>
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005114:	d00a      	beq.n	800512c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2210      	movs	r2, #16
 800511c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800511e:	68f8      	ldr	r0, [r7, #12]
 8005120:	f001 fa35 	bl	800658e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 fd4e 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
 800512a:	e01c      	b.n	8005166 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	2210      	movs	r2, #16
 8005132:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005134:	e08f      	b.n	8005256 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2210      	movs	r2, #16
 800513c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005142:	f043 0204 	orr.w	r2, r3, #4
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d003      	beq.n	8005158 <I2C_Slave_ISR_IT+0xdc>
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005156:	d17e      	bne.n	8005256 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800515c:	4619      	mov	r1, r3
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	f001 f8fe 	bl	8006360 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005164:	e077      	b.n	8005256 <I2C_Slave_ISR_IT+0x1da>
 8005166:	e076      	b.n	8005256 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f003 0304 	and.w	r3, r3, #4
 800516e:	2b00      	cmp	r3, #0
 8005170:	d02f      	beq.n	80051d2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005178:	2b00      	cmp	r3, #0
 800517a:	d02a      	beq.n	80051d2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005180:	b29b      	uxth	r3, r3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d018      	beq.n	80051b8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	b2d2      	uxtb	r2, r2
 8005192:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051a2:	3b01      	subs	r3, #1
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	3b01      	subs	r3, #1
 80051b2:	b29a      	uxth	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d14b      	bne.n	800525a <I2C_Slave_ISR_IT+0x1de>
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80051c8:	d047      	beq.n	800525a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80051ca:	68f8      	ldr	r0, [r7, #12]
 80051cc:	f000 fcfb 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80051d0:	e043      	b.n	800525a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f003 0308 	and.w	r3, r3, #8
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d009      	beq.n	80051f0 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d004      	beq.n	80051f0 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80051e6:	6939      	ldr	r1, [r7, #16]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fc2b 	bl	8005a44 <I2C_ITAddrCplt>
 80051ee:	e035      	b.n	800525c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d030      	beq.n	800525c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005200:	2b00      	cmp	r3, #0
 8005202:	d02b      	beq.n	800525c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005208:	b29b      	uxth	r3, r3
 800520a:	2b00      	cmp	r3, #0
 800520c:	d018      	beq.n	8005240 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005212:	781a      	ldrb	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	1c5a      	adds	r2, r3, #1
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005236:	3b01      	subs	r3, #1
 8005238:	b29a      	uxth	r2, r3
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800523e:	e00d      	b.n	800525c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005246:	d002      	beq.n	800524e <I2C_Slave_ISR_IT+0x1d2>
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d106      	bne.n	800525c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	f000 fcb9 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
 8005254:	e002      	b.n	800525c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8005256:	bf00      	nop
 8005258:	e000      	b.n	800525c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 800525a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af02      	add	r7, sp, #8
 8005274:	60f8      	str	r0, [r7, #12]
 8005276:	60b9      	str	r1, [r7, #8]
 8005278:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005280:	2b01      	cmp	r3, #1
 8005282:	d101      	bne.n	8005288 <I2C_Master_ISR_DMA+0x1a>
 8005284:	2302      	movs	r3, #2
 8005286:	e0d9      	b.n	800543c <I2C_Master_ISR_DMA+0x1ce>
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 0310 	and.w	r3, r3, #16
 8005296:	2b00      	cmp	r3, #0
 8005298:	d016      	beq.n	80052c8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d011      	beq.n	80052c8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2210      	movs	r2, #16
 80052aa:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052b0:	f043 0204 	orr.w	r2, r3, #4
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80052b8:	2120      	movs	r1, #32
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f001 fc2a 	bl	8006b14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f001 f964 	bl	800658e <I2C_Flush_TXDR>
 80052c6:	e0b4      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d071      	beq.n	80053b6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d06c      	beq.n	80053b6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052ea:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d04e      	beq.n	8005394 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005302:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005308:	b29b      	uxth	r3, r3
 800530a:	2bff      	cmp	r3, #255	@ 0xff
 800530c:	d906      	bls.n	800531c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	22ff      	movs	r2, #255	@ 0xff
 8005312:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8005314:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005318:	617b      	str	r3, [r7, #20]
 800531a:	e010      	b.n	800533e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005320:	b29a      	uxth	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800532e:	d003      	beq.n	8005338 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	617b      	str	r3, [r7, #20]
 8005336:	e002      	b.n	800533e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8005338:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800533c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005342:	b2da      	uxtb	r2, r3
 8005344:	8a79      	ldrh	r1, [r7, #18]
 8005346:	2300      	movs	r3, #0
 8005348:	9300      	str	r3, [sp, #0]
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f001 fbaf 	bl	8006ab0 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005356:	b29a      	uxth	r2, r3
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	b29a      	uxth	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b22      	cmp	r3, #34	@ 0x22
 800536e:	d108      	bne.n	8005382 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800537e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005380:	e057      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005390:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005392:	e04e      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800539e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053a2:	d003      	beq.n	80053ac <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fbd1 	bl	8005b4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80053aa:	e042      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80053ac:	2140      	movs	r1, #64	@ 0x40
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f000 ffd6 	bl	8006360 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80053b4:	e03d      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d028      	beq.n	8005412 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d023      	beq.n	8005412 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d119      	bne.n	8005408 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053de:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80053e2:	d025      	beq.n	8005430 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80053ec:	d108      	bne.n	8005400 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053fc:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 80053fe:	e017      	b.n	8005430 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fba3 	bl	8005b4c <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8005406:	e013      	b.n	8005430 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8005408:	2140      	movs	r1, #64	@ 0x40
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 ffa8 	bl	8006360 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005410:	e00e      	b.n	8005430 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	f003 0320 	and.w	r3, r3, #32
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00a      	beq.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8005426:	68b9      	ldr	r1, [r7, #8]
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fc29 	bl	8005c80 <I2C_ITMasterCplt>
 800542e:	e000      	b.n	8005432 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8005430:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}

08005444 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b088      	sub	sp, #32
 8005448:	af02      	add	r7, sp, #8
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8005450:	4b8d      	ldr	r3, [pc, #564]	@ (8005688 <I2C_Mem_ISR_DMA+0x244>)
 8005452:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <I2C_Mem_ISR_DMA+0x1e>
 800545e:	2302      	movs	r3, #2
 8005460:	e10e      	b.n	8005680 <I2C_Mem_ISR_DMA+0x23c>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	f003 0310 	and.w	r3, r3, #16
 8005470:	2b00      	cmp	r3, #0
 8005472:	d016      	beq.n	80054a2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2210      	movs	r2, #16
 8005484:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548a:	f043 0204 	orr.w	r2, r3, #4
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8005492:	2120      	movs	r1, #32
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f001 fb3d 	bl	8006b14 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f001 f877 	bl	800658e <I2C_Flush_TXDR>
 80054a0:	e0e9      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00e      	beq.n	80054ca <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d009      	beq.n	80054ca <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80054be:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f04f 32ff 	mov.w	r2, #4294967295
 80054c6:	651a      	str	r2, [r3, #80]	@ 0x50
 80054c8:	e0d5      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d05f      	beq.n	8005594 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d05a      	beq.n	8005594 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80054de:	2101      	movs	r1, #1
 80054e0:	68f8      	ldr	r0, [r7, #12]
 80054e2:	f001 fb9b 	bl	8006c1c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80054e6:	2110      	movs	r1, #16
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f001 fb13 	bl	8006b14 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d048      	beq.n	800558a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2bff      	cmp	r3, #255	@ 0xff
 8005500:	d910      	bls.n	8005524 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	22ff      	movs	r2, #255	@ 0xff
 8005506:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800550c:	b299      	uxth	r1, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005512:	b2da      	uxtb	r2, r3
 8005514:	2300      	movs	r3, #0
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f001 fac7 	bl	8006ab0 <I2C_TransferConfig>
 8005522:	e011      	b.n	8005548 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005528:	b29a      	uxth	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005532:	b299      	uxth	r1, r3
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005538:	b2da      	uxtb	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005542:	68f8      	ldr	r0, [r7, #12]
 8005544:	f001 fab4 	bl	8006ab0 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800554c:	b29a      	uxth	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	b29a      	uxth	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b22      	cmp	r3, #34	@ 0x22
 8005564:	d108      	bne.n	8005578 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005574:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005576:	e07e      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005586:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8005588:	e075      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800558a:	2140      	movs	r1, #64	@ 0x40
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f000 fee7 	bl	8006360 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8005592:	e070      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800559a:	2b00      	cmp	r3, #0
 800559c:	d05d      	beq.n	800565a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d058      	beq.n	800565a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80055a8:	2101      	movs	r1, #1
 80055aa:	68f8      	ldr	r0, [r7, #12]
 80055ac:	f001 fb36 	bl	8006c1c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80055b0:	2110      	movs	r1, #16
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f001 faae 	bl	8006b14 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	2b22      	cmp	r3, #34	@ 0x22
 80055c2:	d101      	bne.n	80055c8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80055c4:	4b31      	ldr	r3, [pc, #196]	@ (800568c <I2C_Mem_ISR_DMA+0x248>)
 80055c6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	2bff      	cmp	r3, #255	@ 0xff
 80055d0:	d910      	bls.n	80055f4 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	22ff      	movs	r2, #255	@ 0xff
 80055d6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80055dc:	b299      	uxth	r1, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	9300      	str	r3, [sp, #0]
 80055e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f001 fa5f 	bl	8006ab0 <I2C_TransferConfig>
 80055f2:	e011      	b.n	8005618 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005602:	b299      	uxth	r1, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005608:	b2da      	uxtb	r2, r3
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	9300      	str	r3, [sp, #0]
 800560e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f001 fa4c 	bl	8006ab0 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800561c:	b29a      	uxth	r2, r3
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005630:	b2db      	uxtb	r3, r3
 8005632:	2b22      	cmp	r3, #34	@ 0x22
 8005634:	d108      	bne.n	8005648 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005644:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005646:	e016      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005656:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005658:	e00d      	b.n	8005676 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f003 0320 	and.w	r3, r3, #32
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800566e:	68b9      	ldr	r1, [r7, #8]
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f000 fb05 	bl	8005c80 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800567e:	2300      	movs	r3, #0
}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	80002000 	.word	0x80002000
 800568c:	80002400 	.word	0x80002400

08005690 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b088      	sub	sp, #32
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056a0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d101      	bne.n	80056b4 <I2C_Slave_ISR_DMA+0x24>
 80056b0:	2302      	movs	r3, #2
 80056b2:	e1c2      	b.n	8005a3a <I2C_Slave_ISR_DMA+0x3aa>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0320 	and.w	r3, r3, #32
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d009      	beq.n	80056da <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d004      	beq.n	80056da <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80056d0:	68b9      	ldr	r1, [r7, #8]
 80056d2:	68f8      	ldr	r0, [r7, #12]
 80056d4:	f000 fb9c 	bl	8005e10 <I2C_ITSlaveCplt>
 80056d8:	e1aa      	b.n	8005a30 <I2C_Slave_ISR_DMA+0x3a0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f000 8197 	beq.w	8005a14 <I2C_Slave_ISR_DMA+0x384>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 8191 	beq.w	8005a14 <I2C_Slave_ISR_DMA+0x384>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d105      	bne.n	8005708 <I2C_Slave_ISR_DMA+0x78>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005702:	2b00      	cmp	r3, #0
 8005704:	f000 817f 	beq.w	8005a06 <I2C_Slave_ISR_DMA+0x376>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800570c:	2b00      	cmp	r3, #0
 800570e:	d07b      	beq.n	8005808 <I2C_Slave_ISR_DMA+0x178>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005716:	2b00      	cmp	r3, #0
 8005718:	d076      	beq.n	8005808 <I2C_Slave_ISR_DMA+0x178>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a74      	ldr	r2, [pc, #464]	@ (80058f4 <I2C_Slave_ISR_DMA+0x264>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d059      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a72      	ldr	r2, [pc, #456]	@ (80058f8 <I2C_Slave_ISR_DMA+0x268>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d053      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a70      	ldr	r2, [pc, #448]	@ (80058fc <I2C_Slave_ISR_DMA+0x26c>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d04d      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a6e      	ldr	r2, [pc, #440]	@ (8005900 <I2C_Slave_ISR_DMA+0x270>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d047      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a6c      	ldr	r2, [pc, #432]	@ (8005904 <I2C_Slave_ISR_DMA+0x274>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d041      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6a      	ldr	r2, [pc, #424]	@ (8005908 <I2C_Slave_ISR_DMA+0x278>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d03b      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a68      	ldr	r2, [pc, #416]	@ (800590c <I2C_Slave_ISR_DMA+0x27c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d035      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a66      	ldr	r2, [pc, #408]	@ (8005910 <I2C_Slave_ISR_DMA+0x280>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d02f      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a64      	ldr	r2, [pc, #400]	@ (8005914 <I2C_Slave_ISR_DMA+0x284>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d029      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a62      	ldr	r2, [pc, #392]	@ (8005918 <I2C_Slave_ISR_DMA+0x288>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d023      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a60      	ldr	r2, [pc, #384]	@ (800591c <I2C_Slave_ISR_DMA+0x28c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d01d      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a5e      	ldr	r2, [pc, #376]	@ (8005920 <I2C_Slave_ISR_DMA+0x290>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d017      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a5c      	ldr	r2, [pc, #368]	@ (8005924 <I2C_Slave_ISR_DMA+0x294>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d011      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a5a      	ldr	r2, [pc, #360]	@ (8005928 <I2C_Slave_ISR_DMA+0x298>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d00b      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a58      	ldr	r2, [pc, #352]	@ (800592c <I2C_Slave_ISR_DMA+0x29c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d005      	beq.n	80057da <I2C_Slave_ISR_DMA+0x14a>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a56      	ldr	r2, [pc, #344]	@ (8005930 <I2C_Slave_ISR_DMA+0x2a0>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d109      	bne.n	80057ee <I2C_Slave_ISR_DMA+0x15e>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	bf0c      	ite	eq
 80057e6:	2301      	moveq	r3, #1
 80057e8:	2300      	movne	r3, #0
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	e008      	b.n	8005800 <I2C_Slave_ISR_DMA+0x170>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	bf0c      	ite	eq
 80057fa:	2301      	moveq	r3, #1
 80057fc:	2300      	movne	r3, #0
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <I2C_Slave_ISR_DMA+0x178>
          {
            treatdmanack = 1U;
 8005804:	2301      	movs	r3, #1
 8005806:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 809e 	beq.w	800594e <I2C_Slave_ISR_DMA+0x2be>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8098 	beq.w	800594e <I2C_Slave_ISR_DMA+0x2be>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a33      	ldr	r2, [pc, #204]	@ (80058f4 <I2C_Slave_ISR_DMA+0x264>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d059      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a31      	ldr	r2, [pc, #196]	@ (80058f8 <I2C_Slave_ISR_DMA+0x268>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d053      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a2f      	ldr	r2, [pc, #188]	@ (80058fc <I2C_Slave_ISR_DMA+0x26c>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d04d      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a2d      	ldr	r2, [pc, #180]	@ (8005900 <I2C_Slave_ISR_DMA+0x270>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d047      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <I2C_Slave_ISR_DMA+0x274>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d041      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a29      	ldr	r2, [pc, #164]	@ (8005908 <I2C_Slave_ISR_DMA+0x278>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d03b      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a27      	ldr	r2, [pc, #156]	@ (800590c <I2C_Slave_ISR_DMA+0x27c>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d035      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a25      	ldr	r2, [pc, #148]	@ (8005910 <I2C_Slave_ISR_DMA+0x280>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d02f      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <I2C_Slave_ISR_DMA+0x284>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d029      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a21      	ldr	r2, [pc, #132]	@ (8005918 <I2C_Slave_ISR_DMA+0x288>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d023      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a1f      	ldr	r2, [pc, #124]	@ (800591c <I2C_Slave_ISR_DMA+0x28c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d01d      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005920 <I2C_Slave_ISR_DMA+0x290>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d017      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005924 <I2C_Slave_ISR_DMA+0x294>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d011      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <I2C_Slave_ISR_DMA+0x298>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00b      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a17      	ldr	r2, [pc, #92]	@ (800592c <I2C_Slave_ISR_DMA+0x29c>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d005      	beq.n	80058de <I2C_Slave_ISR_DMA+0x24e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a15      	ldr	r2, [pc, #84]	@ (8005930 <I2C_Slave_ISR_DMA+0x2a0>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d12a      	bne.n	8005934 <I2C_Slave_ISR_DMA+0x2a4>
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	e029      	b.n	8005946 <I2C_Slave_ISR_DMA+0x2b6>
 80058f2:	bf00      	nop
 80058f4:	40020010 	.word	0x40020010
 80058f8:	40020028 	.word	0x40020028
 80058fc:	40020040 	.word	0x40020040
 8005900:	40020058 	.word	0x40020058
 8005904:	40020070 	.word	0x40020070
 8005908:	40020088 	.word	0x40020088
 800590c:	400200a0 	.word	0x400200a0
 8005910:	400200b8 	.word	0x400200b8
 8005914:	40020410 	.word	0x40020410
 8005918:	40020428 	.word	0x40020428
 800591c:	40020440 	.word	0x40020440
 8005920:	40020458 	.word	0x40020458
 8005924:	40020470 	.word	0x40020470
 8005928:	40020488 	.word	0x40020488
 800592c:	400204a0 	.word	0x400204a0
 8005930:	400204b8 	.word	0x400204b8
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <I2C_Slave_ISR_DMA+0x2be>
          {
            treatdmanack = 1U;
 800594a:	2301      	movs	r3, #1
 800594c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	2b01      	cmp	r3, #1
 8005952:	d128      	bne.n	80059a6 <I2C_Slave_ISR_DMA+0x316>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b28      	cmp	r3, #40	@ 0x28
 800595e:	d108      	bne.n	8005972 <I2C_Slave_ISR_DMA+0x2e2>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005966:	d104      	bne.n	8005972 <I2C_Slave_ISR_DMA+0x2e2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8005968:	68b9      	ldr	r1, [r7, #8]
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fca4 	bl	80062b8 <I2C_ITListenCplt>
 8005970:	e048      	b.n	8005a04 <I2C_Slave_ISR_DMA+0x374>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005978:	b2db      	uxtb	r3, r3
 800597a:	2b29      	cmp	r3, #41	@ 0x29
 800597c:	d10e      	bne.n	800599c <I2C_Slave_ISR_DMA+0x30c>
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005984:	d00a      	beq.n	800599c <I2C_Slave_ISR_DMA+0x30c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	2210      	movs	r2, #16
 800598c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800598e:	68f8      	ldr	r0, [r7, #12]
 8005990:	f000 fdfd 	bl	800658e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8005994:	68f8      	ldr	r0, [r7, #12]
 8005996:	f000 f916 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
 800599a:	e033      	b.n	8005a04 <I2C_Slave_ISR_DMA+0x374>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80059a4:	e034      	b.n	8005a10 <I2C_Slave_ISR_DMA+0x380>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2210      	movs	r2, #16
 80059ac:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059c0:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80059c2:	69bb      	ldr	r3, [r7, #24]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <I2C_Slave_ISR_DMA+0x340>
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80059ce:	d11f      	bne.n	8005a10 <I2C_Slave_ISR_DMA+0x380>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80059d0:	7dfb      	ldrb	r3, [r7, #23]
 80059d2:	2b21      	cmp	r3, #33	@ 0x21
 80059d4:	d002      	beq.n	80059dc <I2C_Slave_ISR_DMA+0x34c>
 80059d6:	7dfb      	ldrb	r3, [r7, #23]
 80059d8:	2b29      	cmp	r3, #41	@ 0x29
 80059da:	d103      	bne.n	80059e4 <I2C_Slave_ISR_DMA+0x354>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2221      	movs	r2, #33	@ 0x21
 80059e0:	631a      	str	r2, [r3, #48]	@ 0x30
 80059e2:	e008      	b.n	80059f6 <I2C_Slave_ISR_DMA+0x366>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059e4:	7dfb      	ldrb	r3, [r7, #23]
 80059e6:	2b22      	cmp	r3, #34	@ 0x22
 80059e8:	d002      	beq.n	80059f0 <I2C_Slave_ISR_DMA+0x360>
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
 80059ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ee:	d102      	bne.n	80059f6 <I2C_Slave_ISR_DMA+0x366>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2222      	movs	r2, #34	@ 0x22
 80059f4:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059fa:	4619      	mov	r1, r3
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 fcaf 	bl	8006360 <I2C_ITError>
      if (treatdmanack == 1U)
 8005a02:	e005      	b.n	8005a10 <I2C_Slave_ISR_DMA+0x380>
 8005a04:	e004      	b.n	8005a10 <I2C_Slave_ISR_DMA+0x380>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2210      	movs	r2, #16
 8005a0c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a0e:	e00f      	b.n	8005a30 <I2C_Slave_ISR_DMA+0x3a0>
      if (treatdmanack == 1U)
 8005a10:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8005a12:	e00d      	b.n	8005a30 <I2C_Slave_ISR_DMA+0x3a0>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	f003 0308 	and.w	r3, r3, #8
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <I2C_Slave_ISR_DMA+0x3a0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d003      	beq.n	8005a30 <I2C_Slave_ISR_DMA+0x3a0>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f000 f80a 	bl	8005a44 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3720      	adds	r7, #32
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop

08005a44 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a5a:	2b28      	cmp	r3, #40	@ 0x28
 8005a5c:	d16a      	bne.n	8005b34 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	0c1b      	lsrs	r3, r3, #16
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	699b      	ldr	r3, [r3, #24]
 8005a74:	0c1b      	lsrs	r3, r3, #16
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a7c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a8a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68db      	ldr	r3, [r3, #12]
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8005a98:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d138      	bne.n	8005b14 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005aa2:	897b      	ldrh	r3, [r7, #10]
 8005aa4:	09db      	lsrs	r3, r3, #7
 8005aa6:	b29a      	uxth	r2, r3
 8005aa8:	89bb      	ldrh	r3, [r7, #12]
 8005aaa:	4053      	eors	r3, r2
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	f003 0306 	and.w	r3, r3, #6
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d11c      	bne.n	8005af0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005ab6:	897b      	ldrh	r3, [r7, #10]
 8005ab8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005abe:	1c5a      	adds	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d13b      	bne.n	8005b44 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2208      	movs	r2, #8
 8005ad8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ae2:	89ba      	ldrh	r2, [r7, #12]
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff f960 	bl	8004dae <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005aee:	e029      	b.n	8005b44 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005af0:	893b      	ldrh	r3, [r7, #8]
 8005af2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f001 f88f 	bl	8006c1c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b06:	89ba      	ldrh	r2, [r7, #12]
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f7ff f94e 	bl	8004dae <HAL_I2C_AddrCallback>
}
 8005b12:	e017      	b.n	8005b44 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005b14:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f001 f87f 	bl	8006c1c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005b26:	89ba      	ldrh	r2, [r7, #12]
 8005b28:	7bfb      	ldrb	r3, [r7, #15]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff f93e 	bl	8004dae <HAL_I2C_AddrCallback>
}
 8005b32:	e007      	b.n	8005b44 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2208      	movs	r2, #8
 8005b3a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8005b44:	bf00      	nop
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b62:	b2db      	uxtb	r3, r3
 8005b64:	2b21      	cmp	r3, #33	@ 0x21
 8005b66:	d115      	bne.n	8005b94 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2220      	movs	r2, #32
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2211      	movs	r2, #17
 8005b74:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b7c:	2101      	movs	r1, #1
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 f84c 	bl	8006c1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f7fb f8d7 	bl	8000d40 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005b92:	e014      	b.n	8005bbe <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2212      	movs	r2, #18
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005ba8:	2102      	movs	r1, #2
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f001 f836 	bl	8006c1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f7fb f8d7 	bl	8000d6c <HAL_I2C_MasterRxCpltCallback>
}
 8005bbe:	bf00      	nop
 8005bc0:	3708      	adds	r7, #8
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}

08005bc6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b084      	sub	sp, #16
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d008      	beq.n	8005bfa <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681a      	ldr	r2, [r3, #0]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	e00c      	b.n	8005c14 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d007      	beq.n	8005c14 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005c12:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b29      	cmp	r3, #41	@ 0x29
 8005c1e:	d112      	bne.n	8005c46 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2228      	movs	r2, #40	@ 0x28
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2221      	movs	r2, #33	@ 0x21
 8005c2c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005c2e:	2101      	movs	r1, #1
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fff3 	bl	8006c1c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f7ff f8a1 	bl	8004d86 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c44:	e017      	b.n	8005c76 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c50:	d111      	bne.n	8005c76 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2228      	movs	r2, #40	@ 0x28
 8005c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2222      	movs	r2, #34	@ 0x22
 8005c5e:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005c60:	2102      	movs	r1, #2
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 ffda 	bl	8006c1c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f7ff f892 	bl	8004d9a <HAL_I2C_SlaveRxCpltCallback>
}
 8005c76:	bf00      	nop
 8005c78:	3710      	adds	r7, #16
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b086      	sub	sp, #24
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2220      	movs	r2, #32
 8005c94:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b21      	cmp	r3, #33	@ 0x21
 8005ca0:	d107      	bne.n	8005cb2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f000 ffb9 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2211      	movs	r2, #17
 8005cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8005cb0:	e00c      	b.n	8005ccc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b22      	cmp	r3, #34	@ 0x22
 8005cbc:	d106      	bne.n	8005ccc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005cbe:	2102      	movs	r1, #2
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 ffab 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2212      	movs	r2, #18
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8005e08 <I2C_ITMasterCplt+0x188>)
 8005cd8:	400b      	ands	r3, r1
 8005cda:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a49      	ldr	r2, [pc, #292]	@ (8005e0c <I2C_ITMasterCplt+0x18c>)
 8005ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0310 	and.w	r3, r3, #16
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d009      	beq.n	8005d06 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2210      	movs	r2, #16
 8005cf8:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cfe:	f043 0204 	orr.w	r2, r3, #4
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b60      	cmp	r3, #96	@ 0x60
 8005d10:	d10a      	bne.n	8005d28 <I2C_ITMasterCplt+0xa8>
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	f003 0304 	and.w	r3, r3, #4
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8005d26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fc30 	bl	800658e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d32:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b60      	cmp	r3, #96	@ 0x60
 8005d3e:	d002      	beq.n	8005d46 <I2C_ITMasterCplt+0xc6>
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	4619      	mov	r1, r3
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb07 	bl	8006360 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d52:	e054      	b.n	8005dfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b21      	cmp	r3, #33	@ 0x21
 8005d5e:	d124      	bne.n	8005daa <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2220      	movs	r2, #32
 8005d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b40      	cmp	r3, #64	@ 0x40
 8005d78:	d10b      	bne.n	8005d92 <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f7ff f827 	bl	8004dde <HAL_I2C_MemTxCpltCallback>
}
 8005d90:	e035      	b.n	8005dfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f7fa ffcc 	bl	8000d40 <HAL_I2C_MasterTxCpltCallback>
}
 8005da8:	e029      	b.n	8005dfe <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b22      	cmp	r3, #34	@ 0x22
 8005db4:	d123      	bne.n	8005dfe <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2220      	movs	r2, #32
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b40      	cmp	r3, #64	@ 0x40
 8005dce:	d10b      	bne.n	8005de8 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f7ff f806 	bl	8004df2 <HAL_I2C_MemRxCpltCallback>
}
 8005de6:	e00a      	b.n	8005dfe <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f7fa ffb7 	bl	8000d6c <HAL_I2C_MasterRxCpltCallback>
}
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	fe00e800 	.word	0xfe00e800
 8005e0c:	ffff0000 	.word	0xffff0000

08005e10 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e32:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	2b21      	cmp	r3, #33	@ 0x21
 8005e40:	d002      	beq.n	8005e48 <I2C_ITSlaveCplt+0x38>
 8005e42:	7afb      	ldrb	r3, [r7, #11]
 8005e44:	2b29      	cmp	r3, #41	@ 0x29
 8005e46:	d108      	bne.n	8005e5a <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005e48:	f248 0101 	movw	r1, #32769	@ 0x8001
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f000 fee5 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2221      	movs	r2, #33	@ 0x21
 8005e56:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e58:	e019      	b.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e5a:	7afb      	ldrb	r3, [r7, #11]
 8005e5c:	2b22      	cmp	r3, #34	@ 0x22
 8005e5e:	d002      	beq.n	8005e66 <I2C_ITSlaveCplt+0x56>
 8005e60:	7afb      	ldrb	r3, [r7, #11]
 8005e62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e64:	d108      	bne.n	8005e78 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005e66:	f248 0102 	movw	r1, #32770	@ 0x8002
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fed6 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2222      	movs	r2, #34	@ 0x22
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e76:	e00a      	b.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8005e78:	7afb      	ldrb	r3, [r7, #11]
 8005e7a:	2b28      	cmp	r3, #40	@ 0x28
 8005e7c:	d107      	bne.n	8005e8e <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8005e7e:	f248 0103 	movw	r1, #32771	@ 0x8003
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 feca 	bl	8006c1c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	685a      	ldr	r2, [r3, #4]
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005e9c:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6859      	ldr	r1, [r3, #4]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	4b7f      	ldr	r3, [pc, #508]	@ (80060a8 <I2C_ITSlaveCplt+0x298>)
 8005eaa:	400b      	ands	r3, r1
 8005eac:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fb6d 	bl	800658e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d07a      	beq.n	8005fb4 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005ecc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8111 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a73      	ldr	r2, [pc, #460]	@ (80060ac <I2C_ITSlaveCplt+0x29c>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d059      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a71      	ldr	r2, [pc, #452]	@ (80060b0 <I2C_ITSlaveCplt+0x2a0>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d053      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a6f      	ldr	r2, [pc, #444]	@ (80060b4 <I2C_ITSlaveCplt+0x2a4>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d04d      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a6d      	ldr	r2, [pc, #436]	@ (80060b8 <I2C_ITSlaveCplt+0x2a8>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d047      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a6b      	ldr	r2, [pc, #428]	@ (80060bc <I2C_ITSlaveCplt+0x2ac>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d041      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a69      	ldr	r2, [pc, #420]	@ (80060c0 <I2C_ITSlaveCplt+0x2b0>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d03b      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a67      	ldr	r2, [pc, #412]	@ (80060c4 <I2C_ITSlaveCplt+0x2b4>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d035      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4a65      	ldr	r2, [pc, #404]	@ (80060c8 <I2C_ITSlaveCplt+0x2b8>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d02f      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a63      	ldr	r2, [pc, #396]	@ (80060cc <I2C_ITSlaveCplt+0x2bc>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d029      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a61      	ldr	r2, [pc, #388]	@ (80060d0 <I2C_ITSlaveCplt+0x2c0>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d023      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a5f      	ldr	r2, [pc, #380]	@ (80060d4 <I2C_ITSlaveCplt+0x2c4>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d01d      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5d      	ldr	r2, [pc, #372]	@ (80060d8 <I2C_ITSlaveCplt+0x2c8>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d017      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4a5b      	ldr	r2, [pc, #364]	@ (80060dc <I2C_ITSlaveCplt+0x2cc>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d011      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a59      	ldr	r2, [pc, #356]	@ (80060e0 <I2C_ITSlaveCplt+0x2d0>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d00b      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a57      	ldr	r2, [pc, #348]	@ (80060e4 <I2C_ITSlaveCplt+0x2d4>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d005      	beq.n	8005f98 <I2C_ITSlaveCplt+0x188>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	4a55      	ldr	r2, [pc, #340]	@ (80060e8 <I2C_ITSlaveCplt+0x2d8>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d105      	bne.n	8005fa4 <I2C_ITSlaveCplt+0x194>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	e004      	b.n	8005fae <I2C_ITSlaveCplt+0x19e>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	685b      	ldr	r3, [r3, #4]
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	8553      	strh	r3, [r2, #42]	@ 0x2a
 8005fb2:	e0a2      	b.n	80060fa <I2C_ITSlaveCplt+0x2ea>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 809d 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fce:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 8090 	beq.w	80060fa <I2C_ITSlaveCplt+0x2ea>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a32      	ldr	r2, [pc, #200]	@ (80060ac <I2C_ITSlaveCplt+0x29c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d059      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a30      	ldr	r2, [pc, #192]	@ (80060b0 <I2C_ITSlaveCplt+0x2a0>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d053      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80060b4 <I2C_ITSlaveCplt+0x2a4>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d04d      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <I2C_ITSlaveCplt+0x2a8>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d047      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4a2a      	ldr	r2, [pc, #168]	@ (80060bc <I2C_ITSlaveCplt+0x2ac>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d041      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a28      	ldr	r2, [pc, #160]	@ (80060c0 <I2C_ITSlaveCplt+0x2b0>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d03b      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a26      	ldr	r2, [pc, #152]	@ (80060c4 <I2C_ITSlaveCplt+0x2b4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d035      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a24      	ldr	r2, [pc, #144]	@ (80060c8 <I2C_ITSlaveCplt+0x2b8>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d02f      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a22      	ldr	r2, [pc, #136]	@ (80060cc <I2C_ITSlaveCplt+0x2bc>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d029      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a20      	ldr	r2, [pc, #128]	@ (80060d0 <I2C_ITSlaveCplt+0x2c0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d023      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a1e      	ldr	r2, [pc, #120]	@ (80060d4 <I2C_ITSlaveCplt+0x2c4>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d01d      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a1c      	ldr	r2, [pc, #112]	@ (80060d8 <I2C_ITSlaveCplt+0x2c8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d017      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1a      	ldr	r2, [pc, #104]	@ (80060dc <I2C_ITSlaveCplt+0x2cc>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d011      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a18      	ldr	r2, [pc, #96]	@ (80060e0 <I2C_ITSlaveCplt+0x2d0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a16      	ldr	r2, [pc, #88]	@ (80060e4 <I2C_ITSlaveCplt+0x2d4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d005      	beq.n	800609a <I2C_ITSlaveCplt+0x28a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a14      	ldr	r2, [pc, #80]	@ (80060e8 <I2C_ITSlaveCplt+0x2d8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d128      	bne.n	80060ec <I2C_ITSlaveCplt+0x2dc>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	e027      	b.n	80060f6 <I2C_ITSlaveCplt+0x2e6>
 80060a6:	bf00      	nop
 80060a8:	fe00e800 	.word	0xfe00e800
 80060ac:	40020010 	.word	0x40020010
 80060b0:	40020028 	.word	0x40020028
 80060b4:	40020040 	.word	0x40020040
 80060b8:	40020058 	.word	0x40020058
 80060bc:	40020070 	.word	0x40020070
 80060c0:	40020088 	.word	0x40020088
 80060c4:	400200a0 	.word	0x400200a0
 80060c8:	400200b8 	.word	0x400200b8
 80060cc:	40020410 	.word	0x40020410
 80060d0:	40020428 	.word	0x40020428
 80060d4:	40020440 	.word	0x40020440
 80060d8:	40020458 	.word	0x40020458
 80060dc:	40020470 	.word	0x40020470
 80060e0:	40020488 	.word	0x40020488
 80060e4:	400204a0 	.word	0x400204a0
 80060e8:	400204b8 	.word	0x400204b8
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	8553      	strh	r3, [r2, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	2b00      	cmp	r3, #0
 8006102:	d020      	beq.n	8006146 <I2C_ITSlaveCplt+0x336>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f023 0304 	bic.w	r3, r3, #4
 800610a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800611e:	1c5a      	adds	r2, r3, #1
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006128:	2b00      	cmp	r3, #0
 800612a:	d00c      	beq.n	8006146 <I2C_ITSlaveCplt+0x336>
    {
      hi2c->XferSize--;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613c:	b29b      	uxth	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	b29a      	uxth	r2, r3
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614a:	b29b      	uxth	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <I2C_ITSlaveCplt+0x34c>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006154:	f043 0204 	orr.w	r2, r3, #4
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	f003 0310 	and.w	r3, r3, #16
 8006162:	2b00      	cmp	r3, #0
 8006164:	d049      	beq.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800616c:	2b00      	cmp	r3, #0
 800616e:	d044      	beq.n	80061fa <I2C_ITSlaveCplt+0x3ea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d128      	bne.n	80061cc <I2C_ITSlaveCplt+0x3bc>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006180:	b2db      	uxtb	r3, r3
 8006182:	2b28      	cmp	r3, #40	@ 0x28
 8006184:	d108      	bne.n	8006198 <I2C_ITSlaveCplt+0x388>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800618c:	d104      	bne.n	8006198 <I2C_ITSlaveCplt+0x388>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f891 	bl	80062b8 <I2C_ITListenCplt>
 8006196:	e030      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	2b29      	cmp	r3, #41	@ 0x29
 80061a2:	d10e      	bne.n	80061c2 <I2C_ITSlaveCplt+0x3b2>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80061aa:	d00a      	beq.n	80061c2 <I2C_ITSlaveCplt+0x3b2>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2210      	movs	r2, #16
 80061b2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 f9ea 	bl	800658e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f7ff fd03 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
 80061c0:	e01b      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	2210      	movs	r2, #16
 80061c8:	61da      	str	r2, [r3, #28]
 80061ca:	e016      	b.n	80061fa <I2C_ITSlaveCplt+0x3ea>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2210      	movs	r2, #16
 80061d2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061d8:	f043 0204 	orr.w	r2, r3, #4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <I2C_ITSlaveCplt+0x3de>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80061ec:	d105      	bne.n	80061fa <I2C_ITSlaveCplt+0x3ea>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 f8b3 	bl	8006360 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800620c:	2b00      	cmp	r3, #0
 800620e:	d010      	beq.n	8006232 <I2C_ITSlaveCplt+0x422>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006214:	4619      	mov	r1, r3
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f8a2 	bl	8006360 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b28      	cmp	r3, #40	@ 0x28
 8006226:	d141      	bne.n	80062ac <I2C_ITSlaveCplt+0x49c>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006228:	6979      	ldr	r1, [r7, #20]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f844 	bl	80062b8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006230:	e03c      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006236:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800623a:	d014      	beq.n	8006266 <I2C_ITSlaveCplt+0x456>
    I2C_ITSlaveSeqCplt(hi2c);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff fcc2 	bl	8005bc6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a1b      	ldr	r2, [pc, #108]	@ (80062b4 <I2C_ITSlaveCplt+0x4a4>)
 8006246:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2200      	movs	r2, #0
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7fe fdb3 	bl	8004dca <HAL_I2C_ListenCpltCallback>
}
 8006264:	e022      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800626c:	b2db      	uxtb	r3, r3
 800626e:	2b22      	cmp	r3, #34	@ 0x22
 8006270:	d10e      	bne.n	8006290 <I2C_ITSlaveCplt+0x480>
    hi2c->State = HAL_I2C_STATE_READY;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2220      	movs	r2, #32
 8006276:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2200      	movs	r2, #0
 8006284:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7fe fd86 	bl	8004d9a <HAL_I2C_SlaveRxCpltCallback>
}
 800628e:	e00d      	b.n	80062ac <I2C_ITSlaveCplt+0x49c>
    hi2c->State = HAL_I2C_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f7fe fd6d 	bl	8004d86 <HAL_I2C_SlaveTxCpltCallback>
}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	ffff0000 	.word	0xffff0000

080062b8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	4a25      	ldr	r2, [pc, #148]	@ (800635c <I2C_ITListenCplt+0xa4>)
 80062c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2220      	movs	r2, #32
 80062d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2200      	movs	r2, #0
 80062da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	f003 0304 	and.w	r3, r3, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d022      	beq.n	8006334 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	b2d2      	uxtb	r2, r2
 80062fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006300:	1c5a      	adds	r2, r3, #1
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d012      	beq.n	8006334 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006312:	3b01      	subs	r3, #1
 8006314:	b29a      	uxth	r2, r3
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632c:	f043 0204 	orr.w	r2, r3, #4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006334:	f248 0103 	movw	r1, #32771	@ 0x8003
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 fc6f 	bl	8006c1c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2210      	movs	r2, #16
 8006344:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7fe fd3b 	bl	8004dca <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006354:	bf00      	nop
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	ffff0000 	.word	0xffff0000

08006360 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006370:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a6d      	ldr	r2, [pc, #436]	@ (8006534 <I2C_ITError+0x1d4>)
 800637e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b28      	cmp	r3, #40	@ 0x28
 8006396:	d005      	beq.n	80063a4 <I2C_ITError+0x44>
 8006398:	7bfb      	ldrb	r3, [r7, #15]
 800639a:	2b29      	cmp	r3, #41	@ 0x29
 800639c:	d002      	beq.n	80063a4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80063a2:	d10b      	bne.n	80063bc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063a4:	2103      	movs	r1, #3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc38 	bl	8006c1c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2228      	movs	r2, #40	@ 0x28
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	4a60      	ldr	r2, [pc, #384]	@ (8006538 <I2C_ITError+0x1d8>)
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80063ba:	e030      	b.n	800641e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80063bc:	f248 0103 	movw	r1, #32771	@ 0x8003
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 fc2b 	bl	8006c1c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f8e1 	bl	800658e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b60      	cmp	r3, #96	@ 0x60
 80063d6:	d01f      	beq.n	8006418 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	f003 0320 	and.w	r3, r3, #32
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	d114      	bne.n	8006418 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	f003 0310 	and.w	r3, r3, #16
 80063f8:	2b10      	cmp	r3, #16
 80063fa:	d109      	bne.n	8006410 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2210      	movs	r2, #16
 8006402:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006408:	f043 0204 	orr.w	r2, r3, #4
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2220      	movs	r2, #32
 8006416:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2200      	movs	r2, #0
 800641c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006422:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006428:	2b00      	cmp	r3, #0
 800642a:	d039      	beq.n	80064a0 <I2C_ITError+0x140>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b11      	cmp	r3, #17
 8006430:	d002      	beq.n	8006438 <I2C_ITError+0xd8>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b21      	cmp	r3, #33	@ 0x21
 8006436:	d133      	bne.n	80064a0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006442:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006446:	d107      	bne.n	8006458 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006456:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	4618      	mov	r0, r3
 800645e:	f7fd fc71 	bl	8003d44 <HAL_DMA_GetState>
 8006462:	4603      	mov	r3, r0
 8006464:	2b01      	cmp	r3, #1
 8006466:	d017      	beq.n	8006498 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646c:	4a33      	ldr	r2, [pc, #204]	@ (800653c <I2C_ITError+0x1dc>)
 800646e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647c:	4618      	mov	r0, r3
 800647e:	f7fc faf1 	bl	8002a64 <HAL_DMA_Abort_IT>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d04d      	beq.n	8006524 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800648c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006492:	4610      	mov	r0, r2
 8006494:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006496:	e045      	b.n	8006524 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f851 	bl	8006540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800649e:	e041      	b.n	8006524 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d039      	beq.n	800651c <I2C_ITError+0x1bc>
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b12      	cmp	r3, #18
 80064ac:	d002      	beq.n	80064b4 <I2C_ITError+0x154>
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	2b22      	cmp	r3, #34	@ 0x22
 80064b2:	d133      	bne.n	800651c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064c2:	d107      	bne.n	80064d4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80064d2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fd fc33 	bl	8003d44 <HAL_DMA_GetState>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d017      	beq.n	8006514 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e8:	4a14      	ldr	r2, [pc, #80]	@ (800653c <I2C_ITError+0x1dc>)
 80064ea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	4618      	mov	r0, r3
 80064fa:	f7fc fab3 	bl	8002a64 <HAL_DMA_Abort_IT>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006508:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800650e:	4610      	mov	r0, r2
 8006510:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006512:	e009      	b.n	8006528 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f813 	bl	8006540 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800651a:	e005      	b.n	8006528 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f80f 	bl	8006540 <I2C_TreatErrorCallback>
  }
}
 8006522:	e002      	b.n	800652a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006524:	bf00      	nop
 8006526:	e000      	b.n	800652a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006528:	bf00      	nop
}
 800652a:	bf00      	nop
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	ffff0000 	.word	0xffff0000
 8006538:	0800507d 	.word	0x0800507d
 800653c:	080065d7 	.word	0x080065d7

08006540 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b082      	sub	sp, #8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b60      	cmp	r3, #96	@ 0x60
 8006552:	d10e      	bne.n	8006572 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2200      	movs	r2, #0
 8006560:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f7fe fc55 	bl	8004e1a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006570:	e009      	b.n	8006586 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f7fe fc40 	bl	8004e06 <HAL_I2C_ErrorCallback>
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800658e:	b480      	push	{r7}
 8006590:	b083      	sub	sp, #12
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	f003 0302 	and.w	r3, r3, #2
 80065a0:	2b02      	cmp	r3, #2
 80065a2:	d103      	bne.n	80065ac <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2200      	movs	r2, #0
 80065aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d007      	beq.n	80065ca <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	699a      	ldr	r2, [r3, #24]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f042 0201 	orr.w	r2, r2, #1
 80065c8:	619a      	str	r2, [r3, #24]
  }
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b084      	sub	sp, #16
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d003      	beq.n	80065f4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f0:	2200      	movs	r2, #0
 80065f2:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d003      	beq.n	8006604 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006600:	2200      	movs	r2, #0
 8006602:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8006604:	68f8      	ldr	r0, [r7, #12]
 8006606:	f7ff ff9b 	bl	8006540 <I2C_TreatErrorCallback>
}
 800660a:	bf00      	nop
 800660c:	3710      	adds	r7, #16
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006612:	b580      	push	{r7, lr}
 8006614:	b084      	sub	sp, #16
 8006616:	af00      	add	r7, sp, #0
 8006618:	60f8      	str	r0, [r7, #12]
 800661a:	60b9      	str	r1, [r7, #8]
 800661c:	603b      	str	r3, [r7, #0]
 800661e:	4613      	mov	r3, r2
 8006620:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006622:	e03b      	b.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	6839      	ldr	r1, [r7, #0]
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f000 f961 	bl	80068f0 <I2C_IsErrorOccurred>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	e041      	b.n	80066bc <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800663e:	d02d      	beq.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006640:	f7fb f9d2 	bl	80019e8 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	683a      	ldr	r2, [r7, #0]
 800664c:	429a      	cmp	r2, r3
 800664e:	d302      	bcc.n	8006656 <I2C_WaitOnFlagUntilTimeout+0x44>
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d122      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	4013      	ands	r3, r2
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	bf0c      	ite	eq
 8006666:	2301      	moveq	r3, #1
 8006668:	2300      	movne	r3, #0
 800666a:	b2db      	uxtb	r3, r3
 800666c:	461a      	mov	r2, r3
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	429a      	cmp	r2, r3
 8006672:	d113      	bne.n	800669c <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006678:	f043 0220 	orr.w	r2, r3, #32
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2200      	movs	r2, #0
 8006694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e00f      	b.n	80066bc <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	699a      	ldr	r2, [r3, #24]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	4013      	ands	r3, r2
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	bf0c      	ite	eq
 80066ac:	2301      	moveq	r3, #1
 80066ae:	2300      	movne	r3, #0
 80066b0:	b2db      	uxtb	r3, r3
 80066b2:	461a      	mov	r2, r3
 80066b4:	79fb      	ldrb	r3, [r7, #7]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d0b4      	beq.n	8006624 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ba:	2300      	movs	r3, #0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3710      	adds	r7, #16
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80066d0:	e033      	b.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	68f8      	ldr	r0, [r7, #12]
 80066d8:	f000 f90a 	bl	80068f0 <I2C_IsErrorOccurred>
 80066dc:	4603      	mov	r3, r0
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d001      	beq.n	80066e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80066e2:	2301      	movs	r3, #1
 80066e4:	e031      	b.n	800674a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ec:	d025      	beq.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ee:	f7fb f97b 	bl	80019e8 <HAL_GetTick>
 80066f2:	4602      	mov	r2, r0
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d302      	bcc.n	8006704 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d11a      	bne.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	f003 0302 	and.w	r3, r3, #2
 800670e:	2b02      	cmp	r3, #2
 8006710:	d013      	beq.n	800673a <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006716:	f043 0220 	orr.w	r2, r3, #32
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e007      	b.n	800674a <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d1c4      	bne.n	80066d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800675e:	e02f      	b.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	68b9      	ldr	r1, [r7, #8]
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 f8c3 	bl	80068f0 <I2C_IsErrorOccurred>
 800676a:	4603      	mov	r3, r0
 800676c:	2b00      	cmp	r3, #0
 800676e:	d001      	beq.n	8006774 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e02d      	b.n	80067d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006774:	f7fb f938 	bl	80019e8 <HAL_GetTick>
 8006778:	4602      	mov	r2, r0
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	429a      	cmp	r2, r3
 8006782:	d302      	bcc.n	800678a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d11a      	bne.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	699b      	ldr	r3, [r3, #24]
 8006790:	f003 0320 	and.w	r3, r3, #32
 8006794:	2b20      	cmp	r3, #32
 8006796:	d013      	beq.n	80067c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800679c:	f043 0220 	orr.w	r2, r3, #32
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	e007      	b.n	80067d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	f003 0320 	and.w	r3, r3, #32
 80067ca:	2b20      	cmp	r3, #32
 80067cc:	d1c8      	bne.n	8006760 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067ce:	2300      	movs	r3, #0
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80067e4:	2300      	movs	r3, #0
 80067e6:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80067e8:	e071      	b.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	68b9      	ldr	r1, [r7, #8]
 80067ee:	68f8      	ldr	r0, [r7, #12]
 80067f0:	f000 f87e 	bl	80068f0 <I2C_IsErrorOccurred>
 80067f4:	4603      	mov	r3, r0
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d001      	beq.n	80067fe <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	f003 0320 	and.w	r3, r3, #32
 8006808:	2b20      	cmp	r3, #32
 800680a:	d13b      	bne.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d138      	bne.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	699b      	ldr	r3, [r3, #24]
 8006818:	f003 0304 	and.w	r3, r3, #4
 800681c:	2b04      	cmp	r3, #4
 800681e:	d105      	bne.n	800682c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006824:	2b00      	cmp	r3, #0
 8006826:	d001      	beq.n	800682c <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	f003 0310 	and.w	r3, r3, #16
 8006836:	2b10      	cmp	r3, #16
 8006838:	d121      	bne.n	800687e <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2210      	movs	r2, #16
 8006840:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2204      	movs	r2, #4
 8006846:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2220      	movs	r2, #32
 800684e:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	6859      	ldr	r1, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	4b24      	ldr	r3, [pc, #144]	@ (80068ec <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 800685c:	400b      	ands	r3, r1
 800685e:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2220      	movs	r2, #32
 8006864:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	75fb      	strb	r3, [r7, #23]
 800687c:	e002      	b.n	8006884 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8006884:	f7fb f8b0 	bl	80019e8 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	68ba      	ldr	r2, [r7, #8]
 8006890:	429a      	cmp	r2, r3
 8006892:	d302      	bcc.n	800689a <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d119      	bne.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800689a:	7dfb      	ldrb	r3, [r7, #23]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d116      	bne.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	f003 0304 	and.w	r3, r3, #4
 80068aa:	2b04      	cmp	r3, #4
 80068ac:	d00f      	beq.n	80068ce <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068b2:	f043 0220 	orr.w	r2, r3, #32
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b04      	cmp	r3, #4
 80068da:	d002      	beq.n	80068e2 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 80068dc:	7dfb      	ldrb	r3, [r7, #23]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d083      	beq.n	80067ea <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 80068e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}
 80068ec:	fe00e800 	.word	0xfe00e800

080068f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b08a      	sub	sp, #40	@ 0x28
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80068fc:	2300      	movs	r3, #0
 80068fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	f003 0310 	and.w	r3, r3, #16
 8006918:	2b00      	cmp	r3, #0
 800691a:	d068      	beq.n	80069ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2210      	movs	r2, #16
 8006922:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006924:	e049      	b.n	80069ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d045      	beq.n	80069ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fb f85b 	bl	80019e8 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <I2C_IsErrorOccurred+0x54>
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d13a      	bne.n	80069ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685b      	ldr	r3, [r3, #4]
 800694a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800694e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006956:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006966:	d121      	bne.n	80069ac <I2C_IsErrorOccurred+0xbc>
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800696e:	d01d      	beq.n	80069ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8006970:	7cfb      	ldrb	r3, [r7, #19]
 8006972:	2b20      	cmp	r3, #32
 8006974:	d01a      	beq.n	80069ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006984:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006986:	f7fb f82f 	bl	80019e8 <HAL_GetTick>
 800698a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800698c:	e00e      	b.n	80069ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800698e:	f7fb f82b 	bl	80019e8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b19      	cmp	r3, #25
 800699a:	d907      	bls.n	80069ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	f043 0320 	orr.w	r3, r3, #32
 80069a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80069aa:	e006      	b.n	80069ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	699b      	ldr	r3, [r3, #24]
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b20      	cmp	r3, #32
 80069b8:	d1e9      	bne.n	800698e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	699b      	ldr	r3, [r3, #24]
 80069c0:	f003 0320 	and.w	r3, r3, #32
 80069c4:	2b20      	cmp	r3, #32
 80069c6:	d003      	beq.n	80069d0 <I2C_IsErrorOccurred+0xe0>
 80069c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0aa      	beq.n	8006926 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80069d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2220      	movs	r2, #32
 80069de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f043 0304 	orr.w	r3, r3, #4
 80069e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	699b      	ldr	r3, [r3, #24]
 80069f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80069f6:	69bb      	ldr	r3, [r7, #24]
 80069f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d00b      	beq.n	8006a18 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f043 0301 	orr.w	r3, r3, #1
 8006a06:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a10:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00b      	beq.n	8006a3a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006a22:	6a3b      	ldr	r3, [r7, #32]
 8006a24:	f043 0308 	orr.w	r3, r3, #8
 8006a28:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006a32:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006a3a:	69bb      	ldr	r3, [r7, #24]
 8006a3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00b      	beq.n	8006a5c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006a44:	6a3b      	ldr	r3, [r7, #32]
 8006a46:	f043 0302 	orr.w	r3, r3, #2
 8006a4a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a54:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8006a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d01c      	beq.n	8006a9e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006a64:	68f8      	ldr	r0, [r7, #12]
 8006a66:	f7ff fd92 	bl	800658e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	6859      	ldr	r1, [r3, #4]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <I2C_IsErrorOccurred+0x1bc>)
 8006a76:	400b      	ands	r3, r1
 8006a78:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2200      	movs	r2, #0
 8006a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006a9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3728      	adds	r7, #40	@ 0x28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	fe00e800 	.word	0xfe00e800

08006ab0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b087      	sub	sp, #28
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	60f8      	str	r0, [r7, #12]
 8006ab8:	607b      	str	r3, [r7, #4]
 8006aba:	460b      	mov	r3, r1
 8006abc:	817b      	strh	r3, [r7, #10]
 8006abe:	4613      	mov	r3, r2
 8006ac0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ac2:	897b      	ldrh	r3, [r7, #10]
 8006ac4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ac8:	7a7b      	ldrb	r3, [r7, #9]
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ad0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006ade:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	685a      	ldr	r2, [r3, #4]
 8006ae6:	6a3b      	ldr	r3, [r7, #32]
 8006ae8:	0d5b      	lsrs	r3, r3, #21
 8006aea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006aee:	4b08      	ldr	r3, [pc, #32]	@ (8006b10 <I2C_TransferConfig+0x60>)
 8006af0:	430b      	orrs	r3, r1
 8006af2:	43db      	mvns	r3, r3
 8006af4:	ea02 0103 	and.w	r1, r2, r3
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	430a      	orrs	r2, r1
 8006b00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006b02:	bf00      	nop
 8006b04:	371c      	adds	r7, #28
 8006b06:	46bd      	mov	sp, r7
 8006b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	03ff63ff 	.word	0x03ff63ff

08006b14 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006b20:	2300      	movs	r3, #0
 8006b22:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b28:	4a39      	ldr	r2, [pc, #228]	@ (8006c10 <I2C_Enable_IRQ+0xfc>)
 8006b2a:	4293      	cmp	r3, r2
 8006b2c:	d032      	beq.n	8006b94 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8006b32:	4a38      	ldr	r2, [pc, #224]	@ (8006c14 <I2C_Enable_IRQ+0x100>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d02d      	beq.n	8006b94 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8006b3c:	4a36      	ldr	r2, [pc, #216]	@ (8006c18 <I2C_Enable_IRQ+0x104>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d028      	beq.n	8006b94 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b42:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	da03      	bge.n	8006b52 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006b50:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006b52:	887b      	ldrh	r3, [r7, #2]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006b62:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006b64:	887b      	ldrh	r3, [r7, #2]
 8006b66:	f003 0302 	and.w	r3, r3, #2
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006b74:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006b76:	887b      	ldrh	r3, [r7, #2]
 8006b78:	2b10      	cmp	r3, #16
 8006b7a:	d103      	bne.n	8006b84 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006b82:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b84:	887b      	ldrh	r3, [r7, #2]
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d133      	bne.n	8006bf2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f043 0320 	orr.w	r3, r3, #32
 8006b90:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006b92:	e02e      	b.n	8006bf2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006b94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	da03      	bge.n	8006ba4 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006ba2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006ba4:	887b      	ldrh	r3, [r7, #2]
 8006ba6:	f003 0301 	and.w	r3, r3, #1
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8006bb4:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006bb6:	887b      	ldrh	r3, [r7, #2]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8006bc6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006bc8:	887b      	ldrh	r3, [r7, #2]
 8006bca:	2b10      	cmp	r3, #16
 8006bcc:	d103      	bne.n	8006bd6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006bd4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006bd6:	887b      	ldrh	r3, [r7, #2]
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d103      	bne.n	8006be4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006be2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006be4:	887b      	ldrh	r3, [r7, #2]
 8006be6:	2b40      	cmp	r3, #64	@ 0x40
 8006be8:	d103      	bne.n	8006bf2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bf0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6819      	ldr	r1, [r3, #0]
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	68fa      	ldr	r2, [r7, #12]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	601a      	str	r2, [r3, #0]
}
 8006c02:	bf00      	nop
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
 8006c0e:	bf00      	nop
 8006c10:	0800526f 	.word	0x0800526f
 8006c14:	08005691 	.word	0x08005691
 8006c18:	08005445 	.word	0x08005445

08006c1c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
 8006c24:	460b      	mov	r3, r1
 8006c26:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006c2c:	887b      	ldrh	r3, [r7, #2]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8006c3c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c44:	b2db      	uxtb	r3, r3
 8006c46:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c4a:	2b28      	cmp	r3, #40	@ 0x28
 8006c4c:	d003      	beq.n	8006c56 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c54:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8006c56:	887b      	ldrh	r3, [r7, #2]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8006c66:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c74:	2b28      	cmp	r3, #40	@ 0x28
 8006c76:	d003      	beq.n	8006c80 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8006c7e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	da03      	bge.n	8006c90 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8006c8e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006c90:	887b      	ldrh	r3, [r7, #2]
 8006c92:	2b10      	cmp	r3, #16
 8006c94:	d103      	bne.n	8006c9e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8006c9c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006c9e:	887b      	ldrh	r3, [r7, #2]
 8006ca0:	2b20      	cmp	r3, #32
 8006ca2:	d103      	bne.n	8006cac <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f043 0320 	orr.w	r3, r3, #32
 8006caa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	2b40      	cmp	r3, #64	@ 0x40
 8006cb0:	d103      	bne.n	8006cba <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6819      	ldr	r1, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	43da      	mvns	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	400a      	ands	r2, r1
 8006cca:	601a      	str	r2, [r3, #0]
}
 8006ccc:	bf00      	nop
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b083      	sub	sp, #12
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b20      	cmp	r3, #32
 8006cec:	d138      	bne.n	8006d60 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d101      	bne.n	8006cfc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	e032      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2224      	movs	r2, #36	@ 0x24
 8006d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f022 0201 	bic.w	r2, r2, #1
 8006d1a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d2a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	6819      	ldr	r1, [r3, #0]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	683a      	ldr	r2, [r7, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f042 0201 	orr.w	r2, r2, #1
 8006d4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	e000      	b.n	8006d62 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b085      	sub	sp, #20
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
 8006d76:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b20      	cmp	r3, #32
 8006d82:	d139      	bne.n	8006df8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e033      	b.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2201      	movs	r2, #1
 8006d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2224      	movs	r2, #36	@ 0x24
 8006d9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0201 	bic.w	r2, r2, #1
 8006db0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006dc0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	021b      	lsls	r3, r3, #8
 8006dc6:	68fa      	ldr	r2, [r7, #12]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0201 	orr.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2220      	movs	r2, #32
 8006de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2200      	movs	r2, #0
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006df4:	2300      	movs	r3, #0
 8006df6:	e000      	b.n	8006dfa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006df8:	2302      	movs	r3, #2
  }
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006e10:	4b19      	ldr	r3, [pc, #100]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d00a      	beq.n	8006e32 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006e1c:	4b16      	ldr	r3, [pc, #88]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d001      	beq.n	8006e2e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e01f      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e01d      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006e32:	4b11      	ldr	r3, [pc, #68]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	f023 0207 	bic.w	r2, r3, #7
 8006e3a:	490f      	ldr	r1, [pc, #60]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006e42:	f7fa fdd1 	bl	80019e8 <HAL_GetTick>
 8006e46:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e48:	e009      	b.n	8006e5e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006e4a:	f7fa fdcd 	bl	80019e8 <HAL_GetTick>
 8006e4e:	4602      	mov	r2, r0
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	1ad3      	subs	r3, r2, r3
 8006e54:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006e58:	d901      	bls.n	8006e5e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e007      	b.n	8006e6e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006e5e:	4b06      	ldr	r3, [pc, #24]	@ (8006e78 <HAL_PWREx_ConfigSupply+0x70>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e6a:	d1ee      	bne.n	8006e4a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	58024800 	.word	0x58024800

08006e7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08c      	sub	sp, #48	@ 0x30
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d102      	bne.n	8006e90 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	f000 bc48 	b.w	8007720 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	f000 8088 	beq.w	8006fae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006e9e:	4b99      	ldr	r3, [pc, #612]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ea0:	691b      	ldr	r3, [r3, #16]
 8006ea2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006ea8:	4b96      	ldr	r3, [pc, #600]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb0:	2b10      	cmp	r3, #16
 8006eb2:	d007      	beq.n	8006ec4 <HAL_RCC_OscConfig+0x48>
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	2b18      	cmp	r3, #24
 8006eb8:	d111      	bne.n	8006ede <HAL_RCC_OscConfig+0x62>
 8006eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ebc:	f003 0303 	and.w	r3, r3, #3
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d10c      	bne.n	8006ede <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d06d      	beq.n	8006fac <HAL_RCC_OscConfig+0x130>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d169      	bne.n	8006fac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006ed8:	2301      	movs	r3, #1
 8006eda:	f000 bc21 	b.w	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ee6:	d106      	bne.n	8006ef6 <HAL_RCC_OscConfig+0x7a>
 8006ee8:	4b86      	ldr	r3, [pc, #536]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a85      	ldr	r2, [pc, #532]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ef2:	6013      	str	r3, [r2, #0]
 8006ef4:	e02e      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10c      	bne.n	8006f18 <HAL_RCC_OscConfig+0x9c>
 8006efe:	4b81      	ldr	r3, [pc, #516]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a80      	ldr	r2, [pc, #512]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f04:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	4b7e      	ldr	r3, [pc, #504]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a7d      	ldr	r2, [pc, #500]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f10:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f14:	6013      	str	r3, [r2, #0]
 8006f16:	e01d      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006f20:	d10c      	bne.n	8006f3c <HAL_RCC_OscConfig+0xc0>
 8006f22:	4b78      	ldr	r3, [pc, #480]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a77      	ldr	r2, [pc, #476]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006f2c:	6013      	str	r3, [r2, #0]
 8006f2e:	4b75      	ldr	r3, [pc, #468]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a74      	ldr	r2, [pc, #464]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e00b      	b.n	8006f54 <HAL_RCC_OscConfig+0xd8>
 8006f3c:	4b71      	ldr	r3, [pc, #452]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a70      	ldr	r2, [pc, #448]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b6e      	ldr	r3, [pc, #440]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a6d      	ldr	r2, [pc, #436]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d013      	beq.n	8006f84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f5c:	f7fa fd44 	bl	80019e8 <HAL_GetTick>
 8006f60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f62:	e008      	b.n	8006f76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f64:	f7fa fd40 	bl	80019e8 <HAL_GetTick>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	1ad3      	subs	r3, r2, r3
 8006f6e:	2b64      	cmp	r3, #100	@ 0x64
 8006f70:	d901      	bls.n	8006f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e3d4      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006f76:	4b63      	ldr	r3, [pc, #396]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d0f0      	beq.n	8006f64 <HAL_RCC_OscConfig+0xe8>
 8006f82:	e014      	b.n	8006fae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f84:	f7fa fd30 	bl	80019e8 <HAL_GetTick>
 8006f88:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f8a:	e008      	b.n	8006f9e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f8c:	f7fa fd2c 	bl	80019e8 <HAL_GetTick>
 8006f90:	4602      	mov	r2, r0
 8006f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f94:	1ad3      	subs	r3, r2, r3
 8006f96:	2b64      	cmp	r3, #100	@ 0x64
 8006f98:	d901      	bls.n	8006f9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006f9a:	2303      	movs	r3, #3
 8006f9c:	e3c0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006f9e:	4b59      	ldr	r3, [pc, #356]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1f0      	bne.n	8006f8c <HAL_RCC_OscConfig+0x110>
 8006faa:	e000      	b.n	8006fae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0302 	and.w	r3, r3, #2
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 80ca 	beq.w	8007150 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006fbc:	4b51      	ldr	r3, [pc, #324]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006fc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006fc6:	4b4f      	ldr	r3, [pc, #316]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d007      	beq.n	8006fe2 <HAL_RCC_OscConfig+0x166>
 8006fd2:	6a3b      	ldr	r3, [r7, #32]
 8006fd4:	2b18      	cmp	r3, #24
 8006fd6:	d156      	bne.n	8007086 <HAL_RCC_OscConfig+0x20a>
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	f003 0303 	and.w	r3, r3, #3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d151      	bne.n	8007086 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe2:	4b48      	ldr	r3, [pc, #288]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f003 0304 	and.w	r3, r3, #4
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d005      	beq.n	8006ffa <HAL_RCC_OscConfig+0x17e>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e392      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006ffa:	4b42      	ldr	r3, [pc, #264]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f023 0219 	bic.w	r2, r3, #25
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68db      	ldr	r3, [r3, #12]
 8007006:	493f      	ldr	r1, [pc, #252]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007008:	4313      	orrs	r3, r2
 800700a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700c:	f7fa fcec 	bl	80019e8 <HAL_GetTick>
 8007010:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007012:	e008      	b.n	8007026 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007014:	f7fa fce8 	bl	80019e8 <HAL_GetTick>
 8007018:	4602      	mov	r2, r0
 800701a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701c:	1ad3      	subs	r3, r2, r3
 800701e:	2b02      	cmp	r3, #2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e37c      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007026:	4b37      	ldr	r3, [pc, #220]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f003 0304 	and.w	r3, r3, #4
 800702e:	2b00      	cmp	r3, #0
 8007030:	d0f0      	beq.n	8007014 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007032:	f7fa fd09 	bl	8001a48 <HAL_GetREVID>
 8007036:	4603      	mov	r3, r0
 8007038:	f241 0203 	movw	r2, #4099	@ 0x1003
 800703c:	4293      	cmp	r3, r2
 800703e:	d817      	bhi.n	8007070 <HAL_RCC_OscConfig+0x1f4>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d108      	bne.n	800705a <HAL_RCC_OscConfig+0x1de>
 8007048:	4b2e      	ldr	r3, [pc, #184]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007050:	4a2c      	ldr	r2, [pc, #176]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007052:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007056:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007058:	e07a      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800705a:	4b2a      	ldr	r3, [pc, #168]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	031b      	lsls	r3, r3, #12
 8007068:	4926      	ldr	r1, [pc, #152]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800706a:	4313      	orrs	r3, r2
 800706c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800706e:	e06f      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	061b      	lsls	r3, r3, #24
 800707e:	4921      	ldr	r1, [pc, #132]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007080:	4313      	orrs	r3, r2
 8007082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007084:	e064      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d047      	beq.n	800711e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800708e:	4b1d      	ldr	r3, [pc, #116]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f023 0219 	bic.w	r2, r3, #25
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	491a      	ldr	r1, [pc, #104]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 800709c:	4313      	orrs	r3, r2
 800709e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070a0:	f7fa fca2 	bl	80019e8 <HAL_GetTick>
 80070a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070a8:	f7fa fc9e 	bl	80019e8 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e332      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80070ba:	4b12      	ldr	r3, [pc, #72]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070c6:	f7fa fcbf 	bl	8001a48 <HAL_GetREVID>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d819      	bhi.n	8007108 <HAL_RCC_OscConfig+0x28c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	2b40      	cmp	r3, #64	@ 0x40
 80070da:	d108      	bne.n	80070ee <HAL_RCC_OscConfig+0x272>
 80070dc:	4b09      	ldr	r3, [pc, #36]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80070e4:	4a07      	ldr	r2, [pc, #28]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070ea:	6053      	str	r3, [r2, #4]
 80070ec:	e030      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
 80070ee:	4b05      	ldr	r3, [pc, #20]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	691b      	ldr	r3, [r3, #16]
 80070fa:	031b      	lsls	r3, r3, #12
 80070fc:	4901      	ldr	r1, [pc, #4]	@ (8007104 <HAL_RCC_OscConfig+0x288>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	604b      	str	r3, [r1, #4]
 8007102:	e025      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
 8007104:	58024400 	.word	0x58024400
 8007108:	4b9a      	ldr	r3, [pc, #616]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	061b      	lsls	r3, r3, #24
 8007116:	4997      	ldr	r1, [pc, #604]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007118:	4313      	orrs	r3, r2
 800711a:	604b      	str	r3, [r1, #4]
 800711c:	e018      	b.n	8007150 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800711e:	4b95      	ldr	r3, [pc, #596]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a94      	ldr	r2, [pc, #592]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007124:	f023 0301 	bic.w	r3, r3, #1
 8007128:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800712a:	f7fa fc5d 	bl	80019e8 <HAL_GetTick>
 800712e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007130:	e008      	b.n	8007144 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007132:	f7fa fc59 	bl	80019e8 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b02      	cmp	r3, #2
 800713e:	d901      	bls.n	8007144 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e2ed      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007144:	4b8b      	ldr	r3, [pc, #556]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0304 	and.w	r3, r3, #4
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1f0      	bne.n	8007132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0310 	and.w	r3, r3, #16
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a9 	beq.w	80072b0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800715e:	4b85      	ldr	r3, [pc, #532]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007166:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007168:	4b82      	ldr	r3, [pc, #520]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800716a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800716c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	2b08      	cmp	r3, #8
 8007172:	d007      	beq.n	8007184 <HAL_RCC_OscConfig+0x308>
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	2b18      	cmp	r3, #24
 8007178:	d13a      	bne.n	80071f0 <HAL_RCC_OscConfig+0x374>
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	2b01      	cmp	r3, #1
 8007182:	d135      	bne.n	80071f0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007184:	4b7b      	ldr	r3, [pc, #492]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800718c:	2b00      	cmp	r3, #0
 800718e:	d005      	beq.n	800719c <HAL_RCC_OscConfig+0x320>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	2b80      	cmp	r3, #128	@ 0x80
 8007196:	d001      	beq.n	800719c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	e2c1      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800719c:	f7fa fc54 	bl	8001a48 <HAL_GetREVID>
 80071a0:	4603      	mov	r3, r0
 80071a2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d817      	bhi.n	80071da <HAL_RCC_OscConfig+0x35e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d108      	bne.n	80071c4 <HAL_RCC_OscConfig+0x348>
 80071b2:	4b70      	ldr	r3, [pc, #448]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80071ba:	4a6e      	ldr	r2, [pc, #440]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071bc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071c2:	e075      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071c4:	4b6b      	ldr	r3, [pc, #428]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	069b      	lsls	r3, r3, #26
 80071d2:	4968      	ldr	r1, [pc, #416]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071d8:	e06a      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80071da:	4b66      	ldr	r3, [pc, #408]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071dc:	68db      	ldr	r3, [r3, #12]
 80071de:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	061b      	lsls	r3, r3, #24
 80071e8:	4962      	ldr	r1, [pc, #392]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80071ee:	e05f      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	69db      	ldr	r3, [r3, #28]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d042      	beq.n	800727e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80071f8:	4b5e      	ldr	r3, [pc, #376]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a5d      	ldr	r2, [pc, #372]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80071fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007202:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007204:	f7fa fbf0 	bl	80019e8 <HAL_GetTick>
 8007208:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800720a:	e008      	b.n	800721e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800720c:	f7fa fbec 	bl	80019e8 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	2b02      	cmp	r3, #2
 8007218:	d901      	bls.n	800721e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e280      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800721e:	4b55      	ldr	r3, [pc, #340]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0f0      	beq.n	800720c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800722a:	f7fa fc0d 	bl	8001a48 <HAL_GetREVID>
 800722e:	4603      	mov	r3, r0
 8007230:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007234:	4293      	cmp	r3, r2
 8007236:	d817      	bhi.n	8007268 <HAL_RCC_OscConfig+0x3ec>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	2b20      	cmp	r3, #32
 800723e:	d108      	bne.n	8007252 <HAL_RCC_OscConfig+0x3d6>
 8007240:	4b4c      	ldr	r3, [pc, #304]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007248:	4a4a      	ldr	r2, [pc, #296]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800724a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800724e:	6053      	str	r3, [r2, #4]
 8007250:	e02e      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
 8007252:	4b48      	ldr	r3, [pc, #288]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	069b      	lsls	r3, r3, #26
 8007260:	4944      	ldr	r1, [pc, #272]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007262:	4313      	orrs	r3, r2
 8007264:	604b      	str	r3, [r1, #4]
 8007266:	e023      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
 8007268:	4b42      	ldr	r3, [pc, #264]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	061b      	lsls	r3, r3, #24
 8007276:	493f      	ldr	r1, [pc, #252]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007278:	4313      	orrs	r3, r2
 800727a:	60cb      	str	r3, [r1, #12]
 800727c:	e018      	b.n	80072b0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800727e:	4b3d      	ldr	r3, [pc, #244]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a3c      	ldr	r2, [pc, #240]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007284:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800728a:	f7fa fbad 	bl	80019e8 <HAL_GetTick>
 800728e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007290:	e008      	b.n	80072a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007292:	f7fa fba9 	bl	80019e8 <HAL_GetTick>
 8007296:	4602      	mov	r2, r0
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	1ad3      	subs	r3, r2, r3
 800729c:	2b02      	cmp	r3, #2
 800729e:	d901      	bls.n	80072a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80072a0:	2303      	movs	r3, #3
 80072a2:	e23d      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80072a4:	4b33      	ldr	r3, [pc, #204]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f0      	bne.n	8007292 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f003 0308 	and.w	r3, r3, #8
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d036      	beq.n	800732a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	695b      	ldr	r3, [r3, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d019      	beq.n	80072f8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80072c4:	4b2b      	ldr	r3, [pc, #172]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072c8:	4a2a      	ldr	r2, [pc, #168]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072d0:	f7fa fb8a 	bl	80019e8 <HAL_GetTick>
 80072d4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072d6:	e008      	b.n	80072ea <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d8:	f7fa fb86 	bl	80019e8 <HAL_GetTick>
 80072dc:	4602      	mov	r2, r0
 80072de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e0:	1ad3      	subs	r3, r2, r3
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d901      	bls.n	80072ea <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80072e6:	2303      	movs	r3, #3
 80072e8:	e21a      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80072ea:	4b22      	ldr	r3, [pc, #136]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072ee:	f003 0302 	and.w	r3, r3, #2
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d0f0      	beq.n	80072d8 <HAL_RCC_OscConfig+0x45c>
 80072f6:	e018      	b.n	800732a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072f8:	4b1e      	ldr	r3, [pc, #120]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80072fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 80072fe:	f023 0301 	bic.w	r3, r3, #1
 8007302:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007304:	f7fa fb70 	bl	80019e8 <HAL_GetTick>
 8007308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800730a:	e008      	b.n	800731e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800730c:	f7fa fb6c 	bl	80019e8 <HAL_GetTick>
 8007310:	4602      	mov	r2, r0
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	2b02      	cmp	r3, #2
 8007318:	d901      	bls.n	800731e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800731a:	2303      	movs	r3, #3
 800731c:	e200      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800731e:	4b15      	ldr	r3, [pc, #84]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007320:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d1f0      	bne.n	800730c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d039      	beq.n	80073aa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	699b      	ldr	r3, [r3, #24]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d01c      	beq.n	8007378 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800733e:	4b0d      	ldr	r3, [pc, #52]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a0c      	ldr	r2, [pc, #48]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007348:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800734a:	f7fa fb4d 	bl	80019e8 <HAL_GetTick>
 800734e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007350:	e008      	b.n	8007364 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007352:	f7fa fb49 	bl	80019e8 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	2b02      	cmp	r3, #2
 800735e:	d901      	bls.n	8007364 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007360:	2303      	movs	r3, #3
 8007362:	e1dd      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007364:	4b03      	ldr	r3, [pc, #12]	@ (8007374 <HAL_RCC_OscConfig+0x4f8>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0f0      	beq.n	8007352 <HAL_RCC_OscConfig+0x4d6>
 8007370:	e01b      	b.n	80073aa <HAL_RCC_OscConfig+0x52e>
 8007372:	bf00      	nop
 8007374:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007378:	4b9b      	ldr	r3, [pc, #620]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a9a      	ldr	r2, [pc, #616]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800737e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007382:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007384:	f7fa fb30 	bl	80019e8 <HAL_GetTick>
 8007388:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800738a:	e008      	b.n	800739e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800738c:	f7fa fb2c 	bl	80019e8 <HAL_GetTick>
 8007390:	4602      	mov	r2, r0
 8007392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007394:	1ad3      	subs	r3, r2, r3
 8007396:	2b02      	cmp	r3, #2
 8007398:	d901      	bls.n	800739e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e1c0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800739e:	4b92      	ldr	r3, [pc, #584]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1f0      	bne.n	800738c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 0304 	and.w	r3, r3, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 8081 	beq.w	80074ba <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073b8:	4b8c      	ldr	r3, [pc, #560]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a8b      	ldr	r2, [pc, #556]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80073c4:	f7fa fb10 	bl	80019e8 <HAL_GetTick>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073cc:	f7fa fb0c 	bl	80019e8 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b64      	cmp	r3, #100	@ 0x64
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e1a0      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80073de:	4b83      	ldr	r3, [pc, #524]	@ (80075ec <HAL_RCC_OscConfig+0x770>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d106      	bne.n	8007400 <HAL_RCC_OscConfig+0x584>
 80073f2:	4b7d      	ldr	r3, [pc, #500]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073f6:	4a7c      	ldr	r2, [pc, #496]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80073f8:	f043 0301 	orr.w	r3, r3, #1
 80073fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80073fe:	e02d      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	689b      	ldr	r3, [r3, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d10c      	bne.n	8007422 <HAL_RCC_OscConfig+0x5a6>
 8007408:	4b77      	ldr	r3, [pc, #476]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800740a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800740c:	4a76      	ldr	r2, [pc, #472]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800740e:	f023 0301 	bic.w	r3, r3, #1
 8007412:	6713      	str	r3, [r2, #112]	@ 0x70
 8007414:	4b74      	ldr	r3, [pc, #464]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007418:	4a73      	ldr	r2, [pc, #460]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800741a:	f023 0304 	bic.w	r3, r3, #4
 800741e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007420:	e01c      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	2b05      	cmp	r3, #5
 8007428:	d10c      	bne.n	8007444 <HAL_RCC_OscConfig+0x5c8>
 800742a:	4b6f      	ldr	r3, [pc, #444]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800742c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742e:	4a6e      	ldr	r2, [pc, #440]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007430:	f043 0304 	orr.w	r3, r3, #4
 8007434:	6713      	str	r3, [r2, #112]	@ 0x70
 8007436:	4b6c      	ldr	r3, [pc, #432]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007438:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800743a:	4a6b      	ldr	r2, [pc, #428]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800743c:	f043 0301 	orr.w	r3, r3, #1
 8007440:	6713      	str	r3, [r2, #112]	@ 0x70
 8007442:	e00b      	b.n	800745c <HAL_RCC_OscConfig+0x5e0>
 8007444:	4b68      	ldr	r3, [pc, #416]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007448:	4a67      	ldr	r2, [pc, #412]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800744a:	f023 0301 	bic.w	r3, r3, #1
 800744e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007450:	4b65      	ldr	r3, [pc, #404]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007452:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007454:	4a64      	ldr	r2, [pc, #400]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007456:	f023 0304 	bic.w	r3, r3, #4
 800745a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d015      	beq.n	8007490 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007464:	f7fa fac0 	bl	80019e8 <HAL_GetTick>
 8007468:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800746a:	e00a      	b.n	8007482 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800746c:	f7fa fabc 	bl	80019e8 <HAL_GetTick>
 8007470:	4602      	mov	r2, r0
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	1ad3      	subs	r3, r2, r3
 8007476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800747a:	4293      	cmp	r3, r2
 800747c:	d901      	bls.n	8007482 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800747e:	2303      	movs	r3, #3
 8007480:	e14e      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007482:	4b59      	ldr	r3, [pc, #356]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007486:	f003 0302 	and.w	r3, r3, #2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d0ee      	beq.n	800746c <HAL_RCC_OscConfig+0x5f0>
 800748e:	e014      	b.n	80074ba <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007490:	f7fa faaa 	bl	80019e8 <HAL_GetTick>
 8007494:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007496:	e00a      	b.n	80074ae <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007498:	f7fa faa6 	bl	80019e8 <HAL_GetTick>
 800749c:	4602      	mov	r2, r0
 800749e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a0:	1ad3      	subs	r3, r2, r3
 80074a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d901      	bls.n	80074ae <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e138      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80074ae:	4b4e      	ldr	r3, [pc, #312]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074b2:	f003 0302 	and.w	r3, r3, #2
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1ee      	bne.n	8007498 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074be:	2b00      	cmp	r3, #0
 80074c0:	f000 812d 	beq.w	800771e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80074c4:	4b48      	ldr	r3, [pc, #288]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074c6:	691b      	ldr	r3, [r3, #16]
 80074c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074cc:	2b18      	cmp	r3, #24
 80074ce:	f000 80bd 	beq.w	800764c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	f040 809e 	bne.w	8007618 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074dc:	4b42      	ldr	r3, [pc, #264]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a41      	ldr	r2, [pc, #260]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80074e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80074e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074e8:	f7fa fa7e 	bl	80019e8 <HAL_GetTick>
 80074ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80074ee:	e008      	b.n	8007502 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074f0:	f7fa fa7a 	bl	80019e8 <HAL_GetTick>
 80074f4:	4602      	mov	r2, r0
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	d901      	bls.n	8007502 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80074fe:	2303      	movs	r3, #3
 8007500:	e10e      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007502:	4b39      	ldr	r3, [pc, #228]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d1f0      	bne.n	80074f0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800750e:	4b36      	ldr	r3, [pc, #216]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007510:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007512:	4b37      	ldr	r3, [pc, #220]	@ (80075f0 <HAL_RCC_OscConfig+0x774>)
 8007514:	4013      	ands	r3, r2
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800751e:	0112      	lsls	r2, r2, #4
 8007520:	430a      	orrs	r2, r1
 8007522:	4931      	ldr	r1, [pc, #196]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007524:	4313      	orrs	r3, r2
 8007526:	628b      	str	r3, [r1, #40]	@ 0x28
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800752c:	3b01      	subs	r3, #1
 800752e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007536:	3b01      	subs	r3, #1
 8007538:	025b      	lsls	r3, r3, #9
 800753a:	b29b      	uxth	r3, r3
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	3b01      	subs	r3, #1
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800754a:	431a      	orrs	r2, r3
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007550:	3b01      	subs	r3, #1
 8007552:	061b      	lsls	r3, r3, #24
 8007554:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007558:	4923      	ldr	r1, [pc, #140]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800755a:	4313      	orrs	r3, r2
 800755c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800755e:	4b22      	ldr	r3, [pc, #136]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007562:	4a21      	ldr	r2, [pc, #132]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007564:	f023 0301 	bic.w	r3, r3, #1
 8007568:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800756a:	4b1f      	ldr	r3, [pc, #124]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800756c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800756e:	4b21      	ldr	r3, [pc, #132]	@ (80075f4 <HAL_RCC_OscConfig+0x778>)
 8007570:	4013      	ands	r3, r2
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007576:	00d2      	lsls	r2, r2, #3
 8007578:	491b      	ldr	r1, [pc, #108]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800757a:	4313      	orrs	r3, r2
 800757c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800757e:	4b1a      	ldr	r3, [pc, #104]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007582:	f023 020c 	bic.w	r2, r3, #12
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800758a:	4917      	ldr	r1, [pc, #92]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800758c:	4313      	orrs	r3, r2
 800758e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007590:	4b15      	ldr	r3, [pc, #84]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 8007592:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007594:	f023 0202 	bic.w	r2, r3, #2
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800759c:	4912      	ldr	r1, [pc, #72]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 800759e:	4313      	orrs	r3, r2
 80075a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80075a2:	4b11      	ldr	r3, [pc, #68]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a6:	4a10      	ldr	r2, [pc, #64]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80075ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ae:	4b0e      	ldr	r3, [pc, #56]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075b2:	4a0d      	ldr	r2, [pc, #52]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80075ba:	4b0b      	ldr	r3, [pc, #44]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075be:	4a0a      	ldr	r2, [pc, #40]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80075c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80075c6:	4b08      	ldr	r3, [pc, #32]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ca:	4a07      	ldr	r2, [pc, #28]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075cc:	f043 0301 	orr.w	r3, r3, #1
 80075d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80075d2:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a04      	ldr	r2, [pc, #16]	@ (80075e8 <HAL_RCC_OscConfig+0x76c>)
 80075d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80075dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075de:	f7fa fa03 	bl	80019e8 <HAL_GetTick>
 80075e2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80075e4:	e011      	b.n	800760a <HAL_RCC_OscConfig+0x78e>
 80075e6:	bf00      	nop
 80075e8:	58024400 	.word	0x58024400
 80075ec:	58024800 	.word	0x58024800
 80075f0:	fffffc0c 	.word	0xfffffc0c
 80075f4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80075f8:	f7fa f9f6 	bl	80019e8 <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b02      	cmp	r3, #2
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e08a      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800760a:	4b47      	ldr	r3, [pc, #284]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0x77c>
 8007616:	e082      	b.n	800771e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007618:	4b43      	ldr	r3, [pc, #268]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a42      	ldr	r2, [pc, #264]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800761e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fa f9e0 	bl	80019e8 <HAL_GetTick>
 8007628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800762c:	f7fa f9dc 	bl	80019e8 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b02      	cmp	r3, #2
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e070      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800763e:	4b3a      	ldr	r3, [pc, #232]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1f0      	bne.n	800762c <HAL_RCC_OscConfig+0x7b0>
 800764a:	e068      	b.n	800771e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800764c:	4b36      	ldr	r3, [pc, #216]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800764e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007650:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007652:	4b35      	ldr	r3, [pc, #212]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007656:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	2b01      	cmp	r3, #1
 800765e:	d031      	beq.n	80076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	f003 0203 	and.w	r2, r3, #3
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800766a:	429a      	cmp	r2, r3
 800766c:	d12a      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	091b      	lsrs	r3, r3, #4
 8007672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800767a:	429a      	cmp	r2, r3
 800767c:	d122      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007688:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800768a:	429a      	cmp	r2, r3
 800768c:	d11a      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	0a5b      	lsrs	r3, r3, #9
 8007692:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800769a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800769c:	429a      	cmp	r2, r3
 800769e:	d111      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076ac:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d108      	bne.n	80076c4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	0e1b      	lsrs	r3, r3, #24
 80076b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076be:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d001      	beq.n	80076c8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e02b      	b.n	8007720 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80076c8:	4b17      	ldr	r3, [pc, #92]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076cc:	08db      	lsrs	r3, r3, #3
 80076ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076d2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076d8:	693a      	ldr	r2, [r7, #16]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d01f      	beq.n	800771e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80076de:	4b12      	ldr	r3, [pc, #72]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e2:	4a11      	ldr	r2, [pc, #68]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 80076e4:	f023 0301 	bic.w	r3, r3, #1
 80076e8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80076ea:	f7fa f97d 	bl	80019e8 <HAL_GetTick>
 80076ee:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80076f0:	bf00      	nop
 80076f2:	f7fa f979 	bl	80019e8 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d0f9      	beq.n	80076f2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007700:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007702:	4b0a      	ldr	r3, [pc, #40]	@ (800772c <HAL_RCC_OscConfig+0x8b0>)
 8007704:	4013      	ands	r3, r2
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800770a:	00d2      	lsls	r2, r2, #3
 800770c:	4906      	ldr	r1, [pc, #24]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 800770e:	4313      	orrs	r3, r2
 8007710:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8007712:	4b05      	ldr	r3, [pc, #20]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007716:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <HAL_RCC_OscConfig+0x8ac>)
 8007718:	f043 0301 	orr.w	r3, r3, #1
 800771c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3730      	adds	r7, #48	@ 0x30
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	58024400 	.word	0x58024400
 800772c:	ffff0007 	.word	0xffff0007

08007730 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	e19c      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007744:	4b8a      	ldr	r3, [pc, #552]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d910      	bls.n	8007774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007752:	4b87      	ldr	r3, [pc, #540]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f023 020f 	bic.w	r2, r3, #15
 800775a:	4985      	ldr	r1, [pc, #532]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	4313      	orrs	r3, r2
 8007760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007762:	4b83      	ldr	r3, [pc, #524]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f003 030f 	and.w	r3, r3, #15
 800776a:	683a      	ldr	r2, [r7, #0]
 800776c:	429a      	cmp	r2, r3
 800776e:	d001      	beq.n	8007774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e184      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b00      	cmp	r3, #0
 800777e:	d010      	beq.n	80077a2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	691a      	ldr	r2, [r3, #16]
 8007784:	4b7b      	ldr	r3, [pc, #492]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007786:	699b      	ldr	r3, [r3, #24]
 8007788:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800778c:	429a      	cmp	r2, r3
 800778e:	d908      	bls.n	80077a2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007790:	4b78      	ldr	r3, [pc, #480]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	4975      	ldr	r1, [pc, #468]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800779e:	4313      	orrs	r3, r2
 80077a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0308 	and.w	r3, r3, #8
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d010      	beq.n	80077d0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	695a      	ldr	r2, [r3, #20]
 80077b2:	4b70      	ldr	r3, [pc, #448]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d908      	bls.n	80077d0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80077be:	4b6d      	ldr	r3, [pc, #436]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077c0:	69db      	ldr	r3, [r3, #28]
 80077c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	695b      	ldr	r3, [r3, #20]
 80077ca:	496a      	ldr	r1, [pc, #424]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077cc:	4313      	orrs	r3, r2
 80077ce:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f003 0310 	and.w	r3, r3, #16
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d010      	beq.n	80077fe <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699a      	ldr	r2, [r3, #24]
 80077e0:	4b64      	ldr	r3, [pc, #400]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077e2:	69db      	ldr	r3, [r3, #28]
 80077e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80077e8:	429a      	cmp	r2, r3
 80077ea:	d908      	bls.n	80077fe <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80077ec:	4b61      	ldr	r3, [pc, #388]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077ee:	69db      	ldr	r3, [r3, #28]
 80077f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	495e      	ldr	r1, [pc, #376]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80077fa:	4313      	orrs	r3, r2
 80077fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0320 	and.w	r3, r3, #32
 8007806:	2b00      	cmp	r3, #0
 8007808:	d010      	beq.n	800782c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	69da      	ldr	r2, [r3, #28]
 800780e:	4b59      	ldr	r3, [pc, #356]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007810:	6a1b      	ldr	r3, [r3, #32]
 8007812:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007816:	429a      	cmp	r2, r3
 8007818:	d908      	bls.n	800782c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800781a:	4b56      	ldr	r3, [pc, #344]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	69db      	ldr	r3, [r3, #28]
 8007826:	4953      	ldr	r1, [pc, #332]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007828:	4313      	orrs	r3, r2
 800782a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0302 	and.w	r3, r3, #2
 8007834:	2b00      	cmp	r3, #0
 8007836:	d010      	beq.n	800785a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	4b4d      	ldr	r3, [pc, #308]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	f003 030f 	and.w	r3, r3, #15
 8007844:	429a      	cmp	r2, r3
 8007846:	d908      	bls.n	800785a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b4a      	ldr	r3, [pc, #296]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800784a:	699b      	ldr	r3, [r3, #24]
 800784c:	f023 020f 	bic.w	r2, r3, #15
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	4947      	ldr	r1, [pc, #284]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007856:	4313      	orrs	r3, r2
 8007858:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d055      	beq.n	8007912 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007866:	4b43      	ldr	r3, [pc, #268]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007868:	699b      	ldr	r3, [r3, #24]
 800786a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	4940      	ldr	r1, [pc, #256]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007874:	4313      	orrs	r3, r2
 8007876:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2b02      	cmp	r3, #2
 800787e:	d107      	bne.n	8007890 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007880:	4b3c      	ldr	r3, [pc, #240]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007888:	2b00      	cmp	r3, #0
 800788a:	d121      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e0f6      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b03      	cmp	r3, #3
 8007896:	d107      	bne.n	80078a8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007898:	4b36      	ldr	r3, [pc, #216]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d115      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e0ea      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d107      	bne.n	80078c0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80078b0:	4b30      	ldr	r3, [pc, #192]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d109      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078bc:	2301      	movs	r3, #1
 80078be:	e0de      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80078c0:	4b2c      	ldr	r3, [pc, #176]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d101      	bne.n	80078d0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80078cc:	2301      	movs	r3, #1
 80078ce:	e0d6      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80078d0:	4b28      	ldr	r3, [pc, #160]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f023 0207 	bic.w	r2, r3, #7
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	4925      	ldr	r1, [pc, #148]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 80078de:	4313      	orrs	r3, r2
 80078e0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078e2:	f7fa f881 	bl	80019e8 <HAL_GetTick>
 80078e6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078e8:	e00a      	b.n	8007900 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078ea:	f7fa f87d 	bl	80019e8 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d901      	bls.n	8007900 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80078fc:	2303      	movs	r3, #3
 80078fe:	e0be      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007900:	4b1c      	ldr	r3, [pc, #112]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	00db      	lsls	r3, r3, #3
 800790e:	429a      	cmp	r2, r3
 8007910:	d1eb      	bne.n	80078ea <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d010      	beq.n	8007940 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	68da      	ldr	r2, [r3, #12]
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007924:	699b      	ldr	r3, [r3, #24]
 8007926:	f003 030f 	and.w	r3, r3, #15
 800792a:	429a      	cmp	r2, r3
 800792c:	d208      	bcs.n	8007940 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800792e:	4b11      	ldr	r3, [pc, #68]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f023 020f 	bic.w	r2, r3, #15
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68db      	ldr	r3, [r3, #12]
 800793a:	490e      	ldr	r1, [pc, #56]	@ (8007974 <HAL_RCC_ClockConfig+0x244>)
 800793c:	4313      	orrs	r3, r2
 800793e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007940:	4b0b      	ldr	r3, [pc, #44]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	683a      	ldr	r2, [r7, #0]
 800794a:	429a      	cmp	r2, r3
 800794c:	d214      	bcs.n	8007978 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800794e:	4b08      	ldr	r3, [pc, #32]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f023 020f 	bic.w	r2, r3, #15
 8007956:	4906      	ldr	r1, [pc, #24]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	4313      	orrs	r3, r2
 800795c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800795e:	4b04      	ldr	r3, [pc, #16]	@ (8007970 <HAL_RCC_ClockConfig+0x240>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	429a      	cmp	r2, r3
 800796a:	d005      	beq.n	8007978 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	e086      	b.n	8007a7e <HAL_RCC_ClockConfig+0x34e>
 8007970:	52002000 	.word	0x52002000
 8007974:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d010      	beq.n	80079a6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	691a      	ldr	r2, [r3, #16]
 8007988:	4b3f      	ldr	r3, [pc, #252]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007990:	429a      	cmp	r2, r3
 8007992:	d208      	bcs.n	80079a6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007994:	4b3c      	ldr	r3, [pc, #240]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	691b      	ldr	r3, [r3, #16]
 80079a0:	4939      	ldr	r1, [pc, #228]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079a2:	4313      	orrs	r3, r2
 80079a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f003 0308 	and.w	r3, r3, #8
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d010      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	695a      	ldr	r2, [r3, #20]
 80079b6:	4b34      	ldr	r3, [pc, #208]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079b8:	69db      	ldr	r3, [r3, #28]
 80079ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80079be:	429a      	cmp	r2, r3
 80079c0:	d208      	bcs.n	80079d4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80079c2:	4b31      	ldr	r3, [pc, #196]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	492e      	ldr	r1, [pc, #184]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079d0:	4313      	orrs	r3, r2
 80079d2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f003 0310 	and.w	r3, r3, #16
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d010      	beq.n	8007a02 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	699a      	ldr	r2, [r3, #24]
 80079e4:	4b28      	ldr	r3, [pc, #160]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079e6:	69db      	ldr	r3, [r3, #28]
 80079e8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d208      	bcs.n	8007a02 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80079f0:	4b25      	ldr	r3, [pc, #148]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079f2:	69db      	ldr	r3, [r3, #28]
 80079f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	699b      	ldr	r3, [r3, #24]
 80079fc:	4922      	ldr	r1, [pc, #136]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 80079fe:	4313      	orrs	r3, r2
 8007a00:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d010      	beq.n	8007a30 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	69da      	ldr	r2, [r3, #28]
 8007a12:	4b1d      	ldr	r3, [pc, #116]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a14:	6a1b      	ldr	r3, [r3, #32]
 8007a16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d208      	bcs.n	8007a30 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69db      	ldr	r3, [r3, #28]
 8007a2a:	4917      	ldr	r1, [pc, #92]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a2c:	4313      	orrs	r3, r2
 8007a2e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007a30:	f000 f834 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b14      	ldr	r3, [pc, #80]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	0a1b      	lsrs	r3, r3, #8
 8007a3c:	f003 030f 	and.w	r3, r3, #15
 8007a40:	4912      	ldr	r1, [pc, #72]	@ (8007a8c <HAL_RCC_ClockConfig+0x35c>)
 8007a42:	5ccb      	ldrb	r3, [r1, r3]
 8007a44:	f003 031f 	and.w	r3, r3, #31
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
 8007a4c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8007a88 <HAL_RCC_ClockConfig+0x358>)
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	4a0d      	ldr	r2, [pc, #52]	@ (8007a8c <HAL_RCC_ClockConfig+0x35c>)
 8007a58:	5cd3      	ldrb	r3, [r2, r3]
 8007a5a:	f003 031f 	and.w	r3, r3, #31
 8007a5e:	693a      	ldr	r2, [r7, #16]
 8007a60:	fa22 f303 	lsr.w	r3, r2, r3
 8007a64:	4a0a      	ldr	r2, [pc, #40]	@ (8007a90 <HAL_RCC_ClockConfig+0x360>)
 8007a66:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007a68:	4a0a      	ldr	r2, [pc, #40]	@ (8007a94 <HAL_RCC_ClockConfig+0x364>)
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a98 <HAL_RCC_ClockConfig+0x368>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4618      	mov	r0, r3
 8007a74:	f7f9 ff6e 	bl	8001954 <HAL_InitTick>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	58024400 	.word	0x58024400
 8007a8c:	0800fb2c 	.word	0x0800fb2c
 8007a90:	24000008 	.word	0x24000008
 8007a94:	24000004 	.word	0x24000004
 8007a98:	2400000c 	.word	0x2400000c

08007a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b089      	sub	sp, #36	@ 0x24
 8007aa0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007aa2:	4bb3      	ldr	r3, [pc, #716]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007aaa:	2b18      	cmp	r3, #24
 8007aac:	f200 8155 	bhi.w	8007d5a <HAL_RCC_GetSysClockFreq+0x2be>
 8007ab0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ab8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007ab2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab6:	bf00      	nop
 8007ab8:	08007b1d 	.word	0x08007b1d
 8007abc:	08007d5b 	.word	0x08007d5b
 8007ac0:	08007d5b 	.word	0x08007d5b
 8007ac4:	08007d5b 	.word	0x08007d5b
 8007ac8:	08007d5b 	.word	0x08007d5b
 8007acc:	08007d5b 	.word	0x08007d5b
 8007ad0:	08007d5b 	.word	0x08007d5b
 8007ad4:	08007d5b 	.word	0x08007d5b
 8007ad8:	08007b43 	.word	0x08007b43
 8007adc:	08007d5b 	.word	0x08007d5b
 8007ae0:	08007d5b 	.word	0x08007d5b
 8007ae4:	08007d5b 	.word	0x08007d5b
 8007ae8:	08007d5b 	.word	0x08007d5b
 8007aec:	08007d5b 	.word	0x08007d5b
 8007af0:	08007d5b 	.word	0x08007d5b
 8007af4:	08007d5b 	.word	0x08007d5b
 8007af8:	08007b49 	.word	0x08007b49
 8007afc:	08007d5b 	.word	0x08007d5b
 8007b00:	08007d5b 	.word	0x08007d5b
 8007b04:	08007d5b 	.word	0x08007d5b
 8007b08:	08007d5b 	.word	0x08007d5b
 8007b0c:	08007d5b 	.word	0x08007d5b
 8007b10:	08007d5b 	.word	0x08007d5b
 8007b14:	08007d5b 	.word	0x08007d5b
 8007b18:	08007b4f 	.word	0x08007b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b1c:	4b94      	ldr	r3, [pc, #592]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0320 	and.w	r3, r3, #32
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d009      	beq.n	8007b3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b28:	4b91      	ldr	r3, [pc, #580]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	08db      	lsrs	r3, r3, #3
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	4a90      	ldr	r2, [pc, #576]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b34:	fa22 f303 	lsr.w	r3, r2, r3
 8007b38:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8007b3a:	e111      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007b3c:	4b8d      	ldr	r3, [pc, #564]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007b3e:	61bb      	str	r3, [r7, #24]
      break;
 8007b40:	e10e      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007b42:	4b8d      	ldr	r3, [pc, #564]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007b44:	61bb      	str	r3, [r7, #24]
      break;
 8007b46:	e10b      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8007b48:	4b8c      	ldr	r3, [pc, #560]	@ (8007d7c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007b4a:	61bb      	str	r3, [r7, #24]
      break;
 8007b4c:	e108      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b4e:	4b88      	ldr	r3, [pc, #544]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b52:	f003 0303 	and.w	r3, r3, #3
 8007b56:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007b58:	4b85      	ldr	r3, [pc, #532]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	091b      	lsrs	r3, r3, #4
 8007b5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b62:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007b64:	4b82      	ldr	r3, [pc, #520]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b68:	f003 0301 	and.w	r3, r3, #1
 8007b6c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007b6e:	4b80      	ldr	r3, [pc, #512]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007b70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b72:	08db      	lsrs	r3, r3, #3
 8007b74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b78:	68fa      	ldr	r2, [r7, #12]
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	ee07 3a90 	vmov	s15, r3
 8007b82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b86:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	f000 80e1 	beq.w	8007d54 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	2b02      	cmp	r3, #2
 8007b96:	f000 8083 	beq.w	8007ca0 <HAL_RCC_GetSysClockFreq+0x204>
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	f200 80a1 	bhi.w	8007ce4 <HAL_RCC_GetSysClockFreq+0x248>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <HAL_RCC_GetSysClockFreq+0x114>
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d056      	beq.n	8007c5c <HAL_RCC_GetSysClockFreq+0x1c0>
 8007bae:	e099      	b.n	8007ce4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007bb0:	4b6f      	ldr	r3, [pc, #444]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 0320 	and.w	r3, r3, #32
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d02d      	beq.n	8007c18 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007bbc:	4b6c      	ldr	r3, [pc, #432]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	08db      	lsrs	r3, r3, #3
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8007d74 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8007bcc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007be2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be6:	4b62      	ldr	r3, [pc, #392]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bee:	ee07 3a90 	vmov	s15, r3
 8007bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bfa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007bfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c12:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8007c16:	e087      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	ee07 3a90 	vmov	s15, r3
 8007c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c22:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8007d84 <HAL_RCC_GetSysClockFreq+0x2e8>
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	4b51      	ldr	r3, [pc, #324]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c32:	ee07 3a90 	vmov	s15, r3
 8007c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c3e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c5a:	e065      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007c5c:	693b      	ldr	r3, [r7, #16]
 8007c5e:	ee07 3a90 	vmov	s15, r3
 8007c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c66:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6e:	4b40      	ldr	r3, [pc, #256]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c76:	ee07 3a90 	vmov	s15, r3
 8007c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007c82:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007c9e:	e043      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007caa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007d8c <HAL_RCC_GetSysClockFreq+0x2f0>
 8007cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cb2:	4b2f      	ldr	r3, [pc, #188]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cba:	ee07 3a90 	vmov	s15, r3
 8007cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8007cc6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007ce2:	e021      	b.n	8007d28 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	ee07 3a90 	vmov	s15, r3
 8007cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007d88 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cf6:	4b1e      	ldr	r3, [pc, #120]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007d06:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d0a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007d80 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007d26:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007d28:	4b11      	ldr	r3, [pc, #68]	@ (8007d70 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d2c:	0a5b      	lsrs	r3, r3, #9
 8007d2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d32:	3301      	adds	r3, #1
 8007d34:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	ee07 3a90 	vmov	s15, r3
 8007d3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007d40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d4c:	ee17 3a90 	vmov	r3, s15
 8007d50:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007d52:	e005      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	61bb      	str	r3, [r7, #24]
      break;
 8007d58:	e002      	b.n	8007d60 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007d5a:	4b07      	ldr	r3, [pc, #28]	@ (8007d78 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007d5c:	61bb      	str	r3, [r7, #24]
      break;
 8007d5e:	bf00      	nop
  }

  return sysclockfreq;
 8007d60:	69bb      	ldr	r3, [r7, #24]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3724      	adds	r7, #36	@ 0x24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6c:	4770      	bx	lr
 8007d6e:	bf00      	nop
 8007d70:	58024400 	.word	0x58024400
 8007d74:	03d09000 	.word	0x03d09000
 8007d78:	003d0900 	.word	0x003d0900
 8007d7c:	017d7840 	.word	0x017d7840
 8007d80:	46000000 	.word	0x46000000
 8007d84:	4c742400 	.word	0x4c742400
 8007d88:	4a742400 	.word	0x4a742400
 8007d8c:	4bbebc20 	.word	0x4bbebc20

08007d90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b082      	sub	sp, #8
 8007d94:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007d96:	f7ff fe81 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007d9a:	4602      	mov	r2, r0
 8007d9c:	4b10      	ldr	r3, [pc, #64]	@ (8007de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007d9e:	699b      	ldr	r3, [r3, #24]
 8007da0:	0a1b      	lsrs	r3, r3, #8
 8007da2:	f003 030f 	and.w	r3, r3, #15
 8007da6:	490f      	ldr	r1, [pc, #60]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007da8:	5ccb      	ldrb	r3, [r1, r3]
 8007daa:	f003 031f 	and.w	r3, r3, #31
 8007dae:	fa22 f303 	lsr.w	r3, r2, r3
 8007db2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007db4:	4b0a      	ldr	r3, [pc, #40]	@ (8007de0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007db6:	699b      	ldr	r3, [r3, #24]
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	4a09      	ldr	r2, [pc, #36]	@ (8007de4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007dbe:	5cd3      	ldrb	r3, [r2, r3]
 8007dc0:	f003 031f 	and.w	r3, r3, #31
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8007dca:	4a07      	ldr	r2, [pc, #28]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dcc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007dce:	4a07      	ldr	r2, [pc, #28]	@ (8007dec <HAL_RCC_GetHCLKFreq+0x5c>)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8007dd4:	4b04      	ldr	r3, [pc, #16]	@ (8007de8 <HAL_RCC_GetHCLKFreq+0x58>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	58024400 	.word	0x58024400
 8007de4:	0800fb2c 	.word	0x0800fb2c
 8007de8:	24000008 	.word	0x24000008
 8007dec:	24000004 	.word	0x24000004

08007df0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007df4:	f7ff ffcc 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	4b06      	ldr	r3, [pc, #24]	@ (8007e14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	091b      	lsrs	r3, r3, #4
 8007e00:	f003 0307 	and.w	r3, r3, #7
 8007e04:	4904      	ldr	r1, [pc, #16]	@ (8007e18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007e06:	5ccb      	ldrb	r3, [r1, r3]
 8007e08:	f003 031f 	and.w	r3, r3, #31
 8007e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	bd80      	pop	{r7, pc}
 8007e14:	58024400 	.word	0x58024400
 8007e18:	0800fb2c 	.word	0x0800fb2c

08007e1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007e20:	f7ff ffb6 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8007e24:	4602      	mov	r2, r0
 8007e26:	4b06      	ldr	r3, [pc, #24]	@ (8007e40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	0a1b      	lsrs	r3, r3, #8
 8007e2c:	f003 0307 	and.w	r3, r3, #7
 8007e30:	4904      	ldr	r1, [pc, #16]	@ (8007e44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007e32:	5ccb      	ldrb	r3, [r1, r3]
 8007e34:	f003 031f 	and.w	r3, r3, #31
 8007e38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	bd80      	pop	{r7, pc}
 8007e40:	58024400 	.word	0x58024400
 8007e44:	0800fb2c 	.word	0x0800fb2c

08007e48 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e4c:	b0ca      	sub	sp, #296	@ 0x128
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007e54:	2300      	movs	r3, #0
 8007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8007e6c:	2500      	movs	r5, #0
 8007e6e:	ea54 0305 	orrs.w	r3, r4, r5
 8007e72:	d049      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e78:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007e7a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e7e:	d02f      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007e80:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007e84:	d828      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e8a:	d01a      	beq.n	8007ec2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007e8c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e90:	d822      	bhi.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007e96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e9a:	d007      	beq.n	8007eac <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007e9c:	e01c      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9e:	4bb8      	ldr	r3, [pc, #736]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ea2:	4ab7      	ldr	r2, [pc, #732]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ea8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007eaa:	e01a      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eb0:	3308      	adds	r3, #8
 8007eb2:	2102      	movs	r1, #2
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f001 fc8f 	bl	80097d8 <RCCEx_PLL2_Config>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ec0:	e00f      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ec6:	3328      	adds	r3, #40	@ 0x28
 8007ec8:	2102      	movs	r1, #2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f001 fd36 	bl	800993c <RCCEx_PLL3_Config>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007ed6:	e004      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ede:	e000      	b.n	8007ee2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8007ee0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d10a      	bne.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007eea:	4ba5      	ldr	r3, [pc, #660]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007eee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007ef8:	4aa1      	ldr	r2, [pc, #644]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007efa:	430b      	orrs	r3, r1
 8007efc:	6513      	str	r3, [r2, #80]	@ 0x50
 8007efe:	e003      	b.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8007f14:	f04f 0900 	mov.w	r9, #0
 8007f18:	ea58 0309 	orrs.w	r3, r8, r9
 8007f1c:	d047      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f24:	2b04      	cmp	r3, #4
 8007f26:	d82a      	bhi.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8007f28:	a201      	add	r2, pc, #4	@ (adr r2, 8007f30 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f2e:	bf00      	nop
 8007f30:	08007f45 	.word	0x08007f45
 8007f34:	08007f53 	.word	0x08007f53
 8007f38:	08007f69 	.word	0x08007f69
 8007f3c:	08007f87 	.word	0x08007f87
 8007f40:	08007f87 	.word	0x08007f87
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f44:	4b8e      	ldr	r3, [pc, #568]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f48:	4a8d      	ldr	r2, [pc, #564]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f50:	e01a      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f56:	3308      	adds	r3, #8
 8007f58:	2100      	movs	r1, #0
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f001 fc3c 	bl	80097d8 <RCCEx_PLL2_Config>
 8007f60:	4603      	mov	r3, r0
 8007f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f66:	e00f      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6c:	3328      	adds	r3, #40	@ 0x28
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4618      	mov	r0, r3
 8007f72:	f001 fce3 	bl	800993c <RCCEx_PLL3_Config>
 8007f76:	4603      	mov	r3, r0
 8007f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007f7c:	e004      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f84:	e000      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007f86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d10a      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f90:	4b7b      	ldr	r3, [pc, #492]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007f92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007f94:	f023 0107 	bic.w	r1, r3, #7
 8007f98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9e:	4a78      	ldr	r2, [pc, #480]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007fa0:	430b      	orrs	r3, r1
 8007fa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8007fa4:	e003      	b.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007faa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007fba:	f04f 0b00 	mov.w	fp, #0
 8007fbe:	ea5a 030b 	orrs.w	r3, sl, fp
 8007fc2:	d04c      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007fca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fce:	d030      	beq.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8007fd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007fd4:	d829      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fd6:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fd8:	d02d      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007fda:	2bc0      	cmp	r3, #192	@ 0xc0
 8007fdc:	d825      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fde:	2b80      	cmp	r3, #128	@ 0x80
 8007fe0:	d018      	beq.n	8008014 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007fe2:	2b80      	cmp	r3, #128	@ 0x80
 8007fe4:	d821      	bhi.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d002      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007fea:	2b40      	cmp	r3, #64	@ 0x40
 8007fec:	d007      	beq.n	8007ffe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8007fee:	e01c      	b.n	800802a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ff0:	4b63      	ldr	r3, [pc, #396]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff4:	4a62      	ldr	r2, [pc, #392]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007ff6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007ffa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007ffc:	e01c      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008002:	3308      	adds	r3, #8
 8008004:	2100      	movs	r1, #0
 8008006:	4618      	mov	r0, r3
 8008008:	f001 fbe6 	bl	80097d8 <RCCEx_PLL2_Config>
 800800c:	4603      	mov	r3, r0
 800800e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008012:	e011      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008018:	3328      	adds	r3, #40	@ 0x28
 800801a:	2100      	movs	r1, #0
 800801c:	4618      	mov	r0, r3
 800801e:	f001 fc8d 	bl	800993c <RCCEx_PLL3_Config>
 8008022:	4603      	mov	r3, r0
 8008024:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008028:	e006      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800802a:	2301      	movs	r3, #1
 800802c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008030:	e002      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008032:	bf00      	nop
 8008034:	e000      	b.n	8008038 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008036:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008038:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800803c:	2b00      	cmp	r3, #0
 800803e:	d10a      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008040:	4b4f      	ldr	r3, [pc, #316]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008044:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800804c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800804e:	4a4c      	ldr	r2, [pc, #304]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008050:	430b      	orrs	r3, r1
 8008052:	6513      	str	r3, [r2, #80]	@ 0x50
 8008054:	e003      	b.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800805a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800805e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008066:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800806a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800806e:	2300      	movs	r3, #0
 8008070:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008074:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008078:	460b      	mov	r3, r1
 800807a:	4313      	orrs	r3, r2
 800807c:	d053      	beq.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800807e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008082:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008086:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800808a:	d035      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800808c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008090:	d82e      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008092:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008096:	d031      	beq.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008098:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800809c:	d828      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800809e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080a2:	d01a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x292>
 80080a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080a8:	d822      	bhi.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d003      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80080ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80080b2:	d007      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80080b4:	e01c      	b.n	80080f0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80080b6:	4b32      	ldr	r3, [pc, #200]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ba:	4a31      	ldr	r2, [pc, #196]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80080bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80080c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080c2:	e01c      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080c8:	3308      	adds	r3, #8
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 fb83 	bl	80097d8 <RCCEx_PLL2_Config>
 80080d2:	4603      	mov	r3, r0
 80080d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80080d8:	e011      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	3328      	adds	r3, #40	@ 0x28
 80080e0:	2100      	movs	r1, #0
 80080e2:	4618      	mov	r0, r3
 80080e4:	f001 fc2a 	bl	800993c <RCCEx_PLL3_Config>
 80080e8:	4603      	mov	r3, r0
 80080ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80080ee:	e006      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080f6:	e002      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80080f8:	bf00      	nop
 80080fa:	e000      	b.n	80080fe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80080fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008102:	2b00      	cmp	r3, #0
 8008104:	d10b      	bne.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008106:	4b1e      	ldr	r3, [pc, #120]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800810a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800810e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008112:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008116:	4a1a      	ldr	r2, [pc, #104]	@ (8008180 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008118:	430b      	orrs	r3, r1
 800811a:	6593      	str	r3, [r2, #88]	@ 0x58
 800811c:	e003      	b.n	8008126 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008122:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800812a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008132:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008136:	2300      	movs	r3, #0
 8008138:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800813c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008140:	460b      	mov	r3, r1
 8008142:	4313      	orrs	r3, r2
 8008144:	d056      	beq.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800814a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800814e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008152:	d038      	beq.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008154:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008158:	d831      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800815a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800815e:	d034      	beq.n	80081ca <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008160:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008164:	d82b      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800816a:	d01d      	beq.n	80081a8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800816c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008170:	d825      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d006      	beq.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008176:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800817a:	d00a      	beq.n	8008192 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800817c:	e01f      	b.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x376>
 800817e:	bf00      	nop
 8008180:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008184:	4ba2      	ldr	r3, [pc, #648]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4aa1      	ldr	r2, [pc, #644]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800818a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800818e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008190:	e01c      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	3308      	adds	r3, #8
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f001 fb1c 	bl	80097d8 <RCCEx_PLL2_Config>
 80081a0:	4603      	mov	r3, r0
 80081a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80081a6:	e011      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ac:	3328      	adds	r3, #40	@ 0x28
 80081ae:	2100      	movs	r1, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f001 fbc3 	bl	800993c <RCCEx_PLL3_Config>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80081bc:	e006      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80081be:	2301      	movs	r3, #1
 80081c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80081c4:	e002      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80081c6:	bf00      	nop
 80081c8:	e000      	b.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80081ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80081cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10b      	bne.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80081d4:	4b8e      	ldr	r3, [pc, #568]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80081d8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80081dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80081e4:	4a8a      	ldr	r2, [pc, #552]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80081e6:	430b      	orrs	r3, r1
 80081e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80081ea:	e003      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80081f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081fc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008200:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008204:	2300      	movs	r3, #0
 8008206:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800820a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800820e:	460b      	mov	r3, r1
 8008210:	4313      	orrs	r3, r2
 8008212:	d03a      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800821a:	2b30      	cmp	r3, #48	@ 0x30
 800821c:	d01f      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800821e:	2b30      	cmp	r3, #48	@ 0x30
 8008220:	d819      	bhi.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008222:	2b20      	cmp	r3, #32
 8008224:	d00c      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008226:	2b20      	cmp	r3, #32
 8008228:	d815      	bhi.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800822a:	2b00      	cmp	r3, #0
 800822c:	d019      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800822e:	2b10      	cmp	r3, #16
 8008230:	d111      	bne.n	8008256 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008232:	4b77      	ldr	r3, [pc, #476]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008236:	4a76      	ldr	r2, [pc, #472]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008238:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800823c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800823e:	e011      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008244:	3308      	adds	r3, #8
 8008246:	2102      	movs	r1, #2
 8008248:	4618      	mov	r0, r3
 800824a:	f001 fac5 	bl	80097d8 <RCCEx_PLL2_Config>
 800824e:	4603      	mov	r3, r0
 8008250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008254:	e006      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800825c:	e002      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800825e:	bf00      	nop
 8008260:	e000      	b.n	8008264 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008268:	2b00      	cmp	r3, #0
 800826a:	d10a      	bne.n	8008282 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800826c:	4b68      	ldr	r3, [pc, #416]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800826e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008270:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008278:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800827a:	4a65      	ldr	r2, [pc, #404]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800827c:	430b      	orrs	r3, r1
 800827e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008280:	e003      	b.n	800828a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008282:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008292:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008296:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800829a:	2300      	movs	r3, #0
 800829c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80082a0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80082a4:	460b      	mov	r3, r1
 80082a6:	4313      	orrs	r3, r2
 80082a8:	d051      	beq.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80082aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80082b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082b4:	d035      	beq.n	8008322 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80082b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80082ba:	d82e      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082c0:	d031      	beq.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80082c2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80082c6:	d828      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082cc:	d01a      	beq.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80082ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082d2:	d822      	bhi.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d003      	beq.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80082d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082dc:	d007      	beq.n	80082ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80082de:	e01c      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082e0:	4b4b      	ldr	r3, [pc, #300]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082e4:	4a4a      	ldr	r2, [pc, #296]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80082e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80082ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80082ec:	e01c      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	3308      	adds	r3, #8
 80082f4:	2100      	movs	r1, #0
 80082f6:	4618      	mov	r0, r3
 80082f8:	f001 fa6e 	bl	80097d8 <RCCEx_PLL2_Config>
 80082fc:	4603      	mov	r3, r0
 80082fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008302:	e011      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008308:	3328      	adds	r3, #40	@ 0x28
 800830a:	2100      	movs	r1, #0
 800830c:	4618      	mov	r0, r3
 800830e:	f001 fb15 	bl	800993c <RCCEx_PLL3_Config>
 8008312:	4603      	mov	r3, r0
 8008314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008318:	e006      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008320:	e002      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008322:	bf00      	nop
 8008324:	e000      	b.n	8008328 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008328:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800832c:	2b00      	cmp	r3, #0
 800832e:	d10a      	bne.n	8008346 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008330:	4b37      	ldr	r3, [pc, #220]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008334:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800833c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800833e:	4a34      	ldr	r2, [pc, #208]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008340:	430b      	orrs	r3, r1
 8008342:	6513      	str	r3, [r2, #80]	@ 0x50
 8008344:	e003      	b.n	800834e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800834a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800834e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800835a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800835e:	2300      	movs	r3, #0
 8008360:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008364:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008368:	460b      	mov	r3, r1
 800836a:	4313      	orrs	r3, r2
 800836c:	d056      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800836e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008372:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008374:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008378:	d033      	beq.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800837a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800837e:	d82c      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008380:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008384:	d02f      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800838a:	d826      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x592>
 800838c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008390:	d02b      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008392:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008396:	d820      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008398:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800839c:	d012      	beq.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800839e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80083a2:	d81a      	bhi.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x592>
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d022      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80083a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083ac:	d115      	bne.n	80083da <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80083ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083b2:	3308      	adds	r3, #8
 80083b4:	2101      	movs	r1, #1
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 fa0e 	bl	80097d8 <RCCEx_PLL2_Config>
 80083bc:	4603      	mov	r3, r0
 80083be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083c2:	e015      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80083c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083c8:	3328      	adds	r3, #40	@ 0x28
 80083ca:	2101      	movs	r1, #1
 80083cc:	4618      	mov	r0, r3
 80083ce:	f001 fab5 	bl	800993c <RCCEx_PLL3_Config>
 80083d2:	4603      	mov	r3, r0
 80083d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80083d8:	e00a      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083da:	2301      	movs	r3, #1
 80083dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e0:	e006      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083e2:	bf00      	nop
 80083e4:	e004      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083e6:	bf00      	nop
 80083e8:	e002      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083ea:	bf00      	nop
 80083ec:	e000      	b.n	80083f0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80083ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10d      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80083f8:	4b05      	ldr	r3, [pc, #20]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80083fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083fc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008400:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008404:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008406:	4a02      	ldr	r2, [pc, #8]	@ (8008410 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008408:	430b      	orrs	r3, r1
 800840a:	6513      	str	r3, [r2, #80]	@ 0x50
 800840c:	e006      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800840e:	bf00      	nop
 8008410:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800842c:	2300      	movs	r3, #0
 800842e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008432:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008436:	460b      	mov	r3, r1
 8008438:	4313      	orrs	r3, r2
 800843a:	d055      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800843c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008440:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008444:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008448:	d033      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800844a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800844e:	d82c      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008450:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008454:	d02f      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008456:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800845a:	d826      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 800845c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008460:	d02b      	beq.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008462:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008466:	d820      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008468:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800846c:	d012      	beq.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800846e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008472:	d81a      	bhi.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008474:	2b00      	cmp	r3, #0
 8008476:	d022      	beq.n	80084be <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008478:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800847c:	d115      	bne.n	80084aa <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	3308      	adds	r3, #8
 8008484:	2101      	movs	r1, #1
 8008486:	4618      	mov	r0, r3
 8008488:	f001 f9a6 	bl	80097d8 <RCCEx_PLL2_Config>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008492:	e015      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008498:	3328      	adds	r3, #40	@ 0x28
 800849a:	2101      	movs	r1, #1
 800849c:	4618      	mov	r0, r3
 800849e:	f001 fa4d 	bl	800993c <RCCEx_PLL3_Config>
 80084a2:	4603      	mov	r3, r0
 80084a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80084a8:	e00a      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80084aa:	2301      	movs	r3, #1
 80084ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80084b0:	e006      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084b2:	bf00      	nop
 80084b4:	e004      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084b6:	bf00      	nop
 80084b8:	e002      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084ba:	bf00      	nop
 80084bc:	e000      	b.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80084be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80084c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10b      	bne.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80084c8:	4ba3      	ldr	r3, [pc, #652]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084cc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80084d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80084d8:	4a9f      	ldr	r2, [pc, #636]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80084da:	430b      	orrs	r3, r1
 80084dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80084de:	e003      	b.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80084e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80084f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80084f8:	2300      	movs	r3, #0
 80084fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80084fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008502:	460b      	mov	r3, r1
 8008504:	4313      	orrs	r3, r2
 8008506:	d037      	beq.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800850c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800850e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008512:	d00e      	beq.n	8008532 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008514:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008518:	d816      	bhi.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d018      	beq.n	8008550 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800851e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008522:	d111      	bne.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008524:	4b8c      	ldr	r3, [pc, #560]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	4a8b      	ldr	r2, [pc, #556]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800852a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800852e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008530:	e00f      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008536:	3308      	adds	r3, #8
 8008538:	2101      	movs	r1, #1
 800853a:	4618      	mov	r0, r3
 800853c:	f001 f94c 	bl	80097d8 <RCCEx_PLL2_Config>
 8008540:	4603      	mov	r3, r0
 8008542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008546:	e004      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800854e:	e000      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008550:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008552:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008556:	2b00      	cmp	r3, #0
 8008558:	d10a      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800855a:	4b7f      	ldr	r3, [pc, #508]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800855c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800855e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008568:	4a7b      	ldr	r2, [pc, #492]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800856a:	430b      	orrs	r3, r1
 800856c:	6513      	str	r3, [r2, #80]	@ 0x50
 800856e:	e003      	b.n	8008578 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008574:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800857c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008580:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008588:	2300      	movs	r3, #0
 800858a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800858e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008592:	460b      	mov	r3, r1
 8008594:	4313      	orrs	r3, r2
 8008596:	d039      	beq.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800859c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800859e:	2b03      	cmp	r3, #3
 80085a0:	d81c      	bhi.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80085a2:	a201      	add	r2, pc, #4	@ (adr r2, 80085a8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80085a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a8:	080085e5 	.word	0x080085e5
 80085ac:	080085b9 	.word	0x080085b9
 80085b0:	080085c7 	.word	0x080085c7
 80085b4:	080085e5 	.word	0x080085e5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b8:	4b67      	ldr	r3, [pc, #412]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085bc:	4a66      	ldr	r2, [pc, #408]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80085c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085c4:	e00f      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ca:	3308      	adds	r3, #8
 80085cc:	2102      	movs	r1, #2
 80085ce:	4618      	mov	r0, r3
 80085d0:	f001 f902 	bl	80097d8 <RCCEx_PLL2_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80085da:	e004      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80085e2:	e000      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80085e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80085e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10a      	bne.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80085ee:	4b5a      	ldr	r3, [pc, #360]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80085f2:	f023 0103 	bic.w	r1, r3, #3
 80085f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085fc:	4a56      	ldr	r2, [pc, #344]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80085fe:	430b      	orrs	r3, r1
 8008600:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008602:	e003      	b.n	800860c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800860c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008618:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800861c:	2300      	movs	r3, #0
 800861e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008622:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008626:	460b      	mov	r3, r1
 8008628:	4313      	orrs	r3, r2
 800862a:	f000 809f 	beq.w	800876c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800862e:	4b4b      	ldr	r3, [pc, #300]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a4a      	ldr	r2, [pc, #296]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008634:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008638:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800863a:	f7f9 f9d5 	bl	80019e8 <HAL_GetTick>
 800863e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008642:	e00b      	b.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008644:	f7f9 f9d0 	bl	80019e8 <HAL_GetTick>
 8008648:	4602      	mov	r2, r0
 800864a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	2b64      	cmp	r3, #100	@ 0x64
 8008652:	d903      	bls.n	800865c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8008654:	2303      	movs	r3, #3
 8008656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800865a:	e005      	b.n	8008668 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800865c:	4b3f      	ldr	r3, [pc, #252]	@ (800875c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d0ed      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8008668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800866c:	2b00      	cmp	r3, #0
 800866e:	d179      	bne.n	8008764 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008670:	4b39      	ldr	r3, [pc, #228]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008672:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8008674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008678:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800867c:	4053      	eors	r3, r2
 800867e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008682:	2b00      	cmp	r3, #0
 8008684:	d015      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008686:	4b34      	ldr	r3, [pc, #208]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800868a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800868e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008692:	4b31      	ldr	r3, [pc, #196]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008696:	4a30      	ldr	r2, [pc, #192]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008698:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800869c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800869e:	4b2e      	ldr	r3, [pc, #184]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086a2:	4a2d      	ldr	r2, [pc, #180]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80086a8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80086aa:	4a2b      	ldr	r2, [pc, #172]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80086b0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80086ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086be:	d118      	bne.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086c0:	f7f9 f992 	bl	80019e8 <HAL_GetTick>
 80086c4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086c8:	e00d      	b.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ca:	f7f9 f98d 	bl	80019e8 <HAL_GetTick>
 80086ce:	4602      	mov	r2, r0
 80086d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	f241 3388 	movw	r3, #5000	@ 0x1388
 80086da:	429a      	cmp	r2, r3
 80086dc:	d903      	bls.n	80086e6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80086de:	2303      	movs	r3, #3
 80086e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80086e4:	e005      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80086e6:	4b1c      	ldr	r3, [pc, #112]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80086e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80086ea:	f003 0302 	and.w	r3, r3, #2
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d0eb      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80086f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d129      	bne.n	800874e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80086fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008706:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800870a:	d10e      	bne.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800870c:	4b12      	ldr	r3, [pc, #72]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800870e:	691b      	ldr	r3, [r3, #16]
 8008710:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8008714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008718:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800871c:	091a      	lsrs	r2, r3, #4
 800871e:	4b10      	ldr	r3, [pc, #64]	@ (8008760 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008720:	4013      	ands	r3, r2
 8008722:	4a0d      	ldr	r2, [pc, #52]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008724:	430b      	orrs	r3, r1
 8008726:	6113      	str	r3, [r2, #16]
 8008728:	e005      	b.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800872a:	4b0b      	ldr	r3, [pc, #44]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800872c:	691b      	ldr	r3, [r3, #16]
 800872e:	4a0a      	ldr	r2, [pc, #40]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008730:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8008734:	6113      	str	r3, [r2, #16]
 8008736:	4b08      	ldr	r3, [pc, #32]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008738:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800873a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800873e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008746:	4a04      	ldr	r2, [pc, #16]	@ (8008758 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008748:	430b      	orrs	r3, r1
 800874a:	6713      	str	r3, [r2, #112]	@ 0x70
 800874c:	e00e      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800874e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008752:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8008756:	e009      	b.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8008758:	58024400 	.word	0x58024400
 800875c:	58024800 	.word	0x58024800
 8008760:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008764:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008768:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800876c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008774:	f002 0301 	and.w	r3, r2, #1
 8008778:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800877c:	2300      	movs	r3, #0
 800877e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008782:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008786:	460b      	mov	r3, r1
 8008788:	4313      	orrs	r3, r2
 800878a:	f000 8089 	beq.w	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800878e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008792:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008794:	2b28      	cmp	r3, #40	@ 0x28
 8008796:	d86b      	bhi.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8008798:	a201      	add	r2, pc, #4	@ (adr r2, 80087a0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800879a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800879e:	bf00      	nop
 80087a0:	08008879 	.word	0x08008879
 80087a4:	08008871 	.word	0x08008871
 80087a8:	08008871 	.word	0x08008871
 80087ac:	08008871 	.word	0x08008871
 80087b0:	08008871 	.word	0x08008871
 80087b4:	08008871 	.word	0x08008871
 80087b8:	08008871 	.word	0x08008871
 80087bc:	08008871 	.word	0x08008871
 80087c0:	08008845 	.word	0x08008845
 80087c4:	08008871 	.word	0x08008871
 80087c8:	08008871 	.word	0x08008871
 80087cc:	08008871 	.word	0x08008871
 80087d0:	08008871 	.word	0x08008871
 80087d4:	08008871 	.word	0x08008871
 80087d8:	08008871 	.word	0x08008871
 80087dc:	08008871 	.word	0x08008871
 80087e0:	0800885b 	.word	0x0800885b
 80087e4:	08008871 	.word	0x08008871
 80087e8:	08008871 	.word	0x08008871
 80087ec:	08008871 	.word	0x08008871
 80087f0:	08008871 	.word	0x08008871
 80087f4:	08008871 	.word	0x08008871
 80087f8:	08008871 	.word	0x08008871
 80087fc:	08008871 	.word	0x08008871
 8008800:	08008879 	.word	0x08008879
 8008804:	08008871 	.word	0x08008871
 8008808:	08008871 	.word	0x08008871
 800880c:	08008871 	.word	0x08008871
 8008810:	08008871 	.word	0x08008871
 8008814:	08008871 	.word	0x08008871
 8008818:	08008871 	.word	0x08008871
 800881c:	08008871 	.word	0x08008871
 8008820:	08008879 	.word	0x08008879
 8008824:	08008871 	.word	0x08008871
 8008828:	08008871 	.word	0x08008871
 800882c:	08008871 	.word	0x08008871
 8008830:	08008871 	.word	0x08008871
 8008834:	08008871 	.word	0x08008871
 8008838:	08008871 	.word	0x08008871
 800883c:	08008871 	.word	0x08008871
 8008840:	08008879 	.word	0x08008879
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008848:	3308      	adds	r3, #8
 800884a:	2101      	movs	r1, #1
 800884c:	4618      	mov	r0, r3
 800884e:	f000 ffc3 	bl	80097d8 <RCCEx_PLL2_Config>
 8008852:	4603      	mov	r3, r0
 8008854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008858:	e00f      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800885a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800885e:	3328      	adds	r3, #40	@ 0x28
 8008860:	2101      	movs	r1, #1
 8008862:	4618      	mov	r0, r3
 8008864:	f001 f86a 	bl	800993c <RCCEx_PLL3_Config>
 8008868:	4603      	mov	r3, r0
 800886a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800886e:	e004      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008870:	2301      	movs	r3, #1
 8008872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008876:	e000      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8008878:	bf00      	nop
    }

    if (ret == HAL_OK)
 800887a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10a      	bne.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008882:	4bbf      	ldr	r3, [pc, #764]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008886:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800888a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800888e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008890:	4abb      	ldr	r2, [pc, #748]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008892:	430b      	orrs	r3, r1
 8008894:	6553      	str	r3, [r2, #84]	@ 0x54
 8008896:	e003      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008898:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800889c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80088a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088a8:	f002 0302 	and.w	r3, r2, #2
 80088ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80088b0:	2300      	movs	r3, #0
 80088b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80088b6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d041      	beq.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80088c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80088c6:	2b05      	cmp	r3, #5
 80088c8:	d824      	bhi.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80088ca:	a201      	add	r2, pc, #4	@ (adr r2, 80088d0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80088cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d0:	0800891d 	.word	0x0800891d
 80088d4:	080088e9 	.word	0x080088e9
 80088d8:	080088ff 	.word	0x080088ff
 80088dc:	0800891d 	.word	0x0800891d
 80088e0:	0800891d 	.word	0x0800891d
 80088e4:	0800891d 	.word	0x0800891d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80088e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088ec:	3308      	adds	r3, #8
 80088ee:	2101      	movs	r1, #1
 80088f0:	4618      	mov	r0, r3
 80088f2:	f000 ff71 	bl	80097d8 <RCCEx_PLL2_Config>
 80088f6:	4603      	mov	r3, r0
 80088f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80088fc:	e00f      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80088fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008902:	3328      	adds	r3, #40	@ 0x28
 8008904:	2101      	movs	r1, #1
 8008906:	4618      	mov	r0, r3
 8008908:	f001 f818 	bl	800993c <RCCEx_PLL3_Config>
 800890c:	4603      	mov	r3, r0
 800890e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8008912:	e004      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008914:	2301      	movs	r3, #1
 8008916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800891a:	e000      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800891c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800891e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008926:	4b96      	ldr	r3, [pc, #600]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800892a:	f023 0107 	bic.w	r1, r3, #7
 800892e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008932:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008934:	4a92      	ldr	r2, [pc, #584]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008936:	430b      	orrs	r3, r1
 8008938:	6553      	str	r3, [r2, #84]	@ 0x54
 800893a:	e003      	b.n	8008944 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800893c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008940:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894c:	f002 0304 	and.w	r3, r2, #4
 8008950:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008954:	2300      	movs	r3, #0
 8008956:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800895a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800895e:	460b      	mov	r3, r1
 8008960:	4313      	orrs	r3, r2
 8008962:	d044      	beq.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008968:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800896c:	2b05      	cmp	r3, #5
 800896e:	d825      	bhi.n	80089bc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008970:	a201      	add	r2, pc, #4	@ (adr r2, 8008978 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008976:	bf00      	nop
 8008978:	080089c5 	.word	0x080089c5
 800897c:	08008991 	.word	0x08008991
 8008980:	080089a7 	.word	0x080089a7
 8008984:	080089c5 	.word	0x080089c5
 8008988:	080089c5 	.word	0x080089c5
 800898c:	080089c5 	.word	0x080089c5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008994:	3308      	adds	r3, #8
 8008996:	2101      	movs	r1, #1
 8008998:	4618      	mov	r0, r3
 800899a:	f000 ff1d 	bl	80097d8 <RCCEx_PLL2_Config>
 800899e:	4603      	mov	r3, r0
 80089a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089a4:	e00f      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80089a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089aa:	3328      	adds	r3, #40	@ 0x28
 80089ac:	2101      	movs	r1, #1
 80089ae:	4618      	mov	r0, r3
 80089b0:	f000 ffc4 	bl	800993c <RCCEx_PLL3_Config>
 80089b4:	4603      	mov	r3, r0
 80089b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80089ba:	e004      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089c2:	e000      	b.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80089c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d10b      	bne.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80089ce:	4b6c      	ldr	r3, [pc, #432]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089d2:	f023 0107 	bic.w	r1, r3, #7
 80089d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80089de:	4a68      	ldr	r2, [pc, #416]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80089e0:	430b      	orrs	r3, r1
 80089e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80089e4:	e003      	b.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80089ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f6:	f002 0320 	and.w	r3, r2, #32
 80089fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80089fe:	2300      	movs	r3, #0
 8008a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008a04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008a08:	460b      	mov	r3, r1
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	d055      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008a16:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a1a:	d033      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008a1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008a20:	d82c      	bhi.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a26:	d02f      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8008a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a2c:	d826      	bhi.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a32:	d02b      	beq.n	8008a8c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008a34:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008a38:	d820      	bhi.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a3e:	d012      	beq.n	8008a66 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008a40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008a44:	d81a      	bhi.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d022      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8008a4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008a4e:	d115      	bne.n	8008a7c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a54:	3308      	adds	r3, #8
 8008a56:	2100      	movs	r1, #0
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 febd 	bl	80097d8 <RCCEx_PLL2_Config>
 8008a5e:	4603      	mov	r3, r0
 8008a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a64:	e015      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a6a:	3328      	adds	r3, #40	@ 0x28
 8008a6c:	2102      	movs	r1, #2
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f000 ff64 	bl	800993c <RCCEx_PLL3_Config>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008a7a:	e00a      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008a82:	e006      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a84:	bf00      	nop
 8008a86:	e004      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008a90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d10b      	bne.n	8008ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008a9a:	4b39      	ldr	r3, [pc, #228]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008a9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a9e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008aaa:	4a35      	ldr	r2, [pc, #212]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008aac:	430b      	orrs	r3, r1
 8008aae:	6553      	str	r3, [r2, #84]	@ 0x54
 8008ab0:	e003      	b.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ab2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ab6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008aba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8008ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008aca:	2300      	movs	r3, #0
 8008acc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008ad0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	d058      	beq.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008ae2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008ae6:	d033      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8008ae8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8008aec:	d82c      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af2:	d02f      	beq.n	8008b54 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8008af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008af8:	d826      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008afa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008afe:	d02b      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8008b00:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008b04:	d820      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b0a:	d012      	beq.n	8008b32 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8008b0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008b10:	d81a      	bhi.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d022      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8008b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008b1a:	d115      	bne.n	8008b48 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b20:	3308      	adds	r3, #8
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f000 fe57 	bl	80097d8 <RCCEx_PLL2_Config>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b30:	e015      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b36:	3328      	adds	r3, #40	@ 0x28
 8008b38:	2102      	movs	r1, #2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 fefe 	bl	800993c <RCCEx_PLL3_Config>
 8008b40:	4603      	mov	r3, r0
 8008b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008b46:	e00a      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b48:	2301      	movs	r3, #1
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b4e:	e006      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b50:	bf00      	nop
 8008b52:	e004      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b54:	bf00      	nop
 8008b56:	e002      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b58:	bf00      	nop
 8008b5a:	e000      	b.n	8008b5e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008b5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d10e      	bne.n	8008b84 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008b66:	4b06      	ldr	r3, [pc, #24]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b6a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8008b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008b76:	4a02      	ldr	r2, [pc, #8]	@ (8008b80 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008b78:	430b      	orrs	r3, r1
 8008b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008b7e:	bf00      	nop
 8008b80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b94:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008b98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008ba2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008ba6:	460b      	mov	r3, r1
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	d055      	beq.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008bb4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bb8:	d033      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008bba:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008bbe:	d82c      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bc4:	d02f      	beq.n	8008c26 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008bc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008bca:	d826      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bcc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bd0:	d02b      	beq.n	8008c2a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8008bd2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008bd6:	d820      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008bd8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008bdc:	d012      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8008bde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008be2:	d81a      	bhi.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d022      	beq.n	8008c2e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008be8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008bec:	d115      	bne.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf2:	3308      	adds	r3, #8
 8008bf4:	2100      	movs	r1, #0
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f000 fdee 	bl	80097d8 <RCCEx_PLL2_Config>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c02:	e015      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c08:	3328      	adds	r3, #40	@ 0x28
 8008c0a:	2102      	movs	r1, #2
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fe95 	bl	800993c <RCCEx_PLL3_Config>
 8008c12:	4603      	mov	r3, r0
 8008c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8008c18:	e00a      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c20:	e006      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c22:	bf00      	nop
 8008c24:	e004      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c26:	bf00      	nop
 8008c28:	e002      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c2a:	bf00      	nop
 8008c2c:	e000      	b.n	8008c30 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008c2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10b      	bne.n	8008c50 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008c38:	4ba1      	ldr	r3, [pc, #644]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c3c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8008c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c48:	4a9d      	ldr	r2, [pc, #628]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008c4a:	430b      	orrs	r3, r1
 8008c4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008c4e:	e003      	b.n	8008c58 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f002 0308 	and.w	r3, r2, #8
 8008c64:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008c6e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8008c72:	460b      	mov	r3, r1
 8008c74:	4313      	orrs	r3, r2
 8008c76:	d01e      	beq.n	8008cb6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c84:	d10c      	bne.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c8a:	3328      	adds	r3, #40	@ 0x28
 8008c8c:	2102      	movs	r1, #2
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 fe54 	bl	800993c <RCCEx_PLL3_Config>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d002      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008ca0:	4b87      	ldr	r3, [pc, #540]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ca4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008cb0:	4a83      	ldr	r2, [pc, #524]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008cb2:	430b      	orrs	r3, r1
 8008cb4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cbe:	f002 0310 	and.w	r3, r2, #16
 8008cc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008ccc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	d01e      	beq.n	8008d14 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008cde:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008ce2:	d10c      	bne.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ce8:	3328      	adds	r3, #40	@ 0x28
 8008cea:	2102      	movs	r1, #2
 8008cec:	4618      	mov	r0, r3
 8008cee:	f000 fe25 	bl	800993c <RCCEx_PLL3_Config>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008cfe:	4b70      	ldr	r3, [pc, #448]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d02:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d0e:	4a6c      	ldr	r2, [pc, #432]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d10:	430b      	orrs	r3, r1
 8008d12:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8008d20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d24:	2300      	movs	r3, #0
 8008d26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d2a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8008d2e:	460b      	mov	r3, r1
 8008d30:	4313      	orrs	r3, r2
 8008d32:	d03e      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d38:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d40:	d022      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008d42:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d46:	d81b      	bhi.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d003      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008d4c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d50:	d00b      	beq.n	8008d6a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008d52:	e015      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d58:	3308      	adds	r3, #8
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f000 fd3b 	bl	80097d8 <RCCEx_PLL2_Config>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d68:	e00f      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	3328      	adds	r3, #40	@ 0x28
 8008d70:	2102      	movs	r1, #2
 8008d72:	4618      	mov	r0, r3
 8008d74:	f000 fde2 	bl	800993c <RCCEx_PLL3_Config>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008d7e:	e004      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d86:	e000      	b.n	8008d8a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d10b      	bne.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008d92:	4b4b      	ldr	r3, [pc, #300]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d9e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008da2:	4a47      	ldr	r2, [pc, #284]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8008dbe:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008dc4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008dc8:	460b      	mov	r3, r1
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	d03b      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008dd6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008dda:	d01f      	beq.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008ddc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008de0:	d818      	bhi.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8008de2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008de6:	d003      	beq.n	8008df0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008de8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008dec:	d007      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8008dee:	e011      	b.n	8008e14 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008df0:	4b33      	ldr	r3, [pc, #204]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008df4:	4a32      	ldr	r2, [pc, #200]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008dfc:	e00f      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e02:	3328      	adds	r3, #40	@ 0x28
 8008e04:	2101      	movs	r1, #1
 8008e06:	4618      	mov	r0, r3
 8008e08:	f000 fd98 	bl	800993c <RCCEx_PLL3_Config>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8008e12:	e004      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e1a:	e000      	b.n	8008e1e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008e1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d10b      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008e26:	4b26      	ldr	r3, [pc, #152]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e2a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e36:	4a22      	ldr	r2, [pc, #136]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e38:	430b      	orrs	r3, r1
 8008e3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8008e3c:	e003      	b.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8008e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e4e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8008e52:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e54:	2300      	movs	r3, #0
 8008e56:	677b      	str	r3, [r7, #116]	@ 0x74
 8008e58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	d034      	beq.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d003      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008e70:	d007      	beq.n	8008e82 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008e72:	e011      	b.n	8008e98 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e74:	4b12      	ldr	r3, [pc, #72]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e78:	4a11      	ldr	r2, [pc, #68]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e80:	e00e      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e86:	3308      	adds	r3, #8
 8008e88:	2102      	movs	r1, #2
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	f000 fca4 	bl	80097d8 <RCCEx_PLL2_Config>
 8008e90:	4603      	mov	r3, r0
 8008e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008e96:	e003      	b.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10d      	bne.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008ea8:	4b05      	ldr	r3, [pc, #20]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008eac:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008eb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008eb6:	4a02      	ldr	r2, [pc, #8]	@ (8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008eb8:	430b      	orrs	r3, r1
 8008eba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008ebc:	e006      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8008ebe:	bf00      	nop
 8008ec0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008ed8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008eda:	2300      	movs	r3, #0
 8008edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008ede:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	d00c      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eec:	3328      	adds	r3, #40	@ 0x28
 8008eee:	2102      	movs	r1, #2
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fd23 	bl	800993c <RCCEx_PLL3_Config>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d002      	beq.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008efc:	2301      	movs	r3, #1
 8008efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f0a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8008f0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8008f10:	2300      	movs	r3, #0
 8008f12:	667b      	str	r3, [r7, #100]	@ 0x64
 8008f14:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8008f18:	460b      	mov	r3, r1
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	d038      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f2a:	d018      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008f2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008f30:	d811      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008f32:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f36:	d014      	beq.n	8008f62 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8008f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008f3c:	d80b      	bhi.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d011      	beq.n	8008f66 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f46:	d106      	bne.n	8008f56 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f48:	4bc3      	ldr	r3, [pc, #780]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	4ac2      	ldr	r2, [pc, #776]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008f54:	e008      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f5c:	e004      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f5e:	bf00      	nop
 8008f60:	e002      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f62:	bf00      	nop
 8008f64:	e000      	b.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008f66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10b      	bne.n	8008f88 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008f70:	4bb9      	ldr	r3, [pc, #740]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008f74:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f80:	4ab5      	ldr	r2, [pc, #724]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008f82:	430b      	orrs	r3, r1
 8008f84:	6553      	str	r3, [r2, #84]	@ 0x54
 8008f86:	e003      	b.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f98:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008fa2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	d009      	beq.n	8008fc0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008fac:	4baa      	ldr	r3, [pc, #680]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fb0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008fba:	4aa7      	ldr	r2, [pc, #668]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fc8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008fcc:	653b      	str	r3, [r7, #80]	@ 0x50
 8008fce:	2300      	movs	r3, #0
 8008fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8008fd2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	d00a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008fdc:	4b9e      	ldr	r3, [pc, #632]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fe8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008fec:	4a9a      	ldr	r2, [pc, #616]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008fee:	430b      	orrs	r3, r1
 8008ff0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ffa:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8008ffe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009000:	2300      	movs	r3, #0
 8009002:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009004:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009008:	460b      	mov	r3, r1
 800900a:	4313      	orrs	r3, r2
 800900c:	d009      	beq.n	8009022 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800900e:	4b92      	ldr	r3, [pc, #584]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009010:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009012:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800901a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800901c:	4a8e      	ldr	r2, [pc, #568]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800901e:	430b      	orrs	r3, r1
 8009020:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009022:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800902a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800902e:	643b      	str	r3, [r7, #64]	@ 0x40
 8009030:	2300      	movs	r3, #0
 8009032:	647b      	str	r3, [r7, #68]	@ 0x44
 8009034:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009038:	460b      	mov	r3, r1
 800903a:	4313      	orrs	r3, r2
 800903c:	d00e      	beq.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800903e:	4b86      	ldr	r3, [pc, #536]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	4a85      	ldr	r2, [pc, #532]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009044:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009048:	6113      	str	r3, [r2, #16]
 800904a:	4b83      	ldr	r3, [pc, #524]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800904c:	6919      	ldr	r1, [r3, #16]
 800904e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009052:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009056:	4a80      	ldr	r2, [pc, #512]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009058:	430b      	orrs	r3, r1
 800905a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009064:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009068:	63bb      	str	r3, [r7, #56]	@ 0x38
 800906a:	2300      	movs	r3, #0
 800906c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800906e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009072:	460b      	mov	r3, r1
 8009074:	4313      	orrs	r3, r2
 8009076:	d009      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009078:	4b77      	ldr	r3, [pc, #476]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800907a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800907c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009086:	4a74      	ldr	r2, [pc, #464]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009088:	430b      	orrs	r3, r1
 800908a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800908c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009098:	633b      	str	r3, [r7, #48]	@ 0x30
 800909a:	2300      	movs	r3, #0
 800909c:	637b      	str	r3, [r7, #52]	@ 0x34
 800909e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80090a2:	460b      	mov	r3, r1
 80090a4:	4313      	orrs	r3, r2
 80090a6:	d00a      	beq.n	80090be <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090a8:	4b6b      	ldr	r3, [pc, #428]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090ac:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80090b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090b8:	4a67      	ldr	r2, [pc, #412]	@ (8009258 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80090ba:	430b      	orrs	r3, r1
 80090bc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80090be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c6:	2100      	movs	r1, #0
 80090c8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80090d0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80090d4:	460b      	mov	r3, r1
 80090d6:	4313      	orrs	r3, r2
 80090d8:	d011      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	3308      	adds	r3, #8
 80090e0:	2100      	movs	r1, #0
 80090e2:	4618      	mov	r0, r3
 80090e4:	f000 fb78 	bl	80097d8 <RCCEx_PLL2_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80090ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d003      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80090fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	2100      	movs	r1, #0
 8009108:	6239      	str	r1, [r7, #32]
 800910a:	f003 0302 	and.w	r3, r3, #2
 800910e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009110:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009114:	460b      	mov	r3, r1
 8009116:	4313      	orrs	r3, r2
 8009118:	d011      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	3308      	adds	r3, #8
 8009120:	2101      	movs	r1, #1
 8009122:	4618      	mov	r0, r3
 8009124:	f000 fb58 	bl	80097d8 <RCCEx_PLL2_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800912e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009132:	2b00      	cmp	r3, #0
 8009134:	d003      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009136:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800913e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	2100      	movs	r1, #0
 8009148:	61b9      	str	r1, [r7, #24]
 800914a:	f003 0304 	and.w	r3, r3, #4
 800914e:	61fb      	str	r3, [r7, #28]
 8009150:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009154:	460b      	mov	r3, r1
 8009156:	4313      	orrs	r3, r2
 8009158:	d011      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800915a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800915e:	3308      	adds	r3, #8
 8009160:	2102      	movs	r1, #2
 8009162:	4618      	mov	r0, r3
 8009164:	f000 fb38 	bl	80097d8 <RCCEx_PLL2_Config>
 8009168:	4603      	mov	r3, r0
 800916a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800916e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009176:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800917a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800917e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009186:	2100      	movs	r1, #0
 8009188:	6139      	str	r1, [r7, #16]
 800918a:	f003 0308 	and.w	r3, r3, #8
 800918e:	617b      	str	r3, [r7, #20]
 8009190:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009194:	460b      	mov	r3, r1
 8009196:	4313      	orrs	r3, r2
 8009198:	d011      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800919a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919e:	3328      	adds	r3, #40	@ 0x28
 80091a0:	2100      	movs	r1, #0
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fbca 	bl	800993c <RCCEx_PLL3_Config>
 80091a8:	4603      	mov	r3, r0
 80091aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80091ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d003      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091c6:	2100      	movs	r1, #0
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	f003 0310 	and.w	r3, r3, #16
 80091ce:	60fb      	str	r3, [r7, #12]
 80091d0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80091d4:	460b      	mov	r3, r1
 80091d6:	4313      	orrs	r3, r2
 80091d8:	d011      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80091da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091de:	3328      	adds	r3, #40	@ 0x28
 80091e0:	2101      	movs	r1, #1
 80091e2:	4618      	mov	r0, r3
 80091e4:	f000 fbaa 	bl	800993c <RCCEx_PLL3_Config>
 80091e8:	4603      	mov	r3, r0
 80091ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80091ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d003      	beq.n	80091fe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80091fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009206:	2100      	movs	r1, #0
 8009208:	6039      	str	r1, [r7, #0]
 800920a:	f003 0320 	and.w	r3, r3, #32
 800920e:	607b      	str	r3, [r7, #4]
 8009210:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009214:	460b      	mov	r3, r1
 8009216:	4313      	orrs	r3, r2
 8009218:	d011      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	3328      	adds	r3, #40	@ 0x28
 8009220:	2102      	movs	r1, #2
 8009222:	4618      	mov	r0, r3
 8009224:	f000 fb8a 	bl	800993c <RCCEx_PLL3_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800922e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009232:	2b00      	cmp	r3, #0
 8009234:	d003      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800923e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009242:	2b00      	cmp	r3, #0
 8009244:	d101      	bne.n	800924a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009246:	2300      	movs	r3, #0
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800924a:	2301      	movs	r3, #1
}
 800924c:	4618      	mov	r0, r3
 800924e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009252:	46bd      	mov	sp, r7
 8009254:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009258:	58024400 	.word	0x58024400

0800925c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009260:	f7fe fd96 	bl	8007d90 <HAL_RCC_GetHCLKFreq>
 8009264:	4602      	mov	r2, r0
 8009266:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009268:	6a1b      	ldr	r3, [r3, #32]
 800926a:	091b      	lsrs	r3, r3, #4
 800926c:	f003 0307 	and.w	r3, r3, #7
 8009270:	4904      	ldr	r1, [pc, #16]	@ (8009284 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009272:	5ccb      	ldrb	r3, [r1, r3]
 8009274:	f003 031f 	and.w	r3, r3, #31
 8009278:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800927c:	4618      	mov	r0, r3
 800927e:	bd80      	pop	{r7, pc}
 8009280:	58024400 	.word	0x58024400
 8009284:	0800fb2c 	.word	0x0800fb2c

08009288 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8009288:	b480      	push	{r7}
 800928a:	b089      	sub	sp, #36	@ 0x24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009290:	4ba1      	ldr	r3, [pc, #644]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009294:	f003 0303 	and.w	r3, r3, #3
 8009298:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800929a:	4b9f      	ldr	r3, [pc, #636]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800929c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929e:	0b1b      	lsrs	r3, r3, #12
 80092a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80092a4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80092a6:	4b9c      	ldr	r3, [pc, #624]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092aa:	091b      	lsrs	r3, r3, #4
 80092ac:	f003 0301 	and.w	r3, r3, #1
 80092b0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80092b2:	4b99      	ldr	r3, [pc, #612]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092b6:	08db      	lsrs	r3, r3, #3
 80092b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	fb02 f303 	mul.w	r3, r2, r3
 80092c2:	ee07 3a90 	vmov	s15, r3
 80092c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80092ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f000 8111 	beq.w	80094f8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	2b02      	cmp	r3, #2
 80092da:	f000 8083 	beq.w	80093e4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80092de:	69bb      	ldr	r3, [r7, #24]
 80092e0:	2b02      	cmp	r3, #2
 80092e2:	f200 80a1 	bhi.w	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80092e6:	69bb      	ldr	r3, [r7, #24]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d003      	beq.n	80092f4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d056      	beq.n	80093a0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80092f2:	e099      	b.n	8009428 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80092f4:	4b88      	ldr	r3, [pc, #544]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f003 0320 	and.w	r3, r3, #32
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d02d      	beq.n	800935c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009300:	4b85      	ldr	r3, [pc, #532]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	08db      	lsrs	r3, r3, #3
 8009306:	f003 0303 	and.w	r3, r3, #3
 800930a:	4a84      	ldr	r2, [pc, #528]	@ (800951c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800930c:	fa22 f303 	lsr.w	r3, r2, r3
 8009310:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	ee07 3a90 	vmov	s15, r3
 8009318:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	ee07 3a90 	vmov	s15, r3
 8009322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800932a:	4b7b      	ldr	r3, [pc, #492]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800932c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800932e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009332:	ee07 3a90 	vmov	s15, r3
 8009336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800933a:	ed97 6a03 	vldr	s12, [r7, #12]
 800933e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800934a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800934e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009356:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800935a:	e087      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	ee07 3a90 	vmov	s15, r3
 8009362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009366:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8009524 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800936a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800936e:	4b6a      	ldr	r3, [pc, #424]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009370:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009376:	ee07 3a90 	vmov	s15, r3
 800937a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800937e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009382:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800938a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800938e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800939a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800939e:	e065      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	ee07 3a90 	vmov	s15, r3
 80093a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093aa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80093ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093b2:	4b59      	ldr	r3, [pc, #356]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093ba:	ee07 3a90 	vmov	s15, r3
 80093be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80093c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80093c6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80093ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80093ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80093d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80093d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80093da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80093de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80093e2:	e043      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	ee07 3a90 	vmov	s15, r3
 80093ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80093ee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800952c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80093f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80093f6:	4b48      	ldr	r3, [pc, #288]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80093f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80093fe:	ee07 3a90 	vmov	s15, r3
 8009402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009406:	ed97 6a03 	vldr	s12, [r7, #12]
 800940a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800940e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800941a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800941e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009422:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009426:	e021      	b.n	800946c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	ee07 3a90 	vmov	s15, r3
 800942e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009432:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8009528 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800943a:	4b37      	ldr	r3, [pc, #220]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800943c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800943e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009442:	ee07 3a90 	vmov	s15, r3
 8009446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800944a:	ed97 6a03 	vldr	s12, [r7, #12]
 800944e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8009520 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800945a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800945e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009466:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800946a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800946c:	4b2a      	ldr	r3, [pc, #168]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800946e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009470:	0a5b      	lsrs	r3, r3, #9
 8009472:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009476:	ee07 3a90 	vmov	s15, r3
 800947a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800947e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009482:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009486:	edd7 6a07 	vldr	s13, [r7, #28]
 800948a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800948e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009492:	ee17 2a90 	vmov	r2, s15
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800949a:	4b1f      	ldr	r3, [pc, #124]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800949c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800949e:	0c1b      	lsrs	r3, r3, #16
 80094a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094a4:	ee07 3a90 	vmov	s15, r3
 80094a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80094b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094c0:	ee17 2a90 	vmov	r2, s15
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80094c8:	4b13      	ldr	r3, [pc, #76]	@ (8009518 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80094ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094cc:	0e1b      	lsrs	r3, r3, #24
 80094ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094d2:	ee07 3a90 	vmov	s15, r3
 80094d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80094da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80094de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80094e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80094e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80094ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80094ee:	ee17 2a90 	vmov	r2, s15
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80094f6:	e008      	b.n	800950a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	609a      	str	r2, [r3, #8]
}
 800950a:	bf00      	nop
 800950c:	3724      	adds	r7, #36	@ 0x24
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	58024400 	.word	0x58024400
 800951c:	03d09000 	.word	0x03d09000
 8009520:	46000000 	.word	0x46000000
 8009524:	4c742400 	.word	0x4c742400
 8009528:	4a742400 	.word	0x4a742400
 800952c:	4bbebc20 	.word	0x4bbebc20

08009530 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009530:	b480      	push	{r7}
 8009532:	b089      	sub	sp, #36	@ 0x24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009538:	4ba1      	ldr	r3, [pc, #644]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800953a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009542:	4b9f      	ldr	r3, [pc, #636]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009546:	0d1b      	lsrs	r3, r3, #20
 8009548:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800954c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800954e:	4b9c      	ldr	r3, [pc, #624]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009552:	0a1b      	lsrs	r3, r3, #8
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800955a:	4b99      	ldr	r3, [pc, #612]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800955c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800955e:	08db      	lsrs	r3, r3, #3
 8009560:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009564:	693a      	ldr	r2, [r7, #16]
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	ee07 3a90 	vmov	s15, r3
 800956e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009572:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	f000 8111 	beq.w	80097a0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800957e:	69bb      	ldr	r3, [r7, #24]
 8009580:	2b02      	cmp	r3, #2
 8009582:	f000 8083 	beq.w	800968c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009586:	69bb      	ldr	r3, [r7, #24]
 8009588:	2b02      	cmp	r3, #2
 800958a:	f200 80a1 	bhi.w	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d003      	beq.n	800959c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009594:	69bb      	ldr	r3, [r7, #24]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d056      	beq.n	8009648 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800959a:	e099      	b.n	80096d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800959c:	4b88      	ldr	r3, [pc, #544]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d02d      	beq.n	8009604 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80095a8:	4b85      	ldr	r3, [pc, #532]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	08db      	lsrs	r3, r3, #3
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	4a84      	ldr	r2, [pc, #528]	@ (80097c4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80095b4:	fa22 f303 	lsr.w	r3, r2, r3
 80095b8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	ee07 3a90 	vmov	s15, r3
 80095c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095c4:	697b      	ldr	r3, [r7, #20]
 80095c6:	ee07 3a90 	vmov	s15, r3
 80095ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095d2:	4b7b      	ldr	r3, [pc, #492]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80095d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095da:	ee07 3a90 	vmov	s15, r3
 80095de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80095e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80095ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80095f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009602:	e087      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	ee07 3a90 	vmov	s15, r3
 800960a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80097cc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009616:	4b6a      	ldr	r3, [pc, #424]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800961a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961e:	ee07 3a90 	vmov	s15, r3
 8009622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009626:	ed97 6a03 	vldr	s12, [r7, #12]
 800962a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800962e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009636:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800963a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009642:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009646:	e065      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	ee07 3a90 	vmov	s15, r3
 800964e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009652:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800965a:	4b59      	ldr	r3, [pc, #356]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800965c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	ee07 3a90 	vmov	s15, r3
 8009666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800966a:	ed97 6a03 	vldr	s12, [r7, #12]
 800966e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800967a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800967e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009686:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800968a:	e043      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	ee07 3a90 	vmov	s15, r3
 8009692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009696:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80097d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800969a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969e:	4b48      	ldr	r3, [pc, #288]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80096b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80096c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80096ce:	e021      	b.n	8009714 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	ee07 3a90 	vmov	s15, r3
 80096d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80097d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80096de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096e2:	4b37      	ldr	r3, [pc, #220]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80096e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ea:	ee07 3a90 	vmov	s15, r3
 80096ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80096f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80097c8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80096fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009702:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800970a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800970e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009712:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009714:	4b2a      	ldr	r3, [pc, #168]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009718:	0a5b      	lsrs	r3, r3, #9
 800971a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800971e:	ee07 3a90 	vmov	s15, r3
 8009722:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009726:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800972a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800972e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009732:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009736:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800973a:	ee17 2a90 	vmov	r2, s15
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009742:	4b1f      	ldr	r3, [pc, #124]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009746:	0c1b      	lsrs	r3, r3, #16
 8009748:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800974c:	ee07 3a90 	vmov	s15, r3
 8009750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009754:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009758:	ee37 7a87 	vadd.f32	s14, s15, s14
 800975c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009760:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009764:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009768:	ee17 2a90 	vmov	r2, s15
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009770:	4b13      	ldr	r3, [pc, #76]	@ (80097c0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009774:	0e1b      	lsrs	r3, r3, #24
 8009776:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800977a:	ee07 3a90 	vmov	s15, r3
 800977e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009782:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8009786:	ee37 7a87 	vadd.f32	s14, s15, s14
 800978a:	edd7 6a07 	vldr	s13, [r7, #28]
 800978e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009792:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009796:	ee17 2a90 	vmov	r2, s15
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800979e:	e008      	b.n	80097b2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	609a      	str	r2, [r3, #8]
}
 80097b2:	bf00      	nop
 80097b4:	3724      	adds	r7, #36	@ 0x24
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	58024400 	.word	0x58024400
 80097c4:	03d09000 	.word	0x03d09000
 80097c8:	46000000 	.word	0x46000000
 80097cc:	4c742400 	.word	0x4c742400
 80097d0:	4a742400 	.word	0x4a742400
 80097d4:	4bbebc20 	.word	0x4bbebc20

080097d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b084      	sub	sp, #16
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
 80097e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80097e6:	4b53      	ldr	r3, [pc, #332]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097ea:	f003 0303 	and.w	r3, r3, #3
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d101      	bne.n	80097f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80097f2:	2301      	movs	r3, #1
 80097f4:	e099      	b.n	800992a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80097f6:	4b4f      	ldr	r3, [pc, #316]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	4a4e      	ldr	r2, [pc, #312]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80097fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009800:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009802:	f7f8 f8f1 	bl	80019e8 <HAL_GetTick>
 8009806:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009808:	e008      	b.n	800981c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800980a:	f7f8 f8ed 	bl	80019e8 <HAL_GetTick>
 800980e:	4602      	mov	r2, r0
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	1ad3      	subs	r3, r2, r3
 8009814:	2b02      	cmp	r3, #2
 8009816:	d901      	bls.n	800981c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e086      	b.n	800992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800981c:	4b45      	ldr	r3, [pc, #276]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009824:	2b00      	cmp	r3, #0
 8009826:	d1f0      	bne.n	800980a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009828:	4b42      	ldr	r3, [pc, #264]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800982a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800982c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	031b      	lsls	r3, r3, #12
 8009836:	493f      	ldr	r1, [pc, #252]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009838:	4313      	orrs	r3, r2
 800983a:	628b      	str	r3, [r1, #40]	@ 0x28
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	3b01      	subs	r3, #1
 8009842:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	025b      	lsls	r3, r3, #9
 800984e:	b29b      	uxth	r3, r3
 8009850:	431a      	orrs	r2, r3
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68db      	ldr	r3, [r3, #12]
 8009856:	3b01      	subs	r3, #1
 8009858:	041b      	lsls	r3, r3, #16
 800985a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800985e:	431a      	orrs	r2, r3
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	3b01      	subs	r3, #1
 8009866:	061b      	lsls	r3, r3, #24
 8009868:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800986c:	4931      	ldr	r1, [pc, #196]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800986e:	4313      	orrs	r3, r2
 8009870:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009872:	4b30      	ldr	r3, [pc, #192]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009876:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	695b      	ldr	r3, [r3, #20]
 800987e:	492d      	ldr	r1, [pc, #180]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009880:	4313      	orrs	r3, r2
 8009882:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009884:	4b2b      	ldr	r3, [pc, #172]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	f023 0220 	bic.w	r2, r3, #32
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	4928      	ldr	r1, [pc, #160]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009892:	4313      	orrs	r3, r2
 8009894:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009896:	4b27      	ldr	r3, [pc, #156]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 8009898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800989a:	4a26      	ldr	r2, [pc, #152]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800989c:	f023 0310 	bic.w	r3, r3, #16
 80098a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80098a2:	4b24      	ldr	r3, [pc, #144]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098a6:	4b24      	ldr	r3, [pc, #144]	@ (8009938 <RCCEx_PLL2_Config+0x160>)
 80098a8:	4013      	ands	r3, r2
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	69d2      	ldr	r2, [r2, #28]
 80098ae:	00d2      	lsls	r2, r2, #3
 80098b0:	4920      	ldr	r1, [pc, #128]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80098b6:	4b1f      	ldr	r3, [pc, #124]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ba:	4a1e      	ldr	r2, [pc, #120]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098bc:	f043 0310 	orr.w	r3, r3, #16
 80098c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80098c2:	683b      	ldr	r3, [r7, #0]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d106      	bne.n	80098d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80098c8:	4b1a      	ldr	r3, [pc, #104]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098cc:	4a19      	ldr	r2, [pc, #100]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098d4:	e00f      	b.n	80098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b01      	cmp	r3, #1
 80098da:	d106      	bne.n	80098ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80098dc:	4b15      	ldr	r3, [pc, #84]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	4a14      	ldr	r2, [pc, #80]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80098e8:	e005      	b.n	80098f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80098ea:	4b12      	ldr	r3, [pc, #72]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098ee:	4a11      	ldr	r2, [pc, #68]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80098f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80098f6:	4b0f      	ldr	r3, [pc, #60]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a0e      	ldr	r2, [pc, #56]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 80098fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009902:	f7f8 f871 	bl	80019e8 <HAL_GetTick>
 8009906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009908:	e008      	b.n	800991c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800990a:	f7f8 f86d 	bl	80019e8 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	68bb      	ldr	r3, [r7, #8]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d901      	bls.n	800991c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e006      	b.n	800992a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800991c:	4b05      	ldr	r3, [pc, #20]	@ (8009934 <RCCEx_PLL2_Config+0x15c>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009924:	2b00      	cmp	r3, #0
 8009926:	d0f0      	beq.n	800990a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009928:	7bfb      	ldrb	r3, [r7, #15]
}
 800992a:	4618      	mov	r0, r3
 800992c:	3710      	adds	r7, #16
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	58024400 	.word	0x58024400
 8009938:	ffff0007 	.word	0xffff0007

0800993c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
 8009942:	6078      	str	r0, [r7, #4]
 8009944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009946:	2300      	movs	r3, #0
 8009948:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800994a:	4b53      	ldr	r3, [pc, #332]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	2b03      	cmp	r3, #3
 8009954:	d101      	bne.n	800995a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009956:	2301      	movs	r3, #1
 8009958:	e099      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800995a:	4b4f      	ldr	r3, [pc, #316]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	4a4e      	ldr	r2, [pc, #312]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009960:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009964:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009966:	f7f8 f83f 	bl	80019e8 <HAL_GetTick>
 800996a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800996c:	e008      	b.n	8009980 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800996e:	f7f8 f83b 	bl	80019e8 <HAL_GetTick>
 8009972:	4602      	mov	r2, r0
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	1ad3      	subs	r3, r2, r3
 8009978:	2b02      	cmp	r3, #2
 800997a:	d901      	bls.n	8009980 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800997c:	2303      	movs	r3, #3
 800997e:	e086      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009980:	4b45      	ldr	r3, [pc, #276]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1f0      	bne.n	800996e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800998c:	4b42      	ldr	r3, [pc, #264]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800998e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009990:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	051b      	lsls	r3, r3, #20
 800999a:	493f      	ldr	r1, [pc, #252]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 800999c:	4313      	orrs	r3, r2
 800999e:	628b      	str	r3, [r1, #40]	@ 0x28
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	3b01      	subs	r3, #1
 80099a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	025b      	lsls	r3, r3, #9
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	431a      	orrs	r2, r3
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	3b01      	subs	r3, #1
 80099bc:	041b      	lsls	r3, r3, #16
 80099be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80099c2:	431a      	orrs	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	691b      	ldr	r3, [r3, #16]
 80099c8:	3b01      	subs	r3, #1
 80099ca:	061b      	lsls	r3, r3, #24
 80099cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80099d0:	4931      	ldr	r1, [pc, #196]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80099d6:	4b30      	ldr	r3, [pc, #192]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	492d      	ldr	r1, [pc, #180]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80099e8:	4b2b      	ldr	r3, [pc, #172]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	699b      	ldr	r3, [r3, #24]
 80099f4:	4928      	ldr	r1, [pc, #160]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099f6:	4313      	orrs	r3, r2
 80099f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80099fa:	4b27      	ldr	r3, [pc, #156]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 80099fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099fe:	4a26      	ldr	r2, [pc, #152]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009a06:	4b24      	ldr	r3, [pc, #144]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a0a:	4b24      	ldr	r3, [pc, #144]	@ (8009a9c <RCCEx_PLL3_Config+0x160>)
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	69d2      	ldr	r2, [r2, #28]
 8009a12:	00d2      	lsls	r2, r2, #3
 8009a14:	4920      	ldr	r1, [pc, #128]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009a1a:	4b1f      	ldr	r3, [pc, #124]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a1e:	4a1e      	ldr	r2, [pc, #120]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009a24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	4a19      	ldr	r2, [pc, #100]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a32:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009a36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a38:	e00f      	b.n	8009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	2b01      	cmp	r3, #1
 8009a3e:	d106      	bne.n	8009a4e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009a40:	4b15      	ldr	r3, [pc, #84]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a44:	4a14      	ldr	r2, [pc, #80]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a46:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8009a4c:	e005      	b.n	8009a5a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009a4e:	4b12      	ldr	r3, [pc, #72]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a52:	4a11      	ldr	r2, [pc, #68]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009a58:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009a5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a0e      	ldr	r2, [pc, #56]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a66:	f7f7 ffbf 	bl	80019e8 <HAL_GetTick>
 8009a6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a6c:	e008      	b.n	8009a80 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009a6e:	f7f7 ffbb 	bl	80019e8 <HAL_GetTick>
 8009a72:	4602      	mov	r2, r0
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b02      	cmp	r3, #2
 8009a7a:	d901      	bls.n	8009a80 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e006      	b.n	8009a8e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009a80:	4b05      	ldr	r3, [pc, #20]	@ (8009a98 <RCCEx_PLL3_Config+0x15c>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d0f0      	beq.n	8009a6e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a8e:	4618      	mov	r0, r3
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	58024400 	.word	0x58024400
 8009a9c:	ffff0007 	.word	0xffff0007

08009aa0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e042      	b.n	8009b38 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d106      	bne.n	8009aca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7f7 fe09 	bl	80016dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	2224      	movs	r2, #36	@ 0x24
 8009ace:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f022 0201 	bic.w	r2, r2, #1
 8009ae0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d002      	beq.n	8009af0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009aea:	6878      	ldr	r0, [r7, #4]
 8009aec:	f001 f9f8 	bl	800aee0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 fc8d 	bl	800a410 <UART_SetConfig>
 8009af6:	4603      	mov	r3, r0
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d101      	bne.n	8009b00 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009afc:	2301      	movs	r3, #1
 8009afe:	e01b      	b.n	8009b38 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	685a      	ldr	r2, [r3, #4]
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	689a      	ldr	r2, [r3, #8]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f042 0201 	orr.w	r2, r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f001 fa77 	bl	800b024 <UART_CheckIdleState>
 8009b36:	4603      	mov	r3, r0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	@ 0x28
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	60b9      	str	r1, [r7, #8]
 8009b4a:	603b      	str	r3, [r7, #0]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b56:	2b20      	cmp	r3, #32
 8009b58:	d17b      	bne.n	8009c52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d002      	beq.n	8009b66 <HAL_UART_Transmit+0x26>
 8009b60:	88fb      	ldrh	r3, [r7, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d101      	bne.n	8009b6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b66:	2301      	movs	r3, #1
 8009b68:	e074      	b.n	8009c54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2221      	movs	r2, #33	@ 0x21
 8009b76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009b7a:	f7f7 ff35 	bl	80019e8 <HAL_GetTick>
 8009b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	88fa      	ldrh	r2, [r7, #6]
 8009b84:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	88fa      	ldrh	r2, [r7, #6]
 8009b8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	689b      	ldr	r3, [r3, #8]
 8009b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b98:	d108      	bne.n	8009bac <HAL_UART_Transmit+0x6c>
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	691b      	ldr	r3, [r3, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d104      	bne.n	8009bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	61bb      	str	r3, [r7, #24]
 8009baa:	e003      	b.n	8009bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009bb4:	e030      	b.n	8009c18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	2180      	movs	r1, #128	@ 0x80
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f001 fad9 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d005      	beq.n	8009bd8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e03d      	b.n	8009c54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d10b      	bne.n	8009bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009bde:	69bb      	ldr	r3, [r7, #24]
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8009bee:	69bb      	ldr	r3, [r7, #24]
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	61bb      	str	r3, [r7, #24]
 8009bf4:	e007      	b.n	8009c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bf6:	69fb      	ldr	r3, [r7, #28]
 8009bf8:	781a      	ldrb	r2, [r3, #0]
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8009c00:	69fb      	ldr	r3, [r7, #28]
 8009c02:	3301      	adds	r3, #1
 8009c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c0c:	b29b      	uxth	r3, r3
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	b29a      	uxth	r2, r3
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d1c8      	bne.n	8009bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	9300      	str	r3, [sp, #0]
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	2140      	movs	r1, #64	@ 0x40
 8009c2e:	68f8      	ldr	r0, [r7, #12]
 8009c30:	f001 faa2 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d005      	beq.n	8009c46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2220      	movs	r2, #32
 8009c3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8009c42:	2303      	movs	r3, #3
 8009c44:	e006      	b.n	8009c54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2220      	movs	r2, #32
 8009c4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
 8009c50:	e000      	b.n	8009c54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8009c52:	2302      	movs	r3, #2
  }
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3720      	adds	r7, #32
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	bd80      	pop	{r7, pc}

08009c5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b0ba      	sub	sp, #232	@ 0xe8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	69db      	ldr	r3, [r3, #28]
 8009c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009c82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009c86:	f640 030f 	movw	r3, #2063	@ 0x80f
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d11b      	bne.n	8009cd0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009c98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009c9c:	f003 0320 	and.w	r3, r3, #32
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d015      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009ca4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009ca8:	f003 0320 	and.w	r3, r3, #32
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d105      	bne.n	8009cbc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009cb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d009      	beq.n	8009cd0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	f000 8377 	beq.w	800a3b4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	4798      	blx	r3
      }
      return;
 8009cce:	e371      	b.n	800a3b4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009cd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 8123 	beq.w	8009f20 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009cda:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009cde:	4b8d      	ldr	r3, [pc, #564]	@ (8009f14 <HAL_UART_IRQHandler+0x2b8>)
 8009ce0:	4013      	ands	r3, r2
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d106      	bne.n	8009cf4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009ce6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009cea:	4b8b      	ldr	r3, [pc, #556]	@ (8009f18 <HAL_UART_IRQHandler+0x2bc>)
 8009cec:	4013      	ands	r3, r2
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f000 8116 	beq.w	8009f20 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009cf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009cf8:	f003 0301 	and.w	r3, r3, #1
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d011      	beq.n	8009d24 <HAL_UART_IRQHandler+0xc8>
 8009d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2201      	movs	r2, #1
 8009d12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d1a:	f043 0201 	orr.w	r2, r3, #1
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d28:	f003 0302 	and.w	r3, r3, #2
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d011      	beq.n	8009d54 <HAL_UART_IRQHandler+0xf8>
 8009d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d34:	f003 0301 	and.w	r3, r3, #1
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d00b      	beq.n	8009d54 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	2202      	movs	r2, #2
 8009d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d4a:	f043 0204 	orr.w	r2, r3, #4
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d58:	f003 0304 	and.w	r3, r3, #4
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d011      	beq.n	8009d84 <HAL_UART_IRQHandler+0x128>
 8009d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d64:	f003 0301 	and.w	r3, r3, #1
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d00b      	beq.n	8009d84 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2204      	movs	r2, #4
 8009d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009d7a:	f043 0202 	orr.w	r2, r3, #2
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d88:	f003 0308 	and.w	r3, r3, #8
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d017      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d94:	f003 0320 	and.w	r3, r3, #32
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d105      	bne.n	8009da8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009d9c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009da0:	4b5c      	ldr	r3, [pc, #368]	@ (8009f14 <HAL_UART_IRQHandler+0x2b8>)
 8009da2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d00b      	beq.n	8009dc0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2208      	movs	r2, #8
 8009dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009db6:	f043 0208 	orr.w	r2, r3, #8
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d012      	beq.n	8009df2 <HAL_UART_IRQHandler+0x196>
 8009dcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d00c      	beq.n	8009df2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009de0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009de8:	f043 0220 	orr.w	r2, r3, #32
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	f000 82dd 	beq.w	800a3b8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009dfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e02:	f003 0320 	and.w	r3, r3, #32
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d013      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009e0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e0e:	f003 0320 	and.w	r3, r3, #32
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d105      	bne.n	8009e22 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009e16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d007      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d003      	beq.n	8009e32 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e38:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	689b      	ldr	r3, [r3, #8]
 8009e42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e46:	2b40      	cmp	r3, #64	@ 0x40
 8009e48:	d005      	beq.n	8009e56 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009e4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009e4e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d054      	beq.n	8009f00 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009e56:	6878      	ldr	r0, [r7, #4]
 8009e58:	f001 f9fc 	bl	800b254 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009e66:	2b40      	cmp	r3, #64	@ 0x40
 8009e68:	d146      	bne.n	8009ef8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	3308      	adds	r3, #8
 8009e70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009e78:	e853 3f00 	ldrex	r3, [r3]
 8009e7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009e80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009e84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	3308      	adds	r3, #8
 8009e92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009e96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009e9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009ea2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009ea6:	e841 2300 	strex	r3, r2, [r1]
 8009eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009eae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1d9      	bne.n	8009e6a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d017      	beq.n	8009ef0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ec6:	4a15      	ldr	r2, [pc, #84]	@ (8009f1c <HAL_UART_IRQHandler+0x2c0>)
 8009ec8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f8 fdc7 	bl	8002a64 <HAL_DMA_Abort_IT>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d019      	beq.n	8009f10 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ee2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009eea:	4610      	mov	r0, r2
 8009eec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009eee:	e00f      	b.n	8009f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fa77 	bl	800a3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ef6:	e00b      	b.n	8009f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fa73 	bl	800a3e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009efe:	e007      	b.n	8009f10 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fa6f 	bl	800a3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2200      	movs	r2, #0
 8009f0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009f0e:	e253      	b.n	800a3b8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f10:	bf00      	nop
    return;
 8009f12:	e251      	b.n	800a3b8 <HAL_UART_IRQHandler+0x75c>
 8009f14:	10000001 	.word	0x10000001
 8009f18:	04000120 	.word	0x04000120
 8009f1c:	0800b321 	.word	0x0800b321

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f24:	2b01      	cmp	r3, #1
 8009f26:	f040 81e7 	bne.w	800a2f8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f2e:	f003 0310 	and.w	r3, r3, #16
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	f000 81e0 	beq.w	800a2f8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f3c:	f003 0310 	and.w	r3, r3, #16
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	f000 81d9 	beq.w	800a2f8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2210      	movs	r2, #16
 8009f4c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	689b      	ldr	r3, [r3, #8]
 8009f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f58:	2b40      	cmp	r3, #64	@ 0x40
 8009f5a:	f040 8151 	bne.w	800a200 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	4a96      	ldr	r2, [pc, #600]	@ (800a1c0 <HAL_UART_IRQHandler+0x564>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d068      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a93      	ldr	r2, [pc, #588]	@ (800a1c4 <HAL_UART_IRQHandler+0x568>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d061      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a91      	ldr	r2, [pc, #580]	@ (800a1c8 <HAL_UART_IRQHandler+0x56c>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d05a      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	4a8e      	ldr	r2, [pc, #568]	@ (800a1cc <HAL_UART_IRQHandler+0x570>)
 8009f92:	4293      	cmp	r3, r2
 8009f94:	d053      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a8c      	ldr	r2, [pc, #560]	@ (800a1d0 <HAL_UART_IRQHandler+0x574>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d04c      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	4a89      	ldr	r2, [pc, #548]	@ (800a1d4 <HAL_UART_IRQHandler+0x578>)
 8009fae:	4293      	cmp	r3, r2
 8009fb0:	d045      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4a87      	ldr	r2, [pc, #540]	@ (800a1d8 <HAL_UART_IRQHandler+0x57c>)
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	d03e      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a84      	ldr	r2, [pc, #528]	@ (800a1dc <HAL_UART_IRQHandler+0x580>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d037      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a82      	ldr	r2, [pc, #520]	@ (800a1e0 <HAL_UART_IRQHandler+0x584>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d030      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a7f      	ldr	r2, [pc, #508]	@ (800a1e4 <HAL_UART_IRQHandler+0x588>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d029      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	4a7d      	ldr	r2, [pc, #500]	@ (800a1e8 <HAL_UART_IRQHandler+0x58c>)
 8009ff4:	4293      	cmp	r3, r2
 8009ff6:	d022      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	4a7a      	ldr	r2, [pc, #488]	@ (800a1ec <HAL_UART_IRQHandler+0x590>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d01b      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a78      	ldr	r2, [pc, #480]	@ (800a1f0 <HAL_UART_IRQHandler+0x594>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d014      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a75      	ldr	r2, [pc, #468]	@ (800a1f4 <HAL_UART_IRQHandler+0x598>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d00d      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a73      	ldr	r2, [pc, #460]	@ (800a1f8 <HAL_UART_IRQHandler+0x59c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d006      	beq.n	800a03e <HAL_UART_IRQHandler+0x3e2>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4a70      	ldr	r2, [pc, #448]	@ (800a1fc <HAL_UART_IRQHandler+0x5a0>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d106      	bne.n	800a04c <HAL_UART_IRQHandler+0x3f0>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	685b      	ldr	r3, [r3, #4]
 800a048:	b29b      	uxth	r3, r3
 800a04a:	e005      	b.n	800a058 <HAL_UART_IRQHandler+0x3fc>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	b29b      	uxth	r3, r3
 800a058:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a05c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a060:	2b00      	cmp	r3, #0
 800a062:	f000 81ab 	beq.w	800a3bc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a06c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a070:	429a      	cmp	r2, r3
 800a072:	f080 81a3 	bcs.w	800a3bc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a07c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a08c:	f000 8087 	beq.w	800a19e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a098:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a09c:	e853 3f00 	ldrex	r3, [r3]
 800a0a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a0a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a0a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a0ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a0ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a0be:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0c2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a0c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a0ca:	e841 2300 	strex	r3, r2, [r1]
 800a0ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a0d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1da      	bne.n	800a090 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	3308      	adds	r3, #8
 800a0e0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a0e4:	e853 3f00 	ldrex	r3, [r3]
 800a0e8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a0ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a0ec:	f023 0301 	bic.w	r3, r3, #1
 800a0f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	3308      	adds	r3, #8
 800a0fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a0fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a102:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a104:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a106:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a10a:	e841 2300 	strex	r3, r2, [r1]
 800a10e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a110:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a112:	2b00      	cmp	r3, #0
 800a114:	d1e1      	bne.n	800a0da <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	3308      	adds	r3, #8
 800a11c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a11e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a120:	e853 3f00 	ldrex	r3, [r3]
 800a124:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a126:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a128:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a12c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	3308      	adds	r3, #8
 800a136:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a13a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a13c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a13e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a140:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a142:	e841 2300 	strex	r3, r2, [r1]
 800a146:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1e3      	bne.n	800a116 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2220      	movs	r2, #32
 800a152:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a164:	e853 3f00 	ldrex	r3, [r3]
 800a168:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a16a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a16c:	f023 0310 	bic.w	r3, r3, #16
 800a170:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	461a      	mov	r2, r3
 800a17a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a17e:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a180:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a182:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a184:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a186:	e841 2300 	strex	r3, r2, [r1]
 800a18a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1e4      	bne.n	800a15c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a198:	4618      	mov	r0, r3
 800a19a:	f7f8 f945 	bl	8002428 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2202      	movs	r2, #2
 800a1a2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a1b0:	b29b      	uxth	r3, r3
 800a1b2:	1ad3      	subs	r3, r2, r3
 800a1b4:	b29b      	uxth	r3, r3
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f91d 	bl	800a3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a1be:	e0fd      	b.n	800a3bc <HAL_UART_IRQHandler+0x760>
 800a1c0:	40020010 	.word	0x40020010
 800a1c4:	40020028 	.word	0x40020028
 800a1c8:	40020040 	.word	0x40020040
 800a1cc:	40020058 	.word	0x40020058
 800a1d0:	40020070 	.word	0x40020070
 800a1d4:	40020088 	.word	0x40020088
 800a1d8:	400200a0 	.word	0x400200a0
 800a1dc:	400200b8 	.word	0x400200b8
 800a1e0:	40020410 	.word	0x40020410
 800a1e4:	40020428 	.word	0x40020428
 800a1e8:	40020440 	.word	0x40020440
 800a1ec:	40020458 	.word	0x40020458
 800a1f0:	40020470 	.word	0x40020470
 800a1f4:	40020488 	.word	0x40020488
 800a1f8:	400204a0 	.word	0x400204a0
 800a1fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	1ad3      	subs	r3, r2, r3
 800a210:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f000 80cf 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a222:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a226:	2b00      	cmp	r3, #0
 800a228:	f000 80ca 	beq.w	800a3c0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a234:	e853 3f00 	ldrex	r3, [r3]
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a23a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a23c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a240:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a24e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a250:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a252:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a254:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a256:	e841 2300 	strex	r3, r2, [r1]
 800a25a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a25c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1e4      	bne.n	800a22c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3308      	adds	r3, #8
 800a268:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	e853 3f00 	ldrex	r3, [r3]
 800a270:	623b      	str	r3, [r7, #32]
   return(result);
 800a272:	6a3a      	ldr	r2, [r7, #32]
 800a274:	4b55      	ldr	r3, [pc, #340]	@ (800a3cc <HAL_UART_IRQHandler+0x770>)
 800a276:	4013      	ands	r3, r2
 800a278:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	3308      	adds	r3, #8
 800a282:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a286:	633a      	str	r2, [r7, #48]	@ 0x30
 800a288:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a28c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e3      	bne.n	800a262 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2220      	movs	r2, #32
 800a29e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	e853 3f00 	ldrex	r3, [r3]
 800a2ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	f023 0310 	bic.w	r3, r3, #16
 800a2c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2d0:	61fb      	str	r3, [r7, #28]
 800a2d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d4:	69b9      	ldr	r1, [r7, #24]
 800a2d6:	69fa      	ldr	r2, [r7, #28]
 800a2d8:	e841 2300 	strex	r3, r2, [r1]
 800a2dc:	617b      	str	r3, [r7, #20]
   return(result);
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e4      	bne.n	800a2ae <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2202      	movs	r2, #2
 800a2e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a2ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a2ee:	4619      	mov	r1, r3
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f881 	bl	800a3f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a2f6:	e063      	b.n	800a3c0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a2f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a2fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00e      	beq.n	800a322 <HAL_UART_IRQHandler+0x6c6>
 800a304:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a308:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d008      	beq.n	800a322 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a318:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f841 	bl	800b3a2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a320:	e051      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d014      	beq.n	800a358 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a32e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a336:	2b00      	cmp	r3, #0
 800a338:	d105      	bne.n	800a346 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a33a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a33e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a342:	2b00      	cmp	r3, #0
 800a344:	d008      	beq.n	800a358 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d03a      	beq.n	800a3c4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
    }
    return;
 800a356:	e035      	b.n	800a3c4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a35c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a360:	2b00      	cmp	r3, #0
 800a362:	d009      	beq.n	800a378 <HAL_UART_IRQHandler+0x71c>
 800a364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a368:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d003      	beq.n	800a378 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 ffeb 	bl	800b34c <UART_EndTransmit_IT>
    return;
 800a376:	e026      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a37c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d009      	beq.n	800a398 <HAL_UART_IRQHandler+0x73c>
 800a384:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a388:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d003      	beq.n	800a398 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f001 f81a 	bl	800b3ca <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a396:	e016      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a39c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d010      	beq.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
 800a3a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	da0c      	bge.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f001 f802 	bl	800b3b6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a3b2:	e008      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a3b4:	bf00      	nop
 800a3b6:	e006      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a3b8:	bf00      	nop
 800a3ba:	e004      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a3bc:	bf00      	nop
 800a3be:	e002      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
      return;
 800a3c0:	bf00      	nop
 800a3c2:	e000      	b.n	800a3c6 <HAL_UART_IRQHandler+0x76a>
    return;
 800a3c4:	bf00      	nop
  }
}
 800a3c6:	37e8      	adds	r7, #232	@ 0xe8
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	bd80      	pop	{r7, pc}
 800a3cc:	effffffe 	.word	0xeffffffe

0800a3d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b083      	sub	sp, #12
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a3ec:	bf00      	nop
 800a3ee:	370c      	adds	r7, #12
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f6:	4770      	bx	lr

0800a3f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b083      	sub	sp, #12
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
 800a400:	460b      	mov	r3, r1
 800a402:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a404:	bf00      	nop
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a414:	b092      	sub	sp, #72	@ 0x48
 800a416:	af00      	add	r7, sp, #0
 800a418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a41a:	2300      	movs	r3, #0
 800a41c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a420:	697b      	ldr	r3, [r7, #20]
 800a422:	689a      	ldr	r2, [r3, #8]
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	691b      	ldr	r3, [r3, #16]
 800a428:	431a      	orrs	r2, r3
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	695b      	ldr	r3, [r3, #20]
 800a42e:	431a      	orrs	r2, r3
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	4313      	orrs	r3, r2
 800a436:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	681a      	ldr	r2, [r3, #0]
 800a43e:	4bbe      	ldr	r3, [pc, #760]	@ (800a738 <UART_SetConfig+0x328>)
 800a440:	4013      	ands	r3, r2
 800a442:	697a      	ldr	r2, [r7, #20]
 800a444:	6812      	ldr	r2, [r2, #0]
 800a446:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a448:	430b      	orrs	r3, r1
 800a44a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a456:	697b      	ldr	r3, [r7, #20]
 800a458:	68da      	ldr	r2, [r3, #12]
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	430a      	orrs	r2, r1
 800a460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4ab3      	ldr	r2, [pc, #716]	@ (800a73c <UART_SetConfig+0x32c>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d004      	beq.n	800a47c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a478:	4313      	orrs	r3, r2
 800a47a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	689a      	ldr	r2, [r3, #8]
 800a482:	4baf      	ldr	r3, [pc, #700]	@ (800a740 <UART_SetConfig+0x330>)
 800a484:	4013      	ands	r3, r2
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a48c:	430b      	orrs	r3, r1
 800a48e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a496:	f023 010f 	bic.w	r1, r3, #15
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	430a      	orrs	r2, r1
 800a4a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4aa6      	ldr	r2, [pc, #664]	@ (800a744 <UART_SetConfig+0x334>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d177      	bne.n	800a5a0 <UART_SetConfig+0x190>
 800a4b0:	4ba5      	ldr	r3, [pc, #660]	@ (800a748 <UART_SetConfig+0x338>)
 800a4b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a4b8:	2b28      	cmp	r3, #40	@ 0x28
 800a4ba:	d86d      	bhi.n	800a598 <UART_SetConfig+0x188>
 800a4bc:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c4 <UART_SetConfig+0xb4>)
 800a4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c2:	bf00      	nop
 800a4c4:	0800a569 	.word	0x0800a569
 800a4c8:	0800a599 	.word	0x0800a599
 800a4cc:	0800a599 	.word	0x0800a599
 800a4d0:	0800a599 	.word	0x0800a599
 800a4d4:	0800a599 	.word	0x0800a599
 800a4d8:	0800a599 	.word	0x0800a599
 800a4dc:	0800a599 	.word	0x0800a599
 800a4e0:	0800a599 	.word	0x0800a599
 800a4e4:	0800a571 	.word	0x0800a571
 800a4e8:	0800a599 	.word	0x0800a599
 800a4ec:	0800a599 	.word	0x0800a599
 800a4f0:	0800a599 	.word	0x0800a599
 800a4f4:	0800a599 	.word	0x0800a599
 800a4f8:	0800a599 	.word	0x0800a599
 800a4fc:	0800a599 	.word	0x0800a599
 800a500:	0800a599 	.word	0x0800a599
 800a504:	0800a579 	.word	0x0800a579
 800a508:	0800a599 	.word	0x0800a599
 800a50c:	0800a599 	.word	0x0800a599
 800a510:	0800a599 	.word	0x0800a599
 800a514:	0800a599 	.word	0x0800a599
 800a518:	0800a599 	.word	0x0800a599
 800a51c:	0800a599 	.word	0x0800a599
 800a520:	0800a599 	.word	0x0800a599
 800a524:	0800a581 	.word	0x0800a581
 800a528:	0800a599 	.word	0x0800a599
 800a52c:	0800a599 	.word	0x0800a599
 800a530:	0800a599 	.word	0x0800a599
 800a534:	0800a599 	.word	0x0800a599
 800a538:	0800a599 	.word	0x0800a599
 800a53c:	0800a599 	.word	0x0800a599
 800a540:	0800a599 	.word	0x0800a599
 800a544:	0800a589 	.word	0x0800a589
 800a548:	0800a599 	.word	0x0800a599
 800a54c:	0800a599 	.word	0x0800a599
 800a550:	0800a599 	.word	0x0800a599
 800a554:	0800a599 	.word	0x0800a599
 800a558:	0800a599 	.word	0x0800a599
 800a55c:	0800a599 	.word	0x0800a599
 800a560:	0800a599 	.word	0x0800a599
 800a564:	0800a591 	.word	0x0800a591
 800a568:	2301      	movs	r3, #1
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e222      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a570:	2304      	movs	r3, #4
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e21e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a578:	2308      	movs	r3, #8
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e21a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a580:	2310      	movs	r3, #16
 800a582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a586:	e216      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a588:	2320      	movs	r3, #32
 800a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58e:	e212      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a590:	2340      	movs	r3, #64	@ 0x40
 800a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a596:	e20e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a598:	2380      	movs	r3, #128	@ 0x80
 800a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59e:	e20a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5a0:	697b      	ldr	r3, [r7, #20]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	4a69      	ldr	r2, [pc, #420]	@ (800a74c <UART_SetConfig+0x33c>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d130      	bne.n	800a60c <UART_SetConfig+0x1fc>
 800a5aa:	4b67      	ldr	r3, [pc, #412]	@ (800a748 <UART_SetConfig+0x338>)
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5ae:	f003 0307 	and.w	r3, r3, #7
 800a5b2:	2b05      	cmp	r3, #5
 800a5b4:	d826      	bhi.n	800a604 <UART_SetConfig+0x1f4>
 800a5b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a5bc <UART_SetConfig+0x1ac>)
 800a5b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5bc:	0800a5d5 	.word	0x0800a5d5
 800a5c0:	0800a5dd 	.word	0x0800a5dd
 800a5c4:	0800a5e5 	.word	0x0800a5e5
 800a5c8:	0800a5ed 	.word	0x0800a5ed
 800a5cc:	0800a5f5 	.word	0x0800a5f5
 800a5d0:	0800a5fd 	.word	0x0800a5fd
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e1ec      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5dc:	2304      	movs	r3, #4
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e1e8      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5e4:	2308      	movs	r3, #8
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e1e4      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5ec:	2310      	movs	r3, #16
 800a5ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5f2:	e1e0      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5f4:	2320      	movs	r3, #32
 800a5f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5fa:	e1dc      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a5fc:	2340      	movs	r3, #64	@ 0x40
 800a5fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a602:	e1d8      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a604:	2380      	movs	r3, #128	@ 0x80
 800a606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a60a:	e1d4      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a4f      	ldr	r2, [pc, #316]	@ (800a750 <UART_SetConfig+0x340>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d130      	bne.n	800a678 <UART_SetConfig+0x268>
 800a616:	4b4c      	ldr	r3, [pc, #304]	@ (800a748 <UART_SetConfig+0x338>)
 800a618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a61a:	f003 0307 	and.w	r3, r3, #7
 800a61e:	2b05      	cmp	r3, #5
 800a620:	d826      	bhi.n	800a670 <UART_SetConfig+0x260>
 800a622:	a201      	add	r2, pc, #4	@ (adr r2, 800a628 <UART_SetConfig+0x218>)
 800a624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a628:	0800a641 	.word	0x0800a641
 800a62c:	0800a649 	.word	0x0800a649
 800a630:	0800a651 	.word	0x0800a651
 800a634:	0800a659 	.word	0x0800a659
 800a638:	0800a661 	.word	0x0800a661
 800a63c:	0800a669 	.word	0x0800a669
 800a640:	2300      	movs	r3, #0
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e1b6      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a648:	2304      	movs	r3, #4
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e1b2      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a650:	2308      	movs	r3, #8
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e1ae      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a658:	2310      	movs	r3, #16
 800a65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a65e:	e1aa      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a660:	2320      	movs	r3, #32
 800a662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a666:	e1a6      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a668:	2340      	movs	r3, #64	@ 0x40
 800a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a66e:	e1a2      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a670:	2380      	movs	r3, #128	@ 0x80
 800a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a676:	e19e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	4a35      	ldr	r2, [pc, #212]	@ (800a754 <UART_SetConfig+0x344>)
 800a67e:	4293      	cmp	r3, r2
 800a680:	d130      	bne.n	800a6e4 <UART_SetConfig+0x2d4>
 800a682:	4b31      	ldr	r3, [pc, #196]	@ (800a748 <UART_SetConfig+0x338>)
 800a684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a686:	f003 0307 	and.w	r3, r3, #7
 800a68a:	2b05      	cmp	r3, #5
 800a68c:	d826      	bhi.n	800a6dc <UART_SetConfig+0x2cc>
 800a68e:	a201      	add	r2, pc, #4	@ (adr r2, 800a694 <UART_SetConfig+0x284>)
 800a690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a694:	0800a6ad 	.word	0x0800a6ad
 800a698:	0800a6b5 	.word	0x0800a6b5
 800a69c:	0800a6bd 	.word	0x0800a6bd
 800a6a0:	0800a6c5 	.word	0x0800a6c5
 800a6a4:	0800a6cd 	.word	0x0800a6cd
 800a6a8:	0800a6d5 	.word	0x0800a6d5
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e180      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6b4:	2304      	movs	r3, #4
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e17c      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6bc:	2308      	movs	r3, #8
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e178      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6c4:	2310      	movs	r3, #16
 800a6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ca:	e174      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6cc:	2320      	movs	r3, #32
 800a6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6d2:	e170      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6d4:	2340      	movs	r3, #64	@ 0x40
 800a6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6da:	e16c      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6dc:	2380      	movs	r3, #128	@ 0x80
 800a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6e2:	e168      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1b      	ldr	r2, [pc, #108]	@ (800a758 <UART_SetConfig+0x348>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d142      	bne.n	800a774 <UART_SetConfig+0x364>
 800a6ee:	4b16      	ldr	r3, [pc, #88]	@ (800a748 <UART_SetConfig+0x338>)
 800a6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6f2:	f003 0307 	and.w	r3, r3, #7
 800a6f6:	2b05      	cmp	r3, #5
 800a6f8:	d838      	bhi.n	800a76c <UART_SetConfig+0x35c>
 800a6fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a700 <UART_SetConfig+0x2f0>)
 800a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a700:	0800a719 	.word	0x0800a719
 800a704:	0800a721 	.word	0x0800a721
 800a708:	0800a729 	.word	0x0800a729
 800a70c:	0800a731 	.word	0x0800a731
 800a710:	0800a75d 	.word	0x0800a75d
 800a714:	0800a765 	.word	0x0800a765
 800a718:	2300      	movs	r3, #0
 800a71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a71e:	e14a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a720:	2304      	movs	r3, #4
 800a722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a726:	e146      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a728:	2308      	movs	r3, #8
 800a72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a72e:	e142      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a730:	2310      	movs	r3, #16
 800a732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a736:	e13e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a738:	cfff69f3 	.word	0xcfff69f3
 800a73c:	58000c00 	.word	0x58000c00
 800a740:	11fff4ff 	.word	0x11fff4ff
 800a744:	40011000 	.word	0x40011000
 800a748:	58024400 	.word	0x58024400
 800a74c:	40004400 	.word	0x40004400
 800a750:	40004800 	.word	0x40004800
 800a754:	40004c00 	.word	0x40004c00
 800a758:	40005000 	.word	0x40005000
 800a75c:	2320      	movs	r3, #32
 800a75e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a762:	e128      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a764:	2340      	movs	r3, #64	@ 0x40
 800a766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a76a:	e124      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a76c:	2380      	movs	r3, #128	@ 0x80
 800a76e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a772:	e120      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4acb      	ldr	r2, [pc, #812]	@ (800aaa8 <UART_SetConfig+0x698>)
 800a77a:	4293      	cmp	r3, r2
 800a77c:	d176      	bne.n	800a86c <UART_SetConfig+0x45c>
 800a77e:	4bcb      	ldr	r3, [pc, #812]	@ (800aaac <UART_SetConfig+0x69c>)
 800a780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a782:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a786:	2b28      	cmp	r3, #40	@ 0x28
 800a788:	d86c      	bhi.n	800a864 <UART_SetConfig+0x454>
 800a78a:	a201      	add	r2, pc, #4	@ (adr r2, 800a790 <UART_SetConfig+0x380>)
 800a78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a790:	0800a835 	.word	0x0800a835
 800a794:	0800a865 	.word	0x0800a865
 800a798:	0800a865 	.word	0x0800a865
 800a79c:	0800a865 	.word	0x0800a865
 800a7a0:	0800a865 	.word	0x0800a865
 800a7a4:	0800a865 	.word	0x0800a865
 800a7a8:	0800a865 	.word	0x0800a865
 800a7ac:	0800a865 	.word	0x0800a865
 800a7b0:	0800a83d 	.word	0x0800a83d
 800a7b4:	0800a865 	.word	0x0800a865
 800a7b8:	0800a865 	.word	0x0800a865
 800a7bc:	0800a865 	.word	0x0800a865
 800a7c0:	0800a865 	.word	0x0800a865
 800a7c4:	0800a865 	.word	0x0800a865
 800a7c8:	0800a865 	.word	0x0800a865
 800a7cc:	0800a865 	.word	0x0800a865
 800a7d0:	0800a845 	.word	0x0800a845
 800a7d4:	0800a865 	.word	0x0800a865
 800a7d8:	0800a865 	.word	0x0800a865
 800a7dc:	0800a865 	.word	0x0800a865
 800a7e0:	0800a865 	.word	0x0800a865
 800a7e4:	0800a865 	.word	0x0800a865
 800a7e8:	0800a865 	.word	0x0800a865
 800a7ec:	0800a865 	.word	0x0800a865
 800a7f0:	0800a84d 	.word	0x0800a84d
 800a7f4:	0800a865 	.word	0x0800a865
 800a7f8:	0800a865 	.word	0x0800a865
 800a7fc:	0800a865 	.word	0x0800a865
 800a800:	0800a865 	.word	0x0800a865
 800a804:	0800a865 	.word	0x0800a865
 800a808:	0800a865 	.word	0x0800a865
 800a80c:	0800a865 	.word	0x0800a865
 800a810:	0800a855 	.word	0x0800a855
 800a814:	0800a865 	.word	0x0800a865
 800a818:	0800a865 	.word	0x0800a865
 800a81c:	0800a865 	.word	0x0800a865
 800a820:	0800a865 	.word	0x0800a865
 800a824:	0800a865 	.word	0x0800a865
 800a828:	0800a865 	.word	0x0800a865
 800a82c:	0800a865 	.word	0x0800a865
 800a830:	0800a85d 	.word	0x0800a85d
 800a834:	2301      	movs	r3, #1
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e0bc      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a83c:	2304      	movs	r3, #4
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e0b8      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a844:	2308      	movs	r3, #8
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e0b4      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a84c:	2310      	movs	r3, #16
 800a84e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a852:	e0b0      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a854:	2320      	movs	r3, #32
 800a856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a85a:	e0ac      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a85c:	2340      	movs	r3, #64	@ 0x40
 800a85e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a862:	e0a8      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a864:	2380      	movs	r3, #128	@ 0x80
 800a866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a86a:	e0a4      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a8f      	ldr	r2, [pc, #572]	@ (800aab0 <UART_SetConfig+0x6a0>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d130      	bne.n	800a8d8 <UART_SetConfig+0x4c8>
 800a876:	4b8d      	ldr	r3, [pc, #564]	@ (800aaac <UART_SetConfig+0x69c>)
 800a878:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a87a:	f003 0307 	and.w	r3, r3, #7
 800a87e:	2b05      	cmp	r3, #5
 800a880:	d826      	bhi.n	800a8d0 <UART_SetConfig+0x4c0>
 800a882:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <UART_SetConfig+0x478>)
 800a884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a888:	0800a8a1 	.word	0x0800a8a1
 800a88c:	0800a8a9 	.word	0x0800a8a9
 800a890:	0800a8b1 	.word	0x0800a8b1
 800a894:	0800a8b9 	.word	0x0800a8b9
 800a898:	0800a8c1 	.word	0x0800a8c1
 800a89c:	0800a8c9 	.word	0x0800a8c9
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e086      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8a8:	2304      	movs	r3, #4
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ae:	e082      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8b0:	2308      	movs	r3, #8
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b6:	e07e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8b8:	2310      	movs	r3, #16
 800a8ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8be:	e07a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8c0:	2320      	movs	r3, #32
 800a8c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8c6:	e076      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8c8:	2340      	movs	r3, #64	@ 0x40
 800a8ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ce:	e072      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8d0:	2380      	movs	r3, #128	@ 0x80
 800a8d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8d6:	e06e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a75      	ldr	r2, [pc, #468]	@ (800aab4 <UART_SetConfig+0x6a4>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d130      	bne.n	800a944 <UART_SetConfig+0x534>
 800a8e2:	4b72      	ldr	r3, [pc, #456]	@ (800aaac <UART_SetConfig+0x69c>)
 800a8e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8e6:	f003 0307 	and.w	r3, r3, #7
 800a8ea:	2b05      	cmp	r3, #5
 800a8ec:	d826      	bhi.n	800a93c <UART_SetConfig+0x52c>
 800a8ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a8f4 <UART_SetConfig+0x4e4>)
 800a8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8f4:	0800a90d 	.word	0x0800a90d
 800a8f8:	0800a915 	.word	0x0800a915
 800a8fc:	0800a91d 	.word	0x0800a91d
 800a900:	0800a925 	.word	0x0800a925
 800a904:	0800a92d 	.word	0x0800a92d
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	2300      	movs	r3, #0
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e050      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a914:	2304      	movs	r3, #4
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e04c      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a91c:	2308      	movs	r3, #8
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e048      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a924:	2310      	movs	r3, #16
 800a926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a92a:	e044      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a92c:	2320      	movs	r3, #32
 800a92e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a932:	e040      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a934:	2340      	movs	r3, #64	@ 0x40
 800a936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a93a:	e03c      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a93c:	2380      	movs	r3, #128	@ 0x80
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	e038      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a5b      	ldr	r2, [pc, #364]	@ (800aab8 <UART_SetConfig+0x6a8>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d130      	bne.n	800a9b0 <UART_SetConfig+0x5a0>
 800a94e:	4b57      	ldr	r3, [pc, #348]	@ (800aaac <UART_SetConfig+0x69c>)
 800a950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a952:	f003 0307 	and.w	r3, r3, #7
 800a956:	2b05      	cmp	r3, #5
 800a958:	d826      	bhi.n	800a9a8 <UART_SetConfig+0x598>
 800a95a:	a201      	add	r2, pc, #4	@ (adr r2, 800a960 <UART_SetConfig+0x550>)
 800a95c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a960:	0800a979 	.word	0x0800a979
 800a964:	0800a981 	.word	0x0800a981
 800a968:	0800a989 	.word	0x0800a989
 800a96c:	0800a991 	.word	0x0800a991
 800a970:	0800a999 	.word	0x0800a999
 800a974:	0800a9a1 	.word	0x0800a9a1
 800a978:	2302      	movs	r3, #2
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e01a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a980:	2304      	movs	r3, #4
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e016      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a988:	2308      	movs	r3, #8
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98e:	e012      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a990:	2310      	movs	r3, #16
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a996:	e00e      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a998:	2320      	movs	r3, #32
 800a99a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a99e:	e00a      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a9a0:	2340      	movs	r3, #64	@ 0x40
 800a9a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	e006      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a9a8:	2380      	movs	r3, #128	@ 0x80
 800a9aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a9ae:	e002      	b.n	800a9b6 <UART_SetConfig+0x5a6>
 800a9b0:	2380      	movs	r3, #128	@ 0x80
 800a9b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	4a3f      	ldr	r2, [pc, #252]	@ (800aab8 <UART_SetConfig+0x6a8>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	f040 80f8 	bne.w	800abb2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9c2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9c6:	2b20      	cmp	r3, #32
 800a9c8:	dc46      	bgt.n	800aa58 <UART_SetConfig+0x648>
 800a9ca:	2b02      	cmp	r3, #2
 800a9cc:	f2c0 8082 	blt.w	800aad4 <UART_SetConfig+0x6c4>
 800a9d0:	3b02      	subs	r3, #2
 800a9d2:	2b1e      	cmp	r3, #30
 800a9d4:	d87e      	bhi.n	800aad4 <UART_SetConfig+0x6c4>
 800a9d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9dc <UART_SetConfig+0x5cc>)
 800a9d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9dc:	0800aa5f 	.word	0x0800aa5f
 800a9e0:	0800aad5 	.word	0x0800aad5
 800a9e4:	0800aa67 	.word	0x0800aa67
 800a9e8:	0800aad5 	.word	0x0800aad5
 800a9ec:	0800aad5 	.word	0x0800aad5
 800a9f0:	0800aad5 	.word	0x0800aad5
 800a9f4:	0800aa77 	.word	0x0800aa77
 800a9f8:	0800aad5 	.word	0x0800aad5
 800a9fc:	0800aad5 	.word	0x0800aad5
 800aa00:	0800aad5 	.word	0x0800aad5
 800aa04:	0800aad5 	.word	0x0800aad5
 800aa08:	0800aad5 	.word	0x0800aad5
 800aa0c:	0800aad5 	.word	0x0800aad5
 800aa10:	0800aad5 	.word	0x0800aad5
 800aa14:	0800aa87 	.word	0x0800aa87
 800aa18:	0800aad5 	.word	0x0800aad5
 800aa1c:	0800aad5 	.word	0x0800aad5
 800aa20:	0800aad5 	.word	0x0800aad5
 800aa24:	0800aad5 	.word	0x0800aad5
 800aa28:	0800aad5 	.word	0x0800aad5
 800aa2c:	0800aad5 	.word	0x0800aad5
 800aa30:	0800aad5 	.word	0x0800aad5
 800aa34:	0800aad5 	.word	0x0800aad5
 800aa38:	0800aad5 	.word	0x0800aad5
 800aa3c:	0800aad5 	.word	0x0800aad5
 800aa40:	0800aad5 	.word	0x0800aad5
 800aa44:	0800aad5 	.word	0x0800aad5
 800aa48:	0800aad5 	.word	0x0800aad5
 800aa4c:	0800aad5 	.word	0x0800aad5
 800aa50:	0800aad5 	.word	0x0800aad5
 800aa54:	0800aac7 	.word	0x0800aac7
 800aa58:	2b40      	cmp	r3, #64	@ 0x40
 800aa5a:	d037      	beq.n	800aacc <UART_SetConfig+0x6bc>
 800aa5c:	e03a      	b.n	800aad4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa5e:	f7fe fbfd 	bl	800925c <HAL_RCCEx_GetD3PCLK1Freq>
 800aa62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa64:	e03c      	b.n	800aae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe fc0c 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa74:	e034      	b.n	800aae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa76:	f107 0318 	add.w	r3, r7, #24
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7fe fd58 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	e02c      	b.n	800aae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa86:	4b09      	ldr	r3, [pc, #36]	@ (800aaac <UART_SetConfig+0x69c>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f003 0320 	and.w	r3, r3, #32
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d016      	beq.n	800aac0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa92:	4b06      	ldr	r3, [pc, #24]	@ (800aaac <UART_SetConfig+0x69c>)
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	08db      	lsrs	r3, r3, #3
 800aa98:	f003 0303 	and.w	r3, r3, #3
 800aa9c:	4a07      	ldr	r2, [pc, #28]	@ (800aabc <UART_SetConfig+0x6ac>)
 800aa9e:	fa22 f303 	lsr.w	r3, r2, r3
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaa4:	e01c      	b.n	800aae0 <UART_SetConfig+0x6d0>
 800aaa6:	bf00      	nop
 800aaa8:	40011400 	.word	0x40011400
 800aaac:	58024400 	.word	0x58024400
 800aab0:	40007800 	.word	0x40007800
 800aab4:	40007c00 	.word	0x40007c00
 800aab8:	58000c00 	.word	0x58000c00
 800aabc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aac0:	4b9d      	ldr	r3, [pc, #628]	@ (800ad38 <UART_SetConfig+0x928>)
 800aac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aac4:	e00c      	b.n	800aae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aac6:	4b9d      	ldr	r3, [pc, #628]	@ (800ad3c <UART_SetConfig+0x92c>)
 800aac8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaca:	e009      	b.n	800aae0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aacc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aad2:	e005      	b.n	800aae0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aad4:	2300      	movs	r3, #0
 800aad6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aad8:	2301      	movs	r3, #1
 800aada:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aade:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f000 81de 	beq.w	800aea4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aae8:	697b      	ldr	r3, [r7, #20]
 800aaea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaec:	4a94      	ldr	r2, [pc, #592]	@ (800ad40 <UART_SetConfig+0x930>)
 800aaee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aaf6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aafa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	685a      	ldr	r2, [r3, #4]
 800ab00:	4613      	mov	r3, r2
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	4413      	add	r3, r2
 800ab06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d305      	bcc.n	800ab18 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	685b      	ldr	r3, [r3, #4]
 800ab10:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ab12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d903      	bls.n	800ab20 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800ab18:	2301      	movs	r3, #1
 800ab1a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab1e:	e1c1      	b.n	800aea4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab22:	2200      	movs	r2, #0
 800ab24:	60bb      	str	r3, [r7, #8]
 800ab26:	60fa      	str	r2, [r7, #12]
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	4a84      	ldr	r2, [pc, #528]	@ (800ad40 <UART_SetConfig+0x930>)
 800ab2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab32:	b29b      	uxth	r3, r3
 800ab34:	2200      	movs	r2, #0
 800ab36:	603b      	str	r3, [r7, #0]
 800ab38:	607a      	str	r2, [r7, #4]
 800ab3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab3e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab42:	f7f5 fde1 	bl	8000708 <__aeabi_uldivmod>
 800ab46:	4602      	mov	r2, r0
 800ab48:	460b      	mov	r3, r1
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	f04f 0200 	mov.w	r2, #0
 800ab52:	f04f 0300 	mov.w	r3, #0
 800ab56:	020b      	lsls	r3, r1, #8
 800ab58:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab5c:	0202      	lsls	r2, r0, #8
 800ab5e:	6979      	ldr	r1, [r7, #20]
 800ab60:	6849      	ldr	r1, [r1, #4]
 800ab62:	0849      	lsrs	r1, r1, #1
 800ab64:	2000      	movs	r0, #0
 800ab66:	460c      	mov	r4, r1
 800ab68:	4605      	mov	r5, r0
 800ab6a:	eb12 0804 	adds.w	r8, r2, r4
 800ab6e:	eb43 0905 	adc.w	r9, r3, r5
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	2200      	movs	r2, #0
 800ab78:	469a      	mov	sl, r3
 800ab7a:	4693      	mov	fp, r2
 800ab7c:	4652      	mov	r2, sl
 800ab7e:	465b      	mov	r3, fp
 800ab80:	4640      	mov	r0, r8
 800ab82:	4649      	mov	r1, r9
 800ab84:	f7f5 fdc0 	bl	8000708 <__aeabi_uldivmod>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab96:	d308      	bcc.n	800abaa <UART_SetConfig+0x79a>
 800ab98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab9a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab9e:	d204      	bcs.n	800abaa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800aba6:	60da      	str	r2, [r3, #12]
 800aba8:	e17c      	b.n	800aea4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800abaa:	2301      	movs	r3, #1
 800abac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800abb0:	e178      	b.n	800aea4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	69db      	ldr	r3, [r3, #28]
 800abb6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800abba:	f040 80c5 	bne.w	800ad48 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800abbe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800abc2:	2b20      	cmp	r3, #32
 800abc4:	dc48      	bgt.n	800ac58 <UART_SetConfig+0x848>
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	db7b      	blt.n	800acc2 <UART_SetConfig+0x8b2>
 800abca:	2b20      	cmp	r3, #32
 800abcc:	d879      	bhi.n	800acc2 <UART_SetConfig+0x8b2>
 800abce:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <UART_SetConfig+0x7c4>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800ac5f 	.word	0x0800ac5f
 800abd8:	0800ac67 	.word	0x0800ac67
 800abdc:	0800acc3 	.word	0x0800acc3
 800abe0:	0800acc3 	.word	0x0800acc3
 800abe4:	0800ac6f 	.word	0x0800ac6f
 800abe8:	0800acc3 	.word	0x0800acc3
 800abec:	0800acc3 	.word	0x0800acc3
 800abf0:	0800acc3 	.word	0x0800acc3
 800abf4:	0800ac7f 	.word	0x0800ac7f
 800abf8:	0800acc3 	.word	0x0800acc3
 800abfc:	0800acc3 	.word	0x0800acc3
 800ac00:	0800acc3 	.word	0x0800acc3
 800ac04:	0800acc3 	.word	0x0800acc3
 800ac08:	0800acc3 	.word	0x0800acc3
 800ac0c:	0800acc3 	.word	0x0800acc3
 800ac10:	0800acc3 	.word	0x0800acc3
 800ac14:	0800ac8f 	.word	0x0800ac8f
 800ac18:	0800acc3 	.word	0x0800acc3
 800ac1c:	0800acc3 	.word	0x0800acc3
 800ac20:	0800acc3 	.word	0x0800acc3
 800ac24:	0800acc3 	.word	0x0800acc3
 800ac28:	0800acc3 	.word	0x0800acc3
 800ac2c:	0800acc3 	.word	0x0800acc3
 800ac30:	0800acc3 	.word	0x0800acc3
 800ac34:	0800acc3 	.word	0x0800acc3
 800ac38:	0800acc3 	.word	0x0800acc3
 800ac3c:	0800acc3 	.word	0x0800acc3
 800ac40:	0800acc3 	.word	0x0800acc3
 800ac44:	0800acc3 	.word	0x0800acc3
 800ac48:	0800acc3 	.word	0x0800acc3
 800ac4c:	0800acc3 	.word	0x0800acc3
 800ac50:	0800acc3 	.word	0x0800acc3
 800ac54:	0800acb5 	.word	0x0800acb5
 800ac58:	2b40      	cmp	r3, #64	@ 0x40
 800ac5a:	d02e      	beq.n	800acba <UART_SetConfig+0x8aa>
 800ac5c:	e031      	b.n	800acc2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac5e:	f7fd f8c7 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800ac62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac64:	e033      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac66:	f7fd f8d9 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 800ac6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac6c:	e02f      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe fb08 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac7c:	e027      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac7e:	f107 0318 	add.w	r3, r7, #24
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fc54 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac8c:	e01f      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac8e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad44 <UART_SetConfig+0x934>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	f003 0320 	and.w	r3, r3, #32
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d009      	beq.n	800acae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac9a:	4b2a      	ldr	r3, [pc, #168]	@ (800ad44 <UART_SetConfig+0x934>)
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	08db      	lsrs	r3, r3, #3
 800aca0:	f003 0303 	and.w	r3, r3, #3
 800aca4:	4a24      	ldr	r2, [pc, #144]	@ (800ad38 <UART_SetConfig+0x928>)
 800aca6:	fa22 f303 	lsr.w	r3, r2, r3
 800acaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acac:	e00f      	b.n	800acce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800acae:	4b22      	ldr	r3, [pc, #136]	@ (800ad38 <UART_SetConfig+0x928>)
 800acb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb2:	e00c      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acb4:	4b21      	ldr	r3, [pc, #132]	@ (800ad3c <UART_SetConfig+0x92c>)
 800acb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acb8:	e009      	b.n	800acce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800acba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800acbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acc0:	e005      	b.n	800acce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800acc2:	2300      	movs	r3, #0
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800accc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	f000 80e7 	beq.w	800aea4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	4a19      	ldr	r2, [pc, #100]	@ (800ad40 <UART_SetConfig+0x930>)
 800acdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ace0:	461a      	mov	r2, r3
 800ace2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ace4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ace8:	005a      	lsls	r2, r3, #1
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	085b      	lsrs	r3, r3, #1
 800acf0:	441a      	add	r2, r3
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	685b      	ldr	r3, [r3, #4]
 800acf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acfa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	2b0f      	cmp	r3, #15
 800ad00:	d916      	bls.n	800ad30 <UART_SetConfig+0x920>
 800ad02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad08:	d212      	bcs.n	800ad30 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad0c:	b29b      	uxth	r3, r3
 800ad0e:	f023 030f 	bic.w	r3, r3, #15
 800ad12:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	f003 0307 	and.w	r3, r3, #7
 800ad1e:	b29a      	uxth	r2, r3
 800ad20:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad22:	4313      	orrs	r3, r2
 800ad24:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ad26:	697b      	ldr	r3, [r7, #20]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ad2c:	60da      	str	r2, [r3, #12]
 800ad2e:	e0b9      	b.n	800aea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad36:	e0b5      	b.n	800aea4 <UART_SetConfig+0xa94>
 800ad38:	03d09000 	.word	0x03d09000
 800ad3c:	003d0900 	.word	0x003d0900
 800ad40:	0800fb44 	.word	0x0800fb44
 800ad44:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad48:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad4c:	2b20      	cmp	r3, #32
 800ad4e:	dc49      	bgt.n	800ade4 <UART_SetConfig+0x9d4>
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	db7c      	blt.n	800ae4e <UART_SetConfig+0xa3e>
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	d87a      	bhi.n	800ae4e <UART_SetConfig+0xa3e>
 800ad58:	a201      	add	r2, pc, #4	@ (adr r2, 800ad60 <UART_SetConfig+0x950>)
 800ad5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad5e:	bf00      	nop
 800ad60:	0800adeb 	.word	0x0800adeb
 800ad64:	0800adf3 	.word	0x0800adf3
 800ad68:	0800ae4f 	.word	0x0800ae4f
 800ad6c:	0800ae4f 	.word	0x0800ae4f
 800ad70:	0800adfb 	.word	0x0800adfb
 800ad74:	0800ae4f 	.word	0x0800ae4f
 800ad78:	0800ae4f 	.word	0x0800ae4f
 800ad7c:	0800ae4f 	.word	0x0800ae4f
 800ad80:	0800ae0b 	.word	0x0800ae0b
 800ad84:	0800ae4f 	.word	0x0800ae4f
 800ad88:	0800ae4f 	.word	0x0800ae4f
 800ad8c:	0800ae4f 	.word	0x0800ae4f
 800ad90:	0800ae4f 	.word	0x0800ae4f
 800ad94:	0800ae4f 	.word	0x0800ae4f
 800ad98:	0800ae4f 	.word	0x0800ae4f
 800ad9c:	0800ae4f 	.word	0x0800ae4f
 800ada0:	0800ae1b 	.word	0x0800ae1b
 800ada4:	0800ae4f 	.word	0x0800ae4f
 800ada8:	0800ae4f 	.word	0x0800ae4f
 800adac:	0800ae4f 	.word	0x0800ae4f
 800adb0:	0800ae4f 	.word	0x0800ae4f
 800adb4:	0800ae4f 	.word	0x0800ae4f
 800adb8:	0800ae4f 	.word	0x0800ae4f
 800adbc:	0800ae4f 	.word	0x0800ae4f
 800adc0:	0800ae4f 	.word	0x0800ae4f
 800adc4:	0800ae4f 	.word	0x0800ae4f
 800adc8:	0800ae4f 	.word	0x0800ae4f
 800adcc:	0800ae4f 	.word	0x0800ae4f
 800add0:	0800ae4f 	.word	0x0800ae4f
 800add4:	0800ae4f 	.word	0x0800ae4f
 800add8:	0800ae4f 	.word	0x0800ae4f
 800addc:	0800ae4f 	.word	0x0800ae4f
 800ade0:	0800ae41 	.word	0x0800ae41
 800ade4:	2b40      	cmp	r3, #64	@ 0x40
 800ade6:	d02e      	beq.n	800ae46 <UART_SetConfig+0xa36>
 800ade8:	e031      	b.n	800ae4e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adea:	f7fd f801 	bl	8007df0 <HAL_RCC_GetPCLK1Freq>
 800adee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adf0:	e033      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800adf2:	f7fd f813 	bl	8007e1c <HAL_RCC_GetPCLK2Freq>
 800adf6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800adf8:	e02f      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adfe:	4618      	mov	r0, r3
 800ae00:	f7fe fa42 	bl	8009288 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae08:	e027      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae0a:	f107 0318 	add.w	r3, r7, #24
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fe fb8e 	bl	8009530 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae18:	e01f      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ae1a:	4b2d      	ldr	r3, [pc, #180]	@ (800aed0 <UART_SetConfig+0xac0>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f003 0320 	and.w	r3, r3, #32
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d009      	beq.n	800ae3a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae26:	4b2a      	ldr	r3, [pc, #168]	@ (800aed0 <UART_SetConfig+0xac0>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	08db      	lsrs	r3, r3, #3
 800ae2c:	f003 0303 	and.w	r3, r3, #3
 800ae30:	4a28      	ldr	r2, [pc, #160]	@ (800aed4 <UART_SetConfig+0xac4>)
 800ae32:	fa22 f303 	lsr.w	r3, r2, r3
 800ae36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae38:	e00f      	b.n	800ae5a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ae3a:	4b26      	ldr	r3, [pc, #152]	@ (800aed4 <UART_SetConfig+0xac4>)
 800ae3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae3e:	e00c      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae40:	4b25      	ldr	r3, [pc, #148]	@ (800aed8 <UART_SetConfig+0xac8>)
 800ae42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae44:	e009      	b.n	800ae5a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae4c:	e005      	b.n	800ae5a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae52:	2301      	movs	r3, #1
 800ae54:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae58:	bf00      	nop
    }

    if (pclk != 0U)
 800ae5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d021      	beq.n	800aea4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae64:	4a1d      	ldr	r2, [pc, #116]	@ (800aedc <UART_SetConfig+0xacc>)
 800ae66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae6a:	461a      	mov	r2, r3
 800ae6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae6e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	685b      	ldr	r3, [r3, #4]
 800ae76:	085b      	lsrs	r3, r3, #1
 800ae78:	441a      	add	r2, r3
 800ae7a:	697b      	ldr	r3, [r7, #20]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae82:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae86:	2b0f      	cmp	r3, #15
 800ae88:	d909      	bls.n	800ae9e <UART_SetConfig+0xa8e>
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae90:	d205      	bcs.n	800ae9e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae94:	b29a      	uxth	r2, r3
 800ae96:	697b      	ldr	r3, [r7, #20]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	60da      	str	r2, [r3, #12]
 800ae9c:	e002      	b.n	800aea4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae9e:	2301      	movs	r3, #1
 800aea0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	2201      	movs	r2, #1
 800aea8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	2201      	movs	r2, #1
 800aeb0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeb4:	697b      	ldr	r3, [r7, #20]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	2200      	movs	r2, #0
 800aebe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aec0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3748      	adds	r7, #72	@ 0x48
 800aec8:	46bd      	mov	sp, r7
 800aeca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aece:	bf00      	nop
 800aed0:	58024400 	.word	0x58024400
 800aed4:	03d09000 	.word	0x03d09000
 800aed8:	003d0900 	.word	0x003d0900
 800aedc:	0800fb44 	.word	0x0800fb44

0800aee0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b083      	sub	sp, #12
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeec:	f003 0308 	and.w	r3, r3, #8
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00a      	beq.n	800af0a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	430a      	orrs	r2, r1
 800af08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d00a      	beq.n	800af2c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	685b      	ldr	r3, [r3, #4]
 800af1c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	430a      	orrs	r2, r1
 800af2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d00a      	beq.n	800af4e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	685b      	ldr	r3, [r3, #4]
 800af3e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	430a      	orrs	r2, r1
 800af4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00a      	beq.n	800af70 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	430a      	orrs	r2, r1
 800af6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af74:	f003 0310 	and.w	r3, r3, #16
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d00a      	beq.n	800af92 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	689b      	ldr	r3, [r3, #8]
 800af82:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	430a      	orrs	r2, r1
 800af90:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af96:	f003 0320 	and.w	r3, r3, #32
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d00a      	beq.n	800afb4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	430a      	orrs	r2, r1
 800afb2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d01a      	beq.n	800aff6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afda:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afde:	d10a      	bne.n	800aff6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	430a      	orrs	r2, r1
 800aff4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800affa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800affe:	2b00      	cmp	r3, #0
 800b000:	d00a      	beq.n	800b018 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	430a      	orrs	r2, r1
 800b016:	605a      	str	r2, [r3, #4]
  }
}
 800b018:	bf00      	nop
 800b01a:	370c      	adds	r7, #12
 800b01c:	46bd      	mov	sp, r7
 800b01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b022:	4770      	bx	lr

0800b024 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b098      	sub	sp, #96	@ 0x60
 800b028:	af02      	add	r7, sp, #8
 800b02a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b034:	f7f6 fcd8 	bl	80019e8 <HAL_GetTick>
 800b038:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f003 0308 	and.w	r3, r3, #8
 800b044:	2b08      	cmp	r3, #8
 800b046:	d12f      	bne.n	800b0a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b048:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b04c:	9300      	str	r3, [sp, #0]
 800b04e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b050:	2200      	movs	r2, #0
 800b052:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f88e 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d022      	beq.n	800b0a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b06a:	e853 3f00 	ldrex	r3, [r3]
 800b06e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b070:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b072:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b076:	653b      	str	r3, [r7, #80]	@ 0x50
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	461a      	mov	r2, r3
 800b07e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b080:	647b      	str	r3, [r7, #68]	@ 0x44
 800b082:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b086:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e6      	bne.n	800b062 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	2220      	movs	r2, #32
 800b098:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	e063      	b.n	800b170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0304 	and.w	r3, r3, #4
 800b0b2:	2b04      	cmp	r3, #4
 800b0b4:	d149      	bne.n	800b14a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 f857 	bl	800b178 <UART_WaitOnFlagUntilTimeout>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d03c      	beq.n	800b14a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0d8:	e853 3f00 	ldrex	r3, [r3]
 800b0dc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0f6:	e841 2300 	strex	r3, r2, [r1]
 800b0fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1e6      	bne.n	800b0d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	3308      	adds	r3, #8
 800b108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	e853 3f00 	ldrex	r3, [r3]
 800b110:	60fb      	str	r3, [r7, #12]
   return(result);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	f023 0301 	bic.w	r3, r3, #1
 800b118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	3308      	adds	r3, #8
 800b120:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b122:	61fa      	str	r2, [r7, #28]
 800b124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b126:	69b9      	ldr	r1, [r7, #24]
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	e841 2300 	strex	r3, r2, [r1]
 800b12e:	617b      	str	r3, [r7, #20]
   return(result);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d1e5      	bne.n	800b102 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	2220      	movs	r2, #32
 800b13a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2200      	movs	r2, #0
 800b142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b146:	2303      	movs	r3, #3
 800b148:	e012      	b.n	800b170 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2220      	movs	r2, #32
 800b14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2220      	movs	r2, #32
 800b156:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2200      	movs	r2, #0
 800b15e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2200      	movs	r2, #0
 800b164:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b16e:	2300      	movs	r3, #0
}
 800b170:	4618      	mov	r0, r3
 800b172:	3758      	adds	r7, #88	@ 0x58
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b188:	e04f      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b18a:	69bb      	ldr	r3, [r7, #24]
 800b18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b190:	d04b      	beq.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b192:	f7f6 fc29 	bl	80019e8 <HAL_GetTick>
 800b196:	4602      	mov	r2, r0
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	69ba      	ldr	r2, [r7, #24]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d302      	bcc.n	800b1a8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1a2:	69bb      	ldr	r3, [r7, #24]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d101      	bne.n	800b1ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1a8:	2303      	movs	r3, #3
 800b1aa:	e04e      	b.n	800b24a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	f003 0304 	and.w	r3, r3, #4
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d037      	beq.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	2b80      	cmp	r3, #128	@ 0x80
 800b1be:	d034      	beq.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	2b40      	cmp	r3, #64	@ 0x40
 800b1c4:	d031      	beq.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	69db      	ldr	r3, [r3, #28]
 800b1cc:	f003 0308 	and.w	r3, r3, #8
 800b1d0:	2b08      	cmp	r3, #8
 800b1d2:	d110      	bne.n	800b1f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2208      	movs	r2, #8
 800b1da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1dc:	68f8      	ldr	r0, [r7, #12]
 800b1de:	f000 f839 	bl	800b254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2208      	movs	r2, #8
 800b1e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e029      	b.n	800b24a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	69db      	ldr	r3, [r3, #28]
 800b1fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b200:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b204:	d111      	bne.n	800b22a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b20e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f000 f81f 	bl	800b254 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2220      	movs	r2, #32
 800b21a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b226:	2303      	movs	r3, #3
 800b228:	e00f      	b.n	800b24a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	69da      	ldr	r2, [r3, #28]
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	4013      	ands	r3, r2
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	429a      	cmp	r2, r3
 800b238:	bf0c      	ite	eq
 800b23a:	2301      	moveq	r3, #1
 800b23c:	2300      	movne	r3, #0
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	461a      	mov	r2, r3
 800b242:	79fb      	ldrb	r3, [r7, #7]
 800b244:	429a      	cmp	r2, r3
 800b246:	d0a0      	beq.n	800b18a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b254:	b480      	push	{r7}
 800b256:	b095      	sub	sp, #84	@ 0x54
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b264:	e853 3f00 	ldrex	r3, [r3]
 800b268:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b26c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b270:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	461a      	mov	r2, r3
 800b278:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b27a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b27c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b27e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b280:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b282:	e841 2300 	strex	r3, r2, [r1]
 800b286:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d1e6      	bne.n	800b25c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	3308      	adds	r3, #8
 800b294:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b296:	6a3b      	ldr	r3, [r7, #32]
 800b298:	e853 3f00 	ldrex	r3, [r3]
 800b29c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b29e:	69fa      	ldr	r2, [r7, #28]
 800b2a0:	4b1e      	ldr	r3, [pc, #120]	@ (800b31c <UART_EndRxTransfer+0xc8>)
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3308      	adds	r3, #8
 800b2ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b2ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2b6:	e841 2300 	strex	r3, r2, [r1]
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d1e5      	bne.n	800b28e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2c6:	2b01      	cmp	r3, #1
 800b2c8:	d118      	bne.n	800b2fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	e853 3f00 	ldrex	r3, [r3]
 800b2d6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	f023 0310 	bic.w	r3, r3, #16
 800b2de:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	461a      	mov	r2, r3
 800b2e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2e8:	61bb      	str	r3, [r7, #24]
 800b2ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ec:	6979      	ldr	r1, [r7, #20]
 800b2ee:	69ba      	ldr	r2, [r7, #24]
 800b2f0:	e841 2300 	strex	r3, r2, [r1]
 800b2f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2f6:	693b      	ldr	r3, [r7, #16]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e6      	bne.n	800b2ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	2220      	movs	r2, #32
 800b300:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	2200      	movs	r2, #0
 800b308:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2200      	movs	r2, #0
 800b30e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b310:	bf00      	nop
 800b312:	3754      	adds	r7, #84	@ 0x54
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	effffffe 	.word	0xeffffffe

0800b320 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2200      	movs	r2, #0
 800b33a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7ff f850 	bl	800a3e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b344:	bf00      	nop
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b088      	sub	sp, #32
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	60bb      	str	r3, [r7, #8]
   return(result);
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b368:	61fb      	str	r3, [r7, #28]
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	461a      	mov	r2, r3
 800b370:	69fb      	ldr	r3, [r7, #28]
 800b372:	61bb      	str	r3, [r7, #24]
 800b374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6979      	ldr	r1, [r7, #20]
 800b378:	69ba      	ldr	r2, [r7, #24]
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	613b      	str	r3, [r7, #16]
   return(result);
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e6      	bne.n	800b354 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2220      	movs	r2, #32
 800b38a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2200      	movs	r2, #0
 800b392:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f7ff f81b 	bl	800a3d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b39a:	bf00      	nop
 800b39c:	3720      	adds	r7, #32
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}

0800b3a2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b3a2:	b480      	push	{r7}
 800b3a4:	b083      	sub	sp, #12
 800b3a6:	af00      	add	r7, sp, #0
 800b3a8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b3b6:	b480      	push	{r7}
 800b3b8:	b083      	sub	sp, #12
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b3be:	bf00      	nop
 800b3c0:	370c      	adds	r7, #12
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3c8:	4770      	bx	lr

0800b3ca <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b3ca:	b480      	push	{r7}
 800b3cc:	b083      	sub	sp, #12
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b3d2:	bf00      	nop
 800b3d4:	370c      	adds	r7, #12
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3dc:	4770      	bx	lr

0800b3de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b3de:	b480      	push	{r7}
 800b3e0:	b085      	sub	sp, #20
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d101      	bne.n	800b3f4 <HAL_UARTEx_DisableFifoMode+0x16>
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	e027      	b.n	800b444 <HAL_UARTEx_DisableFifoMode+0x66>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2224      	movs	r2, #36	@ 0x24
 800b400:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f022 0201 	bic.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b422:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	2200      	movs	r2, #0
 800b428:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	68fa      	ldr	r2, [r7, #12]
 800b430:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2220      	movs	r2, #32
 800b436:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3714      	adds	r7, #20
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b464:	2302      	movs	r3, #2
 800b466:	e02d      	b.n	800b4c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2224      	movs	r2, #36	@ 0x24
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	683a      	ldr	r2, [r7, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b4a4:	6878      	ldr	r0, [r7, #4]
 800b4a6:	f000 f84f 	bl	800b548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68fa      	ldr	r2, [r7, #12]
 800b4b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2220      	movs	r2, #32
 800b4b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4c2:	2300      	movs	r3, #0
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3710      	adds	r7, #16
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d101      	bne.n	800b4e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b4e0:	2302      	movs	r3, #2
 800b4e2:	e02d      	b.n	800b540 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2224      	movs	r2, #36	@ 0x24
 800b4f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	681a      	ldr	r2, [r3, #0]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f022 0201 	bic.w	r2, r2, #1
 800b50a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	689b      	ldr	r3, [r3, #8]
 800b512:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	683a      	ldr	r2, [r7, #0]
 800b51c:	430a      	orrs	r2, r1
 800b51e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f811 	bl	800b548 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2220      	movs	r2, #32
 800b532:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	2200      	movs	r2, #0
 800b53a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b53e:	2300      	movs	r3, #0
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b554:	2b00      	cmp	r3, #0
 800b556:	d108      	bne.n	800b56a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b568:	e031      	b.n	800b5ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b56a:	2310      	movs	r3, #16
 800b56c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b56e:	2310      	movs	r3, #16
 800b570:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	689b      	ldr	r3, [r3, #8]
 800b578:	0e5b      	lsrs	r3, r3, #25
 800b57a:	b2db      	uxtb	r3, r3
 800b57c:	f003 0307 	and.w	r3, r3, #7
 800b580:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	689b      	ldr	r3, [r3, #8]
 800b588:	0f5b      	lsrs	r3, r3, #29
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	f003 0307 	and.w	r3, r3, #7
 800b590:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	7b3a      	ldrb	r2, [r7, #12]
 800b596:	4911      	ldr	r1, [pc, #68]	@ (800b5dc <UARTEx_SetNbDataToProcess+0x94>)
 800b598:	5c8a      	ldrb	r2, [r1, r2]
 800b59a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b59e:	7b3a      	ldrb	r2, [r7, #12]
 800b5a0:	490f      	ldr	r1, [pc, #60]	@ (800b5e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b5a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b5a4:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5a8:	b29a      	uxth	r2, r3
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	7b7a      	ldrb	r2, [r7, #13]
 800b5b4:	4909      	ldr	r1, [pc, #36]	@ (800b5dc <UARTEx_SetNbDataToProcess+0x94>)
 800b5b6:	5c8a      	ldrb	r2, [r1, r2]
 800b5b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b5bc:	7b7a      	ldrb	r2, [r7, #13]
 800b5be:	4908      	ldr	r1, [pc, #32]	@ (800b5e0 <UARTEx_SetNbDataToProcess+0x98>)
 800b5c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b5c2:	fb93 f3f2 	sdiv	r3, r3, r2
 800b5c6:	b29a      	uxth	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b5ce:	bf00      	nop
 800b5d0:	3714      	adds	r7, #20
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr
 800b5da:	bf00      	nop
 800b5dc:	0800fb5c 	.word	0x0800fb5c
 800b5e0:	0800fb64 	.word	0x0800fb64

0800b5e4 <__cvt>:
 800b5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5e6:	ed2d 8b02 	vpush	{d8}
 800b5ea:	eeb0 8b40 	vmov.f64	d8, d0
 800b5ee:	b085      	sub	sp, #20
 800b5f0:	4617      	mov	r7, r2
 800b5f2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b5f4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b5f6:	ee18 2a90 	vmov	r2, s17
 800b5fa:	f025 0520 	bic.w	r5, r5, #32
 800b5fe:	2a00      	cmp	r2, #0
 800b600:	bfb6      	itet	lt
 800b602:	222d      	movlt	r2, #45	@ 0x2d
 800b604:	2200      	movge	r2, #0
 800b606:	eeb1 8b40 	vneglt.f64	d8, d0
 800b60a:	2d46      	cmp	r5, #70	@ 0x46
 800b60c:	460c      	mov	r4, r1
 800b60e:	701a      	strb	r2, [r3, #0]
 800b610:	d004      	beq.n	800b61c <__cvt+0x38>
 800b612:	2d45      	cmp	r5, #69	@ 0x45
 800b614:	d100      	bne.n	800b618 <__cvt+0x34>
 800b616:	3401      	adds	r4, #1
 800b618:	2102      	movs	r1, #2
 800b61a:	e000      	b.n	800b61e <__cvt+0x3a>
 800b61c:	2103      	movs	r1, #3
 800b61e:	ab03      	add	r3, sp, #12
 800b620:	9301      	str	r3, [sp, #4]
 800b622:	ab02      	add	r3, sp, #8
 800b624:	9300      	str	r3, [sp, #0]
 800b626:	4622      	mov	r2, r4
 800b628:	4633      	mov	r3, r6
 800b62a:	eeb0 0b48 	vmov.f64	d0, d8
 800b62e:	f001 f84f 	bl	800c6d0 <_dtoa_r>
 800b632:	2d47      	cmp	r5, #71	@ 0x47
 800b634:	d114      	bne.n	800b660 <__cvt+0x7c>
 800b636:	07fb      	lsls	r3, r7, #31
 800b638:	d50a      	bpl.n	800b650 <__cvt+0x6c>
 800b63a:	1902      	adds	r2, r0, r4
 800b63c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b644:	bf08      	it	eq
 800b646:	9203      	streq	r2, [sp, #12]
 800b648:	2130      	movs	r1, #48	@ 0x30
 800b64a:	9b03      	ldr	r3, [sp, #12]
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d319      	bcc.n	800b684 <__cvt+0xa0>
 800b650:	9b03      	ldr	r3, [sp, #12]
 800b652:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b654:	1a1b      	subs	r3, r3, r0
 800b656:	6013      	str	r3, [r2, #0]
 800b658:	b005      	add	sp, #20
 800b65a:	ecbd 8b02 	vpop	{d8}
 800b65e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b660:	2d46      	cmp	r5, #70	@ 0x46
 800b662:	eb00 0204 	add.w	r2, r0, r4
 800b666:	d1e9      	bne.n	800b63c <__cvt+0x58>
 800b668:	7803      	ldrb	r3, [r0, #0]
 800b66a:	2b30      	cmp	r3, #48	@ 0x30
 800b66c:	d107      	bne.n	800b67e <__cvt+0x9a>
 800b66e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b676:	bf1c      	itt	ne
 800b678:	f1c4 0401 	rsbne	r4, r4, #1
 800b67c:	6034      	strne	r4, [r6, #0]
 800b67e:	6833      	ldr	r3, [r6, #0]
 800b680:	441a      	add	r2, r3
 800b682:	e7db      	b.n	800b63c <__cvt+0x58>
 800b684:	1c5c      	adds	r4, r3, #1
 800b686:	9403      	str	r4, [sp, #12]
 800b688:	7019      	strb	r1, [r3, #0]
 800b68a:	e7de      	b.n	800b64a <__cvt+0x66>

0800b68c <__exponent>:
 800b68c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b68e:	2900      	cmp	r1, #0
 800b690:	bfba      	itte	lt
 800b692:	4249      	neglt	r1, r1
 800b694:	232d      	movlt	r3, #45	@ 0x2d
 800b696:	232b      	movge	r3, #43	@ 0x2b
 800b698:	2909      	cmp	r1, #9
 800b69a:	7002      	strb	r2, [r0, #0]
 800b69c:	7043      	strb	r3, [r0, #1]
 800b69e:	dd29      	ble.n	800b6f4 <__exponent+0x68>
 800b6a0:	f10d 0307 	add.w	r3, sp, #7
 800b6a4:	461d      	mov	r5, r3
 800b6a6:	270a      	movs	r7, #10
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	fbb1 f6f7 	udiv	r6, r1, r7
 800b6ae:	fb07 1416 	mls	r4, r7, r6, r1
 800b6b2:	3430      	adds	r4, #48	@ 0x30
 800b6b4:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	2c63      	cmp	r4, #99	@ 0x63
 800b6bc:	f103 33ff 	add.w	r3, r3, #4294967295
 800b6c0:	4631      	mov	r1, r6
 800b6c2:	dcf1      	bgt.n	800b6a8 <__exponent+0x1c>
 800b6c4:	3130      	adds	r1, #48	@ 0x30
 800b6c6:	1e94      	subs	r4, r2, #2
 800b6c8:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b6cc:	1c41      	adds	r1, r0, #1
 800b6ce:	4623      	mov	r3, r4
 800b6d0:	42ab      	cmp	r3, r5
 800b6d2:	d30a      	bcc.n	800b6ea <__exponent+0x5e>
 800b6d4:	f10d 0309 	add.w	r3, sp, #9
 800b6d8:	1a9b      	subs	r3, r3, r2
 800b6da:	42ac      	cmp	r4, r5
 800b6dc:	bf88      	it	hi
 800b6de:	2300      	movhi	r3, #0
 800b6e0:	3302      	adds	r3, #2
 800b6e2:	4403      	add	r3, r0
 800b6e4:	1a18      	subs	r0, r3, r0
 800b6e6:	b003      	add	sp, #12
 800b6e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ea:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b6ee:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b6f2:	e7ed      	b.n	800b6d0 <__exponent+0x44>
 800b6f4:	2330      	movs	r3, #48	@ 0x30
 800b6f6:	3130      	adds	r1, #48	@ 0x30
 800b6f8:	7083      	strb	r3, [r0, #2]
 800b6fa:	70c1      	strb	r1, [r0, #3]
 800b6fc:	1d03      	adds	r3, r0, #4
 800b6fe:	e7f1      	b.n	800b6e4 <__exponent+0x58>

0800b700 <_printf_float>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	b08d      	sub	sp, #52	@ 0x34
 800b706:	460c      	mov	r4, r1
 800b708:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b70c:	4616      	mov	r6, r2
 800b70e:	461f      	mov	r7, r3
 800b710:	4605      	mov	r5, r0
 800b712:	f000 fed7 	bl	800c4c4 <_localeconv_r>
 800b716:	f8d0 b000 	ldr.w	fp, [r0]
 800b71a:	4658      	mov	r0, fp
 800b71c:	f7f4 fe30 	bl	8000380 <strlen>
 800b720:	2300      	movs	r3, #0
 800b722:	930a      	str	r3, [sp, #40]	@ 0x28
 800b724:	f8d8 3000 	ldr.w	r3, [r8]
 800b728:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b72c:	6822      	ldr	r2, [r4, #0]
 800b72e:	9005      	str	r0, [sp, #20]
 800b730:	3307      	adds	r3, #7
 800b732:	f023 0307 	bic.w	r3, r3, #7
 800b736:	f103 0108 	add.w	r1, r3, #8
 800b73a:	f8c8 1000 	str.w	r1, [r8]
 800b73e:	ed93 0b00 	vldr	d0, [r3]
 800b742:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800b9a0 <_printf_float+0x2a0>
 800b746:	eeb0 7bc0 	vabs.f64	d7, d0
 800b74a:	eeb4 7b46 	vcmp.f64	d7, d6
 800b74e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b752:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800b756:	dd24      	ble.n	800b7a2 <_printf_float+0xa2>
 800b758:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b75c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b760:	d502      	bpl.n	800b768 <_printf_float+0x68>
 800b762:	232d      	movs	r3, #45	@ 0x2d
 800b764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b768:	498f      	ldr	r1, [pc, #572]	@ (800b9a8 <_printf_float+0x2a8>)
 800b76a:	4b90      	ldr	r3, [pc, #576]	@ (800b9ac <_printf_float+0x2ac>)
 800b76c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800b770:	bf94      	ite	ls
 800b772:	4688      	movls	r8, r1
 800b774:	4698      	movhi	r8, r3
 800b776:	f022 0204 	bic.w	r2, r2, #4
 800b77a:	2303      	movs	r3, #3
 800b77c:	6123      	str	r3, [r4, #16]
 800b77e:	6022      	str	r2, [r4, #0]
 800b780:	f04f 0a00 	mov.w	sl, #0
 800b784:	9700      	str	r7, [sp, #0]
 800b786:	4633      	mov	r3, r6
 800b788:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b78a:	4621      	mov	r1, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	f000 f9d1 	bl	800bb34 <_printf_common>
 800b792:	3001      	adds	r0, #1
 800b794:	f040 8089 	bne.w	800b8aa <_printf_float+0x1aa>
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	b00d      	add	sp, #52	@ 0x34
 800b79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a2:	eeb4 0b40 	vcmp.f64	d0, d0
 800b7a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7aa:	d709      	bvc.n	800b7c0 <_printf_float+0xc0>
 800b7ac:	ee10 3a90 	vmov	r3, s1
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	bfbc      	itt	lt
 800b7b4:	232d      	movlt	r3, #45	@ 0x2d
 800b7b6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b7ba:	497d      	ldr	r1, [pc, #500]	@ (800b9b0 <_printf_float+0x2b0>)
 800b7bc:	4b7d      	ldr	r3, [pc, #500]	@ (800b9b4 <_printf_float+0x2b4>)
 800b7be:	e7d5      	b.n	800b76c <_printf_float+0x6c>
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	1c59      	adds	r1, r3, #1
 800b7c4:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800b7c8:	d139      	bne.n	800b83e <_printf_float+0x13e>
 800b7ca:	2306      	movs	r3, #6
 800b7cc:	6063      	str	r3, [r4, #4]
 800b7ce:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	6022      	str	r2, [r4, #0]
 800b7d6:	9303      	str	r3, [sp, #12]
 800b7d8:	ab0a      	add	r3, sp, #40	@ 0x28
 800b7da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b7de:	ab09      	add	r3, sp, #36	@ 0x24
 800b7e0:	9300      	str	r3, [sp, #0]
 800b7e2:	6861      	ldr	r1, [r4, #4]
 800b7e4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b7e8:	4628      	mov	r0, r5
 800b7ea:	f7ff fefb 	bl	800b5e4 <__cvt>
 800b7ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b7f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b7f4:	4680      	mov	r8, r0
 800b7f6:	d129      	bne.n	800b84c <_printf_float+0x14c>
 800b7f8:	1cc8      	adds	r0, r1, #3
 800b7fa:	db02      	blt.n	800b802 <_printf_float+0x102>
 800b7fc:	6863      	ldr	r3, [r4, #4]
 800b7fe:	4299      	cmp	r1, r3
 800b800:	dd41      	ble.n	800b886 <_printf_float+0x186>
 800b802:	f1a9 0902 	sub.w	r9, r9, #2
 800b806:	fa5f f989 	uxtb.w	r9, r9
 800b80a:	3901      	subs	r1, #1
 800b80c:	464a      	mov	r2, r9
 800b80e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b812:	9109      	str	r1, [sp, #36]	@ 0x24
 800b814:	f7ff ff3a 	bl	800b68c <__exponent>
 800b818:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b81a:	1813      	adds	r3, r2, r0
 800b81c:	2a01      	cmp	r2, #1
 800b81e:	4682      	mov	sl, r0
 800b820:	6123      	str	r3, [r4, #16]
 800b822:	dc02      	bgt.n	800b82a <_printf_float+0x12a>
 800b824:	6822      	ldr	r2, [r4, #0]
 800b826:	07d2      	lsls	r2, r2, #31
 800b828:	d501      	bpl.n	800b82e <_printf_float+0x12e>
 800b82a:	3301      	adds	r3, #1
 800b82c:	6123      	str	r3, [r4, #16]
 800b82e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0a6      	beq.n	800b784 <_printf_float+0x84>
 800b836:	232d      	movs	r3, #45	@ 0x2d
 800b838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b83c:	e7a2      	b.n	800b784 <_printf_float+0x84>
 800b83e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b842:	d1c4      	bne.n	800b7ce <_printf_float+0xce>
 800b844:	2b00      	cmp	r3, #0
 800b846:	d1c2      	bne.n	800b7ce <_printf_float+0xce>
 800b848:	2301      	movs	r3, #1
 800b84a:	e7bf      	b.n	800b7cc <_printf_float+0xcc>
 800b84c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b850:	d9db      	bls.n	800b80a <_printf_float+0x10a>
 800b852:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800b856:	d118      	bne.n	800b88a <_printf_float+0x18a>
 800b858:	2900      	cmp	r1, #0
 800b85a:	6863      	ldr	r3, [r4, #4]
 800b85c:	dd0b      	ble.n	800b876 <_printf_float+0x176>
 800b85e:	6121      	str	r1, [r4, #16]
 800b860:	b913      	cbnz	r3, 800b868 <_printf_float+0x168>
 800b862:	6822      	ldr	r2, [r4, #0]
 800b864:	07d0      	lsls	r0, r2, #31
 800b866:	d502      	bpl.n	800b86e <_printf_float+0x16e>
 800b868:	3301      	adds	r3, #1
 800b86a:	440b      	add	r3, r1
 800b86c:	6123      	str	r3, [r4, #16]
 800b86e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b870:	f04f 0a00 	mov.w	sl, #0
 800b874:	e7db      	b.n	800b82e <_printf_float+0x12e>
 800b876:	b913      	cbnz	r3, 800b87e <_printf_float+0x17e>
 800b878:	6822      	ldr	r2, [r4, #0]
 800b87a:	07d2      	lsls	r2, r2, #31
 800b87c:	d501      	bpl.n	800b882 <_printf_float+0x182>
 800b87e:	3302      	adds	r3, #2
 800b880:	e7f4      	b.n	800b86c <_printf_float+0x16c>
 800b882:	2301      	movs	r3, #1
 800b884:	e7f2      	b.n	800b86c <_printf_float+0x16c>
 800b886:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800b88a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b88c:	4299      	cmp	r1, r3
 800b88e:	db05      	blt.n	800b89c <_printf_float+0x19c>
 800b890:	6823      	ldr	r3, [r4, #0]
 800b892:	6121      	str	r1, [r4, #16]
 800b894:	07d8      	lsls	r0, r3, #31
 800b896:	d5ea      	bpl.n	800b86e <_printf_float+0x16e>
 800b898:	1c4b      	adds	r3, r1, #1
 800b89a:	e7e7      	b.n	800b86c <_printf_float+0x16c>
 800b89c:	2900      	cmp	r1, #0
 800b89e:	bfd4      	ite	le
 800b8a0:	f1c1 0202 	rsble	r2, r1, #2
 800b8a4:	2201      	movgt	r2, #1
 800b8a6:	4413      	add	r3, r2
 800b8a8:	e7e0      	b.n	800b86c <_printf_float+0x16c>
 800b8aa:	6823      	ldr	r3, [r4, #0]
 800b8ac:	055a      	lsls	r2, r3, #21
 800b8ae:	d407      	bmi.n	800b8c0 <_printf_float+0x1c0>
 800b8b0:	6923      	ldr	r3, [r4, #16]
 800b8b2:	4642      	mov	r2, r8
 800b8b4:	4631      	mov	r1, r6
 800b8b6:	4628      	mov	r0, r5
 800b8b8:	47b8      	blx	r7
 800b8ba:	3001      	adds	r0, #1
 800b8bc:	d12a      	bne.n	800b914 <_printf_float+0x214>
 800b8be:	e76b      	b.n	800b798 <_printf_float+0x98>
 800b8c0:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800b8c4:	f240 80e0 	bls.w	800ba88 <_printf_float+0x388>
 800b8c8:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800b8cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b8d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d4:	d133      	bne.n	800b93e <_printf_float+0x23e>
 800b8d6:	4a38      	ldr	r2, [pc, #224]	@ (800b9b8 <_printf_float+0x2b8>)
 800b8d8:	2301      	movs	r3, #1
 800b8da:	4631      	mov	r1, r6
 800b8dc:	4628      	mov	r0, r5
 800b8de:	47b8      	blx	r7
 800b8e0:	3001      	adds	r0, #1
 800b8e2:	f43f af59 	beq.w	800b798 <_printf_float+0x98>
 800b8e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b8ea:	4543      	cmp	r3, r8
 800b8ec:	db02      	blt.n	800b8f4 <_printf_float+0x1f4>
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	07d8      	lsls	r0, r3, #31
 800b8f2:	d50f      	bpl.n	800b914 <_printf_float+0x214>
 800b8f4:	9b05      	ldr	r3, [sp, #20]
 800b8f6:	465a      	mov	r2, fp
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	4628      	mov	r0, r5
 800b8fc:	47b8      	blx	r7
 800b8fe:	3001      	adds	r0, #1
 800b900:	f43f af4a 	beq.w	800b798 <_printf_float+0x98>
 800b904:	f04f 0900 	mov.w	r9, #0
 800b908:	f108 38ff 	add.w	r8, r8, #4294967295
 800b90c:	f104 0a1a 	add.w	sl, r4, #26
 800b910:	45c8      	cmp	r8, r9
 800b912:	dc09      	bgt.n	800b928 <_printf_float+0x228>
 800b914:	6823      	ldr	r3, [r4, #0]
 800b916:	079b      	lsls	r3, r3, #30
 800b918:	f100 8107 	bmi.w	800bb2a <_printf_float+0x42a>
 800b91c:	68e0      	ldr	r0, [r4, #12]
 800b91e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b920:	4298      	cmp	r0, r3
 800b922:	bfb8      	it	lt
 800b924:	4618      	movlt	r0, r3
 800b926:	e739      	b.n	800b79c <_printf_float+0x9c>
 800b928:	2301      	movs	r3, #1
 800b92a:	4652      	mov	r2, sl
 800b92c:	4631      	mov	r1, r6
 800b92e:	4628      	mov	r0, r5
 800b930:	47b8      	blx	r7
 800b932:	3001      	adds	r0, #1
 800b934:	f43f af30 	beq.w	800b798 <_printf_float+0x98>
 800b938:	f109 0901 	add.w	r9, r9, #1
 800b93c:	e7e8      	b.n	800b910 <_printf_float+0x210>
 800b93e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b940:	2b00      	cmp	r3, #0
 800b942:	dc3b      	bgt.n	800b9bc <_printf_float+0x2bc>
 800b944:	4a1c      	ldr	r2, [pc, #112]	@ (800b9b8 <_printf_float+0x2b8>)
 800b946:	2301      	movs	r3, #1
 800b948:	4631      	mov	r1, r6
 800b94a:	4628      	mov	r0, r5
 800b94c:	47b8      	blx	r7
 800b94e:	3001      	adds	r0, #1
 800b950:	f43f af22 	beq.w	800b798 <_printf_float+0x98>
 800b954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b958:	ea59 0303 	orrs.w	r3, r9, r3
 800b95c:	d102      	bne.n	800b964 <_printf_float+0x264>
 800b95e:	6823      	ldr	r3, [r4, #0]
 800b960:	07d9      	lsls	r1, r3, #31
 800b962:	d5d7      	bpl.n	800b914 <_printf_float+0x214>
 800b964:	9b05      	ldr	r3, [sp, #20]
 800b966:	465a      	mov	r2, fp
 800b968:	4631      	mov	r1, r6
 800b96a:	4628      	mov	r0, r5
 800b96c:	47b8      	blx	r7
 800b96e:	3001      	adds	r0, #1
 800b970:	f43f af12 	beq.w	800b798 <_printf_float+0x98>
 800b974:	f04f 0a00 	mov.w	sl, #0
 800b978:	f104 0b1a 	add.w	fp, r4, #26
 800b97c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b97e:	425b      	negs	r3, r3
 800b980:	4553      	cmp	r3, sl
 800b982:	dc01      	bgt.n	800b988 <_printf_float+0x288>
 800b984:	464b      	mov	r3, r9
 800b986:	e794      	b.n	800b8b2 <_printf_float+0x1b2>
 800b988:	2301      	movs	r3, #1
 800b98a:	465a      	mov	r2, fp
 800b98c:	4631      	mov	r1, r6
 800b98e:	4628      	mov	r0, r5
 800b990:	47b8      	blx	r7
 800b992:	3001      	adds	r0, #1
 800b994:	f43f af00 	beq.w	800b798 <_printf_float+0x98>
 800b998:	f10a 0a01 	add.w	sl, sl, #1
 800b99c:	e7ee      	b.n	800b97c <_printf_float+0x27c>
 800b99e:	bf00      	nop
 800b9a0:	ffffffff 	.word	0xffffffff
 800b9a4:	7fefffff 	.word	0x7fefffff
 800b9a8:	0800fb6c 	.word	0x0800fb6c
 800b9ac:	0800fb70 	.word	0x0800fb70
 800b9b0:	0800fb74 	.word	0x0800fb74
 800b9b4:	0800fb78 	.word	0x0800fb78
 800b9b8:	0800fb7c 	.word	0x0800fb7c
 800b9bc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b9be:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b9c2:	4553      	cmp	r3, sl
 800b9c4:	bfa8      	it	ge
 800b9c6:	4653      	movge	r3, sl
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	4699      	mov	r9, r3
 800b9cc:	dc37      	bgt.n	800ba3e <_printf_float+0x33e>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	9307      	str	r3, [sp, #28]
 800b9d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b9d6:	f104 021a 	add.w	r2, r4, #26
 800b9da:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b9dc:	9907      	ldr	r1, [sp, #28]
 800b9de:	9306      	str	r3, [sp, #24]
 800b9e0:	eba3 0309 	sub.w	r3, r3, r9
 800b9e4:	428b      	cmp	r3, r1
 800b9e6:	dc31      	bgt.n	800ba4c <_printf_float+0x34c>
 800b9e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9ea:	459a      	cmp	sl, r3
 800b9ec:	dc3b      	bgt.n	800ba66 <_printf_float+0x366>
 800b9ee:	6823      	ldr	r3, [r4, #0]
 800b9f0:	07da      	lsls	r2, r3, #31
 800b9f2:	d438      	bmi.n	800ba66 <_printf_float+0x366>
 800b9f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9f6:	ebaa 0903 	sub.w	r9, sl, r3
 800b9fa:	9b06      	ldr	r3, [sp, #24]
 800b9fc:	ebaa 0303 	sub.w	r3, sl, r3
 800ba00:	4599      	cmp	r9, r3
 800ba02:	bfa8      	it	ge
 800ba04:	4699      	movge	r9, r3
 800ba06:	f1b9 0f00 	cmp.w	r9, #0
 800ba0a:	dc34      	bgt.n	800ba76 <_printf_float+0x376>
 800ba0c:	f04f 0800 	mov.w	r8, #0
 800ba10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ba14:	f104 0b1a 	add.w	fp, r4, #26
 800ba18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba1a:	ebaa 0303 	sub.w	r3, sl, r3
 800ba1e:	eba3 0309 	sub.w	r3, r3, r9
 800ba22:	4543      	cmp	r3, r8
 800ba24:	f77f af76 	ble.w	800b914 <_printf_float+0x214>
 800ba28:	2301      	movs	r3, #1
 800ba2a:	465a      	mov	r2, fp
 800ba2c:	4631      	mov	r1, r6
 800ba2e:	4628      	mov	r0, r5
 800ba30:	47b8      	blx	r7
 800ba32:	3001      	adds	r0, #1
 800ba34:	f43f aeb0 	beq.w	800b798 <_printf_float+0x98>
 800ba38:	f108 0801 	add.w	r8, r8, #1
 800ba3c:	e7ec      	b.n	800ba18 <_printf_float+0x318>
 800ba3e:	4642      	mov	r2, r8
 800ba40:	4631      	mov	r1, r6
 800ba42:	4628      	mov	r0, r5
 800ba44:	47b8      	blx	r7
 800ba46:	3001      	adds	r0, #1
 800ba48:	d1c1      	bne.n	800b9ce <_printf_float+0x2ce>
 800ba4a:	e6a5      	b.n	800b798 <_printf_float+0x98>
 800ba4c:	2301      	movs	r3, #1
 800ba4e:	4631      	mov	r1, r6
 800ba50:	4628      	mov	r0, r5
 800ba52:	9206      	str	r2, [sp, #24]
 800ba54:	47b8      	blx	r7
 800ba56:	3001      	adds	r0, #1
 800ba58:	f43f ae9e 	beq.w	800b798 <_printf_float+0x98>
 800ba5c:	9b07      	ldr	r3, [sp, #28]
 800ba5e:	9a06      	ldr	r2, [sp, #24]
 800ba60:	3301      	adds	r3, #1
 800ba62:	9307      	str	r3, [sp, #28]
 800ba64:	e7b9      	b.n	800b9da <_printf_float+0x2da>
 800ba66:	9b05      	ldr	r3, [sp, #20]
 800ba68:	465a      	mov	r2, fp
 800ba6a:	4631      	mov	r1, r6
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	47b8      	blx	r7
 800ba70:	3001      	adds	r0, #1
 800ba72:	d1bf      	bne.n	800b9f4 <_printf_float+0x2f4>
 800ba74:	e690      	b.n	800b798 <_printf_float+0x98>
 800ba76:	9a06      	ldr	r2, [sp, #24]
 800ba78:	464b      	mov	r3, r9
 800ba7a:	4442      	add	r2, r8
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4628      	mov	r0, r5
 800ba80:	47b8      	blx	r7
 800ba82:	3001      	adds	r0, #1
 800ba84:	d1c2      	bne.n	800ba0c <_printf_float+0x30c>
 800ba86:	e687      	b.n	800b798 <_printf_float+0x98>
 800ba88:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800ba8c:	f1b9 0f01 	cmp.w	r9, #1
 800ba90:	dc01      	bgt.n	800ba96 <_printf_float+0x396>
 800ba92:	07db      	lsls	r3, r3, #31
 800ba94:	d536      	bpl.n	800bb04 <_printf_float+0x404>
 800ba96:	2301      	movs	r3, #1
 800ba98:	4642      	mov	r2, r8
 800ba9a:	4631      	mov	r1, r6
 800ba9c:	4628      	mov	r0, r5
 800ba9e:	47b8      	blx	r7
 800baa0:	3001      	adds	r0, #1
 800baa2:	f43f ae79 	beq.w	800b798 <_printf_float+0x98>
 800baa6:	9b05      	ldr	r3, [sp, #20]
 800baa8:	465a      	mov	r2, fp
 800baaa:	4631      	mov	r1, r6
 800baac:	4628      	mov	r0, r5
 800baae:	47b8      	blx	r7
 800bab0:	3001      	adds	r0, #1
 800bab2:	f43f ae71 	beq.w	800b798 <_printf_float+0x98>
 800bab6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800baba:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800babe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bac2:	f109 39ff 	add.w	r9, r9, #4294967295
 800bac6:	d018      	beq.n	800bafa <_printf_float+0x3fa>
 800bac8:	464b      	mov	r3, r9
 800baca:	f108 0201 	add.w	r2, r8, #1
 800bace:	4631      	mov	r1, r6
 800bad0:	4628      	mov	r0, r5
 800bad2:	47b8      	blx	r7
 800bad4:	3001      	adds	r0, #1
 800bad6:	d10c      	bne.n	800baf2 <_printf_float+0x3f2>
 800bad8:	e65e      	b.n	800b798 <_printf_float+0x98>
 800bada:	2301      	movs	r3, #1
 800badc:	465a      	mov	r2, fp
 800bade:	4631      	mov	r1, r6
 800bae0:	4628      	mov	r0, r5
 800bae2:	47b8      	blx	r7
 800bae4:	3001      	adds	r0, #1
 800bae6:	f43f ae57 	beq.w	800b798 <_printf_float+0x98>
 800baea:	f108 0801 	add.w	r8, r8, #1
 800baee:	45c8      	cmp	r8, r9
 800baf0:	dbf3      	blt.n	800bada <_printf_float+0x3da>
 800baf2:	4653      	mov	r3, sl
 800baf4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800baf8:	e6dc      	b.n	800b8b4 <_printf_float+0x1b4>
 800bafa:	f04f 0800 	mov.w	r8, #0
 800bafe:	f104 0b1a 	add.w	fp, r4, #26
 800bb02:	e7f4      	b.n	800baee <_printf_float+0x3ee>
 800bb04:	2301      	movs	r3, #1
 800bb06:	4642      	mov	r2, r8
 800bb08:	e7e1      	b.n	800bace <_printf_float+0x3ce>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	464a      	mov	r2, r9
 800bb0e:	4631      	mov	r1, r6
 800bb10:	4628      	mov	r0, r5
 800bb12:	47b8      	blx	r7
 800bb14:	3001      	adds	r0, #1
 800bb16:	f43f ae3f 	beq.w	800b798 <_printf_float+0x98>
 800bb1a:	f108 0801 	add.w	r8, r8, #1
 800bb1e:	68e3      	ldr	r3, [r4, #12]
 800bb20:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800bb22:	1a5b      	subs	r3, r3, r1
 800bb24:	4543      	cmp	r3, r8
 800bb26:	dcf0      	bgt.n	800bb0a <_printf_float+0x40a>
 800bb28:	e6f8      	b.n	800b91c <_printf_float+0x21c>
 800bb2a:	f04f 0800 	mov.w	r8, #0
 800bb2e:	f104 0919 	add.w	r9, r4, #25
 800bb32:	e7f4      	b.n	800bb1e <_printf_float+0x41e>

0800bb34 <_printf_common>:
 800bb34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	4616      	mov	r6, r2
 800bb3a:	4698      	mov	r8, r3
 800bb3c:	688a      	ldr	r2, [r1, #8]
 800bb3e:	690b      	ldr	r3, [r1, #16]
 800bb40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb44:	4293      	cmp	r3, r2
 800bb46:	bfb8      	it	lt
 800bb48:	4613      	movlt	r3, r2
 800bb4a:	6033      	str	r3, [r6, #0]
 800bb4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb50:	4607      	mov	r7, r0
 800bb52:	460c      	mov	r4, r1
 800bb54:	b10a      	cbz	r2, 800bb5a <_printf_common+0x26>
 800bb56:	3301      	adds	r3, #1
 800bb58:	6033      	str	r3, [r6, #0]
 800bb5a:	6823      	ldr	r3, [r4, #0]
 800bb5c:	0699      	lsls	r1, r3, #26
 800bb5e:	bf42      	ittt	mi
 800bb60:	6833      	ldrmi	r3, [r6, #0]
 800bb62:	3302      	addmi	r3, #2
 800bb64:	6033      	strmi	r3, [r6, #0]
 800bb66:	6825      	ldr	r5, [r4, #0]
 800bb68:	f015 0506 	ands.w	r5, r5, #6
 800bb6c:	d106      	bne.n	800bb7c <_printf_common+0x48>
 800bb6e:	f104 0a19 	add.w	sl, r4, #25
 800bb72:	68e3      	ldr	r3, [r4, #12]
 800bb74:	6832      	ldr	r2, [r6, #0]
 800bb76:	1a9b      	subs	r3, r3, r2
 800bb78:	42ab      	cmp	r3, r5
 800bb7a:	dc26      	bgt.n	800bbca <_printf_common+0x96>
 800bb7c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb80:	6822      	ldr	r2, [r4, #0]
 800bb82:	3b00      	subs	r3, #0
 800bb84:	bf18      	it	ne
 800bb86:	2301      	movne	r3, #1
 800bb88:	0692      	lsls	r2, r2, #26
 800bb8a:	d42b      	bmi.n	800bbe4 <_printf_common+0xb0>
 800bb8c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb90:	4641      	mov	r1, r8
 800bb92:	4638      	mov	r0, r7
 800bb94:	47c8      	blx	r9
 800bb96:	3001      	adds	r0, #1
 800bb98:	d01e      	beq.n	800bbd8 <_printf_common+0xa4>
 800bb9a:	6823      	ldr	r3, [r4, #0]
 800bb9c:	6922      	ldr	r2, [r4, #16]
 800bb9e:	f003 0306 	and.w	r3, r3, #6
 800bba2:	2b04      	cmp	r3, #4
 800bba4:	bf02      	ittt	eq
 800bba6:	68e5      	ldreq	r5, [r4, #12]
 800bba8:	6833      	ldreq	r3, [r6, #0]
 800bbaa:	1aed      	subeq	r5, r5, r3
 800bbac:	68a3      	ldr	r3, [r4, #8]
 800bbae:	bf0c      	ite	eq
 800bbb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbb4:	2500      	movne	r5, #0
 800bbb6:	4293      	cmp	r3, r2
 800bbb8:	bfc4      	itt	gt
 800bbba:	1a9b      	subgt	r3, r3, r2
 800bbbc:	18ed      	addgt	r5, r5, r3
 800bbbe:	2600      	movs	r6, #0
 800bbc0:	341a      	adds	r4, #26
 800bbc2:	42b5      	cmp	r5, r6
 800bbc4:	d11a      	bne.n	800bbfc <_printf_common+0xc8>
 800bbc6:	2000      	movs	r0, #0
 800bbc8:	e008      	b.n	800bbdc <_printf_common+0xa8>
 800bbca:	2301      	movs	r3, #1
 800bbcc:	4652      	mov	r2, sl
 800bbce:	4641      	mov	r1, r8
 800bbd0:	4638      	mov	r0, r7
 800bbd2:	47c8      	blx	r9
 800bbd4:	3001      	adds	r0, #1
 800bbd6:	d103      	bne.n	800bbe0 <_printf_common+0xac>
 800bbd8:	f04f 30ff 	mov.w	r0, #4294967295
 800bbdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	e7c6      	b.n	800bb72 <_printf_common+0x3e>
 800bbe4:	18e1      	adds	r1, r4, r3
 800bbe6:	1c5a      	adds	r2, r3, #1
 800bbe8:	2030      	movs	r0, #48	@ 0x30
 800bbea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bbee:	4422      	add	r2, r4
 800bbf0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bbf4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bbf8:	3302      	adds	r3, #2
 800bbfa:	e7c7      	b.n	800bb8c <_printf_common+0x58>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4622      	mov	r2, r4
 800bc00:	4641      	mov	r1, r8
 800bc02:	4638      	mov	r0, r7
 800bc04:	47c8      	blx	r9
 800bc06:	3001      	adds	r0, #1
 800bc08:	d0e6      	beq.n	800bbd8 <_printf_common+0xa4>
 800bc0a:	3601      	adds	r6, #1
 800bc0c:	e7d9      	b.n	800bbc2 <_printf_common+0x8e>
	...

0800bc10 <_printf_i>:
 800bc10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc14:	7e0f      	ldrb	r7, [r1, #24]
 800bc16:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc18:	2f78      	cmp	r7, #120	@ 0x78
 800bc1a:	4691      	mov	r9, r2
 800bc1c:	4680      	mov	r8, r0
 800bc1e:	460c      	mov	r4, r1
 800bc20:	469a      	mov	sl, r3
 800bc22:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc26:	d807      	bhi.n	800bc38 <_printf_i+0x28>
 800bc28:	2f62      	cmp	r7, #98	@ 0x62
 800bc2a:	d80a      	bhi.n	800bc42 <_printf_i+0x32>
 800bc2c:	2f00      	cmp	r7, #0
 800bc2e:	f000 80d2 	beq.w	800bdd6 <_printf_i+0x1c6>
 800bc32:	2f58      	cmp	r7, #88	@ 0x58
 800bc34:	f000 80b9 	beq.w	800bdaa <_printf_i+0x19a>
 800bc38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc3c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc40:	e03a      	b.n	800bcb8 <_printf_i+0xa8>
 800bc42:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc46:	2b15      	cmp	r3, #21
 800bc48:	d8f6      	bhi.n	800bc38 <_printf_i+0x28>
 800bc4a:	a101      	add	r1, pc, #4	@ (adr r1, 800bc50 <_printf_i+0x40>)
 800bc4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc50:	0800bca9 	.word	0x0800bca9
 800bc54:	0800bcbd 	.word	0x0800bcbd
 800bc58:	0800bc39 	.word	0x0800bc39
 800bc5c:	0800bc39 	.word	0x0800bc39
 800bc60:	0800bc39 	.word	0x0800bc39
 800bc64:	0800bc39 	.word	0x0800bc39
 800bc68:	0800bcbd 	.word	0x0800bcbd
 800bc6c:	0800bc39 	.word	0x0800bc39
 800bc70:	0800bc39 	.word	0x0800bc39
 800bc74:	0800bc39 	.word	0x0800bc39
 800bc78:	0800bc39 	.word	0x0800bc39
 800bc7c:	0800bdbd 	.word	0x0800bdbd
 800bc80:	0800bce7 	.word	0x0800bce7
 800bc84:	0800bd77 	.word	0x0800bd77
 800bc88:	0800bc39 	.word	0x0800bc39
 800bc8c:	0800bc39 	.word	0x0800bc39
 800bc90:	0800bddf 	.word	0x0800bddf
 800bc94:	0800bc39 	.word	0x0800bc39
 800bc98:	0800bce7 	.word	0x0800bce7
 800bc9c:	0800bc39 	.word	0x0800bc39
 800bca0:	0800bc39 	.word	0x0800bc39
 800bca4:	0800bd7f 	.word	0x0800bd7f
 800bca8:	6833      	ldr	r3, [r6, #0]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	6032      	str	r2, [r6, #0]
 800bcb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcb4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcb8:	2301      	movs	r3, #1
 800bcba:	e09d      	b.n	800bdf8 <_printf_i+0x1e8>
 800bcbc:	6833      	ldr	r3, [r6, #0]
 800bcbe:	6820      	ldr	r0, [r4, #0]
 800bcc0:	1d19      	adds	r1, r3, #4
 800bcc2:	6031      	str	r1, [r6, #0]
 800bcc4:	0606      	lsls	r6, r0, #24
 800bcc6:	d501      	bpl.n	800bccc <_printf_i+0xbc>
 800bcc8:	681d      	ldr	r5, [r3, #0]
 800bcca:	e003      	b.n	800bcd4 <_printf_i+0xc4>
 800bccc:	0645      	lsls	r5, r0, #25
 800bcce:	d5fb      	bpl.n	800bcc8 <_printf_i+0xb8>
 800bcd0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bcd4:	2d00      	cmp	r5, #0
 800bcd6:	da03      	bge.n	800bce0 <_printf_i+0xd0>
 800bcd8:	232d      	movs	r3, #45	@ 0x2d
 800bcda:	426d      	negs	r5, r5
 800bcdc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bce0:	4859      	ldr	r0, [pc, #356]	@ (800be48 <_printf_i+0x238>)
 800bce2:	230a      	movs	r3, #10
 800bce4:	e011      	b.n	800bd0a <_printf_i+0xfa>
 800bce6:	6821      	ldr	r1, [r4, #0]
 800bce8:	6833      	ldr	r3, [r6, #0]
 800bcea:	0608      	lsls	r0, r1, #24
 800bcec:	f853 5b04 	ldr.w	r5, [r3], #4
 800bcf0:	d402      	bmi.n	800bcf8 <_printf_i+0xe8>
 800bcf2:	0649      	lsls	r1, r1, #25
 800bcf4:	bf48      	it	mi
 800bcf6:	b2ad      	uxthmi	r5, r5
 800bcf8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bcfa:	4853      	ldr	r0, [pc, #332]	@ (800be48 <_printf_i+0x238>)
 800bcfc:	6033      	str	r3, [r6, #0]
 800bcfe:	bf14      	ite	ne
 800bd00:	230a      	movne	r3, #10
 800bd02:	2308      	moveq	r3, #8
 800bd04:	2100      	movs	r1, #0
 800bd06:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd0a:	6866      	ldr	r6, [r4, #4]
 800bd0c:	60a6      	str	r6, [r4, #8]
 800bd0e:	2e00      	cmp	r6, #0
 800bd10:	bfa2      	ittt	ge
 800bd12:	6821      	ldrge	r1, [r4, #0]
 800bd14:	f021 0104 	bicge.w	r1, r1, #4
 800bd18:	6021      	strge	r1, [r4, #0]
 800bd1a:	b90d      	cbnz	r5, 800bd20 <_printf_i+0x110>
 800bd1c:	2e00      	cmp	r6, #0
 800bd1e:	d04b      	beq.n	800bdb8 <_printf_i+0x1a8>
 800bd20:	4616      	mov	r6, r2
 800bd22:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd26:	fb03 5711 	mls	r7, r3, r1, r5
 800bd2a:	5dc7      	ldrb	r7, [r0, r7]
 800bd2c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd30:	462f      	mov	r7, r5
 800bd32:	42bb      	cmp	r3, r7
 800bd34:	460d      	mov	r5, r1
 800bd36:	d9f4      	bls.n	800bd22 <_printf_i+0x112>
 800bd38:	2b08      	cmp	r3, #8
 800bd3a:	d10b      	bne.n	800bd54 <_printf_i+0x144>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	07df      	lsls	r7, r3, #31
 800bd40:	d508      	bpl.n	800bd54 <_printf_i+0x144>
 800bd42:	6923      	ldr	r3, [r4, #16]
 800bd44:	6861      	ldr	r1, [r4, #4]
 800bd46:	4299      	cmp	r1, r3
 800bd48:	bfde      	ittt	le
 800bd4a:	2330      	movle	r3, #48	@ 0x30
 800bd4c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd50:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd54:	1b92      	subs	r2, r2, r6
 800bd56:	6122      	str	r2, [r4, #16]
 800bd58:	f8cd a000 	str.w	sl, [sp]
 800bd5c:	464b      	mov	r3, r9
 800bd5e:	aa03      	add	r2, sp, #12
 800bd60:	4621      	mov	r1, r4
 800bd62:	4640      	mov	r0, r8
 800bd64:	f7ff fee6 	bl	800bb34 <_printf_common>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	d14a      	bne.n	800be02 <_printf_i+0x1f2>
 800bd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd70:	b004      	add	sp, #16
 800bd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd76:	6823      	ldr	r3, [r4, #0]
 800bd78:	f043 0320 	orr.w	r3, r3, #32
 800bd7c:	6023      	str	r3, [r4, #0]
 800bd7e:	4833      	ldr	r0, [pc, #204]	@ (800be4c <_printf_i+0x23c>)
 800bd80:	2778      	movs	r7, #120	@ 0x78
 800bd82:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd86:	6823      	ldr	r3, [r4, #0]
 800bd88:	6831      	ldr	r1, [r6, #0]
 800bd8a:	061f      	lsls	r7, r3, #24
 800bd8c:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd90:	d402      	bmi.n	800bd98 <_printf_i+0x188>
 800bd92:	065f      	lsls	r7, r3, #25
 800bd94:	bf48      	it	mi
 800bd96:	b2ad      	uxthmi	r5, r5
 800bd98:	6031      	str	r1, [r6, #0]
 800bd9a:	07d9      	lsls	r1, r3, #31
 800bd9c:	bf44      	itt	mi
 800bd9e:	f043 0320 	orrmi.w	r3, r3, #32
 800bda2:	6023      	strmi	r3, [r4, #0]
 800bda4:	b11d      	cbz	r5, 800bdae <_printf_i+0x19e>
 800bda6:	2310      	movs	r3, #16
 800bda8:	e7ac      	b.n	800bd04 <_printf_i+0xf4>
 800bdaa:	4827      	ldr	r0, [pc, #156]	@ (800be48 <_printf_i+0x238>)
 800bdac:	e7e9      	b.n	800bd82 <_printf_i+0x172>
 800bdae:	6823      	ldr	r3, [r4, #0]
 800bdb0:	f023 0320 	bic.w	r3, r3, #32
 800bdb4:	6023      	str	r3, [r4, #0]
 800bdb6:	e7f6      	b.n	800bda6 <_printf_i+0x196>
 800bdb8:	4616      	mov	r6, r2
 800bdba:	e7bd      	b.n	800bd38 <_printf_i+0x128>
 800bdbc:	6833      	ldr	r3, [r6, #0]
 800bdbe:	6825      	ldr	r5, [r4, #0]
 800bdc0:	6961      	ldr	r1, [r4, #20]
 800bdc2:	1d18      	adds	r0, r3, #4
 800bdc4:	6030      	str	r0, [r6, #0]
 800bdc6:	062e      	lsls	r6, r5, #24
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	d501      	bpl.n	800bdd0 <_printf_i+0x1c0>
 800bdcc:	6019      	str	r1, [r3, #0]
 800bdce:	e002      	b.n	800bdd6 <_printf_i+0x1c6>
 800bdd0:	0668      	lsls	r0, r5, #25
 800bdd2:	d5fb      	bpl.n	800bdcc <_printf_i+0x1bc>
 800bdd4:	8019      	strh	r1, [r3, #0]
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	6123      	str	r3, [r4, #16]
 800bdda:	4616      	mov	r6, r2
 800bddc:	e7bc      	b.n	800bd58 <_printf_i+0x148>
 800bdde:	6833      	ldr	r3, [r6, #0]
 800bde0:	1d1a      	adds	r2, r3, #4
 800bde2:	6032      	str	r2, [r6, #0]
 800bde4:	681e      	ldr	r6, [r3, #0]
 800bde6:	6862      	ldr	r2, [r4, #4]
 800bde8:	2100      	movs	r1, #0
 800bdea:	4630      	mov	r0, r6
 800bdec:	f7f4 fa78 	bl	80002e0 <memchr>
 800bdf0:	b108      	cbz	r0, 800bdf6 <_printf_i+0x1e6>
 800bdf2:	1b80      	subs	r0, r0, r6
 800bdf4:	6060      	str	r0, [r4, #4]
 800bdf6:	6863      	ldr	r3, [r4, #4]
 800bdf8:	6123      	str	r3, [r4, #16]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be00:	e7aa      	b.n	800bd58 <_printf_i+0x148>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	4632      	mov	r2, r6
 800be06:	4649      	mov	r1, r9
 800be08:	4640      	mov	r0, r8
 800be0a:	47d0      	blx	sl
 800be0c:	3001      	adds	r0, #1
 800be0e:	d0ad      	beq.n	800bd6c <_printf_i+0x15c>
 800be10:	6823      	ldr	r3, [r4, #0]
 800be12:	079b      	lsls	r3, r3, #30
 800be14:	d413      	bmi.n	800be3e <_printf_i+0x22e>
 800be16:	68e0      	ldr	r0, [r4, #12]
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	4298      	cmp	r0, r3
 800be1c:	bfb8      	it	lt
 800be1e:	4618      	movlt	r0, r3
 800be20:	e7a6      	b.n	800bd70 <_printf_i+0x160>
 800be22:	2301      	movs	r3, #1
 800be24:	4632      	mov	r2, r6
 800be26:	4649      	mov	r1, r9
 800be28:	4640      	mov	r0, r8
 800be2a:	47d0      	blx	sl
 800be2c:	3001      	adds	r0, #1
 800be2e:	d09d      	beq.n	800bd6c <_printf_i+0x15c>
 800be30:	3501      	adds	r5, #1
 800be32:	68e3      	ldr	r3, [r4, #12]
 800be34:	9903      	ldr	r1, [sp, #12]
 800be36:	1a5b      	subs	r3, r3, r1
 800be38:	42ab      	cmp	r3, r5
 800be3a:	dcf2      	bgt.n	800be22 <_printf_i+0x212>
 800be3c:	e7eb      	b.n	800be16 <_printf_i+0x206>
 800be3e:	2500      	movs	r5, #0
 800be40:	f104 0619 	add.w	r6, r4, #25
 800be44:	e7f5      	b.n	800be32 <_printf_i+0x222>
 800be46:	bf00      	nop
 800be48:	0800fb7e 	.word	0x0800fb7e
 800be4c:	0800fb8f 	.word	0x0800fb8f

0800be50 <_scanf_float>:
 800be50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be54:	b087      	sub	sp, #28
 800be56:	4617      	mov	r7, r2
 800be58:	9303      	str	r3, [sp, #12]
 800be5a:	688b      	ldr	r3, [r1, #8]
 800be5c:	1e5a      	subs	r2, r3, #1
 800be5e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800be62:	bf81      	itttt	hi
 800be64:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800be68:	eb03 0b05 	addhi.w	fp, r3, r5
 800be6c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800be70:	608b      	strhi	r3, [r1, #8]
 800be72:	680b      	ldr	r3, [r1, #0]
 800be74:	460a      	mov	r2, r1
 800be76:	f04f 0500 	mov.w	r5, #0
 800be7a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800be7e:	f842 3b1c 	str.w	r3, [r2], #28
 800be82:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800be86:	4680      	mov	r8, r0
 800be88:	460c      	mov	r4, r1
 800be8a:	bf98      	it	ls
 800be8c:	f04f 0b00 	movls.w	fp, #0
 800be90:	9201      	str	r2, [sp, #4]
 800be92:	4616      	mov	r6, r2
 800be94:	46aa      	mov	sl, r5
 800be96:	46a9      	mov	r9, r5
 800be98:	9502      	str	r5, [sp, #8]
 800be9a:	68a2      	ldr	r2, [r4, #8]
 800be9c:	b152      	cbz	r2, 800beb4 <_scanf_float+0x64>
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	781b      	ldrb	r3, [r3, #0]
 800bea2:	2b4e      	cmp	r3, #78	@ 0x4e
 800bea4:	d864      	bhi.n	800bf70 <_scanf_float+0x120>
 800bea6:	2b40      	cmp	r3, #64	@ 0x40
 800bea8:	d83c      	bhi.n	800bf24 <_scanf_float+0xd4>
 800beaa:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800beae:	b2c8      	uxtb	r0, r1
 800beb0:	280e      	cmp	r0, #14
 800beb2:	d93a      	bls.n	800bf2a <_scanf_float+0xda>
 800beb4:	f1b9 0f00 	cmp.w	r9, #0
 800beb8:	d003      	beq.n	800bec2 <_scanf_float+0x72>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bec6:	f1ba 0f01 	cmp.w	sl, #1
 800beca:	f200 8117 	bhi.w	800c0fc <_scanf_float+0x2ac>
 800bece:	9b01      	ldr	r3, [sp, #4]
 800bed0:	429e      	cmp	r6, r3
 800bed2:	f200 8108 	bhi.w	800c0e6 <_scanf_float+0x296>
 800bed6:	2001      	movs	r0, #1
 800bed8:	b007      	add	sp, #28
 800beda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bede:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800bee2:	2a0d      	cmp	r2, #13
 800bee4:	d8e6      	bhi.n	800beb4 <_scanf_float+0x64>
 800bee6:	a101      	add	r1, pc, #4	@ (adr r1, 800beec <_scanf_float+0x9c>)
 800bee8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800beec:	0800c033 	.word	0x0800c033
 800bef0:	0800beb5 	.word	0x0800beb5
 800bef4:	0800beb5 	.word	0x0800beb5
 800bef8:	0800beb5 	.word	0x0800beb5
 800befc:	0800c093 	.word	0x0800c093
 800bf00:	0800c06b 	.word	0x0800c06b
 800bf04:	0800beb5 	.word	0x0800beb5
 800bf08:	0800beb5 	.word	0x0800beb5
 800bf0c:	0800c041 	.word	0x0800c041
 800bf10:	0800beb5 	.word	0x0800beb5
 800bf14:	0800beb5 	.word	0x0800beb5
 800bf18:	0800beb5 	.word	0x0800beb5
 800bf1c:	0800beb5 	.word	0x0800beb5
 800bf20:	0800bff9 	.word	0x0800bff9
 800bf24:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800bf28:	e7db      	b.n	800bee2 <_scanf_float+0x92>
 800bf2a:	290e      	cmp	r1, #14
 800bf2c:	d8c2      	bhi.n	800beb4 <_scanf_float+0x64>
 800bf2e:	a001      	add	r0, pc, #4	@ (adr r0, 800bf34 <_scanf_float+0xe4>)
 800bf30:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bf34:	0800bfe9 	.word	0x0800bfe9
 800bf38:	0800beb5 	.word	0x0800beb5
 800bf3c:	0800bfe9 	.word	0x0800bfe9
 800bf40:	0800c07f 	.word	0x0800c07f
 800bf44:	0800beb5 	.word	0x0800beb5
 800bf48:	0800bf91 	.word	0x0800bf91
 800bf4c:	0800bfcf 	.word	0x0800bfcf
 800bf50:	0800bfcf 	.word	0x0800bfcf
 800bf54:	0800bfcf 	.word	0x0800bfcf
 800bf58:	0800bfcf 	.word	0x0800bfcf
 800bf5c:	0800bfcf 	.word	0x0800bfcf
 800bf60:	0800bfcf 	.word	0x0800bfcf
 800bf64:	0800bfcf 	.word	0x0800bfcf
 800bf68:	0800bfcf 	.word	0x0800bfcf
 800bf6c:	0800bfcf 	.word	0x0800bfcf
 800bf70:	2b6e      	cmp	r3, #110	@ 0x6e
 800bf72:	d809      	bhi.n	800bf88 <_scanf_float+0x138>
 800bf74:	2b60      	cmp	r3, #96	@ 0x60
 800bf76:	d8b2      	bhi.n	800bede <_scanf_float+0x8e>
 800bf78:	2b54      	cmp	r3, #84	@ 0x54
 800bf7a:	d07b      	beq.n	800c074 <_scanf_float+0x224>
 800bf7c:	2b59      	cmp	r3, #89	@ 0x59
 800bf7e:	d199      	bne.n	800beb4 <_scanf_float+0x64>
 800bf80:	2d07      	cmp	r5, #7
 800bf82:	d197      	bne.n	800beb4 <_scanf_float+0x64>
 800bf84:	2508      	movs	r5, #8
 800bf86:	e02c      	b.n	800bfe2 <_scanf_float+0x192>
 800bf88:	2b74      	cmp	r3, #116	@ 0x74
 800bf8a:	d073      	beq.n	800c074 <_scanf_float+0x224>
 800bf8c:	2b79      	cmp	r3, #121	@ 0x79
 800bf8e:	e7f6      	b.n	800bf7e <_scanf_float+0x12e>
 800bf90:	6821      	ldr	r1, [r4, #0]
 800bf92:	05c8      	lsls	r0, r1, #23
 800bf94:	d51b      	bpl.n	800bfce <_scanf_float+0x17e>
 800bf96:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800bf9a:	6021      	str	r1, [r4, #0]
 800bf9c:	f109 0901 	add.w	r9, r9, #1
 800bfa0:	f1bb 0f00 	cmp.w	fp, #0
 800bfa4:	d003      	beq.n	800bfae <_scanf_float+0x15e>
 800bfa6:	3201      	adds	r2, #1
 800bfa8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfac:	60a2      	str	r2, [r4, #8]
 800bfae:	68a3      	ldr	r3, [r4, #8]
 800bfb0:	3b01      	subs	r3, #1
 800bfb2:	60a3      	str	r3, [r4, #8]
 800bfb4:	6923      	ldr	r3, [r4, #16]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	6123      	str	r3, [r4, #16]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	3b01      	subs	r3, #1
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	607b      	str	r3, [r7, #4]
 800bfc2:	f340 8087 	ble.w	800c0d4 <_scanf_float+0x284>
 800bfc6:	683b      	ldr	r3, [r7, #0]
 800bfc8:	3301      	adds	r3, #1
 800bfca:	603b      	str	r3, [r7, #0]
 800bfcc:	e765      	b.n	800be9a <_scanf_float+0x4a>
 800bfce:	eb1a 0105 	adds.w	r1, sl, r5
 800bfd2:	f47f af6f 	bne.w	800beb4 <_scanf_float+0x64>
 800bfd6:	6822      	ldr	r2, [r4, #0]
 800bfd8:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800bfdc:	6022      	str	r2, [r4, #0]
 800bfde:	460d      	mov	r5, r1
 800bfe0:	468a      	mov	sl, r1
 800bfe2:	f806 3b01 	strb.w	r3, [r6], #1
 800bfe6:	e7e2      	b.n	800bfae <_scanf_float+0x15e>
 800bfe8:	6822      	ldr	r2, [r4, #0]
 800bfea:	0610      	lsls	r0, r2, #24
 800bfec:	f57f af62 	bpl.w	800beb4 <_scanf_float+0x64>
 800bff0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800bff4:	6022      	str	r2, [r4, #0]
 800bff6:	e7f4      	b.n	800bfe2 <_scanf_float+0x192>
 800bff8:	f1ba 0f00 	cmp.w	sl, #0
 800bffc:	d10e      	bne.n	800c01c <_scanf_float+0x1cc>
 800bffe:	f1b9 0f00 	cmp.w	r9, #0
 800c002:	d10e      	bne.n	800c022 <_scanf_float+0x1d2>
 800c004:	6822      	ldr	r2, [r4, #0]
 800c006:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c00a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c00e:	d108      	bne.n	800c022 <_scanf_float+0x1d2>
 800c010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c014:	6022      	str	r2, [r4, #0]
 800c016:	f04f 0a01 	mov.w	sl, #1
 800c01a:	e7e2      	b.n	800bfe2 <_scanf_float+0x192>
 800c01c:	f1ba 0f02 	cmp.w	sl, #2
 800c020:	d055      	beq.n	800c0ce <_scanf_float+0x27e>
 800c022:	2d01      	cmp	r5, #1
 800c024:	d002      	beq.n	800c02c <_scanf_float+0x1dc>
 800c026:	2d04      	cmp	r5, #4
 800c028:	f47f af44 	bne.w	800beb4 <_scanf_float+0x64>
 800c02c:	3501      	adds	r5, #1
 800c02e:	b2ed      	uxtb	r5, r5
 800c030:	e7d7      	b.n	800bfe2 <_scanf_float+0x192>
 800c032:	f1ba 0f01 	cmp.w	sl, #1
 800c036:	f47f af3d 	bne.w	800beb4 <_scanf_float+0x64>
 800c03a:	f04f 0a02 	mov.w	sl, #2
 800c03e:	e7d0      	b.n	800bfe2 <_scanf_float+0x192>
 800c040:	b97d      	cbnz	r5, 800c062 <_scanf_float+0x212>
 800c042:	f1b9 0f00 	cmp.w	r9, #0
 800c046:	f47f af38 	bne.w	800beba <_scanf_float+0x6a>
 800c04a:	6822      	ldr	r2, [r4, #0]
 800c04c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800c050:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800c054:	f040 8101 	bne.w	800c25a <_scanf_float+0x40a>
 800c058:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c05c:	6022      	str	r2, [r4, #0]
 800c05e:	2501      	movs	r5, #1
 800c060:	e7bf      	b.n	800bfe2 <_scanf_float+0x192>
 800c062:	2d03      	cmp	r5, #3
 800c064:	d0e2      	beq.n	800c02c <_scanf_float+0x1dc>
 800c066:	2d05      	cmp	r5, #5
 800c068:	e7de      	b.n	800c028 <_scanf_float+0x1d8>
 800c06a:	2d02      	cmp	r5, #2
 800c06c:	f47f af22 	bne.w	800beb4 <_scanf_float+0x64>
 800c070:	2503      	movs	r5, #3
 800c072:	e7b6      	b.n	800bfe2 <_scanf_float+0x192>
 800c074:	2d06      	cmp	r5, #6
 800c076:	f47f af1d 	bne.w	800beb4 <_scanf_float+0x64>
 800c07a:	2507      	movs	r5, #7
 800c07c:	e7b1      	b.n	800bfe2 <_scanf_float+0x192>
 800c07e:	6822      	ldr	r2, [r4, #0]
 800c080:	0591      	lsls	r1, r2, #22
 800c082:	f57f af17 	bpl.w	800beb4 <_scanf_float+0x64>
 800c086:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800c08a:	6022      	str	r2, [r4, #0]
 800c08c:	f8cd 9008 	str.w	r9, [sp, #8]
 800c090:	e7a7      	b.n	800bfe2 <_scanf_float+0x192>
 800c092:	6822      	ldr	r2, [r4, #0]
 800c094:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800c098:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800c09c:	d006      	beq.n	800c0ac <_scanf_float+0x25c>
 800c09e:	0550      	lsls	r0, r2, #21
 800c0a0:	f57f af08 	bpl.w	800beb4 <_scanf_float+0x64>
 800c0a4:	f1b9 0f00 	cmp.w	r9, #0
 800c0a8:	f000 80d7 	beq.w	800c25a <_scanf_float+0x40a>
 800c0ac:	0591      	lsls	r1, r2, #22
 800c0ae:	bf58      	it	pl
 800c0b0:	9902      	ldrpl	r1, [sp, #8]
 800c0b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800c0b6:	bf58      	it	pl
 800c0b8:	eba9 0101 	subpl.w	r1, r9, r1
 800c0bc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800c0c0:	bf58      	it	pl
 800c0c2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c0c6:	6022      	str	r2, [r4, #0]
 800c0c8:	f04f 0900 	mov.w	r9, #0
 800c0cc:	e789      	b.n	800bfe2 <_scanf_float+0x192>
 800c0ce:	f04f 0a03 	mov.w	sl, #3
 800c0d2:	e786      	b.n	800bfe2 <_scanf_float+0x192>
 800c0d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c0d8:	4639      	mov	r1, r7
 800c0da:	4640      	mov	r0, r8
 800c0dc:	4798      	blx	r3
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f aedb 	beq.w	800be9a <_scanf_float+0x4a>
 800c0e4:	e6e6      	b.n	800beb4 <_scanf_float+0x64>
 800c0e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c0ea:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c0ee:	463a      	mov	r2, r7
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	4798      	blx	r3
 800c0f4:	6923      	ldr	r3, [r4, #16]
 800c0f6:	3b01      	subs	r3, #1
 800c0f8:	6123      	str	r3, [r4, #16]
 800c0fa:	e6e8      	b.n	800bece <_scanf_float+0x7e>
 800c0fc:	1e6b      	subs	r3, r5, #1
 800c0fe:	2b06      	cmp	r3, #6
 800c100:	d824      	bhi.n	800c14c <_scanf_float+0x2fc>
 800c102:	2d02      	cmp	r5, #2
 800c104:	d836      	bhi.n	800c174 <_scanf_float+0x324>
 800c106:	9b01      	ldr	r3, [sp, #4]
 800c108:	429e      	cmp	r6, r3
 800c10a:	f67f aee4 	bls.w	800bed6 <_scanf_float+0x86>
 800c10e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c112:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c116:	463a      	mov	r2, r7
 800c118:	4640      	mov	r0, r8
 800c11a:	4798      	blx	r3
 800c11c:	6923      	ldr	r3, [r4, #16]
 800c11e:	3b01      	subs	r3, #1
 800c120:	6123      	str	r3, [r4, #16]
 800c122:	e7f0      	b.n	800c106 <_scanf_float+0x2b6>
 800c124:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c128:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800c12c:	463a      	mov	r2, r7
 800c12e:	4640      	mov	r0, r8
 800c130:	4798      	blx	r3
 800c132:	6923      	ldr	r3, [r4, #16]
 800c134:	3b01      	subs	r3, #1
 800c136:	6123      	str	r3, [r4, #16]
 800c138:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c13c:	fa5f fa8a 	uxtb.w	sl, sl
 800c140:	f1ba 0f02 	cmp.w	sl, #2
 800c144:	d1ee      	bne.n	800c124 <_scanf_float+0x2d4>
 800c146:	3d03      	subs	r5, #3
 800c148:	b2ed      	uxtb	r5, r5
 800c14a:	1b76      	subs	r6, r6, r5
 800c14c:	6823      	ldr	r3, [r4, #0]
 800c14e:	05da      	lsls	r2, r3, #23
 800c150:	d530      	bpl.n	800c1b4 <_scanf_float+0x364>
 800c152:	055b      	lsls	r3, r3, #21
 800c154:	d511      	bpl.n	800c17a <_scanf_float+0x32a>
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	429e      	cmp	r6, r3
 800c15a:	f67f aebc 	bls.w	800bed6 <_scanf_float+0x86>
 800c15e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c162:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c166:	463a      	mov	r2, r7
 800c168:	4640      	mov	r0, r8
 800c16a:	4798      	blx	r3
 800c16c:	6923      	ldr	r3, [r4, #16]
 800c16e:	3b01      	subs	r3, #1
 800c170:	6123      	str	r3, [r4, #16]
 800c172:	e7f0      	b.n	800c156 <_scanf_float+0x306>
 800c174:	46aa      	mov	sl, r5
 800c176:	46b3      	mov	fp, r6
 800c178:	e7de      	b.n	800c138 <_scanf_float+0x2e8>
 800c17a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c17e:	6923      	ldr	r3, [r4, #16]
 800c180:	2965      	cmp	r1, #101	@ 0x65
 800c182:	f103 33ff 	add.w	r3, r3, #4294967295
 800c186:	f106 35ff 	add.w	r5, r6, #4294967295
 800c18a:	6123      	str	r3, [r4, #16]
 800c18c:	d00c      	beq.n	800c1a8 <_scanf_float+0x358>
 800c18e:	2945      	cmp	r1, #69	@ 0x45
 800c190:	d00a      	beq.n	800c1a8 <_scanf_float+0x358>
 800c192:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c196:	463a      	mov	r2, r7
 800c198:	4640      	mov	r0, r8
 800c19a:	4798      	blx	r3
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	1eb5      	subs	r5, r6, #2
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c1ac:	463a      	mov	r2, r7
 800c1ae:	4640      	mov	r0, r8
 800c1b0:	4798      	blx	r3
 800c1b2:	462e      	mov	r6, r5
 800c1b4:	6822      	ldr	r2, [r4, #0]
 800c1b6:	f012 0210 	ands.w	r2, r2, #16
 800c1ba:	d001      	beq.n	800c1c0 <_scanf_float+0x370>
 800c1bc:	2000      	movs	r0, #0
 800c1be:	e68b      	b.n	800bed8 <_scanf_float+0x88>
 800c1c0:	7032      	strb	r2, [r6, #0]
 800c1c2:	6823      	ldr	r3, [r4, #0]
 800c1c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800c1c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1cc:	d11a      	bne.n	800c204 <_scanf_float+0x3b4>
 800c1ce:	9b02      	ldr	r3, [sp, #8]
 800c1d0:	454b      	cmp	r3, r9
 800c1d2:	eba3 0209 	sub.w	r2, r3, r9
 800c1d6:	d121      	bne.n	800c21c <_scanf_float+0x3cc>
 800c1d8:	9901      	ldr	r1, [sp, #4]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	4640      	mov	r0, r8
 800c1de:	f002 fb2d 	bl	800e83c <_strtod_r>
 800c1e2:	9b03      	ldr	r3, [sp, #12]
 800c1e4:	6821      	ldr	r1, [r4, #0]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f011 0f02 	tst.w	r1, #2
 800c1ec:	f103 0204 	add.w	r2, r3, #4
 800c1f0:	d01f      	beq.n	800c232 <_scanf_float+0x3e2>
 800c1f2:	9903      	ldr	r1, [sp, #12]
 800c1f4:	600a      	str	r2, [r1, #0]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	ed83 0b00 	vstr	d0, [r3]
 800c1fc:	68e3      	ldr	r3, [r4, #12]
 800c1fe:	3301      	adds	r3, #1
 800c200:	60e3      	str	r3, [r4, #12]
 800c202:	e7db      	b.n	800c1bc <_scanf_float+0x36c>
 800c204:	9b04      	ldr	r3, [sp, #16]
 800c206:	2b00      	cmp	r3, #0
 800c208:	d0e6      	beq.n	800c1d8 <_scanf_float+0x388>
 800c20a:	9905      	ldr	r1, [sp, #20]
 800c20c:	230a      	movs	r3, #10
 800c20e:	3101      	adds	r1, #1
 800c210:	4640      	mov	r0, r8
 800c212:	f002 fb93 	bl	800e93c <_strtol_r>
 800c216:	9b04      	ldr	r3, [sp, #16]
 800c218:	9e05      	ldr	r6, [sp, #20]
 800c21a:	1ac2      	subs	r2, r0, r3
 800c21c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800c220:	429e      	cmp	r6, r3
 800c222:	bf28      	it	cs
 800c224:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800c228:	490d      	ldr	r1, [pc, #52]	@ (800c260 <_scanf_float+0x410>)
 800c22a:	4630      	mov	r0, r6
 800c22c:	f000 f8de 	bl	800c3ec <siprintf>
 800c230:	e7d2      	b.n	800c1d8 <_scanf_float+0x388>
 800c232:	f011 0f04 	tst.w	r1, #4
 800c236:	9903      	ldr	r1, [sp, #12]
 800c238:	600a      	str	r2, [r1, #0]
 800c23a:	d1dc      	bne.n	800c1f6 <_scanf_float+0x3a6>
 800c23c:	eeb4 0b40 	vcmp.f64	d0, d0
 800c240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c244:	681d      	ldr	r5, [r3, #0]
 800c246:	d705      	bvc.n	800c254 <_scanf_float+0x404>
 800c248:	4806      	ldr	r0, [pc, #24]	@ (800c264 <_scanf_float+0x414>)
 800c24a:	f000 f9b3 	bl	800c5b4 <nanf>
 800c24e:	ed85 0a00 	vstr	s0, [r5]
 800c252:	e7d3      	b.n	800c1fc <_scanf_float+0x3ac>
 800c254:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c258:	e7f9      	b.n	800c24e <_scanf_float+0x3fe>
 800c25a:	f04f 0900 	mov.w	r9, #0
 800c25e:	e630      	b.n	800bec2 <_scanf_float+0x72>
 800c260:	0800fba0 	.word	0x0800fba0
 800c264:	0800ff35 	.word	0x0800ff35

0800c268 <std>:
 800c268:	2300      	movs	r3, #0
 800c26a:	b510      	push	{r4, lr}
 800c26c:	4604      	mov	r4, r0
 800c26e:	e9c0 3300 	strd	r3, r3, [r0]
 800c272:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c276:	6083      	str	r3, [r0, #8]
 800c278:	8181      	strh	r1, [r0, #12]
 800c27a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c27c:	81c2      	strh	r2, [r0, #14]
 800c27e:	6183      	str	r3, [r0, #24]
 800c280:	4619      	mov	r1, r3
 800c282:	2208      	movs	r2, #8
 800c284:	305c      	adds	r0, #92	@ 0x5c
 800c286:	f000 f914 	bl	800c4b2 <memset>
 800c28a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c0 <std+0x58>)
 800c28c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c28e:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c4 <std+0x5c>)
 800c290:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c292:	4b0d      	ldr	r3, [pc, #52]	@ (800c2c8 <std+0x60>)
 800c294:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c296:	4b0d      	ldr	r3, [pc, #52]	@ (800c2cc <std+0x64>)
 800c298:	6323      	str	r3, [r4, #48]	@ 0x30
 800c29a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2d0 <std+0x68>)
 800c29c:	6224      	str	r4, [r4, #32]
 800c29e:	429c      	cmp	r4, r3
 800c2a0:	d006      	beq.n	800c2b0 <std+0x48>
 800c2a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2a6:	4294      	cmp	r4, r2
 800c2a8:	d002      	beq.n	800c2b0 <std+0x48>
 800c2aa:	33d0      	adds	r3, #208	@ 0xd0
 800c2ac:	429c      	cmp	r4, r3
 800c2ae:	d105      	bne.n	800c2bc <std+0x54>
 800c2b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2b8:	f000 b978 	b.w	800c5ac <__retarget_lock_init_recursive>
 800c2bc:	bd10      	pop	{r4, pc}
 800c2be:	bf00      	nop
 800c2c0:	0800c42d 	.word	0x0800c42d
 800c2c4:	0800c44f 	.word	0x0800c44f
 800c2c8:	0800c487 	.word	0x0800c487
 800c2cc:	0800c4ab 	.word	0x0800c4ab
 800c2d0:	240004d4 	.word	0x240004d4

0800c2d4 <stdio_exit_handler>:
 800c2d4:	4a02      	ldr	r2, [pc, #8]	@ (800c2e0 <stdio_exit_handler+0xc>)
 800c2d6:	4903      	ldr	r1, [pc, #12]	@ (800c2e4 <stdio_exit_handler+0x10>)
 800c2d8:	4803      	ldr	r0, [pc, #12]	@ (800c2e8 <stdio_exit_handler+0x14>)
 800c2da:	f000 b869 	b.w	800c3b0 <_fwalk_sglue>
 800c2de:	bf00      	nop
 800c2e0:	24000014 	.word	0x24000014
 800c2e4:	0800ecf9 	.word	0x0800ecf9
 800c2e8:	24000024 	.word	0x24000024

0800c2ec <cleanup_stdio>:
 800c2ec:	6841      	ldr	r1, [r0, #4]
 800c2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c320 <cleanup_stdio+0x34>)
 800c2f0:	4299      	cmp	r1, r3
 800c2f2:	b510      	push	{r4, lr}
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	d001      	beq.n	800c2fc <cleanup_stdio+0x10>
 800c2f8:	f002 fcfe 	bl	800ecf8 <_fflush_r>
 800c2fc:	68a1      	ldr	r1, [r4, #8]
 800c2fe:	4b09      	ldr	r3, [pc, #36]	@ (800c324 <cleanup_stdio+0x38>)
 800c300:	4299      	cmp	r1, r3
 800c302:	d002      	beq.n	800c30a <cleanup_stdio+0x1e>
 800c304:	4620      	mov	r0, r4
 800c306:	f002 fcf7 	bl	800ecf8 <_fflush_r>
 800c30a:	68e1      	ldr	r1, [r4, #12]
 800c30c:	4b06      	ldr	r3, [pc, #24]	@ (800c328 <cleanup_stdio+0x3c>)
 800c30e:	4299      	cmp	r1, r3
 800c310:	d004      	beq.n	800c31c <cleanup_stdio+0x30>
 800c312:	4620      	mov	r0, r4
 800c314:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c318:	f002 bcee 	b.w	800ecf8 <_fflush_r>
 800c31c:	bd10      	pop	{r4, pc}
 800c31e:	bf00      	nop
 800c320:	240004d4 	.word	0x240004d4
 800c324:	2400053c 	.word	0x2400053c
 800c328:	240005a4 	.word	0x240005a4

0800c32c <global_stdio_init.part.0>:
 800c32c:	b510      	push	{r4, lr}
 800c32e:	4b0b      	ldr	r3, [pc, #44]	@ (800c35c <global_stdio_init.part.0+0x30>)
 800c330:	4c0b      	ldr	r4, [pc, #44]	@ (800c360 <global_stdio_init.part.0+0x34>)
 800c332:	4a0c      	ldr	r2, [pc, #48]	@ (800c364 <global_stdio_init.part.0+0x38>)
 800c334:	601a      	str	r2, [r3, #0]
 800c336:	4620      	mov	r0, r4
 800c338:	2200      	movs	r2, #0
 800c33a:	2104      	movs	r1, #4
 800c33c:	f7ff ff94 	bl	800c268 <std>
 800c340:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c344:	2201      	movs	r2, #1
 800c346:	2109      	movs	r1, #9
 800c348:	f7ff ff8e 	bl	800c268 <std>
 800c34c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c350:	2202      	movs	r2, #2
 800c352:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c356:	2112      	movs	r1, #18
 800c358:	f7ff bf86 	b.w	800c268 <std>
 800c35c:	2400060c 	.word	0x2400060c
 800c360:	240004d4 	.word	0x240004d4
 800c364:	0800c2d5 	.word	0x0800c2d5

0800c368 <__sfp_lock_acquire>:
 800c368:	4801      	ldr	r0, [pc, #4]	@ (800c370 <__sfp_lock_acquire+0x8>)
 800c36a:	f000 b920 	b.w	800c5ae <__retarget_lock_acquire_recursive>
 800c36e:	bf00      	nop
 800c370:	24000615 	.word	0x24000615

0800c374 <__sfp_lock_release>:
 800c374:	4801      	ldr	r0, [pc, #4]	@ (800c37c <__sfp_lock_release+0x8>)
 800c376:	f000 b91b 	b.w	800c5b0 <__retarget_lock_release_recursive>
 800c37a:	bf00      	nop
 800c37c:	24000615 	.word	0x24000615

0800c380 <__sinit>:
 800c380:	b510      	push	{r4, lr}
 800c382:	4604      	mov	r4, r0
 800c384:	f7ff fff0 	bl	800c368 <__sfp_lock_acquire>
 800c388:	6a23      	ldr	r3, [r4, #32]
 800c38a:	b11b      	cbz	r3, 800c394 <__sinit+0x14>
 800c38c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c390:	f7ff bff0 	b.w	800c374 <__sfp_lock_release>
 800c394:	4b04      	ldr	r3, [pc, #16]	@ (800c3a8 <__sinit+0x28>)
 800c396:	6223      	str	r3, [r4, #32]
 800c398:	4b04      	ldr	r3, [pc, #16]	@ (800c3ac <__sinit+0x2c>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d1f5      	bne.n	800c38c <__sinit+0xc>
 800c3a0:	f7ff ffc4 	bl	800c32c <global_stdio_init.part.0>
 800c3a4:	e7f2      	b.n	800c38c <__sinit+0xc>
 800c3a6:	bf00      	nop
 800c3a8:	0800c2ed 	.word	0x0800c2ed
 800c3ac:	2400060c 	.word	0x2400060c

0800c3b0 <_fwalk_sglue>:
 800c3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3b4:	4607      	mov	r7, r0
 800c3b6:	4688      	mov	r8, r1
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	2600      	movs	r6, #0
 800c3bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c3c4:	d505      	bpl.n	800c3d2 <_fwalk_sglue+0x22>
 800c3c6:	6824      	ldr	r4, [r4, #0]
 800c3c8:	2c00      	cmp	r4, #0
 800c3ca:	d1f7      	bne.n	800c3bc <_fwalk_sglue+0xc>
 800c3cc:	4630      	mov	r0, r6
 800c3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c3d2:	89ab      	ldrh	r3, [r5, #12]
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	d907      	bls.n	800c3e8 <_fwalk_sglue+0x38>
 800c3d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	d003      	beq.n	800c3e8 <_fwalk_sglue+0x38>
 800c3e0:	4629      	mov	r1, r5
 800c3e2:	4638      	mov	r0, r7
 800c3e4:	47c0      	blx	r8
 800c3e6:	4306      	orrs	r6, r0
 800c3e8:	3568      	adds	r5, #104	@ 0x68
 800c3ea:	e7e9      	b.n	800c3c0 <_fwalk_sglue+0x10>

0800c3ec <siprintf>:
 800c3ec:	b40e      	push	{r1, r2, r3}
 800c3ee:	b500      	push	{lr}
 800c3f0:	b09c      	sub	sp, #112	@ 0x70
 800c3f2:	ab1d      	add	r3, sp, #116	@ 0x74
 800c3f4:	9002      	str	r0, [sp, #8]
 800c3f6:	9006      	str	r0, [sp, #24]
 800c3f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c3fc:	4809      	ldr	r0, [pc, #36]	@ (800c424 <siprintf+0x38>)
 800c3fe:	9107      	str	r1, [sp, #28]
 800c400:	9104      	str	r1, [sp, #16]
 800c402:	4909      	ldr	r1, [pc, #36]	@ (800c428 <siprintf+0x3c>)
 800c404:	f853 2b04 	ldr.w	r2, [r3], #4
 800c408:	9105      	str	r1, [sp, #20]
 800c40a:	6800      	ldr	r0, [r0, #0]
 800c40c:	9301      	str	r3, [sp, #4]
 800c40e:	a902      	add	r1, sp, #8
 800c410:	f002 faf2 	bl	800e9f8 <_svfiprintf_r>
 800c414:	9b02      	ldr	r3, [sp, #8]
 800c416:	2200      	movs	r2, #0
 800c418:	701a      	strb	r2, [r3, #0]
 800c41a:	b01c      	add	sp, #112	@ 0x70
 800c41c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c420:	b003      	add	sp, #12
 800c422:	4770      	bx	lr
 800c424:	24000020 	.word	0x24000020
 800c428:	ffff0208 	.word	0xffff0208

0800c42c <__sread>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	460c      	mov	r4, r1
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	f000 f86c 	bl	800c510 <_read_r>
 800c438:	2800      	cmp	r0, #0
 800c43a:	bfab      	itete	ge
 800c43c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c43e:	89a3      	ldrhlt	r3, [r4, #12]
 800c440:	181b      	addge	r3, r3, r0
 800c442:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c446:	bfac      	ite	ge
 800c448:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c44a:	81a3      	strhlt	r3, [r4, #12]
 800c44c:	bd10      	pop	{r4, pc}

0800c44e <__swrite>:
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	461f      	mov	r7, r3
 800c454:	898b      	ldrh	r3, [r1, #12]
 800c456:	05db      	lsls	r3, r3, #23
 800c458:	4605      	mov	r5, r0
 800c45a:	460c      	mov	r4, r1
 800c45c:	4616      	mov	r6, r2
 800c45e:	d505      	bpl.n	800c46c <__swrite+0x1e>
 800c460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c464:	2302      	movs	r3, #2
 800c466:	2200      	movs	r2, #0
 800c468:	f000 f840 	bl	800c4ec <_lseek_r>
 800c46c:	89a3      	ldrh	r3, [r4, #12]
 800c46e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c472:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c476:	81a3      	strh	r3, [r4, #12]
 800c478:	4632      	mov	r2, r6
 800c47a:	463b      	mov	r3, r7
 800c47c:	4628      	mov	r0, r5
 800c47e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c482:	f000 b857 	b.w	800c534 <_write_r>

0800c486 <__sseek>:
 800c486:	b510      	push	{r4, lr}
 800c488:	460c      	mov	r4, r1
 800c48a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c48e:	f000 f82d 	bl	800c4ec <_lseek_r>
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	89a3      	ldrh	r3, [r4, #12]
 800c496:	bf15      	itete	ne
 800c498:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c49a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c49e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c4a2:	81a3      	strheq	r3, [r4, #12]
 800c4a4:	bf18      	it	ne
 800c4a6:	81a3      	strhne	r3, [r4, #12]
 800c4a8:	bd10      	pop	{r4, pc}

0800c4aa <__sclose>:
 800c4aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c4ae:	f000 b80d 	b.w	800c4cc <_close_r>

0800c4b2 <memset>:
 800c4b2:	4402      	add	r2, r0
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	d100      	bne.n	800c4bc <memset+0xa>
 800c4ba:	4770      	bx	lr
 800c4bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c4c0:	e7f9      	b.n	800c4b6 <memset+0x4>
	...

0800c4c4 <_localeconv_r>:
 800c4c4:	4800      	ldr	r0, [pc, #0]	@ (800c4c8 <_localeconv_r+0x4>)
 800c4c6:	4770      	bx	lr
 800c4c8:	24000160 	.word	0x24000160

0800c4cc <_close_r>:
 800c4cc:	b538      	push	{r3, r4, r5, lr}
 800c4ce:	4d06      	ldr	r5, [pc, #24]	@ (800c4e8 <_close_r+0x1c>)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	4604      	mov	r4, r0
 800c4d4:	4608      	mov	r0, r1
 800c4d6:	602b      	str	r3, [r5, #0]
 800c4d8:	f7f4 ffc2 	bl	8001460 <_close>
 800c4dc:	1c43      	adds	r3, r0, #1
 800c4de:	d102      	bne.n	800c4e6 <_close_r+0x1a>
 800c4e0:	682b      	ldr	r3, [r5, #0]
 800c4e2:	b103      	cbz	r3, 800c4e6 <_close_r+0x1a>
 800c4e4:	6023      	str	r3, [r4, #0]
 800c4e6:	bd38      	pop	{r3, r4, r5, pc}
 800c4e8:	24000610 	.word	0x24000610

0800c4ec <_lseek_r>:
 800c4ec:	b538      	push	{r3, r4, r5, lr}
 800c4ee:	4d07      	ldr	r5, [pc, #28]	@ (800c50c <_lseek_r+0x20>)
 800c4f0:	4604      	mov	r4, r0
 800c4f2:	4608      	mov	r0, r1
 800c4f4:	4611      	mov	r1, r2
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	602a      	str	r2, [r5, #0]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	f7f4 ffd7 	bl	80014ae <_lseek>
 800c500:	1c43      	adds	r3, r0, #1
 800c502:	d102      	bne.n	800c50a <_lseek_r+0x1e>
 800c504:	682b      	ldr	r3, [r5, #0]
 800c506:	b103      	cbz	r3, 800c50a <_lseek_r+0x1e>
 800c508:	6023      	str	r3, [r4, #0]
 800c50a:	bd38      	pop	{r3, r4, r5, pc}
 800c50c:	24000610 	.word	0x24000610

0800c510 <_read_r>:
 800c510:	b538      	push	{r3, r4, r5, lr}
 800c512:	4d07      	ldr	r5, [pc, #28]	@ (800c530 <_read_r+0x20>)
 800c514:	4604      	mov	r4, r0
 800c516:	4608      	mov	r0, r1
 800c518:	4611      	mov	r1, r2
 800c51a:	2200      	movs	r2, #0
 800c51c:	602a      	str	r2, [r5, #0]
 800c51e:	461a      	mov	r2, r3
 800c520:	f7f4 ff65 	bl	80013ee <_read>
 800c524:	1c43      	adds	r3, r0, #1
 800c526:	d102      	bne.n	800c52e <_read_r+0x1e>
 800c528:	682b      	ldr	r3, [r5, #0]
 800c52a:	b103      	cbz	r3, 800c52e <_read_r+0x1e>
 800c52c:	6023      	str	r3, [r4, #0]
 800c52e:	bd38      	pop	{r3, r4, r5, pc}
 800c530:	24000610 	.word	0x24000610

0800c534 <_write_r>:
 800c534:	b538      	push	{r3, r4, r5, lr}
 800c536:	4d07      	ldr	r5, [pc, #28]	@ (800c554 <_write_r+0x20>)
 800c538:	4604      	mov	r4, r0
 800c53a:	4608      	mov	r0, r1
 800c53c:	4611      	mov	r1, r2
 800c53e:	2200      	movs	r2, #0
 800c540:	602a      	str	r2, [r5, #0]
 800c542:	461a      	mov	r2, r3
 800c544:	f7f4 ff70 	bl	8001428 <_write>
 800c548:	1c43      	adds	r3, r0, #1
 800c54a:	d102      	bne.n	800c552 <_write_r+0x1e>
 800c54c:	682b      	ldr	r3, [r5, #0]
 800c54e:	b103      	cbz	r3, 800c552 <_write_r+0x1e>
 800c550:	6023      	str	r3, [r4, #0]
 800c552:	bd38      	pop	{r3, r4, r5, pc}
 800c554:	24000610 	.word	0x24000610

0800c558 <__errno>:
 800c558:	4b01      	ldr	r3, [pc, #4]	@ (800c560 <__errno+0x8>)
 800c55a:	6818      	ldr	r0, [r3, #0]
 800c55c:	4770      	bx	lr
 800c55e:	bf00      	nop
 800c560:	24000020 	.word	0x24000020

0800c564 <__libc_init_array>:
 800c564:	b570      	push	{r4, r5, r6, lr}
 800c566:	4d0d      	ldr	r5, [pc, #52]	@ (800c59c <__libc_init_array+0x38>)
 800c568:	4c0d      	ldr	r4, [pc, #52]	@ (800c5a0 <__libc_init_array+0x3c>)
 800c56a:	1b64      	subs	r4, r4, r5
 800c56c:	10a4      	asrs	r4, r4, #2
 800c56e:	2600      	movs	r6, #0
 800c570:	42a6      	cmp	r6, r4
 800c572:	d109      	bne.n	800c588 <__libc_init_array+0x24>
 800c574:	4d0b      	ldr	r5, [pc, #44]	@ (800c5a4 <__libc_init_array+0x40>)
 800c576:	4c0c      	ldr	r4, [pc, #48]	@ (800c5a8 <__libc_init_array+0x44>)
 800c578:	f003 fab0 	bl	800fadc <_init>
 800c57c:	1b64      	subs	r4, r4, r5
 800c57e:	10a4      	asrs	r4, r4, #2
 800c580:	2600      	movs	r6, #0
 800c582:	42a6      	cmp	r6, r4
 800c584:	d105      	bne.n	800c592 <__libc_init_array+0x2e>
 800c586:	bd70      	pop	{r4, r5, r6, pc}
 800c588:	f855 3b04 	ldr.w	r3, [r5], #4
 800c58c:	4798      	blx	r3
 800c58e:	3601      	adds	r6, #1
 800c590:	e7ee      	b.n	800c570 <__libc_init_array+0xc>
 800c592:	f855 3b04 	ldr.w	r3, [r5], #4
 800c596:	4798      	blx	r3
 800c598:	3601      	adds	r6, #1
 800c59a:	e7f2      	b.n	800c582 <__libc_init_array+0x1e>
 800c59c:	0800ffa0 	.word	0x0800ffa0
 800c5a0:	0800ffa0 	.word	0x0800ffa0
 800c5a4:	0800ffa0 	.word	0x0800ffa0
 800c5a8:	0800ffa4 	.word	0x0800ffa4

0800c5ac <__retarget_lock_init_recursive>:
 800c5ac:	4770      	bx	lr

0800c5ae <__retarget_lock_acquire_recursive>:
 800c5ae:	4770      	bx	lr

0800c5b0 <__retarget_lock_release_recursive>:
 800c5b0:	4770      	bx	lr
	...

0800c5b4 <nanf>:
 800c5b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c5bc <nanf+0x8>
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	7fc00000 	.word	0x7fc00000

0800c5c0 <quorem>:
 800c5c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5c4:	6903      	ldr	r3, [r0, #16]
 800c5c6:	690c      	ldr	r4, [r1, #16]
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	4607      	mov	r7, r0
 800c5cc:	db7e      	blt.n	800c6cc <quorem+0x10c>
 800c5ce:	3c01      	subs	r4, #1
 800c5d0:	f101 0814 	add.w	r8, r1, #20
 800c5d4:	00a3      	lsls	r3, r4, #2
 800c5d6:	f100 0514 	add.w	r5, r0, #20
 800c5da:	9300      	str	r3, [sp, #0]
 800c5dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c5e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c5f2:	fbb2 f6f3 	udiv	r6, r2, r3
 800c5f6:	d32e      	bcc.n	800c656 <quorem+0x96>
 800c5f8:	f04f 0a00 	mov.w	sl, #0
 800c5fc:	46c4      	mov	ip, r8
 800c5fe:	46ae      	mov	lr, r5
 800c600:	46d3      	mov	fp, sl
 800c602:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c606:	b298      	uxth	r0, r3
 800c608:	fb06 a000 	mla	r0, r6, r0, sl
 800c60c:	0c02      	lsrs	r2, r0, #16
 800c60e:	0c1b      	lsrs	r3, r3, #16
 800c610:	fb06 2303 	mla	r3, r6, r3, r2
 800c614:	f8de 2000 	ldr.w	r2, [lr]
 800c618:	b280      	uxth	r0, r0
 800c61a:	b292      	uxth	r2, r2
 800c61c:	1a12      	subs	r2, r2, r0
 800c61e:	445a      	add	r2, fp
 800c620:	f8de 0000 	ldr.w	r0, [lr]
 800c624:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c628:	b29b      	uxth	r3, r3
 800c62a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c62e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c632:	b292      	uxth	r2, r2
 800c634:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c638:	45e1      	cmp	r9, ip
 800c63a:	f84e 2b04 	str.w	r2, [lr], #4
 800c63e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c642:	d2de      	bcs.n	800c602 <quorem+0x42>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	58eb      	ldr	r3, [r5, r3]
 800c648:	b92b      	cbnz	r3, 800c656 <quorem+0x96>
 800c64a:	9b01      	ldr	r3, [sp, #4]
 800c64c:	3b04      	subs	r3, #4
 800c64e:	429d      	cmp	r5, r3
 800c650:	461a      	mov	r2, r3
 800c652:	d32f      	bcc.n	800c6b4 <quorem+0xf4>
 800c654:	613c      	str	r4, [r7, #16]
 800c656:	4638      	mov	r0, r7
 800c658:	f001 f954 	bl	800d904 <__mcmp>
 800c65c:	2800      	cmp	r0, #0
 800c65e:	db25      	blt.n	800c6ac <quorem+0xec>
 800c660:	4629      	mov	r1, r5
 800c662:	2000      	movs	r0, #0
 800c664:	f858 2b04 	ldr.w	r2, [r8], #4
 800c668:	f8d1 c000 	ldr.w	ip, [r1]
 800c66c:	fa1f fe82 	uxth.w	lr, r2
 800c670:	fa1f f38c 	uxth.w	r3, ip
 800c674:	eba3 030e 	sub.w	r3, r3, lr
 800c678:	4403      	add	r3, r0
 800c67a:	0c12      	lsrs	r2, r2, #16
 800c67c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c680:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c684:	b29b      	uxth	r3, r3
 800c686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c68a:	45c1      	cmp	r9, r8
 800c68c:	f841 3b04 	str.w	r3, [r1], #4
 800c690:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c694:	d2e6      	bcs.n	800c664 <quorem+0xa4>
 800c696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c69e:	b922      	cbnz	r2, 800c6aa <quorem+0xea>
 800c6a0:	3b04      	subs	r3, #4
 800c6a2:	429d      	cmp	r5, r3
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	d30b      	bcc.n	800c6c0 <quorem+0x100>
 800c6a8:	613c      	str	r4, [r7, #16]
 800c6aa:	3601      	adds	r6, #1
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	b003      	add	sp, #12
 800c6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b4:	6812      	ldr	r2, [r2, #0]
 800c6b6:	3b04      	subs	r3, #4
 800c6b8:	2a00      	cmp	r2, #0
 800c6ba:	d1cb      	bne.n	800c654 <quorem+0x94>
 800c6bc:	3c01      	subs	r4, #1
 800c6be:	e7c6      	b.n	800c64e <quorem+0x8e>
 800c6c0:	6812      	ldr	r2, [r2, #0]
 800c6c2:	3b04      	subs	r3, #4
 800c6c4:	2a00      	cmp	r2, #0
 800c6c6:	d1ef      	bne.n	800c6a8 <quorem+0xe8>
 800c6c8:	3c01      	subs	r4, #1
 800c6ca:	e7ea      	b.n	800c6a2 <quorem+0xe2>
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e7ee      	b.n	800c6ae <quorem+0xee>

0800c6d0 <_dtoa_r>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	ed2d 8b02 	vpush	{d8}
 800c6d8:	69c7      	ldr	r7, [r0, #28]
 800c6da:	b091      	sub	sp, #68	@ 0x44
 800c6dc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c6e0:	ec55 4b10 	vmov	r4, r5, d0
 800c6e4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800c6e6:	9107      	str	r1, [sp, #28]
 800c6e8:	4681      	mov	r9, r0
 800c6ea:	9209      	str	r2, [sp, #36]	@ 0x24
 800c6ec:	930d      	str	r3, [sp, #52]	@ 0x34
 800c6ee:	b97f      	cbnz	r7, 800c710 <_dtoa_r+0x40>
 800c6f0:	2010      	movs	r0, #16
 800c6f2:	f000 fd8d 	bl	800d210 <malloc>
 800c6f6:	4602      	mov	r2, r0
 800c6f8:	f8c9 001c 	str.w	r0, [r9, #28]
 800c6fc:	b920      	cbnz	r0, 800c708 <_dtoa_r+0x38>
 800c6fe:	4ba0      	ldr	r3, [pc, #640]	@ (800c980 <_dtoa_r+0x2b0>)
 800c700:	21ef      	movs	r1, #239	@ 0xef
 800c702:	48a0      	ldr	r0, [pc, #640]	@ (800c984 <_dtoa_r+0x2b4>)
 800c704:	f002 fb74 	bl	800edf0 <__assert_func>
 800c708:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c70c:	6007      	str	r7, [r0, #0]
 800c70e:	60c7      	str	r7, [r0, #12]
 800c710:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c714:	6819      	ldr	r1, [r3, #0]
 800c716:	b159      	cbz	r1, 800c730 <_dtoa_r+0x60>
 800c718:	685a      	ldr	r2, [r3, #4]
 800c71a:	604a      	str	r2, [r1, #4]
 800c71c:	2301      	movs	r3, #1
 800c71e:	4093      	lsls	r3, r2
 800c720:	608b      	str	r3, [r1, #8]
 800c722:	4648      	mov	r0, r9
 800c724:	f000 fe6a 	bl	800d3fc <_Bfree>
 800c728:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c72c:	2200      	movs	r2, #0
 800c72e:	601a      	str	r2, [r3, #0]
 800c730:	1e2b      	subs	r3, r5, #0
 800c732:	bfbb      	ittet	lt
 800c734:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c738:	9303      	strlt	r3, [sp, #12]
 800c73a:	2300      	movge	r3, #0
 800c73c:	2201      	movlt	r2, #1
 800c73e:	bfac      	ite	ge
 800c740:	6033      	strge	r3, [r6, #0]
 800c742:	6032      	strlt	r2, [r6, #0]
 800c744:	4b90      	ldr	r3, [pc, #576]	@ (800c988 <_dtoa_r+0x2b8>)
 800c746:	9e03      	ldr	r6, [sp, #12]
 800c748:	43b3      	bics	r3, r6
 800c74a:	d110      	bne.n	800c76e <_dtoa_r+0x9e>
 800c74c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c74e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c752:	6013      	str	r3, [r2, #0]
 800c754:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800c758:	4323      	orrs	r3, r4
 800c75a:	f000 84de 	beq.w	800d11a <_dtoa_r+0xa4a>
 800c75e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c760:	4f8a      	ldr	r7, [pc, #552]	@ (800c98c <_dtoa_r+0x2bc>)
 800c762:	2b00      	cmp	r3, #0
 800c764:	f000 84e0 	beq.w	800d128 <_dtoa_r+0xa58>
 800c768:	1cfb      	adds	r3, r7, #3
 800c76a:	f000 bcdb 	b.w	800d124 <_dtoa_r+0xa54>
 800c76e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800c772:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800c776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c77a:	d10a      	bne.n	800c792 <_dtoa_r+0xc2>
 800c77c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c77e:	2301      	movs	r3, #1
 800c780:	6013      	str	r3, [r2, #0]
 800c782:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c784:	b113      	cbz	r3, 800c78c <_dtoa_r+0xbc>
 800c786:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800c788:	4b81      	ldr	r3, [pc, #516]	@ (800c990 <_dtoa_r+0x2c0>)
 800c78a:	6013      	str	r3, [r2, #0]
 800c78c:	4f81      	ldr	r7, [pc, #516]	@ (800c994 <_dtoa_r+0x2c4>)
 800c78e:	f000 bccb 	b.w	800d128 <_dtoa_r+0xa58>
 800c792:	aa0e      	add	r2, sp, #56	@ 0x38
 800c794:	a90f      	add	r1, sp, #60	@ 0x3c
 800c796:	4648      	mov	r0, r9
 800c798:	eeb0 0b48 	vmov.f64	d0, d8
 800c79c:	f001 f9d2 	bl	800db44 <__d2b>
 800c7a0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800c7a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7a6:	9001      	str	r0, [sp, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d045      	beq.n	800c838 <_dtoa_r+0x168>
 800c7ac:	eeb0 7b48 	vmov.f64	d7, d8
 800c7b0:	ee18 1a90 	vmov	r1, s17
 800c7b4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c7b8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800c7bc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800c7c0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800c7c4:	2500      	movs	r5, #0
 800c7c6:	ee07 1a90 	vmov	s15, r1
 800c7ca:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800c7ce:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c968 <_dtoa_r+0x298>
 800c7d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800c7d6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800c970 <_dtoa_r+0x2a0>
 800c7da:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c7de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800c978 <_dtoa_r+0x2a8>
 800c7e2:	ee07 3a90 	vmov	s15, r3
 800c7e6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800c7ea:	eeb0 7b46 	vmov.f64	d7, d6
 800c7ee:	eea4 7b05 	vfma.f64	d7, d4, d5
 800c7f2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800c7f6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800c7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c7fe:	ee16 8a90 	vmov	r8, s13
 800c802:	d508      	bpl.n	800c816 <_dtoa_r+0x146>
 800c804:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800c808:	eeb4 6b47 	vcmp.f64	d6, d7
 800c80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c810:	bf18      	it	ne
 800c812:	f108 38ff 	addne.w	r8, r8, #4294967295
 800c816:	f1b8 0f16 	cmp.w	r8, #22
 800c81a:	d82b      	bhi.n	800c874 <_dtoa_r+0x1a4>
 800c81c:	495e      	ldr	r1, [pc, #376]	@ (800c998 <_dtoa_r+0x2c8>)
 800c81e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800c822:	ed91 7b00 	vldr	d7, [r1]
 800c826:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800c82a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c82e:	d501      	bpl.n	800c834 <_dtoa_r+0x164>
 800c830:	f108 38ff 	add.w	r8, r8, #4294967295
 800c834:	2100      	movs	r1, #0
 800c836:	e01e      	b.n	800c876 <_dtoa_r+0x1a6>
 800c838:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c83a:	4413      	add	r3, r2
 800c83c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800c840:	2920      	cmp	r1, #32
 800c842:	bfc1      	itttt	gt
 800c844:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800c848:	408e      	lslgt	r6, r1
 800c84a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800c84e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800c852:	bfd6      	itet	le
 800c854:	f1c1 0120 	rsble	r1, r1, #32
 800c858:	4331      	orrgt	r1, r6
 800c85a:	fa04 f101 	lslle.w	r1, r4, r1
 800c85e:	ee07 1a90 	vmov	s15, r1
 800c862:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800c866:	3b01      	subs	r3, #1
 800c868:	ee17 1a90 	vmov	r1, s15
 800c86c:	2501      	movs	r5, #1
 800c86e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800c872:	e7a8      	b.n	800c7c6 <_dtoa_r+0xf6>
 800c874:	2101      	movs	r1, #1
 800c876:	1ad2      	subs	r2, r2, r3
 800c878:	1e53      	subs	r3, r2, #1
 800c87a:	9306      	str	r3, [sp, #24]
 800c87c:	bf45      	ittet	mi
 800c87e:	f1c2 0301 	rsbmi	r3, r2, #1
 800c882:	9305      	strmi	r3, [sp, #20]
 800c884:	2300      	movpl	r3, #0
 800c886:	2300      	movmi	r3, #0
 800c888:	bf4c      	ite	mi
 800c88a:	9306      	strmi	r3, [sp, #24]
 800c88c:	9305      	strpl	r3, [sp, #20]
 800c88e:	f1b8 0f00 	cmp.w	r8, #0
 800c892:	910c      	str	r1, [sp, #48]	@ 0x30
 800c894:	db18      	blt.n	800c8c8 <_dtoa_r+0x1f8>
 800c896:	9b06      	ldr	r3, [sp, #24]
 800c898:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800c89c:	4443      	add	r3, r8
 800c89e:	9306      	str	r3, [sp, #24]
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	9a07      	ldr	r2, [sp, #28]
 800c8a4:	2a09      	cmp	r2, #9
 800c8a6:	d849      	bhi.n	800c93c <_dtoa_r+0x26c>
 800c8a8:	2a05      	cmp	r2, #5
 800c8aa:	bfc4      	itt	gt
 800c8ac:	3a04      	subgt	r2, #4
 800c8ae:	9207      	strgt	r2, [sp, #28]
 800c8b0:	9a07      	ldr	r2, [sp, #28]
 800c8b2:	f1a2 0202 	sub.w	r2, r2, #2
 800c8b6:	bfcc      	ite	gt
 800c8b8:	2400      	movgt	r4, #0
 800c8ba:	2401      	movle	r4, #1
 800c8bc:	2a03      	cmp	r2, #3
 800c8be:	d848      	bhi.n	800c952 <_dtoa_r+0x282>
 800c8c0:	e8df f002 	tbb	[pc, r2]
 800c8c4:	3a2c2e0b 	.word	0x3a2c2e0b
 800c8c8:	9b05      	ldr	r3, [sp, #20]
 800c8ca:	2200      	movs	r2, #0
 800c8cc:	eba3 0308 	sub.w	r3, r3, r8
 800c8d0:	9305      	str	r3, [sp, #20]
 800c8d2:	920a      	str	r2, [sp, #40]	@ 0x28
 800c8d4:	f1c8 0300 	rsb	r3, r8, #0
 800c8d8:	e7e3      	b.n	800c8a2 <_dtoa_r+0x1d2>
 800c8da:	2200      	movs	r2, #0
 800c8dc:	9208      	str	r2, [sp, #32]
 800c8de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c8e0:	2a00      	cmp	r2, #0
 800c8e2:	dc39      	bgt.n	800c958 <_dtoa_r+0x288>
 800c8e4:	f04f 0b01 	mov.w	fp, #1
 800c8e8:	46da      	mov	sl, fp
 800c8ea:	465a      	mov	r2, fp
 800c8ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800c8f0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800c8f4:	2100      	movs	r1, #0
 800c8f6:	2004      	movs	r0, #4
 800c8f8:	f100 0614 	add.w	r6, r0, #20
 800c8fc:	4296      	cmp	r6, r2
 800c8fe:	d930      	bls.n	800c962 <_dtoa_r+0x292>
 800c900:	6079      	str	r1, [r7, #4]
 800c902:	4648      	mov	r0, r9
 800c904:	9304      	str	r3, [sp, #16]
 800c906:	f000 fd39 	bl	800d37c <_Balloc>
 800c90a:	9b04      	ldr	r3, [sp, #16]
 800c90c:	4607      	mov	r7, r0
 800c90e:	2800      	cmp	r0, #0
 800c910:	d146      	bne.n	800c9a0 <_dtoa_r+0x2d0>
 800c912:	4b22      	ldr	r3, [pc, #136]	@ (800c99c <_dtoa_r+0x2cc>)
 800c914:	4602      	mov	r2, r0
 800c916:	f240 11af 	movw	r1, #431	@ 0x1af
 800c91a:	e6f2      	b.n	800c702 <_dtoa_r+0x32>
 800c91c:	2201      	movs	r2, #1
 800c91e:	e7dd      	b.n	800c8dc <_dtoa_r+0x20c>
 800c920:	2200      	movs	r2, #0
 800c922:	9208      	str	r2, [sp, #32]
 800c924:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c926:	eb08 0b02 	add.w	fp, r8, r2
 800c92a:	f10b 0a01 	add.w	sl, fp, #1
 800c92e:	4652      	mov	r2, sl
 800c930:	2a01      	cmp	r2, #1
 800c932:	bfb8      	it	lt
 800c934:	2201      	movlt	r2, #1
 800c936:	e7db      	b.n	800c8f0 <_dtoa_r+0x220>
 800c938:	2201      	movs	r2, #1
 800c93a:	e7f2      	b.n	800c922 <_dtoa_r+0x252>
 800c93c:	2401      	movs	r4, #1
 800c93e:	2200      	movs	r2, #0
 800c940:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800c944:	f04f 3bff 	mov.w	fp, #4294967295
 800c948:	2100      	movs	r1, #0
 800c94a:	46da      	mov	sl, fp
 800c94c:	2212      	movs	r2, #18
 800c94e:	9109      	str	r1, [sp, #36]	@ 0x24
 800c950:	e7ce      	b.n	800c8f0 <_dtoa_r+0x220>
 800c952:	2201      	movs	r2, #1
 800c954:	9208      	str	r2, [sp, #32]
 800c956:	e7f5      	b.n	800c944 <_dtoa_r+0x274>
 800c958:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 800c95c:	46da      	mov	sl, fp
 800c95e:	465a      	mov	r2, fp
 800c960:	e7c6      	b.n	800c8f0 <_dtoa_r+0x220>
 800c962:	3101      	adds	r1, #1
 800c964:	0040      	lsls	r0, r0, #1
 800c966:	e7c7      	b.n	800c8f8 <_dtoa_r+0x228>
 800c968:	636f4361 	.word	0x636f4361
 800c96c:	3fd287a7 	.word	0x3fd287a7
 800c970:	8b60c8b3 	.word	0x8b60c8b3
 800c974:	3fc68a28 	.word	0x3fc68a28
 800c978:	509f79fb 	.word	0x509f79fb
 800c97c:	3fd34413 	.word	0x3fd34413
 800c980:	0800fbb2 	.word	0x0800fbb2
 800c984:	0800fbc9 	.word	0x0800fbc9
 800c988:	7ff00000 	.word	0x7ff00000
 800c98c:	0800fbae 	.word	0x0800fbae
 800c990:	0800fb7d 	.word	0x0800fb7d
 800c994:	0800fb7c 	.word	0x0800fb7c
 800c998:	0800fcc0 	.word	0x0800fcc0
 800c99c:	0800fc21 	.word	0x0800fc21
 800c9a0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800c9a4:	f1ba 0f0e 	cmp.w	sl, #14
 800c9a8:	6010      	str	r0, [r2, #0]
 800c9aa:	d86f      	bhi.n	800ca8c <_dtoa_r+0x3bc>
 800c9ac:	2c00      	cmp	r4, #0
 800c9ae:	d06d      	beq.n	800ca8c <_dtoa_r+0x3bc>
 800c9b0:	f1b8 0f00 	cmp.w	r8, #0
 800c9b4:	f340 80c2 	ble.w	800cb3c <_dtoa_r+0x46c>
 800c9b8:	4aca      	ldr	r2, [pc, #808]	@ (800cce4 <_dtoa_r+0x614>)
 800c9ba:	f008 010f 	and.w	r1, r8, #15
 800c9be:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800c9c2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800c9c6:	ed92 7b00 	vldr	d7, [r2]
 800c9ca:	ea4f 1128 	mov.w	r1, r8, asr #4
 800c9ce:	f000 80a9 	beq.w	800cb24 <_dtoa_r+0x454>
 800c9d2:	4ac5      	ldr	r2, [pc, #788]	@ (800cce8 <_dtoa_r+0x618>)
 800c9d4:	ed92 6b08 	vldr	d6, [r2, #32]
 800c9d8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800c9dc:	ed8d 6b02 	vstr	d6, [sp, #8]
 800c9e0:	f001 010f 	and.w	r1, r1, #15
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	48c0      	ldr	r0, [pc, #768]	@ (800cce8 <_dtoa_r+0x618>)
 800c9e8:	2900      	cmp	r1, #0
 800c9ea:	f040 809d 	bne.w	800cb28 <_dtoa_r+0x458>
 800c9ee:	ed9d 6b02 	vldr	d6, [sp, #8]
 800c9f2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800c9f6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c9fa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800c9fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca00:	2900      	cmp	r1, #0
 800ca02:	f000 80c1 	beq.w	800cb88 <_dtoa_r+0x4b8>
 800ca06:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ca0a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ca0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca12:	f140 80b9 	bpl.w	800cb88 <_dtoa_r+0x4b8>
 800ca16:	f1ba 0f00 	cmp.w	sl, #0
 800ca1a:	f000 80b5 	beq.w	800cb88 <_dtoa_r+0x4b8>
 800ca1e:	f1bb 0f00 	cmp.w	fp, #0
 800ca22:	dd31      	ble.n	800ca88 <_dtoa_r+0x3b8>
 800ca24:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ca28:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ca2c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ca30:	f108 31ff 	add.w	r1, r8, #4294967295
 800ca34:	9104      	str	r1, [sp, #16]
 800ca36:	3201      	adds	r2, #1
 800ca38:	465c      	mov	r4, fp
 800ca3a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ca3e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ca42:	ee07 2a90 	vmov	s15, r2
 800ca46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ca4a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ca4e:	ee15 2a90 	vmov	r2, s11
 800ca52:	ec51 0b15 	vmov	r0, r1, d5
 800ca56:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ca5a:	2c00      	cmp	r4, #0
 800ca5c:	f040 8098 	bne.w	800cb90 <_dtoa_r+0x4c0>
 800ca60:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ca64:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ca68:	ec41 0b17 	vmov	d7, r0, r1
 800ca6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca74:	f300 8261 	bgt.w	800cf3a <_dtoa_r+0x86a>
 800ca78:	eeb1 7b47 	vneg.f64	d7, d7
 800ca7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ca80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca84:	f100 80f5 	bmi.w	800cc72 <_dtoa_r+0x5a2>
 800ca88:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ca8c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ca8e:	2a00      	cmp	r2, #0
 800ca90:	f2c0 812c 	blt.w	800ccec <_dtoa_r+0x61c>
 800ca94:	f1b8 0f0e 	cmp.w	r8, #14
 800ca98:	f300 8128 	bgt.w	800ccec <_dtoa_r+0x61c>
 800ca9c:	4b91      	ldr	r3, [pc, #580]	@ (800cce4 <_dtoa_r+0x614>)
 800ca9e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800caa2:	ed93 6b00 	vldr	d6, [r3]
 800caa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	da03      	bge.n	800cab4 <_dtoa_r+0x3e4>
 800caac:	f1ba 0f00 	cmp.w	sl, #0
 800cab0:	f340 80d2 	ble.w	800cc58 <_dtoa_r+0x588>
 800cab4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800cab8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cabc:	463e      	mov	r6, r7
 800cabe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800cac2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800cac6:	ee15 3a10 	vmov	r3, s10
 800caca:	3330      	adds	r3, #48	@ 0x30
 800cacc:	f806 3b01 	strb.w	r3, [r6], #1
 800cad0:	1bf3      	subs	r3, r6, r7
 800cad2:	459a      	cmp	sl, r3
 800cad4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800cad8:	eea3 7b46 	vfms.f64	d7, d3, d6
 800cadc:	f040 80f8 	bne.w	800ccd0 <_dtoa_r+0x600>
 800cae0:	ee37 7b07 	vadd.f64	d7, d7, d7
 800cae4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800cae8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caec:	f300 80dd 	bgt.w	800ccaa <_dtoa_r+0x5da>
 800caf0:	eeb4 7b46 	vcmp.f64	d7, d6
 800caf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800caf8:	d104      	bne.n	800cb04 <_dtoa_r+0x434>
 800cafa:	ee15 3a10 	vmov	r3, s10
 800cafe:	07db      	lsls	r3, r3, #31
 800cb00:	f100 80d3 	bmi.w	800ccaa <_dtoa_r+0x5da>
 800cb04:	9901      	ldr	r1, [sp, #4]
 800cb06:	4648      	mov	r0, r9
 800cb08:	f000 fc78 	bl	800d3fc <_Bfree>
 800cb0c:	2300      	movs	r3, #0
 800cb0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800cb10:	7033      	strb	r3, [r6, #0]
 800cb12:	f108 0301 	add.w	r3, r8, #1
 800cb16:	6013      	str	r3, [r2, #0]
 800cb18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	f000 8304 	beq.w	800d128 <_dtoa_r+0xa58>
 800cb20:	601e      	str	r6, [r3, #0]
 800cb22:	e301      	b.n	800d128 <_dtoa_r+0xa58>
 800cb24:	2202      	movs	r2, #2
 800cb26:	e75e      	b.n	800c9e6 <_dtoa_r+0x316>
 800cb28:	07cc      	lsls	r4, r1, #31
 800cb2a:	d504      	bpl.n	800cb36 <_dtoa_r+0x466>
 800cb2c:	ed90 6b00 	vldr	d6, [r0]
 800cb30:	3201      	adds	r2, #1
 800cb32:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb36:	1049      	asrs	r1, r1, #1
 800cb38:	3008      	adds	r0, #8
 800cb3a:	e755      	b.n	800c9e8 <_dtoa_r+0x318>
 800cb3c:	d022      	beq.n	800cb84 <_dtoa_r+0x4b4>
 800cb3e:	f1c8 0100 	rsb	r1, r8, #0
 800cb42:	4a68      	ldr	r2, [pc, #416]	@ (800cce4 <_dtoa_r+0x614>)
 800cb44:	f001 000f 	and.w	r0, r1, #15
 800cb48:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800cb4c:	ed92 7b00 	vldr	d7, [r2]
 800cb50:	ee28 7b07 	vmul.f64	d7, d8, d7
 800cb54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb58:	4863      	ldr	r0, [pc, #396]	@ (800cce8 <_dtoa_r+0x618>)
 800cb5a:	1109      	asrs	r1, r1, #4
 800cb5c:	2400      	movs	r4, #0
 800cb5e:	2202      	movs	r2, #2
 800cb60:	b929      	cbnz	r1, 800cb6e <_dtoa_r+0x49e>
 800cb62:	2c00      	cmp	r4, #0
 800cb64:	f43f af49 	beq.w	800c9fa <_dtoa_r+0x32a>
 800cb68:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cb6c:	e745      	b.n	800c9fa <_dtoa_r+0x32a>
 800cb6e:	07ce      	lsls	r6, r1, #31
 800cb70:	d505      	bpl.n	800cb7e <_dtoa_r+0x4ae>
 800cb72:	ed90 6b00 	vldr	d6, [r0]
 800cb76:	3201      	adds	r2, #1
 800cb78:	2401      	movs	r4, #1
 800cb7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800cb7e:	1049      	asrs	r1, r1, #1
 800cb80:	3008      	adds	r0, #8
 800cb82:	e7ed      	b.n	800cb60 <_dtoa_r+0x490>
 800cb84:	2202      	movs	r2, #2
 800cb86:	e738      	b.n	800c9fa <_dtoa_r+0x32a>
 800cb88:	f8cd 8010 	str.w	r8, [sp, #16]
 800cb8c:	4654      	mov	r4, sl
 800cb8e:	e754      	b.n	800ca3a <_dtoa_r+0x36a>
 800cb90:	4a54      	ldr	r2, [pc, #336]	@ (800cce4 <_dtoa_r+0x614>)
 800cb92:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800cb96:	ed12 4b02 	vldr	d4, [r2, #-8]
 800cb9a:	9a08      	ldr	r2, [sp, #32]
 800cb9c:	ec41 0b17 	vmov	d7, r0, r1
 800cba0:	443c      	add	r4, r7
 800cba2:	b34a      	cbz	r2, 800cbf8 <_dtoa_r+0x528>
 800cba4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800cba8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800cbac:	463e      	mov	r6, r7
 800cbae:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800cbb2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cbb6:	ee35 7b47 	vsub.f64	d7, d5, d7
 800cbba:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cbbe:	ee14 2a90 	vmov	r2, s9
 800cbc2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cbc6:	3230      	adds	r2, #48	@ 0x30
 800cbc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cbcc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cbd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbd4:	f806 2b01 	strb.w	r2, [r6], #1
 800cbd8:	d438      	bmi.n	800cc4c <_dtoa_r+0x57c>
 800cbda:	ee32 5b46 	vsub.f64	d5, d2, d6
 800cbde:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800cbe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cbe6:	d462      	bmi.n	800ccae <_dtoa_r+0x5de>
 800cbe8:	42a6      	cmp	r6, r4
 800cbea:	f43f af4d 	beq.w	800ca88 <_dtoa_r+0x3b8>
 800cbee:	ee27 7b03 	vmul.f64	d7, d7, d3
 800cbf2:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cbf6:	e7e0      	b.n	800cbba <_dtoa_r+0x4ea>
 800cbf8:	4621      	mov	r1, r4
 800cbfa:	463e      	mov	r6, r7
 800cbfc:	ee27 7b04 	vmul.f64	d7, d7, d4
 800cc00:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800cc04:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800cc08:	ee14 2a90 	vmov	r2, s9
 800cc0c:	3230      	adds	r2, #48	@ 0x30
 800cc0e:	f806 2b01 	strb.w	r2, [r6], #1
 800cc12:	42a6      	cmp	r6, r4
 800cc14:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800cc18:	ee36 6b45 	vsub.f64	d6, d6, d5
 800cc1c:	d119      	bne.n	800cc52 <_dtoa_r+0x582>
 800cc1e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800cc22:	ee37 4b05 	vadd.f64	d4, d7, d5
 800cc26:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800cc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc2e:	dc3e      	bgt.n	800ccae <_dtoa_r+0x5de>
 800cc30:	ee35 5b47 	vsub.f64	d5, d5, d7
 800cc34:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800cc38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc3c:	f57f af24 	bpl.w	800ca88 <_dtoa_r+0x3b8>
 800cc40:	460e      	mov	r6, r1
 800cc42:	3901      	subs	r1, #1
 800cc44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cc48:	2b30      	cmp	r3, #48	@ 0x30
 800cc4a:	d0f9      	beq.n	800cc40 <_dtoa_r+0x570>
 800cc4c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800cc50:	e758      	b.n	800cb04 <_dtoa_r+0x434>
 800cc52:	ee26 6b03 	vmul.f64	d6, d6, d3
 800cc56:	e7d5      	b.n	800cc04 <_dtoa_r+0x534>
 800cc58:	d10b      	bne.n	800cc72 <_dtoa_r+0x5a2>
 800cc5a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800cc5e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800cc62:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc66:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800cc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc6e:	f2c0 8161 	blt.w	800cf34 <_dtoa_r+0x864>
 800cc72:	2400      	movs	r4, #0
 800cc74:	4625      	mov	r5, r4
 800cc76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc78:	43db      	mvns	r3, r3
 800cc7a:	9304      	str	r3, [sp, #16]
 800cc7c:	463e      	mov	r6, r7
 800cc7e:	f04f 0800 	mov.w	r8, #0
 800cc82:	4621      	mov	r1, r4
 800cc84:	4648      	mov	r0, r9
 800cc86:	f000 fbb9 	bl	800d3fc <_Bfree>
 800cc8a:	2d00      	cmp	r5, #0
 800cc8c:	d0de      	beq.n	800cc4c <_dtoa_r+0x57c>
 800cc8e:	f1b8 0f00 	cmp.w	r8, #0
 800cc92:	d005      	beq.n	800cca0 <_dtoa_r+0x5d0>
 800cc94:	45a8      	cmp	r8, r5
 800cc96:	d003      	beq.n	800cca0 <_dtoa_r+0x5d0>
 800cc98:	4641      	mov	r1, r8
 800cc9a:	4648      	mov	r0, r9
 800cc9c:	f000 fbae 	bl	800d3fc <_Bfree>
 800cca0:	4629      	mov	r1, r5
 800cca2:	4648      	mov	r0, r9
 800cca4:	f000 fbaa 	bl	800d3fc <_Bfree>
 800cca8:	e7d0      	b.n	800cc4c <_dtoa_r+0x57c>
 800ccaa:	f8cd 8010 	str.w	r8, [sp, #16]
 800ccae:	4633      	mov	r3, r6
 800ccb0:	461e      	mov	r6, r3
 800ccb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ccb6:	2a39      	cmp	r2, #57	@ 0x39
 800ccb8:	d106      	bne.n	800ccc8 <_dtoa_r+0x5f8>
 800ccba:	429f      	cmp	r7, r3
 800ccbc:	d1f8      	bne.n	800ccb0 <_dtoa_r+0x5e0>
 800ccbe:	9a04      	ldr	r2, [sp, #16]
 800ccc0:	3201      	adds	r2, #1
 800ccc2:	9204      	str	r2, [sp, #16]
 800ccc4:	2230      	movs	r2, #48	@ 0x30
 800ccc6:	703a      	strb	r2, [r7, #0]
 800ccc8:	781a      	ldrb	r2, [r3, #0]
 800ccca:	3201      	adds	r2, #1
 800cccc:	701a      	strb	r2, [r3, #0]
 800ccce:	e7bd      	b.n	800cc4c <_dtoa_r+0x57c>
 800ccd0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ccd4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ccd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccdc:	f47f aeef 	bne.w	800cabe <_dtoa_r+0x3ee>
 800cce0:	e710      	b.n	800cb04 <_dtoa_r+0x434>
 800cce2:	bf00      	nop
 800cce4:	0800fcc0 	.word	0x0800fcc0
 800cce8:	0800fc98 	.word	0x0800fc98
 800ccec:	9908      	ldr	r1, [sp, #32]
 800ccee:	2900      	cmp	r1, #0
 800ccf0:	f000 80e3 	beq.w	800ceba <_dtoa_r+0x7ea>
 800ccf4:	9907      	ldr	r1, [sp, #28]
 800ccf6:	2901      	cmp	r1, #1
 800ccf8:	f300 80c8 	bgt.w	800ce8c <_dtoa_r+0x7bc>
 800ccfc:	2d00      	cmp	r5, #0
 800ccfe:	f000 80c1 	beq.w	800ce84 <_dtoa_r+0x7b4>
 800cd02:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cd06:	9e05      	ldr	r6, [sp, #20]
 800cd08:	461c      	mov	r4, r3
 800cd0a:	9304      	str	r3, [sp, #16]
 800cd0c:	9b05      	ldr	r3, [sp, #20]
 800cd0e:	4413      	add	r3, r2
 800cd10:	9305      	str	r3, [sp, #20]
 800cd12:	9b06      	ldr	r3, [sp, #24]
 800cd14:	2101      	movs	r1, #1
 800cd16:	4413      	add	r3, r2
 800cd18:	4648      	mov	r0, r9
 800cd1a:	9306      	str	r3, [sp, #24]
 800cd1c:	f000 fc6c 	bl	800d5f8 <__i2b>
 800cd20:	9b04      	ldr	r3, [sp, #16]
 800cd22:	4605      	mov	r5, r0
 800cd24:	b166      	cbz	r6, 800cd40 <_dtoa_r+0x670>
 800cd26:	9a06      	ldr	r2, [sp, #24]
 800cd28:	2a00      	cmp	r2, #0
 800cd2a:	dd09      	ble.n	800cd40 <_dtoa_r+0x670>
 800cd2c:	42b2      	cmp	r2, r6
 800cd2e:	9905      	ldr	r1, [sp, #20]
 800cd30:	bfa8      	it	ge
 800cd32:	4632      	movge	r2, r6
 800cd34:	1a89      	subs	r1, r1, r2
 800cd36:	9105      	str	r1, [sp, #20]
 800cd38:	9906      	ldr	r1, [sp, #24]
 800cd3a:	1ab6      	subs	r6, r6, r2
 800cd3c:	1a8a      	subs	r2, r1, r2
 800cd3e:	9206      	str	r2, [sp, #24]
 800cd40:	b1fb      	cbz	r3, 800cd82 <_dtoa_r+0x6b2>
 800cd42:	9a08      	ldr	r2, [sp, #32]
 800cd44:	2a00      	cmp	r2, #0
 800cd46:	f000 80bc 	beq.w	800cec2 <_dtoa_r+0x7f2>
 800cd4a:	b19c      	cbz	r4, 800cd74 <_dtoa_r+0x6a4>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4622      	mov	r2, r4
 800cd50:	4648      	mov	r0, r9
 800cd52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd54:	f000 fd10 	bl	800d778 <__pow5mult>
 800cd58:	9a01      	ldr	r2, [sp, #4]
 800cd5a:	4601      	mov	r1, r0
 800cd5c:	4605      	mov	r5, r0
 800cd5e:	4648      	mov	r0, r9
 800cd60:	f000 fc60 	bl	800d624 <__multiply>
 800cd64:	9901      	ldr	r1, [sp, #4]
 800cd66:	9004      	str	r0, [sp, #16]
 800cd68:	4648      	mov	r0, r9
 800cd6a:	f000 fb47 	bl	800d3fc <_Bfree>
 800cd6e:	9a04      	ldr	r2, [sp, #16]
 800cd70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cd72:	9201      	str	r2, [sp, #4]
 800cd74:	1b1a      	subs	r2, r3, r4
 800cd76:	d004      	beq.n	800cd82 <_dtoa_r+0x6b2>
 800cd78:	9901      	ldr	r1, [sp, #4]
 800cd7a:	4648      	mov	r0, r9
 800cd7c:	f000 fcfc 	bl	800d778 <__pow5mult>
 800cd80:	9001      	str	r0, [sp, #4]
 800cd82:	2101      	movs	r1, #1
 800cd84:	4648      	mov	r0, r9
 800cd86:	f000 fc37 	bl	800d5f8 <__i2b>
 800cd8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cd8c:	4604      	mov	r4, r0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	f000 81d0 	beq.w	800d134 <_dtoa_r+0xa64>
 800cd94:	461a      	mov	r2, r3
 800cd96:	4601      	mov	r1, r0
 800cd98:	4648      	mov	r0, r9
 800cd9a:	f000 fced 	bl	800d778 <__pow5mult>
 800cd9e:	9b07      	ldr	r3, [sp, #28]
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	4604      	mov	r4, r0
 800cda4:	f300 8095 	bgt.w	800ced2 <_dtoa_r+0x802>
 800cda8:	9b02      	ldr	r3, [sp, #8]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	f040 808b 	bne.w	800cec6 <_dtoa_r+0x7f6>
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	f040 8087 	bne.w	800ceca <_dtoa_r+0x7fa>
 800cdbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800cdc0:	0d12      	lsrs	r2, r2, #20
 800cdc2:	0512      	lsls	r2, r2, #20
 800cdc4:	2a00      	cmp	r2, #0
 800cdc6:	f000 8082 	beq.w	800cece <_dtoa_r+0x7fe>
 800cdca:	9b05      	ldr	r3, [sp, #20]
 800cdcc:	3301      	adds	r3, #1
 800cdce:	9305      	str	r3, [sp, #20]
 800cdd0:	9b06      	ldr	r3, [sp, #24]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	9306      	str	r3, [sp, #24]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f000 81af 	beq.w	800d140 <_dtoa_r+0xa70>
 800cde2:	6922      	ldr	r2, [r4, #16]
 800cde4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cde8:	6910      	ldr	r0, [r2, #16]
 800cdea:	f000 fbb9 	bl	800d560 <__hi0bits>
 800cdee:	f1c0 0020 	rsb	r0, r0, #32
 800cdf2:	9b06      	ldr	r3, [sp, #24]
 800cdf4:	4418      	add	r0, r3
 800cdf6:	f010 001f 	ands.w	r0, r0, #31
 800cdfa:	d076      	beq.n	800ceea <_dtoa_r+0x81a>
 800cdfc:	f1c0 0220 	rsb	r2, r0, #32
 800ce00:	2a04      	cmp	r2, #4
 800ce02:	dd69      	ble.n	800ced8 <_dtoa_r+0x808>
 800ce04:	9b05      	ldr	r3, [sp, #20]
 800ce06:	f1c0 001c 	rsb	r0, r0, #28
 800ce0a:	4403      	add	r3, r0
 800ce0c:	9305      	str	r3, [sp, #20]
 800ce0e:	9b06      	ldr	r3, [sp, #24]
 800ce10:	4406      	add	r6, r0
 800ce12:	4403      	add	r3, r0
 800ce14:	9306      	str	r3, [sp, #24]
 800ce16:	9b05      	ldr	r3, [sp, #20]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	dd05      	ble.n	800ce28 <_dtoa_r+0x758>
 800ce1c:	9901      	ldr	r1, [sp, #4]
 800ce1e:	461a      	mov	r2, r3
 800ce20:	4648      	mov	r0, r9
 800ce22:	f000 fd03 	bl	800d82c <__lshift>
 800ce26:	9001      	str	r0, [sp, #4]
 800ce28:	9b06      	ldr	r3, [sp, #24]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	dd05      	ble.n	800ce3a <_dtoa_r+0x76a>
 800ce2e:	4621      	mov	r1, r4
 800ce30:	461a      	mov	r2, r3
 800ce32:	4648      	mov	r0, r9
 800ce34:	f000 fcfa 	bl	800d82c <__lshift>
 800ce38:	4604      	mov	r4, r0
 800ce3a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d056      	beq.n	800ceee <_dtoa_r+0x81e>
 800ce40:	9801      	ldr	r0, [sp, #4]
 800ce42:	4621      	mov	r1, r4
 800ce44:	f000 fd5e 	bl	800d904 <__mcmp>
 800ce48:	2800      	cmp	r0, #0
 800ce4a:	da50      	bge.n	800ceee <_dtoa_r+0x81e>
 800ce4c:	f108 33ff 	add.w	r3, r8, #4294967295
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	9901      	ldr	r1, [sp, #4]
 800ce54:	2300      	movs	r3, #0
 800ce56:	220a      	movs	r2, #10
 800ce58:	4648      	mov	r0, r9
 800ce5a:	f000 faf1 	bl	800d440 <__multadd>
 800ce5e:	9b08      	ldr	r3, [sp, #32]
 800ce60:	9001      	str	r0, [sp, #4]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 816e 	beq.w	800d144 <_dtoa_r+0xa74>
 800ce68:	4629      	mov	r1, r5
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	220a      	movs	r2, #10
 800ce6e:	4648      	mov	r0, r9
 800ce70:	f000 fae6 	bl	800d440 <__multadd>
 800ce74:	f1bb 0f00 	cmp.w	fp, #0
 800ce78:	4605      	mov	r5, r0
 800ce7a:	dc64      	bgt.n	800cf46 <_dtoa_r+0x876>
 800ce7c:	9b07      	ldr	r3, [sp, #28]
 800ce7e:	2b02      	cmp	r3, #2
 800ce80:	dc3e      	bgt.n	800cf00 <_dtoa_r+0x830>
 800ce82:	e060      	b.n	800cf46 <_dtoa_r+0x876>
 800ce84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ce86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce8a:	e73c      	b.n	800cd06 <_dtoa_r+0x636>
 800ce8c:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ce90:	42a3      	cmp	r3, r4
 800ce92:	bfbf      	itttt	lt
 800ce94:	1ae2      	sublt	r2, r4, r3
 800ce96:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ce98:	189b      	addlt	r3, r3, r2
 800ce9a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 800ce9c:	bfae      	itee	ge
 800ce9e:	1b1c      	subge	r4, r3, r4
 800cea0:	4623      	movlt	r3, r4
 800cea2:	2400      	movlt	r4, #0
 800cea4:	f1ba 0f00 	cmp.w	sl, #0
 800cea8:	bfb5      	itete	lt
 800ceaa:	9a05      	ldrlt	r2, [sp, #20]
 800ceac:	9e05      	ldrge	r6, [sp, #20]
 800ceae:	eba2 060a 	sublt.w	r6, r2, sl
 800ceb2:	4652      	movge	r2, sl
 800ceb4:	bfb8      	it	lt
 800ceb6:	2200      	movlt	r2, #0
 800ceb8:	e727      	b.n	800cd0a <_dtoa_r+0x63a>
 800ceba:	9e05      	ldr	r6, [sp, #20]
 800cebc:	9d08      	ldr	r5, [sp, #32]
 800cebe:	461c      	mov	r4, r3
 800cec0:	e730      	b.n	800cd24 <_dtoa_r+0x654>
 800cec2:	461a      	mov	r2, r3
 800cec4:	e758      	b.n	800cd78 <_dtoa_r+0x6a8>
 800cec6:	2300      	movs	r3, #0
 800cec8:	e786      	b.n	800cdd8 <_dtoa_r+0x708>
 800ceca:	9b02      	ldr	r3, [sp, #8]
 800cecc:	e784      	b.n	800cdd8 <_dtoa_r+0x708>
 800cece:	920b      	str	r2, [sp, #44]	@ 0x2c
 800ced0:	e783      	b.n	800cdda <_dtoa_r+0x70a>
 800ced2:	2300      	movs	r3, #0
 800ced4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ced6:	e784      	b.n	800cde2 <_dtoa_r+0x712>
 800ced8:	d09d      	beq.n	800ce16 <_dtoa_r+0x746>
 800ceda:	9b05      	ldr	r3, [sp, #20]
 800cedc:	321c      	adds	r2, #28
 800cede:	4413      	add	r3, r2
 800cee0:	9305      	str	r3, [sp, #20]
 800cee2:	9b06      	ldr	r3, [sp, #24]
 800cee4:	4416      	add	r6, r2
 800cee6:	4413      	add	r3, r2
 800cee8:	e794      	b.n	800ce14 <_dtoa_r+0x744>
 800ceea:	4602      	mov	r2, r0
 800ceec:	e7f5      	b.n	800ceda <_dtoa_r+0x80a>
 800ceee:	f1ba 0f00 	cmp.w	sl, #0
 800cef2:	f8cd 8010 	str.w	r8, [sp, #16]
 800cef6:	46d3      	mov	fp, sl
 800cef8:	dc21      	bgt.n	800cf3e <_dtoa_r+0x86e>
 800cefa:	9b07      	ldr	r3, [sp, #28]
 800cefc:	2b02      	cmp	r3, #2
 800cefe:	dd1e      	ble.n	800cf3e <_dtoa_r+0x86e>
 800cf00:	f1bb 0f00 	cmp.w	fp, #0
 800cf04:	f47f aeb7 	bne.w	800cc76 <_dtoa_r+0x5a6>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	465b      	mov	r3, fp
 800cf0c:	2205      	movs	r2, #5
 800cf0e:	4648      	mov	r0, r9
 800cf10:	f000 fa96 	bl	800d440 <__multadd>
 800cf14:	4601      	mov	r1, r0
 800cf16:	4604      	mov	r4, r0
 800cf18:	9801      	ldr	r0, [sp, #4]
 800cf1a:	f000 fcf3 	bl	800d904 <__mcmp>
 800cf1e:	2800      	cmp	r0, #0
 800cf20:	f77f aea9 	ble.w	800cc76 <_dtoa_r+0x5a6>
 800cf24:	463e      	mov	r6, r7
 800cf26:	2331      	movs	r3, #49	@ 0x31
 800cf28:	f806 3b01 	strb.w	r3, [r6], #1
 800cf2c:	9b04      	ldr	r3, [sp, #16]
 800cf2e:	3301      	adds	r3, #1
 800cf30:	9304      	str	r3, [sp, #16]
 800cf32:	e6a4      	b.n	800cc7e <_dtoa_r+0x5ae>
 800cf34:	f8cd 8010 	str.w	r8, [sp, #16]
 800cf38:	4654      	mov	r4, sl
 800cf3a:	4625      	mov	r5, r4
 800cf3c:	e7f2      	b.n	800cf24 <_dtoa_r+0x854>
 800cf3e:	9b08      	ldr	r3, [sp, #32]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	f000 8103 	beq.w	800d14c <_dtoa_r+0xa7c>
 800cf46:	2e00      	cmp	r6, #0
 800cf48:	dd05      	ble.n	800cf56 <_dtoa_r+0x886>
 800cf4a:	4629      	mov	r1, r5
 800cf4c:	4632      	mov	r2, r6
 800cf4e:	4648      	mov	r0, r9
 800cf50:	f000 fc6c 	bl	800d82c <__lshift>
 800cf54:	4605      	mov	r5, r0
 800cf56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d058      	beq.n	800d00e <_dtoa_r+0x93e>
 800cf5c:	6869      	ldr	r1, [r5, #4]
 800cf5e:	4648      	mov	r0, r9
 800cf60:	f000 fa0c 	bl	800d37c <_Balloc>
 800cf64:	4606      	mov	r6, r0
 800cf66:	b928      	cbnz	r0, 800cf74 <_dtoa_r+0x8a4>
 800cf68:	4b82      	ldr	r3, [pc, #520]	@ (800d174 <_dtoa_r+0xaa4>)
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800cf70:	f7ff bbc7 	b.w	800c702 <_dtoa_r+0x32>
 800cf74:	692a      	ldr	r2, [r5, #16]
 800cf76:	3202      	adds	r2, #2
 800cf78:	0092      	lsls	r2, r2, #2
 800cf7a:	f105 010c 	add.w	r1, r5, #12
 800cf7e:	300c      	adds	r0, #12
 800cf80:	f001 ff1e 	bl	800edc0 <memcpy>
 800cf84:	2201      	movs	r2, #1
 800cf86:	4631      	mov	r1, r6
 800cf88:	4648      	mov	r0, r9
 800cf8a:	f000 fc4f 	bl	800d82c <__lshift>
 800cf8e:	1c7b      	adds	r3, r7, #1
 800cf90:	9305      	str	r3, [sp, #20]
 800cf92:	eb07 030b 	add.w	r3, r7, fp
 800cf96:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf98:	9b02      	ldr	r3, [sp, #8]
 800cf9a:	f003 0301 	and.w	r3, r3, #1
 800cf9e:	46a8      	mov	r8, r5
 800cfa0:	9308      	str	r3, [sp, #32]
 800cfa2:	4605      	mov	r5, r0
 800cfa4:	9b05      	ldr	r3, [sp, #20]
 800cfa6:	9801      	ldr	r0, [sp, #4]
 800cfa8:	4621      	mov	r1, r4
 800cfaa:	f103 3bff 	add.w	fp, r3, #4294967295
 800cfae:	f7ff fb07 	bl	800c5c0 <quorem>
 800cfb2:	4641      	mov	r1, r8
 800cfb4:	9002      	str	r0, [sp, #8]
 800cfb6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800cfba:	9801      	ldr	r0, [sp, #4]
 800cfbc:	f000 fca2 	bl	800d904 <__mcmp>
 800cfc0:	462a      	mov	r2, r5
 800cfc2:	9006      	str	r0, [sp, #24]
 800cfc4:	4621      	mov	r1, r4
 800cfc6:	4648      	mov	r0, r9
 800cfc8:	f000 fcb8 	bl	800d93c <__mdiff>
 800cfcc:	68c2      	ldr	r2, [r0, #12]
 800cfce:	4606      	mov	r6, r0
 800cfd0:	b9fa      	cbnz	r2, 800d012 <_dtoa_r+0x942>
 800cfd2:	4601      	mov	r1, r0
 800cfd4:	9801      	ldr	r0, [sp, #4]
 800cfd6:	f000 fc95 	bl	800d904 <__mcmp>
 800cfda:	4602      	mov	r2, r0
 800cfdc:	4631      	mov	r1, r6
 800cfde:	4648      	mov	r0, r9
 800cfe0:	920a      	str	r2, [sp, #40]	@ 0x28
 800cfe2:	f000 fa0b 	bl	800d3fc <_Bfree>
 800cfe6:	9b07      	ldr	r3, [sp, #28]
 800cfe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfea:	9e05      	ldr	r6, [sp, #20]
 800cfec:	ea43 0102 	orr.w	r1, r3, r2
 800cff0:	9b08      	ldr	r3, [sp, #32]
 800cff2:	4319      	orrs	r1, r3
 800cff4:	d10f      	bne.n	800d016 <_dtoa_r+0x946>
 800cff6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800cffa:	d028      	beq.n	800d04e <_dtoa_r+0x97e>
 800cffc:	9b06      	ldr	r3, [sp, #24]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd02      	ble.n	800d008 <_dtoa_r+0x938>
 800d002:	9b02      	ldr	r3, [sp, #8]
 800d004:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800d008:	f88b a000 	strb.w	sl, [fp]
 800d00c:	e639      	b.n	800cc82 <_dtoa_r+0x5b2>
 800d00e:	4628      	mov	r0, r5
 800d010:	e7bd      	b.n	800cf8e <_dtoa_r+0x8be>
 800d012:	2201      	movs	r2, #1
 800d014:	e7e2      	b.n	800cfdc <_dtoa_r+0x90c>
 800d016:	9b06      	ldr	r3, [sp, #24]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	db04      	blt.n	800d026 <_dtoa_r+0x956>
 800d01c:	9907      	ldr	r1, [sp, #28]
 800d01e:	430b      	orrs	r3, r1
 800d020:	9908      	ldr	r1, [sp, #32]
 800d022:	430b      	orrs	r3, r1
 800d024:	d120      	bne.n	800d068 <_dtoa_r+0x998>
 800d026:	2a00      	cmp	r2, #0
 800d028:	ddee      	ble.n	800d008 <_dtoa_r+0x938>
 800d02a:	9901      	ldr	r1, [sp, #4]
 800d02c:	2201      	movs	r2, #1
 800d02e:	4648      	mov	r0, r9
 800d030:	f000 fbfc 	bl	800d82c <__lshift>
 800d034:	4621      	mov	r1, r4
 800d036:	9001      	str	r0, [sp, #4]
 800d038:	f000 fc64 	bl	800d904 <__mcmp>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	dc03      	bgt.n	800d048 <_dtoa_r+0x978>
 800d040:	d1e2      	bne.n	800d008 <_dtoa_r+0x938>
 800d042:	f01a 0f01 	tst.w	sl, #1
 800d046:	d0df      	beq.n	800d008 <_dtoa_r+0x938>
 800d048:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d04c:	d1d9      	bne.n	800d002 <_dtoa_r+0x932>
 800d04e:	2339      	movs	r3, #57	@ 0x39
 800d050:	f88b 3000 	strb.w	r3, [fp]
 800d054:	4633      	mov	r3, r6
 800d056:	461e      	mov	r6, r3
 800d058:	3b01      	subs	r3, #1
 800d05a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d05e:	2a39      	cmp	r2, #57	@ 0x39
 800d060:	d053      	beq.n	800d10a <_dtoa_r+0xa3a>
 800d062:	3201      	adds	r2, #1
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	e60c      	b.n	800cc82 <_dtoa_r+0x5b2>
 800d068:	2a00      	cmp	r2, #0
 800d06a:	dd07      	ble.n	800d07c <_dtoa_r+0x9ac>
 800d06c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800d070:	d0ed      	beq.n	800d04e <_dtoa_r+0x97e>
 800d072:	f10a 0301 	add.w	r3, sl, #1
 800d076:	f88b 3000 	strb.w	r3, [fp]
 800d07a:	e602      	b.n	800cc82 <_dtoa_r+0x5b2>
 800d07c:	9b05      	ldr	r3, [sp, #20]
 800d07e:	9a05      	ldr	r2, [sp, #20]
 800d080:	f803 ac01 	strb.w	sl, [r3, #-1]
 800d084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d086:	4293      	cmp	r3, r2
 800d088:	d029      	beq.n	800d0de <_dtoa_r+0xa0e>
 800d08a:	9901      	ldr	r1, [sp, #4]
 800d08c:	2300      	movs	r3, #0
 800d08e:	220a      	movs	r2, #10
 800d090:	4648      	mov	r0, r9
 800d092:	f000 f9d5 	bl	800d440 <__multadd>
 800d096:	45a8      	cmp	r8, r5
 800d098:	9001      	str	r0, [sp, #4]
 800d09a:	f04f 0300 	mov.w	r3, #0
 800d09e:	f04f 020a 	mov.w	r2, #10
 800d0a2:	4641      	mov	r1, r8
 800d0a4:	4648      	mov	r0, r9
 800d0a6:	d107      	bne.n	800d0b8 <_dtoa_r+0x9e8>
 800d0a8:	f000 f9ca 	bl	800d440 <__multadd>
 800d0ac:	4680      	mov	r8, r0
 800d0ae:	4605      	mov	r5, r0
 800d0b0:	9b05      	ldr	r3, [sp, #20]
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	e775      	b.n	800cfa4 <_dtoa_r+0x8d4>
 800d0b8:	f000 f9c2 	bl	800d440 <__multadd>
 800d0bc:	4629      	mov	r1, r5
 800d0be:	4680      	mov	r8, r0
 800d0c0:	2300      	movs	r3, #0
 800d0c2:	220a      	movs	r2, #10
 800d0c4:	4648      	mov	r0, r9
 800d0c6:	f000 f9bb 	bl	800d440 <__multadd>
 800d0ca:	4605      	mov	r5, r0
 800d0cc:	e7f0      	b.n	800d0b0 <_dtoa_r+0x9e0>
 800d0ce:	f1bb 0f00 	cmp.w	fp, #0
 800d0d2:	bfcc      	ite	gt
 800d0d4:	465e      	movgt	r6, fp
 800d0d6:	2601      	movle	r6, #1
 800d0d8:	443e      	add	r6, r7
 800d0da:	f04f 0800 	mov.w	r8, #0
 800d0de:	9901      	ldr	r1, [sp, #4]
 800d0e0:	2201      	movs	r2, #1
 800d0e2:	4648      	mov	r0, r9
 800d0e4:	f000 fba2 	bl	800d82c <__lshift>
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	9001      	str	r0, [sp, #4]
 800d0ec:	f000 fc0a 	bl	800d904 <__mcmp>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	dcaf      	bgt.n	800d054 <_dtoa_r+0x984>
 800d0f4:	d102      	bne.n	800d0fc <_dtoa_r+0xa2c>
 800d0f6:	f01a 0f01 	tst.w	sl, #1
 800d0fa:	d1ab      	bne.n	800d054 <_dtoa_r+0x984>
 800d0fc:	4633      	mov	r3, r6
 800d0fe:	461e      	mov	r6, r3
 800d100:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d104:	2a30      	cmp	r2, #48	@ 0x30
 800d106:	d0fa      	beq.n	800d0fe <_dtoa_r+0xa2e>
 800d108:	e5bb      	b.n	800cc82 <_dtoa_r+0x5b2>
 800d10a:	429f      	cmp	r7, r3
 800d10c:	d1a3      	bne.n	800d056 <_dtoa_r+0x986>
 800d10e:	9b04      	ldr	r3, [sp, #16]
 800d110:	3301      	adds	r3, #1
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	2331      	movs	r3, #49	@ 0x31
 800d116:	703b      	strb	r3, [r7, #0]
 800d118:	e5b3      	b.n	800cc82 <_dtoa_r+0x5b2>
 800d11a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d11c:	4f16      	ldr	r7, [pc, #88]	@ (800d178 <_dtoa_r+0xaa8>)
 800d11e:	b11b      	cbz	r3, 800d128 <_dtoa_r+0xa58>
 800d120:	f107 0308 	add.w	r3, r7, #8
 800d124:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800d126:	6013      	str	r3, [r2, #0]
 800d128:	4638      	mov	r0, r7
 800d12a:	b011      	add	sp, #68	@ 0x44
 800d12c:	ecbd 8b02 	vpop	{d8}
 800d130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d134:	9b07      	ldr	r3, [sp, #28]
 800d136:	2b01      	cmp	r3, #1
 800d138:	f77f ae36 	ble.w	800cda8 <_dtoa_r+0x6d8>
 800d13c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d13e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d140:	2001      	movs	r0, #1
 800d142:	e656      	b.n	800cdf2 <_dtoa_r+0x722>
 800d144:	f1bb 0f00 	cmp.w	fp, #0
 800d148:	f77f aed7 	ble.w	800cefa <_dtoa_r+0x82a>
 800d14c:	463e      	mov	r6, r7
 800d14e:	9801      	ldr	r0, [sp, #4]
 800d150:	4621      	mov	r1, r4
 800d152:	f7ff fa35 	bl	800c5c0 <quorem>
 800d156:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800d15a:	f806 ab01 	strb.w	sl, [r6], #1
 800d15e:	1bf2      	subs	r2, r6, r7
 800d160:	4593      	cmp	fp, r2
 800d162:	ddb4      	ble.n	800d0ce <_dtoa_r+0x9fe>
 800d164:	9901      	ldr	r1, [sp, #4]
 800d166:	2300      	movs	r3, #0
 800d168:	220a      	movs	r2, #10
 800d16a:	4648      	mov	r0, r9
 800d16c:	f000 f968 	bl	800d440 <__multadd>
 800d170:	9001      	str	r0, [sp, #4]
 800d172:	e7ec      	b.n	800d14e <_dtoa_r+0xa7e>
 800d174:	0800fc21 	.word	0x0800fc21
 800d178:	0800fba5 	.word	0x0800fba5

0800d17c <_free_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4605      	mov	r5, r0
 800d180:	2900      	cmp	r1, #0
 800d182:	d041      	beq.n	800d208 <_free_r+0x8c>
 800d184:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d188:	1f0c      	subs	r4, r1, #4
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	bfb8      	it	lt
 800d18e:	18e4      	addlt	r4, r4, r3
 800d190:	f000 f8e8 	bl	800d364 <__malloc_lock>
 800d194:	4a1d      	ldr	r2, [pc, #116]	@ (800d20c <_free_r+0x90>)
 800d196:	6813      	ldr	r3, [r2, #0]
 800d198:	b933      	cbnz	r3, 800d1a8 <_free_r+0x2c>
 800d19a:	6063      	str	r3, [r4, #4]
 800d19c:	6014      	str	r4, [r2, #0]
 800d19e:	4628      	mov	r0, r5
 800d1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1a4:	f000 b8e4 	b.w	800d370 <__malloc_unlock>
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	d908      	bls.n	800d1be <_free_r+0x42>
 800d1ac:	6820      	ldr	r0, [r4, #0]
 800d1ae:	1821      	adds	r1, r4, r0
 800d1b0:	428b      	cmp	r3, r1
 800d1b2:	bf01      	itttt	eq
 800d1b4:	6819      	ldreq	r1, [r3, #0]
 800d1b6:	685b      	ldreq	r3, [r3, #4]
 800d1b8:	1809      	addeq	r1, r1, r0
 800d1ba:	6021      	streq	r1, [r4, #0]
 800d1bc:	e7ed      	b.n	800d19a <_free_r+0x1e>
 800d1be:	461a      	mov	r2, r3
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	b10b      	cbz	r3, 800d1c8 <_free_r+0x4c>
 800d1c4:	42a3      	cmp	r3, r4
 800d1c6:	d9fa      	bls.n	800d1be <_free_r+0x42>
 800d1c8:	6811      	ldr	r1, [r2, #0]
 800d1ca:	1850      	adds	r0, r2, r1
 800d1cc:	42a0      	cmp	r0, r4
 800d1ce:	d10b      	bne.n	800d1e8 <_free_r+0x6c>
 800d1d0:	6820      	ldr	r0, [r4, #0]
 800d1d2:	4401      	add	r1, r0
 800d1d4:	1850      	adds	r0, r2, r1
 800d1d6:	4283      	cmp	r3, r0
 800d1d8:	6011      	str	r1, [r2, #0]
 800d1da:	d1e0      	bne.n	800d19e <_free_r+0x22>
 800d1dc:	6818      	ldr	r0, [r3, #0]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	6053      	str	r3, [r2, #4]
 800d1e2:	4408      	add	r0, r1
 800d1e4:	6010      	str	r0, [r2, #0]
 800d1e6:	e7da      	b.n	800d19e <_free_r+0x22>
 800d1e8:	d902      	bls.n	800d1f0 <_free_r+0x74>
 800d1ea:	230c      	movs	r3, #12
 800d1ec:	602b      	str	r3, [r5, #0]
 800d1ee:	e7d6      	b.n	800d19e <_free_r+0x22>
 800d1f0:	6820      	ldr	r0, [r4, #0]
 800d1f2:	1821      	adds	r1, r4, r0
 800d1f4:	428b      	cmp	r3, r1
 800d1f6:	bf04      	itt	eq
 800d1f8:	6819      	ldreq	r1, [r3, #0]
 800d1fa:	685b      	ldreq	r3, [r3, #4]
 800d1fc:	6063      	str	r3, [r4, #4]
 800d1fe:	bf04      	itt	eq
 800d200:	1809      	addeq	r1, r1, r0
 800d202:	6021      	streq	r1, [r4, #0]
 800d204:	6054      	str	r4, [r2, #4]
 800d206:	e7ca      	b.n	800d19e <_free_r+0x22>
 800d208:	bd38      	pop	{r3, r4, r5, pc}
 800d20a:	bf00      	nop
 800d20c:	2400061c 	.word	0x2400061c

0800d210 <malloc>:
 800d210:	4b02      	ldr	r3, [pc, #8]	@ (800d21c <malloc+0xc>)
 800d212:	4601      	mov	r1, r0
 800d214:	6818      	ldr	r0, [r3, #0]
 800d216:	f000 b825 	b.w	800d264 <_malloc_r>
 800d21a:	bf00      	nop
 800d21c:	24000020 	.word	0x24000020

0800d220 <sbrk_aligned>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	4e0f      	ldr	r6, [pc, #60]	@ (800d260 <sbrk_aligned+0x40>)
 800d224:	460c      	mov	r4, r1
 800d226:	6831      	ldr	r1, [r6, #0]
 800d228:	4605      	mov	r5, r0
 800d22a:	b911      	cbnz	r1, 800d232 <sbrk_aligned+0x12>
 800d22c:	f001 fdb8 	bl	800eda0 <_sbrk_r>
 800d230:	6030      	str	r0, [r6, #0]
 800d232:	4621      	mov	r1, r4
 800d234:	4628      	mov	r0, r5
 800d236:	f001 fdb3 	bl	800eda0 <_sbrk_r>
 800d23a:	1c43      	adds	r3, r0, #1
 800d23c:	d103      	bne.n	800d246 <sbrk_aligned+0x26>
 800d23e:	f04f 34ff 	mov.w	r4, #4294967295
 800d242:	4620      	mov	r0, r4
 800d244:	bd70      	pop	{r4, r5, r6, pc}
 800d246:	1cc4      	adds	r4, r0, #3
 800d248:	f024 0403 	bic.w	r4, r4, #3
 800d24c:	42a0      	cmp	r0, r4
 800d24e:	d0f8      	beq.n	800d242 <sbrk_aligned+0x22>
 800d250:	1a21      	subs	r1, r4, r0
 800d252:	4628      	mov	r0, r5
 800d254:	f001 fda4 	bl	800eda0 <_sbrk_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	d1f2      	bne.n	800d242 <sbrk_aligned+0x22>
 800d25c:	e7ef      	b.n	800d23e <sbrk_aligned+0x1e>
 800d25e:	bf00      	nop
 800d260:	24000618 	.word	0x24000618

0800d264 <_malloc_r>:
 800d264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d268:	1ccd      	adds	r5, r1, #3
 800d26a:	f025 0503 	bic.w	r5, r5, #3
 800d26e:	3508      	adds	r5, #8
 800d270:	2d0c      	cmp	r5, #12
 800d272:	bf38      	it	cc
 800d274:	250c      	movcc	r5, #12
 800d276:	2d00      	cmp	r5, #0
 800d278:	4606      	mov	r6, r0
 800d27a:	db01      	blt.n	800d280 <_malloc_r+0x1c>
 800d27c:	42a9      	cmp	r1, r5
 800d27e:	d904      	bls.n	800d28a <_malloc_r+0x26>
 800d280:	230c      	movs	r3, #12
 800d282:	6033      	str	r3, [r6, #0]
 800d284:	2000      	movs	r0, #0
 800d286:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d28a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d360 <_malloc_r+0xfc>
 800d28e:	f000 f869 	bl	800d364 <__malloc_lock>
 800d292:	f8d8 3000 	ldr.w	r3, [r8]
 800d296:	461c      	mov	r4, r3
 800d298:	bb44      	cbnz	r4, 800d2ec <_malloc_r+0x88>
 800d29a:	4629      	mov	r1, r5
 800d29c:	4630      	mov	r0, r6
 800d29e:	f7ff ffbf 	bl	800d220 <sbrk_aligned>
 800d2a2:	1c43      	adds	r3, r0, #1
 800d2a4:	4604      	mov	r4, r0
 800d2a6:	d158      	bne.n	800d35a <_malloc_r+0xf6>
 800d2a8:	f8d8 4000 	ldr.w	r4, [r8]
 800d2ac:	4627      	mov	r7, r4
 800d2ae:	2f00      	cmp	r7, #0
 800d2b0:	d143      	bne.n	800d33a <_malloc_r+0xd6>
 800d2b2:	2c00      	cmp	r4, #0
 800d2b4:	d04b      	beq.n	800d34e <_malloc_r+0xea>
 800d2b6:	6823      	ldr	r3, [r4, #0]
 800d2b8:	4639      	mov	r1, r7
 800d2ba:	4630      	mov	r0, r6
 800d2bc:	eb04 0903 	add.w	r9, r4, r3
 800d2c0:	f001 fd6e 	bl	800eda0 <_sbrk_r>
 800d2c4:	4581      	cmp	r9, r0
 800d2c6:	d142      	bne.n	800d34e <_malloc_r+0xea>
 800d2c8:	6821      	ldr	r1, [r4, #0]
 800d2ca:	1a6d      	subs	r5, r5, r1
 800d2cc:	4629      	mov	r1, r5
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f7ff ffa6 	bl	800d220 <sbrk_aligned>
 800d2d4:	3001      	adds	r0, #1
 800d2d6:	d03a      	beq.n	800d34e <_malloc_r+0xea>
 800d2d8:	6823      	ldr	r3, [r4, #0]
 800d2da:	442b      	add	r3, r5
 800d2dc:	6023      	str	r3, [r4, #0]
 800d2de:	f8d8 3000 	ldr.w	r3, [r8]
 800d2e2:	685a      	ldr	r2, [r3, #4]
 800d2e4:	bb62      	cbnz	r2, 800d340 <_malloc_r+0xdc>
 800d2e6:	f8c8 7000 	str.w	r7, [r8]
 800d2ea:	e00f      	b.n	800d30c <_malloc_r+0xa8>
 800d2ec:	6822      	ldr	r2, [r4, #0]
 800d2ee:	1b52      	subs	r2, r2, r5
 800d2f0:	d420      	bmi.n	800d334 <_malloc_r+0xd0>
 800d2f2:	2a0b      	cmp	r2, #11
 800d2f4:	d917      	bls.n	800d326 <_malloc_r+0xc2>
 800d2f6:	1961      	adds	r1, r4, r5
 800d2f8:	42a3      	cmp	r3, r4
 800d2fa:	6025      	str	r5, [r4, #0]
 800d2fc:	bf18      	it	ne
 800d2fe:	6059      	strne	r1, [r3, #4]
 800d300:	6863      	ldr	r3, [r4, #4]
 800d302:	bf08      	it	eq
 800d304:	f8c8 1000 	streq.w	r1, [r8]
 800d308:	5162      	str	r2, [r4, r5]
 800d30a:	604b      	str	r3, [r1, #4]
 800d30c:	4630      	mov	r0, r6
 800d30e:	f000 f82f 	bl	800d370 <__malloc_unlock>
 800d312:	f104 000b 	add.w	r0, r4, #11
 800d316:	1d23      	adds	r3, r4, #4
 800d318:	f020 0007 	bic.w	r0, r0, #7
 800d31c:	1ac2      	subs	r2, r0, r3
 800d31e:	bf1c      	itt	ne
 800d320:	1a1b      	subne	r3, r3, r0
 800d322:	50a3      	strne	r3, [r4, r2]
 800d324:	e7af      	b.n	800d286 <_malloc_r+0x22>
 800d326:	6862      	ldr	r2, [r4, #4]
 800d328:	42a3      	cmp	r3, r4
 800d32a:	bf0c      	ite	eq
 800d32c:	f8c8 2000 	streq.w	r2, [r8]
 800d330:	605a      	strne	r2, [r3, #4]
 800d332:	e7eb      	b.n	800d30c <_malloc_r+0xa8>
 800d334:	4623      	mov	r3, r4
 800d336:	6864      	ldr	r4, [r4, #4]
 800d338:	e7ae      	b.n	800d298 <_malloc_r+0x34>
 800d33a:	463c      	mov	r4, r7
 800d33c:	687f      	ldr	r7, [r7, #4]
 800d33e:	e7b6      	b.n	800d2ae <_malloc_r+0x4a>
 800d340:	461a      	mov	r2, r3
 800d342:	685b      	ldr	r3, [r3, #4]
 800d344:	42a3      	cmp	r3, r4
 800d346:	d1fb      	bne.n	800d340 <_malloc_r+0xdc>
 800d348:	2300      	movs	r3, #0
 800d34a:	6053      	str	r3, [r2, #4]
 800d34c:	e7de      	b.n	800d30c <_malloc_r+0xa8>
 800d34e:	230c      	movs	r3, #12
 800d350:	6033      	str	r3, [r6, #0]
 800d352:	4630      	mov	r0, r6
 800d354:	f000 f80c 	bl	800d370 <__malloc_unlock>
 800d358:	e794      	b.n	800d284 <_malloc_r+0x20>
 800d35a:	6005      	str	r5, [r0, #0]
 800d35c:	e7d6      	b.n	800d30c <_malloc_r+0xa8>
 800d35e:	bf00      	nop
 800d360:	2400061c 	.word	0x2400061c

0800d364 <__malloc_lock>:
 800d364:	4801      	ldr	r0, [pc, #4]	@ (800d36c <__malloc_lock+0x8>)
 800d366:	f7ff b922 	b.w	800c5ae <__retarget_lock_acquire_recursive>
 800d36a:	bf00      	nop
 800d36c:	24000614 	.word	0x24000614

0800d370 <__malloc_unlock>:
 800d370:	4801      	ldr	r0, [pc, #4]	@ (800d378 <__malloc_unlock+0x8>)
 800d372:	f7ff b91d 	b.w	800c5b0 <__retarget_lock_release_recursive>
 800d376:	bf00      	nop
 800d378:	24000614 	.word	0x24000614

0800d37c <_Balloc>:
 800d37c:	b570      	push	{r4, r5, r6, lr}
 800d37e:	69c6      	ldr	r6, [r0, #28]
 800d380:	4604      	mov	r4, r0
 800d382:	460d      	mov	r5, r1
 800d384:	b976      	cbnz	r6, 800d3a4 <_Balloc+0x28>
 800d386:	2010      	movs	r0, #16
 800d388:	f7ff ff42 	bl	800d210 <malloc>
 800d38c:	4602      	mov	r2, r0
 800d38e:	61e0      	str	r0, [r4, #28]
 800d390:	b920      	cbnz	r0, 800d39c <_Balloc+0x20>
 800d392:	4b18      	ldr	r3, [pc, #96]	@ (800d3f4 <_Balloc+0x78>)
 800d394:	4818      	ldr	r0, [pc, #96]	@ (800d3f8 <_Balloc+0x7c>)
 800d396:	216b      	movs	r1, #107	@ 0x6b
 800d398:	f001 fd2a 	bl	800edf0 <__assert_func>
 800d39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d3a0:	6006      	str	r6, [r0, #0]
 800d3a2:	60c6      	str	r6, [r0, #12]
 800d3a4:	69e6      	ldr	r6, [r4, #28]
 800d3a6:	68f3      	ldr	r3, [r6, #12]
 800d3a8:	b183      	cbz	r3, 800d3cc <_Balloc+0x50>
 800d3aa:	69e3      	ldr	r3, [r4, #28]
 800d3ac:	68db      	ldr	r3, [r3, #12]
 800d3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d3b2:	b9b8      	cbnz	r0, 800d3e4 <_Balloc+0x68>
 800d3b4:	2101      	movs	r1, #1
 800d3b6:	fa01 f605 	lsl.w	r6, r1, r5
 800d3ba:	1d72      	adds	r2, r6, #5
 800d3bc:	0092      	lsls	r2, r2, #2
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 fd34 	bl	800ee2c <_calloc_r>
 800d3c4:	b160      	cbz	r0, 800d3e0 <_Balloc+0x64>
 800d3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d3ca:	e00e      	b.n	800d3ea <_Balloc+0x6e>
 800d3cc:	2221      	movs	r2, #33	@ 0x21
 800d3ce:	2104      	movs	r1, #4
 800d3d0:	4620      	mov	r0, r4
 800d3d2:	f001 fd2b 	bl	800ee2c <_calloc_r>
 800d3d6:	69e3      	ldr	r3, [r4, #28]
 800d3d8:	60f0      	str	r0, [r6, #12]
 800d3da:	68db      	ldr	r3, [r3, #12]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d1e4      	bne.n	800d3aa <_Balloc+0x2e>
 800d3e0:	2000      	movs	r0, #0
 800d3e2:	bd70      	pop	{r4, r5, r6, pc}
 800d3e4:	6802      	ldr	r2, [r0, #0]
 800d3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d3f0:	e7f7      	b.n	800d3e2 <_Balloc+0x66>
 800d3f2:	bf00      	nop
 800d3f4:	0800fbb2 	.word	0x0800fbb2
 800d3f8:	0800fc32 	.word	0x0800fc32

0800d3fc <_Bfree>:
 800d3fc:	b570      	push	{r4, r5, r6, lr}
 800d3fe:	69c6      	ldr	r6, [r0, #28]
 800d400:	4605      	mov	r5, r0
 800d402:	460c      	mov	r4, r1
 800d404:	b976      	cbnz	r6, 800d424 <_Bfree+0x28>
 800d406:	2010      	movs	r0, #16
 800d408:	f7ff ff02 	bl	800d210 <malloc>
 800d40c:	4602      	mov	r2, r0
 800d40e:	61e8      	str	r0, [r5, #28]
 800d410:	b920      	cbnz	r0, 800d41c <_Bfree+0x20>
 800d412:	4b09      	ldr	r3, [pc, #36]	@ (800d438 <_Bfree+0x3c>)
 800d414:	4809      	ldr	r0, [pc, #36]	@ (800d43c <_Bfree+0x40>)
 800d416:	218f      	movs	r1, #143	@ 0x8f
 800d418:	f001 fcea 	bl	800edf0 <__assert_func>
 800d41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d420:	6006      	str	r6, [r0, #0]
 800d422:	60c6      	str	r6, [r0, #12]
 800d424:	b13c      	cbz	r4, 800d436 <_Bfree+0x3a>
 800d426:	69eb      	ldr	r3, [r5, #28]
 800d428:	6862      	ldr	r2, [r4, #4]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d430:	6021      	str	r1, [r4, #0]
 800d432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d436:	bd70      	pop	{r4, r5, r6, pc}
 800d438:	0800fbb2 	.word	0x0800fbb2
 800d43c:	0800fc32 	.word	0x0800fc32

0800d440 <__multadd>:
 800d440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d444:	690d      	ldr	r5, [r1, #16]
 800d446:	4607      	mov	r7, r0
 800d448:	460c      	mov	r4, r1
 800d44a:	461e      	mov	r6, r3
 800d44c:	f101 0c14 	add.w	ip, r1, #20
 800d450:	2000      	movs	r0, #0
 800d452:	f8dc 3000 	ldr.w	r3, [ip]
 800d456:	b299      	uxth	r1, r3
 800d458:	fb02 6101 	mla	r1, r2, r1, r6
 800d45c:	0c1e      	lsrs	r6, r3, #16
 800d45e:	0c0b      	lsrs	r3, r1, #16
 800d460:	fb02 3306 	mla	r3, r2, r6, r3
 800d464:	b289      	uxth	r1, r1
 800d466:	3001      	adds	r0, #1
 800d468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d46c:	4285      	cmp	r5, r0
 800d46e:	f84c 1b04 	str.w	r1, [ip], #4
 800d472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d476:	dcec      	bgt.n	800d452 <__multadd+0x12>
 800d478:	b30e      	cbz	r6, 800d4be <__multadd+0x7e>
 800d47a:	68a3      	ldr	r3, [r4, #8]
 800d47c:	42ab      	cmp	r3, r5
 800d47e:	dc19      	bgt.n	800d4b4 <__multadd+0x74>
 800d480:	6861      	ldr	r1, [r4, #4]
 800d482:	4638      	mov	r0, r7
 800d484:	3101      	adds	r1, #1
 800d486:	f7ff ff79 	bl	800d37c <_Balloc>
 800d48a:	4680      	mov	r8, r0
 800d48c:	b928      	cbnz	r0, 800d49a <__multadd+0x5a>
 800d48e:	4602      	mov	r2, r0
 800d490:	4b0c      	ldr	r3, [pc, #48]	@ (800d4c4 <__multadd+0x84>)
 800d492:	480d      	ldr	r0, [pc, #52]	@ (800d4c8 <__multadd+0x88>)
 800d494:	21ba      	movs	r1, #186	@ 0xba
 800d496:	f001 fcab 	bl	800edf0 <__assert_func>
 800d49a:	6922      	ldr	r2, [r4, #16]
 800d49c:	3202      	adds	r2, #2
 800d49e:	f104 010c 	add.w	r1, r4, #12
 800d4a2:	0092      	lsls	r2, r2, #2
 800d4a4:	300c      	adds	r0, #12
 800d4a6:	f001 fc8b 	bl	800edc0 <memcpy>
 800d4aa:	4621      	mov	r1, r4
 800d4ac:	4638      	mov	r0, r7
 800d4ae:	f7ff ffa5 	bl	800d3fc <_Bfree>
 800d4b2:	4644      	mov	r4, r8
 800d4b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d4b8:	3501      	adds	r5, #1
 800d4ba:	615e      	str	r6, [r3, #20]
 800d4bc:	6125      	str	r5, [r4, #16]
 800d4be:	4620      	mov	r0, r4
 800d4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4c4:	0800fc21 	.word	0x0800fc21
 800d4c8:	0800fc32 	.word	0x0800fc32

0800d4cc <__s2b>:
 800d4cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4d0:	460c      	mov	r4, r1
 800d4d2:	4615      	mov	r5, r2
 800d4d4:	461f      	mov	r7, r3
 800d4d6:	2209      	movs	r2, #9
 800d4d8:	3308      	adds	r3, #8
 800d4da:	4606      	mov	r6, r0
 800d4dc:	fb93 f3f2 	sdiv	r3, r3, r2
 800d4e0:	2100      	movs	r1, #0
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	429a      	cmp	r2, r3
 800d4e6:	db09      	blt.n	800d4fc <__s2b+0x30>
 800d4e8:	4630      	mov	r0, r6
 800d4ea:	f7ff ff47 	bl	800d37c <_Balloc>
 800d4ee:	b940      	cbnz	r0, 800d502 <__s2b+0x36>
 800d4f0:	4602      	mov	r2, r0
 800d4f2:	4b19      	ldr	r3, [pc, #100]	@ (800d558 <__s2b+0x8c>)
 800d4f4:	4819      	ldr	r0, [pc, #100]	@ (800d55c <__s2b+0x90>)
 800d4f6:	21d3      	movs	r1, #211	@ 0xd3
 800d4f8:	f001 fc7a 	bl	800edf0 <__assert_func>
 800d4fc:	0052      	lsls	r2, r2, #1
 800d4fe:	3101      	adds	r1, #1
 800d500:	e7f0      	b.n	800d4e4 <__s2b+0x18>
 800d502:	9b08      	ldr	r3, [sp, #32]
 800d504:	6143      	str	r3, [r0, #20]
 800d506:	2d09      	cmp	r5, #9
 800d508:	f04f 0301 	mov.w	r3, #1
 800d50c:	6103      	str	r3, [r0, #16]
 800d50e:	dd16      	ble.n	800d53e <__s2b+0x72>
 800d510:	f104 0909 	add.w	r9, r4, #9
 800d514:	46c8      	mov	r8, r9
 800d516:	442c      	add	r4, r5
 800d518:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d51c:	4601      	mov	r1, r0
 800d51e:	3b30      	subs	r3, #48	@ 0x30
 800d520:	220a      	movs	r2, #10
 800d522:	4630      	mov	r0, r6
 800d524:	f7ff ff8c 	bl	800d440 <__multadd>
 800d528:	45a0      	cmp	r8, r4
 800d52a:	d1f5      	bne.n	800d518 <__s2b+0x4c>
 800d52c:	f1a5 0408 	sub.w	r4, r5, #8
 800d530:	444c      	add	r4, r9
 800d532:	1b2d      	subs	r5, r5, r4
 800d534:	1963      	adds	r3, r4, r5
 800d536:	42bb      	cmp	r3, r7
 800d538:	db04      	blt.n	800d544 <__s2b+0x78>
 800d53a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d53e:	340a      	adds	r4, #10
 800d540:	2509      	movs	r5, #9
 800d542:	e7f6      	b.n	800d532 <__s2b+0x66>
 800d544:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d548:	4601      	mov	r1, r0
 800d54a:	3b30      	subs	r3, #48	@ 0x30
 800d54c:	220a      	movs	r2, #10
 800d54e:	4630      	mov	r0, r6
 800d550:	f7ff ff76 	bl	800d440 <__multadd>
 800d554:	e7ee      	b.n	800d534 <__s2b+0x68>
 800d556:	bf00      	nop
 800d558:	0800fc21 	.word	0x0800fc21
 800d55c:	0800fc32 	.word	0x0800fc32

0800d560 <__hi0bits>:
 800d560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d564:	4603      	mov	r3, r0
 800d566:	bf36      	itet	cc
 800d568:	0403      	lslcc	r3, r0, #16
 800d56a:	2000      	movcs	r0, #0
 800d56c:	2010      	movcc	r0, #16
 800d56e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d572:	bf3c      	itt	cc
 800d574:	021b      	lslcc	r3, r3, #8
 800d576:	3008      	addcc	r0, #8
 800d578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d57c:	bf3c      	itt	cc
 800d57e:	011b      	lslcc	r3, r3, #4
 800d580:	3004      	addcc	r0, #4
 800d582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d586:	bf3c      	itt	cc
 800d588:	009b      	lslcc	r3, r3, #2
 800d58a:	3002      	addcc	r0, #2
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	db05      	blt.n	800d59c <__hi0bits+0x3c>
 800d590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d594:	f100 0001 	add.w	r0, r0, #1
 800d598:	bf08      	it	eq
 800d59a:	2020      	moveq	r0, #32
 800d59c:	4770      	bx	lr

0800d59e <__lo0bits>:
 800d59e:	6803      	ldr	r3, [r0, #0]
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	f013 0007 	ands.w	r0, r3, #7
 800d5a6:	d00b      	beq.n	800d5c0 <__lo0bits+0x22>
 800d5a8:	07d9      	lsls	r1, r3, #31
 800d5aa:	d421      	bmi.n	800d5f0 <__lo0bits+0x52>
 800d5ac:	0798      	lsls	r0, r3, #30
 800d5ae:	bf49      	itett	mi
 800d5b0:	085b      	lsrmi	r3, r3, #1
 800d5b2:	089b      	lsrpl	r3, r3, #2
 800d5b4:	2001      	movmi	r0, #1
 800d5b6:	6013      	strmi	r3, [r2, #0]
 800d5b8:	bf5c      	itt	pl
 800d5ba:	6013      	strpl	r3, [r2, #0]
 800d5bc:	2002      	movpl	r0, #2
 800d5be:	4770      	bx	lr
 800d5c0:	b299      	uxth	r1, r3
 800d5c2:	b909      	cbnz	r1, 800d5c8 <__lo0bits+0x2a>
 800d5c4:	0c1b      	lsrs	r3, r3, #16
 800d5c6:	2010      	movs	r0, #16
 800d5c8:	b2d9      	uxtb	r1, r3
 800d5ca:	b909      	cbnz	r1, 800d5d0 <__lo0bits+0x32>
 800d5cc:	3008      	adds	r0, #8
 800d5ce:	0a1b      	lsrs	r3, r3, #8
 800d5d0:	0719      	lsls	r1, r3, #28
 800d5d2:	bf04      	itt	eq
 800d5d4:	091b      	lsreq	r3, r3, #4
 800d5d6:	3004      	addeq	r0, #4
 800d5d8:	0799      	lsls	r1, r3, #30
 800d5da:	bf04      	itt	eq
 800d5dc:	089b      	lsreq	r3, r3, #2
 800d5de:	3002      	addeq	r0, #2
 800d5e0:	07d9      	lsls	r1, r3, #31
 800d5e2:	d403      	bmi.n	800d5ec <__lo0bits+0x4e>
 800d5e4:	085b      	lsrs	r3, r3, #1
 800d5e6:	f100 0001 	add.w	r0, r0, #1
 800d5ea:	d003      	beq.n	800d5f4 <__lo0bits+0x56>
 800d5ec:	6013      	str	r3, [r2, #0]
 800d5ee:	4770      	bx	lr
 800d5f0:	2000      	movs	r0, #0
 800d5f2:	4770      	bx	lr
 800d5f4:	2020      	movs	r0, #32
 800d5f6:	4770      	bx	lr

0800d5f8 <__i2b>:
 800d5f8:	b510      	push	{r4, lr}
 800d5fa:	460c      	mov	r4, r1
 800d5fc:	2101      	movs	r1, #1
 800d5fe:	f7ff febd 	bl	800d37c <_Balloc>
 800d602:	4602      	mov	r2, r0
 800d604:	b928      	cbnz	r0, 800d612 <__i2b+0x1a>
 800d606:	4b05      	ldr	r3, [pc, #20]	@ (800d61c <__i2b+0x24>)
 800d608:	4805      	ldr	r0, [pc, #20]	@ (800d620 <__i2b+0x28>)
 800d60a:	f240 1145 	movw	r1, #325	@ 0x145
 800d60e:	f001 fbef 	bl	800edf0 <__assert_func>
 800d612:	2301      	movs	r3, #1
 800d614:	6144      	str	r4, [r0, #20]
 800d616:	6103      	str	r3, [r0, #16]
 800d618:	bd10      	pop	{r4, pc}
 800d61a:	bf00      	nop
 800d61c:	0800fc21 	.word	0x0800fc21
 800d620:	0800fc32 	.word	0x0800fc32

0800d624 <__multiply>:
 800d624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d628:	4614      	mov	r4, r2
 800d62a:	690a      	ldr	r2, [r1, #16]
 800d62c:	6923      	ldr	r3, [r4, #16]
 800d62e:	429a      	cmp	r2, r3
 800d630:	bfa8      	it	ge
 800d632:	4623      	movge	r3, r4
 800d634:	460f      	mov	r7, r1
 800d636:	bfa4      	itt	ge
 800d638:	460c      	movge	r4, r1
 800d63a:	461f      	movge	r7, r3
 800d63c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d640:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d644:	68a3      	ldr	r3, [r4, #8]
 800d646:	6861      	ldr	r1, [r4, #4]
 800d648:	eb0a 0609 	add.w	r6, sl, r9
 800d64c:	42b3      	cmp	r3, r6
 800d64e:	b085      	sub	sp, #20
 800d650:	bfb8      	it	lt
 800d652:	3101      	addlt	r1, #1
 800d654:	f7ff fe92 	bl	800d37c <_Balloc>
 800d658:	b930      	cbnz	r0, 800d668 <__multiply+0x44>
 800d65a:	4602      	mov	r2, r0
 800d65c:	4b44      	ldr	r3, [pc, #272]	@ (800d770 <__multiply+0x14c>)
 800d65e:	4845      	ldr	r0, [pc, #276]	@ (800d774 <__multiply+0x150>)
 800d660:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d664:	f001 fbc4 	bl	800edf0 <__assert_func>
 800d668:	f100 0514 	add.w	r5, r0, #20
 800d66c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d670:	462b      	mov	r3, r5
 800d672:	2200      	movs	r2, #0
 800d674:	4543      	cmp	r3, r8
 800d676:	d321      	bcc.n	800d6bc <__multiply+0x98>
 800d678:	f107 0114 	add.w	r1, r7, #20
 800d67c:	f104 0214 	add.w	r2, r4, #20
 800d680:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d684:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d688:	9302      	str	r3, [sp, #8]
 800d68a:	1b13      	subs	r3, r2, r4
 800d68c:	3b15      	subs	r3, #21
 800d68e:	f023 0303 	bic.w	r3, r3, #3
 800d692:	3304      	adds	r3, #4
 800d694:	f104 0715 	add.w	r7, r4, #21
 800d698:	42ba      	cmp	r2, r7
 800d69a:	bf38      	it	cc
 800d69c:	2304      	movcc	r3, #4
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	9b02      	ldr	r3, [sp, #8]
 800d6a2:	9103      	str	r1, [sp, #12]
 800d6a4:	428b      	cmp	r3, r1
 800d6a6:	d80c      	bhi.n	800d6c2 <__multiply+0x9e>
 800d6a8:	2e00      	cmp	r6, #0
 800d6aa:	dd03      	ble.n	800d6b4 <__multiply+0x90>
 800d6ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d05b      	beq.n	800d76c <__multiply+0x148>
 800d6b4:	6106      	str	r6, [r0, #16]
 800d6b6:	b005      	add	sp, #20
 800d6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6bc:	f843 2b04 	str.w	r2, [r3], #4
 800d6c0:	e7d8      	b.n	800d674 <__multiply+0x50>
 800d6c2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d6c6:	f1ba 0f00 	cmp.w	sl, #0
 800d6ca:	d024      	beq.n	800d716 <__multiply+0xf2>
 800d6cc:	f104 0e14 	add.w	lr, r4, #20
 800d6d0:	46a9      	mov	r9, r5
 800d6d2:	f04f 0c00 	mov.w	ip, #0
 800d6d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d6da:	f8d9 3000 	ldr.w	r3, [r9]
 800d6de:	fa1f fb87 	uxth.w	fp, r7
 800d6e2:	b29b      	uxth	r3, r3
 800d6e4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d6e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d6ec:	f8d9 7000 	ldr.w	r7, [r9]
 800d6f0:	4463      	add	r3, ip
 800d6f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d6f6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d6fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d6fe:	b29b      	uxth	r3, r3
 800d700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d704:	4572      	cmp	r2, lr
 800d706:	f849 3b04 	str.w	r3, [r9], #4
 800d70a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d70e:	d8e2      	bhi.n	800d6d6 <__multiply+0xb2>
 800d710:	9b01      	ldr	r3, [sp, #4]
 800d712:	f845 c003 	str.w	ip, [r5, r3]
 800d716:	9b03      	ldr	r3, [sp, #12]
 800d718:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800d71c:	3104      	adds	r1, #4
 800d71e:	f1b9 0f00 	cmp.w	r9, #0
 800d722:	d021      	beq.n	800d768 <__multiply+0x144>
 800d724:	682b      	ldr	r3, [r5, #0]
 800d726:	f104 0c14 	add.w	ip, r4, #20
 800d72a:	46ae      	mov	lr, r5
 800d72c:	f04f 0a00 	mov.w	sl, #0
 800d730:	f8bc b000 	ldrh.w	fp, [ip]
 800d734:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800d738:	fb09 770b 	mla	r7, r9, fp, r7
 800d73c:	4457      	add	r7, sl
 800d73e:	b29b      	uxth	r3, r3
 800d740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d744:	f84e 3b04 	str.w	r3, [lr], #4
 800d748:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d74c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d750:	f8be 3000 	ldrh.w	r3, [lr]
 800d754:	fb09 330a 	mla	r3, r9, sl, r3
 800d758:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800d75c:	4562      	cmp	r2, ip
 800d75e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d762:	d8e5      	bhi.n	800d730 <__multiply+0x10c>
 800d764:	9f01      	ldr	r7, [sp, #4]
 800d766:	51eb      	str	r3, [r5, r7]
 800d768:	3504      	adds	r5, #4
 800d76a:	e799      	b.n	800d6a0 <__multiply+0x7c>
 800d76c:	3e01      	subs	r6, #1
 800d76e:	e79b      	b.n	800d6a8 <__multiply+0x84>
 800d770:	0800fc21 	.word	0x0800fc21
 800d774:	0800fc32 	.word	0x0800fc32

0800d778 <__pow5mult>:
 800d778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d77c:	4615      	mov	r5, r2
 800d77e:	f012 0203 	ands.w	r2, r2, #3
 800d782:	4607      	mov	r7, r0
 800d784:	460e      	mov	r6, r1
 800d786:	d007      	beq.n	800d798 <__pow5mult+0x20>
 800d788:	4c25      	ldr	r4, [pc, #148]	@ (800d820 <__pow5mult+0xa8>)
 800d78a:	3a01      	subs	r2, #1
 800d78c:	2300      	movs	r3, #0
 800d78e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d792:	f7ff fe55 	bl	800d440 <__multadd>
 800d796:	4606      	mov	r6, r0
 800d798:	10ad      	asrs	r5, r5, #2
 800d79a:	d03d      	beq.n	800d818 <__pow5mult+0xa0>
 800d79c:	69fc      	ldr	r4, [r7, #28]
 800d79e:	b97c      	cbnz	r4, 800d7c0 <__pow5mult+0x48>
 800d7a0:	2010      	movs	r0, #16
 800d7a2:	f7ff fd35 	bl	800d210 <malloc>
 800d7a6:	4602      	mov	r2, r0
 800d7a8:	61f8      	str	r0, [r7, #28]
 800d7aa:	b928      	cbnz	r0, 800d7b8 <__pow5mult+0x40>
 800d7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800d824 <__pow5mult+0xac>)
 800d7ae:	481e      	ldr	r0, [pc, #120]	@ (800d828 <__pow5mult+0xb0>)
 800d7b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800d7b4:	f001 fb1c 	bl	800edf0 <__assert_func>
 800d7b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d7bc:	6004      	str	r4, [r0, #0]
 800d7be:	60c4      	str	r4, [r0, #12]
 800d7c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800d7c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d7c8:	b94c      	cbnz	r4, 800d7de <__pow5mult+0x66>
 800d7ca:	f240 2171 	movw	r1, #625	@ 0x271
 800d7ce:	4638      	mov	r0, r7
 800d7d0:	f7ff ff12 	bl	800d5f8 <__i2b>
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800d7da:	4604      	mov	r4, r0
 800d7dc:	6003      	str	r3, [r0, #0]
 800d7de:	f04f 0900 	mov.w	r9, #0
 800d7e2:	07eb      	lsls	r3, r5, #31
 800d7e4:	d50a      	bpl.n	800d7fc <__pow5mult+0x84>
 800d7e6:	4631      	mov	r1, r6
 800d7e8:	4622      	mov	r2, r4
 800d7ea:	4638      	mov	r0, r7
 800d7ec:	f7ff ff1a 	bl	800d624 <__multiply>
 800d7f0:	4631      	mov	r1, r6
 800d7f2:	4680      	mov	r8, r0
 800d7f4:	4638      	mov	r0, r7
 800d7f6:	f7ff fe01 	bl	800d3fc <_Bfree>
 800d7fa:	4646      	mov	r6, r8
 800d7fc:	106d      	asrs	r5, r5, #1
 800d7fe:	d00b      	beq.n	800d818 <__pow5mult+0xa0>
 800d800:	6820      	ldr	r0, [r4, #0]
 800d802:	b938      	cbnz	r0, 800d814 <__pow5mult+0x9c>
 800d804:	4622      	mov	r2, r4
 800d806:	4621      	mov	r1, r4
 800d808:	4638      	mov	r0, r7
 800d80a:	f7ff ff0b 	bl	800d624 <__multiply>
 800d80e:	6020      	str	r0, [r4, #0]
 800d810:	f8c0 9000 	str.w	r9, [r0]
 800d814:	4604      	mov	r4, r0
 800d816:	e7e4      	b.n	800d7e2 <__pow5mult+0x6a>
 800d818:	4630      	mov	r0, r6
 800d81a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d81e:	bf00      	nop
 800d820:	0800fc8c 	.word	0x0800fc8c
 800d824:	0800fbb2 	.word	0x0800fbb2
 800d828:	0800fc32 	.word	0x0800fc32

0800d82c <__lshift>:
 800d82c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d830:	460c      	mov	r4, r1
 800d832:	6849      	ldr	r1, [r1, #4]
 800d834:	6923      	ldr	r3, [r4, #16]
 800d836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d83a:	68a3      	ldr	r3, [r4, #8]
 800d83c:	4607      	mov	r7, r0
 800d83e:	4691      	mov	r9, r2
 800d840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d844:	f108 0601 	add.w	r6, r8, #1
 800d848:	42b3      	cmp	r3, r6
 800d84a:	db0b      	blt.n	800d864 <__lshift+0x38>
 800d84c:	4638      	mov	r0, r7
 800d84e:	f7ff fd95 	bl	800d37c <_Balloc>
 800d852:	4605      	mov	r5, r0
 800d854:	b948      	cbnz	r0, 800d86a <__lshift+0x3e>
 800d856:	4602      	mov	r2, r0
 800d858:	4b28      	ldr	r3, [pc, #160]	@ (800d8fc <__lshift+0xd0>)
 800d85a:	4829      	ldr	r0, [pc, #164]	@ (800d900 <__lshift+0xd4>)
 800d85c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800d860:	f001 fac6 	bl	800edf0 <__assert_func>
 800d864:	3101      	adds	r1, #1
 800d866:	005b      	lsls	r3, r3, #1
 800d868:	e7ee      	b.n	800d848 <__lshift+0x1c>
 800d86a:	2300      	movs	r3, #0
 800d86c:	f100 0114 	add.w	r1, r0, #20
 800d870:	f100 0210 	add.w	r2, r0, #16
 800d874:	4618      	mov	r0, r3
 800d876:	4553      	cmp	r3, sl
 800d878:	db33      	blt.n	800d8e2 <__lshift+0xb6>
 800d87a:	6920      	ldr	r0, [r4, #16]
 800d87c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d880:	f104 0314 	add.w	r3, r4, #20
 800d884:	f019 091f 	ands.w	r9, r9, #31
 800d888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d88c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d890:	d02b      	beq.n	800d8ea <__lshift+0xbe>
 800d892:	f1c9 0e20 	rsb	lr, r9, #32
 800d896:	468a      	mov	sl, r1
 800d898:	2200      	movs	r2, #0
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	fa00 f009 	lsl.w	r0, r0, r9
 800d8a0:	4310      	orrs	r0, r2
 800d8a2:	f84a 0b04 	str.w	r0, [sl], #4
 800d8a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8aa:	459c      	cmp	ip, r3
 800d8ac:	fa22 f20e 	lsr.w	r2, r2, lr
 800d8b0:	d8f3      	bhi.n	800d89a <__lshift+0x6e>
 800d8b2:	ebac 0304 	sub.w	r3, ip, r4
 800d8b6:	3b15      	subs	r3, #21
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	3304      	adds	r3, #4
 800d8be:	f104 0015 	add.w	r0, r4, #21
 800d8c2:	4584      	cmp	ip, r0
 800d8c4:	bf38      	it	cc
 800d8c6:	2304      	movcc	r3, #4
 800d8c8:	50ca      	str	r2, [r1, r3]
 800d8ca:	b10a      	cbz	r2, 800d8d0 <__lshift+0xa4>
 800d8cc:	f108 0602 	add.w	r6, r8, #2
 800d8d0:	3e01      	subs	r6, #1
 800d8d2:	4638      	mov	r0, r7
 800d8d4:	612e      	str	r6, [r5, #16]
 800d8d6:	4621      	mov	r1, r4
 800d8d8:	f7ff fd90 	bl	800d3fc <_Bfree>
 800d8dc:	4628      	mov	r0, r5
 800d8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8e2:	f842 0f04 	str.w	r0, [r2, #4]!
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	e7c5      	b.n	800d876 <__lshift+0x4a>
 800d8ea:	3904      	subs	r1, #4
 800d8ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d8f0:	f841 2f04 	str.w	r2, [r1, #4]!
 800d8f4:	459c      	cmp	ip, r3
 800d8f6:	d8f9      	bhi.n	800d8ec <__lshift+0xc0>
 800d8f8:	e7ea      	b.n	800d8d0 <__lshift+0xa4>
 800d8fa:	bf00      	nop
 800d8fc:	0800fc21 	.word	0x0800fc21
 800d900:	0800fc32 	.word	0x0800fc32

0800d904 <__mcmp>:
 800d904:	690a      	ldr	r2, [r1, #16]
 800d906:	4603      	mov	r3, r0
 800d908:	6900      	ldr	r0, [r0, #16]
 800d90a:	1a80      	subs	r0, r0, r2
 800d90c:	b530      	push	{r4, r5, lr}
 800d90e:	d10e      	bne.n	800d92e <__mcmp+0x2a>
 800d910:	3314      	adds	r3, #20
 800d912:	3114      	adds	r1, #20
 800d914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d91c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d924:	4295      	cmp	r5, r2
 800d926:	d003      	beq.n	800d930 <__mcmp+0x2c>
 800d928:	d205      	bcs.n	800d936 <__mcmp+0x32>
 800d92a:	f04f 30ff 	mov.w	r0, #4294967295
 800d92e:	bd30      	pop	{r4, r5, pc}
 800d930:	42a3      	cmp	r3, r4
 800d932:	d3f3      	bcc.n	800d91c <__mcmp+0x18>
 800d934:	e7fb      	b.n	800d92e <__mcmp+0x2a>
 800d936:	2001      	movs	r0, #1
 800d938:	e7f9      	b.n	800d92e <__mcmp+0x2a>
	...

0800d93c <__mdiff>:
 800d93c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d940:	4689      	mov	r9, r1
 800d942:	4606      	mov	r6, r0
 800d944:	4611      	mov	r1, r2
 800d946:	4648      	mov	r0, r9
 800d948:	4614      	mov	r4, r2
 800d94a:	f7ff ffdb 	bl	800d904 <__mcmp>
 800d94e:	1e05      	subs	r5, r0, #0
 800d950:	d112      	bne.n	800d978 <__mdiff+0x3c>
 800d952:	4629      	mov	r1, r5
 800d954:	4630      	mov	r0, r6
 800d956:	f7ff fd11 	bl	800d37c <_Balloc>
 800d95a:	4602      	mov	r2, r0
 800d95c:	b928      	cbnz	r0, 800d96a <__mdiff+0x2e>
 800d95e:	4b3f      	ldr	r3, [pc, #252]	@ (800da5c <__mdiff+0x120>)
 800d960:	f240 2137 	movw	r1, #567	@ 0x237
 800d964:	483e      	ldr	r0, [pc, #248]	@ (800da60 <__mdiff+0x124>)
 800d966:	f001 fa43 	bl	800edf0 <__assert_func>
 800d96a:	2301      	movs	r3, #1
 800d96c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d970:	4610      	mov	r0, r2
 800d972:	b003      	add	sp, #12
 800d974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d978:	bfbc      	itt	lt
 800d97a:	464b      	movlt	r3, r9
 800d97c:	46a1      	movlt	r9, r4
 800d97e:	4630      	mov	r0, r6
 800d980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d984:	bfba      	itte	lt
 800d986:	461c      	movlt	r4, r3
 800d988:	2501      	movlt	r5, #1
 800d98a:	2500      	movge	r5, #0
 800d98c:	f7ff fcf6 	bl	800d37c <_Balloc>
 800d990:	4602      	mov	r2, r0
 800d992:	b918      	cbnz	r0, 800d99c <__mdiff+0x60>
 800d994:	4b31      	ldr	r3, [pc, #196]	@ (800da5c <__mdiff+0x120>)
 800d996:	f240 2145 	movw	r1, #581	@ 0x245
 800d99a:	e7e3      	b.n	800d964 <__mdiff+0x28>
 800d99c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d9a0:	6926      	ldr	r6, [r4, #16]
 800d9a2:	60c5      	str	r5, [r0, #12]
 800d9a4:	f109 0310 	add.w	r3, r9, #16
 800d9a8:	f109 0514 	add.w	r5, r9, #20
 800d9ac:	f104 0e14 	add.w	lr, r4, #20
 800d9b0:	f100 0b14 	add.w	fp, r0, #20
 800d9b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d9b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d9bc:	9301      	str	r3, [sp, #4]
 800d9be:	46d9      	mov	r9, fp
 800d9c0:	f04f 0c00 	mov.w	ip, #0
 800d9c4:	9b01      	ldr	r3, [sp, #4]
 800d9c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d9ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d9ce:	9301      	str	r3, [sp, #4]
 800d9d0:	fa1f f38a 	uxth.w	r3, sl
 800d9d4:	4619      	mov	r1, r3
 800d9d6:	b283      	uxth	r3, r0
 800d9d8:	1acb      	subs	r3, r1, r3
 800d9da:	0c00      	lsrs	r0, r0, #16
 800d9dc:	4463      	add	r3, ip
 800d9de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d9e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d9ec:	4576      	cmp	r6, lr
 800d9ee:	f849 3b04 	str.w	r3, [r9], #4
 800d9f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d9f6:	d8e5      	bhi.n	800d9c4 <__mdiff+0x88>
 800d9f8:	1b33      	subs	r3, r6, r4
 800d9fa:	3b15      	subs	r3, #21
 800d9fc:	f023 0303 	bic.w	r3, r3, #3
 800da00:	3415      	adds	r4, #21
 800da02:	3304      	adds	r3, #4
 800da04:	42a6      	cmp	r6, r4
 800da06:	bf38      	it	cc
 800da08:	2304      	movcc	r3, #4
 800da0a:	441d      	add	r5, r3
 800da0c:	445b      	add	r3, fp
 800da0e:	461e      	mov	r6, r3
 800da10:	462c      	mov	r4, r5
 800da12:	4544      	cmp	r4, r8
 800da14:	d30e      	bcc.n	800da34 <__mdiff+0xf8>
 800da16:	f108 0103 	add.w	r1, r8, #3
 800da1a:	1b49      	subs	r1, r1, r5
 800da1c:	f021 0103 	bic.w	r1, r1, #3
 800da20:	3d03      	subs	r5, #3
 800da22:	45a8      	cmp	r8, r5
 800da24:	bf38      	it	cc
 800da26:	2100      	movcc	r1, #0
 800da28:	440b      	add	r3, r1
 800da2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800da2e:	b191      	cbz	r1, 800da56 <__mdiff+0x11a>
 800da30:	6117      	str	r7, [r2, #16]
 800da32:	e79d      	b.n	800d970 <__mdiff+0x34>
 800da34:	f854 1b04 	ldr.w	r1, [r4], #4
 800da38:	46e6      	mov	lr, ip
 800da3a:	0c08      	lsrs	r0, r1, #16
 800da3c:	fa1c fc81 	uxtah	ip, ip, r1
 800da40:	4471      	add	r1, lr
 800da42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800da46:	b289      	uxth	r1, r1
 800da48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800da4c:	f846 1b04 	str.w	r1, [r6], #4
 800da50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800da54:	e7dd      	b.n	800da12 <__mdiff+0xd6>
 800da56:	3f01      	subs	r7, #1
 800da58:	e7e7      	b.n	800da2a <__mdiff+0xee>
 800da5a:	bf00      	nop
 800da5c:	0800fc21 	.word	0x0800fc21
 800da60:	0800fc32 	.word	0x0800fc32

0800da64 <__ulp>:
 800da64:	b082      	sub	sp, #8
 800da66:	ed8d 0b00 	vstr	d0, [sp]
 800da6a:	9a01      	ldr	r2, [sp, #4]
 800da6c:	4b0f      	ldr	r3, [pc, #60]	@ (800daac <__ulp+0x48>)
 800da6e:	4013      	ands	r3, r2
 800da70:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800da74:	2b00      	cmp	r3, #0
 800da76:	dc08      	bgt.n	800da8a <__ulp+0x26>
 800da78:	425b      	negs	r3, r3
 800da7a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800da7e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800da82:	da04      	bge.n	800da8e <__ulp+0x2a>
 800da84:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800da88:	4113      	asrs	r3, r2
 800da8a:	2200      	movs	r2, #0
 800da8c:	e008      	b.n	800daa0 <__ulp+0x3c>
 800da8e:	f1a2 0314 	sub.w	r3, r2, #20
 800da92:	2b1e      	cmp	r3, #30
 800da94:	bfda      	itte	le
 800da96:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800da9a:	40da      	lsrle	r2, r3
 800da9c:	2201      	movgt	r2, #1
 800da9e:	2300      	movs	r3, #0
 800daa0:	4619      	mov	r1, r3
 800daa2:	4610      	mov	r0, r2
 800daa4:	ec41 0b10 	vmov	d0, r0, r1
 800daa8:	b002      	add	sp, #8
 800daaa:	4770      	bx	lr
 800daac:	7ff00000 	.word	0x7ff00000

0800dab0 <__b2d>:
 800dab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dab4:	6906      	ldr	r6, [r0, #16]
 800dab6:	f100 0814 	add.w	r8, r0, #20
 800daba:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800dabe:	1f37      	subs	r7, r6, #4
 800dac0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dac4:	4610      	mov	r0, r2
 800dac6:	f7ff fd4b 	bl	800d560 <__hi0bits>
 800daca:	f1c0 0320 	rsb	r3, r0, #32
 800dace:	280a      	cmp	r0, #10
 800dad0:	600b      	str	r3, [r1, #0]
 800dad2:	491b      	ldr	r1, [pc, #108]	@ (800db40 <__b2d+0x90>)
 800dad4:	dc15      	bgt.n	800db02 <__b2d+0x52>
 800dad6:	f1c0 0c0b 	rsb	ip, r0, #11
 800dada:	fa22 f30c 	lsr.w	r3, r2, ip
 800dade:	45b8      	cmp	r8, r7
 800dae0:	ea43 0501 	orr.w	r5, r3, r1
 800dae4:	bf34      	ite	cc
 800dae6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800daea:	2300      	movcs	r3, #0
 800daec:	3015      	adds	r0, #21
 800daee:	fa02 f000 	lsl.w	r0, r2, r0
 800daf2:	fa23 f30c 	lsr.w	r3, r3, ip
 800daf6:	4303      	orrs	r3, r0
 800daf8:	461c      	mov	r4, r3
 800dafa:	ec45 4b10 	vmov	d0, r4, r5
 800dafe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db02:	45b8      	cmp	r8, r7
 800db04:	bf3a      	itte	cc
 800db06:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800db0a:	f1a6 0708 	subcc.w	r7, r6, #8
 800db0e:	2300      	movcs	r3, #0
 800db10:	380b      	subs	r0, #11
 800db12:	d012      	beq.n	800db3a <__b2d+0x8a>
 800db14:	f1c0 0120 	rsb	r1, r0, #32
 800db18:	fa23 f401 	lsr.w	r4, r3, r1
 800db1c:	4082      	lsls	r2, r0
 800db1e:	4322      	orrs	r2, r4
 800db20:	4547      	cmp	r7, r8
 800db22:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800db26:	bf8c      	ite	hi
 800db28:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800db2c:	2200      	movls	r2, #0
 800db2e:	4083      	lsls	r3, r0
 800db30:	40ca      	lsrs	r2, r1
 800db32:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800db36:	4313      	orrs	r3, r2
 800db38:	e7de      	b.n	800daf8 <__b2d+0x48>
 800db3a:	ea42 0501 	orr.w	r5, r2, r1
 800db3e:	e7db      	b.n	800daf8 <__b2d+0x48>
 800db40:	3ff00000 	.word	0x3ff00000

0800db44 <__d2b>:
 800db44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800db48:	460f      	mov	r7, r1
 800db4a:	2101      	movs	r1, #1
 800db4c:	ec59 8b10 	vmov	r8, r9, d0
 800db50:	4616      	mov	r6, r2
 800db52:	f7ff fc13 	bl	800d37c <_Balloc>
 800db56:	4604      	mov	r4, r0
 800db58:	b930      	cbnz	r0, 800db68 <__d2b+0x24>
 800db5a:	4602      	mov	r2, r0
 800db5c:	4b23      	ldr	r3, [pc, #140]	@ (800dbec <__d2b+0xa8>)
 800db5e:	4824      	ldr	r0, [pc, #144]	@ (800dbf0 <__d2b+0xac>)
 800db60:	f240 310f 	movw	r1, #783	@ 0x30f
 800db64:	f001 f944 	bl	800edf0 <__assert_func>
 800db68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800db6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800db70:	b10d      	cbz	r5, 800db76 <__d2b+0x32>
 800db72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	f1b8 0300 	subs.w	r3, r8, #0
 800db7c:	d023      	beq.n	800dbc6 <__d2b+0x82>
 800db7e:	4668      	mov	r0, sp
 800db80:	9300      	str	r3, [sp, #0]
 800db82:	f7ff fd0c 	bl	800d59e <__lo0bits>
 800db86:	e9dd 1200 	ldrd	r1, r2, [sp]
 800db8a:	b1d0      	cbz	r0, 800dbc2 <__d2b+0x7e>
 800db8c:	f1c0 0320 	rsb	r3, r0, #32
 800db90:	fa02 f303 	lsl.w	r3, r2, r3
 800db94:	430b      	orrs	r3, r1
 800db96:	40c2      	lsrs	r2, r0
 800db98:	6163      	str	r3, [r4, #20]
 800db9a:	9201      	str	r2, [sp, #4]
 800db9c:	9b01      	ldr	r3, [sp, #4]
 800db9e:	61a3      	str	r3, [r4, #24]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	bf0c      	ite	eq
 800dba4:	2201      	moveq	r2, #1
 800dba6:	2202      	movne	r2, #2
 800dba8:	6122      	str	r2, [r4, #16]
 800dbaa:	b1a5      	cbz	r5, 800dbd6 <__d2b+0x92>
 800dbac:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dbb0:	4405      	add	r5, r0
 800dbb2:	603d      	str	r5, [r7, #0]
 800dbb4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dbb8:	6030      	str	r0, [r6, #0]
 800dbba:	4620      	mov	r0, r4
 800dbbc:	b003      	add	sp, #12
 800dbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbc2:	6161      	str	r1, [r4, #20]
 800dbc4:	e7ea      	b.n	800db9c <__d2b+0x58>
 800dbc6:	a801      	add	r0, sp, #4
 800dbc8:	f7ff fce9 	bl	800d59e <__lo0bits>
 800dbcc:	9b01      	ldr	r3, [sp, #4]
 800dbce:	6163      	str	r3, [r4, #20]
 800dbd0:	3020      	adds	r0, #32
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	e7e8      	b.n	800dba8 <__d2b+0x64>
 800dbd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800dbda:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800dbde:	6038      	str	r0, [r7, #0]
 800dbe0:	6918      	ldr	r0, [r3, #16]
 800dbe2:	f7ff fcbd 	bl	800d560 <__hi0bits>
 800dbe6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800dbea:	e7e5      	b.n	800dbb8 <__d2b+0x74>
 800dbec:	0800fc21 	.word	0x0800fc21
 800dbf0:	0800fc32 	.word	0x0800fc32

0800dbf4 <__ratio>:
 800dbf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbf8:	4688      	mov	r8, r1
 800dbfa:	4669      	mov	r1, sp
 800dbfc:	4681      	mov	r9, r0
 800dbfe:	f7ff ff57 	bl	800dab0 <__b2d>
 800dc02:	a901      	add	r1, sp, #4
 800dc04:	4640      	mov	r0, r8
 800dc06:	ec55 4b10 	vmov	r4, r5, d0
 800dc0a:	f7ff ff51 	bl	800dab0 <__b2d>
 800dc0e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800dc12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800dc16:	1ad2      	subs	r2, r2, r3
 800dc18:	e9dd 3100 	ldrd	r3, r1, [sp]
 800dc1c:	1a5b      	subs	r3, r3, r1
 800dc1e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 800dc22:	ec57 6b10 	vmov	r6, r7, d0
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	bfd6      	itet	le
 800dc2a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800dc2e:	462a      	movgt	r2, r5
 800dc30:	463a      	movle	r2, r7
 800dc32:	46ab      	mov	fp, r5
 800dc34:	46a2      	mov	sl, r4
 800dc36:	bfce      	itee	gt
 800dc38:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800dc3c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 800dc40:	ee00 3a90 	vmovle	s1, r3
 800dc44:	ec4b ab17 	vmov	d7, sl, fp
 800dc48:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800dc4c:	b003      	add	sp, #12
 800dc4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc52 <__copybits>:
 800dc52:	3901      	subs	r1, #1
 800dc54:	b570      	push	{r4, r5, r6, lr}
 800dc56:	1149      	asrs	r1, r1, #5
 800dc58:	6914      	ldr	r4, [r2, #16]
 800dc5a:	3101      	adds	r1, #1
 800dc5c:	f102 0314 	add.w	r3, r2, #20
 800dc60:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800dc64:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800dc68:	1f05      	subs	r5, r0, #4
 800dc6a:	42a3      	cmp	r3, r4
 800dc6c:	d30c      	bcc.n	800dc88 <__copybits+0x36>
 800dc6e:	1aa3      	subs	r3, r4, r2
 800dc70:	3b11      	subs	r3, #17
 800dc72:	f023 0303 	bic.w	r3, r3, #3
 800dc76:	3211      	adds	r2, #17
 800dc78:	42a2      	cmp	r2, r4
 800dc7a:	bf88      	it	hi
 800dc7c:	2300      	movhi	r3, #0
 800dc7e:	4418      	add	r0, r3
 800dc80:	2300      	movs	r3, #0
 800dc82:	4288      	cmp	r0, r1
 800dc84:	d305      	bcc.n	800dc92 <__copybits+0x40>
 800dc86:	bd70      	pop	{r4, r5, r6, pc}
 800dc88:	f853 6b04 	ldr.w	r6, [r3], #4
 800dc8c:	f845 6f04 	str.w	r6, [r5, #4]!
 800dc90:	e7eb      	b.n	800dc6a <__copybits+0x18>
 800dc92:	f840 3b04 	str.w	r3, [r0], #4
 800dc96:	e7f4      	b.n	800dc82 <__copybits+0x30>

0800dc98 <__any_on>:
 800dc98:	f100 0214 	add.w	r2, r0, #20
 800dc9c:	6900      	ldr	r0, [r0, #16]
 800dc9e:	114b      	asrs	r3, r1, #5
 800dca0:	4298      	cmp	r0, r3
 800dca2:	b510      	push	{r4, lr}
 800dca4:	db11      	blt.n	800dcca <__any_on+0x32>
 800dca6:	dd0a      	ble.n	800dcbe <__any_on+0x26>
 800dca8:	f011 011f 	ands.w	r1, r1, #31
 800dcac:	d007      	beq.n	800dcbe <__any_on+0x26>
 800dcae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800dcb2:	fa24 f001 	lsr.w	r0, r4, r1
 800dcb6:	fa00 f101 	lsl.w	r1, r0, r1
 800dcba:	428c      	cmp	r4, r1
 800dcbc:	d10b      	bne.n	800dcd6 <__any_on+0x3e>
 800dcbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dcc2:	4293      	cmp	r3, r2
 800dcc4:	d803      	bhi.n	800dcce <__any_on+0x36>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	bd10      	pop	{r4, pc}
 800dcca:	4603      	mov	r3, r0
 800dccc:	e7f7      	b.n	800dcbe <__any_on+0x26>
 800dcce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dcd2:	2900      	cmp	r1, #0
 800dcd4:	d0f5      	beq.n	800dcc2 <__any_on+0x2a>
 800dcd6:	2001      	movs	r0, #1
 800dcd8:	e7f6      	b.n	800dcc8 <__any_on+0x30>

0800dcda <sulp>:
 800dcda:	b570      	push	{r4, r5, r6, lr}
 800dcdc:	4604      	mov	r4, r0
 800dcde:	460d      	mov	r5, r1
 800dce0:	4616      	mov	r6, r2
 800dce2:	ec45 4b10 	vmov	d0, r4, r5
 800dce6:	f7ff febd 	bl	800da64 <__ulp>
 800dcea:	b17e      	cbz	r6, 800dd0c <sulp+0x32>
 800dcec:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800dcf0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	dd09      	ble.n	800dd0c <sulp+0x32>
 800dcf8:	051b      	lsls	r3, r3, #20
 800dcfa:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800dcfe:	2000      	movs	r0, #0
 800dd00:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800dd04:	ec41 0b17 	vmov	d7, r0, r1
 800dd08:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dd0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800dd10 <_strtod_l>:
 800dd10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd14:	ed2d 8b0a 	vpush	{d8-d12}
 800dd18:	b097      	sub	sp, #92	@ 0x5c
 800dd1a:	4688      	mov	r8, r1
 800dd1c:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd1e:	2200      	movs	r2, #0
 800dd20:	9212      	str	r2, [sp, #72]	@ 0x48
 800dd22:	9005      	str	r0, [sp, #20]
 800dd24:	f04f 0a00 	mov.w	sl, #0
 800dd28:	f04f 0b00 	mov.w	fp, #0
 800dd2c:	460a      	mov	r2, r1
 800dd2e:	9211      	str	r2, [sp, #68]	@ 0x44
 800dd30:	7811      	ldrb	r1, [r2, #0]
 800dd32:	292b      	cmp	r1, #43	@ 0x2b
 800dd34:	d04c      	beq.n	800ddd0 <_strtod_l+0xc0>
 800dd36:	d839      	bhi.n	800ddac <_strtod_l+0x9c>
 800dd38:	290d      	cmp	r1, #13
 800dd3a:	d833      	bhi.n	800dda4 <_strtod_l+0x94>
 800dd3c:	2908      	cmp	r1, #8
 800dd3e:	d833      	bhi.n	800dda8 <_strtod_l+0x98>
 800dd40:	2900      	cmp	r1, #0
 800dd42:	d03c      	beq.n	800ddbe <_strtod_l+0xae>
 800dd44:	2200      	movs	r2, #0
 800dd46:	9208      	str	r2, [sp, #32]
 800dd48:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800dd4a:	782a      	ldrb	r2, [r5, #0]
 800dd4c:	2a30      	cmp	r2, #48	@ 0x30
 800dd4e:	f040 80b5 	bne.w	800debc <_strtod_l+0x1ac>
 800dd52:	786a      	ldrb	r2, [r5, #1]
 800dd54:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800dd58:	2a58      	cmp	r2, #88	@ 0x58
 800dd5a:	d170      	bne.n	800de3e <_strtod_l+0x12e>
 800dd5c:	9302      	str	r3, [sp, #8]
 800dd5e:	9b08      	ldr	r3, [sp, #32]
 800dd60:	9301      	str	r3, [sp, #4]
 800dd62:	ab12      	add	r3, sp, #72	@ 0x48
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	4a8b      	ldr	r2, [pc, #556]	@ (800df94 <_strtod_l+0x284>)
 800dd68:	9805      	ldr	r0, [sp, #20]
 800dd6a:	ab13      	add	r3, sp, #76	@ 0x4c
 800dd6c:	a911      	add	r1, sp, #68	@ 0x44
 800dd6e:	f001 f8d9 	bl	800ef24 <__gethex>
 800dd72:	f010 060f 	ands.w	r6, r0, #15
 800dd76:	4604      	mov	r4, r0
 800dd78:	d005      	beq.n	800dd86 <_strtod_l+0x76>
 800dd7a:	2e06      	cmp	r6, #6
 800dd7c:	d12a      	bne.n	800ddd4 <_strtod_l+0xc4>
 800dd7e:	3501      	adds	r5, #1
 800dd80:	2300      	movs	r3, #0
 800dd82:	9511      	str	r5, [sp, #68]	@ 0x44
 800dd84:	9308      	str	r3, [sp, #32]
 800dd86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	f040 852f 	bne.w	800e7ec <_strtod_l+0xadc>
 800dd8e:	9b08      	ldr	r3, [sp, #32]
 800dd90:	ec4b ab10 	vmov	d0, sl, fp
 800dd94:	b1cb      	cbz	r3, 800ddca <_strtod_l+0xba>
 800dd96:	eeb1 0b40 	vneg.f64	d0, d0
 800dd9a:	b017      	add	sp, #92	@ 0x5c
 800dd9c:	ecbd 8b0a 	vpop	{d8-d12}
 800dda0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dda4:	2920      	cmp	r1, #32
 800dda6:	d1cd      	bne.n	800dd44 <_strtod_l+0x34>
 800dda8:	3201      	adds	r2, #1
 800ddaa:	e7c0      	b.n	800dd2e <_strtod_l+0x1e>
 800ddac:	292d      	cmp	r1, #45	@ 0x2d
 800ddae:	d1c9      	bne.n	800dd44 <_strtod_l+0x34>
 800ddb0:	2101      	movs	r1, #1
 800ddb2:	9108      	str	r1, [sp, #32]
 800ddb4:	1c51      	adds	r1, r2, #1
 800ddb6:	9111      	str	r1, [sp, #68]	@ 0x44
 800ddb8:	7852      	ldrb	r2, [r2, #1]
 800ddba:	2a00      	cmp	r2, #0
 800ddbc:	d1c4      	bne.n	800dd48 <_strtod_l+0x38>
 800ddbe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ddc0:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	f040 850f 	bne.w	800e7e8 <_strtod_l+0xad8>
 800ddca:	ec4b ab10 	vmov	d0, sl, fp
 800ddce:	e7e4      	b.n	800dd9a <_strtod_l+0x8a>
 800ddd0:	2100      	movs	r1, #0
 800ddd2:	e7ee      	b.n	800ddb2 <_strtod_l+0xa2>
 800ddd4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ddd6:	b13a      	cbz	r2, 800dde8 <_strtod_l+0xd8>
 800ddd8:	2135      	movs	r1, #53	@ 0x35
 800ddda:	a814      	add	r0, sp, #80	@ 0x50
 800dddc:	f7ff ff39 	bl	800dc52 <__copybits>
 800dde0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800dde2:	9805      	ldr	r0, [sp, #20]
 800dde4:	f7ff fb0a 	bl	800d3fc <_Bfree>
 800dde8:	1e73      	subs	r3, r6, #1
 800ddea:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddec:	2b04      	cmp	r3, #4
 800ddee:	d806      	bhi.n	800ddfe <_strtod_l+0xee>
 800ddf0:	e8df f003 	tbb	[pc, r3]
 800ddf4:	201d0314 	.word	0x201d0314
 800ddf8:	14          	.byte	0x14
 800ddf9:	00          	.byte	0x00
 800ddfa:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 800ddfe:	05e3      	lsls	r3, r4, #23
 800de00:	bf48      	it	mi
 800de02:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800de06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800de0a:	0d1b      	lsrs	r3, r3, #20
 800de0c:	051b      	lsls	r3, r3, #20
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d1b9      	bne.n	800dd86 <_strtod_l+0x76>
 800de12:	f7fe fba1 	bl	800c558 <__errno>
 800de16:	2322      	movs	r3, #34	@ 0x22
 800de18:	6003      	str	r3, [r0, #0]
 800de1a:	e7b4      	b.n	800dd86 <_strtod_l+0x76>
 800de1c:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 800de20:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800de24:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800de28:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800de2c:	e7e7      	b.n	800ddfe <_strtod_l+0xee>
 800de2e:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 800df9c <_strtod_l+0x28c>
 800de32:	e7e4      	b.n	800ddfe <_strtod_l+0xee>
 800de34:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800de38:	f04f 3aff 	mov.w	sl, #4294967295
 800de3c:	e7df      	b.n	800ddfe <_strtod_l+0xee>
 800de3e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de40:	1c5a      	adds	r2, r3, #1
 800de42:	9211      	str	r2, [sp, #68]	@ 0x44
 800de44:	785b      	ldrb	r3, [r3, #1]
 800de46:	2b30      	cmp	r3, #48	@ 0x30
 800de48:	d0f9      	beq.n	800de3e <_strtod_l+0x12e>
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d09b      	beq.n	800dd86 <_strtod_l+0x76>
 800de4e:	2301      	movs	r3, #1
 800de50:	2600      	movs	r6, #0
 800de52:	9307      	str	r3, [sp, #28]
 800de54:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800de56:	930a      	str	r3, [sp, #40]	@ 0x28
 800de58:	46b1      	mov	r9, r6
 800de5a:	4635      	mov	r5, r6
 800de5c:	220a      	movs	r2, #10
 800de5e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 800de60:	7804      	ldrb	r4, [r0, #0]
 800de62:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 800de66:	b2d9      	uxtb	r1, r3
 800de68:	2909      	cmp	r1, #9
 800de6a:	d929      	bls.n	800dec0 <_strtod_l+0x1b0>
 800de6c:	494a      	ldr	r1, [pc, #296]	@ (800df98 <_strtod_l+0x288>)
 800de6e:	2201      	movs	r2, #1
 800de70:	f000 ff84 	bl	800ed7c <strncmp>
 800de74:	b378      	cbz	r0, 800ded6 <_strtod_l+0x1c6>
 800de76:	2000      	movs	r0, #0
 800de78:	4622      	mov	r2, r4
 800de7a:	462b      	mov	r3, r5
 800de7c:	4607      	mov	r7, r0
 800de7e:	9006      	str	r0, [sp, #24]
 800de80:	2a65      	cmp	r2, #101	@ 0x65
 800de82:	d001      	beq.n	800de88 <_strtod_l+0x178>
 800de84:	2a45      	cmp	r2, #69	@ 0x45
 800de86:	d117      	bne.n	800deb8 <_strtod_l+0x1a8>
 800de88:	b91b      	cbnz	r3, 800de92 <_strtod_l+0x182>
 800de8a:	9b07      	ldr	r3, [sp, #28]
 800de8c:	4303      	orrs	r3, r0
 800de8e:	d096      	beq.n	800ddbe <_strtod_l+0xae>
 800de90:	2300      	movs	r3, #0
 800de92:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 800de96:	f108 0201 	add.w	r2, r8, #1
 800de9a:	9211      	str	r2, [sp, #68]	@ 0x44
 800de9c:	f898 2001 	ldrb.w	r2, [r8, #1]
 800dea0:	2a2b      	cmp	r2, #43	@ 0x2b
 800dea2:	d06b      	beq.n	800df7c <_strtod_l+0x26c>
 800dea4:	2a2d      	cmp	r2, #45	@ 0x2d
 800dea6:	d071      	beq.n	800df8c <_strtod_l+0x27c>
 800dea8:	f04f 0e00 	mov.w	lr, #0
 800deac:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800deb0:	2c09      	cmp	r4, #9
 800deb2:	d979      	bls.n	800dfa8 <_strtod_l+0x298>
 800deb4:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800deb8:	2400      	movs	r4, #0
 800deba:	e094      	b.n	800dfe6 <_strtod_l+0x2d6>
 800debc:	2300      	movs	r3, #0
 800debe:	e7c7      	b.n	800de50 <_strtod_l+0x140>
 800dec0:	2d08      	cmp	r5, #8
 800dec2:	f100 0001 	add.w	r0, r0, #1
 800dec6:	bfd4      	ite	le
 800dec8:	fb02 3909 	mlale	r9, r2, r9, r3
 800decc:	fb02 3606 	mlagt	r6, r2, r6, r3
 800ded0:	3501      	adds	r5, #1
 800ded2:	9011      	str	r0, [sp, #68]	@ 0x44
 800ded4:	e7c3      	b.n	800de5e <_strtod_l+0x14e>
 800ded6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ded8:	1c5a      	adds	r2, r3, #1
 800deda:	9211      	str	r2, [sp, #68]	@ 0x44
 800dedc:	785a      	ldrb	r2, [r3, #1]
 800dede:	b375      	cbz	r5, 800df3e <_strtod_l+0x22e>
 800dee0:	4607      	mov	r7, r0
 800dee2:	462b      	mov	r3, r5
 800dee4:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800dee8:	2909      	cmp	r1, #9
 800deea:	d913      	bls.n	800df14 <_strtod_l+0x204>
 800deec:	2101      	movs	r1, #1
 800deee:	9106      	str	r1, [sp, #24]
 800def0:	e7c6      	b.n	800de80 <_strtod_l+0x170>
 800def2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800def4:	1c5a      	adds	r2, r3, #1
 800def6:	9211      	str	r2, [sp, #68]	@ 0x44
 800def8:	785a      	ldrb	r2, [r3, #1]
 800defa:	3001      	adds	r0, #1
 800defc:	2a30      	cmp	r2, #48	@ 0x30
 800defe:	d0f8      	beq.n	800def2 <_strtod_l+0x1e2>
 800df00:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800df04:	2b08      	cmp	r3, #8
 800df06:	f200 8476 	bhi.w	800e7f6 <_strtod_l+0xae6>
 800df0a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df0c:	930a      	str	r3, [sp, #40]	@ 0x28
 800df0e:	4607      	mov	r7, r0
 800df10:	2000      	movs	r0, #0
 800df12:	4603      	mov	r3, r0
 800df14:	3a30      	subs	r2, #48	@ 0x30
 800df16:	f100 0101 	add.w	r1, r0, #1
 800df1a:	d023      	beq.n	800df64 <_strtod_l+0x254>
 800df1c:	440f      	add	r7, r1
 800df1e:	eb00 0c03 	add.w	ip, r0, r3
 800df22:	4619      	mov	r1, r3
 800df24:	240a      	movs	r4, #10
 800df26:	4561      	cmp	r1, ip
 800df28:	d10b      	bne.n	800df42 <_strtod_l+0x232>
 800df2a:	1c5c      	adds	r4, r3, #1
 800df2c:	4403      	add	r3, r0
 800df2e:	2b08      	cmp	r3, #8
 800df30:	4404      	add	r4, r0
 800df32:	dc11      	bgt.n	800df58 <_strtod_l+0x248>
 800df34:	230a      	movs	r3, #10
 800df36:	fb03 2909 	mla	r9, r3, r9, r2
 800df3a:	2100      	movs	r1, #0
 800df3c:	e013      	b.n	800df66 <_strtod_l+0x256>
 800df3e:	4628      	mov	r0, r5
 800df40:	e7dc      	b.n	800defc <_strtod_l+0x1ec>
 800df42:	2908      	cmp	r1, #8
 800df44:	f101 0101 	add.w	r1, r1, #1
 800df48:	dc02      	bgt.n	800df50 <_strtod_l+0x240>
 800df4a:	fb04 f909 	mul.w	r9, r4, r9
 800df4e:	e7ea      	b.n	800df26 <_strtod_l+0x216>
 800df50:	2910      	cmp	r1, #16
 800df52:	bfd8      	it	le
 800df54:	4366      	mulle	r6, r4
 800df56:	e7e6      	b.n	800df26 <_strtod_l+0x216>
 800df58:	2b0f      	cmp	r3, #15
 800df5a:	dcee      	bgt.n	800df3a <_strtod_l+0x22a>
 800df5c:	230a      	movs	r3, #10
 800df5e:	fb03 2606 	mla	r6, r3, r6, r2
 800df62:	e7ea      	b.n	800df3a <_strtod_l+0x22a>
 800df64:	461c      	mov	r4, r3
 800df66:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800df68:	1c5a      	adds	r2, r3, #1
 800df6a:	9211      	str	r2, [sp, #68]	@ 0x44
 800df6c:	785a      	ldrb	r2, [r3, #1]
 800df6e:	4608      	mov	r0, r1
 800df70:	4623      	mov	r3, r4
 800df72:	e7b7      	b.n	800dee4 <_strtod_l+0x1d4>
 800df74:	2301      	movs	r3, #1
 800df76:	2700      	movs	r7, #0
 800df78:	9306      	str	r3, [sp, #24]
 800df7a:	e786      	b.n	800de8a <_strtod_l+0x17a>
 800df7c:	f04f 0e00 	mov.w	lr, #0
 800df80:	f108 0202 	add.w	r2, r8, #2
 800df84:	9211      	str	r2, [sp, #68]	@ 0x44
 800df86:	f898 2002 	ldrb.w	r2, [r8, #2]
 800df8a:	e78f      	b.n	800deac <_strtod_l+0x19c>
 800df8c:	f04f 0e01 	mov.w	lr, #1
 800df90:	e7f6      	b.n	800df80 <_strtod_l+0x270>
 800df92:	bf00      	nop
 800df94:	0800fda0 	.word	0x0800fda0
 800df98:	0800fd88 	.word	0x0800fd88
 800df9c:	7ff00000 	.word	0x7ff00000
 800dfa0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfa2:	1c54      	adds	r4, r2, #1
 800dfa4:	9411      	str	r4, [sp, #68]	@ 0x44
 800dfa6:	7852      	ldrb	r2, [r2, #1]
 800dfa8:	2a30      	cmp	r2, #48	@ 0x30
 800dfaa:	d0f9      	beq.n	800dfa0 <_strtod_l+0x290>
 800dfac:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 800dfb0:	2c08      	cmp	r4, #8
 800dfb2:	d881      	bhi.n	800deb8 <_strtod_l+0x1a8>
 800dfb4:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 800dfb8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfba:	9209      	str	r2, [sp, #36]	@ 0x24
 800dfbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800dfbe:	1c51      	adds	r1, r2, #1
 800dfc0:	9111      	str	r1, [sp, #68]	@ 0x44
 800dfc2:	7852      	ldrb	r2, [r2, #1]
 800dfc4:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 800dfc8:	2c09      	cmp	r4, #9
 800dfca:	d938      	bls.n	800e03e <_strtod_l+0x32e>
 800dfcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800dfce:	1b0c      	subs	r4, r1, r4
 800dfd0:	2c08      	cmp	r4, #8
 800dfd2:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800dfd6:	dc02      	bgt.n	800dfde <_strtod_l+0x2ce>
 800dfd8:	4564      	cmp	r4, ip
 800dfda:	bfa8      	it	ge
 800dfdc:	4664      	movge	r4, ip
 800dfde:	f1be 0f00 	cmp.w	lr, #0
 800dfe2:	d000      	beq.n	800dfe6 <_strtod_l+0x2d6>
 800dfe4:	4264      	negs	r4, r4
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d14e      	bne.n	800e088 <_strtod_l+0x378>
 800dfea:	9b07      	ldr	r3, [sp, #28]
 800dfec:	4318      	orrs	r0, r3
 800dfee:	f47f aeca 	bne.w	800dd86 <_strtod_l+0x76>
 800dff2:	9b06      	ldr	r3, [sp, #24]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	f47f aee2 	bne.w	800ddbe <_strtod_l+0xae>
 800dffa:	2a69      	cmp	r2, #105	@ 0x69
 800dffc:	d027      	beq.n	800e04e <_strtod_l+0x33e>
 800dffe:	dc24      	bgt.n	800e04a <_strtod_l+0x33a>
 800e000:	2a49      	cmp	r2, #73	@ 0x49
 800e002:	d024      	beq.n	800e04e <_strtod_l+0x33e>
 800e004:	2a4e      	cmp	r2, #78	@ 0x4e
 800e006:	f47f aeda 	bne.w	800ddbe <_strtod_l+0xae>
 800e00a:	4997      	ldr	r1, [pc, #604]	@ (800e268 <_strtod_l+0x558>)
 800e00c:	a811      	add	r0, sp, #68	@ 0x44
 800e00e:	f001 f9ab 	bl	800f368 <__match>
 800e012:	2800      	cmp	r0, #0
 800e014:	f43f aed3 	beq.w	800ddbe <_strtod_l+0xae>
 800e018:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e01a:	781b      	ldrb	r3, [r3, #0]
 800e01c:	2b28      	cmp	r3, #40	@ 0x28
 800e01e:	d12d      	bne.n	800e07c <_strtod_l+0x36c>
 800e020:	4992      	ldr	r1, [pc, #584]	@ (800e26c <_strtod_l+0x55c>)
 800e022:	aa14      	add	r2, sp, #80	@ 0x50
 800e024:	a811      	add	r0, sp, #68	@ 0x44
 800e026:	f001 f9b3 	bl	800f390 <__hexnan>
 800e02a:	2805      	cmp	r0, #5
 800e02c:	d126      	bne.n	800e07c <_strtod_l+0x36c>
 800e02e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e030:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800e034:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800e038:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800e03c:	e6a3      	b.n	800dd86 <_strtod_l+0x76>
 800e03e:	240a      	movs	r4, #10
 800e040:	fb04 2c0c 	mla	ip, r4, ip, r2
 800e044:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 800e048:	e7b8      	b.n	800dfbc <_strtod_l+0x2ac>
 800e04a:	2a6e      	cmp	r2, #110	@ 0x6e
 800e04c:	e7db      	b.n	800e006 <_strtod_l+0x2f6>
 800e04e:	4988      	ldr	r1, [pc, #544]	@ (800e270 <_strtod_l+0x560>)
 800e050:	a811      	add	r0, sp, #68	@ 0x44
 800e052:	f001 f989 	bl	800f368 <__match>
 800e056:	2800      	cmp	r0, #0
 800e058:	f43f aeb1 	beq.w	800ddbe <_strtod_l+0xae>
 800e05c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e05e:	4985      	ldr	r1, [pc, #532]	@ (800e274 <_strtod_l+0x564>)
 800e060:	3b01      	subs	r3, #1
 800e062:	a811      	add	r0, sp, #68	@ 0x44
 800e064:	9311      	str	r3, [sp, #68]	@ 0x44
 800e066:	f001 f97f 	bl	800f368 <__match>
 800e06a:	b910      	cbnz	r0, 800e072 <_strtod_l+0x362>
 800e06c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e06e:	3301      	adds	r3, #1
 800e070:	9311      	str	r3, [sp, #68]	@ 0x44
 800e072:	f8df b214 	ldr.w	fp, [pc, #532]	@ 800e288 <_strtod_l+0x578>
 800e076:	f04f 0a00 	mov.w	sl, #0
 800e07a:	e684      	b.n	800dd86 <_strtod_l+0x76>
 800e07c:	487e      	ldr	r0, [pc, #504]	@ (800e278 <_strtod_l+0x568>)
 800e07e:	f000 feaf 	bl	800ede0 <nan>
 800e082:	ec5b ab10 	vmov	sl, fp, d0
 800e086:	e67e      	b.n	800dd86 <_strtod_l+0x76>
 800e088:	ee07 9a90 	vmov	s15, r9
 800e08c:	1be2      	subs	r2, r4, r7
 800e08e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800e092:	2d00      	cmp	r5, #0
 800e094:	bf08      	it	eq
 800e096:	461d      	moveq	r5, r3
 800e098:	2b10      	cmp	r3, #16
 800e09a:	9209      	str	r2, [sp, #36]	@ 0x24
 800e09c:	461a      	mov	r2, r3
 800e09e:	bfa8      	it	ge
 800e0a0:	2210      	movge	r2, #16
 800e0a2:	2b09      	cmp	r3, #9
 800e0a4:	ec5b ab17 	vmov	sl, fp, d7
 800e0a8:	dc15      	bgt.n	800e0d6 <_strtod_l+0x3c6>
 800e0aa:	1be1      	subs	r1, r4, r7
 800e0ac:	2900      	cmp	r1, #0
 800e0ae:	f43f ae6a 	beq.w	800dd86 <_strtod_l+0x76>
 800e0b2:	eba4 0107 	sub.w	r1, r4, r7
 800e0b6:	dd72      	ble.n	800e19e <_strtod_l+0x48e>
 800e0b8:	2916      	cmp	r1, #22
 800e0ba:	dc59      	bgt.n	800e170 <_strtod_l+0x460>
 800e0bc:	4b6f      	ldr	r3, [pc, #444]	@ (800e27c <_strtod_l+0x56c>)
 800e0be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e0c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0c4:	ed93 7b00 	vldr	d7, [r3]
 800e0c8:	ec4b ab16 	vmov	d6, sl, fp
 800e0cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e0d0:	ec5b ab17 	vmov	sl, fp, d7
 800e0d4:	e657      	b.n	800dd86 <_strtod_l+0x76>
 800e0d6:	4969      	ldr	r1, [pc, #420]	@ (800e27c <_strtod_l+0x56c>)
 800e0d8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e0dc:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 800e0e0:	ee06 6a90 	vmov	s13, r6
 800e0e4:	2b0f      	cmp	r3, #15
 800e0e6:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 800e0ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 800e0ee:	ec5b ab16 	vmov	sl, fp, d6
 800e0f2:	ddda      	ble.n	800e0aa <_strtod_l+0x39a>
 800e0f4:	1a9a      	subs	r2, r3, r2
 800e0f6:	1be1      	subs	r1, r4, r7
 800e0f8:	440a      	add	r2, r1
 800e0fa:	2a00      	cmp	r2, #0
 800e0fc:	f340 8094 	ble.w	800e228 <_strtod_l+0x518>
 800e100:	f012 000f 	ands.w	r0, r2, #15
 800e104:	d00a      	beq.n	800e11c <_strtod_l+0x40c>
 800e106:	495d      	ldr	r1, [pc, #372]	@ (800e27c <_strtod_l+0x56c>)
 800e108:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e10c:	ed91 7b00 	vldr	d7, [r1]
 800e110:	ec4b ab16 	vmov	d6, sl, fp
 800e114:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e118:	ec5b ab17 	vmov	sl, fp, d7
 800e11c:	f032 020f 	bics.w	r2, r2, #15
 800e120:	d073      	beq.n	800e20a <_strtod_l+0x4fa>
 800e122:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800e126:	dd47      	ble.n	800e1b8 <_strtod_l+0x4a8>
 800e128:	2400      	movs	r4, #0
 800e12a:	4625      	mov	r5, r4
 800e12c:	9407      	str	r4, [sp, #28]
 800e12e:	4626      	mov	r6, r4
 800e130:	9a05      	ldr	r2, [sp, #20]
 800e132:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800e288 <_strtod_l+0x578>
 800e136:	2322      	movs	r3, #34	@ 0x22
 800e138:	6013      	str	r3, [r2, #0]
 800e13a:	f04f 0a00 	mov.w	sl, #0
 800e13e:	9b07      	ldr	r3, [sp, #28]
 800e140:	2b00      	cmp	r3, #0
 800e142:	f43f ae20 	beq.w	800dd86 <_strtod_l+0x76>
 800e146:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e148:	9805      	ldr	r0, [sp, #20]
 800e14a:	f7ff f957 	bl	800d3fc <_Bfree>
 800e14e:	9805      	ldr	r0, [sp, #20]
 800e150:	4631      	mov	r1, r6
 800e152:	f7ff f953 	bl	800d3fc <_Bfree>
 800e156:	9805      	ldr	r0, [sp, #20]
 800e158:	4629      	mov	r1, r5
 800e15a:	f7ff f94f 	bl	800d3fc <_Bfree>
 800e15e:	9907      	ldr	r1, [sp, #28]
 800e160:	9805      	ldr	r0, [sp, #20]
 800e162:	f7ff f94b 	bl	800d3fc <_Bfree>
 800e166:	9805      	ldr	r0, [sp, #20]
 800e168:	4621      	mov	r1, r4
 800e16a:	f7ff f947 	bl	800d3fc <_Bfree>
 800e16e:	e60a      	b.n	800dd86 <_strtod_l+0x76>
 800e170:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800e174:	1be0      	subs	r0, r4, r7
 800e176:	4281      	cmp	r1, r0
 800e178:	dbbc      	blt.n	800e0f4 <_strtod_l+0x3e4>
 800e17a:	4a40      	ldr	r2, [pc, #256]	@ (800e27c <_strtod_l+0x56c>)
 800e17c:	f1c3 030f 	rsb	r3, r3, #15
 800e180:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800e184:	ed91 7b00 	vldr	d7, [r1]
 800e188:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e18a:	ec4b ab16 	vmov	d6, sl, fp
 800e18e:	1acb      	subs	r3, r1, r3
 800e190:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e194:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e198:	ed92 6b00 	vldr	d6, [r2]
 800e19c:	e796      	b.n	800e0cc <_strtod_l+0x3bc>
 800e19e:	3116      	adds	r1, #22
 800e1a0:	dba8      	blt.n	800e0f4 <_strtod_l+0x3e4>
 800e1a2:	4b36      	ldr	r3, [pc, #216]	@ (800e27c <_strtod_l+0x56c>)
 800e1a4:	1b3c      	subs	r4, r7, r4
 800e1a6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800e1aa:	ed94 7b00 	vldr	d7, [r4]
 800e1ae:	ec4b ab16 	vmov	d6, sl, fp
 800e1b2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e1b6:	e78b      	b.n	800e0d0 <_strtod_l+0x3c0>
 800e1b8:	2000      	movs	r0, #0
 800e1ba:	ec4b ab17 	vmov	d7, sl, fp
 800e1be:	4e30      	ldr	r6, [pc, #192]	@ (800e280 <_strtod_l+0x570>)
 800e1c0:	1112      	asrs	r2, r2, #4
 800e1c2:	4601      	mov	r1, r0
 800e1c4:	2a01      	cmp	r2, #1
 800e1c6:	dc23      	bgt.n	800e210 <_strtod_l+0x500>
 800e1c8:	b108      	cbz	r0, 800e1ce <_strtod_l+0x4be>
 800e1ca:	ec5b ab17 	vmov	sl, fp, d7
 800e1ce:	4a2c      	ldr	r2, [pc, #176]	@ (800e280 <_strtod_l+0x570>)
 800e1d0:	482c      	ldr	r0, [pc, #176]	@ (800e284 <_strtod_l+0x574>)
 800e1d2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e1d6:	ed92 7b00 	vldr	d7, [r2]
 800e1da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800e1de:	ec4b ab16 	vmov	d6, sl, fp
 800e1e2:	4a29      	ldr	r2, [pc, #164]	@ (800e288 <_strtod_l+0x578>)
 800e1e4:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e1e8:	ee17 1a90 	vmov	r1, s15
 800e1ec:	400a      	ands	r2, r1
 800e1ee:	4282      	cmp	r2, r0
 800e1f0:	ec5b ab17 	vmov	sl, fp, d7
 800e1f4:	d898      	bhi.n	800e128 <_strtod_l+0x418>
 800e1f6:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 800e1fa:	4282      	cmp	r2, r0
 800e1fc:	bf86      	itte	hi
 800e1fe:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 800e28c <_strtod_l+0x57c>
 800e202:	f04f 3aff 	movhi.w	sl, #4294967295
 800e206:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 800e20a:	2200      	movs	r2, #0
 800e20c:	9206      	str	r2, [sp, #24]
 800e20e:	e076      	b.n	800e2fe <_strtod_l+0x5ee>
 800e210:	f012 0f01 	tst.w	r2, #1
 800e214:	d004      	beq.n	800e220 <_strtod_l+0x510>
 800e216:	ed96 6b00 	vldr	d6, [r6]
 800e21a:	2001      	movs	r0, #1
 800e21c:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e220:	3101      	adds	r1, #1
 800e222:	1052      	asrs	r2, r2, #1
 800e224:	3608      	adds	r6, #8
 800e226:	e7cd      	b.n	800e1c4 <_strtod_l+0x4b4>
 800e228:	d0ef      	beq.n	800e20a <_strtod_l+0x4fa>
 800e22a:	4252      	negs	r2, r2
 800e22c:	f012 000f 	ands.w	r0, r2, #15
 800e230:	d00a      	beq.n	800e248 <_strtod_l+0x538>
 800e232:	4912      	ldr	r1, [pc, #72]	@ (800e27c <_strtod_l+0x56c>)
 800e234:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800e238:	ed91 7b00 	vldr	d7, [r1]
 800e23c:	ec4b ab16 	vmov	d6, sl, fp
 800e240:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800e244:	ec5b ab17 	vmov	sl, fp, d7
 800e248:	1112      	asrs	r2, r2, #4
 800e24a:	d0de      	beq.n	800e20a <_strtod_l+0x4fa>
 800e24c:	2a1f      	cmp	r2, #31
 800e24e:	dd1f      	ble.n	800e290 <_strtod_l+0x580>
 800e250:	2400      	movs	r4, #0
 800e252:	4625      	mov	r5, r4
 800e254:	9407      	str	r4, [sp, #28]
 800e256:	4626      	mov	r6, r4
 800e258:	9a05      	ldr	r2, [sp, #20]
 800e25a:	2322      	movs	r3, #34	@ 0x22
 800e25c:	f04f 0a00 	mov.w	sl, #0
 800e260:	f04f 0b00 	mov.w	fp, #0
 800e264:	6013      	str	r3, [r2, #0]
 800e266:	e76a      	b.n	800e13e <_strtod_l+0x42e>
 800e268:	0800fb79 	.word	0x0800fb79
 800e26c:	0800fd8c 	.word	0x0800fd8c
 800e270:	0800fb71 	.word	0x0800fb71
 800e274:	0800fba8 	.word	0x0800fba8
 800e278:	0800ff35 	.word	0x0800ff35
 800e27c:	0800fcc0 	.word	0x0800fcc0
 800e280:	0800fc98 	.word	0x0800fc98
 800e284:	7ca00000 	.word	0x7ca00000
 800e288:	7ff00000 	.word	0x7ff00000
 800e28c:	7fefffff 	.word	0x7fefffff
 800e290:	f012 0110 	ands.w	r1, r2, #16
 800e294:	bf18      	it	ne
 800e296:	216a      	movne	r1, #106	@ 0x6a
 800e298:	9106      	str	r1, [sp, #24]
 800e29a:	ec4b ab17 	vmov	d7, sl, fp
 800e29e:	49b0      	ldr	r1, [pc, #704]	@ (800e560 <_strtod_l+0x850>)
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	07d6      	lsls	r6, r2, #31
 800e2a4:	d504      	bpl.n	800e2b0 <_strtod_l+0x5a0>
 800e2a6:	ed91 6b00 	vldr	d6, [r1]
 800e2aa:	2001      	movs	r0, #1
 800e2ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 800e2b0:	1052      	asrs	r2, r2, #1
 800e2b2:	f101 0108 	add.w	r1, r1, #8
 800e2b6:	d1f4      	bne.n	800e2a2 <_strtod_l+0x592>
 800e2b8:	b108      	cbz	r0, 800e2be <_strtod_l+0x5ae>
 800e2ba:	ec5b ab17 	vmov	sl, fp, d7
 800e2be:	9a06      	ldr	r2, [sp, #24]
 800e2c0:	b1b2      	cbz	r2, 800e2f0 <_strtod_l+0x5e0>
 800e2c2:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800e2c6:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 800e2ca:	2a00      	cmp	r2, #0
 800e2cc:	4658      	mov	r0, fp
 800e2ce:	dd0f      	ble.n	800e2f0 <_strtod_l+0x5e0>
 800e2d0:	2a1f      	cmp	r2, #31
 800e2d2:	dd55      	ble.n	800e380 <_strtod_l+0x670>
 800e2d4:	2a34      	cmp	r2, #52	@ 0x34
 800e2d6:	bfde      	ittt	le
 800e2d8:	f04f 32ff 	movle.w	r2, #4294967295
 800e2dc:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 800e2e0:	408a      	lslle	r2, r1
 800e2e2:	f04f 0a00 	mov.w	sl, #0
 800e2e6:	bfcc      	ite	gt
 800e2e8:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800e2ec:	ea02 0b00 	andle.w	fp, r2, r0
 800e2f0:	ec4b ab17 	vmov	d7, sl, fp
 800e2f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2fc:	d0a8      	beq.n	800e250 <_strtod_l+0x540>
 800e2fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e300:	9805      	ldr	r0, [sp, #20]
 800e302:	f8cd 9000 	str.w	r9, [sp]
 800e306:	462a      	mov	r2, r5
 800e308:	f7ff f8e0 	bl	800d4cc <__s2b>
 800e30c:	9007      	str	r0, [sp, #28]
 800e30e:	2800      	cmp	r0, #0
 800e310:	f43f af0a 	beq.w	800e128 <_strtod_l+0x418>
 800e314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e316:	1b3f      	subs	r7, r7, r4
 800e318:	2b00      	cmp	r3, #0
 800e31a:	bfb4      	ite	lt
 800e31c:	463b      	movlt	r3, r7
 800e31e:	2300      	movge	r3, #0
 800e320:	930a      	str	r3, [sp, #40]	@ 0x28
 800e322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e324:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 800e550 <_strtod_l+0x840>
 800e328:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800e32c:	2400      	movs	r4, #0
 800e32e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e330:	4625      	mov	r5, r4
 800e332:	9b07      	ldr	r3, [sp, #28]
 800e334:	9805      	ldr	r0, [sp, #20]
 800e336:	6859      	ldr	r1, [r3, #4]
 800e338:	f7ff f820 	bl	800d37c <_Balloc>
 800e33c:	4606      	mov	r6, r0
 800e33e:	2800      	cmp	r0, #0
 800e340:	f43f aef6 	beq.w	800e130 <_strtod_l+0x420>
 800e344:	9b07      	ldr	r3, [sp, #28]
 800e346:	691a      	ldr	r2, [r3, #16]
 800e348:	ec4b ab19 	vmov	d9, sl, fp
 800e34c:	3202      	adds	r2, #2
 800e34e:	f103 010c 	add.w	r1, r3, #12
 800e352:	0092      	lsls	r2, r2, #2
 800e354:	300c      	adds	r0, #12
 800e356:	f000 fd33 	bl	800edc0 <memcpy>
 800e35a:	eeb0 0b49 	vmov.f64	d0, d9
 800e35e:	9805      	ldr	r0, [sp, #20]
 800e360:	aa14      	add	r2, sp, #80	@ 0x50
 800e362:	a913      	add	r1, sp, #76	@ 0x4c
 800e364:	f7ff fbee 	bl	800db44 <__d2b>
 800e368:	9012      	str	r0, [sp, #72]	@ 0x48
 800e36a:	2800      	cmp	r0, #0
 800e36c:	f43f aee0 	beq.w	800e130 <_strtod_l+0x420>
 800e370:	9805      	ldr	r0, [sp, #20]
 800e372:	2101      	movs	r1, #1
 800e374:	f7ff f940 	bl	800d5f8 <__i2b>
 800e378:	4605      	mov	r5, r0
 800e37a:	b940      	cbnz	r0, 800e38e <_strtod_l+0x67e>
 800e37c:	2500      	movs	r5, #0
 800e37e:	e6d7      	b.n	800e130 <_strtod_l+0x420>
 800e380:	f04f 31ff 	mov.w	r1, #4294967295
 800e384:	fa01 f202 	lsl.w	r2, r1, r2
 800e388:	ea02 0a0a 	and.w	sl, r2, sl
 800e38c:	e7b0      	b.n	800e2f0 <_strtod_l+0x5e0>
 800e38e:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 800e390:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e392:	2f00      	cmp	r7, #0
 800e394:	bfab      	itete	ge
 800e396:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 800e398:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 800e39a:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 800e39e:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800e3a2:	bfac      	ite	ge
 800e3a4:	eb07 0903 	addge.w	r9, r7, r3
 800e3a8:	eba3 0807 	sublt.w	r8, r3, r7
 800e3ac:	9b06      	ldr	r3, [sp, #24]
 800e3ae:	1aff      	subs	r7, r7, r3
 800e3b0:	4417      	add	r7, r2
 800e3b2:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800e3b6:	4a6b      	ldr	r2, [pc, #428]	@ (800e564 <_strtod_l+0x854>)
 800e3b8:	3f01      	subs	r7, #1
 800e3ba:	4297      	cmp	r7, r2
 800e3bc:	da51      	bge.n	800e462 <_strtod_l+0x752>
 800e3be:	1bd1      	subs	r1, r2, r7
 800e3c0:	291f      	cmp	r1, #31
 800e3c2:	eba3 0301 	sub.w	r3, r3, r1
 800e3c6:	f04f 0201 	mov.w	r2, #1
 800e3ca:	dc3e      	bgt.n	800e44a <_strtod_l+0x73a>
 800e3cc:	408a      	lsls	r2, r1
 800e3ce:	920c      	str	r2, [sp, #48]	@ 0x30
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e3d4:	eb09 0703 	add.w	r7, r9, r3
 800e3d8:	4498      	add	r8, r3
 800e3da:	9b06      	ldr	r3, [sp, #24]
 800e3dc:	45b9      	cmp	r9, r7
 800e3de:	4498      	add	r8, r3
 800e3e0:	464b      	mov	r3, r9
 800e3e2:	bfa8      	it	ge
 800e3e4:	463b      	movge	r3, r7
 800e3e6:	4543      	cmp	r3, r8
 800e3e8:	bfa8      	it	ge
 800e3ea:	4643      	movge	r3, r8
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	bfc2      	ittt	gt
 800e3f0:	1aff      	subgt	r7, r7, r3
 800e3f2:	eba8 0803 	subgt.w	r8, r8, r3
 800e3f6:	eba9 0903 	subgt.w	r9, r9, r3
 800e3fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	dd16      	ble.n	800e42e <_strtod_l+0x71e>
 800e400:	4629      	mov	r1, r5
 800e402:	9805      	ldr	r0, [sp, #20]
 800e404:	461a      	mov	r2, r3
 800e406:	f7ff f9b7 	bl	800d778 <__pow5mult>
 800e40a:	4605      	mov	r5, r0
 800e40c:	2800      	cmp	r0, #0
 800e40e:	d0b5      	beq.n	800e37c <_strtod_l+0x66c>
 800e410:	4601      	mov	r1, r0
 800e412:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e414:	9805      	ldr	r0, [sp, #20]
 800e416:	f7ff f905 	bl	800d624 <__multiply>
 800e41a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e41c:	2800      	cmp	r0, #0
 800e41e:	f43f ae87 	beq.w	800e130 <_strtod_l+0x420>
 800e422:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e424:	9805      	ldr	r0, [sp, #20]
 800e426:	f7fe ffe9 	bl	800d3fc <_Bfree>
 800e42a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e42c:	9312      	str	r3, [sp, #72]	@ 0x48
 800e42e:	2f00      	cmp	r7, #0
 800e430:	dc1b      	bgt.n	800e46a <_strtod_l+0x75a>
 800e432:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	dd21      	ble.n	800e47c <_strtod_l+0x76c>
 800e438:	4631      	mov	r1, r6
 800e43a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800e43c:	9805      	ldr	r0, [sp, #20]
 800e43e:	f7ff f99b 	bl	800d778 <__pow5mult>
 800e442:	4606      	mov	r6, r0
 800e444:	b9d0      	cbnz	r0, 800e47c <_strtod_l+0x76c>
 800e446:	2600      	movs	r6, #0
 800e448:	e672      	b.n	800e130 <_strtod_l+0x420>
 800e44a:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 800e44e:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800e452:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800e456:	37e2      	adds	r7, #226	@ 0xe2
 800e458:	fa02 f107 	lsl.w	r1, r2, r7
 800e45c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e45e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e460:	e7b8      	b.n	800e3d4 <_strtod_l+0x6c4>
 800e462:	2200      	movs	r2, #0
 800e464:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e466:	2201      	movs	r2, #1
 800e468:	e7f9      	b.n	800e45e <_strtod_l+0x74e>
 800e46a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e46c:	9805      	ldr	r0, [sp, #20]
 800e46e:	463a      	mov	r2, r7
 800e470:	f7ff f9dc 	bl	800d82c <__lshift>
 800e474:	9012      	str	r0, [sp, #72]	@ 0x48
 800e476:	2800      	cmp	r0, #0
 800e478:	d1db      	bne.n	800e432 <_strtod_l+0x722>
 800e47a:	e659      	b.n	800e130 <_strtod_l+0x420>
 800e47c:	f1b8 0f00 	cmp.w	r8, #0
 800e480:	dd07      	ble.n	800e492 <_strtod_l+0x782>
 800e482:	4631      	mov	r1, r6
 800e484:	9805      	ldr	r0, [sp, #20]
 800e486:	4642      	mov	r2, r8
 800e488:	f7ff f9d0 	bl	800d82c <__lshift>
 800e48c:	4606      	mov	r6, r0
 800e48e:	2800      	cmp	r0, #0
 800e490:	d0d9      	beq.n	800e446 <_strtod_l+0x736>
 800e492:	f1b9 0f00 	cmp.w	r9, #0
 800e496:	dd08      	ble.n	800e4aa <_strtod_l+0x79a>
 800e498:	4629      	mov	r1, r5
 800e49a:	9805      	ldr	r0, [sp, #20]
 800e49c:	464a      	mov	r2, r9
 800e49e:	f7ff f9c5 	bl	800d82c <__lshift>
 800e4a2:	4605      	mov	r5, r0
 800e4a4:	2800      	cmp	r0, #0
 800e4a6:	f43f ae43 	beq.w	800e130 <_strtod_l+0x420>
 800e4aa:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e4ac:	9805      	ldr	r0, [sp, #20]
 800e4ae:	4632      	mov	r2, r6
 800e4b0:	f7ff fa44 	bl	800d93c <__mdiff>
 800e4b4:	4604      	mov	r4, r0
 800e4b6:	2800      	cmp	r0, #0
 800e4b8:	f43f ae3a 	beq.w	800e130 <_strtod_l+0x420>
 800e4bc:	2300      	movs	r3, #0
 800e4be:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800e4c2:	60c3      	str	r3, [r0, #12]
 800e4c4:	4629      	mov	r1, r5
 800e4c6:	f7ff fa1d 	bl	800d904 <__mcmp>
 800e4ca:	2800      	cmp	r0, #0
 800e4cc:	da4e      	bge.n	800e56c <_strtod_l+0x85c>
 800e4ce:	ea58 080a 	orrs.w	r8, r8, sl
 800e4d2:	d174      	bne.n	800e5be <_strtod_l+0x8ae>
 800e4d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d170      	bne.n	800e5be <_strtod_l+0x8ae>
 800e4dc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e4e0:	0d1b      	lsrs	r3, r3, #20
 800e4e2:	051b      	lsls	r3, r3, #20
 800e4e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e4e8:	d969      	bls.n	800e5be <_strtod_l+0x8ae>
 800e4ea:	6963      	ldr	r3, [r4, #20]
 800e4ec:	b913      	cbnz	r3, 800e4f4 <_strtod_l+0x7e4>
 800e4ee:	6923      	ldr	r3, [r4, #16]
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	dd64      	ble.n	800e5be <_strtod_l+0x8ae>
 800e4f4:	4621      	mov	r1, r4
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	9805      	ldr	r0, [sp, #20]
 800e4fa:	f7ff f997 	bl	800d82c <__lshift>
 800e4fe:	4629      	mov	r1, r5
 800e500:	4604      	mov	r4, r0
 800e502:	f7ff f9ff 	bl	800d904 <__mcmp>
 800e506:	2800      	cmp	r0, #0
 800e508:	dd59      	ble.n	800e5be <_strtod_l+0x8ae>
 800e50a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e50e:	9a06      	ldr	r2, [sp, #24]
 800e510:	0d1b      	lsrs	r3, r3, #20
 800e512:	051b      	lsls	r3, r3, #20
 800e514:	2a00      	cmp	r2, #0
 800e516:	d070      	beq.n	800e5fa <_strtod_l+0x8ea>
 800e518:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800e51c:	d86d      	bhi.n	800e5fa <_strtod_l+0x8ea>
 800e51e:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800e522:	f67f ae99 	bls.w	800e258 <_strtod_l+0x548>
 800e526:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 800e558 <_strtod_l+0x848>
 800e52a:	ec4b ab16 	vmov	d6, sl, fp
 800e52e:	4b0e      	ldr	r3, [pc, #56]	@ (800e568 <_strtod_l+0x858>)
 800e530:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e534:	ee17 2a90 	vmov	r2, s15
 800e538:	4013      	ands	r3, r2
 800e53a:	ec5b ab17 	vmov	sl, fp, d7
 800e53e:	2b00      	cmp	r3, #0
 800e540:	f47f ae01 	bne.w	800e146 <_strtod_l+0x436>
 800e544:	9a05      	ldr	r2, [sp, #20]
 800e546:	2322      	movs	r3, #34	@ 0x22
 800e548:	6013      	str	r3, [r2, #0]
 800e54a:	e5fc      	b.n	800e146 <_strtod_l+0x436>
 800e54c:	f3af 8000 	nop.w
 800e550:	ffc00000 	.word	0xffc00000
 800e554:	41dfffff 	.word	0x41dfffff
 800e558:	00000000 	.word	0x00000000
 800e55c:	39500000 	.word	0x39500000
 800e560:	0800fdb8 	.word	0x0800fdb8
 800e564:	fffffc02 	.word	0xfffffc02
 800e568:	7ff00000 	.word	0x7ff00000
 800e56c:	46d9      	mov	r9, fp
 800e56e:	d15d      	bne.n	800e62c <_strtod_l+0x91c>
 800e570:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e574:	f1b8 0f00 	cmp.w	r8, #0
 800e578:	d02a      	beq.n	800e5d0 <_strtod_l+0x8c0>
 800e57a:	4aab      	ldr	r2, [pc, #684]	@ (800e828 <_strtod_l+0xb18>)
 800e57c:	4293      	cmp	r3, r2
 800e57e:	d12a      	bne.n	800e5d6 <_strtod_l+0x8c6>
 800e580:	9b06      	ldr	r3, [sp, #24]
 800e582:	4652      	mov	r2, sl
 800e584:	b1fb      	cbz	r3, 800e5c6 <_strtod_l+0x8b6>
 800e586:	4ba9      	ldr	r3, [pc, #676]	@ (800e82c <_strtod_l+0xb1c>)
 800e588:	ea0b 0303 	and.w	r3, fp, r3
 800e58c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800e590:	f04f 31ff 	mov.w	r1, #4294967295
 800e594:	d81a      	bhi.n	800e5cc <_strtod_l+0x8bc>
 800e596:	0d1b      	lsrs	r3, r3, #20
 800e598:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e59c:	fa01 f303 	lsl.w	r3, r1, r3
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d118      	bne.n	800e5d6 <_strtod_l+0x8c6>
 800e5a4:	4ba2      	ldr	r3, [pc, #648]	@ (800e830 <_strtod_l+0xb20>)
 800e5a6:	4599      	cmp	r9, r3
 800e5a8:	d102      	bne.n	800e5b0 <_strtod_l+0x8a0>
 800e5aa:	3201      	adds	r2, #1
 800e5ac:	f43f adc0 	beq.w	800e130 <_strtod_l+0x420>
 800e5b0:	4b9e      	ldr	r3, [pc, #632]	@ (800e82c <_strtod_l+0xb1c>)
 800e5b2:	ea09 0303 	and.w	r3, r9, r3
 800e5b6:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 800e5ba:	f04f 0a00 	mov.w	sl, #0
 800e5be:	9b06      	ldr	r3, [sp, #24]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d1b0      	bne.n	800e526 <_strtod_l+0x816>
 800e5c4:	e5bf      	b.n	800e146 <_strtod_l+0x436>
 800e5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ca:	e7e9      	b.n	800e5a0 <_strtod_l+0x890>
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	e7e7      	b.n	800e5a0 <_strtod_l+0x890>
 800e5d0:	ea53 030a 	orrs.w	r3, r3, sl
 800e5d4:	d099      	beq.n	800e50a <_strtod_l+0x7fa>
 800e5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5d8:	b1c3      	cbz	r3, 800e60c <_strtod_l+0x8fc>
 800e5da:	ea13 0f09 	tst.w	r3, r9
 800e5de:	d0ee      	beq.n	800e5be <_strtod_l+0x8ae>
 800e5e0:	9a06      	ldr	r2, [sp, #24]
 800e5e2:	4650      	mov	r0, sl
 800e5e4:	4659      	mov	r1, fp
 800e5e6:	f1b8 0f00 	cmp.w	r8, #0
 800e5ea:	d013      	beq.n	800e614 <_strtod_l+0x904>
 800e5ec:	f7ff fb75 	bl	800dcda <sulp>
 800e5f0:	ee39 7b00 	vadd.f64	d7, d9, d0
 800e5f4:	ec5b ab17 	vmov	sl, fp, d7
 800e5f8:	e7e1      	b.n	800e5be <_strtod_l+0x8ae>
 800e5fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800e5fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e602:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e606:	f04f 3aff 	mov.w	sl, #4294967295
 800e60a:	e7d8      	b.n	800e5be <_strtod_l+0x8ae>
 800e60c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e60e:	ea13 0f0a 	tst.w	r3, sl
 800e612:	e7e4      	b.n	800e5de <_strtod_l+0x8ce>
 800e614:	f7ff fb61 	bl	800dcda <sulp>
 800e618:	ee39 0b40 	vsub.f64	d0, d9, d0
 800e61c:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e624:	ec5b ab10 	vmov	sl, fp, d0
 800e628:	d1c9      	bne.n	800e5be <_strtod_l+0x8ae>
 800e62a:	e615      	b.n	800e258 <_strtod_l+0x548>
 800e62c:	4629      	mov	r1, r5
 800e62e:	4620      	mov	r0, r4
 800e630:	f7ff fae0 	bl	800dbf4 <__ratio>
 800e634:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 800e638:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800e63c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e640:	d85d      	bhi.n	800e6fe <_strtod_l+0x9ee>
 800e642:	f1b8 0f00 	cmp.w	r8, #0
 800e646:	d164      	bne.n	800e712 <_strtod_l+0xa02>
 800e648:	f1ba 0f00 	cmp.w	sl, #0
 800e64c:	d14b      	bne.n	800e6e6 <_strtod_l+0x9d6>
 800e64e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e652:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e656:	2b00      	cmp	r3, #0
 800e658:	d160      	bne.n	800e71c <_strtod_l+0xa0c>
 800e65a:	eeb4 0bc8 	vcmpe.f64	d0, d8
 800e65e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e666:	d401      	bmi.n	800e66c <_strtod_l+0x95c>
 800e668:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e66c:	eeb1 ab48 	vneg.f64	d10, d8
 800e670:	486e      	ldr	r0, [pc, #440]	@ (800e82c <_strtod_l+0xb1c>)
 800e672:	4970      	ldr	r1, [pc, #448]	@ (800e834 <_strtod_l+0xb24>)
 800e674:	ea09 0700 	and.w	r7, r9, r0
 800e678:	428f      	cmp	r7, r1
 800e67a:	ec53 2b1a 	vmov	r2, r3, d10
 800e67e:	d17d      	bne.n	800e77c <_strtod_l+0xa6c>
 800e680:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800e684:	ec4b ab1c 	vmov	d12, sl, fp
 800e688:	eeb0 0b4c 	vmov.f64	d0, d12
 800e68c:	f7ff f9ea 	bl	800da64 <__ulp>
 800e690:	4866      	ldr	r0, [pc, #408]	@ (800e82c <_strtod_l+0xb1c>)
 800e692:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800e696:	ee1c 3a90 	vmov	r3, s25
 800e69a:	4a67      	ldr	r2, [pc, #412]	@ (800e838 <_strtod_l+0xb28>)
 800e69c:	ea03 0100 	and.w	r1, r3, r0
 800e6a0:	4291      	cmp	r1, r2
 800e6a2:	ec5b ab1c 	vmov	sl, fp, d12
 800e6a6:	d93c      	bls.n	800e722 <_strtod_l+0xa12>
 800e6a8:	ee19 2a90 	vmov	r2, s19
 800e6ac:	4b60      	ldr	r3, [pc, #384]	@ (800e830 <_strtod_l+0xb20>)
 800e6ae:	429a      	cmp	r2, r3
 800e6b0:	d104      	bne.n	800e6bc <_strtod_l+0x9ac>
 800e6b2:	ee19 3a10 	vmov	r3, s18
 800e6b6:	3301      	adds	r3, #1
 800e6b8:	f43f ad3a 	beq.w	800e130 <_strtod_l+0x420>
 800e6bc:	f8df b170 	ldr.w	fp, [pc, #368]	@ 800e830 <_strtod_l+0xb20>
 800e6c0:	f04f 3aff 	mov.w	sl, #4294967295
 800e6c4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800e6c6:	9805      	ldr	r0, [sp, #20]
 800e6c8:	f7fe fe98 	bl	800d3fc <_Bfree>
 800e6cc:	9805      	ldr	r0, [sp, #20]
 800e6ce:	4631      	mov	r1, r6
 800e6d0:	f7fe fe94 	bl	800d3fc <_Bfree>
 800e6d4:	9805      	ldr	r0, [sp, #20]
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7fe fe90 	bl	800d3fc <_Bfree>
 800e6dc:	9805      	ldr	r0, [sp, #20]
 800e6de:	4621      	mov	r1, r4
 800e6e0:	f7fe fe8c 	bl	800d3fc <_Bfree>
 800e6e4:	e625      	b.n	800e332 <_strtod_l+0x622>
 800e6e6:	f1ba 0f01 	cmp.w	sl, #1
 800e6ea:	d103      	bne.n	800e6f4 <_strtod_l+0x9e4>
 800e6ec:	f1bb 0f00 	cmp.w	fp, #0
 800e6f0:	f43f adb2 	beq.w	800e258 <_strtod_l+0x548>
 800e6f4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e6f8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800e6fc:	e7b8      	b.n	800e670 <_strtod_l+0x960>
 800e6fe:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800e702:	ee20 8b08 	vmul.f64	d8, d0, d8
 800e706:	f1b8 0f00 	cmp.w	r8, #0
 800e70a:	d0af      	beq.n	800e66c <_strtod_l+0x95c>
 800e70c:	eeb0 ab48 	vmov.f64	d10, d8
 800e710:	e7ae      	b.n	800e670 <_strtod_l+0x960>
 800e712:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 800e716:	eeb0 8b4a 	vmov.f64	d8, d10
 800e71a:	e7a9      	b.n	800e670 <_strtod_l+0x960>
 800e71c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 800e720:	e7a6      	b.n	800e670 <_strtod_l+0x960>
 800e722:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800e726:	9b06      	ldr	r3, [sp, #24]
 800e728:	46d9      	mov	r9, fp
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d1ca      	bne.n	800e6c4 <_strtod_l+0x9b4>
 800e72e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e732:	0d1b      	lsrs	r3, r3, #20
 800e734:	051b      	lsls	r3, r3, #20
 800e736:	429f      	cmp	r7, r3
 800e738:	d1c4      	bne.n	800e6c4 <_strtod_l+0x9b4>
 800e73a:	ec51 0b18 	vmov	r0, r1, d8
 800e73e:	f7f1 fffb 	bl	8000738 <__aeabi_d2lz>
 800e742:	f7f1 ffb3 	bl	80006ac <__aeabi_l2d>
 800e746:	f3cb 0913 	ubfx	r9, fp, #0, #20
 800e74a:	ec41 0b17 	vmov	d7, r0, r1
 800e74e:	ea49 090a 	orr.w	r9, r9, sl
 800e752:	ea59 0908 	orrs.w	r9, r9, r8
 800e756:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e75a:	d03c      	beq.n	800e7d6 <_strtod_l+0xac6>
 800e75c:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 800e810 <_strtod_l+0xb00>
 800e760:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e768:	f53f aced 	bmi.w	800e146 <_strtod_l+0x436>
 800e76c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800e818 <_strtod_l+0xb08>
 800e770:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e778:	dda4      	ble.n	800e6c4 <_strtod_l+0x9b4>
 800e77a:	e4e4      	b.n	800e146 <_strtod_l+0x436>
 800e77c:	9906      	ldr	r1, [sp, #24]
 800e77e:	b1e1      	cbz	r1, 800e7ba <_strtod_l+0xaaa>
 800e780:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800e784:	d819      	bhi.n	800e7ba <_strtod_l+0xaaa>
 800e786:	eeb4 8bcb 	vcmpe.f64	d8, d11
 800e78a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e78e:	d811      	bhi.n	800e7b4 <_strtod_l+0xaa4>
 800e790:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800e794:	ee18 3a10 	vmov	r3, s16
 800e798:	2b01      	cmp	r3, #1
 800e79a:	bf38      	it	cc
 800e79c:	2301      	movcc	r3, #1
 800e79e:	ee08 3a10 	vmov	s16, r3
 800e7a2:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800e7a6:	f1b8 0f00 	cmp.w	r8, #0
 800e7aa:	d111      	bne.n	800e7d0 <_strtod_l+0xac0>
 800e7ac:	eeb1 7b48 	vneg.f64	d7, d8
 800e7b0:	ec53 2b17 	vmov	r2, r3, d7
 800e7b4:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 800e7b8:	1bcb      	subs	r3, r1, r7
 800e7ba:	eeb0 0b49 	vmov.f64	d0, d9
 800e7be:	ec43 2b1a 	vmov	d10, r2, r3
 800e7c2:	f7ff f94f 	bl	800da64 <__ulp>
 800e7c6:	eeaa 9b00 	vfma.f64	d9, d10, d0
 800e7ca:	ec5b ab19 	vmov	sl, fp, d9
 800e7ce:	e7aa      	b.n	800e726 <_strtod_l+0xa16>
 800e7d0:	eeb0 7b48 	vmov.f64	d7, d8
 800e7d4:	e7ec      	b.n	800e7b0 <_strtod_l+0xaa0>
 800e7d6:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 800e820 <_strtod_l+0xb10>
 800e7da:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e7de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e7e2:	f57f af6f 	bpl.w	800e6c4 <_strtod_l+0x9b4>
 800e7e6:	e4ae      	b.n	800e146 <_strtod_l+0x436>
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	9308      	str	r3, [sp, #32]
 800e7ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e7ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e7f0:	6013      	str	r3, [r2, #0]
 800e7f2:	f7ff bacc 	b.w	800dd8e <_strtod_l+0x7e>
 800e7f6:	2a65      	cmp	r2, #101	@ 0x65
 800e7f8:	f43f abbc 	beq.w	800df74 <_strtod_l+0x264>
 800e7fc:	2a45      	cmp	r2, #69	@ 0x45
 800e7fe:	f43f abb9 	beq.w	800df74 <_strtod_l+0x264>
 800e802:	2301      	movs	r3, #1
 800e804:	9306      	str	r3, [sp, #24]
 800e806:	f7ff bbf0 	b.w	800dfea <_strtod_l+0x2da>
 800e80a:	bf00      	nop
 800e80c:	f3af 8000 	nop.w
 800e810:	94a03595 	.word	0x94a03595
 800e814:	3fdfffff 	.word	0x3fdfffff
 800e818:	35afe535 	.word	0x35afe535
 800e81c:	3fe00000 	.word	0x3fe00000
 800e820:	94a03595 	.word	0x94a03595
 800e824:	3fcfffff 	.word	0x3fcfffff
 800e828:	000fffff 	.word	0x000fffff
 800e82c:	7ff00000 	.word	0x7ff00000
 800e830:	7fefffff 	.word	0x7fefffff
 800e834:	7fe00000 	.word	0x7fe00000
 800e838:	7c9fffff 	.word	0x7c9fffff

0800e83c <_strtod_r>:
 800e83c:	4b01      	ldr	r3, [pc, #4]	@ (800e844 <_strtod_r+0x8>)
 800e83e:	f7ff ba67 	b.w	800dd10 <_strtod_l>
 800e842:	bf00      	nop
 800e844:	24000070 	.word	0x24000070

0800e848 <_strtol_l.constprop.0>:
 800e848:	2b24      	cmp	r3, #36	@ 0x24
 800e84a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e84e:	4686      	mov	lr, r0
 800e850:	4690      	mov	r8, r2
 800e852:	d801      	bhi.n	800e858 <_strtol_l.constprop.0+0x10>
 800e854:	2b01      	cmp	r3, #1
 800e856:	d106      	bne.n	800e866 <_strtol_l.constprop.0+0x1e>
 800e858:	f7fd fe7e 	bl	800c558 <__errno>
 800e85c:	2316      	movs	r3, #22
 800e85e:	6003      	str	r3, [r0, #0]
 800e860:	2000      	movs	r0, #0
 800e862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e866:	4834      	ldr	r0, [pc, #208]	@ (800e938 <_strtol_l.constprop.0+0xf0>)
 800e868:	460d      	mov	r5, r1
 800e86a:	462a      	mov	r2, r5
 800e86c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e870:	5d06      	ldrb	r6, [r0, r4]
 800e872:	f016 0608 	ands.w	r6, r6, #8
 800e876:	d1f8      	bne.n	800e86a <_strtol_l.constprop.0+0x22>
 800e878:	2c2d      	cmp	r4, #45	@ 0x2d
 800e87a:	d12d      	bne.n	800e8d8 <_strtol_l.constprop.0+0x90>
 800e87c:	782c      	ldrb	r4, [r5, #0]
 800e87e:	2601      	movs	r6, #1
 800e880:	1c95      	adds	r5, r2, #2
 800e882:	f033 0210 	bics.w	r2, r3, #16
 800e886:	d109      	bne.n	800e89c <_strtol_l.constprop.0+0x54>
 800e888:	2c30      	cmp	r4, #48	@ 0x30
 800e88a:	d12a      	bne.n	800e8e2 <_strtol_l.constprop.0+0x9a>
 800e88c:	782a      	ldrb	r2, [r5, #0]
 800e88e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e892:	2a58      	cmp	r2, #88	@ 0x58
 800e894:	d125      	bne.n	800e8e2 <_strtol_l.constprop.0+0x9a>
 800e896:	786c      	ldrb	r4, [r5, #1]
 800e898:	2310      	movs	r3, #16
 800e89a:	3502      	adds	r5, #2
 800e89c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800e8a0:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	fbbc f9f3 	udiv	r9, ip, r3
 800e8aa:	4610      	mov	r0, r2
 800e8ac:	fb03 ca19 	mls	sl, r3, r9, ip
 800e8b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800e8b4:	2f09      	cmp	r7, #9
 800e8b6:	d81b      	bhi.n	800e8f0 <_strtol_l.constprop.0+0xa8>
 800e8b8:	463c      	mov	r4, r7
 800e8ba:	42a3      	cmp	r3, r4
 800e8bc:	dd27      	ble.n	800e90e <_strtol_l.constprop.0+0xc6>
 800e8be:	1c57      	adds	r7, r2, #1
 800e8c0:	d007      	beq.n	800e8d2 <_strtol_l.constprop.0+0x8a>
 800e8c2:	4581      	cmp	r9, r0
 800e8c4:	d320      	bcc.n	800e908 <_strtol_l.constprop.0+0xc0>
 800e8c6:	d101      	bne.n	800e8cc <_strtol_l.constprop.0+0x84>
 800e8c8:	45a2      	cmp	sl, r4
 800e8ca:	db1d      	blt.n	800e908 <_strtol_l.constprop.0+0xc0>
 800e8cc:	fb00 4003 	mla	r0, r0, r3, r4
 800e8d0:	2201      	movs	r2, #1
 800e8d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e8d6:	e7eb      	b.n	800e8b0 <_strtol_l.constprop.0+0x68>
 800e8d8:	2c2b      	cmp	r4, #43	@ 0x2b
 800e8da:	bf04      	itt	eq
 800e8dc:	782c      	ldrbeq	r4, [r5, #0]
 800e8de:	1c95      	addeq	r5, r2, #2
 800e8e0:	e7cf      	b.n	800e882 <_strtol_l.constprop.0+0x3a>
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d1da      	bne.n	800e89c <_strtol_l.constprop.0+0x54>
 800e8e6:	2c30      	cmp	r4, #48	@ 0x30
 800e8e8:	bf0c      	ite	eq
 800e8ea:	2308      	moveq	r3, #8
 800e8ec:	230a      	movne	r3, #10
 800e8ee:	e7d5      	b.n	800e89c <_strtol_l.constprop.0+0x54>
 800e8f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800e8f4:	2f19      	cmp	r7, #25
 800e8f6:	d801      	bhi.n	800e8fc <_strtol_l.constprop.0+0xb4>
 800e8f8:	3c37      	subs	r4, #55	@ 0x37
 800e8fa:	e7de      	b.n	800e8ba <_strtol_l.constprop.0+0x72>
 800e8fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800e900:	2f19      	cmp	r7, #25
 800e902:	d804      	bhi.n	800e90e <_strtol_l.constprop.0+0xc6>
 800e904:	3c57      	subs	r4, #87	@ 0x57
 800e906:	e7d8      	b.n	800e8ba <_strtol_l.constprop.0+0x72>
 800e908:	f04f 32ff 	mov.w	r2, #4294967295
 800e90c:	e7e1      	b.n	800e8d2 <_strtol_l.constprop.0+0x8a>
 800e90e:	1c53      	adds	r3, r2, #1
 800e910:	d108      	bne.n	800e924 <_strtol_l.constprop.0+0xdc>
 800e912:	2322      	movs	r3, #34	@ 0x22
 800e914:	f8ce 3000 	str.w	r3, [lr]
 800e918:	4660      	mov	r0, ip
 800e91a:	f1b8 0f00 	cmp.w	r8, #0
 800e91e:	d0a0      	beq.n	800e862 <_strtol_l.constprop.0+0x1a>
 800e920:	1e69      	subs	r1, r5, #1
 800e922:	e006      	b.n	800e932 <_strtol_l.constprop.0+0xea>
 800e924:	b106      	cbz	r6, 800e928 <_strtol_l.constprop.0+0xe0>
 800e926:	4240      	negs	r0, r0
 800e928:	f1b8 0f00 	cmp.w	r8, #0
 800e92c:	d099      	beq.n	800e862 <_strtol_l.constprop.0+0x1a>
 800e92e:	2a00      	cmp	r2, #0
 800e930:	d1f6      	bne.n	800e920 <_strtol_l.constprop.0+0xd8>
 800e932:	f8c8 1000 	str.w	r1, [r8]
 800e936:	e794      	b.n	800e862 <_strtol_l.constprop.0+0x1a>
 800e938:	0800fde1 	.word	0x0800fde1

0800e93c <_strtol_r>:
 800e93c:	f7ff bf84 	b.w	800e848 <_strtol_l.constprop.0>

0800e940 <__ssputs_r>:
 800e940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e944:	688e      	ldr	r6, [r1, #8]
 800e946:	461f      	mov	r7, r3
 800e948:	42be      	cmp	r6, r7
 800e94a:	680b      	ldr	r3, [r1, #0]
 800e94c:	4682      	mov	sl, r0
 800e94e:	460c      	mov	r4, r1
 800e950:	4690      	mov	r8, r2
 800e952:	d82d      	bhi.n	800e9b0 <__ssputs_r+0x70>
 800e954:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e958:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e95c:	d026      	beq.n	800e9ac <__ssputs_r+0x6c>
 800e95e:	6965      	ldr	r5, [r4, #20]
 800e960:	6909      	ldr	r1, [r1, #16]
 800e962:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e966:	eba3 0901 	sub.w	r9, r3, r1
 800e96a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e96e:	1c7b      	adds	r3, r7, #1
 800e970:	444b      	add	r3, r9
 800e972:	106d      	asrs	r5, r5, #1
 800e974:	429d      	cmp	r5, r3
 800e976:	bf38      	it	cc
 800e978:	461d      	movcc	r5, r3
 800e97a:	0553      	lsls	r3, r2, #21
 800e97c:	d527      	bpl.n	800e9ce <__ssputs_r+0x8e>
 800e97e:	4629      	mov	r1, r5
 800e980:	f7fe fc70 	bl	800d264 <_malloc_r>
 800e984:	4606      	mov	r6, r0
 800e986:	b360      	cbz	r0, 800e9e2 <__ssputs_r+0xa2>
 800e988:	6921      	ldr	r1, [r4, #16]
 800e98a:	464a      	mov	r2, r9
 800e98c:	f000 fa18 	bl	800edc0 <memcpy>
 800e990:	89a3      	ldrh	r3, [r4, #12]
 800e992:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e996:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e99a:	81a3      	strh	r3, [r4, #12]
 800e99c:	6126      	str	r6, [r4, #16]
 800e99e:	6165      	str	r5, [r4, #20]
 800e9a0:	444e      	add	r6, r9
 800e9a2:	eba5 0509 	sub.w	r5, r5, r9
 800e9a6:	6026      	str	r6, [r4, #0]
 800e9a8:	60a5      	str	r5, [r4, #8]
 800e9aa:	463e      	mov	r6, r7
 800e9ac:	42be      	cmp	r6, r7
 800e9ae:	d900      	bls.n	800e9b2 <__ssputs_r+0x72>
 800e9b0:	463e      	mov	r6, r7
 800e9b2:	6820      	ldr	r0, [r4, #0]
 800e9b4:	4632      	mov	r2, r6
 800e9b6:	4641      	mov	r1, r8
 800e9b8:	f000 f9c6 	bl	800ed48 <memmove>
 800e9bc:	68a3      	ldr	r3, [r4, #8]
 800e9be:	1b9b      	subs	r3, r3, r6
 800e9c0:	60a3      	str	r3, [r4, #8]
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	4433      	add	r3, r6
 800e9c6:	6023      	str	r3, [r4, #0]
 800e9c8:	2000      	movs	r0, #0
 800e9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e9ce:	462a      	mov	r2, r5
 800e9d0:	f000 fd8b 	bl	800f4ea <_realloc_r>
 800e9d4:	4606      	mov	r6, r0
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d1e0      	bne.n	800e99c <__ssputs_r+0x5c>
 800e9da:	6921      	ldr	r1, [r4, #16]
 800e9dc:	4650      	mov	r0, sl
 800e9de:	f7fe fbcd 	bl	800d17c <_free_r>
 800e9e2:	230c      	movs	r3, #12
 800e9e4:	f8ca 3000 	str.w	r3, [sl]
 800e9e8:	89a3      	ldrh	r3, [r4, #12]
 800e9ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e9ee:	81a3      	strh	r3, [r4, #12]
 800e9f0:	f04f 30ff 	mov.w	r0, #4294967295
 800e9f4:	e7e9      	b.n	800e9ca <__ssputs_r+0x8a>
	...

0800e9f8 <_svfiprintf_r>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	4698      	mov	r8, r3
 800e9fe:	898b      	ldrh	r3, [r1, #12]
 800ea00:	061b      	lsls	r3, r3, #24
 800ea02:	b09d      	sub	sp, #116	@ 0x74
 800ea04:	4607      	mov	r7, r0
 800ea06:	460d      	mov	r5, r1
 800ea08:	4614      	mov	r4, r2
 800ea0a:	d510      	bpl.n	800ea2e <_svfiprintf_r+0x36>
 800ea0c:	690b      	ldr	r3, [r1, #16]
 800ea0e:	b973      	cbnz	r3, 800ea2e <_svfiprintf_r+0x36>
 800ea10:	2140      	movs	r1, #64	@ 0x40
 800ea12:	f7fe fc27 	bl	800d264 <_malloc_r>
 800ea16:	6028      	str	r0, [r5, #0]
 800ea18:	6128      	str	r0, [r5, #16]
 800ea1a:	b930      	cbnz	r0, 800ea2a <_svfiprintf_r+0x32>
 800ea1c:	230c      	movs	r3, #12
 800ea1e:	603b      	str	r3, [r7, #0]
 800ea20:	f04f 30ff 	mov.w	r0, #4294967295
 800ea24:	b01d      	add	sp, #116	@ 0x74
 800ea26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2a:	2340      	movs	r3, #64	@ 0x40
 800ea2c:	616b      	str	r3, [r5, #20]
 800ea2e:	2300      	movs	r3, #0
 800ea30:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea32:	2320      	movs	r3, #32
 800ea34:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea38:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea3c:	2330      	movs	r3, #48	@ 0x30
 800ea3e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ebdc <_svfiprintf_r+0x1e4>
 800ea42:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea46:	f04f 0901 	mov.w	r9, #1
 800ea4a:	4623      	mov	r3, r4
 800ea4c:	469a      	mov	sl, r3
 800ea4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea52:	b10a      	cbz	r2, 800ea58 <_svfiprintf_r+0x60>
 800ea54:	2a25      	cmp	r2, #37	@ 0x25
 800ea56:	d1f9      	bne.n	800ea4c <_svfiprintf_r+0x54>
 800ea58:	ebba 0b04 	subs.w	fp, sl, r4
 800ea5c:	d00b      	beq.n	800ea76 <_svfiprintf_r+0x7e>
 800ea5e:	465b      	mov	r3, fp
 800ea60:	4622      	mov	r2, r4
 800ea62:	4629      	mov	r1, r5
 800ea64:	4638      	mov	r0, r7
 800ea66:	f7ff ff6b 	bl	800e940 <__ssputs_r>
 800ea6a:	3001      	adds	r0, #1
 800ea6c:	f000 80a7 	beq.w	800ebbe <_svfiprintf_r+0x1c6>
 800ea70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea72:	445a      	add	r2, fp
 800ea74:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea76:	f89a 3000 	ldrb.w	r3, [sl]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f000 809f 	beq.w	800ebbe <_svfiprintf_r+0x1c6>
 800ea80:	2300      	movs	r3, #0
 800ea82:	f04f 32ff 	mov.w	r2, #4294967295
 800ea86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea8a:	f10a 0a01 	add.w	sl, sl, #1
 800ea8e:	9304      	str	r3, [sp, #16]
 800ea90:	9307      	str	r3, [sp, #28]
 800ea92:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea96:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea98:	4654      	mov	r4, sl
 800ea9a:	2205      	movs	r2, #5
 800ea9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa0:	484e      	ldr	r0, [pc, #312]	@ (800ebdc <_svfiprintf_r+0x1e4>)
 800eaa2:	f7f1 fc1d 	bl	80002e0 <memchr>
 800eaa6:	9a04      	ldr	r2, [sp, #16]
 800eaa8:	b9d8      	cbnz	r0, 800eae2 <_svfiprintf_r+0xea>
 800eaaa:	06d0      	lsls	r0, r2, #27
 800eaac:	bf44      	itt	mi
 800eaae:	2320      	movmi	r3, #32
 800eab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eab4:	0711      	lsls	r1, r2, #28
 800eab6:	bf44      	itt	mi
 800eab8:	232b      	movmi	r3, #43	@ 0x2b
 800eaba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eabe:	f89a 3000 	ldrb.w	r3, [sl]
 800eac2:	2b2a      	cmp	r3, #42	@ 0x2a
 800eac4:	d015      	beq.n	800eaf2 <_svfiprintf_r+0xfa>
 800eac6:	9a07      	ldr	r2, [sp, #28]
 800eac8:	4654      	mov	r4, sl
 800eaca:	2000      	movs	r0, #0
 800eacc:	f04f 0c0a 	mov.w	ip, #10
 800ead0:	4621      	mov	r1, r4
 800ead2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead6:	3b30      	subs	r3, #48	@ 0x30
 800ead8:	2b09      	cmp	r3, #9
 800eada:	d94b      	bls.n	800eb74 <_svfiprintf_r+0x17c>
 800eadc:	b1b0      	cbz	r0, 800eb0c <_svfiprintf_r+0x114>
 800eade:	9207      	str	r2, [sp, #28]
 800eae0:	e014      	b.n	800eb0c <_svfiprintf_r+0x114>
 800eae2:	eba0 0308 	sub.w	r3, r0, r8
 800eae6:	fa09 f303 	lsl.w	r3, r9, r3
 800eaea:	4313      	orrs	r3, r2
 800eaec:	9304      	str	r3, [sp, #16]
 800eaee:	46a2      	mov	sl, r4
 800eaf0:	e7d2      	b.n	800ea98 <_svfiprintf_r+0xa0>
 800eaf2:	9b03      	ldr	r3, [sp, #12]
 800eaf4:	1d19      	adds	r1, r3, #4
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	9103      	str	r1, [sp, #12]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	bfbb      	ittet	lt
 800eafe:	425b      	neglt	r3, r3
 800eb00:	f042 0202 	orrlt.w	r2, r2, #2
 800eb04:	9307      	strge	r3, [sp, #28]
 800eb06:	9307      	strlt	r3, [sp, #28]
 800eb08:	bfb8      	it	lt
 800eb0a:	9204      	strlt	r2, [sp, #16]
 800eb0c:	7823      	ldrb	r3, [r4, #0]
 800eb0e:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb10:	d10a      	bne.n	800eb28 <_svfiprintf_r+0x130>
 800eb12:	7863      	ldrb	r3, [r4, #1]
 800eb14:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb16:	d132      	bne.n	800eb7e <_svfiprintf_r+0x186>
 800eb18:	9b03      	ldr	r3, [sp, #12]
 800eb1a:	1d1a      	adds	r2, r3, #4
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	9203      	str	r2, [sp, #12]
 800eb20:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb24:	3402      	adds	r4, #2
 800eb26:	9305      	str	r3, [sp, #20]
 800eb28:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ebec <_svfiprintf_r+0x1f4>
 800eb2c:	7821      	ldrb	r1, [r4, #0]
 800eb2e:	2203      	movs	r2, #3
 800eb30:	4650      	mov	r0, sl
 800eb32:	f7f1 fbd5 	bl	80002e0 <memchr>
 800eb36:	b138      	cbz	r0, 800eb48 <_svfiprintf_r+0x150>
 800eb38:	9b04      	ldr	r3, [sp, #16]
 800eb3a:	eba0 000a 	sub.w	r0, r0, sl
 800eb3e:	2240      	movs	r2, #64	@ 0x40
 800eb40:	4082      	lsls	r2, r0
 800eb42:	4313      	orrs	r3, r2
 800eb44:	3401      	adds	r4, #1
 800eb46:	9304      	str	r3, [sp, #16]
 800eb48:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb4c:	4824      	ldr	r0, [pc, #144]	@ (800ebe0 <_svfiprintf_r+0x1e8>)
 800eb4e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb52:	2206      	movs	r2, #6
 800eb54:	f7f1 fbc4 	bl	80002e0 <memchr>
 800eb58:	2800      	cmp	r0, #0
 800eb5a:	d036      	beq.n	800ebca <_svfiprintf_r+0x1d2>
 800eb5c:	4b21      	ldr	r3, [pc, #132]	@ (800ebe4 <_svfiprintf_r+0x1ec>)
 800eb5e:	bb1b      	cbnz	r3, 800eba8 <_svfiprintf_r+0x1b0>
 800eb60:	9b03      	ldr	r3, [sp, #12]
 800eb62:	3307      	adds	r3, #7
 800eb64:	f023 0307 	bic.w	r3, r3, #7
 800eb68:	3308      	adds	r3, #8
 800eb6a:	9303      	str	r3, [sp, #12]
 800eb6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb6e:	4433      	add	r3, r6
 800eb70:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb72:	e76a      	b.n	800ea4a <_svfiprintf_r+0x52>
 800eb74:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb78:	460c      	mov	r4, r1
 800eb7a:	2001      	movs	r0, #1
 800eb7c:	e7a8      	b.n	800ead0 <_svfiprintf_r+0xd8>
 800eb7e:	2300      	movs	r3, #0
 800eb80:	3401      	adds	r4, #1
 800eb82:	9305      	str	r3, [sp, #20]
 800eb84:	4619      	mov	r1, r3
 800eb86:	f04f 0c0a 	mov.w	ip, #10
 800eb8a:	4620      	mov	r0, r4
 800eb8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb90:	3a30      	subs	r2, #48	@ 0x30
 800eb92:	2a09      	cmp	r2, #9
 800eb94:	d903      	bls.n	800eb9e <_svfiprintf_r+0x1a6>
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d0c6      	beq.n	800eb28 <_svfiprintf_r+0x130>
 800eb9a:	9105      	str	r1, [sp, #20]
 800eb9c:	e7c4      	b.n	800eb28 <_svfiprintf_r+0x130>
 800eb9e:	fb0c 2101 	mla	r1, ip, r1, r2
 800eba2:	4604      	mov	r4, r0
 800eba4:	2301      	movs	r3, #1
 800eba6:	e7f0      	b.n	800eb8a <_svfiprintf_r+0x192>
 800eba8:	ab03      	add	r3, sp, #12
 800ebaa:	9300      	str	r3, [sp, #0]
 800ebac:	462a      	mov	r2, r5
 800ebae:	4b0e      	ldr	r3, [pc, #56]	@ (800ebe8 <_svfiprintf_r+0x1f0>)
 800ebb0:	a904      	add	r1, sp, #16
 800ebb2:	4638      	mov	r0, r7
 800ebb4:	f7fc fda4 	bl	800b700 <_printf_float>
 800ebb8:	1c42      	adds	r2, r0, #1
 800ebba:	4606      	mov	r6, r0
 800ebbc:	d1d6      	bne.n	800eb6c <_svfiprintf_r+0x174>
 800ebbe:	89ab      	ldrh	r3, [r5, #12]
 800ebc0:	065b      	lsls	r3, r3, #25
 800ebc2:	f53f af2d 	bmi.w	800ea20 <_svfiprintf_r+0x28>
 800ebc6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebc8:	e72c      	b.n	800ea24 <_svfiprintf_r+0x2c>
 800ebca:	ab03      	add	r3, sp, #12
 800ebcc:	9300      	str	r3, [sp, #0]
 800ebce:	462a      	mov	r2, r5
 800ebd0:	4b05      	ldr	r3, [pc, #20]	@ (800ebe8 <_svfiprintf_r+0x1f0>)
 800ebd2:	a904      	add	r1, sp, #16
 800ebd4:	4638      	mov	r0, r7
 800ebd6:	f7fd f81b 	bl	800bc10 <_printf_i>
 800ebda:	e7ed      	b.n	800ebb8 <_svfiprintf_r+0x1c0>
 800ebdc:	0800fee1 	.word	0x0800fee1
 800ebe0:	0800feeb 	.word	0x0800feeb
 800ebe4:	0800b701 	.word	0x0800b701
 800ebe8:	0800e941 	.word	0x0800e941
 800ebec:	0800fee7 	.word	0x0800fee7

0800ebf0 <__sflush_r>:
 800ebf0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ebf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebf8:	0716      	lsls	r6, r2, #28
 800ebfa:	4605      	mov	r5, r0
 800ebfc:	460c      	mov	r4, r1
 800ebfe:	d454      	bmi.n	800ecaa <__sflush_r+0xba>
 800ec00:	684b      	ldr	r3, [r1, #4]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	dc02      	bgt.n	800ec0c <__sflush_r+0x1c>
 800ec06:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	dd48      	ble.n	800ec9e <__sflush_r+0xae>
 800ec0c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec0e:	2e00      	cmp	r6, #0
 800ec10:	d045      	beq.n	800ec9e <__sflush_r+0xae>
 800ec12:	2300      	movs	r3, #0
 800ec14:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ec18:	682f      	ldr	r7, [r5, #0]
 800ec1a:	6a21      	ldr	r1, [r4, #32]
 800ec1c:	602b      	str	r3, [r5, #0]
 800ec1e:	d030      	beq.n	800ec82 <__sflush_r+0x92>
 800ec20:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ec22:	89a3      	ldrh	r3, [r4, #12]
 800ec24:	0759      	lsls	r1, r3, #29
 800ec26:	d505      	bpl.n	800ec34 <__sflush_r+0x44>
 800ec28:	6863      	ldr	r3, [r4, #4]
 800ec2a:	1ad2      	subs	r2, r2, r3
 800ec2c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ec2e:	b10b      	cbz	r3, 800ec34 <__sflush_r+0x44>
 800ec30:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ec32:	1ad2      	subs	r2, r2, r3
 800ec34:	2300      	movs	r3, #0
 800ec36:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ec38:	6a21      	ldr	r1, [r4, #32]
 800ec3a:	4628      	mov	r0, r5
 800ec3c:	47b0      	blx	r6
 800ec3e:	1c43      	adds	r3, r0, #1
 800ec40:	89a3      	ldrh	r3, [r4, #12]
 800ec42:	d106      	bne.n	800ec52 <__sflush_r+0x62>
 800ec44:	6829      	ldr	r1, [r5, #0]
 800ec46:	291d      	cmp	r1, #29
 800ec48:	d82b      	bhi.n	800eca2 <__sflush_r+0xb2>
 800ec4a:	4a2a      	ldr	r2, [pc, #168]	@ (800ecf4 <__sflush_r+0x104>)
 800ec4c:	410a      	asrs	r2, r1
 800ec4e:	07d6      	lsls	r6, r2, #31
 800ec50:	d427      	bmi.n	800eca2 <__sflush_r+0xb2>
 800ec52:	2200      	movs	r2, #0
 800ec54:	6062      	str	r2, [r4, #4]
 800ec56:	04d9      	lsls	r1, r3, #19
 800ec58:	6922      	ldr	r2, [r4, #16]
 800ec5a:	6022      	str	r2, [r4, #0]
 800ec5c:	d504      	bpl.n	800ec68 <__sflush_r+0x78>
 800ec5e:	1c42      	adds	r2, r0, #1
 800ec60:	d101      	bne.n	800ec66 <__sflush_r+0x76>
 800ec62:	682b      	ldr	r3, [r5, #0]
 800ec64:	b903      	cbnz	r3, 800ec68 <__sflush_r+0x78>
 800ec66:	6560      	str	r0, [r4, #84]	@ 0x54
 800ec68:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec6a:	602f      	str	r7, [r5, #0]
 800ec6c:	b1b9      	cbz	r1, 800ec9e <__sflush_r+0xae>
 800ec6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec72:	4299      	cmp	r1, r3
 800ec74:	d002      	beq.n	800ec7c <__sflush_r+0x8c>
 800ec76:	4628      	mov	r0, r5
 800ec78:	f7fe fa80 	bl	800d17c <_free_r>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec80:	e00d      	b.n	800ec9e <__sflush_r+0xae>
 800ec82:	2301      	movs	r3, #1
 800ec84:	4628      	mov	r0, r5
 800ec86:	47b0      	blx	r6
 800ec88:	4602      	mov	r2, r0
 800ec8a:	1c50      	adds	r0, r2, #1
 800ec8c:	d1c9      	bne.n	800ec22 <__sflush_r+0x32>
 800ec8e:	682b      	ldr	r3, [r5, #0]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d0c6      	beq.n	800ec22 <__sflush_r+0x32>
 800ec94:	2b1d      	cmp	r3, #29
 800ec96:	d001      	beq.n	800ec9c <__sflush_r+0xac>
 800ec98:	2b16      	cmp	r3, #22
 800ec9a:	d11e      	bne.n	800ecda <__sflush_r+0xea>
 800ec9c:	602f      	str	r7, [r5, #0]
 800ec9e:	2000      	movs	r0, #0
 800eca0:	e022      	b.n	800ece8 <__sflush_r+0xf8>
 800eca2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca6:	b21b      	sxth	r3, r3
 800eca8:	e01b      	b.n	800ece2 <__sflush_r+0xf2>
 800ecaa:	690f      	ldr	r7, [r1, #16]
 800ecac:	2f00      	cmp	r7, #0
 800ecae:	d0f6      	beq.n	800ec9e <__sflush_r+0xae>
 800ecb0:	0793      	lsls	r3, r2, #30
 800ecb2:	680e      	ldr	r6, [r1, #0]
 800ecb4:	bf08      	it	eq
 800ecb6:	694b      	ldreq	r3, [r1, #20]
 800ecb8:	600f      	str	r7, [r1, #0]
 800ecba:	bf18      	it	ne
 800ecbc:	2300      	movne	r3, #0
 800ecbe:	eba6 0807 	sub.w	r8, r6, r7
 800ecc2:	608b      	str	r3, [r1, #8]
 800ecc4:	f1b8 0f00 	cmp.w	r8, #0
 800ecc8:	dde9      	ble.n	800ec9e <__sflush_r+0xae>
 800ecca:	6a21      	ldr	r1, [r4, #32]
 800eccc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ecce:	4643      	mov	r3, r8
 800ecd0:	463a      	mov	r2, r7
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	47b0      	blx	r6
 800ecd6:	2800      	cmp	r0, #0
 800ecd8:	dc08      	bgt.n	800ecec <__sflush_r+0xfc>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ece2:	81a3      	strh	r3, [r4, #12]
 800ece4:	f04f 30ff 	mov.w	r0, #4294967295
 800ece8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecec:	4407      	add	r7, r0
 800ecee:	eba8 0800 	sub.w	r8, r8, r0
 800ecf2:	e7e7      	b.n	800ecc4 <__sflush_r+0xd4>
 800ecf4:	dfbffffe 	.word	0xdfbffffe

0800ecf8 <_fflush_r>:
 800ecf8:	b538      	push	{r3, r4, r5, lr}
 800ecfa:	690b      	ldr	r3, [r1, #16]
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	460c      	mov	r4, r1
 800ed00:	b913      	cbnz	r3, 800ed08 <_fflush_r+0x10>
 800ed02:	2500      	movs	r5, #0
 800ed04:	4628      	mov	r0, r5
 800ed06:	bd38      	pop	{r3, r4, r5, pc}
 800ed08:	b118      	cbz	r0, 800ed12 <_fflush_r+0x1a>
 800ed0a:	6a03      	ldr	r3, [r0, #32]
 800ed0c:	b90b      	cbnz	r3, 800ed12 <_fflush_r+0x1a>
 800ed0e:	f7fd fb37 	bl	800c380 <__sinit>
 800ed12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d0f3      	beq.n	800ed02 <_fflush_r+0xa>
 800ed1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ed1c:	07d0      	lsls	r0, r2, #31
 800ed1e:	d404      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed20:	0599      	lsls	r1, r3, #22
 800ed22:	d402      	bmi.n	800ed2a <_fflush_r+0x32>
 800ed24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed26:	f7fd fc42 	bl	800c5ae <__retarget_lock_acquire_recursive>
 800ed2a:	4628      	mov	r0, r5
 800ed2c:	4621      	mov	r1, r4
 800ed2e:	f7ff ff5f 	bl	800ebf0 <__sflush_r>
 800ed32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ed34:	07da      	lsls	r2, r3, #31
 800ed36:	4605      	mov	r5, r0
 800ed38:	d4e4      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	059b      	lsls	r3, r3, #22
 800ed3e:	d4e1      	bmi.n	800ed04 <_fflush_r+0xc>
 800ed40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ed42:	f7fd fc35 	bl	800c5b0 <__retarget_lock_release_recursive>
 800ed46:	e7dd      	b.n	800ed04 <_fflush_r+0xc>

0800ed48 <memmove>:
 800ed48:	4288      	cmp	r0, r1
 800ed4a:	b510      	push	{r4, lr}
 800ed4c:	eb01 0402 	add.w	r4, r1, r2
 800ed50:	d902      	bls.n	800ed58 <memmove+0x10>
 800ed52:	4284      	cmp	r4, r0
 800ed54:	4623      	mov	r3, r4
 800ed56:	d807      	bhi.n	800ed68 <memmove+0x20>
 800ed58:	1e43      	subs	r3, r0, #1
 800ed5a:	42a1      	cmp	r1, r4
 800ed5c:	d008      	beq.n	800ed70 <memmove+0x28>
 800ed5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed62:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed66:	e7f8      	b.n	800ed5a <memmove+0x12>
 800ed68:	4402      	add	r2, r0
 800ed6a:	4601      	mov	r1, r0
 800ed6c:	428a      	cmp	r2, r1
 800ed6e:	d100      	bne.n	800ed72 <memmove+0x2a>
 800ed70:	bd10      	pop	{r4, pc}
 800ed72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed7a:	e7f7      	b.n	800ed6c <memmove+0x24>

0800ed7c <strncmp>:
 800ed7c:	b510      	push	{r4, lr}
 800ed7e:	b16a      	cbz	r2, 800ed9c <strncmp+0x20>
 800ed80:	3901      	subs	r1, #1
 800ed82:	1884      	adds	r4, r0, r2
 800ed84:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed88:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d103      	bne.n	800ed98 <strncmp+0x1c>
 800ed90:	42a0      	cmp	r0, r4
 800ed92:	d001      	beq.n	800ed98 <strncmp+0x1c>
 800ed94:	2a00      	cmp	r2, #0
 800ed96:	d1f5      	bne.n	800ed84 <strncmp+0x8>
 800ed98:	1ad0      	subs	r0, r2, r3
 800ed9a:	bd10      	pop	{r4, pc}
 800ed9c:	4610      	mov	r0, r2
 800ed9e:	e7fc      	b.n	800ed9a <strncmp+0x1e>

0800eda0 <_sbrk_r>:
 800eda0:	b538      	push	{r3, r4, r5, lr}
 800eda2:	4d06      	ldr	r5, [pc, #24]	@ (800edbc <_sbrk_r+0x1c>)
 800eda4:	2300      	movs	r3, #0
 800eda6:	4604      	mov	r4, r0
 800eda8:	4608      	mov	r0, r1
 800edaa:	602b      	str	r3, [r5, #0]
 800edac:	f7f2 fb8c 	bl	80014c8 <_sbrk>
 800edb0:	1c43      	adds	r3, r0, #1
 800edb2:	d102      	bne.n	800edba <_sbrk_r+0x1a>
 800edb4:	682b      	ldr	r3, [r5, #0]
 800edb6:	b103      	cbz	r3, 800edba <_sbrk_r+0x1a>
 800edb8:	6023      	str	r3, [r4, #0]
 800edba:	bd38      	pop	{r3, r4, r5, pc}
 800edbc:	24000610 	.word	0x24000610

0800edc0 <memcpy>:
 800edc0:	440a      	add	r2, r1
 800edc2:	4291      	cmp	r1, r2
 800edc4:	f100 33ff 	add.w	r3, r0, #4294967295
 800edc8:	d100      	bne.n	800edcc <memcpy+0xc>
 800edca:	4770      	bx	lr
 800edcc:	b510      	push	{r4, lr}
 800edce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800edd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800edd6:	4291      	cmp	r1, r2
 800edd8:	d1f9      	bne.n	800edce <memcpy+0xe>
 800edda:	bd10      	pop	{r4, pc}
 800eddc:	0000      	movs	r0, r0
	...

0800ede0 <nan>:
 800ede0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ede8 <nan+0x8>
 800ede4:	4770      	bx	lr
 800ede6:	bf00      	nop
 800ede8:	00000000 	.word	0x00000000
 800edec:	7ff80000 	.word	0x7ff80000

0800edf0 <__assert_func>:
 800edf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800edf2:	4614      	mov	r4, r2
 800edf4:	461a      	mov	r2, r3
 800edf6:	4b09      	ldr	r3, [pc, #36]	@ (800ee1c <__assert_func+0x2c>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	4605      	mov	r5, r0
 800edfc:	68d8      	ldr	r0, [r3, #12]
 800edfe:	b954      	cbnz	r4, 800ee16 <__assert_func+0x26>
 800ee00:	4b07      	ldr	r3, [pc, #28]	@ (800ee20 <__assert_func+0x30>)
 800ee02:	461c      	mov	r4, r3
 800ee04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee08:	9100      	str	r1, [sp, #0]
 800ee0a:	462b      	mov	r3, r5
 800ee0c:	4905      	ldr	r1, [pc, #20]	@ (800ee24 <__assert_func+0x34>)
 800ee0e:	f000 fba7 	bl	800f560 <fiprintf>
 800ee12:	f000 fbb7 	bl	800f584 <abort>
 800ee16:	4b04      	ldr	r3, [pc, #16]	@ (800ee28 <__assert_func+0x38>)
 800ee18:	e7f4      	b.n	800ee04 <__assert_func+0x14>
 800ee1a:	bf00      	nop
 800ee1c:	24000020 	.word	0x24000020
 800ee20:	0800ff35 	.word	0x0800ff35
 800ee24:	0800ff07 	.word	0x0800ff07
 800ee28:	0800fefa 	.word	0x0800fefa

0800ee2c <_calloc_r>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	fba1 5402 	umull	r5, r4, r1, r2
 800ee32:	b93c      	cbnz	r4, 800ee44 <_calloc_r+0x18>
 800ee34:	4629      	mov	r1, r5
 800ee36:	f7fe fa15 	bl	800d264 <_malloc_r>
 800ee3a:	4606      	mov	r6, r0
 800ee3c:	b928      	cbnz	r0, 800ee4a <_calloc_r+0x1e>
 800ee3e:	2600      	movs	r6, #0
 800ee40:	4630      	mov	r0, r6
 800ee42:	bd70      	pop	{r4, r5, r6, pc}
 800ee44:	220c      	movs	r2, #12
 800ee46:	6002      	str	r2, [r0, #0]
 800ee48:	e7f9      	b.n	800ee3e <_calloc_r+0x12>
 800ee4a:	462a      	mov	r2, r5
 800ee4c:	4621      	mov	r1, r4
 800ee4e:	f7fd fb30 	bl	800c4b2 <memset>
 800ee52:	e7f5      	b.n	800ee40 <_calloc_r+0x14>

0800ee54 <rshift>:
 800ee54:	6903      	ldr	r3, [r0, #16]
 800ee56:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ee5a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ee5e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ee62:	f100 0414 	add.w	r4, r0, #20
 800ee66:	dd45      	ble.n	800eef4 <rshift+0xa0>
 800ee68:	f011 011f 	ands.w	r1, r1, #31
 800ee6c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ee70:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ee74:	d10c      	bne.n	800ee90 <rshift+0x3c>
 800ee76:	f100 0710 	add.w	r7, r0, #16
 800ee7a:	4629      	mov	r1, r5
 800ee7c:	42b1      	cmp	r1, r6
 800ee7e:	d334      	bcc.n	800eeea <rshift+0x96>
 800ee80:	1a9b      	subs	r3, r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	1eea      	subs	r2, r5, #3
 800ee86:	4296      	cmp	r6, r2
 800ee88:	bf38      	it	cc
 800ee8a:	2300      	movcc	r3, #0
 800ee8c:	4423      	add	r3, r4
 800ee8e:	e015      	b.n	800eebc <rshift+0x68>
 800ee90:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee94:	f1c1 0820 	rsb	r8, r1, #32
 800ee98:	40cf      	lsrs	r7, r1
 800ee9a:	f105 0e04 	add.w	lr, r5, #4
 800ee9e:	46a1      	mov	r9, r4
 800eea0:	4576      	cmp	r6, lr
 800eea2:	46f4      	mov	ip, lr
 800eea4:	d815      	bhi.n	800eed2 <rshift+0x7e>
 800eea6:	1a9a      	subs	r2, r3, r2
 800eea8:	0092      	lsls	r2, r2, #2
 800eeaa:	3a04      	subs	r2, #4
 800eeac:	3501      	adds	r5, #1
 800eeae:	42ae      	cmp	r6, r5
 800eeb0:	bf38      	it	cc
 800eeb2:	2200      	movcc	r2, #0
 800eeb4:	18a3      	adds	r3, r4, r2
 800eeb6:	50a7      	str	r7, [r4, r2]
 800eeb8:	b107      	cbz	r7, 800eebc <rshift+0x68>
 800eeba:	3304      	adds	r3, #4
 800eebc:	1b1a      	subs	r2, r3, r4
 800eebe:	42a3      	cmp	r3, r4
 800eec0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800eec4:	bf08      	it	eq
 800eec6:	2300      	moveq	r3, #0
 800eec8:	6102      	str	r2, [r0, #16]
 800eeca:	bf08      	it	eq
 800eecc:	6143      	streq	r3, [r0, #20]
 800eece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eed2:	f8dc c000 	ldr.w	ip, [ip]
 800eed6:	fa0c fc08 	lsl.w	ip, ip, r8
 800eeda:	ea4c 0707 	orr.w	r7, ip, r7
 800eede:	f849 7b04 	str.w	r7, [r9], #4
 800eee2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800eee6:	40cf      	lsrs	r7, r1
 800eee8:	e7da      	b.n	800eea0 <rshift+0x4c>
 800eeea:	f851 cb04 	ldr.w	ip, [r1], #4
 800eeee:	f847 cf04 	str.w	ip, [r7, #4]!
 800eef2:	e7c3      	b.n	800ee7c <rshift+0x28>
 800eef4:	4623      	mov	r3, r4
 800eef6:	e7e1      	b.n	800eebc <rshift+0x68>

0800eef8 <__hexdig_fun>:
 800eef8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800eefc:	2b09      	cmp	r3, #9
 800eefe:	d802      	bhi.n	800ef06 <__hexdig_fun+0xe>
 800ef00:	3820      	subs	r0, #32
 800ef02:	b2c0      	uxtb	r0, r0
 800ef04:	4770      	bx	lr
 800ef06:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ef0a:	2b05      	cmp	r3, #5
 800ef0c:	d801      	bhi.n	800ef12 <__hexdig_fun+0x1a>
 800ef0e:	3847      	subs	r0, #71	@ 0x47
 800ef10:	e7f7      	b.n	800ef02 <__hexdig_fun+0xa>
 800ef12:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ef16:	2b05      	cmp	r3, #5
 800ef18:	d801      	bhi.n	800ef1e <__hexdig_fun+0x26>
 800ef1a:	3827      	subs	r0, #39	@ 0x27
 800ef1c:	e7f1      	b.n	800ef02 <__hexdig_fun+0xa>
 800ef1e:	2000      	movs	r0, #0
 800ef20:	4770      	bx	lr
	...

0800ef24 <__gethex>:
 800ef24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef28:	b085      	sub	sp, #20
 800ef2a:	468a      	mov	sl, r1
 800ef2c:	9302      	str	r3, [sp, #8]
 800ef2e:	680b      	ldr	r3, [r1, #0]
 800ef30:	9001      	str	r0, [sp, #4]
 800ef32:	4690      	mov	r8, r2
 800ef34:	1c9c      	adds	r4, r3, #2
 800ef36:	46a1      	mov	r9, r4
 800ef38:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ef3c:	2830      	cmp	r0, #48	@ 0x30
 800ef3e:	d0fa      	beq.n	800ef36 <__gethex+0x12>
 800ef40:	eba9 0303 	sub.w	r3, r9, r3
 800ef44:	f1a3 0b02 	sub.w	fp, r3, #2
 800ef48:	f7ff ffd6 	bl	800eef8 <__hexdig_fun>
 800ef4c:	4605      	mov	r5, r0
 800ef4e:	2800      	cmp	r0, #0
 800ef50:	d168      	bne.n	800f024 <__gethex+0x100>
 800ef52:	49a0      	ldr	r1, [pc, #640]	@ (800f1d4 <__gethex+0x2b0>)
 800ef54:	2201      	movs	r2, #1
 800ef56:	4648      	mov	r0, r9
 800ef58:	f7ff ff10 	bl	800ed7c <strncmp>
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	2800      	cmp	r0, #0
 800ef60:	d167      	bne.n	800f032 <__gethex+0x10e>
 800ef62:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ef66:	4626      	mov	r6, r4
 800ef68:	f7ff ffc6 	bl	800eef8 <__hexdig_fun>
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d062      	beq.n	800f036 <__gethex+0x112>
 800ef70:	4623      	mov	r3, r4
 800ef72:	7818      	ldrb	r0, [r3, #0]
 800ef74:	2830      	cmp	r0, #48	@ 0x30
 800ef76:	4699      	mov	r9, r3
 800ef78:	f103 0301 	add.w	r3, r3, #1
 800ef7c:	d0f9      	beq.n	800ef72 <__gethex+0x4e>
 800ef7e:	f7ff ffbb 	bl	800eef8 <__hexdig_fun>
 800ef82:	fab0 f580 	clz	r5, r0
 800ef86:	096d      	lsrs	r5, r5, #5
 800ef88:	f04f 0b01 	mov.w	fp, #1
 800ef8c:	464a      	mov	r2, r9
 800ef8e:	4616      	mov	r6, r2
 800ef90:	3201      	adds	r2, #1
 800ef92:	7830      	ldrb	r0, [r6, #0]
 800ef94:	f7ff ffb0 	bl	800eef8 <__hexdig_fun>
 800ef98:	2800      	cmp	r0, #0
 800ef9a:	d1f8      	bne.n	800ef8e <__gethex+0x6a>
 800ef9c:	498d      	ldr	r1, [pc, #564]	@ (800f1d4 <__gethex+0x2b0>)
 800ef9e:	2201      	movs	r2, #1
 800efa0:	4630      	mov	r0, r6
 800efa2:	f7ff feeb 	bl	800ed7c <strncmp>
 800efa6:	2800      	cmp	r0, #0
 800efa8:	d13f      	bne.n	800f02a <__gethex+0x106>
 800efaa:	b944      	cbnz	r4, 800efbe <__gethex+0x9a>
 800efac:	1c74      	adds	r4, r6, #1
 800efae:	4622      	mov	r2, r4
 800efb0:	4616      	mov	r6, r2
 800efb2:	3201      	adds	r2, #1
 800efb4:	7830      	ldrb	r0, [r6, #0]
 800efb6:	f7ff ff9f 	bl	800eef8 <__hexdig_fun>
 800efba:	2800      	cmp	r0, #0
 800efbc:	d1f8      	bne.n	800efb0 <__gethex+0x8c>
 800efbe:	1ba4      	subs	r4, r4, r6
 800efc0:	00a7      	lsls	r7, r4, #2
 800efc2:	7833      	ldrb	r3, [r6, #0]
 800efc4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800efc8:	2b50      	cmp	r3, #80	@ 0x50
 800efca:	d13e      	bne.n	800f04a <__gethex+0x126>
 800efcc:	7873      	ldrb	r3, [r6, #1]
 800efce:	2b2b      	cmp	r3, #43	@ 0x2b
 800efd0:	d033      	beq.n	800f03a <__gethex+0x116>
 800efd2:	2b2d      	cmp	r3, #45	@ 0x2d
 800efd4:	d034      	beq.n	800f040 <__gethex+0x11c>
 800efd6:	1c71      	adds	r1, r6, #1
 800efd8:	2400      	movs	r4, #0
 800efda:	7808      	ldrb	r0, [r1, #0]
 800efdc:	f7ff ff8c 	bl	800eef8 <__hexdig_fun>
 800efe0:	1e43      	subs	r3, r0, #1
 800efe2:	b2db      	uxtb	r3, r3
 800efe4:	2b18      	cmp	r3, #24
 800efe6:	d830      	bhi.n	800f04a <__gethex+0x126>
 800efe8:	f1a0 0210 	sub.w	r2, r0, #16
 800efec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eff0:	f7ff ff82 	bl	800eef8 <__hexdig_fun>
 800eff4:	f100 3cff 	add.w	ip, r0, #4294967295
 800eff8:	fa5f fc8c 	uxtb.w	ip, ip
 800effc:	f1bc 0f18 	cmp.w	ip, #24
 800f000:	f04f 030a 	mov.w	r3, #10
 800f004:	d91e      	bls.n	800f044 <__gethex+0x120>
 800f006:	b104      	cbz	r4, 800f00a <__gethex+0xe6>
 800f008:	4252      	negs	r2, r2
 800f00a:	4417      	add	r7, r2
 800f00c:	f8ca 1000 	str.w	r1, [sl]
 800f010:	b1ed      	cbz	r5, 800f04e <__gethex+0x12a>
 800f012:	f1bb 0f00 	cmp.w	fp, #0
 800f016:	bf0c      	ite	eq
 800f018:	2506      	moveq	r5, #6
 800f01a:	2500      	movne	r5, #0
 800f01c:	4628      	mov	r0, r5
 800f01e:	b005      	add	sp, #20
 800f020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f024:	2500      	movs	r5, #0
 800f026:	462c      	mov	r4, r5
 800f028:	e7b0      	b.n	800ef8c <__gethex+0x68>
 800f02a:	2c00      	cmp	r4, #0
 800f02c:	d1c7      	bne.n	800efbe <__gethex+0x9a>
 800f02e:	4627      	mov	r7, r4
 800f030:	e7c7      	b.n	800efc2 <__gethex+0x9e>
 800f032:	464e      	mov	r6, r9
 800f034:	462f      	mov	r7, r5
 800f036:	2501      	movs	r5, #1
 800f038:	e7c3      	b.n	800efc2 <__gethex+0x9e>
 800f03a:	2400      	movs	r4, #0
 800f03c:	1cb1      	adds	r1, r6, #2
 800f03e:	e7cc      	b.n	800efda <__gethex+0xb6>
 800f040:	2401      	movs	r4, #1
 800f042:	e7fb      	b.n	800f03c <__gethex+0x118>
 800f044:	fb03 0002 	mla	r0, r3, r2, r0
 800f048:	e7ce      	b.n	800efe8 <__gethex+0xc4>
 800f04a:	4631      	mov	r1, r6
 800f04c:	e7de      	b.n	800f00c <__gethex+0xe8>
 800f04e:	eba6 0309 	sub.w	r3, r6, r9
 800f052:	3b01      	subs	r3, #1
 800f054:	4629      	mov	r1, r5
 800f056:	2b07      	cmp	r3, #7
 800f058:	dc0a      	bgt.n	800f070 <__gethex+0x14c>
 800f05a:	9801      	ldr	r0, [sp, #4]
 800f05c:	f7fe f98e 	bl	800d37c <_Balloc>
 800f060:	4604      	mov	r4, r0
 800f062:	b940      	cbnz	r0, 800f076 <__gethex+0x152>
 800f064:	4b5c      	ldr	r3, [pc, #368]	@ (800f1d8 <__gethex+0x2b4>)
 800f066:	4602      	mov	r2, r0
 800f068:	21e4      	movs	r1, #228	@ 0xe4
 800f06a:	485c      	ldr	r0, [pc, #368]	@ (800f1dc <__gethex+0x2b8>)
 800f06c:	f7ff fec0 	bl	800edf0 <__assert_func>
 800f070:	3101      	adds	r1, #1
 800f072:	105b      	asrs	r3, r3, #1
 800f074:	e7ef      	b.n	800f056 <__gethex+0x132>
 800f076:	f100 0a14 	add.w	sl, r0, #20
 800f07a:	2300      	movs	r3, #0
 800f07c:	4655      	mov	r5, sl
 800f07e:	469b      	mov	fp, r3
 800f080:	45b1      	cmp	r9, r6
 800f082:	d337      	bcc.n	800f0f4 <__gethex+0x1d0>
 800f084:	f845 bb04 	str.w	fp, [r5], #4
 800f088:	eba5 050a 	sub.w	r5, r5, sl
 800f08c:	10ad      	asrs	r5, r5, #2
 800f08e:	6125      	str	r5, [r4, #16]
 800f090:	4658      	mov	r0, fp
 800f092:	f7fe fa65 	bl	800d560 <__hi0bits>
 800f096:	016d      	lsls	r5, r5, #5
 800f098:	f8d8 6000 	ldr.w	r6, [r8]
 800f09c:	1a2d      	subs	r5, r5, r0
 800f09e:	42b5      	cmp	r5, r6
 800f0a0:	dd54      	ble.n	800f14c <__gethex+0x228>
 800f0a2:	1bad      	subs	r5, r5, r6
 800f0a4:	4629      	mov	r1, r5
 800f0a6:	4620      	mov	r0, r4
 800f0a8:	f7fe fdf6 	bl	800dc98 <__any_on>
 800f0ac:	4681      	mov	r9, r0
 800f0ae:	b178      	cbz	r0, 800f0d0 <__gethex+0x1ac>
 800f0b0:	1e6b      	subs	r3, r5, #1
 800f0b2:	1159      	asrs	r1, r3, #5
 800f0b4:	f003 021f 	and.w	r2, r3, #31
 800f0b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f0bc:	f04f 0901 	mov.w	r9, #1
 800f0c0:	fa09 f202 	lsl.w	r2, r9, r2
 800f0c4:	420a      	tst	r2, r1
 800f0c6:	d003      	beq.n	800f0d0 <__gethex+0x1ac>
 800f0c8:	454b      	cmp	r3, r9
 800f0ca:	dc36      	bgt.n	800f13a <__gethex+0x216>
 800f0cc:	f04f 0902 	mov.w	r9, #2
 800f0d0:	4629      	mov	r1, r5
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f7ff febe 	bl	800ee54 <rshift>
 800f0d8:	442f      	add	r7, r5
 800f0da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0de:	42bb      	cmp	r3, r7
 800f0e0:	da42      	bge.n	800f168 <__gethex+0x244>
 800f0e2:	9801      	ldr	r0, [sp, #4]
 800f0e4:	4621      	mov	r1, r4
 800f0e6:	f7fe f989 	bl	800d3fc <_Bfree>
 800f0ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f0ec:	2300      	movs	r3, #0
 800f0ee:	6013      	str	r3, [r2, #0]
 800f0f0:	25a3      	movs	r5, #163	@ 0xa3
 800f0f2:	e793      	b.n	800f01c <__gethex+0xf8>
 800f0f4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f0f8:	2a2e      	cmp	r2, #46	@ 0x2e
 800f0fa:	d012      	beq.n	800f122 <__gethex+0x1fe>
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	d104      	bne.n	800f10a <__gethex+0x1e6>
 800f100:	f845 bb04 	str.w	fp, [r5], #4
 800f104:	f04f 0b00 	mov.w	fp, #0
 800f108:	465b      	mov	r3, fp
 800f10a:	7830      	ldrb	r0, [r6, #0]
 800f10c:	9303      	str	r3, [sp, #12]
 800f10e:	f7ff fef3 	bl	800eef8 <__hexdig_fun>
 800f112:	9b03      	ldr	r3, [sp, #12]
 800f114:	f000 000f 	and.w	r0, r0, #15
 800f118:	4098      	lsls	r0, r3
 800f11a:	ea4b 0b00 	orr.w	fp, fp, r0
 800f11e:	3304      	adds	r3, #4
 800f120:	e7ae      	b.n	800f080 <__gethex+0x15c>
 800f122:	45b1      	cmp	r9, r6
 800f124:	d8ea      	bhi.n	800f0fc <__gethex+0x1d8>
 800f126:	492b      	ldr	r1, [pc, #172]	@ (800f1d4 <__gethex+0x2b0>)
 800f128:	9303      	str	r3, [sp, #12]
 800f12a:	2201      	movs	r2, #1
 800f12c:	4630      	mov	r0, r6
 800f12e:	f7ff fe25 	bl	800ed7c <strncmp>
 800f132:	9b03      	ldr	r3, [sp, #12]
 800f134:	2800      	cmp	r0, #0
 800f136:	d1e1      	bne.n	800f0fc <__gethex+0x1d8>
 800f138:	e7a2      	b.n	800f080 <__gethex+0x15c>
 800f13a:	1ea9      	subs	r1, r5, #2
 800f13c:	4620      	mov	r0, r4
 800f13e:	f7fe fdab 	bl	800dc98 <__any_on>
 800f142:	2800      	cmp	r0, #0
 800f144:	d0c2      	beq.n	800f0cc <__gethex+0x1a8>
 800f146:	f04f 0903 	mov.w	r9, #3
 800f14a:	e7c1      	b.n	800f0d0 <__gethex+0x1ac>
 800f14c:	da09      	bge.n	800f162 <__gethex+0x23e>
 800f14e:	1b75      	subs	r5, r6, r5
 800f150:	4621      	mov	r1, r4
 800f152:	9801      	ldr	r0, [sp, #4]
 800f154:	462a      	mov	r2, r5
 800f156:	f7fe fb69 	bl	800d82c <__lshift>
 800f15a:	1b7f      	subs	r7, r7, r5
 800f15c:	4604      	mov	r4, r0
 800f15e:	f100 0a14 	add.w	sl, r0, #20
 800f162:	f04f 0900 	mov.w	r9, #0
 800f166:	e7b8      	b.n	800f0da <__gethex+0x1b6>
 800f168:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f16c:	42bd      	cmp	r5, r7
 800f16e:	dd6f      	ble.n	800f250 <__gethex+0x32c>
 800f170:	1bed      	subs	r5, r5, r7
 800f172:	42ae      	cmp	r6, r5
 800f174:	dc34      	bgt.n	800f1e0 <__gethex+0x2bc>
 800f176:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f17a:	2b02      	cmp	r3, #2
 800f17c:	d022      	beq.n	800f1c4 <__gethex+0x2a0>
 800f17e:	2b03      	cmp	r3, #3
 800f180:	d024      	beq.n	800f1cc <__gethex+0x2a8>
 800f182:	2b01      	cmp	r3, #1
 800f184:	d115      	bne.n	800f1b2 <__gethex+0x28e>
 800f186:	42ae      	cmp	r6, r5
 800f188:	d113      	bne.n	800f1b2 <__gethex+0x28e>
 800f18a:	2e01      	cmp	r6, #1
 800f18c:	d10b      	bne.n	800f1a6 <__gethex+0x282>
 800f18e:	9a02      	ldr	r2, [sp, #8]
 800f190:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f194:	6013      	str	r3, [r2, #0]
 800f196:	2301      	movs	r3, #1
 800f198:	6123      	str	r3, [r4, #16]
 800f19a:	f8ca 3000 	str.w	r3, [sl]
 800f19e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f1a0:	2562      	movs	r5, #98	@ 0x62
 800f1a2:	601c      	str	r4, [r3, #0]
 800f1a4:	e73a      	b.n	800f01c <__gethex+0xf8>
 800f1a6:	1e71      	subs	r1, r6, #1
 800f1a8:	4620      	mov	r0, r4
 800f1aa:	f7fe fd75 	bl	800dc98 <__any_on>
 800f1ae:	2800      	cmp	r0, #0
 800f1b0:	d1ed      	bne.n	800f18e <__gethex+0x26a>
 800f1b2:	9801      	ldr	r0, [sp, #4]
 800f1b4:	4621      	mov	r1, r4
 800f1b6:	f7fe f921 	bl	800d3fc <_Bfree>
 800f1ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f1bc:	2300      	movs	r3, #0
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	2550      	movs	r5, #80	@ 0x50
 800f1c2:	e72b      	b.n	800f01c <__gethex+0xf8>
 800f1c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	d1f3      	bne.n	800f1b2 <__gethex+0x28e>
 800f1ca:	e7e0      	b.n	800f18e <__gethex+0x26a>
 800f1cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d1dd      	bne.n	800f18e <__gethex+0x26a>
 800f1d2:	e7ee      	b.n	800f1b2 <__gethex+0x28e>
 800f1d4:	0800fd88 	.word	0x0800fd88
 800f1d8:	0800fc21 	.word	0x0800fc21
 800f1dc:	0800ff36 	.word	0x0800ff36
 800f1e0:	1e6f      	subs	r7, r5, #1
 800f1e2:	f1b9 0f00 	cmp.w	r9, #0
 800f1e6:	d130      	bne.n	800f24a <__gethex+0x326>
 800f1e8:	b127      	cbz	r7, 800f1f4 <__gethex+0x2d0>
 800f1ea:	4639      	mov	r1, r7
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f7fe fd53 	bl	800dc98 <__any_on>
 800f1f2:	4681      	mov	r9, r0
 800f1f4:	117a      	asrs	r2, r7, #5
 800f1f6:	2301      	movs	r3, #1
 800f1f8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f1fc:	f007 071f 	and.w	r7, r7, #31
 800f200:	40bb      	lsls	r3, r7
 800f202:	4213      	tst	r3, r2
 800f204:	4629      	mov	r1, r5
 800f206:	4620      	mov	r0, r4
 800f208:	bf18      	it	ne
 800f20a:	f049 0902 	orrne.w	r9, r9, #2
 800f20e:	f7ff fe21 	bl	800ee54 <rshift>
 800f212:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f216:	1b76      	subs	r6, r6, r5
 800f218:	2502      	movs	r5, #2
 800f21a:	f1b9 0f00 	cmp.w	r9, #0
 800f21e:	d047      	beq.n	800f2b0 <__gethex+0x38c>
 800f220:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f224:	2b02      	cmp	r3, #2
 800f226:	d015      	beq.n	800f254 <__gethex+0x330>
 800f228:	2b03      	cmp	r3, #3
 800f22a:	d017      	beq.n	800f25c <__gethex+0x338>
 800f22c:	2b01      	cmp	r3, #1
 800f22e:	d109      	bne.n	800f244 <__gethex+0x320>
 800f230:	f019 0f02 	tst.w	r9, #2
 800f234:	d006      	beq.n	800f244 <__gethex+0x320>
 800f236:	f8da 3000 	ldr.w	r3, [sl]
 800f23a:	ea49 0903 	orr.w	r9, r9, r3
 800f23e:	f019 0f01 	tst.w	r9, #1
 800f242:	d10e      	bne.n	800f262 <__gethex+0x33e>
 800f244:	f045 0510 	orr.w	r5, r5, #16
 800f248:	e032      	b.n	800f2b0 <__gethex+0x38c>
 800f24a:	f04f 0901 	mov.w	r9, #1
 800f24e:	e7d1      	b.n	800f1f4 <__gethex+0x2d0>
 800f250:	2501      	movs	r5, #1
 800f252:	e7e2      	b.n	800f21a <__gethex+0x2f6>
 800f254:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f256:	f1c3 0301 	rsb	r3, r3, #1
 800f25a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f25c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f25e:	2b00      	cmp	r3, #0
 800f260:	d0f0      	beq.n	800f244 <__gethex+0x320>
 800f262:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f266:	f104 0314 	add.w	r3, r4, #20
 800f26a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f26e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f272:	f04f 0c00 	mov.w	ip, #0
 800f276:	4618      	mov	r0, r3
 800f278:	f853 2b04 	ldr.w	r2, [r3], #4
 800f27c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f280:	d01b      	beq.n	800f2ba <__gethex+0x396>
 800f282:	3201      	adds	r2, #1
 800f284:	6002      	str	r2, [r0, #0]
 800f286:	2d02      	cmp	r5, #2
 800f288:	f104 0314 	add.w	r3, r4, #20
 800f28c:	d13c      	bne.n	800f308 <__gethex+0x3e4>
 800f28e:	f8d8 2000 	ldr.w	r2, [r8]
 800f292:	3a01      	subs	r2, #1
 800f294:	42b2      	cmp	r2, r6
 800f296:	d109      	bne.n	800f2ac <__gethex+0x388>
 800f298:	1171      	asrs	r1, r6, #5
 800f29a:	2201      	movs	r2, #1
 800f29c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f2a0:	f006 061f 	and.w	r6, r6, #31
 800f2a4:	fa02 f606 	lsl.w	r6, r2, r6
 800f2a8:	421e      	tst	r6, r3
 800f2aa:	d13a      	bne.n	800f322 <__gethex+0x3fe>
 800f2ac:	f045 0520 	orr.w	r5, r5, #32
 800f2b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f2b2:	601c      	str	r4, [r3, #0]
 800f2b4:	9b02      	ldr	r3, [sp, #8]
 800f2b6:	601f      	str	r7, [r3, #0]
 800f2b8:	e6b0      	b.n	800f01c <__gethex+0xf8>
 800f2ba:	4299      	cmp	r1, r3
 800f2bc:	f843 cc04 	str.w	ip, [r3, #-4]
 800f2c0:	d8d9      	bhi.n	800f276 <__gethex+0x352>
 800f2c2:	68a3      	ldr	r3, [r4, #8]
 800f2c4:	459b      	cmp	fp, r3
 800f2c6:	db17      	blt.n	800f2f8 <__gethex+0x3d4>
 800f2c8:	6861      	ldr	r1, [r4, #4]
 800f2ca:	9801      	ldr	r0, [sp, #4]
 800f2cc:	3101      	adds	r1, #1
 800f2ce:	f7fe f855 	bl	800d37c <_Balloc>
 800f2d2:	4681      	mov	r9, r0
 800f2d4:	b918      	cbnz	r0, 800f2de <__gethex+0x3ba>
 800f2d6:	4b1a      	ldr	r3, [pc, #104]	@ (800f340 <__gethex+0x41c>)
 800f2d8:	4602      	mov	r2, r0
 800f2da:	2184      	movs	r1, #132	@ 0x84
 800f2dc:	e6c5      	b.n	800f06a <__gethex+0x146>
 800f2de:	6922      	ldr	r2, [r4, #16]
 800f2e0:	3202      	adds	r2, #2
 800f2e2:	f104 010c 	add.w	r1, r4, #12
 800f2e6:	0092      	lsls	r2, r2, #2
 800f2e8:	300c      	adds	r0, #12
 800f2ea:	f7ff fd69 	bl	800edc0 <memcpy>
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	9801      	ldr	r0, [sp, #4]
 800f2f2:	f7fe f883 	bl	800d3fc <_Bfree>
 800f2f6:	464c      	mov	r4, r9
 800f2f8:	6923      	ldr	r3, [r4, #16]
 800f2fa:	1c5a      	adds	r2, r3, #1
 800f2fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f300:	6122      	str	r2, [r4, #16]
 800f302:	2201      	movs	r2, #1
 800f304:	615a      	str	r2, [r3, #20]
 800f306:	e7be      	b.n	800f286 <__gethex+0x362>
 800f308:	6922      	ldr	r2, [r4, #16]
 800f30a:	455a      	cmp	r2, fp
 800f30c:	dd0b      	ble.n	800f326 <__gethex+0x402>
 800f30e:	2101      	movs	r1, #1
 800f310:	4620      	mov	r0, r4
 800f312:	f7ff fd9f 	bl	800ee54 <rshift>
 800f316:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f31a:	3701      	adds	r7, #1
 800f31c:	42bb      	cmp	r3, r7
 800f31e:	f6ff aee0 	blt.w	800f0e2 <__gethex+0x1be>
 800f322:	2501      	movs	r5, #1
 800f324:	e7c2      	b.n	800f2ac <__gethex+0x388>
 800f326:	f016 061f 	ands.w	r6, r6, #31
 800f32a:	d0fa      	beq.n	800f322 <__gethex+0x3fe>
 800f32c:	4453      	add	r3, sl
 800f32e:	f1c6 0620 	rsb	r6, r6, #32
 800f332:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f336:	f7fe f913 	bl	800d560 <__hi0bits>
 800f33a:	42b0      	cmp	r0, r6
 800f33c:	dbe7      	blt.n	800f30e <__gethex+0x3ea>
 800f33e:	e7f0      	b.n	800f322 <__gethex+0x3fe>
 800f340:	0800fc21 	.word	0x0800fc21

0800f344 <L_shift>:
 800f344:	f1c2 0208 	rsb	r2, r2, #8
 800f348:	0092      	lsls	r2, r2, #2
 800f34a:	b570      	push	{r4, r5, r6, lr}
 800f34c:	f1c2 0620 	rsb	r6, r2, #32
 800f350:	6843      	ldr	r3, [r0, #4]
 800f352:	6804      	ldr	r4, [r0, #0]
 800f354:	fa03 f506 	lsl.w	r5, r3, r6
 800f358:	432c      	orrs	r4, r5
 800f35a:	40d3      	lsrs	r3, r2
 800f35c:	6004      	str	r4, [r0, #0]
 800f35e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f362:	4288      	cmp	r0, r1
 800f364:	d3f4      	bcc.n	800f350 <L_shift+0xc>
 800f366:	bd70      	pop	{r4, r5, r6, pc}

0800f368 <__match>:
 800f368:	b530      	push	{r4, r5, lr}
 800f36a:	6803      	ldr	r3, [r0, #0]
 800f36c:	3301      	adds	r3, #1
 800f36e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f372:	b914      	cbnz	r4, 800f37a <__match+0x12>
 800f374:	6003      	str	r3, [r0, #0]
 800f376:	2001      	movs	r0, #1
 800f378:	bd30      	pop	{r4, r5, pc}
 800f37a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f37e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f382:	2d19      	cmp	r5, #25
 800f384:	bf98      	it	ls
 800f386:	3220      	addls	r2, #32
 800f388:	42a2      	cmp	r2, r4
 800f38a:	d0f0      	beq.n	800f36e <__match+0x6>
 800f38c:	2000      	movs	r0, #0
 800f38e:	e7f3      	b.n	800f378 <__match+0x10>

0800f390 <__hexnan>:
 800f390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f394:	680b      	ldr	r3, [r1, #0]
 800f396:	6801      	ldr	r1, [r0, #0]
 800f398:	115e      	asrs	r6, r3, #5
 800f39a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f39e:	f013 031f 	ands.w	r3, r3, #31
 800f3a2:	b087      	sub	sp, #28
 800f3a4:	bf18      	it	ne
 800f3a6:	3604      	addne	r6, #4
 800f3a8:	2500      	movs	r5, #0
 800f3aa:	1f37      	subs	r7, r6, #4
 800f3ac:	4682      	mov	sl, r0
 800f3ae:	4690      	mov	r8, r2
 800f3b0:	9301      	str	r3, [sp, #4]
 800f3b2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f3b6:	46b9      	mov	r9, r7
 800f3b8:	463c      	mov	r4, r7
 800f3ba:	9502      	str	r5, [sp, #8]
 800f3bc:	46ab      	mov	fp, r5
 800f3be:	784a      	ldrb	r2, [r1, #1]
 800f3c0:	1c4b      	adds	r3, r1, #1
 800f3c2:	9303      	str	r3, [sp, #12]
 800f3c4:	b342      	cbz	r2, 800f418 <__hexnan+0x88>
 800f3c6:	4610      	mov	r0, r2
 800f3c8:	9105      	str	r1, [sp, #20]
 800f3ca:	9204      	str	r2, [sp, #16]
 800f3cc:	f7ff fd94 	bl	800eef8 <__hexdig_fun>
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d151      	bne.n	800f478 <__hexnan+0xe8>
 800f3d4:	9a04      	ldr	r2, [sp, #16]
 800f3d6:	9905      	ldr	r1, [sp, #20]
 800f3d8:	2a20      	cmp	r2, #32
 800f3da:	d818      	bhi.n	800f40e <__hexnan+0x7e>
 800f3dc:	9b02      	ldr	r3, [sp, #8]
 800f3de:	459b      	cmp	fp, r3
 800f3e0:	dd13      	ble.n	800f40a <__hexnan+0x7a>
 800f3e2:	454c      	cmp	r4, r9
 800f3e4:	d206      	bcs.n	800f3f4 <__hexnan+0x64>
 800f3e6:	2d07      	cmp	r5, #7
 800f3e8:	dc04      	bgt.n	800f3f4 <__hexnan+0x64>
 800f3ea:	462a      	mov	r2, r5
 800f3ec:	4649      	mov	r1, r9
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f7ff ffa8 	bl	800f344 <L_shift>
 800f3f4:	4544      	cmp	r4, r8
 800f3f6:	d952      	bls.n	800f49e <__hexnan+0x10e>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	f1a4 0904 	sub.w	r9, r4, #4
 800f3fe:	f844 3c04 	str.w	r3, [r4, #-4]
 800f402:	f8cd b008 	str.w	fp, [sp, #8]
 800f406:	464c      	mov	r4, r9
 800f408:	461d      	mov	r5, r3
 800f40a:	9903      	ldr	r1, [sp, #12]
 800f40c:	e7d7      	b.n	800f3be <__hexnan+0x2e>
 800f40e:	2a29      	cmp	r2, #41	@ 0x29
 800f410:	d157      	bne.n	800f4c2 <__hexnan+0x132>
 800f412:	3102      	adds	r1, #2
 800f414:	f8ca 1000 	str.w	r1, [sl]
 800f418:	f1bb 0f00 	cmp.w	fp, #0
 800f41c:	d051      	beq.n	800f4c2 <__hexnan+0x132>
 800f41e:	454c      	cmp	r4, r9
 800f420:	d206      	bcs.n	800f430 <__hexnan+0xa0>
 800f422:	2d07      	cmp	r5, #7
 800f424:	dc04      	bgt.n	800f430 <__hexnan+0xa0>
 800f426:	462a      	mov	r2, r5
 800f428:	4649      	mov	r1, r9
 800f42a:	4620      	mov	r0, r4
 800f42c:	f7ff ff8a 	bl	800f344 <L_shift>
 800f430:	4544      	cmp	r4, r8
 800f432:	d936      	bls.n	800f4a2 <__hexnan+0x112>
 800f434:	f1a8 0204 	sub.w	r2, r8, #4
 800f438:	4623      	mov	r3, r4
 800f43a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f43e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f442:	429f      	cmp	r7, r3
 800f444:	d2f9      	bcs.n	800f43a <__hexnan+0xaa>
 800f446:	1b3b      	subs	r3, r7, r4
 800f448:	f023 0303 	bic.w	r3, r3, #3
 800f44c:	3304      	adds	r3, #4
 800f44e:	3401      	adds	r4, #1
 800f450:	3e03      	subs	r6, #3
 800f452:	42b4      	cmp	r4, r6
 800f454:	bf88      	it	hi
 800f456:	2304      	movhi	r3, #4
 800f458:	4443      	add	r3, r8
 800f45a:	2200      	movs	r2, #0
 800f45c:	f843 2b04 	str.w	r2, [r3], #4
 800f460:	429f      	cmp	r7, r3
 800f462:	d2fb      	bcs.n	800f45c <__hexnan+0xcc>
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	b91b      	cbnz	r3, 800f470 <__hexnan+0xe0>
 800f468:	4547      	cmp	r7, r8
 800f46a:	d128      	bne.n	800f4be <__hexnan+0x12e>
 800f46c:	2301      	movs	r3, #1
 800f46e:	603b      	str	r3, [r7, #0]
 800f470:	2005      	movs	r0, #5
 800f472:	b007      	add	sp, #28
 800f474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f478:	3501      	adds	r5, #1
 800f47a:	2d08      	cmp	r5, #8
 800f47c:	f10b 0b01 	add.w	fp, fp, #1
 800f480:	dd06      	ble.n	800f490 <__hexnan+0x100>
 800f482:	4544      	cmp	r4, r8
 800f484:	d9c1      	bls.n	800f40a <__hexnan+0x7a>
 800f486:	2300      	movs	r3, #0
 800f488:	f844 3c04 	str.w	r3, [r4, #-4]
 800f48c:	2501      	movs	r5, #1
 800f48e:	3c04      	subs	r4, #4
 800f490:	6822      	ldr	r2, [r4, #0]
 800f492:	f000 000f 	and.w	r0, r0, #15
 800f496:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f49a:	6020      	str	r0, [r4, #0]
 800f49c:	e7b5      	b.n	800f40a <__hexnan+0x7a>
 800f49e:	2508      	movs	r5, #8
 800f4a0:	e7b3      	b.n	800f40a <__hexnan+0x7a>
 800f4a2:	9b01      	ldr	r3, [sp, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d0dd      	beq.n	800f464 <__hexnan+0xd4>
 800f4a8:	f1c3 0320 	rsb	r3, r3, #32
 800f4ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f4b0:	40da      	lsrs	r2, r3
 800f4b2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f4b6:	4013      	ands	r3, r2
 800f4b8:	f846 3c04 	str.w	r3, [r6, #-4]
 800f4bc:	e7d2      	b.n	800f464 <__hexnan+0xd4>
 800f4be:	3f04      	subs	r7, #4
 800f4c0:	e7d0      	b.n	800f464 <__hexnan+0xd4>
 800f4c2:	2004      	movs	r0, #4
 800f4c4:	e7d5      	b.n	800f472 <__hexnan+0xe2>

0800f4c6 <__ascii_mbtowc>:
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	b901      	cbnz	r1, 800f4cc <__ascii_mbtowc+0x6>
 800f4ca:	a901      	add	r1, sp, #4
 800f4cc:	b142      	cbz	r2, 800f4e0 <__ascii_mbtowc+0x1a>
 800f4ce:	b14b      	cbz	r3, 800f4e4 <__ascii_mbtowc+0x1e>
 800f4d0:	7813      	ldrb	r3, [r2, #0]
 800f4d2:	600b      	str	r3, [r1, #0]
 800f4d4:	7812      	ldrb	r2, [r2, #0]
 800f4d6:	1e10      	subs	r0, r2, #0
 800f4d8:	bf18      	it	ne
 800f4da:	2001      	movne	r0, #1
 800f4dc:	b002      	add	sp, #8
 800f4de:	4770      	bx	lr
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	e7fb      	b.n	800f4dc <__ascii_mbtowc+0x16>
 800f4e4:	f06f 0001 	mvn.w	r0, #1
 800f4e8:	e7f8      	b.n	800f4dc <__ascii_mbtowc+0x16>

0800f4ea <_realloc_r>:
 800f4ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4ee:	4680      	mov	r8, r0
 800f4f0:	4615      	mov	r5, r2
 800f4f2:	460c      	mov	r4, r1
 800f4f4:	b921      	cbnz	r1, 800f500 <_realloc_r+0x16>
 800f4f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	f7fd beb2 	b.w	800d264 <_malloc_r>
 800f500:	b92a      	cbnz	r2, 800f50e <_realloc_r+0x24>
 800f502:	f7fd fe3b 	bl	800d17c <_free_r>
 800f506:	2400      	movs	r4, #0
 800f508:	4620      	mov	r0, r4
 800f50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f50e:	f000 f840 	bl	800f592 <_malloc_usable_size_r>
 800f512:	4285      	cmp	r5, r0
 800f514:	4606      	mov	r6, r0
 800f516:	d802      	bhi.n	800f51e <_realloc_r+0x34>
 800f518:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f51c:	d8f4      	bhi.n	800f508 <_realloc_r+0x1e>
 800f51e:	4629      	mov	r1, r5
 800f520:	4640      	mov	r0, r8
 800f522:	f7fd fe9f 	bl	800d264 <_malloc_r>
 800f526:	4607      	mov	r7, r0
 800f528:	2800      	cmp	r0, #0
 800f52a:	d0ec      	beq.n	800f506 <_realloc_r+0x1c>
 800f52c:	42b5      	cmp	r5, r6
 800f52e:	462a      	mov	r2, r5
 800f530:	4621      	mov	r1, r4
 800f532:	bf28      	it	cs
 800f534:	4632      	movcs	r2, r6
 800f536:	f7ff fc43 	bl	800edc0 <memcpy>
 800f53a:	4621      	mov	r1, r4
 800f53c:	4640      	mov	r0, r8
 800f53e:	f7fd fe1d 	bl	800d17c <_free_r>
 800f542:	463c      	mov	r4, r7
 800f544:	e7e0      	b.n	800f508 <_realloc_r+0x1e>

0800f546 <__ascii_wctomb>:
 800f546:	4603      	mov	r3, r0
 800f548:	4608      	mov	r0, r1
 800f54a:	b141      	cbz	r1, 800f55e <__ascii_wctomb+0x18>
 800f54c:	2aff      	cmp	r2, #255	@ 0xff
 800f54e:	d904      	bls.n	800f55a <__ascii_wctomb+0x14>
 800f550:	228a      	movs	r2, #138	@ 0x8a
 800f552:	601a      	str	r2, [r3, #0]
 800f554:	f04f 30ff 	mov.w	r0, #4294967295
 800f558:	4770      	bx	lr
 800f55a:	700a      	strb	r2, [r1, #0]
 800f55c:	2001      	movs	r0, #1
 800f55e:	4770      	bx	lr

0800f560 <fiprintf>:
 800f560:	b40e      	push	{r1, r2, r3}
 800f562:	b503      	push	{r0, r1, lr}
 800f564:	4601      	mov	r1, r0
 800f566:	ab03      	add	r3, sp, #12
 800f568:	4805      	ldr	r0, [pc, #20]	@ (800f580 <fiprintf+0x20>)
 800f56a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f56e:	6800      	ldr	r0, [r0, #0]
 800f570:	9301      	str	r3, [sp, #4]
 800f572:	f000 f83f 	bl	800f5f4 <_vfiprintf_r>
 800f576:	b002      	add	sp, #8
 800f578:	f85d eb04 	ldr.w	lr, [sp], #4
 800f57c:	b003      	add	sp, #12
 800f57e:	4770      	bx	lr
 800f580:	24000020 	.word	0x24000020

0800f584 <abort>:
 800f584:	b508      	push	{r3, lr}
 800f586:	2006      	movs	r0, #6
 800f588:	f000 fa08 	bl	800f99c <raise>
 800f58c:	2001      	movs	r0, #1
 800f58e:	f7f1 ff23 	bl	80013d8 <_exit>

0800f592 <_malloc_usable_size_r>:
 800f592:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f596:	1f18      	subs	r0, r3, #4
 800f598:	2b00      	cmp	r3, #0
 800f59a:	bfbc      	itt	lt
 800f59c:	580b      	ldrlt	r3, [r1, r0]
 800f59e:	18c0      	addlt	r0, r0, r3
 800f5a0:	4770      	bx	lr

0800f5a2 <__sfputc_r>:
 800f5a2:	6893      	ldr	r3, [r2, #8]
 800f5a4:	3b01      	subs	r3, #1
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	b410      	push	{r4}
 800f5aa:	6093      	str	r3, [r2, #8]
 800f5ac:	da08      	bge.n	800f5c0 <__sfputc_r+0x1e>
 800f5ae:	6994      	ldr	r4, [r2, #24]
 800f5b0:	42a3      	cmp	r3, r4
 800f5b2:	db01      	blt.n	800f5b8 <__sfputc_r+0x16>
 800f5b4:	290a      	cmp	r1, #10
 800f5b6:	d103      	bne.n	800f5c0 <__sfputc_r+0x1e>
 800f5b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5bc:	f000 b932 	b.w	800f824 <__swbuf_r>
 800f5c0:	6813      	ldr	r3, [r2, #0]
 800f5c2:	1c58      	adds	r0, r3, #1
 800f5c4:	6010      	str	r0, [r2, #0]
 800f5c6:	7019      	strb	r1, [r3, #0]
 800f5c8:	4608      	mov	r0, r1
 800f5ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f5ce:	4770      	bx	lr

0800f5d0 <__sfputs_r>:
 800f5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5d2:	4606      	mov	r6, r0
 800f5d4:	460f      	mov	r7, r1
 800f5d6:	4614      	mov	r4, r2
 800f5d8:	18d5      	adds	r5, r2, r3
 800f5da:	42ac      	cmp	r4, r5
 800f5dc:	d101      	bne.n	800f5e2 <__sfputs_r+0x12>
 800f5de:	2000      	movs	r0, #0
 800f5e0:	e007      	b.n	800f5f2 <__sfputs_r+0x22>
 800f5e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5e6:	463a      	mov	r2, r7
 800f5e8:	4630      	mov	r0, r6
 800f5ea:	f7ff ffda 	bl	800f5a2 <__sfputc_r>
 800f5ee:	1c43      	adds	r3, r0, #1
 800f5f0:	d1f3      	bne.n	800f5da <__sfputs_r+0xa>
 800f5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f5f4 <_vfiprintf_r>:
 800f5f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5f8:	460d      	mov	r5, r1
 800f5fa:	b09d      	sub	sp, #116	@ 0x74
 800f5fc:	4614      	mov	r4, r2
 800f5fe:	4698      	mov	r8, r3
 800f600:	4606      	mov	r6, r0
 800f602:	b118      	cbz	r0, 800f60c <_vfiprintf_r+0x18>
 800f604:	6a03      	ldr	r3, [r0, #32]
 800f606:	b90b      	cbnz	r3, 800f60c <_vfiprintf_r+0x18>
 800f608:	f7fc feba 	bl	800c380 <__sinit>
 800f60c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f60e:	07d9      	lsls	r1, r3, #31
 800f610:	d405      	bmi.n	800f61e <_vfiprintf_r+0x2a>
 800f612:	89ab      	ldrh	r3, [r5, #12]
 800f614:	059a      	lsls	r2, r3, #22
 800f616:	d402      	bmi.n	800f61e <_vfiprintf_r+0x2a>
 800f618:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f61a:	f7fc ffc8 	bl	800c5ae <__retarget_lock_acquire_recursive>
 800f61e:	89ab      	ldrh	r3, [r5, #12]
 800f620:	071b      	lsls	r3, r3, #28
 800f622:	d501      	bpl.n	800f628 <_vfiprintf_r+0x34>
 800f624:	692b      	ldr	r3, [r5, #16]
 800f626:	b99b      	cbnz	r3, 800f650 <_vfiprintf_r+0x5c>
 800f628:	4629      	mov	r1, r5
 800f62a:	4630      	mov	r0, r6
 800f62c:	f000 f938 	bl	800f8a0 <__swsetup_r>
 800f630:	b170      	cbz	r0, 800f650 <_vfiprintf_r+0x5c>
 800f632:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f634:	07dc      	lsls	r4, r3, #31
 800f636:	d504      	bpl.n	800f642 <_vfiprintf_r+0x4e>
 800f638:	f04f 30ff 	mov.w	r0, #4294967295
 800f63c:	b01d      	add	sp, #116	@ 0x74
 800f63e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f642:	89ab      	ldrh	r3, [r5, #12]
 800f644:	0598      	lsls	r0, r3, #22
 800f646:	d4f7      	bmi.n	800f638 <_vfiprintf_r+0x44>
 800f648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f64a:	f7fc ffb1 	bl	800c5b0 <__retarget_lock_release_recursive>
 800f64e:	e7f3      	b.n	800f638 <_vfiprintf_r+0x44>
 800f650:	2300      	movs	r3, #0
 800f652:	9309      	str	r3, [sp, #36]	@ 0x24
 800f654:	2320      	movs	r3, #32
 800f656:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f65a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f65e:	2330      	movs	r3, #48	@ 0x30
 800f660:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f810 <_vfiprintf_r+0x21c>
 800f664:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f668:	f04f 0901 	mov.w	r9, #1
 800f66c:	4623      	mov	r3, r4
 800f66e:	469a      	mov	sl, r3
 800f670:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f674:	b10a      	cbz	r2, 800f67a <_vfiprintf_r+0x86>
 800f676:	2a25      	cmp	r2, #37	@ 0x25
 800f678:	d1f9      	bne.n	800f66e <_vfiprintf_r+0x7a>
 800f67a:	ebba 0b04 	subs.w	fp, sl, r4
 800f67e:	d00b      	beq.n	800f698 <_vfiprintf_r+0xa4>
 800f680:	465b      	mov	r3, fp
 800f682:	4622      	mov	r2, r4
 800f684:	4629      	mov	r1, r5
 800f686:	4630      	mov	r0, r6
 800f688:	f7ff ffa2 	bl	800f5d0 <__sfputs_r>
 800f68c:	3001      	adds	r0, #1
 800f68e:	f000 80a7 	beq.w	800f7e0 <_vfiprintf_r+0x1ec>
 800f692:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f694:	445a      	add	r2, fp
 800f696:	9209      	str	r2, [sp, #36]	@ 0x24
 800f698:	f89a 3000 	ldrb.w	r3, [sl]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	f000 809f 	beq.w	800f7e0 <_vfiprintf_r+0x1ec>
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6ac:	f10a 0a01 	add.w	sl, sl, #1
 800f6b0:	9304      	str	r3, [sp, #16]
 800f6b2:	9307      	str	r3, [sp, #28]
 800f6b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f6b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f6ba:	4654      	mov	r4, sl
 800f6bc:	2205      	movs	r2, #5
 800f6be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6c2:	4853      	ldr	r0, [pc, #332]	@ (800f810 <_vfiprintf_r+0x21c>)
 800f6c4:	f7f0 fe0c 	bl	80002e0 <memchr>
 800f6c8:	9a04      	ldr	r2, [sp, #16]
 800f6ca:	b9d8      	cbnz	r0, 800f704 <_vfiprintf_r+0x110>
 800f6cc:	06d1      	lsls	r1, r2, #27
 800f6ce:	bf44      	itt	mi
 800f6d0:	2320      	movmi	r3, #32
 800f6d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6d6:	0713      	lsls	r3, r2, #28
 800f6d8:	bf44      	itt	mi
 800f6da:	232b      	movmi	r3, #43	@ 0x2b
 800f6dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f6e0:	f89a 3000 	ldrb.w	r3, [sl]
 800f6e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f6e6:	d015      	beq.n	800f714 <_vfiprintf_r+0x120>
 800f6e8:	9a07      	ldr	r2, [sp, #28]
 800f6ea:	4654      	mov	r4, sl
 800f6ec:	2000      	movs	r0, #0
 800f6ee:	f04f 0c0a 	mov.w	ip, #10
 800f6f2:	4621      	mov	r1, r4
 800f6f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6f8:	3b30      	subs	r3, #48	@ 0x30
 800f6fa:	2b09      	cmp	r3, #9
 800f6fc:	d94b      	bls.n	800f796 <_vfiprintf_r+0x1a2>
 800f6fe:	b1b0      	cbz	r0, 800f72e <_vfiprintf_r+0x13a>
 800f700:	9207      	str	r2, [sp, #28]
 800f702:	e014      	b.n	800f72e <_vfiprintf_r+0x13a>
 800f704:	eba0 0308 	sub.w	r3, r0, r8
 800f708:	fa09 f303 	lsl.w	r3, r9, r3
 800f70c:	4313      	orrs	r3, r2
 800f70e:	9304      	str	r3, [sp, #16]
 800f710:	46a2      	mov	sl, r4
 800f712:	e7d2      	b.n	800f6ba <_vfiprintf_r+0xc6>
 800f714:	9b03      	ldr	r3, [sp, #12]
 800f716:	1d19      	adds	r1, r3, #4
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	9103      	str	r1, [sp, #12]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	bfbb      	ittet	lt
 800f720:	425b      	neglt	r3, r3
 800f722:	f042 0202 	orrlt.w	r2, r2, #2
 800f726:	9307      	strge	r3, [sp, #28]
 800f728:	9307      	strlt	r3, [sp, #28]
 800f72a:	bfb8      	it	lt
 800f72c:	9204      	strlt	r2, [sp, #16]
 800f72e:	7823      	ldrb	r3, [r4, #0]
 800f730:	2b2e      	cmp	r3, #46	@ 0x2e
 800f732:	d10a      	bne.n	800f74a <_vfiprintf_r+0x156>
 800f734:	7863      	ldrb	r3, [r4, #1]
 800f736:	2b2a      	cmp	r3, #42	@ 0x2a
 800f738:	d132      	bne.n	800f7a0 <_vfiprintf_r+0x1ac>
 800f73a:	9b03      	ldr	r3, [sp, #12]
 800f73c:	1d1a      	adds	r2, r3, #4
 800f73e:	681b      	ldr	r3, [r3, #0]
 800f740:	9203      	str	r2, [sp, #12]
 800f742:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f746:	3402      	adds	r4, #2
 800f748:	9305      	str	r3, [sp, #20]
 800f74a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f820 <_vfiprintf_r+0x22c>
 800f74e:	7821      	ldrb	r1, [r4, #0]
 800f750:	2203      	movs	r2, #3
 800f752:	4650      	mov	r0, sl
 800f754:	f7f0 fdc4 	bl	80002e0 <memchr>
 800f758:	b138      	cbz	r0, 800f76a <_vfiprintf_r+0x176>
 800f75a:	9b04      	ldr	r3, [sp, #16]
 800f75c:	eba0 000a 	sub.w	r0, r0, sl
 800f760:	2240      	movs	r2, #64	@ 0x40
 800f762:	4082      	lsls	r2, r0
 800f764:	4313      	orrs	r3, r2
 800f766:	3401      	adds	r4, #1
 800f768:	9304      	str	r3, [sp, #16]
 800f76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f76e:	4829      	ldr	r0, [pc, #164]	@ (800f814 <_vfiprintf_r+0x220>)
 800f770:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f774:	2206      	movs	r2, #6
 800f776:	f7f0 fdb3 	bl	80002e0 <memchr>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d03f      	beq.n	800f7fe <_vfiprintf_r+0x20a>
 800f77e:	4b26      	ldr	r3, [pc, #152]	@ (800f818 <_vfiprintf_r+0x224>)
 800f780:	bb1b      	cbnz	r3, 800f7ca <_vfiprintf_r+0x1d6>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	3307      	adds	r3, #7
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	3308      	adds	r3, #8
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f790:	443b      	add	r3, r7
 800f792:	9309      	str	r3, [sp, #36]	@ 0x24
 800f794:	e76a      	b.n	800f66c <_vfiprintf_r+0x78>
 800f796:	fb0c 3202 	mla	r2, ip, r2, r3
 800f79a:	460c      	mov	r4, r1
 800f79c:	2001      	movs	r0, #1
 800f79e:	e7a8      	b.n	800f6f2 <_vfiprintf_r+0xfe>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	3401      	adds	r4, #1
 800f7a4:	9305      	str	r3, [sp, #20]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f04f 0c0a 	mov.w	ip, #10
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7b2:	3a30      	subs	r2, #48	@ 0x30
 800f7b4:	2a09      	cmp	r2, #9
 800f7b6:	d903      	bls.n	800f7c0 <_vfiprintf_r+0x1cc>
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0c6      	beq.n	800f74a <_vfiprintf_r+0x156>
 800f7bc:	9105      	str	r1, [sp, #20]
 800f7be:	e7c4      	b.n	800f74a <_vfiprintf_r+0x156>
 800f7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e7f0      	b.n	800f7ac <_vfiprintf_r+0x1b8>
 800f7ca:	ab03      	add	r3, sp, #12
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	462a      	mov	r2, r5
 800f7d0:	4b12      	ldr	r3, [pc, #72]	@ (800f81c <_vfiprintf_r+0x228>)
 800f7d2:	a904      	add	r1, sp, #16
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	f7fb ff93 	bl	800b700 <_printf_float>
 800f7da:	4607      	mov	r7, r0
 800f7dc:	1c78      	adds	r0, r7, #1
 800f7de:	d1d6      	bne.n	800f78e <_vfiprintf_r+0x19a>
 800f7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f7e2:	07d9      	lsls	r1, r3, #31
 800f7e4:	d405      	bmi.n	800f7f2 <_vfiprintf_r+0x1fe>
 800f7e6:	89ab      	ldrh	r3, [r5, #12]
 800f7e8:	059a      	lsls	r2, r3, #22
 800f7ea:	d402      	bmi.n	800f7f2 <_vfiprintf_r+0x1fe>
 800f7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f7ee:	f7fc fedf 	bl	800c5b0 <__retarget_lock_release_recursive>
 800f7f2:	89ab      	ldrh	r3, [r5, #12]
 800f7f4:	065b      	lsls	r3, r3, #25
 800f7f6:	f53f af1f 	bmi.w	800f638 <_vfiprintf_r+0x44>
 800f7fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7fc:	e71e      	b.n	800f63c <_vfiprintf_r+0x48>
 800f7fe:	ab03      	add	r3, sp, #12
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	462a      	mov	r2, r5
 800f804:	4b05      	ldr	r3, [pc, #20]	@ (800f81c <_vfiprintf_r+0x228>)
 800f806:	a904      	add	r1, sp, #16
 800f808:	4630      	mov	r0, r6
 800f80a:	f7fc fa01 	bl	800bc10 <_printf_i>
 800f80e:	e7e4      	b.n	800f7da <_vfiprintf_r+0x1e6>
 800f810:	0800fee1 	.word	0x0800fee1
 800f814:	0800feeb 	.word	0x0800feeb
 800f818:	0800b701 	.word	0x0800b701
 800f81c:	0800f5d1 	.word	0x0800f5d1
 800f820:	0800fee7 	.word	0x0800fee7

0800f824 <__swbuf_r>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	460e      	mov	r6, r1
 800f828:	4614      	mov	r4, r2
 800f82a:	4605      	mov	r5, r0
 800f82c:	b118      	cbz	r0, 800f836 <__swbuf_r+0x12>
 800f82e:	6a03      	ldr	r3, [r0, #32]
 800f830:	b90b      	cbnz	r3, 800f836 <__swbuf_r+0x12>
 800f832:	f7fc fda5 	bl	800c380 <__sinit>
 800f836:	69a3      	ldr	r3, [r4, #24]
 800f838:	60a3      	str	r3, [r4, #8]
 800f83a:	89a3      	ldrh	r3, [r4, #12]
 800f83c:	071a      	lsls	r2, r3, #28
 800f83e:	d501      	bpl.n	800f844 <__swbuf_r+0x20>
 800f840:	6923      	ldr	r3, [r4, #16]
 800f842:	b943      	cbnz	r3, 800f856 <__swbuf_r+0x32>
 800f844:	4621      	mov	r1, r4
 800f846:	4628      	mov	r0, r5
 800f848:	f000 f82a 	bl	800f8a0 <__swsetup_r>
 800f84c:	b118      	cbz	r0, 800f856 <__swbuf_r+0x32>
 800f84e:	f04f 37ff 	mov.w	r7, #4294967295
 800f852:	4638      	mov	r0, r7
 800f854:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f856:	6823      	ldr	r3, [r4, #0]
 800f858:	6922      	ldr	r2, [r4, #16]
 800f85a:	1a98      	subs	r0, r3, r2
 800f85c:	6963      	ldr	r3, [r4, #20]
 800f85e:	b2f6      	uxtb	r6, r6
 800f860:	4283      	cmp	r3, r0
 800f862:	4637      	mov	r7, r6
 800f864:	dc05      	bgt.n	800f872 <__swbuf_r+0x4e>
 800f866:	4621      	mov	r1, r4
 800f868:	4628      	mov	r0, r5
 800f86a:	f7ff fa45 	bl	800ecf8 <_fflush_r>
 800f86e:	2800      	cmp	r0, #0
 800f870:	d1ed      	bne.n	800f84e <__swbuf_r+0x2a>
 800f872:	68a3      	ldr	r3, [r4, #8]
 800f874:	3b01      	subs	r3, #1
 800f876:	60a3      	str	r3, [r4, #8]
 800f878:	6823      	ldr	r3, [r4, #0]
 800f87a:	1c5a      	adds	r2, r3, #1
 800f87c:	6022      	str	r2, [r4, #0]
 800f87e:	701e      	strb	r6, [r3, #0]
 800f880:	6962      	ldr	r2, [r4, #20]
 800f882:	1c43      	adds	r3, r0, #1
 800f884:	429a      	cmp	r2, r3
 800f886:	d004      	beq.n	800f892 <__swbuf_r+0x6e>
 800f888:	89a3      	ldrh	r3, [r4, #12]
 800f88a:	07db      	lsls	r3, r3, #31
 800f88c:	d5e1      	bpl.n	800f852 <__swbuf_r+0x2e>
 800f88e:	2e0a      	cmp	r6, #10
 800f890:	d1df      	bne.n	800f852 <__swbuf_r+0x2e>
 800f892:	4621      	mov	r1, r4
 800f894:	4628      	mov	r0, r5
 800f896:	f7ff fa2f 	bl	800ecf8 <_fflush_r>
 800f89a:	2800      	cmp	r0, #0
 800f89c:	d0d9      	beq.n	800f852 <__swbuf_r+0x2e>
 800f89e:	e7d6      	b.n	800f84e <__swbuf_r+0x2a>

0800f8a0 <__swsetup_r>:
 800f8a0:	b538      	push	{r3, r4, r5, lr}
 800f8a2:	4b29      	ldr	r3, [pc, #164]	@ (800f948 <__swsetup_r+0xa8>)
 800f8a4:	4605      	mov	r5, r0
 800f8a6:	6818      	ldr	r0, [r3, #0]
 800f8a8:	460c      	mov	r4, r1
 800f8aa:	b118      	cbz	r0, 800f8b4 <__swsetup_r+0x14>
 800f8ac:	6a03      	ldr	r3, [r0, #32]
 800f8ae:	b90b      	cbnz	r3, 800f8b4 <__swsetup_r+0x14>
 800f8b0:	f7fc fd66 	bl	800c380 <__sinit>
 800f8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8b8:	0719      	lsls	r1, r3, #28
 800f8ba:	d422      	bmi.n	800f902 <__swsetup_r+0x62>
 800f8bc:	06da      	lsls	r2, r3, #27
 800f8be:	d407      	bmi.n	800f8d0 <__swsetup_r+0x30>
 800f8c0:	2209      	movs	r2, #9
 800f8c2:	602a      	str	r2, [r5, #0]
 800f8c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8c8:	81a3      	strh	r3, [r4, #12]
 800f8ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f8ce:	e033      	b.n	800f938 <__swsetup_r+0x98>
 800f8d0:	0758      	lsls	r0, r3, #29
 800f8d2:	d512      	bpl.n	800f8fa <__swsetup_r+0x5a>
 800f8d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8d6:	b141      	cbz	r1, 800f8ea <__swsetup_r+0x4a>
 800f8d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8dc:	4299      	cmp	r1, r3
 800f8de:	d002      	beq.n	800f8e6 <__swsetup_r+0x46>
 800f8e0:	4628      	mov	r0, r5
 800f8e2:	f7fd fc4b 	bl	800d17c <_free_r>
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8f0:	81a3      	strh	r3, [r4, #12]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	6063      	str	r3, [r4, #4]
 800f8f6:	6923      	ldr	r3, [r4, #16]
 800f8f8:	6023      	str	r3, [r4, #0]
 800f8fa:	89a3      	ldrh	r3, [r4, #12]
 800f8fc:	f043 0308 	orr.w	r3, r3, #8
 800f900:	81a3      	strh	r3, [r4, #12]
 800f902:	6923      	ldr	r3, [r4, #16]
 800f904:	b94b      	cbnz	r3, 800f91a <__swsetup_r+0x7a>
 800f906:	89a3      	ldrh	r3, [r4, #12]
 800f908:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f90c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f910:	d003      	beq.n	800f91a <__swsetup_r+0x7a>
 800f912:	4621      	mov	r1, r4
 800f914:	4628      	mov	r0, r5
 800f916:	f000 f883 	bl	800fa20 <__smakebuf_r>
 800f91a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f91e:	f013 0201 	ands.w	r2, r3, #1
 800f922:	d00a      	beq.n	800f93a <__swsetup_r+0x9a>
 800f924:	2200      	movs	r2, #0
 800f926:	60a2      	str	r2, [r4, #8]
 800f928:	6962      	ldr	r2, [r4, #20]
 800f92a:	4252      	negs	r2, r2
 800f92c:	61a2      	str	r2, [r4, #24]
 800f92e:	6922      	ldr	r2, [r4, #16]
 800f930:	b942      	cbnz	r2, 800f944 <__swsetup_r+0xa4>
 800f932:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f936:	d1c5      	bne.n	800f8c4 <__swsetup_r+0x24>
 800f938:	bd38      	pop	{r3, r4, r5, pc}
 800f93a:	0799      	lsls	r1, r3, #30
 800f93c:	bf58      	it	pl
 800f93e:	6962      	ldrpl	r2, [r4, #20]
 800f940:	60a2      	str	r2, [r4, #8]
 800f942:	e7f4      	b.n	800f92e <__swsetup_r+0x8e>
 800f944:	2000      	movs	r0, #0
 800f946:	e7f7      	b.n	800f938 <__swsetup_r+0x98>
 800f948:	24000020 	.word	0x24000020

0800f94c <_raise_r>:
 800f94c:	291f      	cmp	r1, #31
 800f94e:	b538      	push	{r3, r4, r5, lr}
 800f950:	4605      	mov	r5, r0
 800f952:	460c      	mov	r4, r1
 800f954:	d904      	bls.n	800f960 <_raise_r+0x14>
 800f956:	2316      	movs	r3, #22
 800f958:	6003      	str	r3, [r0, #0]
 800f95a:	f04f 30ff 	mov.w	r0, #4294967295
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f962:	b112      	cbz	r2, 800f96a <_raise_r+0x1e>
 800f964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f968:	b94b      	cbnz	r3, 800f97e <_raise_r+0x32>
 800f96a:	4628      	mov	r0, r5
 800f96c:	f000 f830 	bl	800f9d0 <_getpid_r>
 800f970:	4622      	mov	r2, r4
 800f972:	4601      	mov	r1, r0
 800f974:	4628      	mov	r0, r5
 800f976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f97a:	f000 b817 	b.w	800f9ac <_kill_r>
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d00a      	beq.n	800f998 <_raise_r+0x4c>
 800f982:	1c59      	adds	r1, r3, #1
 800f984:	d103      	bne.n	800f98e <_raise_r+0x42>
 800f986:	2316      	movs	r3, #22
 800f988:	6003      	str	r3, [r0, #0]
 800f98a:	2001      	movs	r0, #1
 800f98c:	e7e7      	b.n	800f95e <_raise_r+0x12>
 800f98e:	2100      	movs	r1, #0
 800f990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f994:	4620      	mov	r0, r4
 800f996:	4798      	blx	r3
 800f998:	2000      	movs	r0, #0
 800f99a:	e7e0      	b.n	800f95e <_raise_r+0x12>

0800f99c <raise>:
 800f99c:	4b02      	ldr	r3, [pc, #8]	@ (800f9a8 <raise+0xc>)
 800f99e:	4601      	mov	r1, r0
 800f9a0:	6818      	ldr	r0, [r3, #0]
 800f9a2:	f7ff bfd3 	b.w	800f94c <_raise_r>
 800f9a6:	bf00      	nop
 800f9a8:	24000020 	.word	0x24000020

0800f9ac <_kill_r>:
 800f9ac:	b538      	push	{r3, r4, r5, lr}
 800f9ae:	4d07      	ldr	r5, [pc, #28]	@ (800f9cc <_kill_r+0x20>)
 800f9b0:	2300      	movs	r3, #0
 800f9b2:	4604      	mov	r4, r0
 800f9b4:	4608      	mov	r0, r1
 800f9b6:	4611      	mov	r1, r2
 800f9b8:	602b      	str	r3, [r5, #0]
 800f9ba:	f7f1 fcfd 	bl	80013b8 <_kill>
 800f9be:	1c43      	adds	r3, r0, #1
 800f9c0:	d102      	bne.n	800f9c8 <_kill_r+0x1c>
 800f9c2:	682b      	ldr	r3, [r5, #0]
 800f9c4:	b103      	cbz	r3, 800f9c8 <_kill_r+0x1c>
 800f9c6:	6023      	str	r3, [r4, #0]
 800f9c8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ca:	bf00      	nop
 800f9cc:	24000610 	.word	0x24000610

0800f9d0 <_getpid_r>:
 800f9d0:	f7f1 bcea 	b.w	80013a8 <_getpid>

0800f9d4 <__swhatbuf_r>:
 800f9d4:	b570      	push	{r4, r5, r6, lr}
 800f9d6:	460c      	mov	r4, r1
 800f9d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9dc:	2900      	cmp	r1, #0
 800f9de:	b096      	sub	sp, #88	@ 0x58
 800f9e0:	4615      	mov	r5, r2
 800f9e2:	461e      	mov	r6, r3
 800f9e4:	da0d      	bge.n	800fa02 <__swhatbuf_r+0x2e>
 800f9e6:	89a3      	ldrh	r3, [r4, #12]
 800f9e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f9ec:	f04f 0100 	mov.w	r1, #0
 800f9f0:	bf14      	ite	ne
 800f9f2:	2340      	movne	r3, #64	@ 0x40
 800f9f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f9f8:	2000      	movs	r0, #0
 800f9fa:	6031      	str	r1, [r6, #0]
 800f9fc:	602b      	str	r3, [r5, #0]
 800f9fe:	b016      	add	sp, #88	@ 0x58
 800fa00:	bd70      	pop	{r4, r5, r6, pc}
 800fa02:	466a      	mov	r2, sp
 800fa04:	f000 f848 	bl	800fa98 <_fstat_r>
 800fa08:	2800      	cmp	r0, #0
 800fa0a:	dbec      	blt.n	800f9e6 <__swhatbuf_r+0x12>
 800fa0c:	9901      	ldr	r1, [sp, #4]
 800fa0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fa12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fa16:	4259      	negs	r1, r3
 800fa18:	4159      	adcs	r1, r3
 800fa1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fa1e:	e7eb      	b.n	800f9f8 <__swhatbuf_r+0x24>

0800fa20 <__smakebuf_r>:
 800fa20:	898b      	ldrh	r3, [r1, #12]
 800fa22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fa24:	079d      	lsls	r5, r3, #30
 800fa26:	4606      	mov	r6, r0
 800fa28:	460c      	mov	r4, r1
 800fa2a:	d507      	bpl.n	800fa3c <__smakebuf_r+0x1c>
 800fa2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	6123      	str	r3, [r4, #16]
 800fa34:	2301      	movs	r3, #1
 800fa36:	6163      	str	r3, [r4, #20]
 800fa38:	b003      	add	sp, #12
 800fa3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa3c:	ab01      	add	r3, sp, #4
 800fa3e:	466a      	mov	r2, sp
 800fa40:	f7ff ffc8 	bl	800f9d4 <__swhatbuf_r>
 800fa44:	9f00      	ldr	r7, [sp, #0]
 800fa46:	4605      	mov	r5, r0
 800fa48:	4639      	mov	r1, r7
 800fa4a:	4630      	mov	r0, r6
 800fa4c:	f7fd fc0a 	bl	800d264 <_malloc_r>
 800fa50:	b948      	cbnz	r0, 800fa66 <__smakebuf_r+0x46>
 800fa52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa56:	059a      	lsls	r2, r3, #22
 800fa58:	d4ee      	bmi.n	800fa38 <__smakebuf_r+0x18>
 800fa5a:	f023 0303 	bic.w	r3, r3, #3
 800fa5e:	f043 0302 	orr.w	r3, r3, #2
 800fa62:	81a3      	strh	r3, [r4, #12]
 800fa64:	e7e2      	b.n	800fa2c <__smakebuf_r+0xc>
 800fa66:	89a3      	ldrh	r3, [r4, #12]
 800fa68:	6020      	str	r0, [r4, #0]
 800fa6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fa6e:	81a3      	strh	r3, [r4, #12]
 800fa70:	9b01      	ldr	r3, [sp, #4]
 800fa72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fa76:	b15b      	cbz	r3, 800fa90 <__smakebuf_r+0x70>
 800fa78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f000 f81d 	bl	800fabc <_isatty_r>
 800fa82:	b128      	cbz	r0, 800fa90 <__smakebuf_r+0x70>
 800fa84:	89a3      	ldrh	r3, [r4, #12]
 800fa86:	f023 0303 	bic.w	r3, r3, #3
 800fa8a:	f043 0301 	orr.w	r3, r3, #1
 800fa8e:	81a3      	strh	r3, [r4, #12]
 800fa90:	89a3      	ldrh	r3, [r4, #12]
 800fa92:	431d      	orrs	r5, r3
 800fa94:	81a5      	strh	r5, [r4, #12]
 800fa96:	e7cf      	b.n	800fa38 <__smakebuf_r+0x18>

0800fa98 <_fstat_r>:
 800fa98:	b538      	push	{r3, r4, r5, lr}
 800fa9a:	4d07      	ldr	r5, [pc, #28]	@ (800fab8 <_fstat_r+0x20>)
 800fa9c:	2300      	movs	r3, #0
 800fa9e:	4604      	mov	r4, r0
 800faa0:	4608      	mov	r0, r1
 800faa2:	4611      	mov	r1, r2
 800faa4:	602b      	str	r3, [r5, #0]
 800faa6:	f7f1 fce7 	bl	8001478 <_fstat>
 800faaa:	1c43      	adds	r3, r0, #1
 800faac:	d102      	bne.n	800fab4 <_fstat_r+0x1c>
 800faae:	682b      	ldr	r3, [r5, #0]
 800fab0:	b103      	cbz	r3, 800fab4 <_fstat_r+0x1c>
 800fab2:	6023      	str	r3, [r4, #0]
 800fab4:	bd38      	pop	{r3, r4, r5, pc}
 800fab6:	bf00      	nop
 800fab8:	24000610 	.word	0x24000610

0800fabc <_isatty_r>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	4d06      	ldr	r5, [pc, #24]	@ (800fad8 <_isatty_r+0x1c>)
 800fac0:	2300      	movs	r3, #0
 800fac2:	4604      	mov	r4, r0
 800fac4:	4608      	mov	r0, r1
 800fac6:	602b      	str	r3, [r5, #0]
 800fac8:	f7f1 fce6 	bl	8001498 <_isatty>
 800facc:	1c43      	adds	r3, r0, #1
 800face:	d102      	bne.n	800fad6 <_isatty_r+0x1a>
 800fad0:	682b      	ldr	r3, [r5, #0]
 800fad2:	b103      	cbz	r3, 800fad6 <_isatty_r+0x1a>
 800fad4:	6023      	str	r3, [r4, #0]
 800fad6:	bd38      	pop	{r3, r4, r5, pc}
 800fad8:	24000610 	.word	0x24000610

0800fadc <_init>:
 800fadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fade:	bf00      	nop
 800fae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fae2:	bc08      	pop	{r3}
 800fae4:	469e      	mov	lr, r3
 800fae6:	4770      	bx	lr

0800fae8 <_fini>:
 800fae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800faea:	bf00      	nop
 800faec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800faee:	bc08      	pop	{r3}
 800faf0:	469e      	mov	lr, r3
 800faf2:	4770      	bx	lr
