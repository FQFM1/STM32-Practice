
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fa4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800923c  0800923c  0000a23c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800927c  0800927c  0000a27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009288  08009288  0000a288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800928c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000001d8  24000010  0800929c  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240001e8  0800929c  0000b1e8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00010e0a  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ff7  00000000  00000000  0001be48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ad8  00000000  00000000  0001de40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000861  00000000  00000000  0001e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035741  00000000  00000000  0001f179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00010afb  00000000  00000000  000548ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155e83  00000000  00000000  000653b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001bb238  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002c70  00000000  00000000  001bb27c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000055  00000000  00000000  001bdeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009224 	.word	0x08009224

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08009224 	.word	0x08009224

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <HAL_UARTEx_RxEventCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)	// 处理串口接收的数据
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	807b      	strh	r3, [r7, #2]
	if(huart == &huart1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a69      	ldr	r2, [pc, #420]	@ (800077c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	f040 80cb 	bne.w	8000774 <HAL_UARTEx_RxEventCallback+0x1ac>
	{
		// 原封返回接收的数据
		HAL_UART_Transmit_DMA(&huart1, receiveData, Size);
 80005de:	887b      	ldrh	r3, [r7, #2]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4967      	ldr	r1, [pc, #412]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80005e4:	4865      	ldr	r0, [pc, #404]	@ (800077c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80005e6:	f006 fe13 	bl	8007210 <HAL_UART_Transmit_DMA>

		// 数据包格式
		// 0xAA 	0x07	 0x01	 0xFF	 0x02	 0x00	 0xB3
		// 包头  	包长度	 LED_R 	 点亮	 LED_G	 熄灭 	 校验和
		if(receiveData[0] == 0xAA)								// 包头
 80005ea:	4b65      	ldr	r3, [pc, #404]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2baa      	cmp	r3, #170	@ 0xaa
 80005f0:	d15a      	bne.n	80006a8 <HAL_UARTEx_RxEventCallback+0xe0>
		{
			if(receiveData[1] == Size)							// 包长度
 80005f2:	4b63      	ldr	r3, [pc, #396]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	461a      	mov	r2, r3
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d154      	bne.n	80006a8 <HAL_UARTEx_RxEventCallback+0xe0>
			{
				uint8_t sum = 0;								// 校验和
 80005fe:	2300      	movs	r3, #0
 8000600:	73fb      	strb	r3, [r7, #15]
				for (uint8_t i = 0; i < Size - 1; i++)
 8000602:	2300      	movs	r3, #0
 8000604:	73bb      	strb	r3, [r7, #14]
 8000606:	e008      	b.n	800061a <HAL_UARTEx_RxEventCallback+0x52>
				{
					sum = sum + receiveData[i];
 8000608:	7bbb      	ldrb	r3, [r7, #14]
 800060a:	4a5d      	ldr	r2, [pc, #372]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800060c:	5cd2      	ldrb	r2, [r2, r3]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4413      	add	r3, r2
 8000612:	73fb      	strb	r3, [r7, #15]
				for (uint8_t i = 0; i < Size - 1; i++)
 8000614:	7bbb      	ldrb	r3, [r7, #14]
 8000616:	3301      	adds	r3, #1
 8000618:	73bb      	strb	r3, [r7, #14]
 800061a:	7bba      	ldrb	r2, [r7, #14]
 800061c:	887b      	ldrh	r3, [r7, #2]
 800061e:	3b01      	subs	r3, #1
 8000620:	429a      	cmp	r2, r3
 8000622:	dbf1      	blt.n	8000608 <HAL_UARTEx_RxEventCallback+0x40>
				}// end of 校验和
				if(sum == receiveData[Size - 1])				// 确认无误
 8000624:	887b      	ldrh	r3, [r7, #2]
 8000626:	3b01      	subs	r3, #1
 8000628:	4a55      	ldr	r2, [pc, #340]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800062a:	5cd3      	ldrb	r3, [r2, r3]
 800062c:	7bfa      	ldrb	r2, [r7, #15]
 800062e:	429a      	cmp	r2, r3
 8000630:	d13a      	bne.n	80006a8 <HAL_UARTEx_RxEventCallback+0xe0>
				{
					for(uint8_t i = 2; i < Size - 2; i += 2)	// 分析指令
 8000632:	2302      	movs	r3, #2
 8000634:	737b      	strb	r3, [r7, #13]
 8000636:	e032      	b.n	800069e <HAL_UARTEx_RxEventCallback+0xd6>
					{
						GPIO_PinState state = GPIO_PIN_SET;
 8000638:	2301      	movs	r3, #1
 800063a:	733b      	strb	r3, [r7, #12]
						if(receiveData[i + 1] == 0x00)
 800063c:	7b7b      	ldrb	r3, [r7, #13]
 800063e:	3301      	adds	r3, #1
 8000640:	4a4f      	ldr	r2, [pc, #316]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000642:	5cd3      	ldrb	r3, [r2, r3]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <HAL_UARTEx_RxEventCallback+0x86>
						{
							state = GPIO_PIN_SET;
 8000648:	2301      	movs	r3, #1
 800064a:	733b      	strb	r3, [r7, #12]
 800064c:	e001      	b.n	8000652 <HAL_UARTEx_RxEventCallback+0x8a>
						}
						else
						{
							state = GPIO_PIN_RESET;
 800064e:	2300      	movs	r3, #0
 8000650:	733b      	strb	r3, [r7, #12]
						}

						if(receiveData[i] == 0x01)
 8000652:	7b7b      	ldrb	r3, [r7, #13]
 8000654:	4a4a      	ldr	r2, [pc, #296]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000656:	5cd3      	ldrb	r3, [r2, r3]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d106      	bne.n	800066a <HAL_UARTEx_RxEventCallback+0xa2>
						{
							HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, state);
 800065c:	7b3b      	ldrb	r3, [r7, #12]
 800065e:	461a      	mov	r2, r3
 8000660:	2101      	movs	r1, #1
 8000662:	4848      	ldr	r0, [pc, #288]	@ (8000784 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8000664:	f003 ff1e 	bl	80044a4 <HAL_GPIO_WritePin>
 8000668:	e016      	b.n	8000698 <HAL_UARTEx_RxEventCallback+0xd0>
						}
						else if(receiveData[i] == 0x02)
 800066a:	7b7b      	ldrb	r3, [r7, #13]
 800066c:	4a44      	ldr	r2, [pc, #272]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 800066e:	5cd3      	ldrb	r3, [r2, r3]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d106      	bne.n	8000682 <HAL_UARTEx_RxEventCallback+0xba>
						{
							HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, state);
 8000674:	7b3b      	ldrb	r3, [r7, #12]
 8000676:	461a      	mov	r2, r3
 8000678:	2102      	movs	r1, #2
 800067a:	4842      	ldr	r0, [pc, #264]	@ (8000784 <HAL_UARTEx_RxEventCallback+0x1bc>)
 800067c:	f003 ff12 	bl	80044a4 <HAL_GPIO_WritePin>
 8000680:	e00a      	b.n	8000698 <HAL_UARTEx_RxEventCallback+0xd0>
						}
						else if(receiveData[i] == 0x03)
 8000682:	7b7b      	ldrb	r3, [r7, #13]
 8000684:	4a3e      	ldr	r2, [pc, #248]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 8000686:	5cd3      	ldrb	r3, [r2, r3]
 8000688:	2b03      	cmp	r3, #3
 800068a:	d105      	bne.n	8000698 <HAL_UARTEx_RxEventCallback+0xd0>
						{
							HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, state);
 800068c:	7b3b      	ldrb	r3, [r7, #12]
 800068e:	461a      	mov	r2, r3
 8000690:	2108      	movs	r1, #8
 8000692:	483d      	ldr	r0, [pc, #244]	@ (8000788 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8000694:	f003 ff06 	bl	80044a4 <HAL_GPIO_WritePin>
					for(uint8_t i = 2; i < Size - 2; i += 2)	// 分析指令
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	3302      	adds	r3, #2
 800069c:	737b      	strb	r3, [r7, #13]
 800069e:	7b7a      	ldrb	r2, [r7, #13]
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	3b02      	subs	r3, #2
 80006a4:	429a      	cmp	r2, r3
 80006a6:	dbc7      	blt.n	8000638 <HAL_UARTEx_RxEventCallback+0x70>
					}// end of 分析指令
				}
			}// end of 包长度
		}// end of 包头

		HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));
 80006a8:	2232      	movs	r2, #50	@ 0x32
 80006aa:	4935      	ldr	r1, [pc, #212]	@ (8000780 <HAL_UARTEx_RxEventCallback+0x1b8>)
 80006ac:	4833      	ldr	r0, [pc, #204]	@ (800077c <HAL_UARTEx_RxEventCallback+0x1b4>)
 80006ae:	f008 fceb 	bl	8009088 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80006b2:	4b36      	ldr	r3, [pc, #216]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a36      	ldr	r2, [pc, #216]	@ (8000790 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d04a      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006bc:	4b33      	ldr	r3, [pc, #204]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a34      	ldr	r2, [pc, #208]	@ (8000794 <HAL_UARTEx_RxEventCallback+0x1cc>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d045      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006c6:	4b31      	ldr	r3, [pc, #196]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a33      	ldr	r2, [pc, #204]	@ (8000798 <HAL_UARTEx_RxEventCallback+0x1d0>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d040      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006d0:	4b2e      	ldr	r3, [pc, #184]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a31      	ldr	r2, [pc, #196]	@ (800079c <HAL_UARTEx_RxEventCallback+0x1d4>)
 80006d6:	4293      	cmp	r3, r2
 80006d8:	d03b      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006da:	4b2c      	ldr	r3, [pc, #176]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <HAL_UARTEx_RxEventCallback+0x1d8>)
 80006e0:	4293      	cmp	r3, r2
 80006e2:	d036      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006e4:	4b29      	ldr	r3, [pc, #164]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4a2e      	ldr	r2, [pc, #184]	@ (80007a4 <HAL_UARTEx_RxEventCallback+0x1dc>)
 80006ea:	4293      	cmp	r3, r2
 80006ec:	d031      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006ee:	4b27      	ldr	r3, [pc, #156]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a2d      	ldr	r2, [pc, #180]	@ (80007a8 <HAL_UARTEx_RxEventCallback+0x1e0>)
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d02c      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a2b      	ldr	r2, [pc, #172]	@ (80007ac <HAL_UARTEx_RxEventCallback+0x1e4>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d027      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 8000702:	4b22      	ldr	r3, [pc, #136]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	4a2a      	ldr	r2, [pc, #168]	@ (80007b0 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d022      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 800070c:	4b1f      	ldr	r3, [pc, #124]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8000712:	4293      	cmp	r3, r2
 8000714:	d01d      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 8000716:	4b1d      	ldr	r3, [pc, #116]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4a27      	ldr	r2, [pc, #156]	@ (80007b8 <HAL_UARTEx_RxEventCallback+0x1f0>)
 800071c:	4293      	cmp	r3, r2
 800071e:	d018      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 8000720:	4b1a      	ldr	r3, [pc, #104]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a25      	ldr	r2, [pc, #148]	@ (80007bc <HAL_UARTEx_RxEventCallback+0x1f4>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d013      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 800072a:	4b18      	ldr	r3, [pc, #96]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a24      	ldr	r2, [pc, #144]	@ (80007c0 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8000730:	4293      	cmp	r3, r2
 8000732:	d00e      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a22      	ldr	r2, [pc, #136]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x1fc>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d009      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 800073e:	4b13      	ldr	r3, [pc, #76]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x200>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d004      	beq.n	8000752 <HAL_UARTEx_RxEventCallback+0x18a>
 8000748:	4b10      	ldr	r3, [pc, #64]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a1f      	ldr	r2, [pc, #124]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x204>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d108      	bne.n	8000764 <HAL_UARTEx_RxEventCallback+0x19c>
 8000752:	4b0e      	ldr	r3, [pc, #56]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681a      	ldr	r2, [r3, #0]
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f022 0208 	bic.w	r2, r2, #8
 8000760:	601a      	str	r2, [r3, #0]
	}
}
 8000762:	e007      	b.n	8000774 <HAL_UARTEx_RxEventCallback+0x1ac>
		__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b08      	ldr	r3, [pc, #32]	@ (800078c <HAL_UARTEx_RxEventCallback+0x1c4>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f022 0204 	bic.w	r2, r2, #4
 8000772:	601a      	str	r2, [r3, #0]
}
 8000774:	bf00      	nop
 8000776:	3710      	adds	r7, #16
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	2400002c 	.word	0x2400002c
 8000780:	240001b0 	.word	0x240001b0
 8000784:	58020400 	.word	0x58020400
 8000788:	58020000 	.word	0x58020000
 800078c:	24000138 	.word	0x24000138
 8000790:	40020010 	.word	0x40020010
 8000794:	40020028 	.word	0x40020028
 8000798:	40020040 	.word	0x40020040
 800079c:	40020058 	.word	0x40020058
 80007a0:	40020070 	.word	0x40020070
 80007a4:	40020088 	.word	0x40020088
 80007a8:	400200a0 	.word	0x400200a0
 80007ac:	400200b8 	.word	0x400200b8
 80007b0:	40020410 	.word	0x40020410
 80007b4:	40020428 	.word	0x40020428
 80007b8:	40020440 	.word	0x40020440
 80007bc:	40020458 	.word	0x40020458
 80007c0:	40020470 	.word	0x40020470
 80007c4:	40020488 	.word	0x40020488
 80007c8:	400204a0 	.word	0x400204a0
 80007cc:	400204b8 	.word	0x400204b8

080007d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007d4:	f000 fa34 	bl	8000c40 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d8:	f000 fc52 	bl	8001080 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007dc:	f000 f894 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e0:	f000 f9b6 	bl	8000b50 <MX_GPIO_Init>
  MX_DMA_Init();
 80007e4:	f000 f98c 	bl	8000b00 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80007e8:	f000 f93e 	bl	8000a68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, receiveData, sizeof(receiveData));	// 开启不定长数据接收
 80007ec:	2232      	movs	r2, #50	@ 0x32
 80007ee:	4933      	ldr	r1, [pc, #204]	@ (80008bc <main+0xec>)
 80007f0:	4833      	ldr	r0, [pc, #204]	@ (80008c0 <main+0xf0>)
 80007f2:	f008 fc49 	bl	8009088 <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);							// 关闭传输过半中断
 80007f6:	4b33      	ldr	r3, [pc, #204]	@ (80008c4 <main+0xf4>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a33      	ldr	r2, [pc, #204]	@ (80008c8 <main+0xf8>)
 80007fc:	4293      	cmp	r3, r2
 80007fe:	d04a      	beq.n	8000896 <main+0xc6>
 8000800:	4b30      	ldr	r3, [pc, #192]	@ (80008c4 <main+0xf4>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a31      	ldr	r2, [pc, #196]	@ (80008cc <main+0xfc>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d045      	beq.n	8000896 <main+0xc6>
 800080a:	4b2e      	ldr	r3, [pc, #184]	@ (80008c4 <main+0xf4>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	4a30      	ldr	r2, [pc, #192]	@ (80008d0 <main+0x100>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d040      	beq.n	8000896 <main+0xc6>
 8000814:	4b2b      	ldr	r3, [pc, #172]	@ (80008c4 <main+0xf4>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a2e      	ldr	r2, [pc, #184]	@ (80008d4 <main+0x104>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d03b      	beq.n	8000896 <main+0xc6>
 800081e:	4b29      	ldr	r3, [pc, #164]	@ (80008c4 <main+0xf4>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4a2d      	ldr	r2, [pc, #180]	@ (80008d8 <main+0x108>)
 8000824:	4293      	cmp	r3, r2
 8000826:	d036      	beq.n	8000896 <main+0xc6>
 8000828:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <main+0xf4>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	4a2b      	ldr	r2, [pc, #172]	@ (80008dc <main+0x10c>)
 800082e:	4293      	cmp	r3, r2
 8000830:	d031      	beq.n	8000896 <main+0xc6>
 8000832:	4b24      	ldr	r3, [pc, #144]	@ (80008c4 <main+0xf4>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a2a      	ldr	r2, [pc, #168]	@ (80008e0 <main+0x110>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d02c      	beq.n	8000896 <main+0xc6>
 800083c:	4b21      	ldr	r3, [pc, #132]	@ (80008c4 <main+0xf4>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4a28      	ldr	r2, [pc, #160]	@ (80008e4 <main+0x114>)
 8000842:	4293      	cmp	r3, r2
 8000844:	d027      	beq.n	8000896 <main+0xc6>
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <main+0xf4>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a27      	ldr	r2, [pc, #156]	@ (80008e8 <main+0x118>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d022      	beq.n	8000896 <main+0xc6>
 8000850:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <main+0xf4>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4a25      	ldr	r2, [pc, #148]	@ (80008ec <main+0x11c>)
 8000856:	4293      	cmp	r3, r2
 8000858:	d01d      	beq.n	8000896 <main+0xc6>
 800085a:	4b1a      	ldr	r3, [pc, #104]	@ (80008c4 <main+0xf4>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	4a24      	ldr	r2, [pc, #144]	@ (80008f0 <main+0x120>)
 8000860:	4293      	cmp	r3, r2
 8000862:	d018      	beq.n	8000896 <main+0xc6>
 8000864:	4b17      	ldr	r3, [pc, #92]	@ (80008c4 <main+0xf4>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a22      	ldr	r2, [pc, #136]	@ (80008f4 <main+0x124>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d013      	beq.n	8000896 <main+0xc6>
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <main+0xf4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <main+0x128>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d00e      	beq.n	8000896 <main+0xc6>
 8000878:	4b12      	ldr	r3, [pc, #72]	@ (80008c4 <main+0xf4>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <main+0x12c>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d009      	beq.n	8000896 <main+0xc6>
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <main+0xf4>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a1e      	ldr	r2, [pc, #120]	@ (8000900 <main+0x130>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d004      	beq.n	8000896 <main+0xc6>
 800088c:	4b0d      	ldr	r3, [pc, #52]	@ (80008c4 <main+0xf4>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <main+0x134>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d108      	bne.n	80008a8 <main+0xd8>
 8000896:	4b0b      	ldr	r3, [pc, #44]	@ (80008c4 <main+0xf4>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	681a      	ldr	r2, [r3, #0]
 800089c:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <main+0xf4>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f022 0208 	bic.w	r2, r2, #8
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	e007      	b.n	80008b8 <main+0xe8>
 80008a8:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <main+0xf4>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <main+0xf4>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f022 0204 	bic.w	r2, r2, #4
 80008b6:	601a      	str	r2, [r3, #0]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <main+0xe8>
 80008bc:	240001b0 	.word	0x240001b0
 80008c0:	2400002c 	.word	0x2400002c
 80008c4:	24000138 	.word	0x24000138
 80008c8:	40020010 	.word	0x40020010
 80008cc:	40020028 	.word	0x40020028
 80008d0:	40020040 	.word	0x40020040
 80008d4:	40020058 	.word	0x40020058
 80008d8:	40020070 	.word	0x40020070
 80008dc:	40020088 	.word	0x40020088
 80008e0:	400200a0 	.word	0x400200a0
 80008e4:	400200b8 	.word	0x400200b8
 80008e8:	40020410 	.word	0x40020410
 80008ec:	40020428 	.word	0x40020428
 80008f0:	40020440 	.word	0x40020440
 80008f4:	40020458 	.word	0x40020458
 80008f8:	40020470 	.word	0x40020470
 80008fc:	40020488 	.word	0x40020488
 8000900:	400204a0 	.word	0x400204a0
 8000904:	400204b8 	.word	0x400204b8

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09e      	sub	sp, #120	@ 0x78
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000912:	224c      	movs	r2, #76	@ 0x4c
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f008 fc58 	bl	80091cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	2220      	movs	r2, #32
 8000922:	2100      	movs	r1, #0
 8000924:	4618      	mov	r0, r3
 8000926:	f008 fc51 	bl	80091cc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800092a:	2002      	movs	r0, #2
 800092c:	f003 fdd4 	bl	80044d8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000930:	2300      	movs	r3, #0
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	4b49      	ldr	r3, [pc, #292]	@ (8000a5c <SystemClock_Config+0x154>)
 8000936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000938:	4a48      	ldr	r2, [pc, #288]	@ (8000a5c <SystemClock_Config+0x154>)
 800093a:	f023 0301 	bic.w	r3, r3, #1
 800093e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000940:	4b46      	ldr	r3, [pc, #280]	@ (8000a5c <SystemClock_Config+0x154>)
 8000942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b45      	ldr	r3, [pc, #276]	@ (8000a60 <SystemClock_Config+0x158>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a44      	ldr	r2, [pc, #272]	@ (8000a60 <SystemClock_Config+0x158>)
 8000950:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b42      	ldr	r3, [pc, #264]	@ (8000a60 <SystemClock_Config+0x158>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000962:	bf00      	nop
 8000964:	4b3e      	ldr	r3, [pc, #248]	@ (8000a60 <SystemClock_Config+0x158>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800096c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000970:	d1f8      	bne.n	8000964 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b3c      	ldr	r3, [pc, #240]	@ (8000a64 <SystemClock_Config+0x15c>)
 8000974:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000978:	4a3a      	ldr	r2, [pc, #232]	@ (8000a64 <SystemClock_Config+0x15c>)
 800097a:	f043 0302 	orr.w	r3, r3, #2
 800097e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000982:	4b38      	ldr	r3, [pc, #224]	@ (8000a64 <SystemClock_Config+0x15c>)
 8000984:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b32      	ldr	r3, [pc, #200]	@ (8000a60 <SystemClock_Config+0x158>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a31      	ldr	r2, [pc, #196]	@ (8000a60 <SystemClock_Config+0x158>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a60 <SystemClock_Config+0x158>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <SystemClock_Config+0x154>)
 80009ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ae:	4a2b      	ldr	r2, [pc, #172]	@ (8000a5c <SystemClock_Config+0x154>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009b6:	4b29      	ldr	r3, [pc, #164]	@ (8000a5c <SystemClock_Config+0x154>)
 80009b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009c2:	bf00      	nop
 80009c4:	4b26      	ldr	r3, [pc, #152]	@ (8000a60 <SystemClock_Config+0x158>)
 80009c6:	699b      	ldr	r3, [r3, #24]
 80009c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009d0:	d1f8      	bne.n	80009c4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d2:	2302      	movs	r3, #2
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009da:	2340      	movs	r3, #64	@ 0x40
 80009dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009de:	2302      	movs	r3, #2
 80009e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009e2:	2300      	movs	r3, #0
 80009e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009e6:	2304      	movs	r3, #4
 80009e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009ea:	233c      	movs	r3, #60	@ 0x3c
 80009ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ee:	2302      	movs	r3, #2
 80009f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009f2:	2302      	movs	r3, #2
 80009f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009f6:	2302      	movs	r3, #2
 80009f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009fa:	230c      	movs	r3, #12
 80009fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 fd9e 	bl	800454c <HAL_RCC_OscConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000a16:	f000 f93f 	bl	8000c98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1a:	233f      	movs	r3, #63	@ 0x3f
 8000a1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1e:	2303      	movs	r3, #3
 8000a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	2300      	movs	r3, #0
 8000a24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a26:	2308      	movs	r3, #8
 8000a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a2a:	2340      	movs	r3, #64	@ 0x40
 8000a2c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a2e:	2340      	movs	r3, #64	@ 0x40
 8000a30:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a36:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a38:	2340      	movs	r3, #64	@ 0x40
 8000a3a:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	2104      	movs	r1, #4
 8000a42:	4618      	mov	r0, r3
 8000a44:	f004 f9dc 	bl	8004e00 <HAL_RCC_ClockConfig>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000a4e:	f000 f923 	bl	8000c98 <Error_Handler>
  }
}
 8000a52:	bf00      	nop
 8000a54:	3778      	adds	r7, #120	@ 0x78
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	58000400 	.word	0x58000400
 8000a60:	58024800 	.word	0x58024800
 8000a64:	58024400 	.word	0x58024400

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	@ (8000afc <MX_USART1_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a72:	4b21      	ldr	r3, [pc, #132]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a74:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f006 fb5d 	bl	8007170 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8ec 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ac4:	f008 fa64 	bl	8008f90 <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 f8e3 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ad6:	f008 fa99 	bl	800900c <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f8da 	bl	8000c98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ae6:	f008 fa1a 	bl	8008f1e <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f8d2 	bl	8000c98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2400002c 	.word	0x2400002c
 8000afc:	40011000 	.word	0x40011000

08000b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b06:	4b11      	ldr	r3, [pc, #68]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b08:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b0c:	4a0f      	ldr	r2, [pc, #60]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b16:	4b0d      	ldr	r3, [pc, #52]	@ (8000b4c <MX_DMA_Init+0x4c>)
 8000b18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	200b      	movs	r0, #11
 8000b2a:	f000 fc22 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b2e:	200b      	movs	r0, #11
 8000b30:	f000 fc39 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2100      	movs	r1, #0
 8000b38:	200c      	movs	r0, #12
 8000b3a:	f000 fc1a 	bl	8001372 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b3e:	200c      	movs	r0, #12
 8000b40:	f000 fc31 	bl	80013a6 <HAL_NVIC_EnableIRQ>

}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	58024400 	.word	0x58024400

08000b50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b08a      	sub	sp, #40	@ 0x28
 8000b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b66:	4b33      	ldr	r3, [pc, #204]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6c:	4a31      	ldr	r2, [pc, #196]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b76:	4b2f      	ldr	r3, [pc, #188]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	613b      	str	r3, [r7, #16]
 8000b82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b84:	4b2b      	ldr	r3, [pc, #172]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8a:	4a2a      	ldr	r2, [pc, #168]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b8c:	f043 0304 	orr.w	r3, r3, #4
 8000b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b94:	4b27      	ldr	r3, [pc, #156]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba2:	4b24      	ldr	r3, [pc, #144]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba8:	4a22      	ldr	r2, [pc, #136]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000baa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb2:	4b20      	ldr	r3, [pc, #128]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc0:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd0:	4b18      	ldr	r3, [pc, #96]	@ (8000c34 <MX_GPIO_Init+0xe4>)
 8000bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2103      	movs	r1, #3
 8000be2:	4815      	ldr	r0, [pc, #84]	@ (8000c38 <MX_GPIO_Init+0xe8>)
 8000be4:	f003 fc5e 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2108      	movs	r1, #8
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_GPIO_Init+0xec>)
 8000bee:	f003 fc59 	bl	80044a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 8000bf2:	2303      	movs	r3, #3
 8000bf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	480b      	ldr	r0, [pc, #44]	@ (8000c38 <MX_GPIO_Init+0xe8>)
 8000c0a:	f003 fa9b 	bl	8004144 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000c0e:	2308      	movs	r3, #8
 8000c10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_GPIO_Init+0xec>)
 8000c26:	f003 fa8d 	bl	8004144 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	@ 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	58024400 	.word	0x58024400
 8000c38:	58020400 	.word	0x58020400
 8000c3c:	58020000 	.word	0x58020000

08000c40 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000c52:	f000 fbc3 	bl	80013dc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000c56:	2301      	movs	r3, #1
 8000c58:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000c62:	231f      	movs	r3, #31
 8000c64:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000c66:	2387      	movs	r3, #135	@ 0x87
 8000c68:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000c72:	2301      	movs	r3, #1
 8000c74:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c82:	463b      	mov	r3, r7
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fbe1 	bl	800144c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c8a:	2004      	movs	r0, #4
 8000c8c:	f000 fbbe 	bl	800140c <HAL_MPU_Enable>

}
 8000c90:	bf00      	nop
 8000c92:	3710      	adds	r7, #16
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c9c:	b672      	cpsid	i
}
 8000c9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca0:	bf00      	nop
 8000ca2:	e7fd      	b.n	8000ca0 <Error_Handler+0x8>

08000ca4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb0:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cb2:	f043 0302 	orr.w	r3, r3, #2
 8000cb6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x30>)
 8000cbc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	58024400 	.word	0x58024400

08000cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0ba      	sub	sp, #232	@ 0xe8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf0:	f107 0310 	add.w	r3, r7, #16
 8000cf4:	22c0      	movs	r2, #192	@ 0xc0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f008 fa67 	bl	80091cc <memset>
  if(huart->Instance==USART1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a58      	ldr	r2, [pc, #352]	@ (8000e64 <HAL_UART_MspInit+0x18c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f040 80a9 	bne.w	8000e5c <HAL_UART_MspInit+0x184>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d0a:	f04f 0201 	mov.w	r2, #1
 8000d0e:	f04f 0300 	mov.w	r3, #0
 8000d12:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4618      	mov	r0, r3
 8000d22:	f004 fbf9 	bl	8005518 <HAL_RCCEx_PeriphCLKConfig>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 8000d2c:	f7ff ffb4 	bl	8000c98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d30:	4b4d      	ldr	r3, [pc, #308]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d32:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d36:	4a4c      	ldr	r2, [pc, #304]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d38:	f043 0310 	orr.w	r3, r3, #16
 8000d3c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d40:	4b49      	ldr	r3, [pc, #292]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	4b46      	ldr	r3, [pc, #280]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d54:	4a44      	ldr	r2, [pc, #272]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5e:	4b42      	ldr	r3, [pc, #264]	@ (8000e68 <HAL_UART_MspInit+0x190>)
 8000d60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d64:	f003 0302 	and.w	r3, r3, #2
 8000d68:	60bb      	str	r3, [r7, #8]
 8000d6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d6c:	23c0      	movs	r3, #192	@ 0xc0
 8000d6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d84:	2307      	movs	r3, #7
 8000d86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4836      	ldr	r0, [pc, #216]	@ (8000e6c <HAL_UART_MspInit+0x194>)
 8000d92:	f003 f9d7 	bl	8004144 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream0;
 8000d96:	4b36      	ldr	r3, [pc, #216]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000d98:	4a36      	ldr	r2, [pc, #216]	@ (8000e74 <HAL_UART_MspInit+0x19c>)
 8000d9a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000d9c:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000d9e:	222a      	movs	r2, #42	@ 0x2a
 8000da0:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da2:	4b33      	ldr	r3, [pc, #204]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000da4:	2240      	movs	r2, #64	@ 0x40
 8000da6:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000da8:	4b31      	ldr	r3, [pc, #196]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dae:	4b30      	ldr	r3, [pc, #192]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000db0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000db4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000db6:	4b2e      	ldr	r3, [pc, #184]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dce:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000dd4:	4826      	ldr	r0, [pc, #152]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dd6:	f000 fb79 	bl	80014cc <HAL_DMA_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8000de0:	f7ff ff5a 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	4a22      	ldr	r2, [pc, #136]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000de8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000dea:	4a21      	ldr	r2, [pc, #132]	@ (8000e70 <HAL_UART_MspInit+0x198>)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8000df0:	4b21      	ldr	r3, [pc, #132]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000df2:	4a22      	ldr	r2, [pc, #136]	@ (8000e7c <HAL_UART_MspInit+0x1a4>)
 8000df4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8000df6:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000df8:	2229      	movs	r2, #41	@ 0x29
 8000dfa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e10:	4b19      	ldr	r3, [pc, #100]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e16:	4b18      	ldr	r3, [pc, #96]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000e1c:	4b16      	ldr	r3, [pc, #88]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e22:	4b15      	ldr	r3, [pc, #84]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e28:	4b13      	ldr	r3, [pc, #76]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000e2e:	4812      	ldr	r0, [pc, #72]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e30:	f000 fb4c 	bl	80014cc <HAL_DMA_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8000e3a:	f7ff ff2d 	bl	8000c98 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8000e46:	4a0c      	ldr	r2, [pc, #48]	@ (8000e78 <HAL_UART_MspInit+0x1a0>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2025      	movs	r0, #37	@ 0x25
 8000e52:	f000 fa8e 	bl	8001372 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e56:	2025      	movs	r0, #37	@ 0x25
 8000e58:	f000 faa5 	bl	80013a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e5c:	bf00      	nop
 8000e5e:	37e8      	adds	r7, #232	@ 0xe8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40011000 	.word	0x40011000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020400 	.word	0x58020400
 8000e70:	240000c0 	.word	0x240000c0
 8000e74:	40020010 	.word	0x40020010
 8000e78:	24000138 	.word	0x24000138
 8000e7c:	40020028 	.word	0x40020028

08000e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <NMI_Handler+0x4>

08000e88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <HardFault_Handler+0x4>

08000e90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <MemManage_Handler+0x4>

08000e98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9c:	bf00      	nop
 8000e9e:	e7fd      	b.n	8000e9c <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eac:	bf00      	nop
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ed6:	f000 f945 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eda:	bf00      	nop
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ee4:	4802      	ldr	r0, [pc, #8]	@ (8000ef0 <DMA1_Stream0_IRQHandler+0x10>)
 8000ee6:	f001 fe1b 	bl	8002b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	240000c0 	.word	0x240000c0

08000ef4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ef8:	4802      	ldr	r0, [pc, #8]	@ (8000f04 <DMA1_Stream1_IRQHandler+0x10>)
 8000efa:	f001 fe11 	bl	8002b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	24000138 	.word	0x24000138

08000f08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000f0c:	4802      	ldr	r0, [pc, #8]	@ (8000f18 <USART1_IRQHandler+0x10>)
 8000f0e:	f006 f9ff 	bl	8007310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
 8000f16:	bf00      	nop
 8000f18:	2400002c 	.word	0x2400002c

08000f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f20:	4b37      	ldr	r3, [pc, #220]	@ (8001000 <SystemInit+0xe4>)
 8000f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f26:	4a36      	ldr	r2, [pc, #216]	@ (8001000 <SystemInit+0xe4>)
 8000f28:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f2c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f30:	4b34      	ldr	r3, [pc, #208]	@ (8001004 <SystemInit+0xe8>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f003 030f 	and.w	r3, r3, #15
 8000f38:	2b06      	cmp	r3, #6
 8000f3a:	d807      	bhi.n	8000f4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f3c:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <SystemInit+0xe8>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 030f 	bic.w	r3, r3, #15
 8000f44:	4a2f      	ldr	r2, [pc, #188]	@ (8001004 <SystemInit+0xe8>)
 8000f46:	f043 0307 	orr.w	r3, r3, #7
 8000f4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <SystemInit+0xec>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a2d      	ldr	r2, [pc, #180]	@ (8001008 <SystemInit+0xec>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <SystemInit+0xec>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <SystemInit+0xec>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4929      	ldr	r1, [pc, #164]	@ (8001008 <SystemInit+0xec>)
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <SystemInit+0xf0>)
 8000f66:	4013      	ands	r3, r2
 8000f68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <SystemInit+0xe8>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0308 	and.w	r3, r3, #8
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f76:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <SystemInit+0xe8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f023 030f 	bic.w	r3, r3, #15
 8000f7e:	4a21      	ldr	r2, [pc, #132]	@ (8001004 <SystemInit+0xe8>)
 8000f80:	f043 0307 	orr.w	r3, r3, #7
 8000f84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <SystemInit+0xec>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <SystemInit+0xec>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <SystemInit+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <SystemInit+0xec>)
 8000f9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001010 <SystemInit+0xf4>)
 8000f9c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001008 <SystemInit+0xec>)
 8000fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8001014 <SystemInit+0xf8>)
 8000fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <SystemInit+0xec>)
 8000fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8001018 <SystemInit+0xfc>)
 8000fa8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000faa:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <SystemInit+0xec>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000fb0:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <SystemInit+0xec>)
 8000fb2:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <SystemInit+0xfc>)
 8000fb4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <SystemInit+0xec>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <SystemInit+0xec>)
 8000fbe:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <SystemInit+0xfc>)
 8000fc0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000fc2:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <SystemInit+0xec>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <SystemInit+0xec>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0e      	ldr	r2, [pc, #56]	@ (8001008 <SystemInit+0xec>)
 8000fce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000fd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <SystemInit+0xec>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000fda:	4b10      	ldr	r3, [pc, #64]	@ (800101c <SystemInit+0x100>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <SystemInit+0x104>)
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000fe6:	d202      	bcs.n	8000fee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	@ (8001024 <SystemInit+0x108>)
 8000fea:	2201      	movs	r2, #1
 8000fec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <SystemInit+0x10c>)
 8000ff0:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ff4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000ff6:	bf00      	nop
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00
 8001004:	52002000 	.word	0x52002000
 8001008:	58024400 	.word	0x58024400
 800100c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001010:	02020200 	.word	0x02020200
 8001014:	01ff0000 	.word	0x01ff0000
 8001018:	01010280 	.word	0x01010280
 800101c:	5c001000 	.word	0x5c001000
 8001020:	ffff0000 	.word	0xffff0000
 8001024:	51008108 	.word	0x51008108
 8001028:	52004000 	.word	0x52004000

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001030:	f7ff ff74 	bl	8000f1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800105a:	f008 f8bf 	bl	80091dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fbb7 	bl	80007d0 <main>
  bx  lr
 8001062:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001064:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001068:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800106c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001070:	0800928c 	.word	0x0800928c
  ldr r2, =_sbss
 8001074:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001078:	240001e8 	.word	0x240001e8

0800107c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC3_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001086:	2003      	movs	r0, #3
 8001088:	f000 f968 	bl	800135c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800108c:	f004 f86e 	bl	800516c <HAL_RCC_GetSysClockFreq>
 8001090:	4602      	mov	r2, r0
 8001092:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <HAL_Init+0x68>)
 8001094:	699b      	ldr	r3, [r3, #24]
 8001096:	0a1b      	lsrs	r3, r3, #8
 8001098:	f003 030f 	and.w	r3, r3, #15
 800109c:	4913      	ldr	r1, [pc, #76]	@ (80010ec <HAL_Init+0x6c>)
 800109e:	5ccb      	ldrb	r3, [r1, r3]
 80010a0:	f003 031f 	and.w	r3, r3, #31
 80010a4:	fa22 f303 	lsr.w	r3, r2, r3
 80010a8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80010aa:	4b0f      	ldr	r3, [pc, #60]	@ (80010e8 <HAL_Init+0x68>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 030f 	and.w	r3, r3, #15
 80010b2:	4a0e      	ldr	r2, [pc, #56]	@ (80010ec <HAL_Init+0x6c>)
 80010b4:	5cd3      	ldrb	r3, [r2, r3]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	fa22 f303 	lsr.w	r3, r2, r3
 80010c0:	4a0b      	ldr	r2, [pc, #44]	@ (80010f0 <HAL_Init+0x70>)
 80010c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <HAL_Init+0x74>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	200f      	movs	r0, #15
 80010cc:	f000 f814 	bl	80010f8 <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e002      	b.n	80010e0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80010da:	f7ff fde3 	bl	8000ca4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3708      	adds	r7, #8
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	58024400 	.word	0x58024400
 80010ec:	0800923c 	.word	0x0800923c
 80010f0:	24000004 	.word	0x24000004
 80010f4:	24000000 	.word	0x24000000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b082      	sub	sp, #8
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_InitTick+0x60>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d101      	bne.n	800110c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e021      	b.n	8001150 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800110c:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_InitTick+0x64>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4b11      	ldr	r3, [pc, #68]	@ (8001158 <HAL_InitTick+0x60>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	4619      	mov	r1, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	fbb3 f3f1 	udiv	r3, r3, r1
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	4618      	mov	r0, r3
 8001124:	f000 f94d 	bl	80013c2 <HAL_SYSTICK_Config>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e00e      	b.n	8001150 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d80a      	bhi.n	800114e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f000 f917 	bl	8001372 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4a06      	ldr	r2, [pc, #24]	@ (8001160 <HAL_InitTick+0x68>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	2400000c 	.word	0x2400000c
 800115c:	24000000 	.word	0x24000000
 8001160:	24000008 	.word	0x24000008

08001164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_IncTick+0x20>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	461a      	mov	r2, r3
 800116e:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <HAL_IncTick+0x24>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4413      	add	r3, r2
 8001174:	4a04      	ldr	r2, [pc, #16]	@ (8001188 <HAL_IncTick+0x24>)
 8001176:	6013      	str	r3, [r2, #0]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2400000c 	.word	0x2400000c
 8001188:	240001e4 	.word	0x240001e4

0800118c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return uwTick;
 8001190:	4b03      	ldr	r3, [pc, #12]	@ (80011a0 <HAL_GetTick+0x14>)
 8001192:	681b      	ldr	r3, [r3, #0]
}
 8001194:	4618      	mov	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	240001e4 	.word	0x240001e4

080011a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetREVID+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0c1b      	lsrs	r3, r3, #16
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	5c001000 	.word	0x5c001000

080011bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011bc:	b480      	push	{r7}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f003 0307 	and.w	r3, r3, #7
 80011ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011d8:	4013      	ands	r3, r2
 80011da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <__NVIC_SetPriorityGrouping+0x44>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ea:	4a04      	ldr	r2, [pc, #16]	@ (80011fc <__NVIC_SetPriorityGrouping+0x40>)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	60d3      	str	r3, [r2, #12]
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00
 8001200:	05fa0000 	.word	0x05fa0000

08001204 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001208:	4b04      	ldr	r3, [pc, #16]	@ (800121c <__NVIC_GetPriorityGrouping+0x18>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	0a1b      	lsrs	r3, r3, #8
 800120e:	f003 0307 	and.w	r3, r3, #7
}
 8001212:	4618      	mov	r0, r3
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000ed00 	.word	0xe000ed00

08001220 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800122a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	db0b      	blt.n	800124a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001232:	88fb      	ldrh	r3, [r7, #6]
 8001234:	f003 021f 	and.w	r2, r3, #31
 8001238:	4907      	ldr	r1, [pc, #28]	@ (8001258 <__NVIC_EnableIRQ+0x38>)
 800123a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800123e:	095b      	lsrs	r3, r3, #5
 8001240:	2001      	movs	r0, #1
 8001242:	fa00 f202 	lsl.w	r2, r0, r2
 8001246:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000e100 	.word	0xe000e100

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	@ (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	@ (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	@ 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	@ 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001328:	d301      	bcc.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e00f      	b.n	800134e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <SysTick_Config+0x40>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3b01      	subs	r3, #1
 8001334:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	210f      	movs	r1, #15
 8001338:	f04f 30ff 	mov.w	r0, #4294967295
 800133c:	f7ff ff8e 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001340:	4b05      	ldr	r3, [pc, #20]	@ (8001358 <SysTick_Config+0x40>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001346:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <SysTick_Config+0x40>)
 8001348:	2207      	movs	r2, #7
 800134a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	e000e010 	.word	0xe000e010

0800135c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff ff29 	bl	80011bc <__NVIC_SetPriorityGrouping>
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b086      	sub	sp, #24
 8001376:	af00      	add	r7, sp, #0
 8001378:	4603      	mov	r3, r0
 800137a:	60b9      	str	r1, [r7, #8]
 800137c:	607a      	str	r2, [r7, #4]
 800137e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff40 	bl	8001204 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	4603      	mov	r3, r0
 80013ae:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff33 	bl	8001220 <__NVIC_EnableIRQ>
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}

080013c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013c2:	b580      	push	{r7, lr}
 80013c4:	b082      	sub	sp, #8
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff ffa4 	bl	8001318 <SysTick_Config>
 80013d0:	4603      	mov	r3, r0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3708      	adds	r7, #8
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80013e0:	f3bf 8f5f 	dmb	sy
}
 80013e4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80013e6:	4b07      	ldr	r3, [pc, #28]	@ (8001404 <HAL_MPU_Disable+0x28>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013ea:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <HAL_MPU_Disable+0x28>)
 80013ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_MPU_Disable+0x2c>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000ed00 	.word	0xe000ed00
 8001408:	e000ed90 	.word	0xe000ed90

0800140c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <HAL_MPU_Enable+0x38>)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800141e:	4b0a      	ldr	r3, [pc, #40]	@ (8001448 <HAL_MPU_Enable+0x3c>)
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	4a09      	ldr	r2, [pc, #36]	@ (8001448 <HAL_MPU_Enable+0x3c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001428:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800142a:	f3bf 8f4f 	dsb	sy
}
 800142e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001430:	f3bf 8f6f 	isb	sy
}
 8001434:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed90 	.word	0xe000ed90
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	785a      	ldrb	r2, [r3, #1]
 8001458:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_MPU_ConfigRegion+0x7c>)
 800145a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800145c:	4b1a      	ldr	r3, [pc, #104]	@ (80014c8 <HAL_MPU_ConfigRegion+0x7c>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a19      	ldr	r2, [pc, #100]	@ (80014c8 <HAL_MPU_ConfigRegion+0x7c>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001468:	4a17      	ldr	r2, [pc, #92]	@ (80014c8 <HAL_MPU_ConfigRegion+0x7c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	7b1b      	ldrb	r3, [r3, #12]
 8001474:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7adb      	ldrb	r3, [r3, #11]
 800147a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800147c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	7a9b      	ldrb	r3, [r3, #10]
 8001482:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001484:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7b5b      	ldrb	r3, [r3, #13]
 800148a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800148c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	7b9b      	ldrb	r3, [r3, #14]
 8001492:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001494:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	7bdb      	ldrb	r3, [r3, #15]
 800149a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800149c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7a5b      	ldrb	r3, [r3, #9]
 80014a2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a1b      	ldrb	r3, [r3, #8]
 80014aa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014ac:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014ae:	687a      	ldr	r2, [r7, #4]
 80014b0:	7812      	ldrb	r2, [r2, #0]
 80014b2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014b6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014b8:	6113      	str	r3, [r2, #16]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	e000ed90 	.word	0xe000ed90

080014cc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80014d4:	f7ff fe5a 	bl	800118c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d101      	bne.n	80014e4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e316      	b.n	8001b12 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a66      	ldr	r2, [pc, #408]	@ (8001684 <HAL_DMA_Init+0x1b8>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d04a      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a65      	ldr	r2, [pc, #404]	@ (8001688 <HAL_DMA_Init+0x1bc>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d045      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a63      	ldr	r2, [pc, #396]	@ (800168c <HAL_DMA_Init+0x1c0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d040      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	4a62      	ldr	r2, [pc, #392]	@ (8001690 <HAL_DMA_Init+0x1c4>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d03b      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a60      	ldr	r2, [pc, #384]	@ (8001694 <HAL_DMA_Init+0x1c8>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d036      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a5f      	ldr	r2, [pc, #380]	@ (8001698 <HAL_DMA_Init+0x1cc>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d031      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a5d      	ldr	r2, [pc, #372]	@ (800169c <HAL_DMA_Init+0x1d0>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d02c      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a5c      	ldr	r2, [pc, #368]	@ (80016a0 <HAL_DMA_Init+0x1d4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d027      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a5a      	ldr	r2, [pc, #360]	@ (80016a4 <HAL_DMA_Init+0x1d8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d022      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a59      	ldr	r2, [pc, #356]	@ (80016a8 <HAL_DMA_Init+0x1dc>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d01d      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a57      	ldr	r2, [pc, #348]	@ (80016ac <HAL_DMA_Init+0x1e0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d018      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a56      	ldr	r2, [pc, #344]	@ (80016b0 <HAL_DMA_Init+0x1e4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d013      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a54      	ldr	r2, [pc, #336]	@ (80016b4 <HAL_DMA_Init+0x1e8>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d00e      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a53      	ldr	r2, [pc, #332]	@ (80016b8 <HAL_DMA_Init+0x1ec>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d009      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a51      	ldr	r2, [pc, #324]	@ (80016bc <HAL_DMA_Init+0x1f0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d004      	beq.n	8001584 <HAL_DMA_Init+0xb8>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a50      	ldr	r2, [pc, #320]	@ (80016c0 <HAL_DMA_Init+0x1f4>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d101      	bne.n	8001588 <HAL_DMA_Init+0xbc>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_DMA_Init+0xbe>
 8001588:	2300      	movs	r3, #0
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 813b 	beq.w	8001806 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a37      	ldr	r2, [pc, #220]	@ (8001684 <HAL_DMA_Init+0x1b8>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d04a      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a36      	ldr	r2, [pc, #216]	@ (8001688 <HAL_DMA_Init+0x1bc>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d045      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a34      	ldr	r2, [pc, #208]	@ (800168c <HAL_DMA_Init+0x1c0>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d040      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a33      	ldr	r2, [pc, #204]	@ (8001690 <HAL_DMA_Init+0x1c4>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d03b      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a31      	ldr	r2, [pc, #196]	@ (8001694 <HAL_DMA_Init+0x1c8>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d036      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a30      	ldr	r2, [pc, #192]	@ (8001698 <HAL_DMA_Init+0x1cc>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d031      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a2e      	ldr	r2, [pc, #184]	@ (800169c <HAL_DMA_Init+0x1d0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d02c      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a2d      	ldr	r2, [pc, #180]	@ (80016a0 <HAL_DMA_Init+0x1d4>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d027      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a2b      	ldr	r2, [pc, #172]	@ (80016a4 <HAL_DMA_Init+0x1d8>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d022      	beq.n	8001640 <HAL_DMA_Init+0x174>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a2a      	ldr	r2, [pc, #168]	@ (80016a8 <HAL_DMA_Init+0x1dc>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d01d      	beq.n	8001640 <HAL_DMA_Init+0x174>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a28      	ldr	r2, [pc, #160]	@ (80016ac <HAL_DMA_Init+0x1e0>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d018      	beq.n	8001640 <HAL_DMA_Init+0x174>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a27      	ldr	r2, [pc, #156]	@ (80016b0 <HAL_DMA_Init+0x1e4>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_DMA_Init+0x174>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a25      	ldr	r2, [pc, #148]	@ (80016b4 <HAL_DMA_Init+0x1e8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_DMA_Init+0x174>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a24      	ldr	r2, [pc, #144]	@ (80016b8 <HAL_DMA_Init+0x1ec>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_DMA_Init+0x174>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a22      	ldr	r2, [pc, #136]	@ (80016bc <HAL_DMA_Init+0x1f0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_DMA_Init+0x174>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a21      	ldr	r2, [pc, #132]	@ (80016c0 <HAL_DMA_Init+0x1f4>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d108      	bne.n	8001652 <HAL_DMA_Init+0x186>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0201 	bic.w	r2, r2, #1
 800164e:	601a      	str	r2, [r3, #0]
 8001650:	e007      	b.n	8001662 <HAL_DMA_Init+0x196>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0201 	bic.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001662:	e02f      	b.n	80016c4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001664:	f7ff fd92 	bl	800118c <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b05      	cmp	r3, #5
 8001670:	d928      	bls.n	80016c4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2220      	movs	r2, #32
 8001676:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2203      	movs	r2, #3
 800167c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e246      	b.n	8001b12 <HAL_DMA_Init+0x646>
 8001684:	40020010 	.word	0x40020010
 8001688:	40020028 	.word	0x40020028
 800168c:	40020040 	.word	0x40020040
 8001690:	40020058 	.word	0x40020058
 8001694:	40020070 	.word	0x40020070
 8001698:	40020088 	.word	0x40020088
 800169c:	400200a0 	.word	0x400200a0
 80016a0:	400200b8 	.word	0x400200b8
 80016a4:	40020410 	.word	0x40020410
 80016a8:	40020428 	.word	0x40020428
 80016ac:	40020440 	.word	0x40020440
 80016b0:	40020458 	.word	0x40020458
 80016b4:	40020470 	.word	0x40020470
 80016b8:	40020488 	.word	0x40020488
 80016bc:	400204a0 	.word	0x400204a0
 80016c0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0301 	and.w	r3, r3, #1
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d1c8      	bne.n	8001664 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4b83      	ldr	r3, [pc, #524]	@ (80018ec <HAL_DMA_Init+0x420>)
 80016de:	4013      	ands	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80016ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	691b      	ldr	r3, [r3, #16]
 80016f0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016f6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	699b      	ldr	r3, [r3, #24]
 80016fc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001702:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4313      	orrs	r3, r2
 800170e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001714:	2b04      	cmp	r3, #4
 8001716:	d107      	bne.n	8001728 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001720:	4313      	orrs	r3, r2
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	4313      	orrs	r3, r2
 8001726:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001728:	4b71      	ldr	r3, [pc, #452]	@ (80018f0 <HAL_DMA_Init+0x424>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b71      	ldr	r3, [pc, #452]	@ (80018f4 <HAL_DMA_Init+0x428>)
 800172e:	4013      	ands	r3, r2
 8001730:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001734:	d328      	bcc.n	8001788 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b28      	cmp	r3, #40	@ 0x28
 800173c:	d903      	bls.n	8001746 <HAL_DMA_Init+0x27a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b2e      	cmp	r3, #46	@ 0x2e
 8001744:	d917      	bls.n	8001776 <HAL_DMA_Init+0x2aa>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b3e      	cmp	r3, #62	@ 0x3e
 800174c:	d903      	bls.n	8001756 <HAL_DMA_Init+0x28a>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b42      	cmp	r3, #66	@ 0x42
 8001754:	d90f      	bls.n	8001776 <HAL_DMA_Init+0x2aa>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b46      	cmp	r3, #70	@ 0x46
 800175c:	d903      	bls.n	8001766 <HAL_DMA_Init+0x29a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b48      	cmp	r3, #72	@ 0x48
 8001764:	d907      	bls.n	8001776 <HAL_DMA_Init+0x2aa>
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b4e      	cmp	r3, #78	@ 0x4e
 800176c:	d905      	bls.n	800177a <HAL_DMA_Init+0x2ae>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b52      	cmp	r3, #82	@ 0x52
 8001774:	d801      	bhi.n	800177a <HAL_DMA_Init+0x2ae>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <HAL_DMA_Init+0x2b0>
 800177a:	2300      	movs	r3, #0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001786:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	f023 0307 	bic.w	r3, r3, #7
 800179e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	d117      	bne.n	80017e2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d00e      	beq.n	80017e2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f002 fb33 	bl	8003e30 <DMA_CheckFifoParam>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2240      	movs	r2, #64	@ 0x40
 80017d4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e197      	b.n	8001b12 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f002 fa6e 	bl	8003ccc <DMA_CalcBaseAndBitshift>
 80017f0:	4603      	mov	r3, r0
 80017f2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017f8:	f003 031f 	and.w	r3, r3, #31
 80017fc:	223f      	movs	r2, #63	@ 0x3f
 80017fe:	409a      	lsls	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	e0cd      	b.n	80019a2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a3b      	ldr	r2, [pc, #236]	@ (80018f8 <HAL_DMA_Init+0x42c>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d022      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a39      	ldr	r2, [pc, #228]	@ (80018fc <HAL_DMA_Init+0x430>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01d      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a38      	ldr	r2, [pc, #224]	@ (8001900 <HAL_DMA_Init+0x434>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d018      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a36      	ldr	r2, [pc, #216]	@ (8001904 <HAL_DMA_Init+0x438>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a35      	ldr	r2, [pc, #212]	@ (8001908 <HAL_DMA_Init+0x43c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00e      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a33      	ldr	r2, [pc, #204]	@ (800190c <HAL_DMA_Init+0x440>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d009      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a32      	ldr	r2, [pc, #200]	@ (8001910 <HAL_DMA_Init+0x444>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_Init+0x38a>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a30      	ldr	r2, [pc, #192]	@ (8001914 <HAL_DMA_Init+0x448>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d101      	bne.n	800185a <HAL_DMA_Init+0x38e>
 8001856:	2301      	movs	r3, #1
 8001858:	e000      	b.n	800185c <HAL_DMA_Init+0x390>
 800185a:	2300      	movs	r3, #0
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 8097 	beq.w	8001990 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a24      	ldr	r2, [pc, #144]	@ (80018f8 <HAL_DMA_Init+0x42c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d021      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a22      	ldr	r2, [pc, #136]	@ (80018fc <HAL_DMA_Init+0x430>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01c      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a21      	ldr	r2, [pc, #132]	@ (8001900 <HAL_DMA_Init+0x434>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d017      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a1f      	ldr	r2, [pc, #124]	@ (8001904 <HAL_DMA_Init+0x438>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d012      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a1e      	ldr	r2, [pc, #120]	@ (8001908 <HAL_DMA_Init+0x43c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d00d      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a1c      	ldr	r2, [pc, #112]	@ (800190c <HAL_DMA_Init+0x440>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d008      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001910 <HAL_DMA_Init+0x444>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d003      	beq.n	80018b0 <HAL_DMA_Init+0x3e4>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a19      	ldr	r2, [pc, #100]	@ (8001914 <HAL_DMA_Init+0x448>)
 80018ae:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2202      	movs	r2, #2
 80018b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2200      	movs	r2, #0
 80018bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	4b13      	ldr	r3, [pc, #76]	@ (8001918 <HAL_DMA_Init+0x44c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	2b40      	cmp	r3, #64	@ 0x40
 80018d6:	d021      	beq.n	800191c <HAL_DMA_Init+0x450>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2b80      	cmp	r3, #128	@ 0x80
 80018de:	d102      	bne.n	80018e6 <HAL_DMA_Init+0x41a>
 80018e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018e4:	e01b      	b.n	800191e <HAL_DMA_Init+0x452>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e019      	b.n	800191e <HAL_DMA_Init+0x452>
 80018ea:	bf00      	nop
 80018ec:	fe10803f 	.word	0xfe10803f
 80018f0:	5c001000 	.word	0x5c001000
 80018f4:	ffff0000 	.word	0xffff0000
 80018f8:	58025408 	.word	0x58025408
 80018fc:	5802541c 	.word	0x5802541c
 8001900:	58025430 	.word	0x58025430
 8001904:	58025444 	.word	0x58025444
 8001908:	58025458 	.word	0x58025458
 800190c:	5802546c 	.word	0x5802546c
 8001910:	58025480 	.word	0x58025480
 8001914:	58025494 	.word	0x58025494
 8001918:	fffe000f 	.word	0xfffe000f
 800191c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	68d2      	ldr	r2, [r2, #12]
 8001922:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001924:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800192c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001934:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	699b      	ldr	r3, [r3, #24]
 800193a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800193c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	69db      	ldr	r3, [r3, #28]
 8001942:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001944:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800194c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b6e      	ldr	r3, [pc, #440]	@ (8001b1c <HAL_DMA_Init+0x650>)
 8001964:	4413      	add	r3, r2
 8001966:	4a6e      	ldr	r2, [pc, #440]	@ (8001b20 <HAL_DMA_Init+0x654>)
 8001968:	fba2 2303 	umull	r2, r3, r2, r3
 800196c:	091b      	lsrs	r3, r3, #4
 800196e:	009a      	lsls	r2, r3, #2
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f002 f9a9 	bl	8003ccc <DMA_CalcBaseAndBitshift>
 800197a:	4603      	mov	r3, r0
 800197c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e008      	b.n	80019a2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2240      	movs	r2, #64	@ 0x40
 8001994:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2203      	movs	r2, #3
 800199a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e0b7      	b.n	8001b12 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b24 <HAL_DMA_Init+0x658>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d072      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a5d      	ldr	r2, [pc, #372]	@ (8001b28 <HAL_DMA_Init+0x65c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d06d      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a5c      	ldr	r2, [pc, #368]	@ (8001b2c <HAL_DMA_Init+0x660>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d068      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5a      	ldr	r2, [pc, #360]	@ (8001b30 <HAL_DMA_Init+0x664>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d063      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a59      	ldr	r2, [pc, #356]	@ (8001b34 <HAL_DMA_Init+0x668>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d05e      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a57      	ldr	r2, [pc, #348]	@ (8001b38 <HAL_DMA_Init+0x66c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d059      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a56      	ldr	r2, [pc, #344]	@ (8001b3c <HAL_DMA_Init+0x670>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d054      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a54      	ldr	r2, [pc, #336]	@ (8001b40 <HAL_DMA_Init+0x674>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d04f      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a53      	ldr	r2, [pc, #332]	@ (8001b44 <HAL_DMA_Init+0x678>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d04a      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a51      	ldr	r2, [pc, #324]	@ (8001b48 <HAL_DMA_Init+0x67c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d045      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a50      	ldr	r2, [pc, #320]	@ (8001b4c <HAL_DMA_Init+0x680>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d040      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a4e      	ldr	r2, [pc, #312]	@ (8001b50 <HAL_DMA_Init+0x684>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d03b      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8001b54 <HAL_DMA_Init+0x688>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d036      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a4b      	ldr	r2, [pc, #300]	@ (8001b58 <HAL_DMA_Init+0x68c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d031      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a4a      	ldr	r2, [pc, #296]	@ (8001b5c <HAL_DMA_Init+0x690>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d02c      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a48      	ldr	r2, [pc, #288]	@ (8001b60 <HAL_DMA_Init+0x694>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d027      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a47      	ldr	r2, [pc, #284]	@ (8001b64 <HAL_DMA_Init+0x698>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a45      	ldr	r2, [pc, #276]	@ (8001b68 <HAL_DMA_Init+0x69c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01d      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_DMA_Init+0x6a0>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d018      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a42      	ldr	r2, [pc, #264]	@ (8001b70 <HAL_DMA_Init+0x6a4>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d013      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a41      	ldr	r2, [pc, #260]	@ (8001b74 <HAL_DMA_Init+0x6a8>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00e      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a3f      	ldr	r2, [pc, #252]	@ (8001b78 <HAL_DMA_Init+0x6ac>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d009      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a3e      	ldr	r2, [pc, #248]	@ (8001b7c <HAL_DMA_Init+0x6b0>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d004      	beq.n	8001a92 <HAL_DMA_Init+0x5c6>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8001b80 <HAL_DMA_Init+0x6b4>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_DMA_Init+0x5ca>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_Init+0x5cc>
 8001a96:	2300      	movs	r3, #0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d032      	beq.n	8001b02 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f002 fa43 	bl	8003f28 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	2b80      	cmp	r3, #128	@ 0x80
 8001aa8:	d102      	bne.n	8001ab0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ac4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d010      	beq.n	8001af0 <HAL_DMA_Init+0x624>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	2b08      	cmp	r3, #8
 8001ad4:	d80c      	bhi.n	8001af0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f002 fac0 	bl	800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	e008      	b.n	8001b02 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	a7fdabf8 	.word	0xa7fdabf8
 8001b20:	cccccccd 	.word	0xcccccccd
 8001b24:	40020010 	.word	0x40020010
 8001b28:	40020028 	.word	0x40020028
 8001b2c:	40020040 	.word	0x40020040
 8001b30:	40020058 	.word	0x40020058
 8001b34:	40020070 	.word	0x40020070
 8001b38:	40020088 	.word	0x40020088
 8001b3c:	400200a0 	.word	0x400200a0
 8001b40:	400200b8 	.word	0x400200b8
 8001b44:	40020410 	.word	0x40020410
 8001b48:	40020428 	.word	0x40020428
 8001b4c:	40020440 	.word	0x40020440
 8001b50:	40020458 	.word	0x40020458
 8001b54:	40020470 	.word	0x40020470
 8001b58:	40020488 	.word	0x40020488
 8001b5c:	400204a0 	.word	0x400204a0
 8001b60:	400204b8 	.word	0x400204b8
 8001b64:	58025408 	.word	0x58025408
 8001b68:	5802541c 	.word	0x5802541c
 8001b6c:	58025430 	.word	0x58025430
 8001b70:	58025444 	.word	0x58025444
 8001b74:	58025458 	.word	0x58025458
 8001b78:	5802546c 	.word	0x5802546c
 8001b7c:	58025480 	.word	0x58025480
 8001b80:	58025494 	.word	0x58025494

08001b84 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e226      	b.n	8001fee <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d101      	bne.n	8001bae <HAL_DMA_Start_IT+0x2a>
 8001baa:	2302      	movs	r3, #2
 8001bac:	e21f      	b.n	8001fee <HAL_DMA_Start_IT+0x46a>
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	f040 820a 	bne.w	8001fd8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a68      	ldr	r2, [pc, #416]	@ (8001d78 <HAL_DMA_Start_IT+0x1f4>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d04a      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a66      	ldr	r2, [pc, #408]	@ (8001d7c <HAL_DMA_Start_IT+0x1f8>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d045      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a65      	ldr	r2, [pc, #404]	@ (8001d80 <HAL_DMA_Start_IT+0x1fc>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d040      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a63      	ldr	r2, [pc, #396]	@ (8001d84 <HAL_DMA_Start_IT+0x200>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d03b      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a62      	ldr	r2, [pc, #392]	@ (8001d88 <HAL_DMA_Start_IT+0x204>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d036      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a60      	ldr	r2, [pc, #384]	@ (8001d8c <HAL_DMA_Start_IT+0x208>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d031      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a5f      	ldr	r2, [pc, #380]	@ (8001d90 <HAL_DMA_Start_IT+0x20c>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d02c      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a5d      	ldr	r2, [pc, #372]	@ (8001d94 <HAL_DMA_Start_IT+0x210>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d027      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a5c      	ldr	r2, [pc, #368]	@ (8001d98 <HAL_DMA_Start_IT+0x214>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d022      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a5a      	ldr	r2, [pc, #360]	@ (8001d9c <HAL_DMA_Start_IT+0x218>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d01d      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a59      	ldr	r2, [pc, #356]	@ (8001da0 <HAL_DMA_Start_IT+0x21c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d018      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a57      	ldr	r2, [pc, #348]	@ (8001da4 <HAL_DMA_Start_IT+0x220>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d013      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a56      	ldr	r2, [pc, #344]	@ (8001da8 <HAL_DMA_Start_IT+0x224>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d00e      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a54      	ldr	r2, [pc, #336]	@ (8001dac <HAL_DMA_Start_IT+0x228>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a53      	ldr	r2, [pc, #332]	@ (8001db0 <HAL_DMA_Start_IT+0x22c>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d004      	beq.n	8001c72 <HAL_DMA_Start_IT+0xee>
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a51      	ldr	r2, [pc, #324]	@ (8001db4 <HAL_DMA_Start_IT+0x230>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d108      	bne.n	8001c84 <HAL_DMA_Start_IT+0x100>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0201 	bic.w	r2, r2, #1
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	e007      	b.n	8001c94 <HAL_DMA_Start_IT+0x110>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f001 fe6a 	bl	8003974 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <HAL_DMA_Start_IT+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d04a      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a33      	ldr	r2, [pc, #204]	@ (8001d7c <HAL_DMA_Start_IT+0x1f8>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d045      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a31      	ldr	r2, [pc, #196]	@ (8001d80 <HAL_DMA_Start_IT+0x1fc>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d040      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a30      	ldr	r2, [pc, #192]	@ (8001d84 <HAL_DMA_Start_IT+0x200>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d03b      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a2e      	ldr	r2, [pc, #184]	@ (8001d88 <HAL_DMA_Start_IT+0x204>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d036      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a2d      	ldr	r2, [pc, #180]	@ (8001d8c <HAL_DMA_Start_IT+0x208>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d031      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_DMA_Start_IT+0x20c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d02c      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a2a      	ldr	r2, [pc, #168]	@ (8001d94 <HAL_DMA_Start_IT+0x210>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d027      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <HAL_DMA_Start_IT+0x214>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d022      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a27      	ldr	r2, [pc, #156]	@ (8001d9c <HAL_DMA_Start_IT+0x218>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d01d      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a25      	ldr	r2, [pc, #148]	@ (8001da0 <HAL_DMA_Start_IT+0x21c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d018      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a24      	ldr	r2, [pc, #144]	@ (8001da4 <HAL_DMA_Start_IT+0x220>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d013      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a22      	ldr	r2, [pc, #136]	@ (8001da8 <HAL_DMA_Start_IT+0x224>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d00e      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a21      	ldr	r2, [pc, #132]	@ (8001dac <HAL_DMA_Start_IT+0x228>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d009      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a1f      	ldr	r2, [pc, #124]	@ (8001db0 <HAL_DMA_Start_IT+0x22c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d004      	beq.n	8001d40 <HAL_DMA_Start_IT+0x1bc>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8001db4 <HAL_DMA_Start_IT+0x230>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_DMA_Start_IT+0x1c0>
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_DMA_Start_IT+0x1c2>
 8001d44:	2300      	movs	r3, #0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d036      	beq.n	8001db8 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f023 021e 	bic.w	r2, r3, #30
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f042 0216 	orr.w	r2, r2, #22
 8001d5c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d03e      	beq.n	8001de4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f042 0208 	orr.w	r2, r2, #8
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e035      	b.n	8001de4 <HAL_DMA_Start_IT+0x260>
 8001d78:	40020010 	.word	0x40020010
 8001d7c:	40020028 	.word	0x40020028
 8001d80:	40020040 	.word	0x40020040
 8001d84:	40020058 	.word	0x40020058
 8001d88:	40020070 	.word	0x40020070
 8001d8c:	40020088 	.word	0x40020088
 8001d90:	400200a0 	.word	0x400200a0
 8001d94:	400200b8 	.word	0x400200b8
 8001d98:	40020410 	.word	0x40020410
 8001d9c:	40020428 	.word	0x40020428
 8001da0:	40020440 	.word	0x40020440
 8001da4:	40020458 	.word	0x40020458
 8001da8:	40020470 	.word	0x40020470
 8001dac:	40020488 	.word	0x40020488
 8001db0:	400204a0 	.word	0x400204a0
 8001db4:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 020e 	bic.w	r2, r3, #14
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f042 020a 	orr.w	r2, r2, #10
 8001dca:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d007      	beq.n	8001de4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 0204 	orr.w	r2, r2, #4
 8001de2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a83      	ldr	r2, [pc, #524]	@ (8001ff8 <HAL_DMA_Start_IT+0x474>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d072      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a82      	ldr	r2, [pc, #520]	@ (8001ffc <HAL_DMA_Start_IT+0x478>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d06d      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a80      	ldr	r2, [pc, #512]	@ (8002000 <HAL_DMA_Start_IT+0x47c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d068      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a7f      	ldr	r2, [pc, #508]	@ (8002004 <HAL_DMA_Start_IT+0x480>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d063      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a7d      	ldr	r2, [pc, #500]	@ (8002008 <HAL_DMA_Start_IT+0x484>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d05e      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a7c      	ldr	r2, [pc, #496]	@ (800200c <HAL_DMA_Start_IT+0x488>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d059      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a7a      	ldr	r2, [pc, #488]	@ (8002010 <HAL_DMA_Start_IT+0x48c>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d054      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a79      	ldr	r2, [pc, #484]	@ (8002014 <HAL_DMA_Start_IT+0x490>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d04f      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a77      	ldr	r2, [pc, #476]	@ (8002018 <HAL_DMA_Start_IT+0x494>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d04a      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a76      	ldr	r2, [pc, #472]	@ (800201c <HAL_DMA_Start_IT+0x498>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d045      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a74      	ldr	r2, [pc, #464]	@ (8002020 <HAL_DMA_Start_IT+0x49c>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d040      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a73      	ldr	r2, [pc, #460]	@ (8002024 <HAL_DMA_Start_IT+0x4a0>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d03b      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a71      	ldr	r2, [pc, #452]	@ (8002028 <HAL_DMA_Start_IT+0x4a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d036      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a70      	ldr	r2, [pc, #448]	@ (800202c <HAL_DMA_Start_IT+0x4a8>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d031      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a6e      	ldr	r2, [pc, #440]	@ (8002030 <HAL_DMA_Start_IT+0x4ac>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02c      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6d      	ldr	r2, [pc, #436]	@ (8002034 <HAL_DMA_Start_IT+0x4b0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d027      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a6b      	ldr	r2, [pc, #428]	@ (8002038 <HAL_DMA_Start_IT+0x4b4>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d022      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a6a      	ldr	r2, [pc, #424]	@ (800203c <HAL_DMA_Start_IT+0x4b8>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d01d      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a68      	ldr	r2, [pc, #416]	@ (8002040 <HAL_DMA_Start_IT+0x4bc>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d018      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a67      	ldr	r2, [pc, #412]	@ (8002044 <HAL_DMA_Start_IT+0x4c0>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a65      	ldr	r2, [pc, #404]	@ (8002048 <HAL_DMA_Start_IT+0x4c4>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a64      	ldr	r2, [pc, #400]	@ (800204c <HAL_DMA_Start_IT+0x4c8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a62      	ldr	r2, [pc, #392]	@ (8002050 <HAL_DMA_Start_IT+0x4cc>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_DMA_Start_IT+0x350>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a61      	ldr	r2, [pc, #388]	@ (8002054 <HAL_DMA_Start_IT+0x4d0>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d101      	bne.n	8001ed8 <HAL_DMA_Start_IT+0x354>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <HAL_DMA_Start_IT+0x356>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d01a      	beq.n	8001f14 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001efa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f0e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f12:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a37      	ldr	r2, [pc, #220]	@ (8001ff8 <HAL_DMA_Start_IT+0x474>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d04a      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a36      	ldr	r2, [pc, #216]	@ (8001ffc <HAL_DMA_Start_IT+0x478>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d045      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <HAL_DMA_Start_IT+0x47c>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d040      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a33      	ldr	r2, [pc, #204]	@ (8002004 <HAL_DMA_Start_IT+0x480>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d03b      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_DMA_Start_IT+0x484>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d036      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_DMA_Start_IT+0x488>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d031      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2e      	ldr	r2, [pc, #184]	@ (8002010 <HAL_DMA_Start_IT+0x48c>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d02c      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002014 <HAL_DMA_Start_IT+0x490>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d027      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <HAL_DMA_Start_IT+0x494>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d022      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <HAL_DMA_Start_IT+0x498>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01d      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	@ (8002020 <HAL_DMA_Start_IT+0x49c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d018      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <HAL_DMA_Start_IT+0x4a0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d013      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <HAL_DMA_Start_IT+0x4a4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d00e      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	@ (800202c <HAL_DMA_Start_IT+0x4a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d009      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	@ (8002030 <HAL_DMA_Start_IT+0x4ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_DMA_Start_IT+0x430>
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <HAL_DMA_Start_IT+0x4b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d108      	bne.n	8001fc6 <HAL_DMA_Start_IT+0x442>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0201 	orr.w	r2, r2, #1
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	e012      	b.n	8001fec <HAL_DMA_Start_IT+0x468>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e009      	b.n	8001fec <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001fde:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40020010 	.word	0x40020010
 8001ffc:	40020028 	.word	0x40020028
 8002000:	40020040 	.word	0x40020040
 8002004:	40020058 	.word	0x40020058
 8002008:	40020070 	.word	0x40020070
 800200c:	40020088 	.word	0x40020088
 8002010:	400200a0 	.word	0x400200a0
 8002014:	400200b8 	.word	0x400200b8
 8002018:	40020410 	.word	0x40020410
 800201c:	40020428 	.word	0x40020428
 8002020:	40020440 	.word	0x40020440
 8002024:	40020458 	.word	0x40020458
 8002028:	40020470 	.word	0x40020470
 800202c:	40020488 	.word	0x40020488
 8002030:	400204a0 	.word	0x400204a0
 8002034:	400204b8 	.word	0x400204b8
 8002038:	58025408 	.word	0x58025408
 800203c:	5802541c 	.word	0x5802541c
 8002040:	58025430 	.word	0x58025430
 8002044:	58025444 	.word	0x58025444
 8002048:	58025458 	.word	0x58025458
 800204c:	5802546c 	.word	0x5802546c
 8002050:	58025480 	.word	0x58025480
 8002054:	58025494 	.word	0x58025494

08002058 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff f894 	bl	800118c <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d101      	bne.n	8002070 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e2dc      	b.n	800262a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d008      	beq.n	800208e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2280      	movs	r2, #128	@ 0x80
 8002080:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e2cd      	b.n	800262a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a76      	ldr	r2, [pc, #472]	@ (800226c <HAL_DMA_Abort+0x214>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d04a      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a74      	ldr	r2, [pc, #464]	@ (8002270 <HAL_DMA_Abort+0x218>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d045      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a73      	ldr	r2, [pc, #460]	@ (8002274 <HAL_DMA_Abort+0x21c>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d040      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a71      	ldr	r2, [pc, #452]	@ (8002278 <HAL_DMA_Abort+0x220>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d03b      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a70      	ldr	r2, [pc, #448]	@ (800227c <HAL_DMA_Abort+0x224>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d036      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <HAL_DMA_Abort+0x228>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d031      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002284 <HAL_DMA_Abort+0x22c>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d02c      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002288 <HAL_DMA_Abort+0x230>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d027      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a6a      	ldr	r2, [pc, #424]	@ (800228c <HAL_DMA_Abort+0x234>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d022      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a68      	ldr	r2, [pc, #416]	@ (8002290 <HAL_DMA_Abort+0x238>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d01d      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a67      	ldr	r2, [pc, #412]	@ (8002294 <HAL_DMA_Abort+0x23c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d018      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a65      	ldr	r2, [pc, #404]	@ (8002298 <HAL_DMA_Abort+0x240>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a64      	ldr	r2, [pc, #400]	@ (800229c <HAL_DMA_Abort+0x244>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d00e      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a62      	ldr	r2, [pc, #392]	@ (80022a0 <HAL_DMA_Abort+0x248>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d009      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a61      	ldr	r2, [pc, #388]	@ (80022a4 <HAL_DMA_Abort+0x24c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d004      	beq.n	800212e <HAL_DMA_Abort+0xd6>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a5f      	ldr	r2, [pc, #380]	@ (80022a8 <HAL_DMA_Abort+0x250>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_DMA_Abort+0xda>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_DMA_Abort+0xdc>
 8002132:	2300      	movs	r3, #0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 021e 	bic.w	r2, r2, #30
 8002146:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002156:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	e00a      	b.n	8002176 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 020e 	bic.w	r2, r2, #14
 800216e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a3c      	ldr	r2, [pc, #240]	@ (800226c <HAL_DMA_Abort+0x214>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d072      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a3a      	ldr	r2, [pc, #232]	@ (8002270 <HAL_DMA_Abort+0x218>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d06d      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a39      	ldr	r2, [pc, #228]	@ (8002274 <HAL_DMA_Abort+0x21c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d068      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a37      	ldr	r2, [pc, #220]	@ (8002278 <HAL_DMA_Abort+0x220>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d063      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a36      	ldr	r2, [pc, #216]	@ (800227c <HAL_DMA_Abort+0x224>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a34      	ldr	r2, [pc, #208]	@ (8002280 <HAL_DMA_Abort+0x228>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d059      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a33      	ldr	r2, [pc, #204]	@ (8002284 <HAL_DMA_Abort+0x22c>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d054      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a31      	ldr	r2, [pc, #196]	@ (8002288 <HAL_DMA_Abort+0x230>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04f      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a30      	ldr	r2, [pc, #192]	@ (800228c <HAL_DMA_Abort+0x234>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002290 <HAL_DMA_Abort+0x238>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <HAL_DMA_Abort+0x23c>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002298 <HAL_DMA_Abort+0x240>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a2a      	ldr	r2, [pc, #168]	@ (800229c <HAL_DMA_Abort+0x244>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a28      	ldr	r2, [pc, #160]	@ (80022a0 <HAL_DMA_Abort+0x248>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a27      	ldr	r2, [pc, #156]	@ (80022a4 <HAL_DMA_Abort+0x24c>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a25      	ldr	r2, [pc, #148]	@ (80022a8 <HAL_DMA_Abort+0x250>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a24      	ldr	r2, [pc, #144]	@ (80022ac <HAL_DMA_Abort+0x254>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <HAL_DMA_Abort+0x258>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a21      	ldr	r2, [pc, #132]	@ (80022b4 <HAL_DMA_Abort+0x25c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a1f      	ldr	r2, [pc, #124]	@ (80022b8 <HAL_DMA_Abort+0x260>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a1e      	ldr	r2, [pc, #120]	@ (80022bc <HAL_DMA_Abort+0x264>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a1c      	ldr	r2, [pc, #112]	@ (80022c0 <HAL_DMA_Abort+0x268>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a1b      	ldr	r2, [pc, #108]	@ (80022c4 <HAL_DMA_Abort+0x26c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort+0x20e>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a19      	ldr	r2, [pc, #100]	@ (80022c8 <HAL_DMA_Abort+0x270>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d132      	bne.n	80022cc <HAL_DMA_Abort+0x274>
 8002266:	2301      	movs	r3, #1
 8002268:	e031      	b.n	80022ce <HAL_DMA_Abort+0x276>
 800226a:	bf00      	nop
 800226c:	40020010 	.word	0x40020010
 8002270:	40020028 	.word	0x40020028
 8002274:	40020040 	.word	0x40020040
 8002278:	40020058 	.word	0x40020058
 800227c:	40020070 	.word	0x40020070
 8002280:	40020088 	.word	0x40020088
 8002284:	400200a0 	.word	0x400200a0
 8002288:	400200b8 	.word	0x400200b8
 800228c:	40020410 	.word	0x40020410
 8002290:	40020428 	.word	0x40020428
 8002294:	40020440 	.word	0x40020440
 8002298:	40020458 	.word	0x40020458
 800229c:	40020470 	.word	0x40020470
 80022a0:	40020488 	.word	0x40020488
 80022a4:	400204a0 	.word	0x400204a0
 80022a8:	400204b8 	.word	0x400204b8
 80022ac:	58025408 	.word	0x58025408
 80022b0:	5802541c 	.word	0x5802541c
 80022b4:	58025430 	.word	0x58025430
 80022b8:	58025444 	.word	0x58025444
 80022bc:	58025458 	.word	0x58025458
 80022c0:	5802546c 	.word	0x5802546c
 80022c4:	58025480 	.word	0x58025480
 80022c8:	58025494 	.word	0x58025494
 80022cc:	2300      	movs	r3, #0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a6d      	ldr	r2, [pc, #436]	@ (800249c <HAL_DMA_Abort+0x444>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d04a      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a6b      	ldr	r2, [pc, #428]	@ (80024a0 <HAL_DMA_Abort+0x448>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d045      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a6a      	ldr	r2, [pc, #424]	@ (80024a4 <HAL_DMA_Abort+0x44c>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d040      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a68      	ldr	r2, [pc, #416]	@ (80024a8 <HAL_DMA_Abort+0x450>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d03b      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a67      	ldr	r2, [pc, #412]	@ (80024ac <HAL_DMA_Abort+0x454>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d036      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a65      	ldr	r2, [pc, #404]	@ (80024b0 <HAL_DMA_Abort+0x458>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d031      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a64      	ldr	r2, [pc, #400]	@ (80024b4 <HAL_DMA_Abort+0x45c>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d02c      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a62      	ldr	r2, [pc, #392]	@ (80024b8 <HAL_DMA_Abort+0x460>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d027      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a61      	ldr	r2, [pc, #388]	@ (80024bc <HAL_DMA_Abort+0x464>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d022      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a5f      	ldr	r2, [pc, #380]	@ (80024c0 <HAL_DMA_Abort+0x468>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d01d      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5e      	ldr	r2, [pc, #376]	@ (80024c4 <HAL_DMA_Abort+0x46c>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d018      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5c      	ldr	r2, [pc, #368]	@ (80024c8 <HAL_DMA_Abort+0x470>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5b      	ldr	r2, [pc, #364]	@ (80024cc <HAL_DMA_Abort+0x474>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00e      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a59      	ldr	r2, [pc, #356]	@ (80024d0 <HAL_DMA_Abort+0x478>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d009      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a58      	ldr	r2, [pc, #352]	@ (80024d4 <HAL_DMA_Abort+0x47c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d004      	beq.n	8002382 <HAL_DMA_Abort+0x32a>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a56      	ldr	r2, [pc, #344]	@ (80024d8 <HAL_DMA_Abort+0x480>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d108      	bne.n	8002394 <HAL_DMA_Abort+0x33c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0201 	bic.w	r2, r2, #1
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	e007      	b.n	80023a4 <HAL_DMA_Abort+0x34c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 0201 	bic.w	r2, r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023a4:	e013      	b.n	80023ce <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023a6:	f7fe fef1 	bl	800118c <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b05      	cmp	r3, #5
 80023b2:	d90c      	bls.n	80023ce <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2220      	movs	r2, #32
 80023b8:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2203      	movs	r2, #3
 80023be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e12d      	b.n	800262a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1e5      	bne.n	80023a6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a2f      	ldr	r2, [pc, #188]	@ (800249c <HAL_DMA_Abort+0x444>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04a      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a2d      	ldr	r2, [pc, #180]	@ (80024a0 <HAL_DMA_Abort+0x448>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d045      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a2c      	ldr	r2, [pc, #176]	@ (80024a4 <HAL_DMA_Abort+0x44c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d040      	beq.n	800247a <HAL_DMA_Abort+0x422>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a2a      	ldr	r2, [pc, #168]	@ (80024a8 <HAL_DMA_Abort+0x450>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d03b      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a29      	ldr	r2, [pc, #164]	@ (80024ac <HAL_DMA_Abort+0x454>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d036      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a27      	ldr	r2, [pc, #156]	@ (80024b0 <HAL_DMA_Abort+0x458>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d031      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a26      	ldr	r2, [pc, #152]	@ (80024b4 <HAL_DMA_Abort+0x45c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d02c      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a24      	ldr	r2, [pc, #144]	@ (80024b8 <HAL_DMA_Abort+0x460>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d027      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a23      	ldr	r2, [pc, #140]	@ (80024bc <HAL_DMA_Abort+0x464>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d022      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a21      	ldr	r2, [pc, #132]	@ (80024c0 <HAL_DMA_Abort+0x468>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d01d      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a20      	ldr	r2, [pc, #128]	@ (80024c4 <HAL_DMA_Abort+0x46c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d018      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a1e      	ldr	r2, [pc, #120]	@ (80024c8 <HAL_DMA_Abort+0x470>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	@ (80024cc <HAL_DMA_Abort+0x474>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d00e      	beq.n	800247a <HAL_DMA_Abort+0x422>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1b      	ldr	r2, [pc, #108]	@ (80024d0 <HAL_DMA_Abort+0x478>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d009      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1a      	ldr	r2, [pc, #104]	@ (80024d4 <HAL_DMA_Abort+0x47c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d004      	beq.n	800247a <HAL_DMA_Abort+0x422>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	@ (80024d8 <HAL_DMA_Abort+0x480>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d101      	bne.n	800247e <HAL_DMA_Abort+0x426>
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <HAL_DMA_Abort+0x428>
 800247e:	2300      	movs	r3, #0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d02b      	beq.n	80024dc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800248e:	f003 031f 	and.w	r3, r3, #31
 8002492:	223f      	movs	r2, #63	@ 0x3f
 8002494:	409a      	lsls	r2, r3
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	609a      	str	r2, [r3, #8]
 800249a:	e02a      	b.n	80024f2 <HAL_DMA_Abort+0x49a>
 800249c:	40020010 	.word	0x40020010
 80024a0:	40020028 	.word	0x40020028
 80024a4:	40020040 	.word	0x40020040
 80024a8:	40020058 	.word	0x40020058
 80024ac:	40020070 	.word	0x40020070
 80024b0:	40020088 	.word	0x40020088
 80024b4:	400200a0 	.word	0x400200a0
 80024b8:	400200b8 	.word	0x400200b8
 80024bc:	40020410 	.word	0x40020410
 80024c0:	40020428 	.word	0x40020428
 80024c4:	40020440 	.word	0x40020440
 80024c8:	40020458 	.word	0x40020458
 80024cc:	40020470 	.word	0x40020470
 80024d0:	40020488 	.word	0x40020488
 80024d4:	400204a0 	.word	0x400204a0
 80024d8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024e6:	f003 031f 	and.w	r3, r3, #31
 80024ea:	2201      	movs	r2, #1
 80024ec:	409a      	lsls	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a4f      	ldr	r2, [pc, #316]	@ (8002634 <HAL_DMA_Abort+0x5dc>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d072      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a4d      	ldr	r2, [pc, #308]	@ (8002638 <HAL_DMA_Abort+0x5e0>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d06d      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a4c      	ldr	r2, [pc, #304]	@ (800263c <HAL_DMA_Abort+0x5e4>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d068      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a4a      	ldr	r2, [pc, #296]	@ (8002640 <HAL_DMA_Abort+0x5e8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d063      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a49      	ldr	r2, [pc, #292]	@ (8002644 <HAL_DMA_Abort+0x5ec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d05e      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a47      	ldr	r2, [pc, #284]	@ (8002648 <HAL_DMA_Abort+0x5f0>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d059      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_DMA_Abort+0x5f4>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d054      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a44      	ldr	r2, [pc, #272]	@ (8002650 <HAL_DMA_Abort+0x5f8>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d04f      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a43      	ldr	r2, [pc, #268]	@ (8002654 <HAL_DMA_Abort+0x5fc>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d04a      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a41      	ldr	r2, [pc, #260]	@ (8002658 <HAL_DMA_Abort+0x600>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d045      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a40      	ldr	r2, [pc, #256]	@ (800265c <HAL_DMA_Abort+0x604>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d040      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a3e      	ldr	r2, [pc, #248]	@ (8002660 <HAL_DMA_Abort+0x608>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d03b      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a3d      	ldr	r2, [pc, #244]	@ (8002664 <HAL_DMA_Abort+0x60c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d036      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a3b      	ldr	r2, [pc, #236]	@ (8002668 <HAL_DMA_Abort+0x610>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d031      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a3a      	ldr	r2, [pc, #232]	@ (800266c <HAL_DMA_Abort+0x614>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d02c      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a38      	ldr	r2, [pc, #224]	@ (8002670 <HAL_DMA_Abort+0x618>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d027      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a37      	ldr	r2, [pc, #220]	@ (8002674 <HAL_DMA_Abort+0x61c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d022      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a35      	ldr	r2, [pc, #212]	@ (8002678 <HAL_DMA_Abort+0x620>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d01d      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a34      	ldr	r2, [pc, #208]	@ (800267c <HAL_DMA_Abort+0x624>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d018      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a32      	ldr	r2, [pc, #200]	@ (8002680 <HAL_DMA_Abort+0x628>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a31      	ldr	r2, [pc, #196]	@ (8002684 <HAL_DMA_Abort+0x62c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d00e      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	@ (8002688 <HAL_DMA_Abort+0x630>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2e      	ldr	r2, [pc, #184]	@ (800268c <HAL_DMA_Abort+0x634>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_DMA_Abort+0x58a>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a2c      	ldr	r2, [pc, #176]	@ (8002690 <HAL_DMA_Abort+0x638>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d101      	bne.n	80025e6 <HAL_DMA_Abort+0x58e>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_DMA_Abort+0x590>
 80025e6:	2300      	movs	r3, #0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80025f4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002608:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800260c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002616:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020010 	.word	0x40020010
 8002638:	40020028 	.word	0x40020028
 800263c:	40020040 	.word	0x40020040
 8002640:	40020058 	.word	0x40020058
 8002644:	40020070 	.word	0x40020070
 8002648:	40020088 	.word	0x40020088
 800264c:	400200a0 	.word	0x400200a0
 8002650:	400200b8 	.word	0x400200b8
 8002654:	40020410 	.word	0x40020410
 8002658:	40020428 	.word	0x40020428
 800265c:	40020440 	.word	0x40020440
 8002660:	40020458 	.word	0x40020458
 8002664:	40020470 	.word	0x40020470
 8002668:	40020488 	.word	0x40020488
 800266c:	400204a0 	.word	0x400204a0
 8002670:	400204b8 	.word	0x400204b8
 8002674:	58025408 	.word	0x58025408
 8002678:	5802541c 	.word	0x5802541c
 800267c:	58025430 	.word	0x58025430
 8002680:	58025444 	.word	0x58025444
 8002684:	58025458 	.word	0x58025458
 8002688:	5802546c 	.word	0x5802546c
 800268c:	58025480 	.word	0x58025480
 8002690:	58025494 	.word	0x58025494

08002694 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e237      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d004      	beq.n	80026bc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2280      	movs	r2, #128	@ 0x80
 80026b6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e22c      	b.n	8002b16 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d04a      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a5b      	ldr	r2, [pc, #364]	@ (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d045      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a59      	ldr	r2, [pc, #356]	@ (800283c <HAL_DMA_Abort_IT+0x1a8>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d040      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a58      	ldr	r2, [pc, #352]	@ (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d03b      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d036      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a55      	ldr	r2, [pc, #340]	@ (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d031      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a53      	ldr	r2, [pc, #332]	@ (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d02c      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a52      	ldr	r2, [pc, #328]	@ (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d027      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d022      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a4f      	ldr	r2, [pc, #316]	@ (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d01d      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a4d      	ldr	r2, [pc, #308]	@ (800285c <HAL_DMA_Abort_IT+0x1c8>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d018      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a4c      	ldr	r2, [pc, #304]	@ (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d013      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a4a      	ldr	r2, [pc, #296]	@ (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00e      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a49      	ldr	r2, [pc, #292]	@ (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d009      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a47      	ldr	r2, [pc, #284]	@ (800286c <HAL_DMA_Abort_IT+0x1d8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d004      	beq.n	800275c <HAL_DMA_Abort_IT+0xc8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a46      	ldr	r2, [pc, #280]	@ (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d101      	bne.n	8002760 <HAL_DMA_Abort_IT+0xcc>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_DMA_Abort_IT+0xce>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8086 	beq.w	8002874 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2204      	movs	r2, #4
 800276c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a2f      	ldr	r2, [pc, #188]	@ (8002834 <HAL_DMA_Abort_IT+0x1a0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d04a      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a2e      	ldr	r2, [pc, #184]	@ (8002838 <HAL_DMA_Abort_IT+0x1a4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d045      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a2c      	ldr	r2, [pc, #176]	@ (800283c <HAL_DMA_Abort_IT+0x1a8>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d040      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a2b      	ldr	r2, [pc, #172]	@ (8002840 <HAL_DMA_Abort_IT+0x1ac>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d03b      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a29      	ldr	r2, [pc, #164]	@ (8002844 <HAL_DMA_Abort_IT+0x1b0>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d036      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a28      	ldr	r2, [pc, #160]	@ (8002848 <HAL_DMA_Abort_IT+0x1b4>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d031      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a26      	ldr	r2, [pc, #152]	@ (800284c <HAL_DMA_Abort_IT+0x1b8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02c      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a25      	ldr	r2, [pc, #148]	@ (8002850 <HAL_DMA_Abort_IT+0x1bc>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d027      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a23      	ldr	r2, [pc, #140]	@ (8002854 <HAL_DMA_Abort_IT+0x1c0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d022      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a22      	ldr	r2, [pc, #136]	@ (8002858 <HAL_DMA_Abort_IT+0x1c4>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d01d      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a20      	ldr	r2, [pc, #128]	@ (800285c <HAL_DMA_Abort_IT+0x1c8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d018      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002860 <HAL_DMA_Abort_IT+0x1cc>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <HAL_DMA_Abort_IT+0x1d0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00e      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002868 <HAL_DMA_Abort_IT+0x1d4>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1a      	ldr	r2, [pc, #104]	@ (800286c <HAL_DMA_Abort_IT+0x1d8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_DMA_Abort_IT+0x17c>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_DMA_Abort_IT+0x1dc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d108      	bne.n	8002822 <HAL_DMA_Abort_IT+0x18e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0201 	bic.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	e178      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 0201 	bic.w	r2, r2, #1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	e16f      	b.n	8002b14 <HAL_DMA_Abort_IT+0x480>
 8002834:	40020010 	.word	0x40020010
 8002838:	40020028 	.word	0x40020028
 800283c:	40020040 	.word	0x40020040
 8002840:	40020058 	.word	0x40020058
 8002844:	40020070 	.word	0x40020070
 8002848:	40020088 	.word	0x40020088
 800284c:	400200a0 	.word	0x400200a0
 8002850:	400200b8 	.word	0x400200b8
 8002854:	40020410 	.word	0x40020410
 8002858:	40020428 	.word	0x40020428
 800285c:	40020440 	.word	0x40020440
 8002860:	40020458 	.word	0x40020458
 8002864:	40020470 	.word	0x40020470
 8002868:	40020488 	.word	0x40020488
 800286c:	400204a0 	.word	0x400204a0
 8002870:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 020e 	bic.w	r2, r2, #14
 8002882:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6c      	ldr	r2, [pc, #432]	@ (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d04a      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a6b      	ldr	r2, [pc, #428]	@ (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d045      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a69      	ldr	r2, [pc, #420]	@ (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d040      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a68      	ldr	r2, [pc, #416]	@ (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d03b      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a66      	ldr	r2, [pc, #408]	@ (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d036      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a65      	ldr	r2, [pc, #404]	@ (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d031      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a63      	ldr	r2, [pc, #396]	@ (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d02c      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a62      	ldr	r2, [pc, #392]	@ (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d027      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a60      	ldr	r2, [pc, #384]	@ (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d022      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d01d      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a5d      	ldr	r2, [pc, #372]	@ (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d018      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a5c      	ldr	r2, [pc, #368]	@ (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d013      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a5a      	ldr	r2, [pc, #360]	@ (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00e      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a59      	ldr	r2, [pc, #356]	@ (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d009      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d004      	beq.n	8002924 <HAL_DMA_Abort_IT+0x290>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a56      	ldr	r2, [pc, #344]	@ (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d108      	bne.n	8002936 <HAL_DMA_Abort_IT+0x2a2>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0201 	bic.w	r2, r2, #1
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e007      	b.n	8002946 <HAL_DMA_Abort_IT+0x2b2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 0201 	bic.w	r2, r2, #1
 8002944:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a3c <HAL_DMA_Abort_IT+0x3a8>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d072      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a3a      	ldr	r2, [pc, #232]	@ (8002a40 <HAL_DMA_Abort_IT+0x3ac>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d06d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a39      	ldr	r2, [pc, #228]	@ (8002a44 <HAL_DMA_Abort_IT+0x3b0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d068      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a37      	ldr	r2, [pc, #220]	@ (8002a48 <HAL_DMA_Abort_IT+0x3b4>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d063      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a36      	ldr	r2, [pc, #216]	@ (8002a4c <HAL_DMA_Abort_IT+0x3b8>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a34      	ldr	r2, [pc, #208]	@ (8002a50 <HAL_DMA_Abort_IT+0x3bc>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d059      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a33      	ldr	r2, [pc, #204]	@ (8002a54 <HAL_DMA_Abort_IT+0x3c0>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d054      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a31      	ldr	r2, [pc, #196]	@ (8002a58 <HAL_DMA_Abort_IT+0x3c4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d04f      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a30      	ldr	r2, [pc, #192]	@ (8002a5c <HAL_DMA_Abort_IT+0x3c8>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d04a      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a60 <HAL_DMA_Abort_IT+0x3cc>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d045      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a2d      	ldr	r2, [pc, #180]	@ (8002a64 <HAL_DMA_Abort_IT+0x3d0>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d040      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a68 <HAL_DMA_Abort_IT+0x3d4>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d03b      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a6c <HAL_DMA_Abort_IT+0x3d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d036      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	@ (8002a70 <HAL_DMA_Abort_IT+0x3dc>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d031      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a27      	ldr	r2, [pc, #156]	@ (8002a74 <HAL_DMA_Abort_IT+0x3e0>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d02c      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a25      	ldr	r2, [pc, #148]	@ (8002a78 <HAL_DMA_Abort_IT+0x3e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d027      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a24      	ldr	r2, [pc, #144]	@ (8002a7c <HAL_DMA_Abort_IT+0x3e8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d022      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a22      	ldr	r2, [pc, #136]	@ (8002a80 <HAL_DMA_Abort_IT+0x3ec>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01d      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a21      	ldr	r2, [pc, #132]	@ (8002a84 <HAL_DMA_Abort_IT+0x3f0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d018      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1f      	ldr	r2, [pc, #124]	@ (8002a88 <HAL_DMA_Abort_IT+0x3f4>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d013      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a1e      	ldr	r2, [pc, #120]	@ (8002a8c <HAL_DMA_Abort_IT+0x3f8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00e      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a1c      	ldr	r2, [pc, #112]	@ (8002a90 <HAL_DMA_Abort_IT+0x3fc>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d009      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1b      	ldr	r2, [pc, #108]	@ (8002a94 <HAL_DMA_Abort_IT+0x400>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d004      	beq.n	8002a36 <HAL_DMA_Abort_IT+0x3a2>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a19      	ldr	r2, [pc, #100]	@ (8002a98 <HAL_DMA_Abort_IT+0x404>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d132      	bne.n	8002a9c <HAL_DMA_Abort_IT+0x408>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e031      	b.n	8002a9e <HAL_DMA_Abort_IT+0x40a>
 8002a3a:	bf00      	nop
 8002a3c:	40020010 	.word	0x40020010
 8002a40:	40020028 	.word	0x40020028
 8002a44:	40020040 	.word	0x40020040
 8002a48:	40020058 	.word	0x40020058
 8002a4c:	40020070 	.word	0x40020070
 8002a50:	40020088 	.word	0x40020088
 8002a54:	400200a0 	.word	0x400200a0
 8002a58:	400200b8 	.word	0x400200b8
 8002a5c:	40020410 	.word	0x40020410
 8002a60:	40020428 	.word	0x40020428
 8002a64:	40020440 	.word	0x40020440
 8002a68:	40020458 	.word	0x40020458
 8002a6c:	40020470 	.word	0x40020470
 8002a70:	40020488 	.word	0x40020488
 8002a74:	400204a0 	.word	0x400204a0
 8002a78:	400204b8 	.word	0x400204b8
 8002a7c:	58025408 	.word	0x58025408
 8002a80:	5802541c 	.word	0x5802541c
 8002a84:	58025430 	.word	0x58025430
 8002a88:	58025444 	.word	0x58025444
 8002a8c:	58025458 	.word	0x58025458
 8002a90:	5802546c 	.word	0x5802546c
 8002a94:	58025480 	.word	0x58025480
 8002a98:	58025494 	.word	0x58025494
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002aac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ab0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002ad0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00c      	beq.n	8002af4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ae8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002af2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop

08002b20 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b2c:	4b67      	ldr	r3, [pc, #412]	@ (8002ccc <HAL_DMA_IRQHandler+0x1ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a67      	ldr	r2, [pc, #412]	@ (8002cd0 <HAL_DMA_IRQHandler+0x1b0>)
 8002b32:	fba2 2303 	umull	r2, r3, r2, r3
 8002b36:	0a9b      	lsrs	r3, r3, #10
 8002b38:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b3e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b44:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a5f      	ldr	r2, [pc, #380]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1b4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d04a      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a5d      	ldr	r2, [pc, #372]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1b8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d045      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cdc <HAL_DMA_IRQHandler+0x1bc>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d040      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a5a      	ldr	r2, [pc, #360]	@ (8002ce0 <HAL_DMA_IRQHandler+0x1c0>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d03b      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a59      	ldr	r2, [pc, #356]	@ (8002ce4 <HAL_DMA_IRQHandler+0x1c4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d036      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a57      	ldr	r2, [pc, #348]	@ (8002ce8 <HAL_DMA_IRQHandler+0x1c8>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d031      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a56      	ldr	r2, [pc, #344]	@ (8002cec <HAL_DMA_IRQHandler+0x1cc>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d02c      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a54      	ldr	r2, [pc, #336]	@ (8002cf0 <HAL_DMA_IRQHandler+0x1d0>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d027      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	@ (8002cf4 <HAL_DMA_IRQHandler+0x1d4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d022      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a51      	ldr	r2, [pc, #324]	@ (8002cf8 <HAL_DMA_IRQHandler+0x1d8>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d01d      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a50      	ldr	r2, [pc, #320]	@ (8002cfc <HAL_DMA_IRQHandler+0x1dc>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d018      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002d00 <HAL_DMA_IRQHandler+0x1e0>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d013      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a4d      	ldr	r2, [pc, #308]	@ (8002d04 <HAL_DMA_IRQHandler+0x1e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00e      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8002d08 <HAL_DMA_IRQHandler+0x1e8>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4a      	ldr	r2, [pc, #296]	@ (8002d0c <HAL_DMA_IRQHandler+0x1ec>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d004      	beq.n	8002bf2 <HAL_DMA_IRQHandler+0xd2>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a48      	ldr	r2, [pc, #288]	@ (8002d10 <HAL_DMA_IRQHandler+0x1f0>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d101      	bne.n	8002bf6 <HAL_DMA_IRQHandler+0xd6>
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e000      	b.n	8002bf8 <HAL_DMA_IRQHandler+0xd8>
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 842b 	beq.w	8003454 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c02:	f003 031f 	and.w	r3, r3, #31
 8002c06:	2208      	movs	r2, #8
 8002c08:	409a      	lsls	r2, r3
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 80a2 	beq.w	8002d58 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a2e      	ldr	r2, [pc, #184]	@ (8002cd4 <HAL_DMA_IRQHandler+0x1b4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d04a      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a2d      	ldr	r2, [pc, #180]	@ (8002cd8 <HAL_DMA_IRQHandler+0x1b8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d045      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a2b      	ldr	r2, [pc, #172]	@ (8002cdc <HAL_DMA_IRQHandler+0x1bc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d040      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a2a      	ldr	r2, [pc, #168]	@ (8002ce0 <HAL_DMA_IRQHandler+0x1c0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d03b      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a28      	ldr	r2, [pc, #160]	@ (8002ce4 <HAL_DMA_IRQHandler+0x1c4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d036      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a27      	ldr	r2, [pc, #156]	@ (8002ce8 <HAL_DMA_IRQHandler+0x1c8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d031      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a25      	ldr	r2, [pc, #148]	@ (8002cec <HAL_DMA_IRQHandler+0x1cc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d02c      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a24      	ldr	r2, [pc, #144]	@ (8002cf0 <HAL_DMA_IRQHandler+0x1d0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d027      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a22      	ldr	r2, [pc, #136]	@ (8002cf4 <HAL_DMA_IRQHandler+0x1d4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d022      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <HAL_DMA_IRQHandler+0x1d8>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d01d      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a1f      	ldr	r2, [pc, #124]	@ (8002cfc <HAL_DMA_IRQHandler+0x1dc>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d018      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a1e      	ldr	r2, [pc, #120]	@ (8002d00 <HAL_DMA_IRQHandler+0x1e0>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d013      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a1c      	ldr	r2, [pc, #112]	@ (8002d04 <HAL_DMA_IRQHandler+0x1e4>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00e      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a1b      	ldr	r2, [pc, #108]	@ (8002d08 <HAL_DMA_IRQHandler+0x1e8>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d009      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a19      	ldr	r2, [pc, #100]	@ (8002d0c <HAL_DMA_IRQHandler+0x1ec>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d004      	beq.n	8002cb4 <HAL_DMA_IRQHandler+0x194>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a18      	ldr	r2, [pc, #96]	@ (8002d10 <HAL_DMA_IRQHandler+0x1f0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d12f      	bne.n	8002d14 <HAL_DMA_IRQHandler+0x1f4>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0304 	and.w	r3, r3, #4
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	bf14      	ite	ne
 8002cc2:	2301      	movne	r3, #1
 8002cc4:	2300      	moveq	r3, #0
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	e02e      	b.n	8002d28 <HAL_DMA_IRQHandler+0x208>
 8002cca:	bf00      	nop
 8002ccc:	24000000 	.word	0x24000000
 8002cd0:	1b4e81b5 	.word	0x1b4e81b5
 8002cd4:	40020010 	.word	0x40020010
 8002cd8:	40020028 	.word	0x40020028
 8002cdc:	40020040 	.word	0x40020040
 8002ce0:	40020058 	.word	0x40020058
 8002ce4:	40020070 	.word	0x40020070
 8002ce8:	40020088 	.word	0x40020088
 8002cec:	400200a0 	.word	0x400200a0
 8002cf0:	400200b8 	.word	0x400200b8
 8002cf4:	40020410 	.word	0x40020410
 8002cf8:	40020428 	.word	0x40020428
 8002cfc:	40020440 	.word	0x40020440
 8002d00:	40020458 	.word	0x40020458
 8002d04:	40020470 	.word	0x40020470
 8002d08:	40020488 	.word	0x40020488
 8002d0c:	400204a0 	.word	0x400204a0
 8002d10:	400204b8 	.word	0x400204b8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf14      	ite	ne
 8002d22:	2301      	movne	r3, #1
 8002d24:	2300      	moveq	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d015      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 0204 	bic.w	r2, r2, #4
 8002d3a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	fa22 f303 	lsr.w	r3, r2, r3
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06e      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a69      	ldr	r2, [pc, #420]	@ (8002f18 <HAL_DMA_IRQHandler+0x3f8>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d04a      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	@ (8002f1c <HAL_DMA_IRQHandler+0x3fc>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d045      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a66      	ldr	r2, [pc, #408]	@ (8002f20 <HAL_DMA_IRQHandler+0x400>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d040      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a64      	ldr	r2, [pc, #400]	@ (8002f24 <HAL_DMA_IRQHandler+0x404>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d03b      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a63      	ldr	r2, [pc, #396]	@ (8002f28 <HAL_DMA_IRQHandler+0x408>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d036      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a61      	ldr	r2, [pc, #388]	@ (8002f2c <HAL_DMA_IRQHandler+0x40c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d031      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a60      	ldr	r2, [pc, #384]	@ (8002f30 <HAL_DMA_IRQHandler+0x410>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d02c      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a5e      	ldr	r2, [pc, #376]	@ (8002f34 <HAL_DMA_IRQHandler+0x414>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d027      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a5d      	ldr	r2, [pc, #372]	@ (8002f38 <HAL_DMA_IRQHandler+0x418>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d022      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a5b      	ldr	r2, [pc, #364]	@ (8002f3c <HAL_DMA_IRQHandler+0x41c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d01d      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002f40 <HAL_DMA_IRQHandler+0x420>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d018      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a58      	ldr	r2, [pc, #352]	@ (8002f44 <HAL_DMA_IRQHandler+0x424>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d013      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a57      	ldr	r2, [pc, #348]	@ (8002f48 <HAL_DMA_IRQHandler+0x428>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00e      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a55      	ldr	r2, [pc, #340]	@ (8002f4c <HAL_DMA_IRQHandler+0x42c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d009      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a54      	ldr	r2, [pc, #336]	@ (8002f50 <HAL_DMA_IRQHandler+0x430>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x2ee>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a52      	ldr	r2, [pc, #328]	@ (8002f54 <HAL_DMA_IRQHandler+0x434>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d10a      	bne.n	8002e24 <HAL_DMA_IRQHandler+0x304>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf14      	ite	ne
 8002e1c:	2301      	movne	r3, #1
 8002e1e:	2300      	moveq	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	e003      	b.n	8002e2c <HAL_DMA_IRQHandler+0x30c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2201      	movs	r2, #1
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e44:	f043 0202 	orr.w	r2, r3, #2
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e50:	f003 031f 	and.w	r3, r3, #31
 8002e54:	2204      	movs	r2, #4
 8002e56:	409a      	lsls	r2, r3
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 808f 	beq.w	8002f80 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a2c      	ldr	r2, [pc, #176]	@ (8002f18 <HAL_DMA_IRQHandler+0x3f8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d04a      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a2a      	ldr	r2, [pc, #168]	@ (8002f1c <HAL_DMA_IRQHandler+0x3fc>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d045      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a29      	ldr	r2, [pc, #164]	@ (8002f20 <HAL_DMA_IRQHandler+0x400>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d040      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <HAL_DMA_IRQHandler+0x404>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d03b      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a26      	ldr	r2, [pc, #152]	@ (8002f28 <HAL_DMA_IRQHandler+0x408>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d036      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <HAL_DMA_IRQHandler+0x40c>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d031      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a23      	ldr	r2, [pc, #140]	@ (8002f30 <HAL_DMA_IRQHandler+0x410>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d02c      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <HAL_DMA_IRQHandler+0x414>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d027      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a20      	ldr	r2, [pc, #128]	@ (8002f38 <HAL_DMA_IRQHandler+0x418>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d022      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_DMA_IRQHandler+0x41c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d01d      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1d      	ldr	r2, [pc, #116]	@ (8002f40 <HAL_DMA_IRQHandler+0x420>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d018      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_DMA_IRQHandler+0x424>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d013      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a1a      	ldr	r2, [pc, #104]	@ (8002f48 <HAL_DMA_IRQHandler+0x428>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d00e      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_DMA_IRQHandler+0x42c>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d009      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a17      	ldr	r2, [pc, #92]	@ (8002f50 <HAL_DMA_IRQHandler+0x430>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d004      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x3e2>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a15      	ldr	r2, [pc, #84]	@ (8002f54 <HAL_DMA_IRQHandler+0x434>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d12a      	bne.n	8002f58 <HAL_DMA_IRQHandler+0x438>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	bf14      	ite	ne
 8002f10:	2301      	movne	r3, #1
 8002f12:	2300      	moveq	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	e023      	b.n	8002f60 <HAL_DMA_IRQHandler+0x440>
 8002f18:	40020010 	.word	0x40020010
 8002f1c:	40020028 	.word	0x40020028
 8002f20:	40020040 	.word	0x40020040
 8002f24:	40020058 	.word	0x40020058
 8002f28:	40020070 	.word	0x40020070
 8002f2c:	40020088 	.word	0x40020088
 8002f30:	400200a0 	.word	0x400200a0
 8002f34:	400200b8 	.word	0x400200b8
 8002f38:	40020410 	.word	0x40020410
 8002f3c:	40020428 	.word	0x40020428
 8002f40:	40020440 	.word	0x40020440
 8002f44:	40020458 	.word	0x40020458
 8002f48:	40020470 	.word	0x40020470
 8002f4c:	40020488 	.word	0x40020488
 8002f50:	400204a0 	.word	0x400204a0
 8002f54:	400204b8 	.word	0x400204b8
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00d      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f68:	f003 031f 	and.w	r3, r3, #31
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	2210      	movs	r2, #16
 8002f8a:	409a      	lsls	r2, r3
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80a6 	beq.w	80030e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a85      	ldr	r2, [pc, #532]	@ (80031b0 <HAL_DMA_IRQHandler+0x690>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04a      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a83      	ldr	r2, [pc, #524]	@ (80031b4 <HAL_DMA_IRQHandler+0x694>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d045      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a82      	ldr	r2, [pc, #520]	@ (80031b8 <HAL_DMA_IRQHandler+0x698>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d040      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a80      	ldr	r2, [pc, #512]	@ (80031bc <HAL_DMA_IRQHandler+0x69c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d03b      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a7f      	ldr	r2, [pc, #508]	@ (80031c0 <HAL_DMA_IRQHandler+0x6a0>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d036      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a7d      	ldr	r2, [pc, #500]	@ (80031c4 <HAL_DMA_IRQHandler+0x6a4>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d031      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a7c      	ldr	r2, [pc, #496]	@ (80031c8 <HAL_DMA_IRQHandler+0x6a8>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d02c      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a7a      	ldr	r2, [pc, #488]	@ (80031cc <HAL_DMA_IRQHandler+0x6ac>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d027      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a79      	ldr	r2, [pc, #484]	@ (80031d0 <HAL_DMA_IRQHandler+0x6b0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d022      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a77      	ldr	r2, [pc, #476]	@ (80031d4 <HAL_DMA_IRQHandler+0x6b4>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01d      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a76      	ldr	r2, [pc, #472]	@ (80031d8 <HAL_DMA_IRQHandler+0x6b8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d018      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a74      	ldr	r2, [pc, #464]	@ (80031dc <HAL_DMA_IRQHandler+0x6bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d013      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a73      	ldr	r2, [pc, #460]	@ (80031e0 <HAL_DMA_IRQHandler+0x6c0>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d00e      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a71      	ldr	r2, [pc, #452]	@ (80031e4 <HAL_DMA_IRQHandler+0x6c4>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d009      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a70      	ldr	r2, [pc, #448]	@ (80031e8 <HAL_DMA_IRQHandler+0x6c8>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d004      	beq.n	8003036 <HAL_DMA_IRQHandler+0x516>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a6e      	ldr	r2, [pc, #440]	@ (80031ec <HAL_DMA_IRQHandler+0x6cc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d10a      	bne.n	800304c <HAL_DMA_IRQHandler+0x52c>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e009      	b.n	8003060 <HAL_DMA_IRQHandler+0x540>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	bf14      	ite	ne
 800305a:	2301      	movne	r3, #1
 800305c:	2300      	moveq	r3, #0
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03e      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003068:	f003 031f 	and.w	r3, r3, #31
 800306c:	2210      	movs	r2, #16
 800306e:	409a      	lsls	r2, r3
 8003070:	6a3b      	ldr	r3, [r7, #32]
 8003072:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d018      	beq.n	80030b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d108      	bne.n	80030a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	2b00      	cmp	r3, #0
 8003096:	d024      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	4798      	blx	r3
 80030a0:	e01f      	b.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d01b      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4798      	blx	r3
 80030b2:	e016      	b.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d107      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0208 	bic.w	r2, r2, #8
 80030d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	f003 031f 	and.w	r3, r3, #31
 80030ea:	2220      	movs	r2, #32
 80030ec:	409a      	lsls	r2, r3
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	f000 8110 	beq.w	8003318 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a2c      	ldr	r2, [pc, #176]	@ (80031b0 <HAL_DMA_IRQHandler+0x690>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d04a      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a2b      	ldr	r2, [pc, #172]	@ (80031b4 <HAL_DMA_IRQHandler+0x694>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d045      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a29      	ldr	r2, [pc, #164]	@ (80031b8 <HAL_DMA_IRQHandler+0x698>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d040      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a28      	ldr	r2, [pc, #160]	@ (80031bc <HAL_DMA_IRQHandler+0x69c>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d03b      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a26      	ldr	r2, [pc, #152]	@ (80031c0 <HAL_DMA_IRQHandler+0x6a0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d036      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a25      	ldr	r2, [pc, #148]	@ (80031c4 <HAL_DMA_IRQHandler+0x6a4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d031      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	@ (80031c8 <HAL_DMA_IRQHandler+0x6a8>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d02c      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a22      	ldr	r2, [pc, #136]	@ (80031cc <HAL_DMA_IRQHandler+0x6ac>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d027      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a20      	ldr	r2, [pc, #128]	@ (80031d0 <HAL_DMA_IRQHandler+0x6b0>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d022      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1f      	ldr	r2, [pc, #124]	@ (80031d4 <HAL_DMA_IRQHandler+0x6b4>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d01d      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	@ (80031d8 <HAL_DMA_IRQHandler+0x6b8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d018      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1c      	ldr	r2, [pc, #112]	@ (80031dc <HAL_DMA_IRQHandler+0x6bc>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d013      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1a      	ldr	r2, [pc, #104]	@ (80031e0 <HAL_DMA_IRQHandler+0x6c0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d00e      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a19      	ldr	r2, [pc, #100]	@ (80031e4 <HAL_DMA_IRQHandler+0x6c4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d009      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	@ (80031e8 <HAL_DMA_IRQHandler+0x6c8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d004      	beq.n	8003198 <HAL_DMA_IRQHandler+0x678>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a16      	ldr	r2, [pc, #88]	@ (80031ec <HAL_DMA_IRQHandler+0x6cc>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d12b      	bne.n	80031f0 <HAL_DMA_IRQHandler+0x6d0>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0310 	and.w	r3, r3, #16
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	bf14      	ite	ne
 80031a6:	2301      	movne	r3, #1
 80031a8:	2300      	moveq	r3, #0
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	e02a      	b.n	8003204 <HAL_DMA_IRQHandler+0x6e4>
 80031ae:	bf00      	nop
 80031b0:	40020010 	.word	0x40020010
 80031b4:	40020028 	.word	0x40020028
 80031b8:	40020040 	.word	0x40020040
 80031bc:	40020058 	.word	0x40020058
 80031c0:	40020070 	.word	0x40020070
 80031c4:	40020088 	.word	0x40020088
 80031c8:	400200a0 	.word	0x400200a0
 80031cc:	400200b8 	.word	0x400200b8
 80031d0:	40020410 	.word	0x40020410
 80031d4:	40020428 	.word	0x40020428
 80031d8:	40020440 	.word	0x40020440
 80031dc:	40020458 	.word	0x40020458
 80031e0:	40020470 	.word	0x40020470
 80031e4:	40020488 	.word	0x40020488
 80031e8:	400204a0 	.word	0x400204a0
 80031ec:	400204b8 	.word	0x400204b8
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8087 	beq.w	8003318 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320e:	f003 031f 	and.w	r3, r3, #31
 8003212:	2220      	movs	r2, #32
 8003214:	409a      	lsls	r2, r3
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b04      	cmp	r3, #4
 8003224:	d139      	bne.n	800329a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0216 	bic.w	r2, r2, #22
 8003234:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	695a      	ldr	r2, [r3, #20]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003244:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	2b00      	cmp	r3, #0
 800324c:	d103      	bne.n	8003256 <HAL_DMA_IRQHandler+0x736>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003252:	2b00      	cmp	r3, #0
 8003254:	d007      	beq.n	8003266 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0208 	bic.w	r2, r2, #8
 8003264:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	f003 031f 	and.w	r3, r3, #31
 800326e:	223f      	movs	r2, #63	@ 0x3f
 8003270:	409a      	lsls	r2, r3
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800328a:	2b00      	cmp	r3, #0
 800328c:	f000 834a 	beq.w	8003924 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	4798      	blx	r3
          }
          return;
 8003298:	e344      	b.n	8003924 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d018      	beq.n	80032da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d108      	bne.n	80032c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d02c      	beq.n	8003318 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	4798      	blx	r3
 80032c6:	e027      	b.n	8003318 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d023      	beq.n	8003318 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	4798      	blx	r3
 80032d8:	e01e      	b.n	8003318 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10f      	bne.n	8003308 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f022 0210 	bic.w	r2, r2, #16
 80032f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 8306 	beq.w	800392e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8088 	beq.w	8003440 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2204      	movs	r2, #4
 8003334:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7a      	ldr	r2, [pc, #488]	@ (8003528 <HAL_DMA_IRQHandler+0xa08>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d04a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a79      	ldr	r2, [pc, #484]	@ (800352c <HAL_DMA_IRQHandler+0xa0c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d045      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a77      	ldr	r2, [pc, #476]	@ (8003530 <HAL_DMA_IRQHandler+0xa10>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d040      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a76      	ldr	r2, [pc, #472]	@ (8003534 <HAL_DMA_IRQHandler+0xa14>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d03b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a74      	ldr	r2, [pc, #464]	@ (8003538 <HAL_DMA_IRQHandler+0xa18>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d036      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a73      	ldr	r2, [pc, #460]	@ (800353c <HAL_DMA_IRQHandler+0xa1c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d031      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a71      	ldr	r2, [pc, #452]	@ (8003540 <HAL_DMA_IRQHandler+0xa20>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02c      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a70      	ldr	r2, [pc, #448]	@ (8003544 <HAL_DMA_IRQHandler+0xa24>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d027      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6e      	ldr	r2, [pc, #440]	@ (8003548 <HAL_DMA_IRQHandler+0xa28>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6d      	ldr	r2, [pc, #436]	@ (800354c <HAL_DMA_IRQHandler+0xa2c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01d      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a6b      	ldr	r2, [pc, #428]	@ (8003550 <HAL_DMA_IRQHandler+0xa30>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a6a      	ldr	r2, [pc, #424]	@ (8003554 <HAL_DMA_IRQHandler+0xa34>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a68      	ldr	r2, [pc, #416]	@ (8003558 <HAL_DMA_IRQHandler+0xa38>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a67      	ldr	r2, [pc, #412]	@ (800355c <HAL_DMA_IRQHandler+0xa3c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a65      	ldr	r2, [pc, #404]	@ (8003560 <HAL_DMA_IRQHandler+0xa40>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x8b8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a64      	ldr	r2, [pc, #400]	@ (8003564 <HAL_DMA_IRQHandler+0xa44>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d108      	bne.n	80033ea <HAL_DMA_IRQHandler+0x8ca>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f022 0201 	bic.w	r2, r2, #1
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	e007      	b.n	80033fa <HAL_DMA_IRQHandler+0x8da>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0201 	bic.w	r2, r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	3301      	adds	r3, #1
 80033fe:	60fb      	str	r3, [r7, #12]
 8003400:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003402:	429a      	cmp	r2, r3
 8003404:	d307      	bcc.n	8003416 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0301 	and.w	r3, r3, #1
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1f2      	bne.n	80033fa <HAL_DMA_IRQHandler+0x8da>
 8003414:	e000      	b.n	8003418 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003416:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d004      	beq.n	8003430 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2203      	movs	r2, #3
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800342e:	e003      	b.n	8003438 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8272 	beq.w	800392e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	4798      	blx	r3
 8003452:	e26c      	b.n	800392e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a43      	ldr	r2, [pc, #268]	@ (8003568 <HAL_DMA_IRQHandler+0xa48>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d022      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a42      	ldr	r2, [pc, #264]	@ (800356c <HAL_DMA_IRQHandler+0xa4c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d01d      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a40      	ldr	r2, [pc, #256]	@ (8003570 <HAL_DMA_IRQHandler+0xa50>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d018      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a3f      	ldr	r2, [pc, #252]	@ (8003574 <HAL_DMA_IRQHandler+0xa54>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d013      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a3d      	ldr	r2, [pc, #244]	@ (8003578 <HAL_DMA_IRQHandler+0xa58>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d00e      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_DMA_IRQHandler+0xa5c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d009      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a3a      	ldr	r2, [pc, #232]	@ (8003580 <HAL_DMA_IRQHandler+0xa60>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d004      	beq.n	80034a4 <HAL_DMA_IRQHandler+0x984>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a39      	ldr	r2, [pc, #228]	@ (8003584 <HAL_DMA_IRQHandler+0xa64>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d101      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x988>
 80034a4:	2301      	movs	r3, #1
 80034a6:	e000      	b.n	80034aa <HAL_DMA_IRQHandler+0x98a>
 80034a8:	2300      	movs	r3, #0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 823f 	beq.w	800392e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034bc:	f003 031f 	and.w	r3, r3, #31
 80034c0:	2204      	movs	r2, #4
 80034c2:	409a      	lsls	r2, r3
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	4013      	ands	r3, r2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80cd 	beq.w	8003668 <HAL_DMA_IRQHandler+0xb48>
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 80c7 	beq.w	8003668 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	2204      	movs	r2, #4
 80034e4:	409a      	lsls	r2, r3
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d049      	beq.n	8003588 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d109      	bne.n	8003512 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8210 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003510:	e20a      	b.n	8003928 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	f000 8206 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003520:	6878      	ldr	r0, [r7, #4]
 8003522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003524:	e200      	b.n	8003928 <HAL_DMA_IRQHandler+0xe08>
 8003526:	bf00      	nop
 8003528:	40020010 	.word	0x40020010
 800352c:	40020028 	.word	0x40020028
 8003530:	40020040 	.word	0x40020040
 8003534:	40020058 	.word	0x40020058
 8003538:	40020070 	.word	0x40020070
 800353c:	40020088 	.word	0x40020088
 8003540:	400200a0 	.word	0x400200a0
 8003544:	400200b8 	.word	0x400200b8
 8003548:	40020410 	.word	0x40020410
 800354c:	40020428 	.word	0x40020428
 8003550:	40020440 	.word	0x40020440
 8003554:	40020458 	.word	0x40020458
 8003558:	40020470 	.word	0x40020470
 800355c:	40020488 	.word	0x40020488
 8003560:	400204a0 	.word	0x400204a0
 8003564:	400204b8 	.word	0x400204b8
 8003568:	58025408 	.word	0x58025408
 800356c:	5802541c 	.word	0x5802541c
 8003570:	58025430 	.word	0x58025430
 8003574:	58025444 	.word	0x58025444
 8003578:	58025458 	.word	0x58025458
 800357c:	5802546c 	.word	0x5802546c
 8003580:	58025480 	.word	0x58025480
 8003584:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d160      	bne.n	8003654 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a7f      	ldr	r2, [pc, #508]	@ (8003794 <HAL_DMA_IRQHandler+0xc74>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d04a      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a7d      	ldr	r2, [pc, #500]	@ (8003798 <HAL_DMA_IRQHandler+0xc78>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d045      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a7c      	ldr	r2, [pc, #496]	@ (800379c <HAL_DMA_IRQHandler+0xc7c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d040      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a7a      	ldr	r2, [pc, #488]	@ (80037a0 <HAL_DMA_IRQHandler+0xc80>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d03b      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a79      	ldr	r2, [pc, #484]	@ (80037a4 <HAL_DMA_IRQHandler+0xc84>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d036      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a77      	ldr	r2, [pc, #476]	@ (80037a8 <HAL_DMA_IRQHandler+0xc88>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d031      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a76      	ldr	r2, [pc, #472]	@ (80037ac <HAL_DMA_IRQHandler+0xc8c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d02c      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a74      	ldr	r2, [pc, #464]	@ (80037b0 <HAL_DMA_IRQHandler+0xc90>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d027      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a73      	ldr	r2, [pc, #460]	@ (80037b4 <HAL_DMA_IRQHandler+0xc94>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a71      	ldr	r2, [pc, #452]	@ (80037b8 <HAL_DMA_IRQHandler+0xc98>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d01d      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a70      	ldr	r2, [pc, #448]	@ (80037bc <HAL_DMA_IRQHandler+0xc9c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a6e      	ldr	r2, [pc, #440]	@ (80037c0 <HAL_DMA_IRQHandler+0xca0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a6d      	ldr	r2, [pc, #436]	@ (80037c4 <HAL_DMA_IRQHandler+0xca4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a6b      	ldr	r2, [pc, #428]	@ (80037c8 <HAL_DMA_IRQHandler+0xca8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6a      	ldr	r2, [pc, #424]	@ (80037cc <HAL_DMA_IRQHandler+0xcac>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_DMA_IRQHandler+0xb12>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a68      	ldr	r2, [pc, #416]	@ (80037d0 <HAL_DMA_IRQHandler+0xcb0>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <HAL_DMA_IRQHandler+0xb24>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0208 	bic.w	r2, r2, #8
 8003640:	601a      	str	r2, [r3, #0]
 8003642:	e007      	b.n	8003654 <HAL_DMA_IRQHandler+0xb34>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0204 	bic.w	r2, r2, #4
 8003652:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	2b00      	cmp	r3, #0
 800365a:	f000 8165 	beq.w	8003928 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003666:	e15f      	b.n	8003928 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2202      	movs	r2, #2
 8003672:	409a      	lsls	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80c5 	beq.w	8003808 <HAL_DMA_IRQHandler+0xce8>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80bf 	beq.w	8003808 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2202      	movs	r2, #2
 8003694:	409a      	lsls	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d018      	beq.n	80036d6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 813a 	beq.w	800392c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c0:	e134      	b.n	800392c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8130 	beq.w	800392c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	e12a      	b.n	800392c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f003 0320 	and.w	r3, r3, #32
 80036dc:	2b00      	cmp	r3, #0
 80036de:	f040 8089 	bne.w	80037f4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a2b      	ldr	r2, [pc, #172]	@ (8003794 <HAL_DMA_IRQHandler+0xc74>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d04a      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a29      	ldr	r2, [pc, #164]	@ (8003798 <HAL_DMA_IRQHandler+0xc78>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d045      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a28      	ldr	r2, [pc, #160]	@ (800379c <HAL_DMA_IRQHandler+0xc7c>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d040      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a26      	ldr	r2, [pc, #152]	@ (80037a0 <HAL_DMA_IRQHandler+0xc80>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d03b      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a25      	ldr	r2, [pc, #148]	@ (80037a4 <HAL_DMA_IRQHandler+0xc84>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d036      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a23      	ldr	r2, [pc, #140]	@ (80037a8 <HAL_DMA_IRQHandler+0xc88>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d031      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a22      	ldr	r2, [pc, #136]	@ (80037ac <HAL_DMA_IRQHandler+0xc8c>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d02c      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <HAL_DMA_IRQHandler+0xc90>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d027      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a1f      	ldr	r2, [pc, #124]	@ (80037b4 <HAL_DMA_IRQHandler+0xc94>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d022      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a1d      	ldr	r2, [pc, #116]	@ (80037b8 <HAL_DMA_IRQHandler+0xc98>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d01d      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a1c      	ldr	r2, [pc, #112]	@ (80037bc <HAL_DMA_IRQHandler+0xc9c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d018      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a1a      	ldr	r2, [pc, #104]	@ (80037c0 <HAL_DMA_IRQHandler+0xca0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d013      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a19      	ldr	r2, [pc, #100]	@ (80037c4 <HAL_DMA_IRQHandler+0xca4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a17      	ldr	r2, [pc, #92]	@ (80037c8 <HAL_DMA_IRQHandler+0xca8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d009      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a16      	ldr	r2, [pc, #88]	@ (80037cc <HAL_DMA_IRQHandler+0xcac>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d004      	beq.n	8003782 <HAL_DMA_IRQHandler+0xc62>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a14      	ldr	r2, [pc, #80]	@ (80037d0 <HAL_DMA_IRQHandler+0xcb0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d128      	bne.n	80037d4 <HAL_DMA_IRQHandler+0xcb4>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0214 	bic.w	r2, r2, #20
 8003790:	601a      	str	r2, [r3, #0]
 8003792:	e027      	b.n	80037e4 <HAL_DMA_IRQHandler+0xcc4>
 8003794:	40020010 	.word	0x40020010
 8003798:	40020028 	.word	0x40020028
 800379c:	40020040 	.word	0x40020040
 80037a0:	40020058 	.word	0x40020058
 80037a4:	40020070 	.word	0x40020070
 80037a8:	40020088 	.word	0x40020088
 80037ac:	400200a0 	.word	0x400200a0
 80037b0:	400200b8 	.word	0x400200b8
 80037b4:	40020410 	.word	0x40020410
 80037b8:	40020428 	.word	0x40020428
 80037bc:	40020440 	.word	0x40020440
 80037c0:	40020458 	.word	0x40020458
 80037c4:	40020470 	.word	0x40020470
 80037c8:	40020488 	.word	0x40020488
 80037cc:	400204a0 	.word	0x400204a0
 80037d0:	400204b8 	.word	0x400204b8
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 020a 	bic.w	r2, r2, #10
 80037e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	f000 8097 	beq.w	800392c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003806:	e091      	b.n	800392c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2208      	movs	r2, #8
 8003812:	409a      	lsls	r2, r3
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	4013      	ands	r3, r2
 8003818:	2b00      	cmp	r3, #0
 800381a:	f000 8088 	beq.w	800392e <HAL_DMA_IRQHandler+0xe0e>
 800381e:	693b      	ldr	r3, [r7, #16]
 8003820:	f003 0308 	and.w	r3, r3, #8
 8003824:	2b00      	cmp	r3, #0
 8003826:	f000 8082 	beq.w	800392e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a41      	ldr	r2, [pc, #260]	@ (8003934 <HAL_DMA_IRQHandler+0xe14>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d04a      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a3f      	ldr	r2, [pc, #252]	@ (8003938 <HAL_DMA_IRQHandler+0xe18>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d045      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a3e      	ldr	r2, [pc, #248]	@ (800393c <HAL_DMA_IRQHandler+0xe1c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d040      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a3c      	ldr	r2, [pc, #240]	@ (8003940 <HAL_DMA_IRQHandler+0xe20>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d03b      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a3b      	ldr	r2, [pc, #236]	@ (8003944 <HAL_DMA_IRQHandler+0xe24>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d036      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a39      	ldr	r2, [pc, #228]	@ (8003948 <HAL_DMA_IRQHandler+0xe28>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d031      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a38      	ldr	r2, [pc, #224]	@ (800394c <HAL_DMA_IRQHandler+0xe2c>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d02c      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a36      	ldr	r2, [pc, #216]	@ (8003950 <HAL_DMA_IRQHandler+0xe30>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d027      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a35      	ldr	r2, [pc, #212]	@ (8003954 <HAL_DMA_IRQHandler+0xe34>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d022      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a33      	ldr	r2, [pc, #204]	@ (8003958 <HAL_DMA_IRQHandler+0xe38>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d01d      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a32      	ldr	r2, [pc, #200]	@ (800395c <HAL_DMA_IRQHandler+0xe3c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d018      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a30      	ldr	r2, [pc, #192]	@ (8003960 <HAL_DMA_IRQHandler+0xe40>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d013      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003964 <HAL_DMA_IRQHandler+0xe44>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d00e      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003968 <HAL_DMA_IRQHandler+0xe48>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d009      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <HAL_DMA_IRQHandler+0xe4c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d004      	beq.n	80038ca <HAL_DMA_IRQHandler+0xdaa>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003970 <HAL_DMA_IRQHandler+0xe50>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d108      	bne.n	80038dc <HAL_DMA_IRQHandler+0xdbc>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 021c 	bic.w	r2, r2, #28
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	e007      	b.n	80038ec <HAL_DMA_IRQHandler+0xdcc>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020e 	bic.w	r2, r2, #14
 80038ea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f0:	f003 031f 	and.w	r3, r3, #31
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2201      	movs	r2, #1
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391e:	6878      	ldr	r0, [r7, #4]
 8003920:	4798      	blx	r3
 8003922:	e004      	b.n	800392e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003924:	bf00      	nop
 8003926:	e002      	b.n	800392e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003928:	bf00      	nop
 800392a:	e000      	b.n	800392e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800392c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800392e:	3728      	adds	r7, #40	@ 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40020010 	.word	0x40020010
 8003938:	40020028 	.word	0x40020028
 800393c:	40020040 	.word	0x40020040
 8003940:	40020058 	.word	0x40020058
 8003944:	40020070 	.word	0x40020070
 8003948:	40020088 	.word	0x40020088
 800394c:	400200a0 	.word	0x400200a0
 8003950:	400200b8 	.word	0x400200b8
 8003954:	40020410 	.word	0x40020410
 8003958:	40020428 	.word	0x40020428
 800395c:	40020440 	.word	0x40020440
 8003960:	40020458 	.word	0x40020458
 8003964:	40020470 	.word	0x40020470
 8003968:	40020488 	.word	0x40020488
 800396c:	400204a0 	.word	0x400204a0
 8003970:	400204b8 	.word	0x400204b8

08003974 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003974:	b480      	push	{r7}
 8003976:	b087      	sub	sp, #28
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
 8003980:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003986:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a7f      	ldr	r2, [pc, #508]	@ (8003b90 <DMA_SetConfig+0x21c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d072      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a7d      	ldr	r2, [pc, #500]	@ (8003b94 <DMA_SetConfig+0x220>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d06d      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a7c      	ldr	r2, [pc, #496]	@ (8003b98 <DMA_SetConfig+0x224>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d068      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7a      	ldr	r2, [pc, #488]	@ (8003b9c <DMA_SetConfig+0x228>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d063      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a79      	ldr	r2, [pc, #484]	@ (8003ba0 <DMA_SetConfig+0x22c>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d05e      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a77      	ldr	r2, [pc, #476]	@ (8003ba4 <DMA_SetConfig+0x230>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d059      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a76      	ldr	r2, [pc, #472]	@ (8003ba8 <DMA_SetConfig+0x234>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d054      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a74      	ldr	r2, [pc, #464]	@ (8003bac <DMA_SetConfig+0x238>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d04f      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a73      	ldr	r2, [pc, #460]	@ (8003bb0 <DMA_SetConfig+0x23c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d04a      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a71      	ldr	r2, [pc, #452]	@ (8003bb4 <DMA_SetConfig+0x240>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d045      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a70      	ldr	r2, [pc, #448]	@ (8003bb8 <DMA_SetConfig+0x244>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d040      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a6e      	ldr	r2, [pc, #440]	@ (8003bbc <DMA_SetConfig+0x248>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d03b      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003bc0 <DMA_SetConfig+0x24c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d036      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a6b      	ldr	r2, [pc, #428]	@ (8003bc4 <DMA_SetConfig+0x250>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d031      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003bc8 <DMA_SetConfig+0x254>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d02c      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a68      	ldr	r2, [pc, #416]	@ (8003bcc <DMA_SetConfig+0x258>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d027      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a67      	ldr	r2, [pc, #412]	@ (8003bd0 <DMA_SetConfig+0x25c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d022      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a65      	ldr	r2, [pc, #404]	@ (8003bd4 <DMA_SetConfig+0x260>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01d      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a64      	ldr	r2, [pc, #400]	@ (8003bd8 <DMA_SetConfig+0x264>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d018      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a62      	ldr	r2, [pc, #392]	@ (8003bdc <DMA_SetConfig+0x268>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d013      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a61      	ldr	r2, [pc, #388]	@ (8003be0 <DMA_SetConfig+0x26c>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00e      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a5f      	ldr	r2, [pc, #380]	@ (8003be4 <DMA_SetConfig+0x270>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d009      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003be8 <DMA_SetConfig+0x274>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d004      	beq.n	8003a7e <DMA_SetConfig+0x10a>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a5c      	ldr	r2, [pc, #368]	@ (8003bec <DMA_SetConfig+0x278>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d101      	bne.n	8003a82 <DMA_SetConfig+0x10e>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e000      	b.n	8003a84 <DMA_SetConfig+0x110>
 8003a82:	2300      	movs	r3, #0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00d      	beq.n	8003aa4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d004      	beq.n	8003aa4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003aa2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a39      	ldr	r2, [pc, #228]	@ (8003b90 <DMA_SetConfig+0x21c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d04a      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a38      	ldr	r2, [pc, #224]	@ (8003b94 <DMA_SetConfig+0x220>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d045      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a36      	ldr	r2, [pc, #216]	@ (8003b98 <DMA_SetConfig+0x224>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d040      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a35      	ldr	r2, [pc, #212]	@ (8003b9c <DMA_SetConfig+0x228>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d03b      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a33      	ldr	r2, [pc, #204]	@ (8003ba0 <DMA_SetConfig+0x22c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d036      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a32      	ldr	r2, [pc, #200]	@ (8003ba4 <DMA_SetConfig+0x230>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d031      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a30      	ldr	r2, [pc, #192]	@ (8003ba8 <DMA_SetConfig+0x234>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d02c      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a2f      	ldr	r2, [pc, #188]	@ (8003bac <DMA_SetConfig+0x238>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d027      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a2d      	ldr	r2, [pc, #180]	@ (8003bb0 <DMA_SetConfig+0x23c>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d022      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a2c      	ldr	r2, [pc, #176]	@ (8003bb4 <DMA_SetConfig+0x240>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d01d      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb8 <DMA_SetConfig+0x244>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d018      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a29      	ldr	r2, [pc, #164]	@ (8003bbc <DMA_SetConfig+0x248>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d013      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a27      	ldr	r2, [pc, #156]	@ (8003bc0 <DMA_SetConfig+0x24c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d00e      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a26      	ldr	r2, [pc, #152]	@ (8003bc4 <DMA_SetConfig+0x250>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d009      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a24      	ldr	r2, [pc, #144]	@ (8003bc8 <DMA_SetConfig+0x254>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d004      	beq.n	8003b44 <DMA_SetConfig+0x1d0>
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a23      	ldr	r2, [pc, #140]	@ (8003bcc <DMA_SetConfig+0x258>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <DMA_SetConfig+0x1d4>
 8003b44:	2301      	movs	r3, #1
 8003b46:	e000      	b.n	8003b4a <DMA_SetConfig+0x1d6>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d059      	beq.n	8003c02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	223f      	movs	r2, #63	@ 0x3f
 8003b58:	409a      	lsls	r2, r3
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	683a      	ldr	r2, [r7, #0]
 8003b74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	2b40      	cmp	r3, #64	@ 0x40
 8003b7c:	d138      	bne.n	8003bf0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68ba      	ldr	r2, [r7, #8]
 8003b8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b8e:	e086      	b.n	8003c9e <DMA_SetConfig+0x32a>
 8003b90:	40020010 	.word	0x40020010
 8003b94:	40020028 	.word	0x40020028
 8003b98:	40020040 	.word	0x40020040
 8003b9c:	40020058 	.word	0x40020058
 8003ba0:	40020070 	.word	0x40020070
 8003ba4:	40020088 	.word	0x40020088
 8003ba8:	400200a0 	.word	0x400200a0
 8003bac:	400200b8 	.word	0x400200b8
 8003bb0:	40020410 	.word	0x40020410
 8003bb4:	40020428 	.word	0x40020428
 8003bb8:	40020440 	.word	0x40020440
 8003bbc:	40020458 	.word	0x40020458
 8003bc0:	40020470 	.word	0x40020470
 8003bc4:	40020488 	.word	0x40020488
 8003bc8:	400204a0 	.word	0x400204a0
 8003bcc:	400204b8 	.word	0x400204b8
 8003bd0:	58025408 	.word	0x58025408
 8003bd4:	5802541c 	.word	0x5802541c
 8003bd8:	58025430 	.word	0x58025430
 8003bdc:	58025444 	.word	0x58025444
 8003be0:	58025458 	.word	0x58025458
 8003be4:	5802546c 	.word	0x5802546c
 8003be8:	58025480 	.word	0x58025480
 8003bec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
}
 8003c00:	e04d      	b.n	8003c9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a29      	ldr	r2, [pc, #164]	@ (8003cac <DMA_SetConfig+0x338>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d022      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a27      	ldr	r2, [pc, #156]	@ (8003cb0 <DMA_SetConfig+0x33c>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d01d      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a26      	ldr	r2, [pc, #152]	@ (8003cb4 <DMA_SetConfig+0x340>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d018      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a24      	ldr	r2, [pc, #144]	@ (8003cb8 <DMA_SetConfig+0x344>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a23      	ldr	r2, [pc, #140]	@ (8003cbc <DMA_SetConfig+0x348>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00e      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a21      	ldr	r2, [pc, #132]	@ (8003cc0 <DMA_SetConfig+0x34c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d009      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a20      	ldr	r2, [pc, #128]	@ (8003cc4 <DMA_SetConfig+0x350>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <DMA_SetConfig+0x2de>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cc8 <DMA_SetConfig+0x354>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d101      	bne.n	8003c56 <DMA_SetConfig+0x2e2>
 8003c52:	2301      	movs	r3, #1
 8003c54:	e000      	b.n	8003c58 <DMA_SetConfig+0x2e4>
 8003c56:	2300      	movs	r3, #0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d020      	beq.n	8003c9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c60:	f003 031f 	and.w	r3, r3, #31
 8003c64:	2201      	movs	r2, #1
 8003c66:	409a      	lsls	r2, r3
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b40      	cmp	r3, #64	@ 0x40
 8003c7a:	d108      	bne.n	8003c8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	60da      	str	r2, [r3, #12]
}
 8003c8c:	e007      	b.n	8003c9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68ba      	ldr	r2, [r7, #8]
 8003c94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]
}
 8003c9e:	bf00      	nop
 8003ca0:	371c      	adds	r7, #28
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	58025408 	.word	0x58025408
 8003cb0:	5802541c 	.word	0x5802541c
 8003cb4:	58025430 	.word	0x58025430
 8003cb8:	58025444 	.word	0x58025444
 8003cbc:	58025458 	.word	0x58025458
 8003cc0:	5802546c 	.word	0x5802546c
 8003cc4:	58025480 	.word	0x58025480
 8003cc8:	58025494 	.word	0x58025494

08003ccc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a42      	ldr	r2, [pc, #264]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x118>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04a      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a41      	ldr	r2, [pc, #260]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d045      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a3f      	ldr	r2, [pc, #252]	@ (8003dec <DMA_CalcBaseAndBitshift+0x120>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d040      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3e      	ldr	r2, [pc, #248]	@ (8003df0 <DMA_CalcBaseAndBitshift+0x124>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d03b      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a3c      	ldr	r2, [pc, #240]	@ (8003df4 <DMA_CalcBaseAndBitshift+0x128>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d036      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a3b      	ldr	r2, [pc, #236]	@ (8003df8 <DMA_CalcBaseAndBitshift+0x12c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d031      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a39      	ldr	r2, [pc, #228]	@ (8003dfc <DMA_CalcBaseAndBitshift+0x130>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d02c      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a38      	ldr	r2, [pc, #224]	@ (8003e00 <DMA_CalcBaseAndBitshift+0x134>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d027      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a36      	ldr	r2, [pc, #216]	@ (8003e04 <DMA_CalcBaseAndBitshift+0x138>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d022      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <DMA_CalcBaseAndBitshift+0x13c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d01d      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a33      	ldr	r2, [pc, #204]	@ (8003e0c <DMA_CalcBaseAndBitshift+0x140>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d018      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a32      	ldr	r2, [pc, #200]	@ (8003e10 <DMA_CalcBaseAndBitshift+0x144>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d013      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a30      	ldr	r2, [pc, #192]	@ (8003e14 <DMA_CalcBaseAndBitshift+0x148>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00e      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e18 <DMA_CalcBaseAndBitshift+0x14c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d009      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a2d      	ldr	r2, [pc, #180]	@ (8003e1c <DMA_CalcBaseAndBitshift+0x150>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d004      	beq.n	8003d74 <DMA_CalcBaseAndBitshift+0xa8>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a2c      	ldr	r2, [pc, #176]	@ (8003e20 <DMA_CalcBaseAndBitshift+0x154>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <DMA_CalcBaseAndBitshift+0xac>
 8003d74:	2301      	movs	r3, #1
 8003d76:	e000      	b.n	8003d7a <DMA_CalcBaseAndBitshift+0xae>
 8003d78:	2300      	movs	r3, #0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d024      	beq.n	8003dc8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	3b10      	subs	r3, #16
 8003d86:	4a27      	ldr	r2, [pc, #156]	@ (8003e24 <DMA_CalcBaseAndBitshift+0x158>)
 8003d88:	fba2 2303 	umull	r2, r3, r2, r3
 8003d8c:	091b      	lsrs	r3, r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <DMA_CalcBaseAndBitshift+0x15c>)
 8003d98:	5cd3      	ldrb	r3, [r2, r3]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2b03      	cmp	r3, #3
 8003da4:	d908      	bls.n	8003db8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b1f      	ldr	r3, [pc, #124]	@ (8003e2c <DMA_CalcBaseAndBitshift+0x160>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	1d1a      	adds	r2, r3, #4
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003db6:	e00d      	b.n	8003dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003e2c <DMA_CalcBaseAndBitshift+0x160>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003dc6:	e005      	b.n	8003dd4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
 8003e24:	aaaaaaab 	.word	0xaaaaaaab
 8003e28:	0800924c 	.word	0x0800924c
 8003e2c:	fffffc00 	.word	0xfffffc00

08003e30 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b085      	sub	sp, #20
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d120      	bne.n	8003e86 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d858      	bhi.n	8003efe <DMA_CheckFifoParam+0xce>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <DMA_CheckFifoParam+0x24>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e77 	.word	0x08003e77
 8003e5c:	08003e65 	.word	0x08003e65
 8003e60:	08003eff 	.word	0x08003eff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d048      	beq.n	8003f02 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e74:	e045      	b.n	8003f02 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e7e:	d142      	bne.n	8003f06 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e84:	e03f      	b.n	8003f06 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8e:	d123      	bne.n	8003ed8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e94:	2b03      	cmp	r3, #3
 8003e96:	d838      	bhi.n	8003f0a <DMA_CheckFifoParam+0xda>
 8003e98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea0 <DMA_CheckFifoParam+0x70>)
 8003e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9e:	bf00      	nop
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003eb7 	.word	0x08003eb7
 8003ea8:	08003eb1 	.word	0x08003eb1
 8003eac:	08003ec9 	.word	0x08003ec9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
        break;
 8003eb4:	e030      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d025      	beq.n	8003f0e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ec6:	e022      	b.n	8003f0e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ed0:	d11f      	bne.n	8003f12 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003ed6:	e01c      	b.n	8003f12 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d902      	bls.n	8003ee6 <DMA_CheckFifoParam+0xb6>
 8003ee0:	2b03      	cmp	r3, #3
 8003ee2:	d003      	beq.n	8003eec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003ee4:	e018      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
        break;
 8003eea:	e015      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ef0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00e      	beq.n	8003f16 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	73fb      	strb	r3, [r7, #15]
    break;
 8003efc:	e00b      	b.n	8003f16 <DMA_CheckFifoParam+0xe6>
        break;
 8003efe:	bf00      	nop
 8003f00:	e00a      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        break;
 8003f02:	bf00      	nop
 8003f04:	e008      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        break;
 8003f06:	bf00      	nop
 8003f08:	e006      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        break;
 8003f0a:	bf00      	nop
 8003f0c:	e004      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        break;
 8003f0e:	bf00      	nop
 8003f10:	e002      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
        break;
 8003f12:	bf00      	nop
 8003f14:	e000      	b.n	8003f18 <DMA_CheckFifoParam+0xe8>
    break;
 8003f16:	bf00      	nop
    }
  }

  return status;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3714      	adds	r7, #20
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop

08003f28 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a38      	ldr	r2, [pc, #224]	@ (800401c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d022      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a36      	ldr	r2, [pc, #216]	@ (8004020 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d01d      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a35      	ldr	r2, [pc, #212]	@ (8004024 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d018      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a33      	ldr	r2, [pc, #204]	@ (8004028 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a32      	ldr	r2, [pc, #200]	@ (800402c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00e      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a30      	ldr	r2, [pc, #192]	@ (8004030 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d009      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a2f      	ldr	r2, [pc, #188]	@ (8004034 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a2d      	ldr	r2, [pc, #180]	@ (8004038 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d101      	bne.n	8003f8a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01a      	beq.n	8003fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	3b08      	subs	r3, #8
 8003f98:	4a28      	ldr	r2, [pc, #160]	@ (800403c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	091b      	lsrs	r3, r3, #4
 8003fa0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	4b26      	ldr	r3, [pc, #152]	@ (8004040 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	461a      	mov	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a24      	ldr	r2, [pc, #144]	@ (8004044 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003fb4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 031f 	and.w	r3, r3, #31
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	409a      	lsls	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003fc4:	e024      	b.n	8004010 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	3b10      	subs	r3, #16
 8003fce:	4a1e      	ldr	r2, [pc, #120]	@ (8004048 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd4:	091b      	lsrs	r3, r3, #4
 8003fd6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4a1c      	ldr	r2, [pc, #112]	@ (800404c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d806      	bhi.n	8003fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	4a1b      	ldr	r2, [pc, #108]	@ (8004050 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d902      	bls.n	8003fee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3308      	adds	r3, #8
 8003fec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	4b18      	ldr	r3, [pc, #96]	@ (8004054 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ff2:	4413      	add	r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a16      	ldr	r2, [pc, #88]	@ (8004058 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004000:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 031f 	and.w	r3, r3, #31
 8004008:	2201      	movs	r2, #1
 800400a:	409a      	lsls	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004010:	bf00      	nop
 8004012:	3714      	adds	r7, #20
 8004014:	46bd      	mov	sp, r7
 8004016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401a:	4770      	bx	lr
 800401c:	58025408 	.word	0x58025408
 8004020:	5802541c 	.word	0x5802541c
 8004024:	58025430 	.word	0x58025430
 8004028:	58025444 	.word	0x58025444
 800402c:	58025458 	.word	0x58025458
 8004030:	5802546c 	.word	0x5802546c
 8004034:	58025480 	.word	0x58025480
 8004038:	58025494 	.word	0x58025494
 800403c:	cccccccd 	.word	0xcccccccd
 8004040:	16009600 	.word	0x16009600
 8004044:	58025880 	.word	0x58025880
 8004048:	aaaaaaab 	.word	0xaaaaaaab
 800404c:	400204b8 	.word	0x400204b8
 8004050:	4002040f 	.word	0x4002040f
 8004054:	10008200 	.word	0x10008200
 8004058:	40020880 	.word	0x40020880

0800405c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d04a      	beq.n	8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2b08      	cmp	r3, #8
 8004076:	d847      	bhi.n	8004108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a25      	ldr	r2, [pc, #148]	@ (8004114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a24      	ldr	r2, [pc, #144]	@ (8004118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a22      	ldr	r2, [pc, #136]	@ (800411c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a21      	ldr	r2, [pc, #132]	@ (8004120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1c      	ldr	r2, [pc, #112]	@ (800412c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d101      	bne.n	80040cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e000      	b.n	80040ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80040cc:	2300      	movs	r3, #0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	4b17      	ldr	r3, [pc, #92]	@ (8004134 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	461a      	mov	r2, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a15      	ldr	r2, [pc, #84]	@ (8004138 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80040e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80040e6:	e009      	b.n	80040fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	4b14      	ldr	r3, [pc, #80]	@ (800413c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80040ec:	4413      	add	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	461a      	mov	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a11      	ldr	r2, [pc, #68]	@ (8004140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80040fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	3b01      	subs	r3, #1
 8004100:	2201      	movs	r2, #1
 8004102:	409a      	lsls	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	58025408 	.word	0x58025408
 8004118:	5802541c 	.word	0x5802541c
 800411c:	58025430 	.word	0x58025430
 8004120:	58025444 	.word	0x58025444
 8004124:	58025458 	.word	0x58025458
 8004128:	5802546c 	.word	0x5802546c
 800412c:	58025480 	.word	0x58025480
 8004130:	58025494 	.word	0x58025494
 8004134:	1600963f 	.word	0x1600963f
 8004138:	58025940 	.word	0x58025940
 800413c:	1000823f 	.word	0x1000823f
 8004140:	40020940 	.word	0x40020940

08004144 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004144:	b480      	push	{r7}
 8004146:	b089      	sub	sp, #36	@ 0x24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800414e:	2300      	movs	r3, #0
 8004150:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004152:	4b89      	ldr	r3, [pc, #548]	@ (8004378 <HAL_GPIO_Init+0x234>)
 8004154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004156:	e194      	b.n	8004482 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	2101      	movs	r1, #1
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	fa01 f303 	lsl.w	r3, r1, r3
 8004164:	4013      	ands	r3, r2
 8004166:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8186 	beq.w	800447c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0303 	and.w	r3, r3, #3
 8004178:	2b01      	cmp	r3, #1
 800417a:	d005      	beq.n	8004188 <HAL_GPIO_Init+0x44>
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d130      	bne.n	80041ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	005b      	lsls	r3, r3, #1
 8004192:	2203      	movs	r2, #3
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	69fb      	ldr	r3, [r7, #28]
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	fa02 f303 	lsl.w	r3, r2, r3
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041be:	2201      	movs	r2, #1
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	fa02 f303 	lsl.w	r3, r2, r3
 80041c6:	43db      	mvns	r3, r3
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	4013      	ands	r3, r2
 80041cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	091b      	lsrs	r3, r3, #4
 80041d4:	f003 0201 	and.w	r2, r3, #1
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	2b03      	cmp	r3, #3
 80041f4:	d017      	beq.n	8004226 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	2203      	movs	r2, #3
 8004202:	fa02 f303 	lsl.w	r3, r2, r3
 8004206:	43db      	mvns	r3, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4013      	ands	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689a      	ldr	r2, [r3, #8]
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	005b      	lsls	r3, r3, #1
 8004216:	fa02 f303 	lsl.w	r3, r2, r3
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b02      	cmp	r3, #2
 8004230:	d123      	bne.n	800427a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	08da      	lsrs	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	3208      	adds	r2, #8
 800423a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800423e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	f003 0307 	and.w	r3, r3, #7
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	220f      	movs	r2, #15
 800424a:	fa02 f303 	lsl.w	r3, r2, r3
 800424e:	43db      	mvns	r3, r3
 8004250:	69ba      	ldr	r2, [r7, #24]
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	69ba      	ldr	r2, [r7, #24]
 8004268:	4313      	orrs	r3, r2
 800426a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	08da      	lsrs	r2, r3, #3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3208      	adds	r2, #8
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	005b      	lsls	r3, r3, #1
 8004284:	2203      	movs	r2, #3
 8004286:	fa02 f303 	lsl.w	r3, r2, r3
 800428a:	43db      	mvns	r3, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4013      	ands	r3, r2
 8004290:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f003 0203 	and.w	r2, r3, #3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	fa02 f303 	lsl.w	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	f000 80e0 	beq.w	800447c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042bc:	4b2f      	ldr	r3, [pc, #188]	@ (800437c <HAL_GPIO_Init+0x238>)
 80042be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042c2:	4a2e      	ldr	r2, [pc, #184]	@ (800437c <HAL_GPIO_Init+0x238>)
 80042c4:	f043 0302 	orr.w	r3, r3, #2
 80042c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_GPIO_Init+0x238>)
 80042ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042da:	4a29      	ldr	r2, [pc, #164]	@ (8004380 <HAL_GPIO_Init+0x23c>)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	089b      	lsrs	r3, r3, #2
 80042e0:	3302      	adds	r3, #2
 80042e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	220f      	movs	r2, #15
 80042f2:	fa02 f303 	lsl.w	r3, r2, r3
 80042f6:	43db      	mvns	r3, r3
 80042f8:	69ba      	ldr	r2, [r7, #24]
 80042fa:	4013      	ands	r3, r2
 80042fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a20      	ldr	r2, [pc, #128]	@ (8004384 <HAL_GPIO_Init+0x240>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d052      	beq.n	80043ac <HAL_GPIO_Init+0x268>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <HAL_GPIO_Init+0x244>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d031      	beq.n	8004372 <HAL_GPIO_Init+0x22e>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <HAL_GPIO_Init+0x248>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d02b      	beq.n	800436e <HAL_GPIO_Init+0x22a>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <HAL_GPIO_Init+0x24c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d025      	beq.n	800436a <HAL_GPIO_Init+0x226>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1c      	ldr	r2, [pc, #112]	@ (8004394 <HAL_GPIO_Init+0x250>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d01f      	beq.n	8004366 <HAL_GPIO_Init+0x222>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <HAL_GPIO_Init+0x254>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d019      	beq.n	8004362 <HAL_GPIO_Init+0x21e>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <HAL_GPIO_Init+0x258>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d013      	beq.n	800435e <HAL_GPIO_Init+0x21a>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a19      	ldr	r2, [pc, #100]	@ (80043a0 <HAL_GPIO_Init+0x25c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d00d      	beq.n	800435a <HAL_GPIO_Init+0x216>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <HAL_GPIO_Init+0x260>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d007      	beq.n	8004356 <HAL_GPIO_Init+0x212>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <HAL_GPIO_Init+0x264>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d101      	bne.n	8004352 <HAL_GPIO_Init+0x20e>
 800434e:	2309      	movs	r3, #9
 8004350:	e02d      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004352:	230a      	movs	r3, #10
 8004354:	e02b      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004356:	2308      	movs	r3, #8
 8004358:	e029      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 800435a:	2307      	movs	r3, #7
 800435c:	e027      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 800435e:	2306      	movs	r3, #6
 8004360:	e025      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004362:	2305      	movs	r3, #5
 8004364:	e023      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004366:	2304      	movs	r3, #4
 8004368:	e021      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 800436a:	2303      	movs	r3, #3
 800436c:	e01f      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 800436e:	2302      	movs	r3, #2
 8004370:	e01d      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004372:	2301      	movs	r3, #1
 8004374:	e01b      	b.n	80043ae <HAL_GPIO_Init+0x26a>
 8004376:	bf00      	nop
 8004378:	58000080 	.word	0x58000080
 800437c:	58024400 	.word	0x58024400
 8004380:	58000400 	.word	0x58000400
 8004384:	58020000 	.word	0x58020000
 8004388:	58020400 	.word	0x58020400
 800438c:	58020800 	.word	0x58020800
 8004390:	58020c00 	.word	0x58020c00
 8004394:	58021000 	.word	0x58021000
 8004398:	58021400 	.word	0x58021400
 800439c:	58021800 	.word	0x58021800
 80043a0:	58021c00 	.word	0x58021c00
 80043a4:	58022000 	.word	0x58022000
 80043a8:	58022400 	.word	0x58022400
 80043ac:	2300      	movs	r3, #0
 80043ae:	69fa      	ldr	r2, [r7, #28]
 80043b0:	f002 0203 	and.w	r2, r2, #3
 80043b4:	0092      	lsls	r2, r2, #2
 80043b6:	4093      	lsls	r3, r2
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043be:	4938      	ldr	r1, [pc, #224]	@ (80044a0 <HAL_GPIO_Init+0x35c>)
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	089b      	lsrs	r3, r3, #2
 80043c4:	3302      	adds	r3, #2
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043cc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	43db      	mvns	r3, r3
 80043d8:	69ba      	ldr	r2, [r7, #24]
 80043da:	4013      	ands	r3, r2
 80043dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80043f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80043fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	43db      	mvns	r3, r3
 8004406:	69ba      	ldr	r2, [r7, #24]
 8004408:	4013      	ands	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004414:	2b00      	cmp	r3, #0
 8004416:	d003      	beq.n	8004420 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004420:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	43db      	mvns	r3, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4013      	ands	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d003      	beq.n	800444c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	4313      	orrs	r3, r2
 800444a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004476:	697b      	ldr	r3, [r7, #20]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	3301      	adds	r3, #1
 8004480:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
 800448c:	2b00      	cmp	r3, #0
 800448e:	f47f ae63 	bne.w	8004158 <HAL_GPIO_Init+0x14>
  }
}
 8004492:	bf00      	nop
 8004494:	bf00      	nop
 8004496:	3724      	adds	r7, #36	@ 0x24
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	58000400 	.word	0x58000400

080044a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	807b      	strh	r3, [r7, #2]
 80044b0:	4613      	mov	r3, r2
 80044b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044b4:	787b      	ldrb	r3, [r7, #1]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ba:	887a      	ldrh	r2, [r7, #2]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044c0:	e003      	b.n	80044ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044c2:	887b      	ldrh	r3, [r7, #2]
 80044c4:	041a      	lsls	r2, r3, #16
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	619a      	str	r2, [r3, #24]
}
 80044ca:	bf00      	nop
 80044cc:	370c      	adds	r7, #12
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80044e0:	4b19      	ldr	r3, [pc, #100]	@ (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d00a      	beq.n	8004502 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80044ec:	4b16      	ldr	r3, [pc, #88]	@ (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d001      	beq.n	80044fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e01f      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e01d      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004502:	4b11      	ldr	r3, [pc, #68]	@ (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f023 0207 	bic.w	r2, r3, #7
 800450a:	490f      	ldr	r1, [pc, #60]	@ (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	4313      	orrs	r3, r2
 8004510:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004512:	f7fc fe3b 	bl	800118c <HAL_GetTick>
 8004516:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004518:	e009      	b.n	800452e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800451a:	f7fc fe37 	bl	800118c <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004528:	d901      	bls.n	800452e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e007      	b.n	800453e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <HAL_PWREx_ConfigSupply+0x70>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004536:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800453a:	d1ee      	bne.n	800451a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	58024800 	.word	0x58024800

0800454c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	@ 0x30
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d102      	bne.n	8004560 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	f000 bc48 	b.w	8004df0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0301 	and.w	r3, r3, #1
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 8088 	beq.w	800467e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800456e:	4b99      	ldr	r3, [pc, #612]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004576:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004578:	4b96      	ldr	r3, [pc, #600]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800457a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800457e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004580:	2b10      	cmp	r3, #16
 8004582:	d007      	beq.n	8004594 <HAL_RCC_OscConfig+0x48>
 8004584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004586:	2b18      	cmp	r3, #24
 8004588:	d111      	bne.n	80045ae <HAL_RCC_OscConfig+0x62>
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	f003 0303 	and.w	r3, r3, #3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d10c      	bne.n	80045ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	4b8f      	ldr	r3, [pc, #572]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d06d      	beq.n	800467c <HAL_RCC_OscConfig+0x130>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d169      	bne.n	800467c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f000 bc21 	b.w	8004df0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x7a>
 80045b8:	4b86      	ldr	r3, [pc, #536]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a85      	ldr	r2, [pc, #532]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0xd8>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x9c>
 80045ce:	4b81      	ldr	r3, [pc, #516]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a80      	ldr	r2, [pc, #512]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b7e      	ldr	r3, [pc, #504]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a7d      	ldr	r2, [pc, #500]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xd8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0xc0>
 80045f2:	4b78      	ldr	r3, [pc, #480]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a77      	ldr	r2, [pc, #476]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b75      	ldr	r3, [pc, #468]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a74      	ldr	r2, [pc, #464]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xd8>
 800460c:	4b71      	ldr	r3, [pc, #452]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a70      	ldr	r2, [pc, #448]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b6e      	ldr	r3, [pc, #440]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a6d      	ldr	r2, [pc, #436]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004622:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fc fdae 	bl	800118c <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fc fdaa 	bl	800118c <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e3d4      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004646:	4b63      	ldr	r3, [pc, #396]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xe8>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004654:	f7fc fd9a 	bl	800118c <HAL_GetTick>
 8004658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fc fd96 	bl	800118c <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	@ 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e3c0      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800466e:	4b59      	ldr	r3, [pc, #356]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x110>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 80ca 	beq.w	8004820 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800468c:	4b51      	ldr	r3, [pc, #324]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004694:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004696:	4b4f      	ldr	r3, [pc, #316]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800469c:	6a3b      	ldr	r3, [r7, #32]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d007      	beq.n	80046b2 <HAL_RCC_OscConfig+0x166>
 80046a2:	6a3b      	ldr	r3, [r7, #32]
 80046a4:	2b18      	cmp	r3, #24
 80046a6:	d156      	bne.n	8004756 <HAL_RCC_OscConfig+0x20a>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d151      	bne.n	8004756 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80046b2:	4b48      	ldr	r3, [pc, #288]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_OscConfig+0x17e>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e392      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80046ca:	4b42      	ldr	r3, [pc, #264]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f023 0219 	bic.w	r2, r3, #25
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	493f      	ldr	r1, [pc, #252]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fc fd56 	bl	800118c <HAL_GetTick>
 80046e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046e4:	f7fc fd52 	bl	800118c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e37c      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80046f6:	4b37      	ldr	r3, [pc, #220]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0304 	and.w	r3, r3, #4
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d0f0      	beq.n	80046e4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004702:	f7fc fd4f 	bl	80011a4 <HAL_GetREVID>
 8004706:	4603      	mov	r3, r0
 8004708:	f241 0203 	movw	r2, #4099	@ 0x1003
 800470c:	4293      	cmp	r3, r2
 800470e:	d817      	bhi.n	8004740 <HAL_RCC_OscConfig+0x1f4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	2b40      	cmp	r3, #64	@ 0x40
 8004716:	d108      	bne.n	800472a <HAL_RCC_OscConfig+0x1de>
 8004718:	4b2e      	ldr	r3, [pc, #184]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004720:	4a2c      	ldr	r2, [pc, #176]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004726:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004728:	e07a      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800472a:	4b2a      	ldr	r3, [pc, #168]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	031b      	lsls	r3, r3, #12
 8004738:	4926      	ldr	r1, [pc, #152]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800473a:	4313      	orrs	r3, r2
 800473c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800473e:	e06f      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004740:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	061b      	lsls	r3, r3, #24
 800474e:	4921      	ldr	r1, [pc, #132]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004750:	4313      	orrs	r3, r2
 8004752:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004754:	e064      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d047      	beq.n	80047ee <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800475e:	4b1d      	ldr	r3, [pc, #116]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f023 0219 	bic.w	r2, r3, #25
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	491a      	ldr	r1, [pc, #104]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800476c:	4313      	orrs	r3, r2
 800476e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004770:	f7fc fd0c 	bl	800118c <HAL_GetTick>
 8004774:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004776:	e008      	b.n	800478a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004778:	f7fc fd08 	bl	800118c <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	2b02      	cmp	r3, #2
 8004784:	d901      	bls.n	800478a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e332      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800478a:	4b12      	ldr	r3, [pc, #72]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0304 	and.w	r3, r3, #4
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f0      	beq.n	8004778 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	f7fc fd05 	bl	80011a4 <HAL_GetREVID>
 800479a:	4603      	mov	r3, r0
 800479c:	f241 0203 	movw	r2, #4099	@ 0x1003
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d819      	bhi.n	80047d8 <HAL_RCC_OscConfig+0x28c>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b40      	cmp	r3, #64	@ 0x40
 80047aa:	d108      	bne.n	80047be <HAL_RCC_OscConfig+0x272>
 80047ac:	4b09      	ldr	r3, [pc, #36]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80047b4:	4a07      	ldr	r2, [pc, #28]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80047b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047ba:	6053      	str	r3, [r2, #4]
 80047bc:	e030      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
 80047be:	4b05      	ldr	r3, [pc, #20]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	031b      	lsls	r3, r3, #12
 80047cc:	4901      	ldr	r1, [pc, #4]	@ (80047d4 <HAL_RCC_OscConfig+0x288>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
 80047d2:	e025      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
 80047d4:	58024400 	.word	0x58024400
 80047d8:	4b9a      	ldr	r3, [pc, #616]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	061b      	lsls	r3, r3, #24
 80047e6:	4997      	ldr	r1, [pc, #604]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	604b      	str	r3, [r1, #4]
 80047ec:	e018      	b.n	8004820 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047ee:	4b95      	ldr	r3, [pc, #596]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a94      	ldr	r2, [pc, #592]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80047f4:	f023 0301 	bic.w	r3, r3, #1
 80047f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047fa:	f7fc fcc7 	bl	800118c <HAL_GetTick>
 80047fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004802:	f7fc fcc3 	bl	800118c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e2ed      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004814:	4b8b      	ldr	r3, [pc, #556]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0304 	and.w	r3, r3, #4
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1f0      	bne.n	8004802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a9 	beq.w	8004980 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800482e:	4b85      	ldr	r3, [pc, #532]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004836:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004838:	4b82      	ldr	r3, [pc, #520]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	2b08      	cmp	r3, #8
 8004842:	d007      	beq.n	8004854 <HAL_RCC_OscConfig+0x308>
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b18      	cmp	r3, #24
 8004848:	d13a      	bne.n	80048c0 <HAL_RCC_OscConfig+0x374>
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	f003 0303 	and.w	r3, r3, #3
 8004850:	2b01      	cmp	r3, #1
 8004852:	d135      	bne.n	80048c0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004854:	4b7b      	ldr	r3, [pc, #492]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <HAL_RCC_OscConfig+0x320>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	69db      	ldr	r3, [r3, #28]
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	d001      	beq.n	800486c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e2c1      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800486c:	f7fc fc9a 	bl	80011a4 <HAL_GetREVID>
 8004870:	4603      	mov	r3, r0
 8004872:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004876:	4293      	cmp	r3, r2
 8004878:	d817      	bhi.n	80048aa <HAL_RCC_OscConfig+0x35e>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	2b20      	cmp	r3, #32
 8004880:	d108      	bne.n	8004894 <HAL_RCC_OscConfig+0x348>
 8004882:	4b70      	ldr	r3, [pc, #448]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800488a:	4a6e      	ldr	r2, [pc, #440]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 800488c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004890:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004892:	e075      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004894:	4b6b      	ldr	r3, [pc, #428]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	069b      	lsls	r3, r3, #26
 80048a2:	4968      	ldr	r1, [pc, #416]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048a8:	e06a      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048aa:	4b66      	ldr	r3, [pc, #408]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	4962      	ldr	r1, [pc, #392]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80048be:	e05f      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	69db      	ldr	r3, [r3, #28]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d042      	beq.n	800494e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80048c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7fc fc5a 	bl	800118c <HAL_GetTick>
 80048d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80048dc:	f7fc fc56 	bl	800118c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e280      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80048ee:	4b55      	ldr	r3, [pc, #340]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d0f0      	beq.n	80048dc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80048fa:	f7fc fc53 	bl	80011a4 <HAL_GetREVID>
 80048fe:	4603      	mov	r3, r0
 8004900:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004904:	4293      	cmp	r3, r2
 8004906:	d817      	bhi.n	8004938 <HAL_RCC_OscConfig+0x3ec>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	2b20      	cmp	r3, #32
 800490e:	d108      	bne.n	8004922 <HAL_RCC_OscConfig+0x3d6>
 8004910:	4b4c      	ldr	r3, [pc, #304]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004918:	4a4a      	ldr	r2, [pc, #296]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 800491a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800491e:	6053      	str	r3, [r2, #4]
 8004920:	e02e      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
 8004922:	4b48      	ldr	r3, [pc, #288]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a1b      	ldr	r3, [r3, #32]
 800492e:	069b      	lsls	r3, r3, #26
 8004930:	4944      	ldr	r1, [pc, #272]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004932:	4313      	orrs	r3, r2
 8004934:	604b      	str	r3, [r1, #4]
 8004936:	e023      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
 8004938:	4b42      	ldr	r3, [pc, #264]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a1b      	ldr	r3, [r3, #32]
 8004944:	061b      	lsls	r3, r3, #24
 8004946:	493f      	ldr	r1, [pc, #252]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	60cb      	str	r3, [r1, #12]
 800494c:	e018      	b.n	8004980 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800494e:	4b3d      	ldr	r3, [pc, #244]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a3c      	ldr	r2, [pc, #240]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004954:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004958:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800495a:	f7fc fc17 	bl	800118c <HAL_GetTick>
 800495e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004962:	f7fc fc13 	bl	800118c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e23d      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004974:	4b33      	ldr	r3, [pc, #204]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1f0      	bne.n	8004962 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b00      	cmp	r3, #0
 800498a:	d036      	beq.n	80049fa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d019      	beq.n	80049c8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004994:	4b2b      	ldr	r3, [pc, #172]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004996:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004998:	4a2a      	ldr	r2, [pc, #168]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 800499a:	f043 0301 	orr.w	r3, r3, #1
 800499e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a0:	f7fc fbf4 	bl	800118c <HAL_GetTick>
 80049a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049a8:	f7fc fbf0 	bl	800118c <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e21a      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80049ba:	4b22      	ldr	r3, [pc, #136]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80049bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d0f0      	beq.n	80049a8 <HAL_RCC_OscConfig+0x45c>
 80049c6:	e018      	b.n	80049fa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80049ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80049ce:	f023 0301 	bic.w	r3, r3, #1
 80049d2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d4:	f7fc fbda 	bl	800118c <HAL_GetTick>
 80049d8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049da:	e008      	b.n	80049ee <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049dc:	f7fc fbd6 	bl	800118c <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e200      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80049ee:	4b15      	ldr	r3, [pc, #84]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 80049f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d039      	beq.n	8004a7a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d01c      	beq.n	8004a48 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a0c      	ldr	r2, [pc, #48]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004a14:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004a18:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a1a:	f7fc fbb7 	bl	800118c <HAL_GetTick>
 8004a1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a22:	f7fc fbb3 	bl	800118c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e1dd      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_RCC_OscConfig+0x4f8>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x4d6>
 8004a40:	e01b      	b.n	8004a7a <HAL_RCC_OscConfig+0x52e>
 8004a42:	bf00      	nop
 8004a44:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004a48:	4b9b      	ldr	r3, [pc, #620]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a9a      	ldr	r2, [pc, #616]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004a4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a52:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004a54:	f7fc fb9a 	bl	800118c <HAL_GetTick>
 8004a58:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a5c:	f7fc fb96 	bl	800118c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e1c0      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004a6e:	4b92      	ldr	r3, [pc, #584]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	f000 8081 	beq.w	8004b8a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a88:	4b8c      	ldr	r3, [pc, #560]	@ (8004cbc <HAL_RCC_OscConfig+0x770>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a8b      	ldr	r2, [pc, #556]	@ (8004cbc <HAL_RCC_OscConfig+0x770>)
 8004a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004a92:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004a94:	f7fc fb7a 	bl	800118c <HAL_GetTick>
 8004a98:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a9c:	f7fc fb76 	bl	800118c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e1a0      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004aae:	4b83      	ldr	r3, [pc, #524]	@ (8004cbc <HAL_RCC_OscConfig+0x770>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d106      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x584>
 8004ac2:	4b7d      	ldr	r3, [pc, #500]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ac6:	4a7c      	ldr	r2, [pc, #496]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ace:	e02d      	b.n	8004b2c <HAL_RCC_OscConfig+0x5e0>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d10c      	bne.n	8004af2 <HAL_RCC_OscConfig+0x5a6>
 8004ad8:	4b77      	ldr	r3, [pc, #476]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004adc:	4a76      	ldr	r2, [pc, #472]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ae4:	4b74      	ldr	r3, [pc, #464]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae8:	4a73      	ldr	r2, [pc, #460]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004aea:	f023 0304 	bic.w	r3, r3, #4
 8004aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8004af0:	e01c      	b.n	8004b2c <HAL_RCC_OscConfig+0x5e0>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	2b05      	cmp	r3, #5
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x5c8>
 8004afa:	4b6f      	ldr	r3, [pc, #444]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afe:	4a6e      	ldr	r2, [pc, #440]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b00:	f043 0304 	orr.w	r3, r3, #4
 8004b04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b06:	4b6c      	ldr	r3, [pc, #432]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0a:	4a6b      	ldr	r2, [pc, #428]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b0c:	f043 0301 	orr.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b12:	e00b      	b.n	8004b2c <HAL_RCC_OscConfig+0x5e0>
 8004b14:	4b68      	ldr	r3, [pc, #416]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b18:	4a67      	ldr	r2, [pc, #412]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b1a:	f023 0301 	bic.w	r3, r3, #1
 8004b1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b20:	4b65      	ldr	r3, [pc, #404]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b24:	4a64      	ldr	r2, [pc, #400]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b26:	f023 0304 	bic.w	r3, r3, #4
 8004b2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d015      	beq.n	8004b60 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fc fb2a 	bl	800118c <HAL_GetTick>
 8004b38:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b3a:	e00a      	b.n	8004b52 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b3c:	f7fc fb26 	bl	800118c <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d901      	bls.n	8004b52 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	e14e      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004b52:	4b59      	ldr	r3, [pc, #356]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d0ee      	beq.n	8004b3c <HAL_RCC_OscConfig+0x5f0>
 8004b5e:	e014      	b.n	8004b8a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fc fb14 	bl	800118c <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b66:	e00a      	b.n	8004b7e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b68:	f7fc fb10 	bl	800118c <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e138      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004b7e:	4b4e      	ldr	r3, [pc, #312]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1ee      	bne.n	8004b68 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 812d 	beq.w	8004dee <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004b94:	4b48      	ldr	r3, [pc, #288]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004b9c:	2b18      	cmp	r3, #24
 8004b9e:	f000 80bd 	beq.w	8004d1c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	f040 809e 	bne.w	8004ce8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b42      	ldr	r3, [pc, #264]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a41      	ldr	r2, [pc, #260]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004bb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bb8:	f7fc fae8 	bl	800118c <HAL_GetTick>
 8004bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bc0:	f7fc fae4 	bl	800118c <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e10e      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004bd2:	4b39      	ldr	r3, [pc, #228]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bde:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004be0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004be2:	4b37      	ldr	r3, [pc, #220]	@ (8004cc0 <HAL_RCC_OscConfig+0x774>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004bee:	0112      	lsls	r2, r2, #4
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	4931      	ldr	r1, [pc, #196]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c06:	3b01      	subs	r3, #1
 8004c08:	025b      	lsls	r3, r3, #9
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c20:	3b01      	subs	r3, #1
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c28:	4923      	ldr	r1, [pc, #140]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004c2e:	4b22      	ldr	r3, [pc, #136]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a21      	ldr	r2, [pc, #132]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c34:	f023 0301 	bic.w	r3, r3, #1
 8004c38:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c3c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3e:	4b21      	ldr	r3, [pc, #132]	@ (8004cc4 <HAL_RCC_OscConfig+0x778>)
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004c46:	00d2      	lsls	r2, r2, #3
 8004c48:	491b      	ldr	r1, [pc, #108]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	f023 020c 	bic.w	r2, r3, #12
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	4917      	ldr	r1, [pc, #92]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004c60:	4b15      	ldr	r3, [pc, #84]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	f023 0202 	bic.w	r2, r3, #2
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6c:	4912      	ldr	r1, [pc, #72]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004c72:	4b11      	ldr	r3, [pc, #68]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	4a10      	ldr	r2, [pc, #64]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	4a0d      	ldr	r2, [pc, #52]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004c96:	4b08      	ldr	r3, [pc, #32]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	4a07      	ldr	r2, [pc, #28]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004c9c:	f043 0301 	orr.w	r3, r3, #1
 8004ca0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca2:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a04      	ldr	r2, [pc, #16]	@ (8004cb8 <HAL_RCC_OscConfig+0x76c>)
 8004ca8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cae:	f7fc fa6d 	bl	800118c <HAL_GetTick>
 8004cb2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cb4:	e011      	b.n	8004cda <HAL_RCC_OscConfig+0x78e>
 8004cb6:	bf00      	nop
 8004cb8:	58024400 	.word	0x58024400
 8004cbc:	58024800 	.word	0x58024800
 8004cc0:	fffffc0c 	.word	0xfffffc0c
 8004cc4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fc fa60 	bl	800118c <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e08a      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004cda:	4b47      	ldr	r3, [pc, #284]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x77c>
 8004ce6:	e082      	b.n	8004dee <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b43      	ldr	r3, [pc, #268]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a42      	ldr	r2, [pc, #264]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004cee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004cf2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fa4a 	bl	800118c <HAL_GetTick>
 8004cf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cfc:	f7fc fa46 	bl	800118c <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e070      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x7b0>
 8004d1a:	e068      	b.n	8004dee <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004d1c:	4b36      	ldr	r3, [pc, #216]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d20:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004d22:	4b35      	ldr	r3, [pc, #212]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d26:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d031      	beq.n	8004d94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f003 0203 	and.w	r2, r3, #3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d12a      	bne.n	8004d94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d122      	bne.n	8004d94 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d58:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d11a      	bne.n	8004d94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	0a5b      	lsrs	r3, r3, #9
 8004d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d6a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d111      	bne.n	8004d94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	0c1b      	lsrs	r3, r3, #16
 8004d74:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d108      	bne.n	8004d94 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	0e1b      	lsrs	r3, r3, #24
 8004d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d8e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d001      	beq.n	8004d98 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e02b      	b.n	8004df0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004d98:	4b17      	ldr	r3, [pc, #92]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	08db      	lsrs	r3, r3, #3
 8004d9e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004da2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004da8:	693a      	ldr	r2, [r7, #16]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d01f      	beq.n	8004dee <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004dae:	4b12      	ldr	r3, [pc, #72]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4a11      	ldr	r2, [pc, #68]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004dba:	f7fc f9e7 	bl	800118c <HAL_GetTick>
 8004dbe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004dc0:	bf00      	nop
 8004dc2:	f7fc f9e3 	bl	800118c <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d0f9      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004dce:	4b0a      	ldr	r3, [pc, #40]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004dd0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004dfc <HAL_RCC_OscConfig+0x8b0>)
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004dda:	00d2      	lsls	r2, r2, #3
 8004ddc:	4906      	ldr	r1, [pc, #24]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004dde:	4313      	orrs	r3, r2
 8004de0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004de2:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de6:	4a04      	ldr	r2, [pc, #16]	@ (8004df8 <HAL_RCC_OscConfig+0x8ac>)
 8004de8:	f043 0301 	orr.w	r3, r3, #1
 8004dec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3730      	adds	r7, #48	@ 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	ffff0007 	.word	0xffff0007

08004e00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d101      	bne.n	8004e14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	e19c      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e14:	4b8a      	ldr	r3, [pc, #552]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 030f 	and.w	r3, r3, #15
 8004e1c:	683a      	ldr	r2, [r7, #0]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d910      	bls.n	8004e44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e22:	4b87      	ldr	r3, [pc, #540]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f023 020f 	bic.w	r2, r3, #15
 8004e2a:	4985      	ldr	r1, [pc, #532]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b83      	ldr	r3, [pc, #524]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 030f 	and.w	r3, r3, #15
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e184      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691a      	ldr	r2, [r3, #16]
 8004e54:	4b7b      	ldr	r3, [pc, #492]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e56:	699b      	ldr	r3, [r3, #24]
 8004e58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d908      	bls.n	8004e72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004e60:	4b78      	ldr	r3, [pc, #480]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	4975      	ldr	r1, [pc, #468]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0308 	and.w	r3, r3, #8
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	4b70      	ldr	r3, [pc, #448]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d908      	bls.n	8004ea0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004e8e:	4b6d      	ldr	r3, [pc, #436]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	496a      	ldr	r1, [pc, #424]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d010      	beq.n	8004ece <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	4b64      	ldr	r3, [pc, #400]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004eb2:	69db      	ldr	r3, [r3, #28]
 8004eb4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d908      	bls.n	8004ece <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004ebc:	4b61      	ldr	r3, [pc, #388]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	495e      	ldr	r1, [pc, #376]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d010      	beq.n	8004efc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	4b59      	ldr	r3, [pc, #356]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d908      	bls.n	8004efc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004eea:	4b56      	ldr	r3, [pc, #344]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	4953      	ldr	r1, [pc, #332]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68da      	ldr	r2, [r3, #12]
 8004f0c:	4b4d      	ldr	r3, [pc, #308]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d908      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f18:	4b4a      	ldr	r3, [pc, #296]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f023 020f 	bic.w	r2, r3, #15
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	4947      	ldr	r1, [pc, #284]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0301 	and.w	r3, r3, #1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d055      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004f36:	4b43      	ldr	r3, [pc, #268]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	4940      	ldr	r1, [pc, #256]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d107      	bne.n	8004f60 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004f50:	4b3c      	ldr	r3, [pc, #240]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d121      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e0f6      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	2b03      	cmp	r3, #3
 8004f66:	d107      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004f68:	4b36      	ldr	r3, [pc, #216]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d115      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0ea      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d107      	bne.n	8004f90 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f80:	4b30      	ldr	r3, [pc, #192]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d109      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e0de      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004f90:	4b2c      	ldr	r3, [pc, #176]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0d6      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa0:	4b28      	ldr	r3, [pc, #160]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f023 0207 	bic.w	r2, r3, #7
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4925      	ldr	r1, [pc, #148]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fb2:	f7fc f8eb 	bl	800118c <HAL_GetTick>
 8004fb6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fba:	f7fc f8e7 	bl	800118c <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e0be      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fd0:	4b1c      	ldr	r3, [pc, #112]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	691b      	ldr	r3, [r3, #16]
 8004fd4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d1eb      	bne.n	8004fba <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d010      	beq.n	8005010 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68da      	ldr	r2, [r3, #12]
 8004ff2:	4b14      	ldr	r3, [pc, #80]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d208      	bcs.n	8005010 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ffe:	4b11      	ldr	r3, [pc, #68]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 8005000:	699b      	ldr	r3, [r3, #24]
 8005002:	f023 020f 	bic.w	r2, r3, #15
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	490e      	ldr	r1, [pc, #56]	@ (8005044 <HAL_RCC_ClockConfig+0x244>)
 800500c:	4313      	orrs	r3, r2
 800500e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005010:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 030f 	and.w	r3, r3, #15
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d214      	bcs.n	8005048 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800501e:	4b08      	ldr	r3, [pc, #32]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f023 020f 	bic.w	r2, r3, #15
 8005026:	4906      	ldr	r1, [pc, #24]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	4313      	orrs	r3, r2
 800502c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502e:	4b04      	ldr	r3, [pc, #16]	@ (8005040 <HAL_RCC_ClockConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f003 030f 	and.w	r3, r3, #15
 8005036:	683a      	ldr	r2, [r7, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800503c:	2301      	movs	r3, #1
 800503e:	e086      	b.n	800514e <HAL_RCC_ClockConfig+0x34e>
 8005040:	52002000 	.word	0x52002000
 8005044:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d010      	beq.n	8005076 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	4b3f      	ldr	r3, [pc, #252]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005060:	429a      	cmp	r2, r3
 8005062:	d208      	bcs.n	8005076 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005064:	4b3c      	ldr	r3, [pc, #240]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	4939      	ldr	r1, [pc, #228]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005072:	4313      	orrs	r3, r2
 8005074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0308 	and.w	r3, r3, #8
 800507e:	2b00      	cmp	r3, #0
 8005080:	d010      	beq.n	80050a4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695a      	ldr	r2, [r3, #20]
 8005086:	4b34      	ldr	r3, [pc, #208]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800508e:	429a      	cmp	r2, r3
 8005090:	d208      	bcs.n	80050a4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005092:	4b31      	ldr	r3, [pc, #196]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005094:	69db      	ldr	r3, [r3, #28]
 8005096:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	492e      	ldr	r1, [pc, #184]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0310 	and.w	r3, r3, #16
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d010      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	4b28      	ldr	r3, [pc, #160]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050bc:	429a      	cmp	r2, r3
 80050be:	d208      	bcs.n	80050d2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050c0:	4b25      	ldr	r3, [pc, #148]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	4922      	ldr	r1, [pc, #136]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d010      	beq.n	8005100 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69da      	ldr	r2, [r3, #28]
 80050e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d208      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4917      	ldr	r1, [pc, #92]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005100:	f000 f834 	bl	800516c <HAL_RCC_GetSysClockFreq>
 8005104:	4602      	mov	r2, r0
 8005106:	4b14      	ldr	r3, [pc, #80]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	0a1b      	lsrs	r3, r3, #8
 800510c:	f003 030f 	and.w	r3, r3, #15
 8005110:	4912      	ldr	r1, [pc, #72]	@ (800515c <HAL_RCC_ClockConfig+0x35c>)
 8005112:	5ccb      	ldrb	r3, [r1, r3]
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	fa22 f303 	lsr.w	r3, r2, r3
 800511c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800511e:	4b0e      	ldr	r3, [pc, #56]	@ (8005158 <HAL_RCC_ClockConfig+0x358>)
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	f003 030f 	and.w	r3, r3, #15
 8005126:	4a0d      	ldr	r2, [pc, #52]	@ (800515c <HAL_RCC_ClockConfig+0x35c>)
 8005128:	5cd3      	ldrb	r3, [r2, r3]
 800512a:	f003 031f 	and.w	r3, r3, #31
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	fa22 f303 	lsr.w	r3, r2, r3
 8005134:	4a0a      	ldr	r2, [pc, #40]	@ (8005160 <HAL_RCC_ClockConfig+0x360>)
 8005136:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005138:	4a0a      	ldr	r2, [pc, #40]	@ (8005164 <HAL_RCC_ClockConfig+0x364>)
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800513e:	4b0a      	ldr	r3, [pc, #40]	@ (8005168 <HAL_RCC_ClockConfig+0x368>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4618      	mov	r0, r3
 8005144:	f7fb ffd8 	bl	80010f8 <HAL_InitTick>
 8005148:	4603      	mov	r3, r0
 800514a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	0800923c 	.word	0x0800923c
 8005160:	24000004 	.word	0x24000004
 8005164:	24000000 	.word	0x24000000
 8005168:	24000008 	.word	0x24000008

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b089      	sub	sp, #36	@ 0x24
 8005170:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005172:	4bb3      	ldr	r3, [pc, #716]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800517a:	2b18      	cmp	r3, #24
 800517c:	f200 8155 	bhi.w	800542a <HAL_RCC_GetSysClockFreq+0x2be>
 8005180:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005186:	bf00      	nop
 8005188:	080051ed 	.word	0x080051ed
 800518c:	0800542b 	.word	0x0800542b
 8005190:	0800542b 	.word	0x0800542b
 8005194:	0800542b 	.word	0x0800542b
 8005198:	0800542b 	.word	0x0800542b
 800519c:	0800542b 	.word	0x0800542b
 80051a0:	0800542b 	.word	0x0800542b
 80051a4:	0800542b 	.word	0x0800542b
 80051a8:	08005213 	.word	0x08005213
 80051ac:	0800542b 	.word	0x0800542b
 80051b0:	0800542b 	.word	0x0800542b
 80051b4:	0800542b 	.word	0x0800542b
 80051b8:	0800542b 	.word	0x0800542b
 80051bc:	0800542b 	.word	0x0800542b
 80051c0:	0800542b 	.word	0x0800542b
 80051c4:	0800542b 	.word	0x0800542b
 80051c8:	08005219 	.word	0x08005219
 80051cc:	0800542b 	.word	0x0800542b
 80051d0:	0800542b 	.word	0x0800542b
 80051d4:	0800542b 	.word	0x0800542b
 80051d8:	0800542b 	.word	0x0800542b
 80051dc:	0800542b 	.word	0x0800542b
 80051e0:	0800542b 	.word	0x0800542b
 80051e4:	0800542b 	.word	0x0800542b
 80051e8:	0800521f 	.word	0x0800521f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80051ec:	4b94      	ldr	r3, [pc, #592]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d009      	beq.n	800520c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80051f8:	4b91      	ldr	r3, [pc, #580]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	08db      	lsrs	r3, r3, #3
 80051fe:	f003 0303 	and.w	r3, r3, #3
 8005202:	4a90      	ldr	r2, [pc, #576]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005204:	fa22 f303 	lsr.w	r3, r2, r3
 8005208:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800520a:	e111      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800520c:	4b8d      	ldr	r3, [pc, #564]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800520e:	61bb      	str	r3, [r7, #24]
      break;
 8005210:	e10e      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005212:	4b8d      	ldr	r3, [pc, #564]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005214:	61bb      	str	r3, [r7, #24]
      break;
 8005216:	e10b      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005218:	4b8c      	ldr	r3, [pc, #560]	@ (800544c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800521a:	61bb      	str	r3, [r7, #24]
      break;
 800521c:	e108      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800521e:	4b88      	ldr	r3, [pc, #544]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005228:	4b85      	ldr	r3, [pc, #532]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800522c:	091b      	lsrs	r3, r3, #4
 800522e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005232:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005234:	4b82      	ldr	r3, [pc, #520]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800523e:	4b80      	ldr	r3, [pc, #512]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005240:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005242:	08db      	lsrs	r3, r3, #3
 8005244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005248:	68fa      	ldr	r2, [r7, #12]
 800524a:	fb02 f303 	mul.w	r3, r2, r3
 800524e:	ee07 3a90 	vmov	s15, r3
 8005252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005256:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	f000 80e1 	beq.w	8005424 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b02      	cmp	r3, #2
 8005266:	f000 8083 	beq.w	8005370 <HAL_RCC_GetSysClockFreq+0x204>
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b02      	cmp	r3, #2
 800526e:	f200 80a1 	bhi.w	80053b4 <HAL_RCC_GetSysClockFreq+0x248>
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0x114>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	2b01      	cmp	r3, #1
 800527c:	d056      	beq.n	800532c <HAL_RCC_GetSysClockFreq+0x1c0>
 800527e:	e099      	b.n	80053b4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005280:	4b6f      	ldr	r3, [pc, #444]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02d      	beq.n	80052e8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800528c:	4b6c      	ldr	r3, [pc, #432]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	08db      	lsrs	r3, r3, #3
 8005292:	f003 0303 	and.w	r3, r3, #3
 8005296:	4a6b      	ldr	r2, [pc, #428]	@ (8005444 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005298:	fa22 f303 	lsr.w	r3, r2, r3
 800529c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	ee07 3a90 	vmov	s15, r3
 80052ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052b6:	4b62      	ldr	r3, [pc, #392]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052be:	ee07 3a90 	vmov	s15, r3
 80052c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80052c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80052ca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80052ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80052d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80052d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80052da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80052de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80052e2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80052e6:	e087      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	ee07 3a90 	vmov	s15, r3
 80052ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052f2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005454 <HAL_RCC_GetSysClockFreq+0x2e8>
 80052f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80052fa:	4b51      	ldr	r3, [pc, #324]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005302:	ee07 3a90 	vmov	s15, r3
 8005306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800530a:	ed97 6a02 	vldr	s12, [r7, #8]
 800530e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800531a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800531e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005326:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800532a:	e065      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005336:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x2ec>
 800533a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800533e:	4b40      	ldr	r3, [pc, #256]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800534e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005352:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800535a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800535e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800536a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800536e:	e043      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800537a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800545c <HAL_RCC_GetSysClockFreq+0x2f0>
 800537e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005382:	4b2f      	ldr	r3, [pc, #188]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800538a:	ee07 3a90 	vmov	s15, r3
 800538e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005392:	ed97 6a02 	vldr	s12, [r7, #8]
 8005396:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e4>
 800539a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800539e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053b2:	e021      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	ee07 3a90 	vmov	s15, r3
 80053ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053be:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005458 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ce:	ee07 3a90 	vmov	s15, r3
 80053d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80053da:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005450 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053f6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80053f8:	4b11      	ldr	r3, [pc, #68]	@ (8005440 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fc:	0a5b      	lsrs	r3, r3, #9
 80053fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005402:	3301      	adds	r3, #1
 8005404:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	ee07 3a90 	vmov	s15, r3
 800540c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005410:	edd7 6a07 	vldr	s13, [r7, #28]
 8005414:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800541c:	ee17 3a90 	vmov	r3, s15
 8005420:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005422:	e005      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	61bb      	str	r3, [r7, #24]
      break;
 8005428:	e002      	b.n	8005430 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800542a:	4b07      	ldr	r3, [pc, #28]	@ (8005448 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800542c:	61bb      	str	r3, [r7, #24]
      break;
 800542e:	bf00      	nop
  }

  return sysclockfreq;
 8005430:	69bb      	ldr	r3, [r7, #24]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3724      	adds	r7, #36	@ 0x24
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	58024400 	.word	0x58024400
 8005444:	03d09000 	.word	0x03d09000
 8005448:	003d0900 	.word	0x003d0900
 800544c:	017d7840 	.word	0x017d7840
 8005450:	46000000 	.word	0x46000000
 8005454:	4c742400 	.word	0x4c742400
 8005458:	4a742400 	.word	0x4a742400
 800545c:	4bbebc20 	.word	0x4bbebc20

08005460 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005466:	f7ff fe81 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800546a:	4602      	mov	r2, r0
 800546c:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800546e:	699b      	ldr	r3, [r3, #24]
 8005470:	0a1b      	lsrs	r3, r3, #8
 8005472:	f003 030f 	and.w	r3, r3, #15
 8005476:	490f      	ldr	r1, [pc, #60]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005478:	5ccb      	ldrb	r3, [r1, r3]
 800547a:	f003 031f 	and.w	r3, r3, #31
 800547e:	fa22 f303 	lsr.w	r3, r2, r3
 8005482:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	f003 030f 	and.w	r3, r3, #15
 800548c:	4a09      	ldr	r2, [pc, #36]	@ (80054b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800548e:	5cd3      	ldrb	r3, [r2, r3]
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a07      	ldr	r2, [pc, #28]	@ (80054b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800549c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800549e:	4a07      	ldr	r2, [pc, #28]	@ (80054bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80054a4:	4b04      	ldr	r3, [pc, #16]	@ (80054b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80054a6:	681b      	ldr	r3, [r3, #0]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}
 80054b0:	58024400 	.word	0x58024400
 80054b4:	0800923c 	.word	0x0800923c
 80054b8:	24000004 	.word	0x24000004
 80054bc:	24000000 	.word	0x24000000

080054c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80054c4:	f7ff ffcc 	bl	8005460 <HAL_RCC_GetHCLKFreq>
 80054c8:	4602      	mov	r2, r0
 80054ca:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054cc:	69db      	ldr	r3, [r3, #28]
 80054ce:	091b      	lsrs	r3, r3, #4
 80054d0:	f003 0307 	and.w	r3, r3, #7
 80054d4:	4904      	ldr	r1, [pc, #16]	@ (80054e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80054d6:	5ccb      	ldrb	r3, [r1, r3]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	58024400 	.word	0x58024400
 80054e8:	0800923c 	.word	0x0800923c

080054ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80054f0:	f7ff ffb6 	bl	8005460 <HAL_RCC_GetHCLKFreq>
 80054f4:	4602      	mov	r2, r0
 80054f6:	4b06      	ldr	r3, [pc, #24]	@ (8005510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	0a1b      	lsrs	r3, r3, #8
 80054fc:	f003 0307 	and.w	r3, r3, #7
 8005500:	4904      	ldr	r1, [pc, #16]	@ (8005514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005502:	5ccb      	ldrb	r3, [r1, r3]
 8005504:	f003 031f 	and.w	r3, r3, #31
 8005508:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800550c:	4618      	mov	r0, r3
 800550e:	bd80      	pop	{r7, pc}
 8005510:	58024400 	.word	0x58024400
 8005514:	0800923c 	.word	0x0800923c

08005518 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005518:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800551c:	b0ca      	sub	sp, #296	@ 0x128
 800551e:	af00      	add	r7, sp, #0
 8005520:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800552a:	2300      	movs	r3, #0
 800552c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800553c:	2500      	movs	r5, #0
 800553e:	ea54 0305 	orrs.w	r3, r4, r5
 8005542:	d049      	beq.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005548:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800554a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800554e:	d02f      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005550:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005554:	d828      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005556:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800555a:	d01a      	beq.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800555c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005560:	d822      	bhi.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005566:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800556a:	d007      	beq.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800556c:	e01c      	b.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800556e:	4bb8      	ldr	r3, [pc, #736]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	4ab7      	ldr	r2, [pc, #732]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005574:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005578:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800557a:	e01a      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800557c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005580:	3308      	adds	r3, #8
 8005582:	2102      	movs	r1, #2
 8005584:	4618      	mov	r0, r3
 8005586:	f001 fc8f 	bl	8006ea8 <RCCEx_PLL2_Config>
 800558a:	4603      	mov	r3, r0
 800558c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005590:	e00f      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005596:	3328      	adds	r3, #40	@ 0x28
 8005598:	2102      	movs	r1, #2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fd36 	bl	800700c <RCCEx_PLL3_Config>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80055a6:	e004      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055ae:	e000      	b.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80055b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10a      	bne.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80055ba:	4ba5      	ldr	r3, [pc, #660]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80055c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055c8:	4aa1      	ldr	r2, [pc, #644]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80055ca:	430b      	orrs	r3, r1
 80055cc:	6513      	str	r3, [r2, #80]	@ 0x50
 80055ce:	e003      	b.n	80055d8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80055d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80055e4:	f04f 0900 	mov.w	r9, #0
 80055e8:	ea58 0309 	orrs.w	r3, r8, r9
 80055ec:	d047      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80055ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80055f4:	2b04      	cmp	r3, #4
 80055f6:	d82a      	bhi.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80055f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005600 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80055fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055fe:	bf00      	nop
 8005600:	08005615 	.word	0x08005615
 8005604:	08005623 	.word	0x08005623
 8005608:	08005639 	.word	0x08005639
 800560c:	08005657 	.word	0x08005657
 8005610:	08005657 	.word	0x08005657
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005614:	4b8e      	ldr	r3, [pc, #568]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005618:	4a8d      	ldr	r2, [pc, #564]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800561a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800561e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005620:	e01a      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005626:	3308      	adds	r3, #8
 8005628:	2100      	movs	r1, #0
 800562a:	4618      	mov	r0, r3
 800562c:	f001 fc3c 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005630:	4603      	mov	r3, r0
 8005632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005636:	e00f      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800563c:	3328      	adds	r3, #40	@ 0x28
 800563e:	2100      	movs	r1, #0
 8005640:	4618      	mov	r0, r3
 8005642:	f001 fce3 	bl	800700c <RCCEx_PLL3_Config>
 8005646:	4603      	mov	r3, r0
 8005648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800564c:	e004      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005654:	e000      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10a      	bne.n	8005676 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005660:	4b7b      	ldr	r3, [pc, #492]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005664:	f023 0107 	bic.w	r1, r3, #7
 8005668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800566e:	4a78      	ldr	r2, [pc, #480]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005670:	430b      	orrs	r3, r1
 8005672:	6513      	str	r3, [r2, #80]	@ 0x50
 8005674:	e003      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005676:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800567a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800567e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005686:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800568a:	f04f 0b00 	mov.w	fp, #0
 800568e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005692:	d04c      	beq.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8005694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800569a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800569e:	d030      	beq.n	8005702 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80056a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a4:	d829      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80056a8:	d02d      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80056aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80056ac:	d825      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056ae:	2b80      	cmp	r3, #128	@ 0x80
 80056b0:	d018      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80056b2:	2b80      	cmp	r3, #128	@ 0x80
 80056b4:	d821      	bhi.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d002      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80056ba:	2b40      	cmp	r3, #64	@ 0x40
 80056bc:	d007      	beq.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80056be:	e01c      	b.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056c0:	4b63      	ldr	r3, [pc, #396]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c4:	4a62      	ldr	r2, [pc, #392]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80056c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056cc:	e01c      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d2:	3308      	adds	r3, #8
 80056d4:	2100      	movs	r1, #0
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 fbe6 	bl	8006ea8 <RCCEx_PLL2_Config>
 80056dc:	4603      	mov	r3, r0
 80056de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056e2:	e011      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056e8:	3328      	adds	r3, #40	@ 0x28
 80056ea:	2100      	movs	r1, #0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f001 fc8d 	bl	800700c <RCCEx_PLL3_Config>
 80056f2:	4603      	mov	r3, r0
 80056f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80056f8:	e006      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005700:	e002      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005702:	bf00      	nop
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8005706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10a      	bne.n	8005726 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005710:	4b4f      	ldr	r3, [pc, #316]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005714:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800571c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800571e:	4a4c      	ldr	r2, [pc, #304]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005720:	430b      	orrs	r3, r1
 8005722:	6513      	str	r3, [r2, #80]	@ 0x50
 8005724:	e003      	b.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800572a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800572e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800573a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800573e:	2300      	movs	r3, #0
 8005740:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8005744:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005748:	460b      	mov	r3, r1
 800574a:	4313      	orrs	r3, r2
 800574c:	d053      	beq.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800574e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005752:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005756:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800575a:	d035      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800575c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005760:	d82e      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005762:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005766:	d031      	beq.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005768:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800576c:	d828      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800576e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005772:	d01a      	beq.n	80057aa <HAL_RCCEx_PeriphCLKConfig+0x292>
 8005774:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005778:	d822      	bhi.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800577e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005782:	d007      	beq.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8005784:	e01c      	b.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005786:	4b32      	ldr	r3, [pc, #200]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578a:	4a31      	ldr	r2, [pc, #196]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800578c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005792:	e01c      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005798:	3308      	adds	r3, #8
 800579a:	2100      	movs	r1, #0
 800579c:	4618      	mov	r0, r3
 800579e:	f001 fb83 	bl	8006ea8 <RCCEx_PLL2_Config>
 80057a2:	4603      	mov	r3, r0
 80057a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057a8:	e011      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057ae:	3328      	adds	r3, #40	@ 0x28
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f001 fc2a 	bl	800700c <RCCEx_PLL3_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057be:	e006      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057c0:	2301      	movs	r3, #1
 80057c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057c6:	e002      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80057cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057d6:	4b1e      	ldr	r3, [pc, #120]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057da:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80057de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057e2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80057e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005850 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80057e8:	430b      	orrs	r3, r1
 80057ea:	6593      	str	r3, [r2, #88]	@ 0x58
 80057ec:	e003      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80057f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005802:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005806:	2300      	movs	r3, #0
 8005808:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800580c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005810:	460b      	mov	r3, r1
 8005812:	4313      	orrs	r3, r2
 8005814:	d056      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800581a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800581e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005822:	d038      	beq.n	8005896 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005824:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005828:	d831      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800582a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800582e:	d034      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005830:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005834:	d82b      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800583a:	d01d      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800583c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005840:	d825      	bhi.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8005846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800584a:	d00a      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800584c:	e01f      	b.n	800588e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800584e:	bf00      	nop
 8005850:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005854:	4ba2      	ldr	r3, [pc, #648]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	4aa1      	ldr	r2, [pc, #644]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800585a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005860:	e01c      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005862:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005866:	3308      	adds	r3, #8
 8005868:	2100      	movs	r1, #0
 800586a:	4618      	mov	r0, r3
 800586c:	f001 fb1c 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005870:	4603      	mov	r3, r0
 8005872:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005876:	e011      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005878:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587c:	3328      	adds	r3, #40	@ 0x28
 800587e:	2100      	movs	r1, #0
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fbc3 	bl	800700c <RCCEx_PLL3_Config>
 8005886:	4603      	mov	r3, r0
 8005888:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800588c:	e006      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005894:	e002      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005896:	bf00      	nop
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800589a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800589c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d10b      	bne.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058a4:	4b8e      	ldr	r3, [pc, #568]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80058ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058b0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80058b4:	4a8a      	ldr	r2, [pc, #552]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80058b6:	430b      	orrs	r3, r1
 80058b8:	6593      	str	r3, [r2, #88]	@ 0x58
 80058ba:	e003      	b.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80058c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058cc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80058d0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058d4:	2300      	movs	r3, #0
 80058d6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058da:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80058de:	460b      	mov	r3, r1
 80058e0:	4313      	orrs	r3, r2
 80058e2:	d03a      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80058e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058ea:	2b30      	cmp	r3, #48	@ 0x30
 80058ec:	d01f      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80058ee:	2b30      	cmp	r3, #48	@ 0x30
 80058f0:	d819      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058f2:	2b20      	cmp	r3, #32
 80058f4:	d00c      	beq.n	8005910 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	d815      	bhi.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d019      	beq.n	8005932 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80058fe:	2b10      	cmp	r3, #16
 8005900:	d111      	bne.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005902:	4b77      	ldr	r3, [pc, #476]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	4a76      	ldr	r2, [pc, #472]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800590e:	e011      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005910:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005914:	3308      	adds	r3, #8
 8005916:	2102      	movs	r1, #2
 8005918:	4618      	mov	r0, r3
 800591a:	f001 fac5 	bl	8006ea8 <RCCEx_PLL2_Config>
 800591e:	4603      	mov	r3, r0
 8005920:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005924:	e006      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800592c:	e002      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800592e:	bf00      	nop
 8005930:	e000      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005938:	2b00      	cmp	r3, #0
 800593a:	d10a      	bne.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800593c:	4b68      	ldr	r3, [pc, #416]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800593e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005940:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800594a:	4a65      	ldr	r2, [pc, #404]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800594c:	430b      	orrs	r3, r1
 800594e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005950:	e003      	b.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800595a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005962:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005966:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800596a:	2300      	movs	r3, #0
 800596c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005970:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005974:	460b      	mov	r3, r1
 8005976:	4313      	orrs	r3, r2
 8005978:	d051      	beq.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800597a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800597e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005980:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005984:	d035      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005986:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800598a:	d82e      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800598c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005990:	d031      	beq.n	80059f6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8005992:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005996:	d828      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800599c:	d01a      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800599e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059a2:	d822      	bhi.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80059a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059ac:	d007      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80059ae:	e01c      	b.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059b0:	4b4b      	ldr	r3, [pc, #300]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b4:	4a4a      	ldr	r2, [pc, #296]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80059b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059bc:	e01c      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059c2:	3308      	adds	r3, #8
 80059c4:	2100      	movs	r1, #0
 80059c6:	4618      	mov	r0, r3
 80059c8:	f001 fa6e 	bl	8006ea8 <RCCEx_PLL2_Config>
 80059cc:	4603      	mov	r3, r0
 80059ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d2:	e011      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80059d8:	3328      	adds	r3, #40	@ 0x28
 80059da:	2100      	movs	r1, #0
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 fb15 	bl	800700c <RCCEx_PLL3_Config>
 80059e2:	4603      	mov	r3, r0
 80059e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059e8:	e006      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80059f0:	e002      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059f2:	bf00      	nop
 80059f4:	e000      	b.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80059f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10a      	bne.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a00:	4b37      	ldr	r3, [pc, #220]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a04:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a0e:	4a34      	ldr	r2, [pc, #208]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005a10:	430b      	orrs	r3, r1
 8005a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a14:	e003      	b.n	8005a1e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a26:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a34:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	d056      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a48:	d033      	beq.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005a4a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a4e:	d82c      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a54:	d02f      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005a56:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a5a:	d826      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a60:	d02b      	beq.n	8005aba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8005a62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a66:	d820      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a6c:	d012      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005a6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a72:	d81a      	bhi.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d022      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a7c:	d115      	bne.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a82:	3308      	adds	r3, #8
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f001 fa0e 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005a92:	e015      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a98:	3328      	adds	r3, #40	@ 0x28
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f001 fab5 	bl	800700c <RCCEx_PLL3_Config>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aa8:	e00a      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ab0:	e006      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ab2:	bf00      	nop
 8005ab4:	e004      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005ab6:	bf00      	nop
 8005ab8:	e002      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8005abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ac8:	4b05      	ldr	r3, [pc, #20]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ad4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ad6:	4a02      	ldr	r2, [pc, #8]	@ (8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005ad8:	430b      	orrs	r3, r1
 8005ada:	6513      	str	r3, [r2, #80]	@ 0x50
 8005adc:	e006      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005ade:	bf00      	nop
 8005ae0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ae8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005aec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005af8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005afc:	2300      	movs	r3, #0
 8005afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b02:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b06:	460b      	mov	r3, r1
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	d055      	beq.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005b14:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b18:	d033      	beq.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b1e:	d82c      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b24:	d02f      	beq.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8005b26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2a:	d826      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b2c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b30:	d02b      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8005b32:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b36:	d820      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3c:	d012      	beq.n	8005b64 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005b3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b42:	d81a      	bhi.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d022      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005b48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b4c:	d115      	bne.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b52:	3308      	adds	r3, #8
 8005b54:	2101      	movs	r1, #1
 8005b56:	4618      	mov	r0, r3
 8005b58:	f001 f9a6 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b62:	e015      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b68:	3328      	adds	r3, #40	@ 0x28
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 fa4d 	bl	800700c <RCCEx_PLL3_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b78:	e00a      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b80:	e006      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b82:	bf00      	nop
 8005b84:	e004      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b86:	bf00      	nop
 8005b88:	e002      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b8a:	bf00      	nop
 8005b8c:	e000      	b.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005b8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10b      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005b98:	4ba3      	ldr	r3, [pc, #652]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ba8:	4a9f      	ldr	r2, [pc, #636]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005baa:	430b      	orrs	r3, r1
 8005bac:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bae:	e003      	b.n	8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bc0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bc8:	2300      	movs	r3, #0
 8005bca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005bce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	d037      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be2:	d00e      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8005be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be8:	d816      	bhi.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d018      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8005bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bf2:	d111      	bne.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bf4:	4b8c      	ldr	r3, [pc, #560]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	4a8b      	ldr	r2, [pc, #556]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005bfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c00:	e00f      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c06:	3308      	adds	r3, #8
 8005c08:	2101      	movs	r1, #1
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f001 f94c 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005c10:	4603      	mov	r3, r0
 8005c12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c16:	e004      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c1e:	e000      	b.n	8005c22 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10a      	bne.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c2a:	4b7f      	ldr	r3, [pc, #508]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c2e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c38:	4a7b      	ldr	r2, [pc, #492]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c3e:	e003      	b.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c50:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c54:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c5e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c62:	460b      	mov	r3, r1
 8005c64:	4313      	orrs	r3, r2
 8005c66:	d039      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c6e:	2b03      	cmp	r3, #3
 8005c70:	d81c      	bhi.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x794>
 8005c72:	a201      	add	r2, pc, #4	@ (adr r2, 8005c78 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8005c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c78:	08005cb5 	.word	0x08005cb5
 8005c7c:	08005c89 	.word	0x08005c89
 8005c80:	08005c97 	.word	0x08005c97
 8005c84:	08005cb5 	.word	0x08005cb5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c88:	4b67      	ldr	r3, [pc, #412]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	4a66      	ldr	r2, [pc, #408]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005c8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005c94:	e00f      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005c96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c9a:	3308      	adds	r3, #8
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f001 f902 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005caa:	e004      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005cb2:	e000      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8005cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cbe:	4b5a      	ldr	r3, [pc, #360]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cc2:	f023 0103 	bic.w	r1, r3, #3
 8005cc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ccc:	4a56      	ldr	r2, [pc, #344]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005cce:	430b      	orrs	r3, r1
 8005cd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cd2:	e003      	b.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005ce8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cec:	2300      	movs	r3, #0
 8005cee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cf2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f000 809f 	beq.w	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cfe:	4b4b      	ldr	r3, [pc, #300]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a4a      	ldr	r2, [pc, #296]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d08:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fa3f 	bl	800118c <HAL_GetTick>
 8005d0e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d12:	e00b      	b.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d14:	f7fb fa3a 	bl	800118c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	2b64      	cmp	r3, #100	@ 0x64
 8005d22:	d903      	bls.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d2a:	e005      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005e2c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d0ed      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005d38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d179      	bne.n	8005e34 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d40:	4b39      	ldr	r3, [pc, #228]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d42:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d48:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d4c:	4053      	eors	r3, r2
 8005d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d015      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d56:	4b34      	ldr	r3, [pc, #208]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d5e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d62:	4b31      	ldr	r3, [pc, #196]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d66:	4a30      	ldr	r2, [pc, #192]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d6e:	4b2e      	ldr	r3, [pc, #184]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d72:	4a2d      	ldr	r2, [pc, #180]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d74:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d78:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d7a:	4a2b      	ldr	r2, [pc, #172]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005d7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005d80:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005d8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d8e:	d118      	bne.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d90:	f7fb f9fc 	bl	800118c <HAL_GetTick>
 8005d94:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d98:	e00d      	b.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d9a:	f7fb f9f7 	bl	800118c <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005da4:	1ad2      	subs	r2, r2, r3
 8005da6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d903      	bls.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8005db4:	e005      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db6:	4b1c      	ldr	r3, [pc, #112]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005db8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0eb      	beq.n	8005d9a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8005dc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d129      	bne.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dda:	d10e      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8005ddc:	4b12      	ldr	r3, [pc, #72]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005de8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005dec:	091a      	lsrs	r2, r3, #4
 8005dee:	4b10      	ldr	r3, [pc, #64]	@ (8005e30 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8005df0:	4013      	ands	r3, r2
 8005df2:	4a0d      	ldr	r2, [pc, #52]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005df4:	430b      	orrs	r3, r1
 8005df6:	6113      	str	r3, [r2, #16]
 8005df8:	e005      	b.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8005dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e00:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e04:	6113      	str	r3, [r2, #16]
 8005e06:	4b08      	ldr	r3, [pc, #32]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e08:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e16:	4a04      	ldr	r2, [pc, #16]	@ (8005e28 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005e18:	430b      	orrs	r3, r1
 8005e1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e1c:	e00e      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8005e26:	e009      	b.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005e28:	58024400 	.word	0x58024400
 8005e2c:	58024800 	.word	0x58024800
 8005e30:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e44:	f002 0301 	and.w	r3, r2, #1
 8005e48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e56:	460b      	mov	r3, r1
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	f000 8089 	beq.w	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e62:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005e64:	2b28      	cmp	r3, #40	@ 0x28
 8005e66:	d86b      	bhi.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005e68:	a201      	add	r2, pc, #4	@ (adr r2, 8005e70 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6e:	bf00      	nop
 8005e70:	08005f49 	.word	0x08005f49
 8005e74:	08005f41 	.word	0x08005f41
 8005e78:	08005f41 	.word	0x08005f41
 8005e7c:	08005f41 	.word	0x08005f41
 8005e80:	08005f41 	.word	0x08005f41
 8005e84:	08005f41 	.word	0x08005f41
 8005e88:	08005f41 	.word	0x08005f41
 8005e8c:	08005f41 	.word	0x08005f41
 8005e90:	08005f15 	.word	0x08005f15
 8005e94:	08005f41 	.word	0x08005f41
 8005e98:	08005f41 	.word	0x08005f41
 8005e9c:	08005f41 	.word	0x08005f41
 8005ea0:	08005f41 	.word	0x08005f41
 8005ea4:	08005f41 	.word	0x08005f41
 8005ea8:	08005f41 	.word	0x08005f41
 8005eac:	08005f41 	.word	0x08005f41
 8005eb0:	08005f2b 	.word	0x08005f2b
 8005eb4:	08005f41 	.word	0x08005f41
 8005eb8:	08005f41 	.word	0x08005f41
 8005ebc:	08005f41 	.word	0x08005f41
 8005ec0:	08005f41 	.word	0x08005f41
 8005ec4:	08005f41 	.word	0x08005f41
 8005ec8:	08005f41 	.word	0x08005f41
 8005ecc:	08005f41 	.word	0x08005f41
 8005ed0:	08005f49 	.word	0x08005f49
 8005ed4:	08005f41 	.word	0x08005f41
 8005ed8:	08005f41 	.word	0x08005f41
 8005edc:	08005f41 	.word	0x08005f41
 8005ee0:	08005f41 	.word	0x08005f41
 8005ee4:	08005f41 	.word	0x08005f41
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f41 	.word	0x08005f41
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f41 	.word	0x08005f41
 8005ef8:	08005f41 	.word	0x08005f41
 8005efc:	08005f41 	.word	0x08005f41
 8005f00:	08005f41 	.word	0x08005f41
 8005f04:	08005f41 	.word	0x08005f41
 8005f08:	08005f41 	.word	0x08005f41
 8005f0c:	08005f41 	.word	0x08005f41
 8005f10:	08005f49 	.word	0x08005f49
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f18:	3308      	adds	r3, #8
 8005f1a:	2101      	movs	r1, #1
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f000 ffc3 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005f22:	4603      	mov	r3, r0
 8005f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f28:	e00f      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f2e:	3328      	adds	r3, #40	@ 0x28
 8005f30:	2101      	movs	r1, #1
 8005f32:	4618      	mov	r0, r3
 8005f34:	f001 f86a 	bl	800700c <RCCEx_PLL3_Config>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f3e:	e004      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f46:	e000      	b.n	8005f4a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d10a      	bne.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f52:	4bbf      	ldr	r3, [pc, #764]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f56:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f5e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f60:	4abb      	ldr	r2, [pc, #748]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f66:	e003      	b.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f002 0302 	and.w	r3, r2, #2
 8005f7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f80:	2300      	movs	r3, #0
 8005f82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f8a:	460b      	mov	r3, r1
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	d041      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d824      	bhi.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa0:	08005fed 	.word	0x08005fed
 8005fa4:	08005fb9 	.word	0x08005fb9
 8005fa8:	08005fcf 	.word	0x08005fcf
 8005fac:	08005fed 	.word	0x08005fed
 8005fb0:	08005fed 	.word	0x08005fed
 8005fb4:	08005fed 	.word	0x08005fed
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 ff71 	bl	8006ea8 <RCCEx_PLL2_Config>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fcc:	e00f      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fd2:	3328      	adds	r3, #40	@ 0x28
 8005fd4:	2101      	movs	r1, #1
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f001 f818 	bl	800700c <RCCEx_PLL3_Config>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fe2:	e004      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fea:	e000      	b.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005fec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d10a      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005ff6:	4b96      	ldr	r3, [pc, #600]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffa:	f023 0107 	bic.w	r1, r3, #7
 8005ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006002:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006004:	4a92      	ldr	r2, [pc, #584]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006006:	430b      	orrs	r3, r1
 8006008:	6553      	str	r3, [r2, #84]	@ 0x54
 800600a:	e003      	b.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800600c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 0304 	and.w	r3, r2, #4
 8006020:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006024:	2300      	movs	r3, #0
 8006026:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800602a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800602e:	460b      	mov	r3, r1
 8006030:	4313      	orrs	r3, r2
 8006032:	d044      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006038:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800603c:	2b05      	cmp	r3, #5
 800603e:	d825      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8006040:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8006042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006046:	bf00      	nop
 8006048:	08006095 	.word	0x08006095
 800604c:	08006061 	.word	0x08006061
 8006050:	08006077 	.word	0x08006077
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006064:	3308      	adds	r3, #8
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ff1d 	bl	8006ea8 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607a:	3328      	adds	r3, #40	@ 0x28
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f000 ffc4 	bl	800700c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10b      	bne.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800609e:	4b6c      	ldr	r3, [pc, #432]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060a2:	f023 0107 	bic.w	r1, r3, #7
 80060a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80060ae:	4a68      	ldr	r2, [pc, #416]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80060b0:	430b      	orrs	r3, r1
 80060b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80060b4:	e003      	b.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80060ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	f002 0320 	and.w	r3, r2, #32
 80060ca:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060ce:	2300      	movs	r3, #0
 80060d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060d8:	460b      	mov	r3, r1
 80060da:	4313      	orrs	r3, r2
 80060dc:	d055      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060ea:	d033      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80060ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80060f0:	d82c      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f6:	d02f      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80060f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060fc:	d826      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80060fe:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006102:	d02b      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8006104:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006108:	d820      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800610a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800610e:	d012      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8006110:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006114:	d81a      	bhi.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d022      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800611a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800611e:	d115      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006124:	3308      	adds	r3, #8
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f000 febd 	bl	8006ea8 <RCCEx_PLL2_Config>
 800612e:	4603      	mov	r3, r0
 8006130:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006134:	e015      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800613a:	3328      	adds	r3, #40	@ 0x28
 800613c:	2102      	movs	r1, #2
 800613e:	4618      	mov	r0, r3
 8006140:	f000 ff64 	bl	800700c <RCCEx_PLL3_Config>
 8006144:	4603      	mov	r3, r0
 8006146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800614a:	e00a      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006152:	e006      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006154:	bf00      	nop
 8006156:	e004      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006158:	bf00      	nop
 800615a:	e002      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800615c:	bf00      	nop
 800615e:	e000      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8006160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006162:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10b      	bne.n	8006182 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800616a:	4b39      	ldr	r3, [pc, #228]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800616c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800616e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800617a:	4a35      	ldr	r2, [pc, #212]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800617c:	430b      	orrs	r3, r1
 800617e:	6553      	str	r3, [r2, #84]	@ 0x54
 8006180:	e003      	b.n	800618a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800618a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8006196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800619a:	2300      	movs	r3, #0
 800619c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80061a0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80061a4:	460b      	mov	r3, r1
 80061a6:	4313      	orrs	r3, r2
 80061a8:	d058      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80061b2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061b6:	d033      	beq.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80061b8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061bc:	d82c      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c2:	d02f      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80061c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061c8:	d826      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ce:	d02b      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80061d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061d4:	d820      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061da:	d012      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80061dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061e0:	d81a      	bhi.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d022      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80061e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ea:	d115      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061f0:	3308      	adds	r3, #8
 80061f2:	2100      	movs	r1, #0
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 fe57 	bl	8006ea8 <RCCEx_PLL2_Config>
 80061fa:	4603      	mov	r3, r0
 80061fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006200:	e015      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006206:	3328      	adds	r3, #40	@ 0x28
 8006208:	2102      	movs	r1, #2
 800620a:	4618      	mov	r0, r3
 800620c:	f000 fefe 	bl	800700c <RCCEx_PLL3_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006216:	e00a      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800621e:	e006      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006220:	bf00      	nop
 8006222:	e004      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006224:	bf00      	nop
 8006226:	e002      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8006228:	bf00      	nop
 800622a:	e000      	b.n	800622e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800622c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800622e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10e      	bne.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006236:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800623a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800623e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006242:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006246:	4a02      	ldr	r2, [pc, #8]	@ (8006250 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8006248:	430b      	orrs	r3, r1
 800624a:	6593      	str	r3, [r2, #88]	@ 0x58
 800624c:	e006      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800624e:	bf00      	nop
 8006250:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006254:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006258:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800625c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006264:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006268:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800626c:	2300      	movs	r3, #0
 800626e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006272:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8006276:	460b      	mov	r3, r1
 8006278:	4313      	orrs	r3, r2
 800627a:	d055      	beq.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800627c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006280:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006284:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006288:	d033      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800628a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800628e:	d82c      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8006290:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006294:	d02f      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8006296:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800629a:	d826      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800629c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062a0:	d02b      	beq.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80062a2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062a6:	d820      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ac:	d012      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80062ae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062b2:	d81a      	bhi.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d022      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062bc:	d115      	bne.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062c2:	3308      	adds	r3, #8
 80062c4:	2100      	movs	r1, #0
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 fdee 	bl	8006ea8 <RCCEx_PLL2_Config>
 80062cc:	4603      	mov	r3, r0
 80062ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062d2:	e015      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062d8:	3328      	adds	r3, #40	@ 0x28
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f000 fe95 	bl	800700c <RCCEx_PLL3_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062e8:	e00a      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80062f0:	e006      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062f2:	bf00      	nop
 80062f4:	e004      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062f6:	bf00      	nop
 80062f8:	e002      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062fa:	bf00      	nop
 80062fc:	e000      	b.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80062fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006300:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006304:	2b00      	cmp	r3, #0
 8006306:	d10b      	bne.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006308:	4ba1      	ldr	r3, [pc, #644]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800630a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800630c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006314:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006318:	4a9d      	ldr	r2, [pc, #628]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800631a:	430b      	orrs	r3, r1
 800631c:	6593      	str	r3, [r2, #88]	@ 0x58
 800631e:	e003      	b.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800632c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006330:	f002 0308 	and.w	r3, r2, #8
 8006334:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006338:	2300      	movs	r3, #0
 800633a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800633e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006342:	460b      	mov	r3, r1
 8006344:	4313      	orrs	r3, r2
 8006346:	d01e      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8006348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006354:	d10c      	bne.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800635a:	3328      	adds	r3, #40	@ 0x28
 800635c:	2102      	movs	r1, #2
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fe54 	bl	800700c <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d002      	beq.n	8006370 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800636a:	2301      	movs	r3, #1
 800636c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006370:	4b87      	ldr	r3, [pc, #540]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006372:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006374:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800637c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006380:	4a83      	ldr	r2, [pc, #524]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006382:	430b      	orrs	r3, r1
 8006384:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f002 0310 	and.w	r3, r2, #16
 8006392:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006396:	2300      	movs	r3, #0
 8006398:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800639c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80063a0:	460b      	mov	r3, r1
 80063a2:	4313      	orrs	r3, r2
 80063a4:	d01e      	beq.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063b2:	d10c      	bne.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063b8:	3328      	adds	r3, #40	@ 0x28
 80063ba:	2102      	movs	r1, #2
 80063bc:	4618      	mov	r0, r3
 80063be:	f000 fe25 	bl	800700c <RCCEx_PLL3_Config>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ce:	4b70      	ldr	r3, [pc, #448]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063d2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063da:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80063de:	4a6c      	ldr	r2, [pc, #432]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80063e0:	430b      	orrs	r3, r1
 80063e2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80063e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ec:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80063f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063fa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063fe:	460b      	mov	r3, r1
 8006400:	4313      	orrs	r3, r2
 8006402:	d03e      	beq.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006408:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800640c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006410:	d022      	beq.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8006412:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006416:	d81b      	bhi.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800641c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006420:	d00b      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8006422:	e015      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006428:	3308      	adds	r3, #8
 800642a:	2100      	movs	r1, #0
 800642c:	4618      	mov	r0, r3
 800642e:	f000 fd3b 	bl	8006ea8 <RCCEx_PLL2_Config>
 8006432:	4603      	mov	r3, r0
 8006434:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006438:	e00f      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800643a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800643e:	3328      	adds	r3, #40	@ 0x28
 8006440:	2102      	movs	r1, #2
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fde2 	bl	800700c <RCCEx_PLL3_Config>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800644e:	e004      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006456:	e000      	b.n	800645a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8006458:	bf00      	nop
    }

    if (ret == HAL_OK)
 800645a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10b      	bne.n	800647a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006462:	4b4b      	ldr	r3, [pc, #300]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006464:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006466:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800646a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800646e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006472:	4a47      	ldr	r2, [pc, #284]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006474:	430b      	orrs	r3, r1
 8006476:	6593      	str	r3, [r2, #88]	@ 0x58
 8006478:	e003      	b.n	8006482 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800647a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800647e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800648e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006490:	2300      	movs	r3, #0
 8006492:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006494:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006498:	460b      	mov	r3, r1
 800649a:	4313      	orrs	r3, r2
 800649c:	d03b      	beq.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800649e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064aa:	d01f      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80064ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064b0:	d818      	bhi.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80064b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064b6:	d003      	beq.n	80064c0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80064b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064bc:	d007      	beq.n	80064ce <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80064be:	e011      	b.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c0:	4b33      	ldr	r3, [pc, #204]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c4:	4a32      	ldr	r2, [pc, #200]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064cc:	e00f      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80064d2:	3328      	adds	r3, #40	@ 0x28
 80064d4:	2101      	movs	r1, #1
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fd98 	bl	800700c <RCCEx_PLL3_Config>
 80064dc:	4603      	mov	r3, r0
 80064de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80064e2:	e004      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80064ea:	e000      	b.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80064ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d10b      	bne.n	800650e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80064f6:	4b26      	ldr	r3, [pc, #152]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80064f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064fa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80064fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006506:	4a22      	ldr	r2, [pc, #136]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006508:	430b      	orrs	r3, r1
 800650a:	6553      	str	r3, [r2, #84]	@ 0x54
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800650e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800651a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800651e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006522:	673b      	str	r3, [r7, #112]	@ 0x70
 8006524:	2300      	movs	r3, #0
 8006526:	677b      	str	r3, [r7, #116]	@ 0x74
 8006528:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800652c:	460b      	mov	r3, r1
 800652e:	4313      	orrs	r3, r2
 8006530:	d034      	beq.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006538:	2b00      	cmp	r3, #0
 800653a:	d003      	beq.n	8006544 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800653c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006540:	d007      	beq.n	8006552 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8006542:	e011      	b.n	8006568 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006544:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006548:	4a11      	ldr	r2, [pc, #68]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800654a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800654e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006550:	e00e      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006556:	3308      	adds	r3, #8
 8006558:	2102      	movs	r1, #2
 800655a:	4618      	mov	r0, r3
 800655c:	f000 fca4 	bl	8006ea8 <RCCEx_PLL2_Config>
 8006560:	4603      	mov	r3, r0
 8006562:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006566:	e003      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800656e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006570:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10d      	bne.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006578:	4b05      	ldr	r3, [pc, #20]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800657a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800657c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006586:	4a02      	ldr	r2, [pc, #8]	@ (8006590 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006588:	430b      	orrs	r3, r1
 800658a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800658c:	e006      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800658e:	bf00      	nop
 8006590:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800659c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065a4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065aa:	2300      	movs	r3, #0
 80065ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065ae:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065b2:	460b      	mov	r3, r1
 80065b4:	4313      	orrs	r3, r2
 80065b6:	d00c      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065bc:	3328      	adds	r3, #40	@ 0x28
 80065be:	2102      	movs	r1, #2
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 fd23 	bl	800700c <RCCEx_PLL3_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d002      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065de:	663b      	str	r3, [r7, #96]	@ 0x60
 80065e0:	2300      	movs	r3, #0
 80065e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80065e4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d038      	beq.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80065ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80065f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065fa:	d018      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80065fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006600:	d811      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006602:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006606:	d014      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006608:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800660c:	d80b      	bhi.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800660e:	2b00      	cmp	r3, #0
 8006610:	d011      	beq.n	8006636 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8006612:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006616:	d106      	bne.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006618:	4bc3      	ldr	r3, [pc, #780]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800661c:	4ac2      	ldr	r2, [pc, #776]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800661e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006622:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006624:	e008      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800662c:	e004      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800662e:	bf00      	nop
 8006630:	e002      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006632:	bf00      	nop
 8006634:	e000      	b.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006636:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006638:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800663c:	2b00      	cmp	r3, #0
 800663e:	d10b      	bne.n	8006658 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006640:	4bb9      	ldr	r3, [pc, #740]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006644:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800664c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006650:	4ab5      	ldr	r2, [pc, #724]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006652:	430b      	orrs	r3, r1
 8006654:	6553      	str	r3, [r2, #84]	@ 0x54
 8006656:	e003      	b.n	8006660 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800665c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006668:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800666c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800666e:	2300      	movs	r3, #0
 8006670:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006672:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006676:	460b      	mov	r3, r1
 8006678:	4313      	orrs	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800667c:	4baa      	ldr	r3, [pc, #680]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668a:	4aa7      	ldr	r2, [pc, #668]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800668c:	430b      	orrs	r3, r1
 800668e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800669c:	653b      	str	r3, [r7, #80]	@ 0x50
 800669e:	2300      	movs	r3, #0
 80066a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80066a2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80066ac:	4b9e      	ldr	r3, [pc, #632]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80066b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066b8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80066bc:	4a9a      	ldr	r2, [pc, #616]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066be:	430b      	orrs	r3, r1
 80066c0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80066ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066d0:	2300      	movs	r3, #0
 80066d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066d4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80066d8:	460b      	mov	r3, r1
 80066da:	4313      	orrs	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066de:	4b92      	ldr	r3, [pc, #584]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066e2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80066e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066ec:	4a8e      	ldr	r2, [pc, #568]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80066ee:	430b      	orrs	r3, r1
 80066f0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fa:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006700:	2300      	movs	r3, #0
 8006702:	647b      	str	r3, [r7, #68]	@ 0x44
 8006704:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006708:	460b      	mov	r3, r1
 800670a:	4313      	orrs	r3, r2
 800670c:	d00e      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800670e:	4b86      	ldr	r3, [pc, #536]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	4a85      	ldr	r2, [pc, #532]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006714:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006718:	6113      	str	r3, [r2, #16]
 800671a:	4b83      	ldr	r3, [pc, #524]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800671c:	6919      	ldr	r1, [r3, #16]
 800671e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006722:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006726:	4a80      	ldr	r2, [pc, #512]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006728:	430b      	orrs	r3, r1
 800672a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800672c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006734:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006738:	63bb      	str	r3, [r7, #56]	@ 0x38
 800673a:	2300      	movs	r3, #0
 800673c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800673e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006742:	460b      	mov	r3, r1
 8006744:	4313      	orrs	r3, r2
 8006746:	d009      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006748:	4b77      	ldr	r3, [pc, #476]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800674a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800674c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006756:	4a74      	ldr	r2, [pc, #464]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006758:	430b      	orrs	r3, r1
 800675a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800675c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006764:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006768:	633b      	str	r3, [r7, #48]	@ 0x30
 800676a:	2300      	movs	r3, #0
 800676c:	637b      	str	r3, [r7, #52]	@ 0x34
 800676e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006772:	460b      	mov	r3, r1
 8006774:	4313      	orrs	r3, r2
 8006776:	d00a      	beq.n	800678e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006778:	4b6b      	ldr	r3, [pc, #428]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800677a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006784:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006788:	4a67      	ldr	r2, [pc, #412]	@ (8006928 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800678a:	430b      	orrs	r3, r1
 800678c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800678e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006796:	2100      	movs	r1, #0
 8006798:	62b9      	str	r1, [r7, #40]	@ 0x28
 800679a:	f003 0301 	and.w	r3, r3, #1
 800679e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067a0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80067a4:	460b      	mov	r3, r1
 80067a6:	4313      	orrs	r3, r2
 80067a8:	d011      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ae:	3308      	adds	r3, #8
 80067b0:	2100      	movs	r1, #0
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 fb78 	bl	8006ea8 <RCCEx_PLL2_Config>
 80067b8:	4603      	mov	r3, r0
 80067ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	2100      	movs	r1, #0
 80067d8:	6239      	str	r1, [r7, #32]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
 80067e0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067e4:	460b      	mov	r3, r1
 80067e6:	4313      	orrs	r3, r2
 80067e8:	d011      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ee:	3308      	adds	r3, #8
 80067f0:	2101      	movs	r1, #1
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 fb58 	bl	8006ea8 <RCCEx_PLL2_Config>
 80067f8:	4603      	mov	r3, r0
 80067fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80067fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006802:	2b00      	cmp	r3, #0
 8006804:	d003      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800680a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800680e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006816:	2100      	movs	r1, #0
 8006818:	61b9      	str	r1, [r7, #24]
 800681a:	f003 0304 	and.w	r3, r3, #4
 800681e:	61fb      	str	r3, [r7, #28]
 8006820:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006824:	460b      	mov	r3, r1
 8006826:	4313      	orrs	r3, r2
 8006828:	d011      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800682a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800682e:	3308      	adds	r3, #8
 8006830:	2102      	movs	r1, #2
 8006832:	4618      	mov	r0, r3
 8006834:	f000 fb38 	bl	8006ea8 <RCCEx_PLL2_Config>
 8006838:	4603      	mov	r3, r0
 800683a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800683e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800684a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800684e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006856:	2100      	movs	r1, #0
 8006858:	6139      	str	r1, [r7, #16]
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	617b      	str	r3, [r7, #20]
 8006860:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006864:	460b      	mov	r3, r1
 8006866:	4313      	orrs	r3, r2
 8006868:	d011      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800686a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800686e:	3328      	adds	r3, #40	@ 0x28
 8006870:	2100      	movs	r1, #0
 8006872:	4618      	mov	r0, r3
 8006874:	f000 fbca 	bl	800700c <RCCEx_PLL3_Config>
 8006878:	4603      	mov	r3, r0
 800687a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800687e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006882:	2b00      	cmp	r3, #0
 8006884:	d003      	beq.n	800688e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800688a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800688e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	2100      	movs	r1, #0
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80068a4:	460b      	mov	r3, r1
 80068a6:	4313      	orrs	r3, r2
 80068a8:	d011      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80068aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ae:	3328      	adds	r3, #40	@ 0x28
 80068b0:	2101      	movs	r1, #1
 80068b2:	4618      	mov	r0, r3
 80068b4:	f000 fbaa 	bl	800700c <RCCEx_PLL3_Config>
 80068b8:	4603      	mov	r3, r0
 80068ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d003      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	2100      	movs	r1, #0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	f003 0320 	and.w	r3, r3, #32
 80068de:	607b      	str	r3, [r7, #4]
 80068e0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068e4:	460b      	mov	r3, r1
 80068e6:	4313      	orrs	r3, r2
 80068e8:	d011      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ee:	3328      	adds	r3, #40	@ 0x28
 80068f0:	2102      	movs	r1, #2
 80068f2:	4618      	mov	r0, r3
 80068f4:	f000 fb8a 	bl	800700c <RCCEx_PLL3_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006902:	2b00      	cmp	r3, #0
 8006904:	d003      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800690a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800690e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	e000      	b.n	800691c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8006922:	46bd      	mov	sp, r7
 8006924:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006928:	58024400 	.word	0x58024400

0800692c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006930:	f7fe fd96 	bl	8005460 <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b06      	ldr	r3, [pc, #24]	@ (8006950 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	091b      	lsrs	r3, r3, #4
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4904      	ldr	r1, [pc, #16]	@ (8006954 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	f003 031f 	and.w	r3, r3, #31
 8006948:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800694c:	4618      	mov	r0, r3
 800694e:	bd80      	pop	{r7, pc}
 8006950:	58024400 	.word	0x58024400
 8006954:	0800923c 	.word	0x0800923c

08006958 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006958:	b480      	push	{r7}
 800695a:	b089      	sub	sp, #36	@ 0x24
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006960:	4ba1      	ldr	r3, [pc, #644]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800696a:	4b9f      	ldr	r3, [pc, #636]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	0b1b      	lsrs	r3, r3, #12
 8006970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006974:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006976:	4b9c      	ldr	r3, [pc, #624]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697a:	091b      	lsrs	r3, r3, #4
 800697c:	f003 0301 	and.w	r3, r3, #1
 8006980:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006982:	4b99      	ldr	r3, [pc, #612]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006986:	08db      	lsrs	r3, r3, #3
 8006988:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	fb02 f303 	mul.w	r3, r2, r3
 8006992:	ee07 3a90 	vmov	s15, r3
 8006996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800699a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8111 	beq.w	8006bc8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	2b02      	cmp	r3, #2
 80069aa:	f000 8083 	beq.w	8006ab4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	f200 80a1 	bhi.w	8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d003      	beq.n	80069c4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d056      	beq.n	8006a70 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069c2:	e099      	b.n	8006af8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069c4:	4b88      	ldr	r3, [pc, #544]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f003 0320 	and.w	r3, r3, #32
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d02d      	beq.n	8006a2c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069d0:	4b85      	ldr	r3, [pc, #532]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	08db      	lsrs	r3, r3, #3
 80069d6:	f003 0303 	and.w	r3, r3, #3
 80069da:	4a84      	ldr	r2, [pc, #528]	@ (8006bec <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
 80069e0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	ee07 3a90 	vmov	s15, r3
 80069e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069fa:	4b7b      	ldr	r3, [pc, #492]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a0e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a2a:	e087      	b.n	8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	ee07 3a90 	vmov	s15, r3
 8006a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a36:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a3e:	4b6a      	ldr	r3, [pc, #424]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a46:	ee07 3a90 	vmov	s15, r3
 8006a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a52:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a6e:	e065      	b.n	8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a7a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a82:	4b59      	ldr	r3, [pc, #356]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a96:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aa2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ab2:	e043      	b.n	8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006abe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ac6:	4b48      	ldr	r3, [pc, #288]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ada:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ae6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006af6:	e021      	b.n	8006b3c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b02:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b0a:	4b37      	ldr	r3, [pc, #220]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b1e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b3a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b3c:	4b2a      	ldr	r3, [pc, #168]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	0a5b      	lsrs	r3, r3, #9
 8006b42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b46:	ee07 3a90 	vmov	s15, r3
 8006b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b56:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b62:	ee17 2a90 	vmov	r2, s15
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	0c1b      	lsrs	r3, r3, #16
 8006b70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b74:	ee07 3a90 	vmov	s15, r3
 8006b78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b80:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b90:	ee17 2a90 	vmov	r2, s15
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b98:	4b13      	ldr	r3, [pc, #76]	@ (8006be8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9c:	0e1b      	lsrs	r3, r3, #24
 8006b9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbe:	ee17 2a90 	vmov	r2, s15
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006bc6:	e008      	b.n	8006bda <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	609a      	str	r2, [r3, #8]
}
 8006bda:	bf00      	nop
 8006bdc:	3724      	adds	r7, #36	@ 0x24
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	58024400 	.word	0x58024400
 8006bec:	03d09000 	.word	0x03d09000
 8006bf0:	46000000 	.word	0x46000000
 8006bf4:	4c742400 	.word	0x4c742400
 8006bf8:	4a742400 	.word	0x4a742400
 8006bfc:	4bbebc20 	.word	0x4bbebc20

08006c00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b089      	sub	sp, #36	@ 0x24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c08:	4ba1      	ldr	r3, [pc, #644]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c0c:	f003 0303 	and.w	r3, r3, #3
 8006c10:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c12:	4b9f      	ldr	r3, [pc, #636]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c16:	0d1b      	lsrs	r3, r3, #20
 8006c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c1c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c1e:	4b9c      	ldr	r3, [pc, #624]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c22:	0a1b      	lsrs	r3, r3, #8
 8006c24:	f003 0301 	and.w	r3, r3, #1
 8006c28:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c2a:	4b99      	ldr	r3, [pc, #612]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2e:	08db      	lsrs	r3, r3, #3
 8006c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	fb02 f303 	mul.w	r3, r2, r3
 8006c3a:	ee07 3a90 	vmov	s15, r3
 8006c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c42:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c46:	697b      	ldr	r3, [r7, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 8111 	beq.w	8006e70 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	f000 8083 	beq.w	8006d5c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	f200 80a1 	bhi.w	8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d003      	beq.n	8006c6c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c64:	69bb      	ldr	r3, [r7, #24]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d056      	beq.n	8006d18 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c6a:	e099      	b.n	8006da0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c6c:	4b88      	ldr	r3, [pc, #544]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02d      	beq.n	8006cd4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c78:	4b85      	ldr	r3, [pc, #532]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	08db      	lsrs	r3, r3, #3
 8006c7e:	f003 0303 	and.w	r3, r3, #3
 8006c82:	4a84      	ldr	r2, [pc, #528]	@ (8006e94 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c84:	fa22 f303 	lsr.w	r3, r2, r3
 8006c88:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	ee07 3a90 	vmov	s15, r3
 8006c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ca2:	4b7b      	ldr	r3, [pc, #492]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cb6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006cd2:	e087      	b.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cde:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e9c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ce6:	4b6a      	ldr	r3, [pc, #424]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cee:	ee07 3a90 	vmov	s15, r3
 8006cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cfa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d16:	e065      	b.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d22:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d2a:	4b59      	ldr	r3, [pc, #356]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d3e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d5a:	e043      	b.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d66:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d6e:	4b48      	ldr	r3, [pc, #288]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d82:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d9e:	e021      	b.n	8006de4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006daa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006db2:	4b37      	ldr	r3, [pc, #220]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dc6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006de2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006de4:	4b2a      	ldr	r3, [pc, #168]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de8:	0a5b      	lsrs	r3, r3, #9
 8006dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dfa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006dfe:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e0a:	ee17 2a90 	vmov	r2, s15
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e12:	4b1f      	ldr	r3, [pc, #124]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e16:	0c1b      	lsrs	r3, r3, #16
 8006e18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e1c:	ee07 3a90 	vmov	s15, r3
 8006e20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e28:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e38:	ee17 2a90 	vmov	r2, s15
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e40:	4b13      	ldr	r3, [pc, #76]	@ (8006e90 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e44:	0e1b      	lsrs	r3, r3, #24
 8006e46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e66:	ee17 2a90 	vmov	r2, s15
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e6e:	e008      	b.n	8006e82 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2200      	movs	r2, #0
 8006e80:	609a      	str	r2, [r3, #8]
}
 8006e82:	bf00      	nop
 8006e84:	3724      	adds	r7, #36	@ 0x24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	58024400 	.word	0x58024400
 8006e94:	03d09000 	.word	0x03d09000
 8006e98:	46000000 	.word	0x46000000
 8006e9c:	4c742400 	.word	0x4c742400
 8006ea0:	4a742400 	.word	0x4a742400
 8006ea4:	4bbebc20 	.word	0x4bbebc20

08006ea8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006eb6:	4b53      	ldr	r3, [pc, #332]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b03      	cmp	r3, #3
 8006ec0:	d101      	bne.n	8006ec6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e099      	b.n	8006ffa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006ec6:	4b4f      	ldr	r3, [pc, #316]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4e      	ldr	r2, [pc, #312]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006ecc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ed0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ed2:	f7fa f95b 	bl	800118c <HAL_GetTick>
 8006ed6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ed8:	e008      	b.n	8006eec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006eda:	f7fa f957 	bl	800118c <HAL_GetTick>
 8006ede:	4602      	mov	r2, r0
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	1ad3      	subs	r3, r2, r3
 8006ee4:	2b02      	cmp	r3, #2
 8006ee6:	d901      	bls.n	8006eec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e086      	b.n	8006ffa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006eec:	4b45      	ldr	r3, [pc, #276]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1f0      	bne.n	8006eda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006ef8:	4b42      	ldr	r3, [pc, #264]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	031b      	lsls	r3, r3, #12
 8006f06:	493f      	ldr	r1, [pc, #252]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	3b01      	subs	r3, #1
 8006f12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	025b      	lsls	r3, r3, #9
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	3b01      	subs	r3, #1
 8006f28:	041b      	lsls	r3, r3, #16
 8006f2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	3b01      	subs	r3, #1
 8006f36:	061b      	lsls	r3, r3, #24
 8006f38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f3c:	4931      	ldr	r1, [pc, #196]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f42:	4b30      	ldr	r3, [pc, #192]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	695b      	ldr	r3, [r3, #20]
 8006f4e:	492d      	ldr	r1, [pc, #180]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f54:	4b2b      	ldr	r3, [pc, #172]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	f023 0220 	bic.w	r2, r3, #32
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	699b      	ldr	r3, [r3, #24]
 8006f60:	4928      	ldr	r1, [pc, #160]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f66:	4b27      	ldr	r3, [pc, #156]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6a:	4a26      	ldr	r2, [pc, #152]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	f023 0310 	bic.w	r3, r3, #16
 8006f70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f72:	4b24      	ldr	r3, [pc, #144]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f76:	4b24      	ldr	r3, [pc, #144]	@ (8007008 <RCCEx_PLL2_Config+0x160>)
 8006f78:	4013      	ands	r3, r2
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	69d2      	ldr	r2, [r2, #28]
 8006f7e:	00d2      	lsls	r2, r2, #3
 8006f80:	4920      	ldr	r1, [pc, #128]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f82:	4313      	orrs	r3, r2
 8006f84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f86:	4b1f      	ldr	r3, [pc, #124]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f8c:	f043 0310 	orr.w	r3, r3, #16
 8006f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f98:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f9c:	4a19      	ldr	r2, [pc, #100]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006f9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006fa2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fa4:	e00f      	b.n	8006fc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d106      	bne.n	8006fba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006fac:	4b15      	ldr	r3, [pc, #84]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb0:	4a14      	ldr	r2, [pc, #80]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006fb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006fb8:	e005      	b.n	8006fc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006fba:	4b12      	ldr	r3, [pc, #72]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fbe:	4a11      	ldr	r2, [pc, #68]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a0e      	ldr	r2, [pc, #56]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fcc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd2:	f7fa f8db 	bl	800118c <HAL_GetTick>
 8006fd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fd8:	e008      	b.n	8006fec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fda:	f7fa f8d7 	bl	800118c <HAL_GetTick>
 8006fde:	4602      	mov	r2, r0
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d901      	bls.n	8006fec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	e006      	b.n	8006ffa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fec:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <RCCEx_PLL2_Config+0x15c>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d0f0      	beq.n	8006fda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3710      	adds	r7, #16
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	58024400 	.word	0x58024400
 8007008:	ffff0007 	.word	0xffff0007

0800700c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800701a:	4b53      	ldr	r3, [pc, #332]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 800701c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	2b03      	cmp	r3, #3
 8007024:	d101      	bne.n	800702a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e099      	b.n	800715e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800702a:	4b4f      	ldr	r3, [pc, #316]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a4e      	ldr	r2, [pc, #312]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007030:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007036:	f7fa f8a9 	bl	800118c <HAL_GetTick>
 800703a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800703c:	e008      	b.n	8007050 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800703e:	f7fa f8a5 	bl	800118c <HAL_GetTick>
 8007042:	4602      	mov	r2, r0
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	1ad3      	subs	r3, r2, r3
 8007048:	2b02      	cmp	r3, #2
 800704a:	d901      	bls.n	8007050 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800704c:	2303      	movs	r3, #3
 800704e:	e086      	b.n	800715e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007050:	4b45      	ldr	r3, [pc, #276]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d1f0      	bne.n	800703e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800705c:	4b42      	ldr	r3, [pc, #264]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	051b      	lsls	r3, r3, #20
 800706a:	493f      	ldr	r1, [pc, #252]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	628b      	str	r3, [r1, #40]	@ 0x28
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	3b01      	subs	r3, #1
 8007076:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	3b01      	subs	r3, #1
 8007080:	025b      	lsls	r3, r3, #9
 8007082:	b29b      	uxth	r3, r3
 8007084:	431a      	orrs	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	3b01      	subs	r3, #1
 800708c:	041b      	lsls	r3, r3, #16
 800708e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007092:	431a      	orrs	r2, r3
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	3b01      	subs	r3, #1
 800709a:	061b      	lsls	r3, r3, #24
 800709c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80070a0:	4931      	ldr	r1, [pc, #196]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80070a6:	4b30      	ldr	r3, [pc, #192]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070aa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	492d      	ldr	r1, [pc, #180]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80070b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070bc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699b      	ldr	r3, [r3, #24]
 80070c4:	4928      	ldr	r1, [pc, #160]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070c6:	4313      	orrs	r3, r2
 80070c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070ca:	4b27      	ldr	r3, [pc, #156]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ce:	4a26      	ldr	r2, [pc, #152]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070d6:	4b24      	ldr	r3, [pc, #144]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070da:	4b24      	ldr	r3, [pc, #144]	@ (800716c <RCCEx_PLL3_Config+0x160>)
 80070dc:	4013      	ands	r3, r2
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	69d2      	ldr	r2, [r2, #28]
 80070e2:	00d2      	lsls	r2, r2, #3
 80070e4:	4920      	ldr	r1, [pc, #128]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070e6:	4313      	orrs	r3, r2
 80070e8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070ea:	4b1f      	ldr	r3, [pc, #124]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 80070fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007100:	4a19      	ldr	r2, [pc, #100]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007102:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007106:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007108:	e00f      	b.n	800712a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b01      	cmp	r3, #1
 800710e:	d106      	bne.n	800711e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007110:	4b15      	ldr	r3, [pc, #84]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007114:	4a14      	ldr	r2, [pc, #80]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007116:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800711a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800711c:	e005      	b.n	800712a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800711e:	4b12      	ldr	r3, [pc, #72]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007122:	4a11      	ldr	r2, [pc, #68]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007124:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007128:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800712a:	4b0f      	ldr	r3, [pc, #60]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a0e      	ldr	r2, [pc, #56]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007130:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007136:	f7fa f829 	bl	800118c <HAL_GetTick>
 800713a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800713c:	e008      	b.n	8007150 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800713e:	f7fa f825 	bl	800118c <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e006      	b.n	800715e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007150:	4b05      	ldr	r3, [pc, #20]	@ (8007168 <RCCEx_PLL3_Config+0x15c>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800715c:	7bfb      	ldrb	r3, [r7, #15]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3710      	adds	r7, #16
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	58024400 	.word	0x58024400
 800716c:	ffff0007 	.word	0xffff0007

08007170 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b082      	sub	sp, #8
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d101      	bne.n	8007182 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	e042      	b.n	8007208 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007188:	2b00      	cmp	r3, #0
 800718a:	d106      	bne.n	800719a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7f9 fd9f 	bl	8000cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2224      	movs	r2, #36	@ 0x24
 800719e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f022 0201 	bic.w	r2, r2, #1
 80071b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f9fc 	bl	80085b8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 fc91 	bl	8007ae8 <UART_SetConfig>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d101      	bne.n	80071d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e01b      	b.n	8007208 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	689a      	ldr	r2, [r3, #8]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f042 0201 	orr.w	r2, r2, #1
 80071fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 fa7b 	bl	80086fc <UART_CheckIdleState>
 8007206:	4603      	mov	r3, r0
}
 8007208:	4618      	mov	r0, r3
 800720a:	3708      	adds	r7, #8
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}

08007210 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08a      	sub	sp, #40	@ 0x28
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	4613      	mov	r3, r2
 800721c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007224:	2b20      	cmp	r3, #32
 8007226:	d167      	bne.n	80072f8 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <HAL_UART_Transmit_DMA+0x24>
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d101      	bne.n	8007238 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007234:	2301      	movs	r3, #1
 8007236:	e060      	b.n	80072fa <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	88fa      	ldrh	r2, [r7, #6]
 8007242:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	88fa      	ldrh	r2, [r7, #6]
 800724a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2221      	movs	r2, #33	@ 0x21
 800725a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007262:	2b00      	cmp	r3, #0
 8007264:	d028      	beq.n	80072b8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800726a:	4a26      	ldr	r2, [pc, #152]	@ (8007304 <HAL_UART_Transmit_DMA+0xf4>)
 800726c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007272:	4a25      	ldr	r2, [pc, #148]	@ (8007308 <HAL_UART_Transmit_DMA+0xf8>)
 8007274:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800727a:	4a24      	ldr	r2, [pc, #144]	@ (800730c <HAL_UART_Transmit_DMA+0xfc>)
 800727c:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007282:	2200      	movs	r2, #0
 8007284:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728e:	4619      	mov	r1, r3
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3328      	adds	r3, #40	@ 0x28
 8007296:	461a      	mov	r2, r3
 8007298:	88fb      	ldrh	r3, [r7, #6]
 800729a:	f7fa fc73 	bl	8001b84 <HAL_DMA_Start_IT>
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d009      	beq.n	80072b8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2210      	movs	r2, #16
 80072a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2220      	movs	r2, #32
 80072b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e020      	b.n	80072fa <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2240      	movs	r2, #64	@ 0x40
 80072be:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	e853 3f00 	ldrex	r3, [r3]
 80072ce:	613b      	str	r3, [r7, #16]
   return(result);
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80072d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e0:	623a      	str	r2, [r7, #32]
 80072e2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e4:	69f9      	ldr	r1, [r7, #28]
 80072e6:	6a3a      	ldr	r2, [r7, #32]
 80072e8:	e841 2300 	strex	r3, r2, [r1]
 80072ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1e5      	bne.n	80072c0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	e000      	b.n	80072fa <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80072f8:	2302      	movs	r3, #2
  }
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3728      	adds	r7, #40	@ 0x28
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	08008bc9 	.word	0x08008bc9
 8007308:	08008c5f 	.word	0x08008c5f
 800730c:	08008de1 	.word	0x08008de1

08007310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b0ba      	sub	sp, #232	@ 0xe8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800733a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800733e:	4013      	ands	r3, r2
 8007340:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d11b      	bne.n	8007384 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800734c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007350:	f003 0320 	and.w	r3, r3, #32
 8007354:	2b00      	cmp	r3, #0
 8007356:	d015      	beq.n	8007384 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800735c:	f003 0320 	and.w	r3, r3, #32
 8007360:	2b00      	cmp	r3, #0
 8007362:	d105      	bne.n	8007370 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007368:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800736c:	2b00      	cmp	r3, #0
 800736e:	d009      	beq.n	8007384 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8377 	beq.w	8007a68 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
      }
      return;
 8007382:	e371      	b.n	8007a68 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8123 	beq.w	80075d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800738e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007392:	4b8d      	ldr	r3, [pc, #564]	@ (80075c8 <HAL_UART_IRQHandler+0x2b8>)
 8007394:	4013      	ands	r3, r2
 8007396:	2b00      	cmp	r3, #0
 8007398:	d106      	bne.n	80073a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800739a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800739e:	4b8b      	ldr	r3, [pc, #556]	@ (80075cc <HAL_UART_IRQHandler+0x2bc>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f000 8116 	beq.w	80075d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d011      	beq.n	80073d8 <HAL_UART_IRQHandler+0xc8>
 80073b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00b      	beq.n	80073d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2201      	movs	r2, #1
 80073c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ce:	f043 0201 	orr.w	r2, r3, #1
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80073d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80073dc:	f003 0302 	and.w	r3, r3, #2
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d011      	beq.n	8007408 <HAL_UART_IRQHandler+0xf8>
 80073e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80073e8:	f003 0301 	and.w	r3, r3, #1
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2202      	movs	r2, #2
 80073f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073fe:	f043 0204 	orr.w	r2, r3, #4
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800740c:	f003 0304 	and.w	r3, r3, #4
 8007410:	2b00      	cmp	r3, #0
 8007412:	d011      	beq.n	8007438 <HAL_UART_IRQHandler+0x128>
 8007414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007418:	f003 0301 	and.w	r3, r3, #1
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00b      	beq.n	8007438 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	2204      	movs	r2, #4
 8007426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800742e:	f043 0202 	orr.w	r2, r3, #2
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b00      	cmp	r3, #0
 8007442:	d017      	beq.n	8007474 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007450:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007454:	4b5c      	ldr	r3, [pc, #368]	@ (80075c8 <HAL_UART_IRQHandler+0x2b8>)
 8007456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00b      	beq.n	8007474 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2208      	movs	r2, #8
 8007462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800746a:	f043 0208 	orr.w	r2, r3, #8
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007478:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800747c:	2b00      	cmp	r3, #0
 800747e:	d012      	beq.n	80074a6 <HAL_UART_IRQHandler+0x196>
 8007480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007484:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00c      	beq.n	80074a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800749c:	f043 0220 	orr.w	r2, r3, #32
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	f000 82dd 	beq.w	8007a6c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b6:	f003 0320 	and.w	r3, r3, #32
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d013      	beq.n	80074e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074c2:	f003 0320 	and.w	r3, r3, #32
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d105      	bne.n	80074d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80074ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d007      	beq.n	80074e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fa:	2b40      	cmp	r3, #64	@ 0x40
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80074fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007502:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007506:	2b00      	cmp	r3, #0
 8007508:	d054      	beq.n	80075b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	f001 faf6 	bl	8008afc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800751a:	2b40      	cmp	r3, #64	@ 0x40
 800751c:	d146      	bne.n	80075ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007528:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007534:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007538:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800753c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3308      	adds	r3, #8
 8007546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800754a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800754e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800755a:	e841 2300 	strex	r3, r2, [r1]
 800755e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1d9      	bne.n	800751e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	d017      	beq.n	80075a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800757a:	4a15      	ldr	r2, [pc, #84]	@ (80075d0 <HAL_UART_IRQHandler+0x2c0>)
 800757c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007584:	4618      	mov	r0, r3
 8007586:	f7fb f885 	bl	8002694 <HAL_DMA_Abort_IT>
 800758a:	4603      	mov	r3, r0
 800758c:	2b00      	cmp	r3, #0
 800758e:	d019      	beq.n	80075c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007596:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800759e:	4610      	mov	r0, r2
 80075a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a2:	e00f      	b.n	80075c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 fa95 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075aa:	e00b      	b.n	80075c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fa91 	bl	8007ad4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b2:	e007      	b.n	80075c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 fa8d 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2200      	movs	r2, #0
 80075be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80075c2:	e253      	b.n	8007a6c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	bf00      	nop
    return;
 80075c6:	e251      	b.n	8007a6c <HAL_UART_IRQHandler+0x75c>
 80075c8:	10000001 	.word	0x10000001
 80075cc:	04000120 	.word	0x04000120
 80075d0:	08008e61 	.word	0x08008e61

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80075d8:	2b01      	cmp	r3, #1
 80075da:	f040 81e7 	bne.w	80079ac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80075de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 81e0 	beq.w	80079ac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80075ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075f0:	f003 0310 	and.w	r3, r3, #16
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 81d9 	beq.w	80079ac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2210      	movs	r2, #16
 8007600:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800760c:	2b40      	cmp	r3, #64	@ 0x40
 800760e:	f040 8151 	bne.w	80078b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	4a96      	ldr	r2, [pc, #600]	@ (8007874 <HAL_UART_IRQHandler+0x564>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d068      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a93      	ldr	r2, [pc, #588]	@ (8007878 <HAL_UART_IRQHandler+0x568>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d061      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a91      	ldr	r2, [pc, #580]	@ (800787c <HAL_UART_IRQHandler+0x56c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d05a      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a8e      	ldr	r2, [pc, #568]	@ (8007880 <HAL_UART_IRQHandler+0x570>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d053      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a8c      	ldr	r2, [pc, #560]	@ (8007884 <HAL_UART_IRQHandler+0x574>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d04c      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4a89      	ldr	r2, [pc, #548]	@ (8007888 <HAL_UART_IRQHandler+0x578>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d045      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a87      	ldr	r2, [pc, #540]	@ (800788c <HAL_UART_IRQHandler+0x57c>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d03e      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4a84      	ldr	r2, [pc, #528]	@ (8007890 <HAL_UART_IRQHandler+0x580>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d037      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	4a82      	ldr	r2, [pc, #520]	@ (8007894 <HAL_UART_IRQHandler+0x584>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d030      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a7f      	ldr	r2, [pc, #508]	@ (8007898 <HAL_UART_IRQHandler+0x588>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d029      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a7d      	ldr	r2, [pc, #500]	@ (800789c <HAL_UART_IRQHandler+0x58c>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d022      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a7a      	ldr	r2, [pc, #488]	@ (80078a0 <HAL_UART_IRQHandler+0x590>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01b      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4a78      	ldr	r2, [pc, #480]	@ (80078a4 <HAL_UART_IRQHandler+0x594>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d014      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a75      	ldr	r2, [pc, #468]	@ (80078a8 <HAL_UART_IRQHandler+0x598>)
 80076d2:	4293      	cmp	r3, r2
 80076d4:	d00d      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a73      	ldr	r2, [pc, #460]	@ (80078ac <HAL_UART_IRQHandler+0x59c>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d006      	beq.n	80076f2 <HAL_UART_IRQHandler+0x3e2>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a70      	ldr	r2, [pc, #448]	@ (80078b0 <HAL_UART_IRQHandler+0x5a0>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d106      	bne.n	8007700 <HAL_UART_IRQHandler+0x3f0>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	e005      	b.n	800770c <HAL_UART_IRQHandler+0x3fc>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007714:	2b00      	cmp	r3, #0
 8007716:	f000 81ab 	beq.w	8007a70 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007720:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007724:	429a      	cmp	r2, r3
 8007726:	f080 81a3 	bcs.w	8007a70 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007730:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773a:	69db      	ldr	r3, [r3, #28]
 800773c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007740:	f000 8087 	beq.w	8007852 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007750:	e853 3f00 	ldrex	r3, [r3]
 8007754:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007758:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800775c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007760:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	461a      	mov	r2, r3
 800776a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800776e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007772:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007776:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800777a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007786:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800778a:	2b00      	cmp	r3, #0
 800778c:	d1da      	bne.n	8007744 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	3308      	adds	r3, #8
 8007794:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800779e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80077a0:	f023 0301 	bic.w	r3, r3, #1
 80077a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	3308      	adds	r3, #8
 80077ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80077b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80077b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80077ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80077be:	e841 2300 	strex	r3, r2, [r1]
 80077c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80077c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1e1      	bne.n	800778e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80077da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80077dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	3308      	adds	r3, #8
 80077ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80077ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80077f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80077f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80077fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e3      	bne.n	80077ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2220      	movs	r2, #32
 8007806:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800781e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007820:	f023 0310 	bic.w	r3, r3, #16
 8007824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	461a      	mov	r2, r3
 800782e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007832:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007834:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007842:	2b00      	cmp	r3, #0
 8007844:	d1e4      	bne.n	8007810 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800784c:	4618      	mov	r0, r3
 800784e:	f7fa fc03 	bl	8002058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2202      	movs	r2, #2
 8007856:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007864:	b29b      	uxth	r3, r3
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	b29b      	uxth	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7f8 feab 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007872:	e0fd      	b.n	8007a70 <HAL_UART_IRQHandler+0x760>
 8007874:	40020010 	.word	0x40020010
 8007878:	40020028 	.word	0x40020028
 800787c:	40020040 	.word	0x40020040
 8007880:	40020058 	.word	0x40020058
 8007884:	40020070 	.word	0x40020070
 8007888:	40020088 	.word	0x40020088
 800788c:	400200a0 	.word	0x400200a0
 8007890:	400200b8 	.word	0x400200b8
 8007894:	40020410 	.word	0x40020410
 8007898:	40020428 	.word	0x40020428
 800789c:	40020440 	.word	0x40020440
 80078a0:	40020458 	.word	0x40020458
 80078a4:	40020470 	.word	0x40020470
 80078a8:	40020488 	.word	0x40020488
 80078ac:	400204a0 	.word	0x400204a0
 80078b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	1ad3      	subs	r3, r2, r3
 80078c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	f000 80cf 	beq.w	8007a74 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80078d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 80ca 	beq.w	8007a74 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078e8:	e853 3f00 	ldrex	r3, [r3]
 80078ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80078ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80078f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	461a      	mov	r2, r3
 80078fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007902:	647b      	str	r3, [r7, #68]	@ 0x44
 8007904:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007906:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007908:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800790a:	e841 2300 	strex	r3, r2, [r1]
 800790e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007910:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1e4      	bne.n	80078e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3308      	adds	r3, #8
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	e853 3f00 	ldrex	r3, [r3]
 8007924:	623b      	str	r3, [r7, #32]
   return(result);
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	4b55      	ldr	r3, [pc, #340]	@ (8007a80 <HAL_UART_IRQHandler+0x770>)
 800792a:	4013      	ands	r3, r2
 800792c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3308      	adds	r3, #8
 8007936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800793a:	633a      	str	r2, [r7, #48]	@ 0x30
 800793c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e3      	bne.n	8007916 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2220      	movs	r2, #32
 8007952:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	e853 3f00 	ldrex	r3, [r3]
 800796e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f023 0310 	bic.w	r3, r3, #16
 8007976:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	461a      	mov	r2, r3
 8007980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	69b9      	ldr	r1, [r7, #24]
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	617b      	str	r3, [r7, #20]
   return(result);
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e4      	bne.n	8007962 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2202      	movs	r2, #2
 800799c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800799e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80079a2:	4619      	mov	r1, r3
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7f8 fe0f 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079aa:	e063      	b.n	8007a74 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80079ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079b0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d00e      	beq.n	80079d6 <HAL_UART_IRQHandler+0x6c6>
 80079b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d008      	beq.n	80079d6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80079cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f001 fa87 	bl	8008ee2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80079d4:	e051      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80079d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d014      	beq.n	8007a0c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80079e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d105      	bne.n	80079fa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80079ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d008      	beq.n	8007a0c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d03a      	beq.n	8007a78 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	4798      	blx	r3
    }
    return;
 8007a0a:	e035      	b.n	8007a78 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d009      	beq.n	8007a2c <HAL_UART_IRQHandler+0x71c>
 8007a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d003      	beq.n	8007a2c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fa31 	bl	8008e8c <UART_EndTransmit_IT>
    return;
 8007a2a:	e026      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d009      	beq.n	8007a4c <HAL_UART_IRQHandler+0x73c>
 8007a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d003      	beq.n	8007a4c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f001 fa60 	bl	8008f0a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a4a:	e016      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d010      	beq.n	8007a7a <HAL_UART_IRQHandler+0x76a>
 8007a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	da0c      	bge.n	8007a7a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 fa48 	bl	8008ef6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007a66:	e008      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a68:	bf00      	nop
 8007a6a:	e006      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a6c:	bf00      	nop
 8007a6e:	e004      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a70:	bf00      	nop
 8007a72:	e002      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
      return;
 8007a74:	bf00      	nop
 8007a76:	e000      	b.n	8007a7a <HAL_UART_IRQHandler+0x76a>
    return;
 8007a78:	bf00      	nop
  }
}
 8007a7a:	37e8      	adds	r7, #232	@ 0xe8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	effffffe 	.word	0xeffffffe

08007a84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007a8c:	bf00      	nop
 8007a8e:	370c      	adds	r7, #12
 8007a90:	46bd      	mov	sp, r7
 8007a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a96:	4770      	bx	lr

08007a98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b083      	sub	sp, #12
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b083      	sub	sp, #12
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007ab4:	bf00      	nop
 8007ab6:	370c      	adds	r7, #12
 8007ab8:	46bd      	mov	sp, r7
 8007aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abe:	4770      	bx	lr

08007ac0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ac8:	bf00      	nop
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007ad4:	b480      	push	{r7}
 8007ad6:	b083      	sub	sp, #12
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007aec:	b092      	sub	sp, #72	@ 0x48
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007af2:	2300      	movs	r3, #0
 8007af4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	689a      	ldr	r2, [r3, #8]
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	691b      	ldr	r3, [r3, #16]
 8007b00:	431a      	orrs	r2, r3
 8007b02:	697b      	ldr	r3, [r7, #20]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	431a      	orrs	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	4bbe      	ldr	r3, [pc, #760]	@ (8007e10 <UART_SetConfig+0x328>)
 8007b18:	4013      	ands	r3, r2
 8007b1a:	697a      	ldr	r2, [r7, #20]
 8007b1c:	6812      	ldr	r2, [r2, #0]
 8007b1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b20:	430b      	orrs	r3, r1
 8007b22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	697b      	ldr	r3, [r7, #20]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b2e:	697b      	ldr	r3, [r7, #20]
 8007b30:	68da      	ldr	r2, [r3, #12]
 8007b32:	697b      	ldr	r3, [r7, #20]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4ab3      	ldr	r2, [pc, #716]	@ (8007e14 <UART_SetConfig+0x32c>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d004      	beq.n	8007b54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007b4a:	697b      	ldr	r3, [r7, #20]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b50:	4313      	orrs	r3, r2
 8007b52:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	689a      	ldr	r2, [r3, #8]
 8007b5a:	4baf      	ldr	r3, [pc, #700]	@ (8007e18 <UART_SetConfig+0x330>)
 8007b5c:	4013      	ands	r3, r2
 8007b5e:	697a      	ldr	r2, [r7, #20]
 8007b60:	6812      	ldr	r2, [r2, #0]
 8007b62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b6e:	f023 010f 	bic.w	r1, r3, #15
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	430a      	orrs	r2, r1
 8007b7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4aa6      	ldr	r2, [pc, #664]	@ (8007e1c <UART_SetConfig+0x334>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d177      	bne.n	8007c78 <UART_SetConfig+0x190>
 8007b88:	4ba5      	ldr	r3, [pc, #660]	@ (8007e20 <UART_SetConfig+0x338>)
 8007b8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b90:	2b28      	cmp	r3, #40	@ 0x28
 8007b92:	d86d      	bhi.n	8007c70 <UART_SetConfig+0x188>
 8007b94:	a201      	add	r2, pc, #4	@ (adr r2, 8007b9c <UART_SetConfig+0xb4>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007c41 	.word	0x08007c41
 8007ba0:	08007c71 	.word	0x08007c71
 8007ba4:	08007c71 	.word	0x08007c71
 8007ba8:	08007c71 	.word	0x08007c71
 8007bac:	08007c71 	.word	0x08007c71
 8007bb0:	08007c71 	.word	0x08007c71
 8007bb4:	08007c71 	.word	0x08007c71
 8007bb8:	08007c71 	.word	0x08007c71
 8007bbc:	08007c49 	.word	0x08007c49
 8007bc0:	08007c71 	.word	0x08007c71
 8007bc4:	08007c71 	.word	0x08007c71
 8007bc8:	08007c71 	.word	0x08007c71
 8007bcc:	08007c71 	.word	0x08007c71
 8007bd0:	08007c71 	.word	0x08007c71
 8007bd4:	08007c71 	.word	0x08007c71
 8007bd8:	08007c71 	.word	0x08007c71
 8007bdc:	08007c51 	.word	0x08007c51
 8007be0:	08007c71 	.word	0x08007c71
 8007be4:	08007c71 	.word	0x08007c71
 8007be8:	08007c71 	.word	0x08007c71
 8007bec:	08007c71 	.word	0x08007c71
 8007bf0:	08007c71 	.word	0x08007c71
 8007bf4:	08007c71 	.word	0x08007c71
 8007bf8:	08007c71 	.word	0x08007c71
 8007bfc:	08007c59 	.word	0x08007c59
 8007c00:	08007c71 	.word	0x08007c71
 8007c04:	08007c71 	.word	0x08007c71
 8007c08:	08007c71 	.word	0x08007c71
 8007c0c:	08007c71 	.word	0x08007c71
 8007c10:	08007c71 	.word	0x08007c71
 8007c14:	08007c71 	.word	0x08007c71
 8007c18:	08007c71 	.word	0x08007c71
 8007c1c:	08007c61 	.word	0x08007c61
 8007c20:	08007c71 	.word	0x08007c71
 8007c24:	08007c71 	.word	0x08007c71
 8007c28:	08007c71 	.word	0x08007c71
 8007c2c:	08007c71 	.word	0x08007c71
 8007c30:	08007c71 	.word	0x08007c71
 8007c34:	08007c71 	.word	0x08007c71
 8007c38:	08007c71 	.word	0x08007c71
 8007c3c:	08007c69 	.word	0x08007c69
 8007c40:	2301      	movs	r3, #1
 8007c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c46:	e222      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c48:	2304      	movs	r3, #4
 8007c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c4e:	e21e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c50:	2308      	movs	r3, #8
 8007c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c56:	e21a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c58:	2310      	movs	r3, #16
 8007c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c5e:	e216      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c60:	2320      	movs	r3, #32
 8007c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c66:	e212      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c68:	2340      	movs	r3, #64	@ 0x40
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e20e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c70:	2380      	movs	r3, #128	@ 0x80
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e20a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a69      	ldr	r2, [pc, #420]	@ (8007e24 <UART_SetConfig+0x33c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d130      	bne.n	8007ce4 <UART_SetConfig+0x1fc>
 8007c82:	4b67      	ldr	r3, [pc, #412]	@ (8007e20 <UART_SetConfig+0x338>)
 8007c84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d826      	bhi.n	8007cdc <UART_SetConfig+0x1f4>
 8007c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c94 <UART_SetConfig+0x1ac>)
 8007c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cb5 	.word	0x08007cb5
 8007c9c:	08007cbd 	.word	0x08007cbd
 8007ca0:	08007cc5 	.word	0x08007cc5
 8007ca4:	08007ccd 	.word	0x08007ccd
 8007ca8:	08007cd5 	.word	0x08007cd5
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cb2:	e1ec      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cb4:	2304      	movs	r3, #4
 8007cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cba:	e1e8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cbc:	2308      	movs	r3, #8
 8007cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cc2:	e1e4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cc4:	2310      	movs	r3, #16
 8007cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cca:	e1e0      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ccc:	2320      	movs	r3, #32
 8007cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cd2:	e1dc      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cd4:	2340      	movs	r3, #64	@ 0x40
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e1d8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007cdc:	2380      	movs	r3, #128	@ 0x80
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e1d4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a4f      	ldr	r2, [pc, #316]	@ (8007e28 <UART_SetConfig+0x340>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d130      	bne.n	8007d50 <UART_SetConfig+0x268>
 8007cee:	4b4c      	ldr	r3, [pc, #304]	@ (8007e20 <UART_SetConfig+0x338>)
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	f003 0307 	and.w	r3, r3, #7
 8007cf6:	2b05      	cmp	r3, #5
 8007cf8:	d826      	bhi.n	8007d48 <UART_SetConfig+0x260>
 8007cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8007d00 <UART_SetConfig+0x218>)
 8007cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d00:	08007d19 	.word	0x08007d19
 8007d04:	08007d21 	.word	0x08007d21
 8007d08:	08007d29 	.word	0x08007d29
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d39 	.word	0x08007d39
 8007d14:	08007d41 	.word	0x08007d41
 8007d18:	2300      	movs	r3, #0
 8007d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1e:	e1b6      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d20:	2304      	movs	r3, #4
 8007d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d26:	e1b2      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d28:	2308      	movs	r3, #8
 8007d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d2e:	e1ae      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d30:	2310      	movs	r3, #16
 8007d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d36:	e1aa      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d38:	2320      	movs	r3, #32
 8007d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d3e:	e1a6      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d40:	2340      	movs	r3, #64	@ 0x40
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e1a2      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d48:	2380      	movs	r3, #128	@ 0x80
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e19e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a35      	ldr	r2, [pc, #212]	@ (8007e2c <UART_SetConfig+0x344>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d130      	bne.n	8007dbc <UART_SetConfig+0x2d4>
 8007d5a:	4b31      	ldr	r3, [pc, #196]	@ (8007e20 <UART_SetConfig+0x338>)
 8007d5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d5e:	f003 0307 	and.w	r3, r3, #7
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d826      	bhi.n	8007db4 <UART_SetConfig+0x2cc>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <UART_SetConfig+0x284>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d85 	.word	0x08007d85
 8007d70:	08007d8d 	.word	0x08007d8d
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007d9d 	.word	0x08007d9d
 8007d7c:	08007da5 	.word	0x08007da5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	2300      	movs	r3, #0
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d8a:	e180      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d92:	e17c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d9a:	e178      	b.n	800808e <UART_SetConfig+0x5a6>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007da2:	e174      	b.n	800808e <UART_SetConfig+0x5a6>
 8007da4:	2320      	movs	r3, #32
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007daa:	e170      	b.n	800808e <UART_SetConfig+0x5a6>
 8007dac:	2340      	movs	r3, #64	@ 0x40
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007db2:	e16c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007db4:	2380      	movs	r3, #128	@ 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dba:	e168      	b.n	800808e <UART_SetConfig+0x5a6>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8007e30 <UART_SetConfig+0x348>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d142      	bne.n	8007e4c <UART_SetConfig+0x364>
 8007dc6:	4b16      	ldr	r3, [pc, #88]	@ (8007e20 <UART_SetConfig+0x338>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d838      	bhi.n	8007e44 <UART_SetConfig+0x35c>
 8007dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8007dd8 <UART_SetConfig+0x2f0>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e35 	.word	0x08007e35
 8007dec:	08007e3d 	.word	0x08007e3d
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e14a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e146      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e142      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e13e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e10:	cfff69f3 	.word	0xcfff69f3
 8007e14:	58000c00 	.word	0x58000c00
 8007e18:	11fff4ff 	.word	0x11fff4ff
 8007e1c:	40011000 	.word	0x40011000
 8007e20:	58024400 	.word	0x58024400
 8007e24:	40004400 	.word	0x40004400
 8007e28:	40004800 	.word	0x40004800
 8007e2c:	40004c00 	.word	0x40004c00
 8007e30:	40005000 	.word	0x40005000
 8007e34:	2320      	movs	r3, #32
 8007e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e3a:	e128      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e3c:	2340      	movs	r3, #64	@ 0x40
 8007e3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e42:	e124      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e44:	2380      	movs	r3, #128	@ 0x80
 8007e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e4a:	e120      	b.n	800808e <UART_SetConfig+0x5a6>
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4acb      	ldr	r2, [pc, #812]	@ (8008180 <UART_SetConfig+0x698>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d176      	bne.n	8007f44 <UART_SetConfig+0x45c>
 8007e56:	4bcb      	ldr	r3, [pc, #812]	@ (8008184 <UART_SetConfig+0x69c>)
 8007e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e5e:	2b28      	cmp	r3, #40	@ 0x28
 8007e60:	d86c      	bhi.n	8007f3c <UART_SetConfig+0x454>
 8007e62:	a201      	add	r2, pc, #4	@ (adr r2, 8007e68 <UART_SetConfig+0x380>)
 8007e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e68:	08007f0d 	.word	0x08007f0d
 8007e6c:	08007f3d 	.word	0x08007f3d
 8007e70:	08007f3d 	.word	0x08007f3d
 8007e74:	08007f3d 	.word	0x08007f3d
 8007e78:	08007f3d 	.word	0x08007f3d
 8007e7c:	08007f3d 	.word	0x08007f3d
 8007e80:	08007f3d 	.word	0x08007f3d
 8007e84:	08007f3d 	.word	0x08007f3d
 8007e88:	08007f15 	.word	0x08007f15
 8007e8c:	08007f3d 	.word	0x08007f3d
 8007e90:	08007f3d 	.word	0x08007f3d
 8007e94:	08007f3d 	.word	0x08007f3d
 8007e98:	08007f3d 	.word	0x08007f3d
 8007e9c:	08007f3d 	.word	0x08007f3d
 8007ea0:	08007f3d 	.word	0x08007f3d
 8007ea4:	08007f3d 	.word	0x08007f3d
 8007ea8:	08007f1d 	.word	0x08007f1d
 8007eac:	08007f3d 	.word	0x08007f3d
 8007eb0:	08007f3d 	.word	0x08007f3d
 8007eb4:	08007f3d 	.word	0x08007f3d
 8007eb8:	08007f3d 	.word	0x08007f3d
 8007ebc:	08007f3d 	.word	0x08007f3d
 8007ec0:	08007f3d 	.word	0x08007f3d
 8007ec4:	08007f3d 	.word	0x08007f3d
 8007ec8:	08007f25 	.word	0x08007f25
 8007ecc:	08007f3d 	.word	0x08007f3d
 8007ed0:	08007f3d 	.word	0x08007f3d
 8007ed4:	08007f3d 	.word	0x08007f3d
 8007ed8:	08007f3d 	.word	0x08007f3d
 8007edc:	08007f3d 	.word	0x08007f3d
 8007ee0:	08007f3d 	.word	0x08007f3d
 8007ee4:	08007f3d 	.word	0x08007f3d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f3d 	.word	0x08007f3d
 8007ef0:	08007f3d 	.word	0x08007f3d
 8007ef4:	08007f3d 	.word	0x08007f3d
 8007ef8:	08007f3d 	.word	0x08007f3d
 8007efc:	08007f3d 	.word	0x08007f3d
 8007f00:	08007f3d 	.word	0x08007f3d
 8007f04:	08007f3d 	.word	0x08007f3d
 8007f08:	08007f35 	.word	0x08007f35
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f12:	e0bc      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f14:	2304      	movs	r3, #4
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1a:	e0b8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f1c:	2308      	movs	r3, #8
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f22:	e0b4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f24:	2310      	movs	r3, #16
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e0b0      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f2c:	2320      	movs	r3, #32
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e0ac      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f34:	2340      	movs	r3, #64	@ 0x40
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e0a8      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f3c:	2380      	movs	r3, #128	@ 0x80
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e0a4      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a8f      	ldr	r2, [pc, #572]	@ (8008188 <UART_SetConfig+0x6a0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d130      	bne.n	8007fb0 <UART_SetConfig+0x4c8>
 8007f4e:	4b8d      	ldr	r3, [pc, #564]	@ (8008184 <UART_SetConfig+0x69c>)
 8007f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f52:	f003 0307 	and.w	r3, r3, #7
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d826      	bhi.n	8007fa8 <UART_SetConfig+0x4c0>
 8007f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f60 <UART_SetConfig+0x478>)
 8007f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f60:	08007f79 	.word	0x08007f79
 8007f64:	08007f81 	.word	0x08007f81
 8007f68:	08007f89 	.word	0x08007f89
 8007f6c:	08007f91 	.word	0x08007f91
 8007f70:	08007f99 	.word	0x08007f99
 8007f74:	08007fa1 	.word	0x08007fa1
 8007f78:	2300      	movs	r3, #0
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e086      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f80:	2304      	movs	r3, #4
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e082      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f88:	2308      	movs	r3, #8
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e07e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e07a      	b.n	800808e <UART_SetConfig+0x5a6>
 8007f98:	2320      	movs	r3, #32
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e076      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fa0:	2340      	movs	r3, #64	@ 0x40
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e072      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fa8:	2380      	movs	r3, #128	@ 0x80
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e06e      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a75      	ldr	r2, [pc, #468]	@ (800818c <UART_SetConfig+0x6a4>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d130      	bne.n	800801c <UART_SetConfig+0x534>
 8007fba:	4b72      	ldr	r3, [pc, #456]	@ (8008184 <UART_SetConfig+0x69c>)
 8007fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fbe:	f003 0307 	and.w	r3, r3, #7
 8007fc2:	2b05      	cmp	r3, #5
 8007fc4:	d826      	bhi.n	8008014 <UART_SetConfig+0x52c>
 8007fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fcc <UART_SetConfig+0x4e4>)
 8007fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fcc:	08007fe5 	.word	0x08007fe5
 8007fd0:	08007fed 	.word	0x08007fed
 8007fd4:	08007ff5 	.word	0x08007ff5
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	08008005 	.word	0x08008005
 8007fe0:	0800800d 	.word	0x0800800d
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e050      	b.n	800808e <UART_SetConfig+0x5a6>
 8007fec:	2304      	movs	r3, #4
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e04c      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ff4:	2308      	movs	r3, #8
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e048      	b.n	800808e <UART_SetConfig+0x5a6>
 8007ffc:	2310      	movs	r3, #16
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e044      	b.n	800808e <UART_SetConfig+0x5a6>
 8008004:	2320      	movs	r3, #32
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e040      	b.n	800808e <UART_SetConfig+0x5a6>
 800800c:	2340      	movs	r3, #64	@ 0x40
 800800e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008012:	e03c      	b.n	800808e <UART_SetConfig+0x5a6>
 8008014:	2380      	movs	r3, #128	@ 0x80
 8008016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800801a:	e038      	b.n	800808e <UART_SetConfig+0x5a6>
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a5b      	ldr	r2, [pc, #364]	@ (8008190 <UART_SetConfig+0x6a8>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d130      	bne.n	8008088 <UART_SetConfig+0x5a0>
 8008026:	4b57      	ldr	r3, [pc, #348]	@ (8008184 <UART_SetConfig+0x69c>)
 8008028:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b05      	cmp	r3, #5
 8008030:	d826      	bhi.n	8008080 <UART_SetConfig+0x598>
 8008032:	a201      	add	r2, pc, #4	@ (adr r2, 8008038 <UART_SetConfig+0x550>)
 8008034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008038:	08008051 	.word	0x08008051
 800803c:	08008059 	.word	0x08008059
 8008040:	08008061 	.word	0x08008061
 8008044:	08008069 	.word	0x08008069
 8008048:	08008071 	.word	0x08008071
 800804c:	08008079 	.word	0x08008079
 8008050:	2302      	movs	r3, #2
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e01a      	b.n	800808e <UART_SetConfig+0x5a6>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e016      	b.n	800808e <UART_SetConfig+0x5a6>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e012      	b.n	800808e <UART_SetConfig+0x5a6>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e00e      	b.n	800808e <UART_SetConfig+0x5a6>
 8008070:	2320      	movs	r3, #32
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e00a      	b.n	800808e <UART_SetConfig+0x5a6>
 8008078:	2340      	movs	r3, #64	@ 0x40
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807e:	e006      	b.n	800808e <UART_SetConfig+0x5a6>
 8008080:	2380      	movs	r3, #128	@ 0x80
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008086:	e002      	b.n	800808e <UART_SetConfig+0x5a6>
 8008088:	2380      	movs	r3, #128	@ 0x80
 800808a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a3f      	ldr	r2, [pc, #252]	@ (8008190 <UART_SetConfig+0x6a8>)
 8008094:	4293      	cmp	r3, r2
 8008096:	f040 80f8 	bne.w	800828a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800809a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800809e:	2b20      	cmp	r3, #32
 80080a0:	dc46      	bgt.n	8008130 <UART_SetConfig+0x648>
 80080a2:	2b02      	cmp	r3, #2
 80080a4:	f2c0 8082 	blt.w	80081ac <UART_SetConfig+0x6c4>
 80080a8:	3b02      	subs	r3, #2
 80080aa:	2b1e      	cmp	r3, #30
 80080ac:	d87e      	bhi.n	80081ac <UART_SetConfig+0x6c4>
 80080ae:	a201      	add	r2, pc, #4	@ (adr r2, 80080b4 <UART_SetConfig+0x5cc>)
 80080b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080b4:	08008137 	.word	0x08008137
 80080b8:	080081ad 	.word	0x080081ad
 80080bc:	0800813f 	.word	0x0800813f
 80080c0:	080081ad 	.word	0x080081ad
 80080c4:	080081ad 	.word	0x080081ad
 80080c8:	080081ad 	.word	0x080081ad
 80080cc:	0800814f 	.word	0x0800814f
 80080d0:	080081ad 	.word	0x080081ad
 80080d4:	080081ad 	.word	0x080081ad
 80080d8:	080081ad 	.word	0x080081ad
 80080dc:	080081ad 	.word	0x080081ad
 80080e0:	080081ad 	.word	0x080081ad
 80080e4:	080081ad 	.word	0x080081ad
 80080e8:	080081ad 	.word	0x080081ad
 80080ec:	0800815f 	.word	0x0800815f
 80080f0:	080081ad 	.word	0x080081ad
 80080f4:	080081ad 	.word	0x080081ad
 80080f8:	080081ad 	.word	0x080081ad
 80080fc:	080081ad 	.word	0x080081ad
 8008100:	080081ad 	.word	0x080081ad
 8008104:	080081ad 	.word	0x080081ad
 8008108:	080081ad 	.word	0x080081ad
 800810c:	080081ad 	.word	0x080081ad
 8008110:	080081ad 	.word	0x080081ad
 8008114:	080081ad 	.word	0x080081ad
 8008118:	080081ad 	.word	0x080081ad
 800811c:	080081ad 	.word	0x080081ad
 8008120:	080081ad 	.word	0x080081ad
 8008124:	080081ad 	.word	0x080081ad
 8008128:	080081ad 	.word	0x080081ad
 800812c:	0800819f 	.word	0x0800819f
 8008130:	2b40      	cmp	r3, #64	@ 0x40
 8008132:	d037      	beq.n	80081a4 <UART_SetConfig+0x6bc>
 8008134:	e03a      	b.n	80081ac <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8008136:	f7fe fbf9 	bl	800692c <HAL_RCCEx_GetD3PCLK1Freq>
 800813a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800813c:	e03c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800813e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fc08 	bl	8006958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800814c:	e034      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800814e:	f107 0318 	add.w	r3, r7, #24
 8008152:	4618      	mov	r0, r3
 8008154:	f7fe fd54 	bl	8006c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800815c:	e02c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800815e:	4b09      	ldr	r3, [pc, #36]	@ (8008184 <UART_SetConfig+0x69c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	d016      	beq.n	8008198 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800816a:	4b06      	ldr	r3, [pc, #24]	@ (8008184 <UART_SetConfig+0x69c>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	08db      	lsrs	r3, r3, #3
 8008170:	f003 0303 	and.w	r3, r3, #3
 8008174:	4a07      	ldr	r2, [pc, #28]	@ (8008194 <UART_SetConfig+0x6ac>)
 8008176:	fa22 f303 	lsr.w	r3, r2, r3
 800817a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800817c:	e01c      	b.n	80081b8 <UART_SetConfig+0x6d0>
 800817e:	bf00      	nop
 8008180:	40011400 	.word	0x40011400
 8008184:	58024400 	.word	0x58024400
 8008188:	40007800 	.word	0x40007800
 800818c:	40007c00 	.word	0x40007c00
 8008190:	58000c00 	.word	0x58000c00
 8008194:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8008198:	4b9d      	ldr	r3, [pc, #628]	@ (8008410 <UART_SetConfig+0x928>)
 800819a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800819c:	e00c      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800819e:	4b9d      	ldr	r3, [pc, #628]	@ (8008414 <UART_SetConfig+0x92c>)
 80081a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081a2:	e009      	b.n	80081b8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80081a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081aa:	e005      	b.n	80081b8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80081ac:	2300      	movs	r3, #0
 80081ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80081b6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	f000 81de 	beq.w	800857c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c4:	4a94      	ldr	r2, [pc, #592]	@ (8008418 <UART_SetConfig+0x930>)
 80081c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081ca:	461a      	mov	r2, r3
 80081cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80081d2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	685a      	ldr	r2, [r3, #4]
 80081d8:	4613      	mov	r3, r2
 80081da:	005b      	lsls	r3, r3, #1
 80081dc:	4413      	add	r3, r2
 80081de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081e0:	429a      	cmp	r2, r3
 80081e2:	d305      	bcc.n	80081f0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081ec:	429a      	cmp	r2, r3
 80081ee:	d903      	bls.n	80081f8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081f6:	e1c1      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081fa:	2200      	movs	r2, #0
 80081fc:	60bb      	str	r3, [r7, #8]
 80081fe:	60fa      	str	r2, [r7, #12]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008204:	4a84      	ldr	r2, [pc, #528]	@ (8008418 <UART_SetConfig+0x930>)
 8008206:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800820a:	b29b      	uxth	r3, r3
 800820c:	2200      	movs	r2, #0
 800820e:	603b      	str	r3, [r7, #0]
 8008210:	607a      	str	r2, [r7, #4]
 8008212:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800821a:	f7f8 f85d 	bl	80002d8 <__aeabi_uldivmod>
 800821e:	4602      	mov	r2, r0
 8008220:	460b      	mov	r3, r1
 8008222:	4610      	mov	r0, r2
 8008224:	4619      	mov	r1, r3
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	f04f 0300 	mov.w	r3, #0
 800822e:	020b      	lsls	r3, r1, #8
 8008230:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008234:	0202      	lsls	r2, r0, #8
 8008236:	6979      	ldr	r1, [r7, #20]
 8008238:	6849      	ldr	r1, [r1, #4]
 800823a:	0849      	lsrs	r1, r1, #1
 800823c:	2000      	movs	r0, #0
 800823e:	460c      	mov	r4, r1
 8008240:	4605      	mov	r5, r0
 8008242:	eb12 0804 	adds.w	r8, r2, r4
 8008246:	eb43 0905 	adc.w	r9, r3, r5
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	685b      	ldr	r3, [r3, #4]
 800824e:	2200      	movs	r2, #0
 8008250:	469a      	mov	sl, r3
 8008252:	4693      	mov	fp, r2
 8008254:	4652      	mov	r2, sl
 8008256:	465b      	mov	r3, fp
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f83c 	bl	80002d8 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800826e:	d308      	bcc.n	8008282 <UART_SetConfig+0x79a>
 8008270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008272:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008276:	d204      	bcs.n	8008282 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800827e:	60da      	str	r2, [r3, #12]
 8008280:	e17c      	b.n	800857c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008288:	e178      	b.n	800857c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008292:	f040 80c5 	bne.w	8008420 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8008296:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800829a:	2b20      	cmp	r3, #32
 800829c:	dc48      	bgt.n	8008330 <UART_SetConfig+0x848>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	db7b      	blt.n	800839a <UART_SetConfig+0x8b2>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d879      	bhi.n	800839a <UART_SetConfig+0x8b2>
 80082a6:	a201      	add	r2, pc, #4	@ (adr r2, 80082ac <UART_SetConfig+0x7c4>)
 80082a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ac:	08008337 	.word	0x08008337
 80082b0:	0800833f 	.word	0x0800833f
 80082b4:	0800839b 	.word	0x0800839b
 80082b8:	0800839b 	.word	0x0800839b
 80082bc:	08008347 	.word	0x08008347
 80082c0:	0800839b 	.word	0x0800839b
 80082c4:	0800839b 	.word	0x0800839b
 80082c8:	0800839b 	.word	0x0800839b
 80082cc:	08008357 	.word	0x08008357
 80082d0:	0800839b 	.word	0x0800839b
 80082d4:	0800839b 	.word	0x0800839b
 80082d8:	0800839b 	.word	0x0800839b
 80082dc:	0800839b 	.word	0x0800839b
 80082e0:	0800839b 	.word	0x0800839b
 80082e4:	0800839b 	.word	0x0800839b
 80082e8:	0800839b 	.word	0x0800839b
 80082ec:	08008367 	.word	0x08008367
 80082f0:	0800839b 	.word	0x0800839b
 80082f4:	0800839b 	.word	0x0800839b
 80082f8:	0800839b 	.word	0x0800839b
 80082fc:	0800839b 	.word	0x0800839b
 8008300:	0800839b 	.word	0x0800839b
 8008304:	0800839b 	.word	0x0800839b
 8008308:	0800839b 	.word	0x0800839b
 800830c:	0800839b 	.word	0x0800839b
 8008310:	0800839b 	.word	0x0800839b
 8008314:	0800839b 	.word	0x0800839b
 8008318:	0800839b 	.word	0x0800839b
 800831c:	0800839b 	.word	0x0800839b
 8008320:	0800839b 	.word	0x0800839b
 8008324:	0800839b 	.word	0x0800839b
 8008328:	0800839b 	.word	0x0800839b
 800832c:	0800838d 	.word	0x0800838d
 8008330:	2b40      	cmp	r3, #64	@ 0x40
 8008332:	d02e      	beq.n	8008392 <UART_SetConfig+0x8aa>
 8008334:	e031      	b.n	800839a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008336:	f7fd f8c3 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 800833a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800833c:	e033      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800833e:	f7fd f8d5 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 8008342:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008344:	e02f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008346:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800834a:	4618      	mov	r0, r3
 800834c:	f7fe fb04 	bl	8006958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008354:	e027      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008356:	f107 0318 	add.w	r3, r7, #24
 800835a:	4618      	mov	r0, r3
 800835c:	f7fe fc50 	bl	8006c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008360:	69fb      	ldr	r3, [r7, #28]
 8008362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008364:	e01f      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008366:	4b2d      	ldr	r3, [pc, #180]	@ (800841c <UART_SetConfig+0x934>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0320 	and.w	r3, r3, #32
 800836e:	2b00      	cmp	r3, #0
 8008370:	d009      	beq.n	8008386 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008372:	4b2a      	ldr	r3, [pc, #168]	@ (800841c <UART_SetConfig+0x934>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	08db      	lsrs	r3, r3, #3
 8008378:	f003 0303 	and.w	r3, r3, #3
 800837c:	4a24      	ldr	r2, [pc, #144]	@ (8008410 <UART_SetConfig+0x928>)
 800837e:	fa22 f303 	lsr.w	r3, r2, r3
 8008382:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008384:	e00f      	b.n	80083a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008386:	4b22      	ldr	r3, [pc, #136]	@ (8008410 <UART_SetConfig+0x928>)
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800838a:	e00c      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800838c:	4b21      	ldr	r3, [pc, #132]	@ (8008414 <UART_SetConfig+0x92c>)
 800838e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008390:	e009      	b.n	80083a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008392:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008396:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008398:	e005      	b.n	80083a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800839a:	2300      	movs	r3, #0
 800839c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80083a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80083a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 80e7 	beq.w	800857c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083b2:	4a19      	ldr	r2, [pc, #100]	@ (8008418 <UART_SetConfig+0x930>)
 80083b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b8:	461a      	mov	r2, r3
 80083ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80083c0:	005a      	lsls	r2, r3, #1
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	085b      	lsrs	r3, r3, #1
 80083c8:	441a      	add	r2, r3
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80083d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d916      	bls.n	8008408 <UART_SetConfig+0x920>
 80083da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083e0:	d212      	bcs.n	8008408 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	f023 030f 	bic.w	r3, r3, #15
 80083ea:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80083ee:	085b      	lsrs	r3, r3, #1
 80083f0:	b29b      	uxth	r3, r3
 80083f2:	f003 0307 	and.w	r3, r3, #7
 80083f6:	b29a      	uxth	r2, r3
 80083f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80083fa:	4313      	orrs	r3, r2
 80083fc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80083fe:	697b      	ldr	r3, [r7, #20]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008404:	60da      	str	r2, [r3, #12]
 8008406:	e0b9      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008408:	2301      	movs	r3, #1
 800840a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800840e:	e0b5      	b.n	800857c <UART_SetConfig+0xa94>
 8008410:	03d09000 	.word	0x03d09000
 8008414:	003d0900 	.word	0x003d0900
 8008418:	08009254 	.word	0x08009254
 800841c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008420:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008424:	2b20      	cmp	r3, #32
 8008426:	dc49      	bgt.n	80084bc <UART_SetConfig+0x9d4>
 8008428:	2b00      	cmp	r3, #0
 800842a:	db7c      	blt.n	8008526 <UART_SetConfig+0xa3e>
 800842c:	2b20      	cmp	r3, #32
 800842e:	d87a      	bhi.n	8008526 <UART_SetConfig+0xa3e>
 8008430:	a201      	add	r2, pc, #4	@ (adr r2, 8008438 <UART_SetConfig+0x950>)
 8008432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008436:	bf00      	nop
 8008438:	080084c3 	.word	0x080084c3
 800843c:	080084cb 	.word	0x080084cb
 8008440:	08008527 	.word	0x08008527
 8008444:	08008527 	.word	0x08008527
 8008448:	080084d3 	.word	0x080084d3
 800844c:	08008527 	.word	0x08008527
 8008450:	08008527 	.word	0x08008527
 8008454:	08008527 	.word	0x08008527
 8008458:	080084e3 	.word	0x080084e3
 800845c:	08008527 	.word	0x08008527
 8008460:	08008527 	.word	0x08008527
 8008464:	08008527 	.word	0x08008527
 8008468:	08008527 	.word	0x08008527
 800846c:	08008527 	.word	0x08008527
 8008470:	08008527 	.word	0x08008527
 8008474:	08008527 	.word	0x08008527
 8008478:	080084f3 	.word	0x080084f3
 800847c:	08008527 	.word	0x08008527
 8008480:	08008527 	.word	0x08008527
 8008484:	08008527 	.word	0x08008527
 8008488:	08008527 	.word	0x08008527
 800848c:	08008527 	.word	0x08008527
 8008490:	08008527 	.word	0x08008527
 8008494:	08008527 	.word	0x08008527
 8008498:	08008527 	.word	0x08008527
 800849c:	08008527 	.word	0x08008527
 80084a0:	08008527 	.word	0x08008527
 80084a4:	08008527 	.word	0x08008527
 80084a8:	08008527 	.word	0x08008527
 80084ac:	08008527 	.word	0x08008527
 80084b0:	08008527 	.word	0x08008527
 80084b4:	08008527 	.word	0x08008527
 80084b8:	08008519 	.word	0x08008519
 80084bc:	2b40      	cmp	r3, #64	@ 0x40
 80084be:	d02e      	beq.n	800851e <UART_SetConfig+0xa36>
 80084c0:	e031      	b.n	8008526 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084c2:	f7fc fffd 	bl	80054c0 <HAL_RCC_GetPCLK1Freq>
 80084c6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084c8:	e033      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084ca:	f7fd f80f 	bl	80054ec <HAL_RCC_GetPCLK2Freq>
 80084ce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084d0:	e02f      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe fa3e 	bl	8006958 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084e0:	e027      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084e2:	f107 0318 	add.w	r3, r7, #24
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7fe fb8a 	bl	8006c00 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084ec:	69fb      	ldr	r3, [r7, #28]
 80084ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f0:	e01f      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084f2:	4b2d      	ldr	r3, [pc, #180]	@ (80085a8 <UART_SetConfig+0xac0>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f003 0320 	and.w	r3, r3, #32
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d009      	beq.n	8008512 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084fe:	4b2a      	ldr	r3, [pc, #168]	@ (80085a8 <UART_SetConfig+0xac0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	f003 0303 	and.w	r3, r3, #3
 8008508:	4a28      	ldr	r2, [pc, #160]	@ (80085ac <UART_SetConfig+0xac4>)
 800850a:	fa22 f303 	lsr.w	r3, r2, r3
 800850e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008510:	e00f      	b.n	8008532 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008512:	4b26      	ldr	r3, [pc, #152]	@ (80085ac <UART_SetConfig+0xac4>)
 8008514:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008516:	e00c      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008518:	4b25      	ldr	r3, [pc, #148]	@ (80085b0 <UART_SetConfig+0xac8>)
 800851a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800851c:	e009      	b.n	8008532 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800851e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008524:	e005      	b.n	8008532 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008526:	2300      	movs	r3, #0
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800852a:	2301      	movs	r3, #1
 800852c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008530:	bf00      	nop
    }

    if (pclk != 0U)
 8008532:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008534:	2b00      	cmp	r3, #0
 8008536:	d021      	beq.n	800857c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008538:	697b      	ldr	r3, [r7, #20]
 800853a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800853c:	4a1d      	ldr	r2, [pc, #116]	@ (80085b4 <UART_SetConfig+0xacc>)
 800853e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008542:	461a      	mov	r2, r3
 8008544:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008546:	fbb3 f2f2 	udiv	r2, r3, r2
 800854a:	697b      	ldr	r3, [r7, #20]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	085b      	lsrs	r3, r3, #1
 8008550:	441a      	add	r2, r3
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800855c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800855e:	2b0f      	cmp	r3, #15
 8008560:	d909      	bls.n	8008576 <UART_SetConfig+0xa8e>
 8008562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008568:	d205      	bcs.n	8008576 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800856a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800856c:	b29a      	uxth	r2, r3
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	60da      	str	r2, [r3, #12]
 8008574:	e002      	b.n	800857c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2201      	movs	r2, #1
 8008580:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	2201      	movs	r2, #1
 8008588:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	2200      	movs	r2, #0
 8008590:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2200      	movs	r2, #0
 8008596:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008598:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800859c:	4618      	mov	r0, r3
 800859e:	3748      	adds	r7, #72	@ 0x48
 80085a0:	46bd      	mov	sp, r7
 80085a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085a6:	bf00      	nop
 80085a8:	58024400 	.word	0x58024400
 80085ac:	03d09000 	.word	0x03d09000
 80085b0:	003d0900 	.word	0x003d0900
 80085b4:	08009254 	.word	0x08009254

080085b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c4:	f003 0308 	and.w	r3, r3, #8
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	430a      	orrs	r2, r1
 80085e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008608:	f003 0302 	and.w	r3, r3, #2
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	430a      	orrs	r2, r1
 8008624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800862a:	f003 0304 	and.w	r3, r3, #4
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	685b      	ldr	r3, [r3, #4]
 8008638:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	430a      	orrs	r2, r1
 8008646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800864c:	f003 0310 	and.w	r3, r3, #16
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800866e:	f003 0320 	and.w	r3, r3, #32
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	430a      	orrs	r2, r1
 800868a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008694:	2b00      	cmp	r3, #0
 8008696:	d01a      	beq.n	80086ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	430a      	orrs	r2, r1
 80086ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80086b6:	d10a      	bne.n	80086ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	430a      	orrs	r2, r1
 80086cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00a      	beq.n	80086f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	685b      	ldr	r3, [r3, #4]
 80086e0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	430a      	orrs	r2, r1
 80086ee:	605a      	str	r2, [r3, #4]
  }
}
 80086f0:	bf00      	nop
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b098      	sub	sp, #96	@ 0x60
 8008700:	af02      	add	r7, sp, #8
 8008702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800870c:	f7f8 fd3e 	bl	800118c <HAL_GetTick>
 8008710:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0308 	and.w	r3, r3, #8
 800871c:	2b08      	cmp	r3, #8
 800871e:	d12f      	bne.n	8008780 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008720:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008728:	2200      	movs	r2, #0
 800872a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f88e 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 8008734:	4603      	mov	r3, r0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d022      	beq.n	8008780 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800874a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800874e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008758:	647b      	str	r3, [r7, #68]	@ 0x44
 800875a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800875e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2220      	movs	r2, #32
 8008770:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e063      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	2b04      	cmp	r3, #4
 800878c:	d149      	bne.n	8008822 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008796:	2200      	movs	r2, #0
 8008798:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800879c:	6878      	ldr	r0, [r7, #4]
 800879e:	f000 f857 	bl	8008850 <UART_WaitOnFlagUntilTimeout>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d03c      	beq.n	8008822 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b0:	e853 3f00 	ldrex	r3, [r3]
 80087b4:	623b      	str	r3, [r7, #32]
   return(result);
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80087bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	461a      	mov	r2, r3
 80087c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80087c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e6      	bne.n	80087a8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	3308      	adds	r3, #8
 80087e0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	e853 3f00 	ldrex	r3, [r3]
 80087e8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f023 0301 	bic.w	r3, r3, #1
 80087f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3308      	adds	r3, #8
 80087f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087fa:	61fa      	str	r2, [r7, #28]
 80087fc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	69b9      	ldr	r1, [r7, #24]
 8008800:	69fa      	ldr	r2, [r7, #28]
 8008802:	e841 2300 	strex	r3, r2, [r1]
 8008806:	617b      	str	r3, [r7, #20]
   return(result);
 8008808:	697b      	ldr	r3, [r7, #20]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d1e5      	bne.n	80087da <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2220      	movs	r2, #32
 8008812:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e012      	b.n	8008848 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2220      	movs	r2, #32
 800882e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2200      	movs	r2, #0
 8008842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008846:	2300      	movs	r3, #0
}
 8008848:	4618      	mov	r0, r3
 800884a:	3758      	adds	r7, #88	@ 0x58
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b084      	sub	sp, #16
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	603b      	str	r3, [r7, #0]
 800885c:	4613      	mov	r3, r2
 800885e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008860:	e04f      	b.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008868:	d04b      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800886a:	f7f8 fc8f 	bl	800118c <HAL_GetTick>
 800886e:	4602      	mov	r2, r0
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	1ad3      	subs	r3, r2, r3
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	429a      	cmp	r2, r3
 8008878:	d302      	bcc.n	8008880 <UART_WaitOnFlagUntilTimeout+0x30>
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008880:	2303      	movs	r3, #3
 8008882:	e04e      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f003 0304 	and.w	r3, r3, #4
 800888e:	2b00      	cmp	r3, #0
 8008890:	d037      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2b80      	cmp	r3, #128	@ 0x80
 8008896:	d034      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2b40      	cmp	r3, #64	@ 0x40
 800889c:	d031      	beq.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f003 0308 	and.w	r3, r3, #8
 80088a8:	2b08      	cmp	r3, #8
 80088aa:	d110      	bne.n	80088ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	2208      	movs	r2, #8
 80088b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088b4:	68f8      	ldr	r0, [r7, #12]
 80088b6:	f000 f921 	bl	8008afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2208      	movs	r2, #8
 80088be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e029      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088dc:	d111      	bne.n	8008902 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088e8:	68f8      	ldr	r0, [r7, #12]
 80088ea:	f000 f907 	bl	8008afc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2220      	movs	r2, #32
 80088f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088fe:	2303      	movs	r3, #3
 8008900:	e00f      	b.n	8008922 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	4013      	ands	r3, r2
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	429a      	cmp	r2, r3
 8008910:	bf0c      	ite	eq
 8008912:	2301      	moveq	r3, #1
 8008914:	2300      	movne	r3, #0
 8008916:	b2db      	uxtb	r3, r3
 8008918:	461a      	mov	r2, r3
 800891a:	79fb      	ldrb	r3, [r7, #7]
 800891c:	429a      	cmp	r2, r3
 800891e:	d0a0      	beq.n	8008862 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008920:	2300      	movs	r3, #0
}
 8008922:	4618      	mov	r0, r3
 8008924:	3710      	adds	r7, #16
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
	...

0800892c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b096      	sub	sp, #88	@ 0x58
 8008930:	af00      	add	r7, sp, #0
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	4613      	mov	r3, r2
 8008938:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	68ba      	ldr	r2, [r7, #8]
 800893e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	88fa      	ldrh	r2, [r7, #6]
 8008944:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2222      	movs	r2, #34	@ 0x22
 8008954:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800895e:	2b00      	cmp	r3, #0
 8008960:	d02d      	beq.n	80089be <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008968:	4a40      	ldr	r2, [pc, #256]	@ (8008a6c <UART_Start_Receive_DMA+0x140>)
 800896a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008972:	4a3f      	ldr	r2, [pc, #252]	@ (8008a70 <UART_Start_Receive_DMA+0x144>)
 8008974:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800897c:	4a3d      	ldr	r2, [pc, #244]	@ (8008a74 <UART_Start_Receive_DMA+0x148>)
 800897e:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008986:	2200      	movs	r2, #0
 8008988:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	3324      	adds	r3, #36	@ 0x24
 8008996:	4619      	mov	r1, r3
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800899c:	461a      	mov	r2, r3
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	f7f9 f8f0 	bl	8001b84 <HAL_DMA_Start_IT>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d009      	beq.n	80089be <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	2210      	movs	r2, #16
 80089ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	2220      	movs	r2, #32
 80089b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 80089ba:	2301      	movs	r3, #1
 80089bc:	e051      	b.n	8008a62 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d018      	beq.n	80089f8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089ce:	e853 3f00 	ldrex	r3, [r3]
 80089d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089da:	657b      	str	r3, [r7, #84]	@ 0x54
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	461a      	mov	r2, r3
 80089e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089e6:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80089ea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089ec:	e841 2300 	strex	r3, r2, [r1]
 80089f0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80089f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d1e6      	bne.n	80089c6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	3308      	adds	r3, #8
 80089fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a0a:	f043 0301 	orr.w	r3, r3, #1
 8008a0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	3308      	adds	r3, #8
 8008a16:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008a18:	637a      	str	r2, [r7, #52]	@ 0x34
 8008a1a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a20:	e841 2300 	strex	r3, r2, [r1]
 8008a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d1e5      	bne.n	80089f8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3308      	adds	r3, #8
 8008a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	e853 3f00 	ldrex	r3, [r3]
 8008a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008a4c:	623a      	str	r2, [r7, #32]
 8008a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	69f9      	ldr	r1, [r7, #28]
 8008a52:	6a3a      	ldr	r2, [r7, #32]
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a5a:	69bb      	ldr	r3, [r7, #24]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e5      	bne.n	8008a2c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008a60:	2300      	movs	r3, #0
}
 8008a62:	4618      	mov	r0, r3
 8008a64:	3758      	adds	r7, #88	@ 0x58
 8008a66:	46bd      	mov	sp, r7
 8008a68:	bd80      	pop	{r7, pc}
 8008a6a:	bf00      	nop
 8008a6c:	08008c7b 	.word	0x08008c7b
 8008a70:	08008da3 	.word	0x08008da3
 8008a74:	08008de1 	.word	0x08008de1

08008a78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b08f      	sub	sp, #60	@ 0x3c
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a86:	6a3b      	ldr	r3, [r7, #32]
 8008a88:	e853 3f00 	ldrex	r3, [r3]
 8008a8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a94:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008aa0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008aa4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e6      	bne.n	8008a80 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3308      	adds	r3, #8
 8008ab8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ac8:	633b      	str	r3, [r7, #48]	@ 0x30
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	3308      	adds	r3, #8
 8008ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ad2:	61ba      	str	r2, [r7, #24]
 8008ad4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ad6:	6979      	ldr	r1, [r7, #20]
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	e841 2300 	strex	r3, r2, [r1]
 8008ade:	613b      	str	r3, [r7, #16]
   return(result);
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d1e5      	bne.n	8008ab2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2220      	movs	r2, #32
 8008aea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008aee:	bf00      	nop
 8008af0:	373c      	adds	r7, #60	@ 0x3c
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr
	...

08008afc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b095      	sub	sp, #84	@ 0x54
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b22:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b24:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b2a:	e841 2300 	strex	r3, r2, [r1]
 8008b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1e6      	bne.n	8008b04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b3e:	6a3b      	ldr	r3, [r7, #32]
 8008b40:	e853 3f00 	ldrex	r3, [r3]
 8008b44:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b46:	69fa      	ldr	r2, [r7, #28]
 8008b48:	4b1e      	ldr	r3, [pc, #120]	@ (8008bc4 <UART_EndRxTransfer+0xc8>)
 8008b4a:	4013      	ands	r3, r2
 8008b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	3308      	adds	r3, #8
 8008b54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b5e:	e841 2300 	strex	r3, r2, [r1]
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1e5      	bne.n	8008b36 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b6e:	2b01      	cmp	r3, #1
 8008b70:	d118      	bne.n	8008ba4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	e853 3f00 	ldrex	r3, [r3]
 8008b7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	f023 0310 	bic.w	r3, r3, #16
 8008b86:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b90:	61bb      	str	r3, [r7, #24]
 8008b92:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b94:	6979      	ldr	r1, [r7, #20]
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	e841 2300 	strex	r3, r2, [r1]
 8008b9c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d1e6      	bne.n	8008b72 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2220      	movs	r2, #32
 8008ba8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008bb8:	bf00      	nop
 8008bba:	3754      	adds	r7, #84	@ 0x54
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr
 8008bc4:	effffffe 	.word	0xeffffffe

08008bc8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b090      	sub	sp, #64	@ 0x40
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bde:	d037      	beq.n	8008c50 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8008be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008be2:	2200      	movs	r2, #0
 8008be4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008be8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	3308      	adds	r3, #8
 8008bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8008bf8:	6a3b      	ldr	r3, [r7, #32]
 8008bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008c00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	3308      	adds	r3, #8
 8008c06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c08:	633a      	str	r2, [r7, #48]	@ 0x30
 8008c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e5      	bne.n	8008be8 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	e853 3f00 	ldrex	r3, [r3]
 8008c28:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c30:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	461a      	mov	r2, r3
 8008c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c3a:	61fb      	str	r3, [r7, #28]
 8008c3c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3e:	69b9      	ldr	r1, [r7, #24]
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	e841 2300 	strex	r3, r2, [r1]
 8008c46:	617b      	str	r3, [r7, #20]
   return(result);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e6      	bne.n	8008c1c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c4e:	e002      	b.n	8008c56 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8008c50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008c52:	f7fe ff17 	bl	8007a84 <HAL_UART_TxCpltCallback>
}
 8008c56:	bf00      	nop
 8008c58:	3740      	adds	r7, #64	@ 0x40
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008c6c:	68f8      	ldr	r0, [r7, #12]
 8008c6e:	f7fe ff13 	bl	8007a98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c72:	bf00      	nop
 8008c74:	3710      	adds	r7, #16
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}

08008c7a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008c7a:	b580      	push	{r7, lr}
 8008c7c:	b09c      	sub	sp, #112	@ 0x70
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	69db      	ldr	r3, [r3, #28]
 8008c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c90:	d071      	beq.n	8008d76 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008c92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c94:	2200      	movs	r2, #0
 8008c96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ca8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008caa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008cae:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008cb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cba:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cbe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cc0:	e841 2300 	strex	r3, r2, [r1]
 8008cc4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1e6      	bne.n	8008c9a <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3308      	adds	r3, #8
 8008cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd6:	e853 3f00 	ldrex	r3, [r3]
 8008cda:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cde:	f023 0301 	bic.w	r3, r3, #1
 8008ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8008ce4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	3308      	adds	r3, #8
 8008cea:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008cec:	647a      	str	r2, [r7, #68]	@ 0x44
 8008cee:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cf4:	e841 2300 	strex	r3, r2, [r1]
 8008cf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d1e5      	bne.n	8008ccc <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3308      	adds	r3, #8
 8008d06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0a:	e853 3f00 	ldrex	r3, [r3]
 8008d0e:	623b      	str	r3, [r7, #32]
   return(result);
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d16:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	3308      	adds	r3, #8
 8008d1e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008d20:	633a      	str	r2, [r7, #48]	@ 0x30
 8008d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d28:	e841 2300 	strex	r3, r2, [r1]
 8008d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d1e5      	bne.n	8008d00 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d36:	2220      	movs	r2, #32
 8008d38:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d118      	bne.n	8008d76 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	693b      	ldr	r3, [r7, #16]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f023 0310 	bic.w	r3, r3, #16
 8008d58:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d62:	61fb      	str	r3, [r7, #28]
 8008d64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	69b9      	ldr	r1, [r7, #24]
 8008d68:	69fa      	ldr	r2, [r7, #28]
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	617b      	str	r3, [r7, #20]
   return(result);
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e6      	bne.n	8008d44 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d78:	2200      	movs	r2, #0
 8008d7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d80:	2b01      	cmp	r3, #1
 8008d82:	d107      	bne.n	8008d94 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008d84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008d86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d8e:	f7f7 fc1b 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008d92:	e002      	b.n	8008d9a <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8008d94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008d96:	f7fe fe89 	bl	8007aac <HAL_UART_RxCpltCallback>
}
 8008d9a:	bf00      	nop
 8008d9c:	3770      	adds	r7, #112	@ 0x70
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b084      	sub	sp, #16
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2201      	movs	r2, #1
 8008db4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d109      	bne.n	8008dd2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008dc4:	085b      	lsrs	r3, r3, #1
 8008dc6:	b29b      	uxth	r3, r3
 8008dc8:	4619      	mov	r1, r3
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7f7 fbfc 	bl	80005c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008dd0:	e002      	b.n	8008dd8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8008dd2:	68f8      	ldr	r0, [r7, #12]
 8008dd4:	f7fe fe74 	bl	8007ac0 <HAL_UART_RxHalfCpltCallback>
}
 8008dd8:	bf00      	nop
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b086      	sub	sp, #24
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008dec:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008df4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	689b      	ldr	r3, [r3, #8]
 8008e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e08:	2b80      	cmp	r3, #128	@ 0x80
 8008e0a:	d109      	bne.n	8008e20 <UART_DMAError+0x40>
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2b21      	cmp	r3, #33	@ 0x21
 8008e10:	d106      	bne.n	8008e20 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2200      	movs	r2, #0
 8008e16:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008e1a:	6978      	ldr	r0, [r7, #20]
 8008e1c:	f7ff fe2c 	bl	8008a78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e2a:	2b40      	cmp	r3, #64	@ 0x40
 8008e2c:	d109      	bne.n	8008e42 <UART_DMAError+0x62>
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2b22      	cmp	r3, #34	@ 0x22
 8008e32:	d106      	bne.n	8008e42 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008e3c:	6978      	ldr	r0, [r7, #20]
 8008e3e:	f7ff fe5d 	bl	8008afc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008e48:	f043 0210 	orr.w	r2, r3, #16
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e52:	6978      	ldr	r0, [r7, #20]
 8008e54:	f7fe fe3e 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e58:	bf00      	nop
 8008e5a:	3718      	adds	r7, #24
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}

08008e60 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b084      	sub	sp, #16
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f7fe fe28 	bl	8007ad4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e84:	bf00      	nop
 8008e86:	3710      	adds	r7, #16
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b088      	sub	sp, #32
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	e853 3f00 	ldrex	r3, [r3]
 8008ea0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ea8:	61fb      	str	r3, [r7, #28]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	461a      	mov	r2, r3
 8008eb0:	69fb      	ldr	r3, [r7, #28]
 8008eb2:	61bb      	str	r3, [r7, #24]
 8008eb4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eb6:	6979      	ldr	r1, [r7, #20]
 8008eb8:	69ba      	ldr	r2, [r7, #24]
 8008eba:	e841 2300 	strex	r3, r2, [r1]
 8008ebe:	613b      	str	r3, [r7, #16]
   return(result);
 8008ec0:	693b      	ldr	r3, [r7, #16]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d1e6      	bne.n	8008e94 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2220      	movs	r2, #32
 8008eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7fe fdd5 	bl	8007a84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eda:	bf00      	nop
 8008edc:	3720      	adds	r7, #32
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}

08008ee2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ee2:	b480      	push	{r7}
 8008ee4:	b083      	sub	sp, #12
 8008ee6:	af00      	add	r7, sp, #0
 8008ee8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008eea:	bf00      	nop
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008ef6:	b480      	push	{r7}
 8008ef8:	b083      	sub	sp, #12
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008efe:	bf00      	nop
 8008f00:	370c      	adds	r7, #12
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr

08008f0a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008f0a:	b480      	push	{r7}
 8008f0c:	b083      	sub	sp, #12
 8008f0e:	af00      	add	r7, sp, #0
 8008f10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008f12:	bf00      	nop
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b085      	sub	sp, #20
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008f2c:	2b01      	cmp	r3, #1
 8008f2e:	d101      	bne.n	8008f34 <HAL_UARTEx_DisableFifoMode+0x16>
 8008f30:	2302      	movs	r3, #2
 8008f32:	e027      	b.n	8008f84 <HAL_UARTEx_DisableFifoMode+0x66>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2224      	movs	r2, #36	@ 0x24
 8008f40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	681a      	ldr	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f022 0201 	bic.w	r2, r2, #1
 8008f5a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008f62:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	2220      	movs	r2, #32
 8008f76:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f82:	2300      	movs	r3, #0
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3714      	adds	r7, #20
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e02d      	b.n	8009004 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2224      	movs	r2, #36	@ 0x24
 8008fb4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f022 0201 	bic.w	r2, r2, #1
 8008fce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	683a      	ldr	r2, [r7, #0]
 8008fe0:	430a      	orrs	r2, r1
 8008fe2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 f8a3 	bl	8009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3710      	adds	r7, #16
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}

0800900c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
 8009014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800901c:	2b01      	cmp	r3, #1
 800901e:	d101      	bne.n	8009024 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009020:	2302      	movs	r3, #2
 8009022:	e02d      	b.n	8009080 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2224      	movs	r2, #36	@ 0x24
 8009030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	681a      	ldr	r2, [r3, #0]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f022 0201 	bic.w	r2, r2, #1
 800904a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f865 	bl	8009130 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2220      	movs	r2, #32
 8009072:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b08c      	sub	sp, #48	@ 0x30
 800908c:	af00      	add	r7, sp, #0
 800908e:	60f8      	str	r0, [r7, #12]
 8009090:	60b9      	str	r1, [r7, #8]
 8009092:	4613      	mov	r3, r2
 8009094:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800909c:	2b20      	cmp	r3, #32
 800909e:	d142      	bne.n	8009126 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80090a6:	88fb      	ldrh	r3, [r7, #6]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d101      	bne.n	80090b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80090ac:	2301      	movs	r3, #1
 80090ae:	e03b      	b.n	8009128 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2201      	movs	r2, #1
 80090b4:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	2200      	movs	r2, #0
 80090ba:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80090bc:	88fb      	ldrh	r3, [r7, #6]
 80090be:	461a      	mov	r2, r3
 80090c0:	68b9      	ldr	r1, [r7, #8]
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f7ff fc32 	bl	800892c <UART_Start_Receive_DMA>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80090ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d124      	bne.n	8009120 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d11d      	bne.n	800911a <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2210      	movs	r2, #16
 80090e4:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	e853 3f00 	ldrex	r3, [r3]
 80090f2:	617b      	str	r3, [r7, #20]
   return(result);
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f043 0310 	orr.w	r3, r3, #16
 80090fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	461a      	mov	r2, r3
 8009102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009104:	627b      	str	r3, [r7, #36]	@ 0x24
 8009106:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009108:	6a39      	ldr	r1, [r7, #32]
 800910a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800910c:	e841 2300 	strex	r3, r2, [r1]
 8009110:	61fb      	str	r3, [r7, #28]
   return(result);
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d1e6      	bne.n	80090e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009118:	e002      	b.n	8009120 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8009120:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009124:	e000      	b.n	8009128 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3730      	adds	r7, #48	@ 0x30
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009130:	b480      	push	{r7}
 8009132:	b085      	sub	sp, #20
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800913c:	2b00      	cmp	r3, #0
 800913e:	d108      	bne.n	8009152 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2201      	movs	r2, #1
 800914c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009150:	e031      	b.n	80091b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009152:	2310      	movs	r3, #16
 8009154:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009156:	2310      	movs	r3, #16
 8009158:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	0e5b      	lsrs	r3, r3, #25
 8009162:	b2db      	uxtb	r3, r3
 8009164:	f003 0307 	and.w	r3, r3, #7
 8009168:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	0f5b      	lsrs	r3, r3, #29
 8009172:	b2db      	uxtb	r3, r3
 8009174:	f003 0307 	and.w	r3, r3, #7
 8009178:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	7b3a      	ldrb	r2, [r7, #12]
 800917e:	4911      	ldr	r1, [pc, #68]	@ (80091c4 <UARTEx_SetNbDataToProcess+0x94>)
 8009180:	5c8a      	ldrb	r2, [r1, r2]
 8009182:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009186:	7b3a      	ldrb	r2, [r7, #12]
 8009188:	490f      	ldr	r1, [pc, #60]	@ (80091c8 <UARTEx_SetNbDataToProcess+0x98>)
 800918a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800918c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009190:	b29a      	uxth	r2, r3
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009198:	7bfb      	ldrb	r3, [r7, #15]
 800919a:	7b7a      	ldrb	r2, [r7, #13]
 800919c:	4909      	ldr	r1, [pc, #36]	@ (80091c4 <UARTEx_SetNbDataToProcess+0x94>)
 800919e:	5c8a      	ldrb	r2, [r1, r2]
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80091a4:	7b7a      	ldrb	r2, [r7, #13]
 80091a6:	4908      	ldr	r1, [pc, #32]	@ (80091c8 <UARTEx_SetNbDataToProcess+0x98>)
 80091a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80091aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80091ae:	b29a      	uxth	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80091b6:	bf00      	nop
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	0800926c 	.word	0x0800926c
 80091c8:	08009274 	.word	0x08009274

080091cc <memset>:
 80091cc:	4402      	add	r2, r0
 80091ce:	4603      	mov	r3, r0
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d100      	bne.n	80091d6 <memset+0xa>
 80091d4:	4770      	bx	lr
 80091d6:	f803 1b01 	strb.w	r1, [r3], #1
 80091da:	e7f9      	b.n	80091d0 <memset+0x4>

080091dc <__libc_init_array>:
 80091dc:	b570      	push	{r4, r5, r6, lr}
 80091de:	4d0d      	ldr	r5, [pc, #52]	@ (8009214 <__libc_init_array+0x38>)
 80091e0:	4c0d      	ldr	r4, [pc, #52]	@ (8009218 <__libc_init_array+0x3c>)
 80091e2:	1b64      	subs	r4, r4, r5
 80091e4:	10a4      	asrs	r4, r4, #2
 80091e6:	2600      	movs	r6, #0
 80091e8:	42a6      	cmp	r6, r4
 80091ea:	d109      	bne.n	8009200 <__libc_init_array+0x24>
 80091ec:	4d0b      	ldr	r5, [pc, #44]	@ (800921c <__libc_init_array+0x40>)
 80091ee:	4c0c      	ldr	r4, [pc, #48]	@ (8009220 <__libc_init_array+0x44>)
 80091f0:	f000 f818 	bl	8009224 <_init>
 80091f4:	1b64      	subs	r4, r4, r5
 80091f6:	10a4      	asrs	r4, r4, #2
 80091f8:	2600      	movs	r6, #0
 80091fa:	42a6      	cmp	r6, r4
 80091fc:	d105      	bne.n	800920a <__libc_init_array+0x2e>
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	f855 3b04 	ldr.w	r3, [r5], #4
 8009204:	4798      	blx	r3
 8009206:	3601      	adds	r6, #1
 8009208:	e7ee      	b.n	80091e8 <__libc_init_array+0xc>
 800920a:	f855 3b04 	ldr.w	r3, [r5], #4
 800920e:	4798      	blx	r3
 8009210:	3601      	adds	r6, #1
 8009212:	e7f2      	b.n	80091fa <__libc_init_array+0x1e>
 8009214:	08009284 	.word	0x08009284
 8009218:	08009284 	.word	0x08009284
 800921c:	08009284 	.word	0x08009284
 8009220:	08009288 	.word	0x08009288

08009224 <_init>:
 8009224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009226:	bf00      	nop
 8009228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800922a:	bc08      	pop	{r3}
 800922c:	469e      	mov	lr, r3
 800922e:	4770      	bx	lr

08009230 <_fini>:
 8009230:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009232:	bf00      	nop
 8009234:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009236:	bc08      	pop	{r3}
 8009238:	469e      	mov	lr, r3
 800923a:	4770      	bx	lr
