
LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e88  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08002120  08002120  00003120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002130  08002130  00003130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  08002134  08002134  00003134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         00000010  24000000  08002138  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  24000010  08002148  00004010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24000030  08002148  00004030  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00007029  00000000  00000000  0000403e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001285  00000000  00000000  0000b067  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000610  00000000  00000000  0000c2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000473  00000000  00000000  0000c900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00034471  00000000  00000000  0000cd73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   000073ae  00000000  00000000  000411e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0014d9e8  00000000  00000000  00048592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  00195f7a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000016f0  00000000  00000000  00195fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000055  00000000  00000000  001976b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002108 	.word	0x08002108

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08002108 	.word	0x08002108

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80002de:	f000 f9f5 	bl	80006cc <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e2:	f000 fb21 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002e6:	f000 f8f5 	bl	80004d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ea:	f000 f95d 	bl	80005a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  int i = 0, state = 0;
 80002ee:	2300      	movs	r3, #0
 80002f0:	607b      	str	r3, [r7, #4]
 80002f2:	2300      	movs	r3, #0
 80002f4:	603b      	str	r3, [r7, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)			// KEY1按下
 80002f6:	2101      	movs	r1, #1
 80002f8:	4873      	ldr	r0, [pc, #460]	@ (80004c8 <main+0x1f0>)
 80002fa:	f000 fee3 	bl	80010c4 <HAL_GPIO_ReadPin>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b01      	cmp	r3, #1
 8000302:	d141      	bne.n	8000388 <main+0xb0>
	  {
		  while(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET);	// 防止多次触发
 8000304:	bf00      	nop
 8000306:	2101      	movs	r1, #1
 8000308:	486f      	ldr	r0, [pc, #444]	@ (80004c8 <main+0x1f0>)
 800030a:	f000 fedb 	bl	80010c4 <HAL_GPIO_ReadPin>
 800030e:	4603      	mov	r3, r0
 8000310:	2b01      	cmp	r3, #1
 8000312:	d0f8      	beq.n	8000306 <main+0x2e>
		  i++;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	3301      	adds	r3, #1
 8000318:	607b      	str	r3, [r7, #4]
		  if(i == 1)															// 每按一次KEY1，红绿蓝三色LED依次亮起
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	2b01      	cmp	r3, #1
 800031e:	d10f      	bne.n	8000340 <main+0x68>
		  {
			  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2101      	movs	r1, #1
 8000324:	4869      	ldr	r0, [pc, #420]	@ (80004cc <main+0x1f4>)
 8000326:	f000 fee5 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800032a:	2201      	movs	r2, #1
 800032c:	2102      	movs	r1, #2
 800032e:	4867      	ldr	r0, [pc, #412]	@ (80004cc <main+0x1f4>)
 8000330:	f000 fee0 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	2108      	movs	r1, #8
 8000338:	4863      	ldr	r0, [pc, #396]	@ (80004c8 <main+0x1f0>)
 800033a:	f000 fedb 	bl	80010f4 <HAL_GPIO_WritePin>
 800033e:	e023      	b.n	8000388 <main+0xb0>
		  }
		  else if(i == 2)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	2b02      	cmp	r3, #2
 8000344:	d10f      	bne.n	8000366 <main+0x8e>
		  {
			  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2101      	movs	r1, #1
 800034a:	4860      	ldr	r0, [pc, #384]	@ (80004cc <main+0x1f4>)
 800034c:	f000 fed2 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2102      	movs	r1, #2
 8000354:	485d      	ldr	r0, [pc, #372]	@ (80004cc <main+0x1f4>)
 8000356:	f000 fecd 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 800035a:	2201      	movs	r2, #1
 800035c:	2108      	movs	r1, #8
 800035e:	485a      	ldr	r0, [pc, #360]	@ (80004c8 <main+0x1f0>)
 8000360:	f000 fec8 	bl	80010f4 <HAL_GPIO_WritePin>
 8000364:	e010      	b.n	8000388 <main+0xb0>
		  }
		  else
		  {
			  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000366:	2201      	movs	r2, #1
 8000368:	2101      	movs	r1, #1
 800036a:	4858      	ldr	r0, [pc, #352]	@ (80004cc <main+0x1f4>)
 800036c:	f000 fec2 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	2102      	movs	r1, #2
 8000374:	4855      	ldr	r0, [pc, #340]	@ (80004cc <main+0x1f4>)
 8000376:	f000 febd 	bl	80010f4 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800037a:	2200      	movs	r2, #0
 800037c:	2108      	movs	r1, #8
 800037e:	4852      	ldr	r0, [pc, #328]	@ (80004c8 <main+0x1f0>)
 8000380:	f000 feb8 	bl	80010f4 <HAL_GPIO_WritePin>
			  i = 0;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
		  }
	  }

	  if(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_SET)			// KEY2按下
 8000388:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800038c:	4850      	ldr	r0, [pc, #320]	@ (80004d0 <main+0x1f8>)
 800038e:	f000 fe99 	bl	80010c4 <HAL_GPIO_ReadPin>
 8000392:	4603      	mov	r3, r0
 8000394:	2b01      	cmp	r3, #1
 8000396:	d1ae      	bne.n	80002f6 <main+0x1e>
	  {
		  while(HAL_GPIO_ReadPin(KEY2_GPIO_Port, KEY2_Pin) == GPIO_PIN_SET);	// 防止多次触发
 8000398:	bf00      	nop
 800039a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039e:	484c      	ldr	r0, [pc, #304]	@ (80004d0 <main+0x1f8>)
 80003a0:	f000 fe90 	bl	80010c4 <HAL_GPIO_ReadPin>
 80003a4:	4603      	mov	r3, r0
 80003a6:	2b01      	cmp	r3, #1
 80003a8:	d0f7      	beq.n	800039a <main+0xc2>
		  while(1)
		  {
			  state++;
 80003aa:	683b      	ldr	r3, [r7, #0]
 80003ac:	3301      	adds	r3, #1
 80003ae:	603b      	str	r3, [r7, #0]
			  switch(state)														// 混色LED循环闪烁，间隔0.1秒
 80003b0:	683b      	ldr	r3, [r7, #0]
 80003b2:	2b05      	cmp	r3, #5
 80003b4:	d86e      	bhi.n	8000494 <main+0x1bc>
 80003b6:	a201      	add	r2, pc, #4	@ (adr r2, 80003bc <main+0xe4>)
 80003b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003bc:	080003d5 	.word	0x080003d5
 80003c0:	080003f5 	.word	0x080003f5
 80003c4:	08000415 	.word	0x08000415
 80003c8:	08000435 	.word	0x08000435
 80003cc:	08000455 	.word	0x08000455
 80003d0:	08000475 	.word	0x08000475
			  {
			  case 0:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	2101      	movs	r1, #1
 80003d8:	483c      	ldr	r0, [pc, #240]	@ (80004cc <main+0x1f4>)
 80003da:	f000 fe8b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 80003de:	2201      	movs	r2, #1
 80003e0:	2102      	movs	r1, #2
 80003e2:	483a      	ldr	r0, [pc, #232]	@ (80004cc <main+0x1f4>)
 80003e4:	f000 fe86 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 80003e8:	2201      	movs	r2, #1
 80003ea:	2108      	movs	r1, #8
 80003ec:	4836      	ldr	r0, [pc, #216]	@ (80004c8 <main+0x1f0>)
 80003ee:	f000 fe81 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 80003f2:	e050      	b.n	8000496 <main+0x1be>
			  }
			  case 1:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2101      	movs	r1, #1
 80003f8:	4834      	ldr	r0, [pc, #208]	@ (80004cc <main+0x1f4>)
 80003fa:	f000 fe7b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2102      	movs	r1, #2
 8000402:	4832      	ldr	r0, [pc, #200]	@ (80004cc <main+0x1f4>)
 8000404:	f000 fe76 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000408:	2201      	movs	r2, #1
 800040a:	2108      	movs	r1, #8
 800040c:	482e      	ldr	r0, [pc, #184]	@ (80004c8 <main+0x1f0>)
 800040e:	f000 fe71 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 8000412:	e040      	b.n	8000496 <main+0x1be>
			  }
			  case 2:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2101      	movs	r1, #1
 8000418:	482c      	ldr	r0, [pc, #176]	@ (80004cc <main+0x1f4>)
 800041a:	f000 fe6b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2102      	movs	r1, #2
 8000422:	482a      	ldr	r0, [pc, #168]	@ (80004cc <main+0x1f4>)
 8000424:	f000 fe66 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	4826      	ldr	r0, [pc, #152]	@ (80004c8 <main+0x1f0>)
 800042e:	f000 fe61 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 8000432:	e030      	b.n	8000496 <main+0x1be>
			  }
			  case 3:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000434:	2201      	movs	r2, #1
 8000436:	2101      	movs	r1, #1
 8000438:	4824      	ldr	r0, [pc, #144]	@ (80004cc <main+0x1f4>)
 800043a:	f000 fe5b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800043e:	2200      	movs	r2, #0
 8000440:	2102      	movs	r1, #2
 8000442:	4822      	ldr	r0, [pc, #136]	@ (80004cc <main+0x1f4>)
 8000444:	f000 fe56 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2108      	movs	r1, #8
 800044c:	481e      	ldr	r0, [pc, #120]	@ (80004c8 <main+0x1f0>)
 800044e:	f000 fe51 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 8000452:	e020      	b.n	8000496 <main+0x1be>
			  }
			  case 4:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_SET);
 8000454:	2201      	movs	r2, #1
 8000456:	2101      	movs	r1, #1
 8000458:	481c      	ldr	r0, [pc, #112]	@ (80004cc <main+0x1f4>)
 800045a:	f000 fe4b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800045e:	2201      	movs	r2, #1
 8000460:	2102      	movs	r1, #2
 8000462:	481a      	ldr	r0, [pc, #104]	@ (80004cc <main+0x1f4>)
 8000464:	f000 fe46 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000468:	2200      	movs	r2, #0
 800046a:	2108      	movs	r1, #8
 800046c:	4816      	ldr	r0, [pc, #88]	@ (80004c8 <main+0x1f0>)
 800046e:	f000 fe41 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 8000472:	e010      	b.n	8000496 <main+0x1be>
			  }
			  case 5:
			  {
				  HAL_GPIO_WritePin(LED_R_GPIO_Port, LED_R_Pin, GPIO_PIN_RESET);
 8000474:	2200      	movs	r2, #0
 8000476:	2101      	movs	r1, #1
 8000478:	4814      	ldr	r0, [pc, #80]	@ (80004cc <main+0x1f4>)
 800047a:	f000 fe3b 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_SET);
 800047e:	2201      	movs	r2, #1
 8000480:	2102      	movs	r1, #2
 8000482:	4812      	ldr	r0, [pc, #72]	@ (80004cc <main+0x1f4>)
 8000484:	f000 fe36 	bl	80010f4 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 8000488:	2200      	movs	r2, #0
 800048a:	2108      	movs	r1, #8
 800048c:	480e      	ldr	r0, [pc, #56]	@ (80004c8 <main+0x1f0>)
 800048e:	f000 fe31 	bl	80010f4 <HAL_GPIO_WritePin>
				  break;
 8000492:	e000      	b.n	8000496 <main+0x1be>
			  }
			  default:
			  {
				  break;
 8000494:	bf00      	nop
			  }
			  }
			  HAL_Delay(100);
 8000496:	2064      	movs	r0, #100	@ 0x64
 8000498:	f000 fad8 	bl	8000a4c <HAL_Delay>
			  if(state > 5)														// 初始化循环状态
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	2b05      	cmp	r3, #5
 80004a0:	dd01      	ble.n	80004a6 <main+0x1ce>
			  {
				  state = 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	603b      	str	r3, [r7, #0]
			  }
			  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)	// KEY1按下后，LED停止闪烁
 80004a6:	2101      	movs	r1, #1
 80004a8:	4807      	ldr	r0, [pc, #28]	@ (80004c8 <main+0x1f0>)
 80004aa:	f000 fe0b 	bl	80010c4 <HAL_GPIO_ReadPin>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b01      	cmp	r3, #1
 80004b2:	f47f af7a 	bne.w	80003aa <main+0xd2>
			  {
				  while(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET);
 80004b6:	bf00      	nop
 80004b8:	2101      	movs	r1, #1
 80004ba:	4803      	ldr	r0, [pc, #12]	@ (80004c8 <main+0x1f0>)
 80004bc:	f000 fe02 	bl	80010c4 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d0f8      	beq.n	80004b8 <main+0x1e0>
	  if(HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin) == GPIO_PIN_SET)			// KEY1按下
 80004c6:	e716      	b.n	80002f6 <main+0x1e>
 80004c8:	58020000 	.word	0x58020000
 80004cc:	58020400 	.word	0x58020400
 80004d0:	58020800 	.word	0x58020800

080004d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09c      	sub	sp, #112	@ 0x70
 80004d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80004de:	224c      	movs	r2, #76	@ 0x4c
 80004e0:	2100      	movs	r1, #0
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fde4 	bl	80020b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	2220      	movs	r2, #32
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fdde 	bl	80020b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f000 fe17 	bl	8001128 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80004fa:	2300      	movs	r3, #0
 80004fc:	603b      	str	r3, [r7, #0]
 80004fe:	4b28      	ldr	r3, [pc, #160]	@ (80005a0 <SystemClock_Config+0xcc>)
 8000500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000502:	4a27      	ldr	r2, [pc, #156]	@ (80005a0 <SystemClock_Config+0xcc>)
 8000504:	f023 0301 	bic.w	r3, r3, #1
 8000508:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800050a:	4b25      	ldr	r3, [pc, #148]	@ (80005a0 <SystemClock_Config+0xcc>)
 800050c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800050e:	f003 0301 	and.w	r3, r3, #1
 8000512:	603b      	str	r3, [r7, #0]
 8000514:	4b23      	ldr	r3, [pc, #140]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800051c:	4a21      	ldr	r2, [pc, #132]	@ (80005a4 <SystemClock_Config+0xd0>)
 800051e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000522:	6193      	str	r3, [r2, #24]
 8000524:	4b1f      	ldr	r3, [pc, #124]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800052c:	603b      	str	r3, [r7, #0]
 800052e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000530:	bf00      	nop
 8000532:	4b1c      	ldr	r3, [pc, #112]	@ (80005a4 <SystemClock_Config+0xd0>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800053a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800053e:	d1f8      	bne.n	8000532 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000540:	2302      	movs	r3, #2
 8000542:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000544:	2301      	movs	r3, #1
 8000546:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000548:	2340      	movs	r3, #64	@ 0x40
 800054a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800054c:	2300      	movs	r3, #0
 800054e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000554:	4618      	mov	r0, r3
 8000556:	f000 fe21 	bl	800119c <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000560:	f000 f8e0 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	233f      	movs	r3, #63	@ 0x3f
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000570:	2300      	movs	r3, #0
 8000572:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000578:	2300      	movs	r3, #0
 800057a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800057c:	2300      	movs	r3, #0
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000580:	2300      	movs	r3, #0
 8000582:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2101      	movs	r1, #1
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fa61 	bl	8001a50 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000594:	f000 f8c6 	bl	8000724 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3770      	adds	r7, #112	@ 0x70
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	58000400 	.word	0x58000400
 80005a4:	58024800 	.word	0x58024800

080005a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	@ 0x28
 80005ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 0314 	add.w	r3, r7, #20
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b3f      	ldr	r3, [pc, #252]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005c4:	4a3d      	ldr	r2, [pc, #244]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005c6:	f043 0304 	orr.w	r3, r3, #4
 80005ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ce:	4b3b      	ldr	r3, [pc, #236]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005dc:	4b37      	ldr	r3, [pc, #220]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005e2:	4a36      	ldr	r2, [pc, #216]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80005ec:	4b33      	ldr	r3, [pc, #204]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80005f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fa:	4b30      	ldr	r3, [pc, #192]	@ (80006bc <MX_GPIO_Init+0x114>)
 80005fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000600:	4a2e      	ldr	r2, [pc, #184]	@ (80006bc <MX_GPIO_Init+0x114>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800060a:	4b2c      	ldr	r3, [pc, #176]	@ (80006bc <MX_GPIO_Init+0x114>)
 800060c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000610:	f003 0301 	and.w	r3, r3, #1
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000618:	4b28      	ldr	r3, [pc, #160]	@ (80006bc <MX_GPIO_Init+0x114>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a27      	ldr	r2, [pc, #156]	@ (80006bc <MX_GPIO_Init+0x114>)
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <MX_GPIO_Init+0x114>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_G_Pin|LED_R_Pin, GPIO_PIN_SET);
 8000636:	2201      	movs	r2, #1
 8000638:	2103      	movs	r1, #3
 800063a:	4821      	ldr	r0, [pc, #132]	@ (80006c0 <MX_GPIO_Init+0x118>)
 800063c:	f000 fd5a 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_SET);
 8000640:	2201      	movs	r2, #1
 8000642:	2108      	movs	r1, #8
 8000644:	481f      	ldr	r0, [pc, #124]	@ (80006c4 <MX_GPIO_Init+0x11c>)
 8000646:	f000 fd55 	bl	80010f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY2_Pin */
  GPIO_InitStruct.Pin = KEY2_Pin;
 800064a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800064e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000654:	2302      	movs	r3, #2
 8000656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY2_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 0314 	add.w	r3, r7, #20
 800065c:	4619      	mov	r1, r3
 800065e:	481a      	ldr	r0, [pc, #104]	@ (80006c8 <MX_GPIO_Init+0x120>)
 8000660:	f000 fb80 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY1_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000664:	2301      	movs	r3, #1
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	4619      	mov	r1, r3
 8000676:	4813      	ldr	r0, [pc, #76]	@ (80006c4 <MX_GPIO_Init+0x11c>)
 8000678:	f000 fb74 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_R_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_R_Pin;
 800067c:	2303      	movs	r3, #3
 800067e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000680:	2301      	movs	r3, #1
 8000682:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000688:	2300      	movs	r3, #0
 800068a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068c:	f107 0314 	add.w	r3, r7, #20
 8000690:	4619      	mov	r1, r3
 8000692:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <MX_GPIO_Init+0x118>)
 8000694:	f000 fb66 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_B_Pin */
  GPIO_InitStruct.Pin = LED_B_Pin;
 8000698:	2308      	movs	r3, #8
 800069a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_B_GPIO_Port, &GPIO_InitStruct);
 80006a8:	f107 0314 	add.w	r3, r7, #20
 80006ac:	4619      	mov	r1, r3
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_GPIO_Init+0x11c>)
 80006b0:	f000 fb58 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	@ 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	58024400 	.word	0x58024400
 80006c0:	58020400 	.word	0x58020400
 80006c4:	58020000 	.word	0x58020000
 80006c8:	58020800 	.word	0x58020800

080006cc <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80006d2:	463b      	mov	r3, r7
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80006de:	f000 fac9 	bl	8000c74 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80006e2:	2301      	movs	r3, #1
 80006e4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80006ee:	231f      	movs	r3, #31
 80006f0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80006f2:	2387      	movs	r3, #135	@ 0x87
 80006f4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80006fa:	2300      	movs	r3, #0
 80006fc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80006fe:	2301      	movs	r3, #1
 8000700:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000702:	2301      	movs	r3, #1
 8000704:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800070a:	2300      	movs	r3, #0
 800070c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800070e:	463b      	mov	r3, r7
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fae7 	bl	8000ce4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000716:	2004      	movs	r0, #4
 8000718:	f000 fac4 	bl	8000ca4 <HAL_MPU_Enable>

}
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000736:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <HAL_MspInit+0x30>)
 8000738:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800073c:	4a08      	ldr	r2, [pc, #32]	@ (8000760 <HAL_MspInit+0x30>)
 800073e:	f043 0302 	orr.w	r3, r3, #2
 8000742:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <HAL_MspInit+0x30>)
 8000748:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800074c:	f003 0302 	and.w	r3, r3, #2
 8000750:	607b      	str	r3, [r7, #4]
 8000752:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	58024400 	.word	0x58024400

08000764 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000764:	b480      	push	{r7}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000768:	bf00      	nop
 800076a:	e7fd      	b.n	8000768 <NMI_Handler+0x4>

0800076c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <HardFault_Handler+0x4>

08000774 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <MemManage_Handler+0x4>

0800077c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <BusFault_Handler+0x4>

08000784 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <UsageFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr

080007b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b6:	b580      	push	{r7, lr}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ba:	f000 f927 	bl	8000a0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
	...

080007c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80007c8:	4b37      	ldr	r3, [pc, #220]	@ (80008a8 <SystemInit+0xe4>)
 80007ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80007ce:	4a36      	ldr	r2, [pc, #216]	@ (80008a8 <SystemInit+0xe4>)
 80007d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80007d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80007d8:	4b34      	ldr	r3, [pc, #208]	@ (80008ac <SystemInit+0xe8>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	f003 030f 	and.w	r3, r3, #15
 80007e0:	2b06      	cmp	r3, #6
 80007e2:	d807      	bhi.n	80007f4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80007e4:	4b31      	ldr	r3, [pc, #196]	@ (80008ac <SystemInit+0xe8>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f023 030f 	bic.w	r3, r3, #15
 80007ec:	4a2f      	ldr	r2, [pc, #188]	@ (80008ac <SystemInit+0xe8>)
 80007ee:	f043 0307 	orr.w	r3, r3, #7
 80007f2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80007f4:	4b2e      	ldr	r3, [pc, #184]	@ (80008b0 <SystemInit+0xec>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a2d      	ldr	r2, [pc, #180]	@ (80008b0 <SystemInit+0xec>)
 80007fa:	f043 0301 	orr.w	r3, r3, #1
 80007fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000800:	4b2b      	ldr	r3, [pc, #172]	@ (80008b0 <SystemInit+0xec>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000806:	4b2a      	ldr	r3, [pc, #168]	@ (80008b0 <SystemInit+0xec>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	4929      	ldr	r1, [pc, #164]	@ (80008b0 <SystemInit+0xec>)
 800080c:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <SystemInit+0xf0>)
 800080e:	4013      	ands	r3, r2
 8000810:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000812:	4b26      	ldr	r3, [pc, #152]	@ (80008ac <SystemInit+0xe8>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	2b00      	cmp	r3, #0
 800081c:	d007      	beq.n	800082e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800081e:	4b23      	ldr	r3, [pc, #140]	@ (80008ac <SystemInit+0xe8>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f023 030f 	bic.w	r3, r3, #15
 8000826:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <SystemInit+0xe8>)
 8000828:	f043 0307 	orr.w	r3, r3, #7
 800082c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800082e:	4b20      	ldr	r3, [pc, #128]	@ (80008b0 <SystemInit+0xec>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000834:	4b1e      	ldr	r3, [pc, #120]	@ (80008b0 <SystemInit+0xec>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800083a:	4b1d      	ldr	r3, [pc, #116]	@ (80008b0 <SystemInit+0xec>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <SystemInit+0xec>)
 8000842:	4a1d      	ldr	r2, [pc, #116]	@ (80008b8 <SystemInit+0xf4>)
 8000844:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <SystemInit+0xec>)
 8000848:	4a1c      	ldr	r2, [pc, #112]	@ (80008bc <SystemInit+0xf8>)
 800084a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <SystemInit+0xec>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	@ (80008c0 <SystemInit+0xfc>)
 8000850:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <SystemInit+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <SystemInit+0xec>)
 800085a:	4a19      	ldr	r2, [pc, #100]	@ (80008c0 <SystemInit+0xfc>)
 800085c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <SystemInit+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <SystemInit+0xec>)
 8000866:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <SystemInit+0xfc>)
 8000868:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <SystemInit+0xec>)
 800086c:	2200      	movs	r2, #0
 800086e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <SystemInit+0xec>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0e      	ldr	r2, [pc, #56]	@ (80008b0 <SystemInit+0xec>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <SystemInit+0xec>)
 800087e:	2200      	movs	r2, #0
 8000880:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000882:	4b10      	ldr	r3, [pc, #64]	@ (80008c4 <SystemInit+0x100>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <SystemInit+0x104>)
 8000888:	4013      	ands	r3, r2
 800088a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800088e:	d202      	bcs.n	8000896 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000890:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <SystemInit+0x108>)
 8000892:	2201      	movs	r2, #1
 8000894:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000896:	4b0e      	ldr	r3, [pc, #56]	@ (80008d0 <SystemInit+0x10c>)
 8000898:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800089c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr
 80008a8:	e000ed00 	.word	0xe000ed00
 80008ac:	52002000 	.word	0x52002000
 80008b0:	58024400 	.word	0x58024400
 80008b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80008b8:	02020200 	.word	0x02020200
 80008bc:	01ff0000 	.word	0x01ff0000
 80008c0:	01010280 	.word	0x01010280
 80008c4:	5c001000 	.word	0x5c001000
 80008c8:	ffff0000 	.word	0xffff0000
 80008cc:	51008108 	.word	0x51008108
 80008d0:	52004000 	.word	0x52004000

080008d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80008d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800090c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d8:	f7ff ff74 	bl	80007c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008dc:	480c      	ldr	r0, [pc, #48]	@ (8000910 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008de:	490d      	ldr	r1, [pc, #52]	@ (8000914 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e0:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	@ (800091c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008f4:	4c0a      	ldr	r4, [pc, #40]	@ (8000920 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000902:	f001 fbdd 	bl	80020c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000906:	f7ff fce7 	bl	80002d8 <main>
  bx  lr
 800090a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800090c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000910:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000914:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000918:	08002138 	.word	0x08002138
  ldr r2, =_sbss
 800091c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000920:	24000030 	.word	0x24000030

08000924 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC3_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092e:	2003      	movs	r0, #3
 8000930:	f000 f96e 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000934:	f001 fa42 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8000938:	4602      	mov	r2, r0
 800093a:	4b15      	ldr	r3, [pc, #84]	@ (8000990 <HAL_Init+0x68>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	0a1b      	lsrs	r3, r3, #8
 8000940:	f003 030f 	and.w	r3, r3, #15
 8000944:	4913      	ldr	r1, [pc, #76]	@ (8000994 <HAL_Init+0x6c>)
 8000946:	5ccb      	ldrb	r3, [r1, r3]
 8000948:	f003 031f 	and.w	r3, r3, #31
 800094c:	fa22 f303 	lsr.w	r3, r2, r3
 8000950:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000952:	4b0f      	ldr	r3, [pc, #60]	@ (8000990 <HAL_Init+0x68>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	4a0e      	ldr	r2, [pc, #56]	@ (8000994 <HAL_Init+0x6c>)
 800095c:	5cd3      	ldrb	r3, [r2, r3]
 800095e:	f003 031f 	and.w	r3, r3, #31
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	fa22 f303 	lsr.w	r3, r2, r3
 8000968:	4a0b      	ldr	r2, [pc, #44]	@ (8000998 <HAL_Init+0x70>)
 800096a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800096c:	4a0b      	ldr	r2, [pc, #44]	@ (800099c <HAL_Init+0x74>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	200f      	movs	r0, #15
 8000974:	f000 f814 	bl	80009a0 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e002      	b.n	8000988 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000982:	f7ff fed5 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	58024400 	.word	0x58024400
 8000994:	08002120 	.word	0x08002120
 8000998:	24000004 	.word	0x24000004
 800099c:	24000000 	.word	0x24000000

080009a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80009a8:	4b15      	ldr	r3, [pc, #84]	@ (8000a00 <HAL_InitTick+0x60>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d101      	bne.n	80009b4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80009b0:	2301      	movs	r3, #1
 80009b2:	e021      	b.n	80009f8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80009b4:	4b13      	ldr	r3, [pc, #76]	@ (8000a04 <HAL_InitTick+0x64>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b11      	ldr	r3, [pc, #68]	@ (8000a00 <HAL_InitTick+0x60>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	4619      	mov	r1, r3
 80009be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80009c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ca:	4618      	mov	r0, r3
 80009cc:	f000 f945 	bl	8000c5a <HAL_SYSTICK_Config>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80009d6:	2301      	movs	r3, #1
 80009d8:	e00e      	b.n	80009f8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	2b0f      	cmp	r3, #15
 80009de:	d80a      	bhi.n	80009f6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e0:	2200      	movs	r2, #0
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 30ff 	mov.w	r0, #4294967295
 80009e8:	f000 f91d 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009ec:	4a06      	ldr	r2, [pc, #24]	@ (8000a08 <HAL_InitTick+0x68>)
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	e000      	b.n	80009f8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2400000c 	.word	0x2400000c
 8000a04:	24000000 	.word	0x24000000
 8000a08:	24000008 	.word	0x24000008

08000a0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a10:	4b06      	ldr	r3, [pc, #24]	@ (8000a2c <HAL_IncTick+0x20>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b06      	ldr	r3, [pc, #24]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	4a04      	ldr	r2, [pc, #16]	@ (8000a30 <HAL_IncTick+0x24>)
 8000a1e:	6013      	str	r3, [r2, #0]
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	2400000c 	.word	0x2400000c
 8000a30:	2400002c 	.word	0x2400002c

08000a34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  return uwTick;
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <HAL_GetTick+0x14>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
}
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	2400002c 	.word	0x2400002c

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff ffee 	bl	8000a34 <HAL_GetTick>
 8000a58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a64:	d005      	beq.n	8000a72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a66:	4b0a      	ldr	r3, [pc, #40]	@ (8000a90 <HAL_Delay+0x44>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	461a      	mov	r2, r3
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	4413      	add	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a72:	bf00      	nop
 8000a74:	f7ff ffde 	bl	8000a34 <HAL_GetTick>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	68fa      	ldr	r2, [r7, #12]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d8f7      	bhi.n	8000a74 <HAL_Delay+0x28>
  {
  }
}
 8000a84:	bf00      	nop
 8000a86:	bf00      	nop
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	2400000c 	.word	0x2400000c

08000a94 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000a98:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <HAL_GetREVID+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	0c1b      	lsrs	r3, r3, #16
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	5c001000 	.word	0x5c001000

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <__NVIC_SetPriorityGrouping+0x40>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ada:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <__NVIC_SetPriorityGrouping+0x40>)
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	60d3      	str	r3, [r2, #12]
}
 8000ae0:	bf00      	nop
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	e000ed00 	.word	0xe000ed00
 8000af0:	05fa0000 	.word	0x05fa0000

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	@ (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	@ (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	@ (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	88fb      	ldrh	r3, [r7, #6]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	@ 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	@ 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	@ (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c34:	f7ff ff5e 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3a:	687a      	ldr	r2, [r7, #4]
 8000c3c:	68b9      	ldr	r1, [r7, #8]
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f7ff ff90 	bl	8000b64 <NVIC_EncodePriority>
 8000c44:	4602      	mov	r2, r0
 8000c46:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c4a:	4611      	mov	r1, r2
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff5f 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}

08000c5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	b082      	sub	sp, #8
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff ffb2 	bl	8000bcc <SysTick_Config>
 8000c68:	4603      	mov	r3, r0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
	...

08000c74 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000c78:	f3bf 8f5f 	dmb	sy
}
 8000c7c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000c7e:	4b07      	ldr	r3, [pc, #28]	@ (8000c9c <HAL_MPU_Disable+0x28>)
 8000c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c82:	4a06      	ldr	r2, [pc, #24]	@ (8000c9c <HAL_MPU_Disable+0x28>)
 8000c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000c88:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_MPU_Disable+0x2c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	605a      	str	r2, [r3, #4]
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00
 8000ca0:	e000ed90 	.word	0xe000ed90

08000ca4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b083      	sub	sp, #12
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000cac:	4a0b      	ldr	r2, [pc, #44]	@ (8000cdc <HAL_MPU_Enable+0x38>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <HAL_MPU_Enable+0x3c>)
 8000cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cba:	4a09      	ldr	r2, [pc, #36]	@ (8000ce0 <HAL_MPU_Enable+0x3c>)
 8000cbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cc0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
}
 8000cc6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cc8:	f3bf 8f6f 	isb	sy
}
 8000ccc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed90 	.word	0xe000ed90
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	785a      	ldrb	r2, [r3, #1]
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_MPU_ConfigRegion+0x7c>)
 8000cf2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8000d60 <HAL_MPU_ConfigRegion+0x7c>)
 8000cf6:	691b      	ldr	r3, [r3, #16]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	@ (8000d60 <HAL_MPU_ConfigRegion+0x7c>)
 8000cfa:	f023 0301 	bic.w	r3, r3, #1
 8000cfe:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000d00:	4a17      	ldr	r2, [pc, #92]	@ (8000d60 <HAL_MPU_ConfigRegion+0x7c>)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	7b1b      	ldrb	r3, [r3, #12]
 8000d0c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	7adb      	ldrb	r3, [r3, #11]
 8000d12:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d14:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	7a9b      	ldrb	r3, [r3, #10]
 8000d1a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000d1c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	7b5b      	ldrb	r3, [r3, #13]
 8000d22:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000d24:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7b9b      	ldrb	r3, [r3, #14]
 8000d2a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000d2c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7bdb      	ldrb	r3, [r3, #15]
 8000d32:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000d34:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	7a5b      	ldrb	r3, [r3, #9]
 8000d3a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000d3c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	7a1b      	ldrb	r3, [r3, #8]
 8000d42:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000d44:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	7812      	ldrb	r2, [r2, #0]
 8000d4a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d4c:	4a04      	ldr	r2, [pc, #16]	@ (8000d60 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000d4e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000d50:	6113      	str	r3, [r2, #16]
}
 8000d52:	bf00      	nop
 8000d54:	370c      	adds	r7, #12
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	e000ed90 	.word	0xe000ed90

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b089      	sub	sp, #36	@ 0x24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8000d72:	4b89      	ldr	r3, [pc, #548]	@ (8000f98 <HAL_GPIO_Init+0x234>)
 8000d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8000d76:	e194      	b.n	80010a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	fa01 f303 	lsl.w	r3, r1, r3
 8000d84:	4013      	ands	r3, r2
 8000d86:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8000d88:	693b      	ldr	r3, [r7, #16]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	f000 8186 	beq.w	800109c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f003 0303 	and.w	r3, r3, #3
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d005      	beq.n	8000da8 <HAL_GPIO_Init+0x44>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0303 	and.w	r3, r3, #3
 8000da4:	2b02      	cmp	r3, #2
 8000da6:	d130      	bne.n	8000e0a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	2203      	movs	r2, #3
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	69ba      	ldr	r2, [r7, #24]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	68da      	ldr	r2, [r3, #12]
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4313      	orrs	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dde:	2201      	movs	r2, #1
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	091b      	lsrs	r3, r3, #4
 8000df4:	f003 0201 	and.w	r2, r3, #1
 8000df8:	69fb      	ldr	r3, [r7, #28]
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 0303 	and.w	r3, r3, #3
 8000e12:	2b03      	cmp	r3, #3
 8000e14:	d017      	beq.n	8000e46 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	68db      	ldr	r3, [r3, #12]
 8000e1a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	2203      	movs	r2, #3
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43db      	mvns	r3, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	69ba      	ldr	r2, [r7, #24]
 8000e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d123      	bne.n	8000e9a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	08da      	lsrs	r2, r3, #3
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3208      	adds	r2, #8
 8000e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	220f      	movs	r2, #15
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4013      	ands	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	f003 0307 	and.w	r3, r3, #7
 8000e80:	009b      	lsls	r3, r3, #2
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	08da      	lsrs	r2, r3, #3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3208      	adds	r2, #8
 8000e94:	69b9      	ldr	r1, [r7, #24]
 8000e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0203 	and.w	r2, r3, #3
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	f000 80e0 	beq.w	800109c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000edc:	4b2f      	ldr	r3, [pc, #188]	@ (8000f9c <HAL_GPIO_Init+0x238>)
 8000ede:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee2:	4a2e      	ldr	r2, [pc, #184]	@ (8000f9c <HAL_GPIO_Init+0x238>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eec:	4b2b      	ldr	r3, [pc, #172]	@ (8000f9c <HAL_GPIO_Init+0x238>)
 8000eee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000efa:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_GPIO_Init+0x23c>)
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	089b      	lsrs	r3, r3, #2
 8000f00:	3302      	adds	r3, #2
 8000f02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	f003 0303 	and.w	r3, r3, #3
 8000f0e:	009b      	lsls	r3, r3, #2
 8000f10:	220f      	movs	r2, #15
 8000f12:	fa02 f303 	lsl.w	r3, r2, r3
 8000f16:	43db      	mvns	r3, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a20      	ldr	r2, [pc, #128]	@ (8000fa4 <HAL_GPIO_Init+0x240>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d052      	beq.n	8000fcc <HAL_GPIO_Init+0x268>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <HAL_GPIO_Init+0x244>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d031      	beq.n	8000f92 <HAL_GPIO_Init+0x22e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <HAL_GPIO_Init+0x248>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d02b      	beq.n	8000f8e <HAL_GPIO_Init+0x22a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb0 <HAL_GPIO_Init+0x24c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d025      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <HAL_GPIO_Init+0x250>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d01f      	beq.n	8000f86 <HAL_GPIO_Init+0x222>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb8 <HAL_GPIO_Init+0x254>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d019      	beq.n	8000f82 <HAL_GPIO_Init+0x21e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a1a      	ldr	r2, [pc, #104]	@ (8000fbc <HAL_GPIO_Init+0x258>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0x21a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a19      	ldr	r2, [pc, #100]	@ (8000fc0 <HAL_GPIO_Init+0x25c>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d00d      	beq.n	8000f7a <HAL_GPIO_Init+0x216>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a18      	ldr	r2, [pc, #96]	@ (8000fc4 <HAL_GPIO_Init+0x260>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d007      	beq.n	8000f76 <HAL_GPIO_Init+0x212>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a17      	ldr	r2, [pc, #92]	@ (8000fc8 <HAL_GPIO_Init+0x264>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d101      	bne.n	8000f72 <HAL_GPIO_Init+0x20e>
 8000f6e:	2309      	movs	r3, #9
 8000f70:	e02d      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f72:	230a      	movs	r3, #10
 8000f74:	e02b      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f76:	2308      	movs	r3, #8
 8000f78:	e029      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e027      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f7e:	2306      	movs	r3, #6
 8000f80:	e025      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e023      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e021      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e01f      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e01d      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e01b      	b.n	8000fce <HAL_GPIO_Init+0x26a>
 8000f96:	bf00      	nop
 8000f98:	58000080 	.word	0x58000080
 8000f9c:	58024400 	.word	0x58024400
 8000fa0:	58000400 	.word	0x58000400
 8000fa4:	58020000 	.word	0x58020000
 8000fa8:	58020400 	.word	0x58020400
 8000fac:	58020800 	.word	0x58020800
 8000fb0:	58020c00 	.word	0x58020c00
 8000fb4:	58021000 	.word	0x58021000
 8000fb8:	58021400 	.word	0x58021400
 8000fbc:	58021800 	.word	0x58021800
 8000fc0:	58021c00 	.word	0x58021c00
 8000fc4:	58022000 	.word	0x58022000
 8000fc8:	58022400 	.word	0x58022400
 8000fcc:	2300      	movs	r3, #0
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	f002 0203 	and.w	r2, r2, #3
 8000fd4:	0092      	lsls	r2, r2, #2
 8000fd6:	4093      	lsls	r3, r2
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fde:	4938      	ldr	r1, [pc, #224]	@ (80010c0 <HAL_GPIO_Init+0x35c>)
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	089b      	lsrs	r3, r3, #2
 8000fe4:	3302      	adds	r3, #2
 8000fe6:	69ba      	ldr	r2, [r7, #24]
 8000fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d003      	beq.n	8001012 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4313      	orrs	r3, r2
 8001010:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001012:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001016:	69bb      	ldr	r3, [r7, #24]
 8001018:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800101a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001040:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	43db      	mvns	r3, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4013      	ands	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001060:	2b00      	cmp	r3, #0
 8001062:	d003      	beq.n	800106c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	4313      	orrs	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3301      	adds	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa22 f303 	lsr.w	r3, r2, r3
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	f47f ae63 	bne.w	8000d78 <HAL_GPIO_Init+0x14>
  }
}
 80010b2:	bf00      	nop
 80010b4:	bf00      	nop
 80010b6:	3724      	adds	r7, #36	@ 0x24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	58000400 	.word	0x58000400

080010c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	460b      	mov	r3, r1
 80010ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691a      	ldr	r2, [r3, #16]
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	4013      	ands	r3, r2
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d002      	beq.n	80010e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e001      	b.n	80010e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	3714      	adds	r7, #20
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
 8001100:	4613      	mov	r3, r2
 8001102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001104:	787b      	ldrb	r3, [r7, #1]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001110:	e003      	b.n	800111a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001112:	887b      	ldrh	r3, [r7, #2]
 8001114:	041a      	lsls	r2, r3, #16
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b084      	sub	sp, #16
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001130:	4b19      	ldr	r3, [pc, #100]	@ (8001198 <HAL_PWREx_ConfigSupply+0x70>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	f003 0304 	and.w	r3, r3, #4
 8001138:	2b04      	cmp	r3, #4
 800113a:	d00a      	beq.n	8001152 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800113c:	4b16      	ldr	r3, [pc, #88]	@ (8001198 <HAL_PWREx_ConfigSupply+0x70>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	429a      	cmp	r2, r3
 8001148:	d001      	beq.n	800114e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
 800114c:	e01f      	b.n	800118e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800114e:	2300      	movs	r3, #0
 8001150:	e01d      	b.n	800118e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001152:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <HAL_PWREx_ConfigSupply+0x70>)
 8001154:	68db      	ldr	r3, [r3, #12]
 8001156:	f023 0207 	bic.w	r2, r3, #7
 800115a:	490f      	ldr	r1, [pc, #60]	@ (8001198 <HAL_PWREx_ConfigSupply+0x70>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4313      	orrs	r3, r2
 8001160:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001162:	f7ff fc67 	bl	8000a34 <HAL_GetTick>
 8001166:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001168:	e009      	b.n	800117e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800116a:	f7ff fc63 	bl	8000a34 <HAL_GetTick>
 800116e:	4602      	mov	r2, r0
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001178:	d901      	bls.n	800117e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e007      	b.n	800118e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800117e:	4b06      	ldr	r3, [pc, #24]	@ (8001198 <HAL_PWREx_ConfigSupply+0x70>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800118a:	d1ee      	bne.n	800116a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800118c:	2300      	movs	r3, #0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	58024800 	.word	0x58024800

0800119c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08c      	sub	sp, #48	@ 0x30
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d102      	bne.n	80011b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	f000 bc48 	b.w	8001a40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0301 	and.w	r3, r3, #1
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	f000 8088 	beq.w	80012ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011be:	4b99      	ldr	r3, [pc, #612]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80011c0:	691b      	ldr	r3, [r3, #16]
 80011c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80011c8:	4b96      	ldr	r3, [pc, #600]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80011ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80011ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d0:	2b10      	cmp	r3, #16
 80011d2:	d007      	beq.n	80011e4 <HAL_RCC_OscConfig+0x48>
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011d6:	2b18      	cmp	r3, #24
 80011d8:	d111      	bne.n	80011fe <HAL_RCC_OscConfig+0x62>
 80011da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b8f      	ldr	r3, [pc, #572]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d06d      	beq.n	80012cc <HAL_RCC_OscConfig+0x130>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d169      	bne.n	80012cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	f000 bc21 	b.w	8001a40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001206:	d106      	bne.n	8001216 <HAL_RCC_OscConfig+0x7a>
 8001208:	4b86      	ldr	r3, [pc, #536]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a85      	ldr	r2, [pc, #532]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800120e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001212:	6013      	str	r3, [r2, #0]
 8001214:	e02e      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x9c>
 800121e:	4b81      	ldr	r3, [pc, #516]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a80      	ldr	r2, [pc, #512]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001224:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b7e      	ldr	r3, [pc, #504]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a7d      	ldr	r2, [pc, #500]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001230:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e01d      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001240:	d10c      	bne.n	800125c <HAL_RCC_OscConfig+0xc0>
 8001242:	4b78      	ldr	r3, [pc, #480]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	4a77      	ldr	r2, [pc, #476]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001248:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800124c:	6013      	str	r3, [r2, #0]
 800124e:	4b75      	ldr	r3, [pc, #468]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a74      	ldr	r2, [pc, #464]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001254:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e00b      	b.n	8001274 <HAL_RCC_OscConfig+0xd8>
 800125c:	4b71      	ldr	r3, [pc, #452]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a70      	ldr	r2, [pc, #448]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	4b6e      	ldr	r3, [pc, #440]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a6d      	ldr	r2, [pc, #436]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800126e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001272:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d013      	beq.n	80012a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800127c:	f7ff fbda 	bl	8000a34 <HAL_GetTick>
 8001280:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001284:	f7ff fbd6 	bl	8000a34 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b64      	cmp	r3, #100	@ 0x64
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e3d4      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001296:	4b63      	ldr	r3, [pc, #396]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0xe8>
 80012a2:	e014      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a4:	f7ff fbc6 	bl	8000a34 <HAL_GetTick>
 80012a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fbc2 	bl	8000a34 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e3c0      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80012be:	4b59      	ldr	r3, [pc, #356]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d1f0      	bne.n	80012ac <HAL_RCC_OscConfig+0x110>
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0302 	and.w	r3, r3, #2
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 80ca 	beq.w	8001470 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012dc:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80012de:	691b      	ldr	r3, [r3, #16]
 80012e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80012e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80012e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80012e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d007      	beq.n	8001302 <HAL_RCC_OscConfig+0x166>
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	2b18      	cmp	r3, #24
 80012f6:	d156      	bne.n	80013a6 <HAL_RCC_OscConfig+0x20a>
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d151      	bne.n	80013a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001302:	4b48      	ldr	r3, [pc, #288]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0304 	and.w	r3, r3, #4
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <HAL_RCC_OscConfig+0x17e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e392      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800131a:	4b42      	ldr	r3, [pc, #264]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f023 0219 	bic.w	r2, r3, #25
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	493f      	ldr	r1, [pc, #252]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001328:	4313      	orrs	r3, r2
 800132a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800132c:	f7ff fb82 	bl	8000a34 <HAL_GetTick>
 8001330:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001334:	f7ff fb7e 	bl	8000a34 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e37c      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001346:	4b37      	ldr	r3, [pc, #220]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001352:	f7ff fb9f 	bl	8000a94 <HAL_GetREVID>
 8001356:	4603      	mov	r3, r0
 8001358:	f241 0203 	movw	r2, #4099	@ 0x1003
 800135c:	4293      	cmp	r3, r2
 800135e:	d817      	bhi.n	8001390 <HAL_RCC_OscConfig+0x1f4>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	2b40      	cmp	r3, #64	@ 0x40
 8001366:	d108      	bne.n	800137a <HAL_RCC_OscConfig+0x1de>
 8001368:	4b2e      	ldr	r3, [pc, #184]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001370:	4a2c      	ldr	r2, [pc, #176]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001376:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001378:	e07a      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800137a:	4b2a      	ldr	r3, [pc, #168]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	691b      	ldr	r3, [r3, #16]
 8001386:	031b      	lsls	r3, r3, #12
 8001388:	4926      	ldr	r1, [pc, #152]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800138a:	4313      	orrs	r3, r2
 800138c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800138e:	e06f      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b24      	ldr	r3, [pc, #144]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	691b      	ldr	r3, [r3, #16]
 800139c:	061b      	lsls	r3, r3, #24
 800139e:	4921      	ldr	r1, [pc, #132]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a4:	e064      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	68db      	ldr	r3, [r3, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d047      	beq.n	800143e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80013ae:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 0219 	bic.w	r2, r3, #25
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	68db      	ldr	r3, [r3, #12]
 80013ba:	491a      	ldr	r1, [pc, #104]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80013bc:	4313      	orrs	r3, r2
 80013be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c0:	f7ff fb38 	bl	8000a34 <HAL_GetTick>
 80013c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013c6:	e008      	b.n	80013da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fb34 	bl	8000a34 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d901      	bls.n	80013da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e332      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80013da:	4b12      	ldr	r3, [pc, #72]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0304 	and.w	r3, r3, #4
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d0f0      	beq.n	80013c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e6:	f7ff fb55 	bl	8000a94 <HAL_GetREVID>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d819      	bhi.n	8001428 <HAL_RCC_OscConfig+0x28c>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	691b      	ldr	r3, [r3, #16]
 80013f8:	2b40      	cmp	r3, #64	@ 0x40
 80013fa:	d108      	bne.n	800140e <HAL_RCC_OscConfig+0x272>
 80013fc:	4b09      	ldr	r3, [pc, #36]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001404:	4a07      	ldr	r2, [pc, #28]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001406:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800140a:	6053      	str	r3, [r2, #4]
 800140c:	e030      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
 800140e:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	031b      	lsls	r3, r3, #12
 800141c:	4901      	ldr	r1, [pc, #4]	@ (8001424 <HAL_RCC_OscConfig+0x288>)
 800141e:	4313      	orrs	r3, r2
 8001420:	604b      	str	r3, [r1, #4]
 8001422:	e025      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
 8001424:	58024400 	.word	0x58024400
 8001428:	4b9a      	ldr	r3, [pc, #616]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	061b      	lsls	r3, r3, #24
 8001436:	4997      	ldr	r1, [pc, #604]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001438:	4313      	orrs	r3, r2
 800143a:	604b      	str	r3, [r1, #4]
 800143c:	e018      	b.n	8001470 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b95      	ldr	r3, [pc, #596]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4a94      	ldr	r2, [pc, #592]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800144a:	f7ff faf3 	bl	8000a34 <HAL_GetTick>
 800144e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001450:	e008      	b.n	8001464 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001452:	f7ff faef 	bl	8000a34 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d901      	bls.n	8001464 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e2ed      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001464:	4b8b      	ldr	r3, [pc, #556]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1f0      	bne.n	8001452 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a9 	beq.w	80015d0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	4b85      	ldr	r3, [pc, #532]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001486:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001488:	4b82      	ldr	r3, [pc, #520]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800148a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	2b08      	cmp	r3, #8
 8001492:	d007      	beq.n	80014a4 <HAL_RCC_OscConfig+0x308>
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	2b18      	cmp	r3, #24
 8001498:	d13a      	bne.n	8001510 <HAL_RCC_OscConfig+0x374>
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d135      	bne.n	8001510 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014a4:	4b7b      	ldr	r3, [pc, #492]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x320>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	2b80      	cmp	r3, #128	@ 0x80
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e2c1      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014bc:	f7ff faea 	bl	8000a94 <HAL_GetREVID>
 80014c0:	4603      	mov	r3, r0
 80014c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d817      	bhi.n	80014fa <HAL_RCC_OscConfig+0x35e>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1b      	ldr	r3, [r3, #32]
 80014ce:	2b20      	cmp	r3, #32
 80014d0:	d108      	bne.n	80014e4 <HAL_RCC_OscConfig+0x348>
 80014d2:	4b70      	ldr	r3, [pc, #448]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80014da:	4a6e      	ldr	r2, [pc, #440]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80014e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014e2:	e075      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	069b      	lsls	r3, r3, #26
 80014f2:	4968      	ldr	r1, [pc, #416]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80014f8:	e06a      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80014fa:	4b66      	ldr	r3, [pc, #408]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	061b      	lsls	r3, r3, #24
 8001508:	4962      	ldr	r1, [pc, #392]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800150a:	4313      	orrs	r3, r2
 800150c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800150e:	e05f      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	69db      	ldr	r3, [r3, #28]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d042      	beq.n	800159e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001518:	4b5e      	ldr	r3, [pc, #376]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a5d      	ldr	r2, [pc, #372]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800151e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001524:	f7ff fa86 	bl	8000a34 <HAL_GetTick>
 8001528:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800152a:	e008      	b.n	800153e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800152c:	f7ff fa82 	bl	8000a34 <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	2b02      	cmp	r3, #2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e280      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800153e:	4b55      	ldr	r3, [pc, #340]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d0f0      	beq.n	800152c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800154a:	f7ff faa3 	bl	8000a94 <HAL_GetREVID>
 800154e:	4603      	mov	r3, r0
 8001550:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001554:	4293      	cmp	r3, r2
 8001556:	d817      	bhi.n	8001588 <HAL_RCC_OscConfig+0x3ec>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	2b20      	cmp	r3, #32
 800155e:	d108      	bne.n	8001572 <HAL_RCC_OscConfig+0x3d6>
 8001560:	4b4c      	ldr	r3, [pc, #304]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001568:	4a4a      	ldr	r2, [pc, #296]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800156a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800156e:	6053      	str	r3, [r2, #4]
 8001570:	e02e      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
 8001572:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	069b      	lsls	r3, r3, #26
 8001580:	4944      	ldr	r1, [pc, #272]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
 8001586:	e023      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
 8001588:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6a1b      	ldr	r3, [r3, #32]
 8001594:	061b      	lsls	r3, r3, #24
 8001596:	493f      	ldr	r1, [pc, #252]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e018      	b.n	80015d0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800159e:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a3c      	ldr	r2, [pc, #240]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80015a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80015a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fa43 	bl	8000a34 <HAL_GetTick>
 80015ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80015b2:	f7ff fa3f 	bl	8000a34 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e23d      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80015c4:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f0      	bne.n	80015b2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d036      	beq.n	800164a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	695b      	ldr	r3, [r3, #20]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d019      	beq.n	8001618 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80015e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015e8:	4a2a      	ldr	r2, [pc, #168]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 80015ea:	f043 0301 	orr.w	r3, r3, #1
 80015ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f0:	f7ff fa20 	bl	8000a34 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fa1c 	bl	8000a34 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e21a      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800160a:	4b22      	ldr	r3, [pc, #136]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800160c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x45c>
 8001616:	e018      	b.n	800164a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001618:	4b1e      	ldr	r3, [pc, #120]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800161a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800161c:	4a1d      	ldr	r2, [pc, #116]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 800161e:	f023 0301 	bic.w	r3, r3, #1
 8001622:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001624:	f7ff fa06 	bl	8000a34 <HAL_GetTick>
 8001628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fa02 	bl	8000a34 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e200      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800163e:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001640:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0320 	and.w	r3, r3, #32
 8001652:	2b00      	cmp	r3, #0
 8001654:	d039      	beq.n	80016ca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d01c      	beq.n	8001698 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800165e:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a0c      	ldr	r2, [pc, #48]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001668:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800166a:	f7ff f9e3 	bl	8000a34 <HAL_GetTick>
 800166e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001670:	e008      	b.n	8001684 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001672:	f7ff f9df 	bl	8000a34 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	2b02      	cmp	r3, #2
 800167e:	d901      	bls.n	8001684 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001680:	2303      	movs	r3, #3
 8001682:	e1dd      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001684:	4b03      	ldr	r3, [pc, #12]	@ (8001694 <HAL_RCC_OscConfig+0x4f8>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d0f0      	beq.n	8001672 <HAL_RCC_OscConfig+0x4d6>
 8001690:	e01b      	b.n	80016ca <HAL_RCC_OscConfig+0x52e>
 8001692:	bf00      	nop
 8001694:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001698:	4b9b      	ldr	r3, [pc, #620]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a9a      	ldr	r2, [pc, #616]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800169e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80016a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80016a4:	f7ff f9c6 	bl	8000a34 <HAL_GetTick>
 80016a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016ac:	f7ff f9c2 	bl	8000a34 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e1c0      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80016be:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f0      	bne.n	80016ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8081 	beq.w	80017da <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80016d8:	4b8c      	ldr	r3, [pc, #560]	@ (800190c <HAL_RCC_OscConfig+0x770>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a8b      	ldr	r2, [pc, #556]	@ (800190c <HAL_RCC_OscConfig+0x770>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80016e4:	f7ff f9a6 	bl	8000a34 <HAL_GetTick>
 80016e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ec:	f7ff f9a2 	bl	8000a34 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b64      	cmp	r3, #100	@ 0x64
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e1a0      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80016fe:	4b83      	ldr	r3, [pc, #524]	@ (800190c <HAL_RCC_OscConfig+0x770>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x584>
 8001712:	4b7d      	ldr	r3, [pc, #500]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001714:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001716:	4a7c      	ldr	r2, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	6713      	str	r3, [r2, #112]	@ 0x70
 800171e:	e02d      	b.n	800177c <HAL_RCC_OscConfig+0x5e0>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <HAL_RCC_OscConfig+0x5a6>
 8001728:	4b77      	ldr	r3, [pc, #476]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800172a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172c:	4a76      	ldr	r2, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800172e:	f023 0301 	bic.w	r3, r3, #1
 8001732:	6713      	str	r3, [r2, #112]	@ 0x70
 8001734:	4b74      	ldr	r3, [pc, #464]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a73      	ldr	r2, [pc, #460]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800173a:	f023 0304 	bic.w	r3, r3, #4
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001740:	e01c      	b.n	800177c <HAL_RCC_OscConfig+0x5e0>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2b05      	cmp	r3, #5
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x5c8>
 800174a:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800174c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800174e:	4a6e      	ldr	r2, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001750:	f043 0304 	orr.w	r3, r3, #4
 8001754:	6713      	str	r3, [r2, #112]	@ 0x70
 8001756:	4b6c      	ldr	r3, [pc, #432]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800175a:	4a6b      	ldr	r2, [pc, #428]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6713      	str	r3, [r2, #112]	@ 0x70
 8001762:	e00b      	b.n	800177c <HAL_RCC_OscConfig+0x5e0>
 8001764:	4b68      	ldr	r3, [pc, #416]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001766:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001768:	4a67      	ldr	r2, [pc, #412]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800176a:	f023 0301 	bic.w	r3, r3, #1
 800176e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001770:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001772:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001774:	4a64      	ldr	r2, [pc, #400]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001776:	f023 0304 	bic.w	r3, r3, #4
 800177a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d015      	beq.n	80017b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001784:	f7ff f956 	bl	8000a34 <HAL_GetTick>
 8001788:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800178a:	e00a      	b.n	80017a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7ff f952 	bl	8000a34 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179a:	4293      	cmp	r3, r2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e14e      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a2:	4b59      	ldr	r3, [pc, #356]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80017a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0ee      	beq.n	800178c <HAL_RCC_OscConfig+0x5f0>
 80017ae:	e014      	b.n	80017da <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b0:	f7ff f940 	bl	8000a34 <HAL_GetTick>
 80017b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017b8:	f7ff f93c 	bl	8000a34 <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e138      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80017d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ee      	bne.n	80017b8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 812d 	beq.w	8001a3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80017e4:	4b48      	ldr	r3, [pc, #288]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017ec:	2b18      	cmp	r3, #24
 80017ee:	f000 80bd 	beq.w	800196c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	f040 809e 	bne.w	8001938 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fc:	4b42      	ldr	r3, [pc, #264]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a41      	ldr	r2, [pc, #260]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001802:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001806:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f914 	bl	8000a34 <HAL_GetTick>
 800180c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001810:	f7ff f910 	bl	8000a34 <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e10e      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001822:	4b39      	ldr	r3, [pc, #228]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800182e:	4b36      	ldr	r3, [pc, #216]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001830:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001832:	4b37      	ldr	r3, [pc, #220]	@ (8001910 <HAL_RCC_OscConfig+0x774>)
 8001834:	4013      	ands	r3, r2
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800183e:	0112      	lsls	r2, r2, #4
 8001840:	430a      	orrs	r2, r1
 8001842:	4931      	ldr	r1, [pc, #196]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001844:	4313      	orrs	r3, r2
 8001846:	628b      	str	r3, [r1, #40]	@ 0x28
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184c:	3b01      	subs	r3, #1
 800184e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001856:	3b01      	subs	r3, #1
 8001858:	025b      	lsls	r3, r3, #9
 800185a:	b29b      	uxth	r3, r3
 800185c:	431a      	orrs	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001862:	3b01      	subs	r3, #1
 8001864:	041b      	lsls	r3, r3, #16
 8001866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800186a:	431a      	orrs	r2, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001870:	3b01      	subs	r3, #1
 8001872:	061b      	lsls	r3, r3, #24
 8001874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001878:	4923      	ldr	r1, [pc, #140]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800187a:	4313      	orrs	r3, r2
 800187c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800187e:	4b22      	ldr	r3, [pc, #136]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001882:	4a21      	ldr	r2, [pc, #132]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 8001884:	f023 0301 	bic.w	r3, r3, #1
 8001888:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800188a:	4b1f      	ldr	r3, [pc, #124]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800188c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800188e:	4b21      	ldr	r3, [pc, #132]	@ (8001914 <HAL_RCC_OscConfig+0x778>)
 8001890:	4013      	ands	r3, r2
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	491b      	ldr	r1, [pc, #108]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 800189a:	4313      	orrs	r3, r2
 800189c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800189e:	4b1a      	ldr	r3, [pc, #104]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a2:	f023 020c 	bic.w	r2, r3, #12
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4917      	ldr	r1, [pc, #92]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018ac:	4313      	orrs	r3, r2
 80018ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80018b0:	4b15      	ldr	r3, [pc, #84]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018b4:	f023 0202 	bic.w	r2, r3, #2
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018bc:	4912      	ldr	r1, [pc, #72]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80018c2:	4b11      	ldr	r3, [pc, #68]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018c6:	4a10      	ldr	r2, [pc, #64]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80018ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80018da:	4b0b      	ldr	r3, [pc, #44]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80018e6:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018f2:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a04      	ldr	r2, [pc, #16]	@ (8001908 <HAL_RCC_OscConfig+0x76c>)
 80018f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f899 	bl	8000a34 <HAL_GetTick>
 8001902:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001904:	e011      	b.n	800192a <HAL_RCC_OscConfig+0x78e>
 8001906:	bf00      	nop
 8001908:	58024400 	.word	0x58024400
 800190c:	58024800 	.word	0x58024800
 8001910:	fffffc0c 	.word	0xfffffc0c
 8001914:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f88c 	bl	8000a34 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e08a      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800192a:	4b47      	ldr	r3, [pc, #284]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x77c>
 8001936:	e082      	b.n	8001a3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001938:	4b43      	ldr	r3, [pc, #268]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a42      	ldr	r2, [pc, #264]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 800193e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001944:	f7ff f876 	bl	8000a34 <HAL_GetTick>
 8001948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800194a:	e008      	b.n	800195e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7ff f872 	bl	8000a34 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b02      	cmp	r3, #2
 8001958:	d901      	bls.n	800195e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e070      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800195e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1f0      	bne.n	800194c <HAL_RCC_OscConfig+0x7b0>
 800196a:	e068      	b.n	8001a3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800196c:	4b36      	ldr	r3, [pc, #216]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001972:	4b35      	ldr	r3, [pc, #212]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001976:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197c:	2b01      	cmp	r3, #1
 800197e:	d031      	beq.n	80019e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	f003 0203 	and.w	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800198a:	429a      	cmp	r2, r3
 800198c:	d12a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199a:	429a      	cmp	r2, r3
 800199c:	d122      	bne.n	80019e4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d11a      	bne.n	80019e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	0a5b      	lsrs	r3, r3, #9
 80019b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80019bc:	429a      	cmp	r2, r3
 80019be:	d111      	bne.n	80019e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80019cc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d108      	bne.n	80019e4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	0e1b      	lsrs	r3, r3, #24
 80019d6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019de:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80019e0:	429a      	cmp	r2, r3
 80019e2:	d001      	beq.n	80019e8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80019e4:	2301      	movs	r3, #1
 80019e6:	e02b      	b.n	8001a40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80019e8:	4b17      	ldr	r3, [pc, #92]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 80019ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ec:	08db      	lsrs	r3, r3, #3
 80019ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80019f2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	429a      	cmp	r2, r3
 80019fc:	d01f      	beq.n	8001a3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a02:	4a11      	ldr	r2, [pc, #68]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a04:	f023 0301 	bic.w	r3, r3, #1
 8001a08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a0a:	f7ff f813 	bl	8000a34 <HAL_GetTick>
 8001a0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001a10:	bf00      	nop
 8001a12:	f7ff f80f 	bl	8000a34 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d0f9      	beq.n	8001a12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a22:	4b0a      	ldr	r3, [pc, #40]	@ (8001a4c <HAL_RCC_OscConfig+0x8b0>)
 8001a24:	4013      	ands	r3, r2
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001a2a:	00d2      	lsls	r2, r2, #3
 8001a2c:	4906      	ldr	r1, [pc, #24]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001a32:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a36:	4a04      	ldr	r2, [pc, #16]	@ (8001a48 <HAL_RCC_OscConfig+0x8ac>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3730      	adds	r7, #48	@ 0x30
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	58024400 	.word	0x58024400
 8001a4c:	ffff0007 	.word	0xffff0007

08001a50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e19c      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b8a      	ldr	r3, [pc, #552]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d910      	bls.n	8001a94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b87      	ldr	r3, [pc, #540]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 020f 	bic.w	r2, r3, #15
 8001a7a:	4985      	ldr	r1, [pc, #532]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a82:	4b83      	ldr	r3, [pc, #524]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d001      	beq.n	8001a94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a90:	2301      	movs	r3, #1
 8001a92:	e184      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0304 	and.w	r3, r3, #4
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d010      	beq.n	8001ac2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691a      	ldr	r2, [r3, #16]
 8001aa4:	4b7b      	ldr	r3, [pc, #492]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d908      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ab0:	4b78      	ldr	r3, [pc, #480]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	691b      	ldr	r3, [r3, #16]
 8001abc:	4975      	ldr	r1, [pc, #468]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d010      	beq.n	8001af0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695a      	ldr	r2, [r3, #20]
 8001ad2:	4b70      	ldr	r3, [pc, #448]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001ad4:	69db      	ldr	r3, [r3, #28]
 8001ad6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d908      	bls.n	8001af0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ade:	4b6d      	ldr	r3, [pc, #436]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	496a      	ldr	r1, [pc, #424]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0310 	and.w	r3, r3, #16
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d010      	beq.n	8001b1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	699a      	ldr	r2, [r3, #24]
 8001b00:	4b64      	ldr	r3, [pc, #400]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b02:	69db      	ldr	r3, [r3, #28]
 8001b04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d908      	bls.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001b0c:	4b61      	ldr	r3, [pc, #388]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	495e      	ldr	r1, [pc, #376]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0320 	and.w	r3, r3, #32
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	69da      	ldr	r2, [r3, #28]
 8001b2e:	4b59      	ldr	r3, [pc, #356]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b30:	6a1b      	ldr	r3, [r3, #32]
 8001b32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d908      	bls.n	8001b4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001b3a:	4b56      	ldr	r3, [pc, #344]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	4953      	ldr	r1, [pc, #332]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d010      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	68da      	ldr	r2, [r3, #12]
 8001b5c:	4b4d      	ldr	r3, [pc, #308]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d908      	bls.n	8001b7a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b68:	4b4a      	ldr	r3, [pc, #296]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b6a:	699b      	ldr	r3, [r3, #24]
 8001b6c:	f023 020f 	bic.w	r2, r3, #15
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4947      	ldr	r1, [pc, #284]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d055      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001b86:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	4940      	ldr	r1, [pc, #256]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001b94:	4313      	orrs	r3, r2
 8001b96:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d107      	bne.n	8001bb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ba0:	4b3c      	ldr	r3, [pc, #240]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d121      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0f6      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d107      	bne.n	8001bc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb8:	4b36      	ldr	r3, [pc, #216]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d115      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e0ea      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d107      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bd0:	4b30      	ldr	r3, [pc, #192]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d109      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0de      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001be0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e0d6      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bf0:	4b28      	ldr	r3, [pc, #160]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f023 0207 	bic.w	r2, r3, #7
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4925      	ldr	r1, [pc, #148]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c02:	f7fe ff17 	bl	8000a34 <HAL_GetTick>
 8001c06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c0a:	f7fe ff13 	bl	8000a34 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0be      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001c22:	691b      	ldr	r3, [r3, #16]
 8001c24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d1eb      	bne.n	8001c0a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d010      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	4b14      	ldr	r3, [pc, #80]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	f003 030f 	and.w	r3, r3, #15
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d208      	bcs.n	8001c60 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4e:	4b11      	ldr	r3, [pc, #68]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001c50:	699b      	ldr	r3, [r3, #24]
 8001c52:	f023 020f 	bic.w	r2, r3, #15
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	490e      	ldr	r1, [pc, #56]	@ (8001c94 <HAL_RCC_ClockConfig+0x244>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c60:	4b0b      	ldr	r3, [pc, #44]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 030f 	and.w	r3, r3, #15
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d214      	bcs.n	8001c98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c6e:	4b08      	ldr	r3, [pc, #32]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f023 020f 	bic.w	r2, r3, #15
 8001c76:	4906      	ldr	r1, [pc, #24]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	4b04      	ldr	r3, [pc, #16]	@ (8001c90 <HAL_RCC_ClockConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d005      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e086      	b.n	8001d9e <HAL_RCC_ClockConfig+0x34e>
 8001c90:	52002000 	.word	0x52002000
 8001c94:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d010      	beq.n	8001cc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d208      	bcs.n	8001cc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cb4:	4b3c      	ldr	r3, [pc, #240]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	4939      	ldr	r1, [pc, #228]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0308 	and.w	r3, r3, #8
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d010      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	4b34      	ldr	r3, [pc, #208]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d208      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ce2:	4b31      	ldr	r3, [pc, #196]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	492e      	ldr	r1, [pc, #184]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d010      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699a      	ldr	r2, [r3, #24]
 8001d04:	4b28      	ldr	r3, [pc, #160]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d208      	bcs.n	8001d22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d12:	69db      	ldr	r3, [r3, #28]
 8001d14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4922      	ldr	r1, [pc, #136]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0320 	and.w	r3, r3, #32
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d010      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	69da      	ldr	r2, [r3, #28]
 8001d32:	4b1d      	ldr	r3, [pc, #116]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d34:	6a1b      	ldr	r3, [r3, #32]
 8001d36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d208      	bcs.n	8001d50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d40:	6a1b      	ldr	r3, [r3, #32]
 8001d42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69db      	ldr	r3, [r3, #28]
 8001d4a:	4917      	ldr	r1, [pc, #92]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001d50:	f000 f834 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	0a1b      	lsrs	r3, r3, #8
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	4912      	ldr	r1, [pc, #72]	@ (8001dac <HAL_RCC_ClockConfig+0x35c>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <HAL_RCC_ClockConfig+0x358>)
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	4a0d      	ldr	r2, [pc, #52]	@ (8001dac <HAL_RCC_ClockConfig+0x35c>)
 8001d78:	5cd3      	ldrb	r3, [r2, r3]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
 8001d84:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_RCC_ClockConfig+0x360>)
 8001d86:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001d88:	4a0a      	ldr	r2, [pc, #40]	@ (8001db4 <HAL_RCC_ClockConfig+0x364>)
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <HAL_RCC_ClockConfig+0x368>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fe04 	bl	80009a0 <HAL_InitTick>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	58024400 	.word	0x58024400
 8001dac:	08002120 	.word	0x08002120
 8001db0:	24000004 	.word	0x24000004
 8001db4:	24000000 	.word	0x24000000
 8001db8:	24000008 	.word	0x24000008

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc2:	4bb3      	ldr	r3, [pc, #716]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001dc4:	691b      	ldr	r3, [r3, #16]
 8001dc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dca:	2b18      	cmp	r3, #24
 8001dcc:	f200 8155 	bhi.w	800207a <HAL_RCC_GetSysClockFreq+0x2be>
 8001dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001dd8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd6:	bf00      	nop
 8001dd8:	08001e3d 	.word	0x08001e3d
 8001ddc:	0800207b 	.word	0x0800207b
 8001de0:	0800207b 	.word	0x0800207b
 8001de4:	0800207b 	.word	0x0800207b
 8001de8:	0800207b 	.word	0x0800207b
 8001dec:	0800207b 	.word	0x0800207b
 8001df0:	0800207b 	.word	0x0800207b
 8001df4:	0800207b 	.word	0x0800207b
 8001df8:	08001e63 	.word	0x08001e63
 8001dfc:	0800207b 	.word	0x0800207b
 8001e00:	0800207b 	.word	0x0800207b
 8001e04:	0800207b 	.word	0x0800207b
 8001e08:	0800207b 	.word	0x0800207b
 8001e0c:	0800207b 	.word	0x0800207b
 8001e10:	0800207b 	.word	0x0800207b
 8001e14:	0800207b 	.word	0x0800207b
 8001e18:	08001e69 	.word	0x08001e69
 8001e1c:	0800207b 	.word	0x0800207b
 8001e20:	0800207b 	.word	0x0800207b
 8001e24:	0800207b 	.word	0x0800207b
 8001e28:	0800207b 	.word	0x0800207b
 8001e2c:	0800207b 	.word	0x0800207b
 8001e30:	0800207b 	.word	0x0800207b
 8001e34:	0800207b 	.word	0x0800207b
 8001e38:	08001e6f 	.word	0x08001e6f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001e3c:	4b94      	ldr	r3, [pc, #592]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0320 	and.w	r3, r3, #32
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d009      	beq.n	8001e5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001e48:	4b91      	ldr	r3, [pc, #580]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	08db      	lsrs	r3, r3, #3
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	4a90      	ldr	r2, [pc, #576]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e54:	fa22 f303 	lsr.w	r3, r2, r3
 8001e58:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8001e5a:	e111      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8001e5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001e5e:	61bb      	str	r3, [r7, #24]
      break;
 8001e60:	e10e      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8001e62:	4b8d      	ldr	r3, [pc, #564]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8001e64:	61bb      	str	r3, [r7, #24]
      break;
 8001e66:	e10b      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8001e68:	4b8c      	ldr	r3, [pc, #560]	@ (800209c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8001e6a:	61bb      	str	r3, [r7, #24]
      break;
 8001e6c:	e108      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8001e6e:	4b88      	ldr	r3, [pc, #544]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	f003 0303 	and.w	r3, r3, #3
 8001e76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8001e78:	4b85      	ldr	r3, [pc, #532]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e7c:	091b      	lsrs	r3, r3, #4
 8001e7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001e82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8001e84:	4b82      	ldr	r3, [pc, #520]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8001e8e:	4b80      	ldr	r3, [pc, #512]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e92:	08db      	lsrs	r3, r3, #3
 8001e94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e98:	68fa      	ldr	r2, [r7, #12]
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	ee07 3a90 	vmov	s15, r3
 8001ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	f000 80e1 	beq.w	8002074 <HAL_RCC_GetSysClockFreq+0x2b8>
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	f000 8083 	beq.w	8001fc0 <HAL_RCC_GetSysClockFreq+0x204>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	f200 80a1 	bhi.w	8002004 <HAL_RCC_GetSysClockFreq+0x248>
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x114>
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d056      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x1c0>
 8001ece:	e099      	b.n	8002004 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d02d      	beq.n	8001f38 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8001edc:	4b6c      	ldr	r3, [pc, #432]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	08db      	lsrs	r3, r3, #3
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	4a6b      	ldr	r2, [pc, #428]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8001eec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	ee07 3a90 	vmov	s15, r3
 8001efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f06:	4b62      	ldr	r3, [pc, #392]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	ee07 3a90 	vmov	s15, r3
 8001f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f1a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80020a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f32:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8001f36:	e087      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f42:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80020a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8001f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f4a:	4b51      	ldr	r3, [pc, #324]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f52:	ee07 3a90 	vmov	s15, r3
 8001f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8001f5e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80020a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001f6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001f7a:	e065      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	ee07 3a90 	vmov	s15, r3
 8001f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f86:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80020a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8001f8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001f8e:	4b40      	ldr	r3, [pc, #256]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f96:	ee07 3a90 	vmov	s15, r3
 8001f9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001f9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fa2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80020a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001faa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001fae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001fb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001fb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8001fbe:	e043      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	ee07 3a90 	vmov	s15, r3
 8001fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80020ac <HAL_RCC_GetSysClockFreq+0x2f0>
 8001fce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001fd2:	4b2f      	ldr	r3, [pc, #188]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fda:	ee07 3a90 	vmov	s15, r3
 8001fde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001fe2:	ed97 6a02 	vldr	s12, [r7, #8]
 8001fe6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80020a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8001fea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8001fee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001ff2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001ffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002002:	e021      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800200e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80020a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002012:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002016:	4b1e      	ldr	r3, [pc, #120]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800201e:	ee07 3a90 	vmov	s15, r3
 8002022:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002026:	ed97 6a02 	vldr	s12, [r7, #8]
 800202a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80020a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800202e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002032:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800203a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002046:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002048:	4b11      	ldr	r3, [pc, #68]	@ (8002090 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800204a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204c:	0a5b      	lsrs	r3, r3, #9
 800204e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002052:	3301      	adds	r3, #1
 8002054:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	ee07 3a90 	vmov	s15, r3
 800205c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002060:	edd7 6a07 	vldr	s13, [r7, #28]
 8002064:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002068:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800206c:	ee17 3a90 	vmov	r3, s15
 8002070:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	61bb      	str	r3, [r7, #24]
      break;
 8002078:	e002      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800207a:	4b07      	ldr	r3, [pc, #28]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800207c:	61bb      	str	r3, [r7, #24]
      break;
 800207e:	bf00      	nop
  }

  return sysclockfreq;
 8002080:	69bb      	ldr	r3, [r7, #24]
}
 8002082:	4618      	mov	r0, r3
 8002084:	3724      	adds	r7, #36	@ 0x24
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	58024400 	.word	0x58024400
 8002094:	03d09000 	.word	0x03d09000
 8002098:	003d0900 	.word	0x003d0900
 800209c:	017d7840 	.word	0x017d7840
 80020a0:	46000000 	.word	0x46000000
 80020a4:	4c742400 	.word	0x4c742400
 80020a8:	4a742400 	.word	0x4a742400
 80020ac:	4bbebc20 	.word	0x4bbebc20

080020b0 <memset>:
 80020b0:	4402      	add	r2, r0
 80020b2:	4603      	mov	r3, r0
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d100      	bne.n	80020ba <memset+0xa>
 80020b8:	4770      	bx	lr
 80020ba:	f803 1b01 	strb.w	r1, [r3], #1
 80020be:	e7f9      	b.n	80020b4 <memset+0x4>

080020c0 <__libc_init_array>:
 80020c0:	b570      	push	{r4, r5, r6, lr}
 80020c2:	4d0d      	ldr	r5, [pc, #52]	@ (80020f8 <__libc_init_array+0x38>)
 80020c4:	4c0d      	ldr	r4, [pc, #52]	@ (80020fc <__libc_init_array+0x3c>)
 80020c6:	1b64      	subs	r4, r4, r5
 80020c8:	10a4      	asrs	r4, r4, #2
 80020ca:	2600      	movs	r6, #0
 80020cc:	42a6      	cmp	r6, r4
 80020ce:	d109      	bne.n	80020e4 <__libc_init_array+0x24>
 80020d0:	4d0b      	ldr	r5, [pc, #44]	@ (8002100 <__libc_init_array+0x40>)
 80020d2:	4c0c      	ldr	r4, [pc, #48]	@ (8002104 <__libc_init_array+0x44>)
 80020d4:	f000 f818 	bl	8002108 <_init>
 80020d8:	1b64      	subs	r4, r4, r5
 80020da:	10a4      	asrs	r4, r4, #2
 80020dc:	2600      	movs	r6, #0
 80020de:	42a6      	cmp	r6, r4
 80020e0:	d105      	bne.n	80020ee <__libc_init_array+0x2e>
 80020e2:	bd70      	pop	{r4, r5, r6, pc}
 80020e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020e8:	4798      	blx	r3
 80020ea:	3601      	adds	r6, #1
 80020ec:	e7ee      	b.n	80020cc <__libc_init_array+0xc>
 80020ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f2:	4798      	blx	r3
 80020f4:	3601      	adds	r6, #1
 80020f6:	e7f2      	b.n	80020de <__libc_init_array+0x1e>
 80020f8:	08002130 	.word	0x08002130
 80020fc:	08002130 	.word	0x08002130
 8002100:	08002130 	.word	0x08002130
 8002104:	08002134 	.word	0x08002134

08002108 <_init>:
 8002108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800210a:	bf00      	nop
 800210c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800210e:	bc08      	pop	{r3}
 8002110:	469e      	mov	lr, r3
 8002112:	4770      	bx	lr

08002114 <_fini>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	bf00      	nop
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr
